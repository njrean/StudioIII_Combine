
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800cbb0  0800cbb0  0001cbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc00  0800cc00  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc08  0800cc08  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800cc10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000140  0800cd4c  00020140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800cd4c  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001582f  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  0003599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a88  00000000  00000000  0003a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013357  00000000  00000000  00050da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918b6  00000000  00000000  000640f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f59ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  000f5a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fa548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000140 	.word	0x20000140
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cb94 	.word	0x0800cb94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000144 	.word	0x20000144
 80001d4:	0800cb94 	.word	0x0800cb94

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 f98b 	bl	80051b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f937 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fb85 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fb5b 	bl	8001564 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f999 	bl	80011e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9c5 	bl	8001240 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb05 	bl	80014c4 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa61 	bl	8001380 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fab3 	bl	8001428 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fb23 	bl	800150c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f004 f9e8 	bl	800529c <HAL_Delay>
  setmatrix();
 8000ecc:	f000 fdf6 	bl	8001abc <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	4879      	ldr	r0, [pc, #484]	; (80010b8 <main+0x220>)
 8000ed2:	f008 f8c9 	bl	8009068 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4877      	ldr	r0, [pc, #476]	; (80010b8 <main+0x220>)
 8000eda:	f008 f9db 	bl	8009294 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	4876      	ldr	r0, [pc, #472]	; (80010bc <main+0x224>)
 8000ee2:	f008 fb2d 	bl	8009540 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	4876      	ldr	r0, [pc, #472]	; (80010c0 <main+0x228>)
 8000ee8:	f008 f918 	bl	800911c <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	4875      	ldr	r0, [pc, #468]	; (80010c4 <main+0x22c>)
 8000eee:	f008 f915 	bl	800911c <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4874      	ldr	r0, [pc, #464]	; (80010c8 <main+0x230>)
 8000ef8:	f005 f8b2 	bl	8006060 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4b73      	ldr	r3, [pc, #460]	; (80010cc <main+0x234>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fb9 	.word	0x08000fb9
 8000f10:	08000f33 	.word	0x08000f33
 8000f14:	08001053 	.word	0x08001053
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f63 	.word	0x08000f63
 8000f24:	08000fa3 	.word	0x08000fa3
		case Main:
			UART();
 8000f28:	f003 f81a 	bl	8003f60 <UART>
			ReadEncoder();
 8000f2c:	f000 fc44 	bl	80017b8 <ReadEncoder>
			break;
 8000f30:	e0bb      	b.n	80010aa <main+0x212>
		case Home:
			UART();
 8000f32:	f003 f815 	bl	8003f60 <UART>
			ReadEncoder();
 8000f36:	f000 fc3f 	bl	80017b8 <ReadEncoder>
			SetHome();
 8000f3a:	f000 fc89 	bl	8001850 <SetHome>
			break;
 8000f3e:	e0b4      	b.n	80010aa <main+0x212>
		case Emergency:
			UART();
 8000f40:	f003 f80e 	bl	8003f60 <UART>
			if(Emergency_status == 1){
 8000f44:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <main+0x238>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <main+0xc2>
				Arm_State = Emergency;
 8000f4c:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <main+0x234>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000f52:	4b60      	ldr	r3, [pc, #384]	; (80010d4 <main+0x23c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000f58:	e0a7      	b.n	80010aa <main+0x212>
				Arm_State = Main;
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <main+0x234>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
			break;
 8000f60:	e0a3      	b.n	80010aa <main+0x212>
		case Setzero:
			UART();
 8000f62:	f002 fffd 	bl	8003f60 <UART>
			if(micros() - timestamp > 2000000){
 8000f66:	f000 fcf9 	bl	800195c <micros>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	495a      	ldr	r1, [pc, #360]	; (80010d8 <main+0x240>)
 8000f70:	6809      	ldr	r1, [r1, #0]
 8000f72:	2000      	movs	r0, #0
 8000f74:	4688      	mov	r8, r1
 8000f76:	4681      	mov	r9, r0
 8000f78:	ebb2 0408 	subs.w	r4, r2, r8
 8000f7c:	eb63 0509 	sbc.w	r5, r3, r9
 8000f80:	4b56      	ldr	r3, [pc, #344]	; (80010dc <main+0x244>)
 8000f82:	429c      	cmp	r4, r3
 8000f84:	f175 0300 	sbcs.w	r3, r5, #0
 8000f88:	f0c0 808a 	bcc.w	80010a0 <main+0x208>
				TIM3->CNT = 0;
 8000f8c:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <main+0x248>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
				theta_now = 0;
 8000f92:	4b54      	ldr	r3, [pc, #336]	; (80010e4 <main+0x24c>)
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
				Arm_State = Main;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <main+0x234>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8000fa0:	e07e      	b.n	80010a0 <main+0x208>
		case PrepareRun:
			UART();
 8000fa2:	f002 ffdd 	bl	8003f60 <UART>
			TrajectoryGenerator_Flag=1;
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <main+0x250>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 8000fac:	f001 f800 	bl	8001fb0 <TrajectoryGenerator>
			Arm_State = Run;
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <main+0x234>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
			break;
 8000fb6:	e078      	b.n	80010aa <main+0x212>
		case Run:
			UART();
 8000fb8:	f002 ffd2 	bl	8003f60 <UART>
			if(Go_Flag == 0){
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <main+0x254>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d16f      	bne.n	80010a4 <main+0x20c>
				if(ModeN==1){
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <main+0x258>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d138      	bne.n	800103e <main+0x1a6>
					if(n_station >= n_station_max-1){
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <main+0x25c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <main+0x260>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	db0c      	blt.n	8000ff6 <main+0x15e>
						Arm_State = EndEffector;
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <main+0x234>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <main+0x264>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <main+0x258>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <main+0x23c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e005      	b.n	8001002 <main+0x16a>
					}
					else{
						n_station++;
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <main+0x25c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <main+0x25c>)
 8001000:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <main+0x234>)
 8001004:	2202      	movs	r2, #2
 8001006:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <main+0x264>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <main+0x25c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <main+0x268>)
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <main+0x26c>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa3c 	bl	80004a0 <__aeabi_f2d>
 8001028:	a321      	add	r3, pc, #132	; (adr r3, 80010b0 <main+0x218>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fa8f 	bl	8000550 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4934      	ldr	r1, [pc, #208]	; (8001108 <main+0x270>)
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 800103c:	e032      	b.n	80010a4 <main+0x20c>
					Arm_State = EndEffector;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <main+0x234>)
 8001040:	2202      	movs	r2, #2
 8001042:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <main+0x264>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
					Finish =1;
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <main+0x23c>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e028      	b.n	80010a4 <main+0x20c>
		case EndEffector:
			UART();
 8001052:	f002 ff85 	bl	8003f60 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <main+0x274>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d111      	bne.n	8001082 <main+0x1ea>
			{
				OpenEndEffector();
 800105e:	f003 fd21 	bl	8004aa4 <OpenEndEffector>
				if(EndEffector_Status == State_wait){
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <main+0x278>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d11e      	bne.n	80010a8 <main+0x210>
					if(ModeN==1){
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <main+0x258>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d103      	bne.n	800107a <main+0x1e2>
						Arm_State = PrepareRun;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <main+0x234>)
 8001074:	2206      	movs	r2, #6
 8001076:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001078:	e016      	b.n	80010a8 <main+0x210>
						Arm_State = Main;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <main+0x234>)
 800107c:	2204      	movs	r2, #4
 800107e:	701a      	strb	r2, [r3, #0]
			break;
 8001080:	e012      	b.n	80010a8 <main+0x210>
				FlagOpen_EndEffector =0;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <main+0x264>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <main+0x258>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d103      	bne.n	8001098 <main+0x200>
					Arm_State = PrepareRun;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <main+0x234>)
 8001092:	2206      	movs	r2, #6
 8001094:	701a      	strb	r2, [r3, #0]
			break;
 8001096:	e007      	b.n	80010a8 <main+0x210>
					Arm_State = Main;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <main+0x234>)
 800109a:	2204      	movs	r2, #4
 800109c:	701a      	strb	r2, [r3, #0]
			break;
 800109e:	e003      	b.n	80010a8 <main+0x210>
			break;
 80010a0:	bf00      	nop
 80010a2:	e72b      	b.n	8000efc <main+0x64>
			break;
 80010a4:	bf00      	nop
 80010a6:	e729      	b.n	8000efc <main+0x64>
			break;
 80010a8:	bf00      	nop
	  switch (Arm_State) {
 80010aa:	e727      	b.n	8000efc <main+0x64>
 80010ac:	f3af 8000 	nop.w
 80010b0:	a2529d39 	.word	0xa2529d39
 80010b4:	3f91df46 	.word	0x3f91df46
 80010b8:	200001b0 	.word	0x200001b0
 80010bc:	200001f8 	.word	0x200001f8
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000288 	.word	0x20000288
 80010c8:	40020400 	.word	0x40020400
 80010cc:	200000bf 	.word	0x200000bf
 80010d0:	200003df 	.word	0x200003df
 80010d4:	20000661 	.word	0x20000661
 80010d8:	2000067c 	.word	0x2000067c
 80010dc:	001e8481 	.word	0x001e8481
 80010e0:	40000400 	.word	0x40000400
 80010e4:	200003e0 	.word	0x200003e0
 80010e8:	200003de 	.word	0x200003de
 80010ec:	200003dd 	.word	0x200003dd
 80010f0:	20000660 	.word	0x20000660
 80010f4:	200000be 	.word	0x200000be
 80010f8:	200000bd 	.word	0x200000bd
 80010fc:	20000674 	.word	0x20000674
 8001100:	20000664 	.word	0x20000664
 8001104:	20000094 	.word	0x20000094
 8001108:	200005b0 	.word	0x200005b0
 800110c:	20000653 	.word	0x20000653
 8001110:	20000676 	.word	0x20000676

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fd62 	bl	800bbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <SystemClock_Config+0xc8>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <SystemClock_Config+0xcc>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <SystemClock_Config+0xcc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f007 fa7d 	bl	8008698 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a4:	f003 fd26 	bl	8004bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2103      	movs	r1, #3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fcdf 	bl	8008b88 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d0:	f003 fd10 	bl	8004bf4 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C1_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C1_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C1_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C1_Init+0x50>)
 8001222:	f004 ff4f 	bl	80060c4 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800122c:	f003 fce2 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000015c 	.word	0x2000015c
 8001238:	40005400 	.word	0x40005400
 800123c:	00061a80 	.word	0x00061a80

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00a fcb7 	bl	800bbec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <MX_TIM1_Init+0x138>)
 8001280:	4a3e      	ldr	r2, [pc, #248]	; (800137c <MX_TIM1_Init+0x13c>)
 8001282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_TIM1_Init+0x138>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_TIM1_Init+0x138>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <MX_TIM1_Init+0x138>)
 8001292:	f241 3287 	movw	r2, #4999	; 0x1387
 8001296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_TIM1_Init+0x138>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM1_Init+0x138>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_TIM1_Init+0x138>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	4833      	ldr	r0, [pc, #204]	; (8001378 <MX_TIM1_Init+0x138>)
 80012ac:	f007 fe8c 	bl	8008fc8 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012b6:	f003 fc9d 	bl	8004bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c4:	4619      	mov	r1, r3
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <MX_TIM1_Init+0x138>)
 80012c8:	f008 fb92 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012d2:	f003 fc8f 	bl	8004bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d6:	4828      	ldr	r0, [pc, #160]	; (8001378 <MX_TIM1_Init+0x138>)
 80012d8:	f007 ff82 	bl	80091e0 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012e2:	f003 fc87 	bl	8004bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f2:	4619      	mov	r1, r3
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <MX_TIM1_Init+0x138>)
 80012f6:	f008 ff37 	bl	800a168 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001300:	f003 fc78 	bl	8004bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM1_Init+0x138>)
 800132a:	f008 fa9f 	bl	800986c <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001334:	f003 fc5e 	bl	8004bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x138>)
 800135c:	f008 ff72 	bl	800a244 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001366:	f003 fc45 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x138>)
 800136c:	f003 fd74 	bl	8004e58 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3758      	adds	r7, #88	; 0x58
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001b0 	.word	0x200001b0
 800137c:	40010000 	.word	0x40010000

08001380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00a fc2c 	bl	800bbec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_TIM3_Init+0xa0>)
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_TIM3_Init+0xa4>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013b0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_TIM3_Init+0xa0>)
 80013ee:	f008 f801 	bl	80093f4 <HAL_TIM_Encoder_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f003 fbfc 	bl	8004bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM3_Init+0xa0>)
 800140a:	f008 fead 	bl	800a168 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001414:	f003 fbee 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200001f8 	.word	0x200001f8
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM4_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_TIM4_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM4_Init+0x94>)
 800144c:	2209      	movs	r2, #9
 800144e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM4_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM4_Init+0x94>)
 8001458:	f242 720f 	movw	r2, #9999	; 0x270f
 800145c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_TIM4_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM4_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_TIM4_Init+0x94>)
 800146c:	f007 fdac 	bl	8008fc8 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001476:	f003 fbbd 	bl	8004bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_TIM4_Init+0x94>)
 8001488:	f008 fab2 	bl	80099f0 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001492:	f003 fbaf 	bl	8004bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_TIM4_Init+0x94>)
 80014a4:	f008 fe60 	bl	800a168 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014ae:	f003 fba1 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000240 	.word	0x20000240
 80014c0:	40000800 	.word	0x40000800

080014c4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM11_Init+0x40>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM11_Init+0x44>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_TIM11_Init+0x40>)
 80014d0:	2263      	movs	r2, #99	; 0x63
 80014d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_TIM11_Init+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_TIM11_Init+0x40>)
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_TIM11_Init+0x40>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_TIM11_Init+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM11_Init+0x40>)
 80014f0:	f007 fd6a 	bl	8008fc8 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014fa:	f003 fb7b 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000288 	.word	0x20000288
 8001508:	40014800 	.word	0x40014800

0800150c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_USART2_UART_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001518:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001524:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART2_UART_Init+0x50>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART2_UART_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001548:	f008 fee2 	bl	800a310 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001552:	f003 fb4f 	bl	8004bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002d0 	.word	0x200002d0
 8001560:	40004400 	.word	0x40004400

08001564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_DMA_Init+0x4c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <MX_DMA_Init+0x4c>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_DMA_Init+0x4c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2010      	movs	r0, #16
 800158c:	f003 ff85 	bl	800549a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001590:	2010      	movs	r0, #16
 8001592:	f003 ff9e 	bl	80054d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2011      	movs	r0, #17
 800159c:	f003 ff7d 	bl	800549a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015a0:	2011      	movs	r0, #17
 80015a2:	f003 ff96 	bl	80054d2 <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b54      	ldr	r3, [pc, #336]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a53      	ldr	r2, [pc, #332]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <MX_GPIO_Init+0x16c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <MX_GPIO_Init+0x16c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a45      	ldr	r2, [pc, #276]	; (8001720 <MX_GPIO_Init+0x16c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <MX_GPIO_Init+0x16c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <MX_GPIO_Init+0x16c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a3e      	ldr	r2, [pc, #248]	; (8001720 <MX_GPIO_Init+0x16c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <MX_GPIO_Init+0x16c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	4839      	ldr	r0, [pc, #228]	; (8001724 <MX_GPIO_Init+0x170>)
 8001640:	f004 fd0e 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800164a:	4837      	ldr	r0, [pc, #220]	; (8001728 <MX_GPIO_Init+0x174>)
 800164c:	f004 fd08 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001656:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <MX_GPIO_Init+0x178>)
 8001668:	f004 fb5e 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800166c:	2320      	movs	r3, #32
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4828      	ldr	r0, [pc, #160]	; (8001724 <MX_GPIO_Init+0x170>)
 8001684:	f004 fb50 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4821      	ldr	r0, [pc, #132]	; (8001728 <MX_GPIO_Init+0x174>)
 80016a2:	f004 fb41 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_X_Pin */
  GPIO_InitStruct.Pin = Encoder_X_Pin;
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_X_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	481c      	ldr	r0, [pc, #112]	; (800172c <MX_GPIO_Init+0x178>)
 80016bc:	f004 fb34 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80016c0:	2310      	movs	r3, #16
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0x174>)
 80016d6:	f004 fb27 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 80016da:	2320      	movs	r3, #32
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016de:	2311      	movs	r3, #17
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_GPIO_Init+0x174>)
 80016f2:	f004 fb19 	bl	8005d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	200a      	movs	r0, #10
 80016fc:	f003 fecd 	bl	800549a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001700:	200a      	movs	r0, #10
 8001702:	f003 fee6 	bl	80054d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2017      	movs	r0, #23
 800170c:	f003 fec5 	bl	800549a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001710:	2017      	movs	r0, #23
 8001712:	f003 fede 	bl	80054d2 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800

08001730 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
 800173a:	4603      	mov	r3, r0
 800173c:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;

	PWMOut = (volt*5000.0)/24.0;
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe feae 	bl	80004a0 <__aeabi_f2d>
 8001744:	a31a      	add	r3, pc, #104	; (adr r3, 80017b0 <RunMotor+0x80>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff01 	bl	8000550 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <RunMotor+0x70>)
 800175c:	f7ff f822 	bl	80007a4 <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9c2 	bl	8000af0 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <RunMotor+0x74>)
 8001770:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	461a      	mov	r2, r3
 8001776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <RunMotor+0x78>)
 800177c:	f004 fc70 	bl	8006060 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <RunMotor+0x74>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <RunMotor+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 2a90 	vmov	r2, s15
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	40380000 	.word	0x40380000
 80017a4:	20000680 	.word	0x20000680
 80017a8:	40020400 	.word	0x40020400
 80017ac:	200001b0 	.word	0x200001b0
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40b38800 	.word	0x40b38800

080017b8 <ReadEncoder>:

void ReadEncoder()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	theta_now = (TIM3->CNT/8191.0)*(2.0*M_PI);
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <ReadEncoder+0x50>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe4b 	bl	800045c <__aeabi_ui2d>
 80017c6:	a30c      	add	r3, pc, #48	; (adr r3, 80017f8 <ReadEncoder+0x40>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ffea 	bl	80007a4 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	a309      	add	r3, pc, #36	; (adr r3, 8001800 <ReadEncoder+0x48>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe feb7 	bl	8000550 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f981 	bl	8000af0 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <ReadEncoder+0x54>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40bfff00 	.word	0x40bfff00
 8001800:	54442d18 	.word	0x54442d18
 8001804:	401921fb 	.word	0x401921fb
 8001808:	40000400 	.word	0x40000400
 800180c:	200003e0 	.word	0x200003e0

08001810 <BackwardDifference>:

void BackwardDifference()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	omega_tosensor = (theta_now-angle_sum_before)/dt;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <BackwardDifference+0x30>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <BackwardDifference+0x34>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <BackwardDifference+0x38>)
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <BackwardDifference+0x3c>)
 8001830:	edc3 7a00 	vstr	s15, [r3]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200003e0 	.word	0x200003e0
 8001844:	200003e4 	.word	0x200003e4
 8001848:	20000004 	.word	0x20000004
 800184c:	200003e8 	.word	0x200003e8

08001850 <SetHome>:

void SetHome()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	if(SetHome_Flag == 1)
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <SetHome+0x34>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d110      	bne.n	800187e <SetHome+0x2e>
	{
		volt = 5;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <SetHome+0x38>)
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <SetHome+0x3c>)
 8001860:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <SetHome+0x38>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	2000      	movs	r0, #0
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	f7ff ff5f 	bl	8001730 <RunMotor>
		AlSet_Flag = 0;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <SetHome+0x40>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <SetHome+0x34>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
	}
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200003dc 	.word	0x200003dc
 8001888:	200003d4 	.word	0x200003d4
 800188c:	40a00000 	.word	0x40a00000
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder_X_Pin && AlSet_Flag == 0)
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d11f      	bne.n	80018e4 <HAL_GPIO_EXTI_Callback+0x50>
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_GPIO_EXTI_Callback+0xa8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d11b      	bne.n	80018e4 <HAL_GPIO_EXTI_Callback+0x50>
	{
		volt = 0;
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_GPIO_EXTI_Callback+0xac>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_GPIO_EXTI_Callback+0xac>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	2001      	movs	r0, #1
 80018bc:	eeb0 0a67 	vmov.f32	s0, s15
 80018c0:	f7ff ff36 	bl	8001730 <RunMotor>
		theta_now = 0;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_GPIO_EXTI_Callback+0xb0>)
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
		AlSet_Flag = 1;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_EXTI_Callback+0xa8>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 80018d2:	f000 f843 	bl	800195c <micros>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_GPIO_EXTI_Callback+0xb4>)
 80018dc:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_GPIO_EXTI_Callback+0xb8>)
 80018e0:	2205      	movs	r2, #5
 80018e2:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d124      	bne.n	8001934 <HAL_GPIO_EXTI_Callback+0xa0>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 80018ea:	2110      	movs	r1, #16
 80018ec:	4818      	ldr	r0, [pc, #96]	; (8001950 <HAL_GPIO_EXTI_Callback+0xbc>)
 80018ee:	f004 fb9f 	bl	8006030 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d11a      	bne.n	800192e <HAL_GPIO_EXTI_Callback+0x9a>
		{
			Arm_State=Main;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_GPIO_EXTI_Callback+0xb8>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	2120      	movs	r1, #32
 800190e:	4810      	ldr	r0, [pc, #64]	; (8001950 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001910:	f004 fba6 	bl	8006060 <HAL_GPIO_WritePin>
			volt = 0;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_GPIO_EXTI_Callback+0xac>)
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_GPIO_EXTI_Callback+0xac>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	2001      	movs	r0, #1
 8001924:	eeb0 0a67 	vmov.f32	s0, s15
 8001928:	f7ff ff02 	bl	8001730 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 800192c:	e002      	b.n	8001934 <HAL_GPIO_EXTI_Callback+0xa0>
			Emergency_status = 0;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	200003d4 	.word	0x200003d4
 8001944:	200003e0 	.word	0x200003e0
 8001948:	2000067c 	.word	0x2000067c
 800194c:	200000bf 	.word	0x200000bf
 8001950:	40020400 	.word	0x40020400
 8001954:	20000661 	.word	0x20000661
 8001958:	200003df 	.word	0x200003df

0800195c <micros>:

inline uint64_t micros()
{
 800195c:	b4b0      	push	{r4, r5, r7}
 800195e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <micros+0x2c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	4618      	mov	r0, r3
 800196a:	4611      	mov	r1, r2
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <micros+0x30>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	1884      	adds	r4, r0, r2
 8001974:	eb41 0503 	adc.w	r5, r1, r3
 8001978:	4622      	mov	r2, r4
 800197a:	462b      	mov	r3, r5
}
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	bcb0      	pop	{r4, r5, r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000288 	.word	0x20000288
 800198c:	20000658 	.word	0x20000658

08001990 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	ed2d 8b02 	vpush	{d8}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	//if (htim == &htim4 && (Go_Flag || GenVolt_Flag) && !SetHome_Flag && AlSet_Flag)
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d159      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xc8>
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d055      	beq.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xc8>
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d151      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{
		ReadEncoder();
 80019b4:	f7ff ff00 	bl	80017b8 <ReadEncoder>
		BackwardDifference();
 80019b8:	f7ff ff2a 	bl	8001810 <BackwardDifference>
		TrajectoryEvaluation();
 80019bc:	f001 fb70 	bl	80030a0 <TrajectoryEvaluation>
		kalmanfilter();
 80019c0:	f000 fad4 	bl	8001f6c <kalmanfilter>
		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f88f 	bl	8000af0 <__aeabi_d2f>
 80019d2:	4606      	mov	r6, r0
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80019d6:	ed93 8a00 	vldr	s16, [r3]
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f884 	bl	8000af0 <__aeabi_d2f>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eef0 1a67 	vmov.f32	s3, s15
 80019f4:	ee01 2a10 	vmov	s2, r2
 80019f8:	eef0 0a48 	vmov.f32	s1, s16
 80019fc:	ee00 6a10 	vmov	s0, r6
 8001a00:	f002 f9da 	bl	8003db8 <Cascade>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
		volt_check = volt;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a14:	6013      	str	r3, [r2, #0]
		t+=dt;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]

		if (Go_Flag == 0) //when last loop
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			volt = 0;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
			t = 0;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
		}

		RunMotor(volt, PID_dir);
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	f7ff fe6c 	bl	8001730 <RunMotor>

	}

	if (htim == &htim11)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10a      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0xe6>
	{
		_micro += 65535;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a6a:	1854      	adds	r4, r2, r1
 8001a6c:	f143 0500 	adc.w	r5, r3, #0
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a72:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	ecbd 8b02 	vpop	{d8}
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000240 	.word	0x20000240
 8001a88:	200003dd 	.word	0x200003dd
 8001a8c:	200000bf 	.word	0x200000bf
 8001a90:	20000608 	.word	0x20000608
 8001a94:	200003ec 	.word	0x200003ec
 8001a98:	20000610 	.word	0x20000610
 8001a9c:	200003f0 	.word	0x200003f0
 8001aa0:	200003d4 	.word	0x200003d4
 8001aa4:	200003d8 	.word	0x200003d8
 8001aa8:	20000578 	.word	0x20000578
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	200000c2 	.word	0x200000c2
 8001ab4:	20000288 	.word	0x20000288
 8001ab8:	20000658 	.word	0x20000658

08001abc <setmatrix>:

void setmatrix(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <setmatrix+0x1d4>)
 8001ac2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ac6:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <setmatrix+0x1d8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a70      	ldr	r2, [pc, #448]	; (8001c90 <setmatrix+0x1d4>)
 8001ace:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001ad0:	4b70      	ldr	r3, [pc, #448]	; (8001c94 <setmatrix+0x1d8>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <setmatrix+0x1d8>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae8:	4b69      	ldr	r3, [pc, #420]	; (8001c90 <setmatrix+0x1d4>)
 8001aea:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001aee:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <setmatrix+0x1d8>)
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <setmatrix+0x1d8>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <setmatrix+0x1d8>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <setmatrix+0x1d4>)
 8001b12:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001b16:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <setmatrix+0x1d4>)
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <setmatrix+0x1d4>)
 8001b20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b24:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <setmatrix+0x1d8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a59      	ldr	r2, [pc, #356]	; (8001c90 <setmatrix+0x1d4>)
 8001b2c:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <setmatrix+0x1d8>)
 8001b30:	ed93 7a00 	vldr	s14, [r3]
 8001b34:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <setmatrix+0x1d8>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b46:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <setmatrix+0x1d4>)
 8001b48:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001b4c:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <setmatrix+0x1d4>)
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <setmatrix+0x1d4>)
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <setmatrix+0x1d4>)
 8001b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001b64:	4b4b      	ldr	r3, [pc, #300]	; (8001c94 <setmatrix+0x1d8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a49      	ldr	r2, [pc, #292]	; (8001c90 <setmatrix+0x1d4>)
 8001b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001b6c:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <setmatrix+0x1d4>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <setmatrix+0x1d4>)
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <setmatrix+0x1d4>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <setmatrix+0x1d4>)
 8001b86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <setmatrix+0x1d8>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <setmatrix+0x1d8>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <setmatrix+0x1d8>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <setmatrix+0x1dc>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <setmatrix+0x1d8>)
 8001bb6:	ed93 7a00 	vldr	s14, [r3]
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <setmatrix+0x1d8>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <setmatrix+0x1dc>)
 8001bce:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <setmatrix+0x1d8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <setmatrix+0x1dc>)
 8001bd8:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <setmatrix+0x1dc>)
 8001bdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001be0:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <setmatrix+0x1e0>)
 8001be4:	2204      	movs	r2, #4
 8001be6:	2104      	movs	r1, #4
 8001be8:	482d      	ldr	r0, [pc, #180]	; (8001ca0 <setmatrix+0x1e4>)
 8001bea:	f009 ff67 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <setmatrix+0x1d4>)
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <setmatrix+0x1e8>)
 8001bf6:	f009 ff61 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <setmatrix+0x1dc>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4829      	ldr	r0, [pc, #164]	; (8001ca8 <setmatrix+0x1ec>)
 8001c02:	f009 ff5b 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <setmatrix+0x1f0>)
 8001c08:	2204      	movs	r2, #4
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4828      	ldr	r0, [pc, #160]	; (8001cb0 <setmatrix+0x1f4>)
 8001c0e:	f009 ff55 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <setmatrix+0x1f8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	2101      	movs	r1, #1
 8001c18:	4827      	ldr	r0, [pc, #156]	; (8001cb8 <setmatrix+0x1fc>)
 8001c1a:	f009 ff4f 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <setmatrix+0x200>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	2101      	movs	r1, #1
 8001c24:	4826      	ldr	r0, [pc, #152]	; (8001cc0 <setmatrix+0x204>)
 8001c26:	f009 ff49 	bl	800babc <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <setmatrix+0x208>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4825      	ldr	r0, [pc, #148]	; (8001cc8 <setmatrix+0x20c>)
 8001c32:	f009 ff43 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <setmatrix+0x210>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <setmatrix+0x214>)
 8001c3e:	f009 ff3d 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <setmatrix+0x218>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	2104      	movs	r1, #4
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <setmatrix+0x21c>)
 8001c4a:	f009 ff37 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <setmatrix+0x220>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	2104      	movs	r1, #4
 8001c54:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <setmatrix+0x224>)
 8001c56:	f009 ff31 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <setmatrix+0x228>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	2104      	movs	r1, #4
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <setmatrix+0x22c>)
 8001c62:	f009 ff2b 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <setmatrix+0x230>)
 8001c68:	2204      	movs	r2, #4
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4820      	ldr	r0, [pc, #128]	; (8001cf0 <setmatrix+0x234>)
 8001c6e:	f009 ff25 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <setmatrix+0x238>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	2101      	movs	r1, #1
 8001c78:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <setmatrix+0x23c>)
 8001c7a:	f009 ff1f 	bl	800babc <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <setmatrix+0x240>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	2101      	movs	r1, #1
 8001c84:	481e      	ldr	r0, [pc, #120]	; (8001d00 <setmatrix+0x244>)
 8001c86:	f009 ff19 	bl	800babc <arm_mat_init_f32>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000046c 	.word	0x2000046c
 8001c94:	20000004 	.word	0x20000004
 8001c98:	200004ac 	.word	0x200004ac
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	200003fc 	.word	0x200003fc
 8001ca4:	20000404 	.word	0x20000404
 8001ca8:	2000040c 	.word	0x2000040c
 8001cac:	20000048 	.word	0x20000048
 8001cb0:	20000424 	.word	0x20000424
 8001cb4:	20000058 	.word	0x20000058
 8001cb8:	2000042c 	.word	0x2000042c
 8001cbc:	2000005c 	.word	0x2000005c
 8001cc0:	20000414 	.word	0x20000414
 8001cc4:	200004bc 	.word	0x200004bc
 8001cc8:	20000434 	.word	0x20000434
 8001ccc:	200004c0 	.word	0x200004c0
 8001cd0:	2000041c 	.word	0x2000041c
 8001cd4:	200004d0 	.word	0x200004d0
 8001cd8:	2000044c 	.word	0x2000044c
 8001cdc:	200004e0 	.word	0x200004e0
 8001ce0:	20000454 	.word	0x20000454
 8001ce4:	200004f0 	.word	0x200004f0
 8001ce8:	2000045c 	.word	0x2000045c
 8001cec:	20000530 	.word	0x20000530
 8001cf0:	20000464 	.word	0x20000464
 8001cf4:	20000570 	.word	0x20000570
 8001cf8:	2000043c 	.word	0x2000043c
 8001cfc:	20000574 	.word	0x20000574
 8001d00:	20000444 	.word	0x20000444

08001d04 <prediction>:

void prediction(){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0c2      	sub	sp, #264	; 0x108
 8001d08:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <prediction+0xcc>)
 8001d0c:	4931      	ldr	r1, [pc, #196]	; (8001dd4 <prediction+0xd0>)
 8001d0e:	4832      	ldr	r0, [pc, #200]	; (8001dd8 <prediction+0xd4>)
 8001d10:	f009 fe34 	bl	800b97c <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001d14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d18:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	2104      	movs	r1, #4
 8001d20:	f009 fecc 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001d24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d28:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2104      	movs	r1, #4
 8001d30:	f009 fec4 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001d34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d38:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	2104      	movs	r1, #4
 8001d40:	f009 febc 	bl	800babc <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	f107 0018 	add.w	r0, r7, #24
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	2104      	movs	r1, #4
 8001d50:	f009 feb4 	bl	800babc <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4638      	mov	r0, r7
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	f009 fead 	bl	800babc <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4619      	mov	r1, r3
 8001d68:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <prediction+0xd4>)
 8001d6a:	f009 fd41 	bl	800b7f0 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	481a      	ldr	r0, [pc, #104]	; (8001ddc <prediction+0xd8>)
 8001d74:	f009 fd3c 	bl	800b7f0 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001d78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4918      	ldr	r1, [pc, #96]	; (8001de0 <prediction+0xdc>)
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <prediction+0xd4>)
 8001d82:	f009 fdfb 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001d86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4915      	ldr	r1, [pc, #84]	; (8001de4 <prediction+0xe0>)
 8001d8e:	4813      	ldr	r0, [pc, #76]	; (8001ddc <prediction+0xd8>)
 8001d90:	f009 fdf4 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001d94:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001d98:	f107 0118 	add.w	r1, r7, #24
 8001d9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f009 fdeb 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001da6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001daa:	4639      	mov	r1, r7
 8001dac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001db0:	4618      	mov	r0, r3
 8001db2:	f009 fde3 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001db6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001dba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <prediction+0xe4>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f009 fe7f 	bl	800bac4 <arm_mat_add_f32>
}
 8001dc6:	bf00      	nop
 8001dc8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000454 	.word	0x20000454
 8001dd4:	2000044c 	.word	0x2000044c
 8001dd8:	20000404 	.word	0x20000404
 8001ddc:	2000040c 	.word	0x2000040c
 8001de0:	2000045c 	.word	0x2000045c
 8001de4:	20000414 	.word	0x20000414
 8001de8:	20000464 	.word	0x20000464

08001dec <update>:

void update(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0ae      	sub	sp, #184	; 0xb8
 8001df0:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001df2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001df6:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	f009 fe5d 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001e02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e06:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	f009 fe55 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001e12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e16:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	f009 fe4d 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8001e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e26:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	f009 fe45 	bl	800babc <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8001e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e36:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	f009 fe3d 	bl	800babc <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	f107 0010 	add.w	r0, r7, #16
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	f009 fe35 	bl	800babc <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	4837      	ldr	r0, [pc, #220]	; (8001f38 <update+0x14c>)
 8001e5a:	f009 fcc9 	bl	800b7f0 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 8001e5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e62:	461a      	mov	r2, r3
 8001e64:	4935      	ldr	r1, [pc, #212]	; (8001f3c <update+0x150>)
 8001e66:	4834      	ldr	r0, [pc, #208]	; (8001f38 <update+0x14c>)
 8001e68:	f009 fd88 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8001e6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e70:	f107 0110 	add.w	r1, r7, #16
 8001e74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f009 fd7f 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 8001e7e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	4619      	mov	r1, r3
 8001e88:	482d      	ldr	r0, [pc, #180]	; (8001f40 <update+0x154>)
 8001e8a:	f009 fe1b 	bl	800bac4 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 8001e8e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9a:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	f107 0008 	add.w	r0, r7, #8
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	f009 fe08 	bl	800babc <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 8001eac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4821      	ldr	r0, [pc, #132]	; (8001f3c <update+0x150>)
 8001eb8:	f009 fd60 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 8001ebc:	f107 0108 	add.w	r1, r7, #8
 8001ec0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <update+0x158>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fd58 	bl	800b97c <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 8001ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4919      	ldr	r1, [pc, #100]	; (8001f38 <update+0x14c>)
 8001ed4:	481b      	ldr	r0, [pc, #108]	; (8001f44 <update+0x158>)
 8001ed6:	f009 fd51 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 8001eda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <update+0x15c>)
 8001ee6:	f009 fcdf 	bl	800b8a8 <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 8001eea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <update+0x160>)
 8001ef0:	4912      	ldr	r1, [pc, #72]	; (8001f3c <update+0x150>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f009 fd42 	bl	800b97c <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <update+0x164>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <update+0x168>)
 8001efe:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 8001f00:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <update+0x16c>)
 8001f02:	4916      	ldr	r1, [pc, #88]	; (8001f5c <update+0x170>)
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <update+0x14c>)
 8001f06:	f009 fd39 	bl	800b97c <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <update+0x174>)
 8001f0c:	4912      	ldr	r1, [pc, #72]	; (8001f58 <update+0x16c>)
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <update+0x178>)
 8001f10:	f009 fcca 	bl	800b8a8 <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 8001f14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4911      	ldr	r1, [pc, #68]	; (8001f60 <update+0x174>)
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <update+0x158>)
 8001f1e:	f009 fd2d 	bl	800b97c <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 8001f22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <update+0x17c>)
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <update+0x170>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 fdca 	bl	800bac4 <arm_mat_add_f32>
}
 8001f30:	bf00      	nop
 8001f32:	37b8      	adds	r7, #184	; 0xb8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000424 	.word	0x20000424
 8001f3c:	20000464 	.word	0x20000464
 8001f40:	2000042c 	.word	0x2000042c
 8001f44:	2000041c 	.word	0x2000041c
 8001f48:	200003fc 	.word	0x200003fc
 8001f4c:	2000045c 	.word	0x2000045c
 8001f50:	200003e0 	.word	0x200003e0
 8001f54:	200004bc 	.word	0x200004bc
 8001f58:	20000444 	.word	0x20000444
 8001f5c:	20000454 	.word	0x20000454
 8001f60:	2000043c 	.word	0x2000043c
 8001f64:	20000434 	.word	0x20000434
 8001f68:	2000044c 	.word	0x2000044c

08001f6c <kalmanfilter>:

void kalmanfilter()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	prediction();
 8001f70:	f7ff fec8 	bl	8001d04 <prediction>
	update();
 8001f74:	f7ff ff3a 	bl	8001dec <update>
	position_kalman = data_x_new[0];
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <kalmanfilter+0x30>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <kalmanfilter+0x34>)
 8001f7e:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <kalmanfilter+0x30>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <kalmanfilter+0x38>)
 8001f86:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <kalmanfilter+0x30>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <kalmanfilter+0x3c>)
 8001f8e:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <kalmanfilter+0x30>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a05      	ldr	r2, [pc, #20]	; (8001fac <kalmanfilter+0x40>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200004e0 	.word	0x200004e0
 8001fa0:	200003ec 	.word	0x200003ec
 8001fa4:	200003f0 	.word	0x200003f0
 8001fa8:	200003f4 	.word	0x200003f4
 8001fac:	200003f8 	.word	0x200003f8

08001fb0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8001fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <TrajectoryGenerator+0x158>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f001 8057 	beq.w	800306e <TrajectoryGenerator+0x10be>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <TrajectoryGenerator+0x15c>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fd91 	bl	8000af0 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	ee00 3a10 	vmov	s0, r3
 8001fd4:	f001 ff76 	bl	8003ec4 <positive>
 8001fd8:	ee10 3a10 	vmov	r3, s0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa5f 	bl	80004a0 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4949      	ldr	r1, [pc, #292]	; (800210c <TrajectoryGenerator+0x15c>)
 8001fe8:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <TrajectoryGenerator+0x160>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fd7b 	bl	8000af0 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	ee00 3a10 	vmov	s0, r3
 8002000:	f001 ff60 	bl	8003ec4 <positive>
 8002004:	ee10 3a10 	vmov	r3, s0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa49 	bl	80004a0 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	493f      	ldr	r1, [pc, #252]	; (8002110 <TrajectoryGenerator+0x160>)
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <TrajectoryGenerator+0x164>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd65 	bl	8000af0 <__aeabi_d2f>
 8002026:	4603      	mov	r3, r0
 8002028:	ee00 3a10 	vmov	s0, r3
 800202c:	f001 ff4a 	bl	8003ec4 <positive>
 8002030:	ee10 3a10 	vmov	r3, s0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa33 	bl	80004a0 <__aeabi_f2d>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4935      	ldr	r1, [pc, #212]	; (8002114 <TrajectoryGenerator+0x164>)
 8002040:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <TrajectoryGenerator+0x168>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa29 	bl	80004a0 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4932      	ldr	r1, [pc, #200]	; (800211c <TrajectoryGenerator+0x16c>)
 8002054:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <TrajectoryGenerator+0x170>)
 800205a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <TrajectoryGenerator+0x16c>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe f8bc 	bl	80001e0 <__aeabi_dsub>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	492d      	ldr	r1, [pc, #180]	; (8002124 <TrajectoryGenerator+0x174>)
 800206e:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <TrajectoryGenerator+0x174>)
 8002074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	f7fe fcd8 	bl	8000a34 <__aeabi_dcmplt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <TrajectoryGenerator+0xf4>
		{
			theta_dest = -(theta_dest);
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <TrajectoryGenerator+0x174>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	4614      	mov	r4, r2
 8002092:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <TrajectoryGenerator+0x174>)
 8002098:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <TrajectoryGenerator+0x178>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e002      	b.n	80020aa <TrajectoryGenerator+0xfa>
		}

		else
		{
			dir = 1;
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <TrajectoryGenerator+0x178>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
		}

		if(w_max*j_max < pow(a_max,2.0)){
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <TrajectoryGenerator+0x164>)
 80020ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <TrajectoryGenerator+0x15c>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe fa4b 	bl	8000550 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <TrajectoryGenerator+0x160>)
 80020c4:	ed93 7b00 	vldr	d7, [r3]
 80020c8:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002100 <TrajectoryGenerator+0x150>
 80020cc:	eeb0 0a47 	vmov.f32	s0, s14
 80020d0:	eef0 0a67 	vmov.f32	s1, s15
 80020d4:	f009 fe18 	bl	800bd08 <pow>
 80020d8:	ec53 2b10 	vmov	r2, r3, d0
 80020dc:	4620      	mov	r0, r4
 80020de:	4629      	mov	r1, r5
 80020e0:	f7fe fca8 	bl	8000a34 <__aeabi_dcmplt>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d024      	beq.n	8002134 <TrajectoryGenerator+0x184>
			M=1.0;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <TrajectoryGenerator+0x17c>)
 80020ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020f0:	601a      	str	r2, [r3, #0]
			N=0.0;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <TrajectoryGenerator+0x180>)
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e043      	b.n	8002184 <TrajectoryGenerator+0x1d4>
 80020fc:	f3af 8000 	nop.w
 8002100:	00000000 	.word	0x00000000
 8002104:	40000000 	.word	0x40000000
 8002108:	200003de 	.word	0x200003de
 800210c:	20000070 	.word	0x20000070
 8002110:	20000068 	.word	0x20000068
 8002114:	20000060 	.word	0x20000060
 8002118:	200003e0 	.word	0x200003e0
 800211c:	200005a8 	.word	0x200005a8
 8002120:	200005b0 	.word	0x200005b0
 8002124:	200005b8 	.word	0x200005b8
 8002128:	200000c1 	.word	0x200000c1
 800212c:	20000684 	.word	0x20000684
 8002130:	20000688 	.word	0x20000688
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 8002134:	4b96      	ldr	r3, [pc, #600]	; (8002390 <TrajectoryGenerator+0x3e0>)
 8002136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213a:	4b96      	ldr	r3, [pc, #600]	; (8002394 <TrajectoryGenerator+0x3e4>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe fa06 	bl	8000550 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <TrajectoryGenerator+0x3e8>)
 800214e:	ed93 7b00 	vldr	d7, [r3]
 8002152:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002380 <TrajectoryGenerator+0x3d0>
 8002156:	eeb0 0a47 	vmov.f32	s0, s14
 800215a:	eef0 0a67 	vmov.f32	s1, s15
 800215e:	f009 fdd3 	bl	800bd08 <pow>
 8002162:	ec53 2b10 	vmov	r2, r3, d0
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe fc77 	bl	8000a5c <__aeabi_dcmpge>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <TrajectoryGenerator+0x1d4>
			M=0.0;
 8002174:	4b89      	ldr	r3, [pc, #548]	; (800239c <TrajectoryGenerator+0x3ec>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
			N=1.0;
 800217c:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <TrajectoryGenerator+0x3f0>)
 800217e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002182:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <TrajectoryGenerator+0x3e8>)
 8002186:	ed93 7b00 	vldr	d7, [r3]
 800218a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002380 <TrajectoryGenerator+0x3d0>
 800218e:	eeb0 0a47 	vmov.f32	s0, s14
 8002192:	eef0 0a67 	vmov.f32	s1, s15
 8002196:	f009 fdb7 	bl	800bd08 <pow>
 800219a:	ec51 0b10 	vmov	r0, r1, d0
 800219e:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <TrajectoryGenerator+0x3e4>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fafe 	bl	80007a4 <__aeabi_ddiv>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fc9e 	bl	8000af0 <__aeabi_d2f>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a7b      	ldr	r2, [pc, #492]	; (80023a4 <TrajectoryGenerator+0x3f4>)
 80021b8:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 80021ba:	4b77      	ldr	r3, [pc, #476]	; (8002398 <TrajectoryGenerator+0x3e8>)
 80021bc:	ed93 7b00 	vldr	d7, [r3]
 80021c0:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002388 <TrajectoryGenerator+0x3d8>
 80021c4:	eeb0 0a47 	vmov.f32	s0, s14
 80021c8:	eef0 0a67 	vmov.f32	s1, s15
 80021cc:	f009 fd9c 	bl	800bd08 <pow>
 80021d0:	ec51 0b10 	vmov	r0, r1, d0
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	f7fe f804 	bl	80001e4 <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <TrajectoryGenerator+0x3e4>)
 80021e6:	ed93 7b00 	vldr	d7, [r3]
 80021ea:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002380 <TrajectoryGenerator+0x3d0>
 80021ee:	eeb0 0a47 	vmov.f32	s0, s14
 80021f2:	eef0 0a67 	vmov.f32	s1, s15
 80021f6:	f009 fd87 	bl	800bd08 <pow>
 80021fa:	ec53 2b10 	vmov	r2, r3, d0
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe facf 	bl	80007a4 <__aeabi_ddiv>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fc6f 	bl	8000af0 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	4a64      	ldr	r2, [pc, #400]	; (80023a8 <TrajectoryGenerator+0x3f8>)
 8002216:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <TrajectoryGenerator+0x3ec>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f93f 	bl	80004a0 <__aeabi_f2d>
 8002222:	4604      	mov	r4, r0
 8002224:	460d      	mov	r5, r1
 8002226:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <TrajectoryGenerator+0x3e0>)
 8002228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <TrajectoryGenerator+0x3e4>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fab7 	bl	80007a4 <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	ec43 2b17 	vmov	d7, r2, r3
 800223e:	eeb0 0a47 	vmov.f32	s0, s14
 8002242:	eef0 0a67 	vmov.f32	s1, s15
 8002246:	f009 fdcf 	bl	800bde8 <sqrt>
 800224a:	ec51 0b10 	vmov	r0, r1, d0
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	f7fd ffc7 	bl	80001e4 <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe f977 	bl	8000550 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4690      	mov	r8, r2
 8002268:	4699      	mov	r9, r3
 800226a:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <TrajectoryGenerator+0x3f0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f916 	bl	80004a0 <__aeabi_f2d>
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	4b45      	ldr	r3, [pc, #276]	; (8002390 <TrajectoryGenerator+0x3e0>)
 800227a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <TrajectoryGenerator+0x3e8>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe fa8e 	bl	80007a4 <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4692      	mov	sl, r2
 800228e:	469b      	mov	fp, r3
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <TrajectoryGenerator+0x3e8>)
 8002292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <TrajectoryGenerator+0x3e4>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe fa82 	bl	80007a4 <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4650      	mov	r0, sl
 80022a6:	4659      	mov	r1, fp
 80022a8:	f7fd ff9c 	bl	80001e4 <__adddf3>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f94c 	bl	8000550 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4640      	mov	r0, r8
 80022be:	4649      	mov	r1, r9
 80022c0:	f7fd ff90 	bl	80001e4 <__adddf3>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <TrajectoryGenerator+0x3e0>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe f93d 	bl	8000550 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc07 	bl	8000af0 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <TrajectoryGenerator+0x3fc>)
 80022e6:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <TrajectoryGenerator+0x3f4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f8d7 	bl	80004a0 <__aeabi_f2d>
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <TrajectoryGenerator+0x3e0>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe fbba 	bl	8000a70 <__aeabi_dcmpgt>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80ea 	beq.w	80024d8 <TrajectoryGenerator+0x528>
			if(theta_dest > Sa){
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <TrajectoryGenerator+0x3f8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f8c9 	bl	80004a0 <__aeabi_f2d>
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <TrajectoryGenerator+0x400>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe fb8e 	bl	8000a34 <__aeabi_dcmplt>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d050      	beq.n	80023c0 <TrajectoryGenerator+0x410>
				//caseI
				tj = sqrt((w_max/j_max));
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <TrajectoryGenerator+0x3e0>)
 8002320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <TrajectoryGenerator+0x3e4>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f7fe fa3b 	bl	80007a4 <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	ec43 2b17 	vmov	d7, r2, r3
 8002336:	eeb0 0a47 	vmov.f32	s0, s14
 800233a:	eef0 0a67 	vmov.f32	s1, s15
 800233e:	f009 fd53 	bl	800bde8 <sqrt>
 8002342:	ec53 2b10 	vmov	r2, r3, d0
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fbd1 	bl	8000af0 <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <TrajectoryGenerator+0x404>)
 8002352:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <TrajectoryGenerator+0x404>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <TrajectoryGenerator+0x408>)
 800235a:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <TrajectoryGenerator+0x400>)
 800235e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <TrajectoryGenerator+0x3e0>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe fa1c 	bl	80007a4 <__aeabi_ddiv>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbbc 	bl	8000af0 <__aeabi_d2f>
 8002378:	4603      	mov	r3, r0
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <TrajectoryGenerator+0x40c>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e223      	b.n	80027c8 <TrajectoryGenerator+0x818>
 8002380:	00000000 	.word	0x00000000
 8002384:	40000000 	.word	0x40000000
 8002388:	00000000 	.word	0x00000000
 800238c:	40080000 	.word	0x40080000
 8002390:	20000060 	.word	0x20000060
 8002394:	20000070 	.word	0x20000070
 8002398:	20000068 	.word	0x20000068
 800239c:	20000684 	.word	0x20000684
 80023a0:	20000688 	.word	0x20000688
 80023a4:	2000068c 	.word	0x2000068c
 80023a8:	20000690 	.word	0x20000690
 80023ac:	20000694 	.word	0x20000694
 80023b0:	200005b8 	.word	0x200005b8
 80023b4:	20000598 	.word	0x20000598
 80023b8:	2000059c 	.word	0x2000059c
 80023bc:	200005a0 	.word	0x200005a0
			}
			else if(theta_dest < Sa){
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <TrajectoryGenerator+0x5d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f86b 	bl	80004a0 <__aeabi_f2d>
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <TrajectoryGenerator+0x5d4>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe fb4e 	bl	8000a70 <__aeabi_dcmpgt>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 81f6 	beq.w	80027c8 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <TrajectoryGenerator+0x5d8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f85d 	bl	80004a0 <__aeabi_f2d>
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <TrajectoryGenerator+0x5d4>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe fb40 	bl	8000a70 <__aeabi_dcmpgt>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d031      	beq.n	800245a <TrajectoryGenerator+0x4aa>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <TrajectoryGenerator+0x5d4>)
 80023f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023fc:	4b63      	ldr	r3, [pc, #396]	; (800258c <TrajectoryGenerator+0x5dc>)
 80023fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	f7fd feed 	bl	80001e4 <__adddf3>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	f7fe f9c7 	bl	80007a4 <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ec43 2b17 	vmov	d7, r2, r3
 800241e:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002578 <TrajectoryGenerator+0x5c8>
 8002422:	eeb0 0a47 	vmov.f32	s0, s14
 8002426:	eef0 0a67 	vmov.f32	s1, s15
 800242a:	f009 fc6d 	bl	800bd08 <pow>
 800242e:	ec53 2b10 	vmov	r2, r3, d0
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fb5b 	bl	8000af0 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	4a54      	ldr	r2, [pc, #336]	; (8002590 <TrajectoryGenerator+0x5e0>)
 800243e:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002440:	4b53      	ldr	r3, [pc, #332]	; (8002590 <TrajectoryGenerator+0x5e0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a53      	ldr	r2, [pc, #332]	; (8002594 <TrajectoryGenerator+0x5e4>)
 8002446:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 8002448:	4b51      	ldr	r3, [pc, #324]	; (8002590 <TrajectoryGenerator+0x5e0>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <TrajectoryGenerator+0x5e8>)
 8002454:	edc3 7a00 	vstr	s15, [r3]
 8002458:	e1b6      	b.n	80027c8 <TrajectoryGenerator+0x818>
				}
				else if(theta_dest > Sv){
 800245a:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <TrajectoryGenerator+0x5d8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <TrajectoryGenerator+0x5d4>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe fae3 	bl	8000a34 <__aeabi_dcmplt>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 81a9 	beq.w	80027c8 <TrajectoryGenerator+0x818>
					//caseIII
					tj = sqrt((w_max/j_max));
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <TrajectoryGenerator+0x5ec>)
 8002478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <TrajectoryGenerator+0x5dc>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f98f 	bl	80007a4 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	ec43 2b17 	vmov	d7, r2, r3
 800248e:	eeb0 0a47 	vmov.f32	s0, s14
 8002492:	eef0 0a67 	vmov.f32	s1, s15
 8002496:	f009 fca7 	bl	800bde8 <sqrt>
 800249a:	ec53 2b10 	vmov	r2, r3, d0
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fb25 	bl	8000af0 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a39      	ldr	r2, [pc, #228]	; (8002590 <TrajectoryGenerator+0x5e0>)
 80024aa:	6013      	str	r3, [r2, #0]
					ta = tj;
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <TrajectoryGenerator+0x5e0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a38      	ldr	r2, [pc, #224]	; (8002594 <TrajectoryGenerator+0x5e4>)
 80024b2:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <TrajectoryGenerator+0x5d4>)
 80024b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <TrajectoryGenerator+0x5ec>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fe f970 	bl	80007a4 <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb10 	bl	8000af0 <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a31      	ldr	r2, [pc, #196]	; (8002598 <TrajectoryGenerator+0x5e8>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e177      	b.n	80027c8 <TrajectoryGenerator+0x818>
				}
			}
		}
		else if(w_max >= Va){
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <TrajectoryGenerator+0x5f0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffdf 	bl	80004a0 <__aeabi_f2d>
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <TrajectoryGenerator+0x5ec>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe faae 	bl	8000a48 <__aeabi_dcmple>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 816a 	beq.w	80027c8 <TrajectoryGenerator+0x818>
			if(theta_dest < Sa){
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <TrajectoryGenerator+0x5d0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ffd1 	bl	80004a0 <__aeabi_f2d>
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <TrajectoryGenerator+0x5d4>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe fab4 	bl	8000a70 <__aeabi_dcmpgt>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04a      	beq.n	80025a4 <TrajectoryGenerator+0x5f4>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <TrajectoryGenerator+0x5d4>)
 8002510:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <TrajectoryGenerator+0x5dc>)
 8002516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	f7fd fe61 	bl	80001e4 <__adddf3>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fe f93b 	bl	80007a4 <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ec43 2b17 	vmov	d7, r2, r3
 8002536:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002578 <TrajectoryGenerator+0x5c8>
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	f009 fbe1 	bl	800bd08 <pow>
 8002546:	ec53 2b10 	vmov	r2, r3, d0
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe facf 	bl	8000af0 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <TrajectoryGenerator+0x5e0>)
 8002556:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <TrajectoryGenerator+0x5e0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <TrajectoryGenerator+0x5e4>)
 800255e:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <TrajectoryGenerator+0x5e0>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <TrajectoryGenerator+0x5e8>)
 800256c:	edc3 7a00 	vstr	s15, [r3]
 8002570:	e12a      	b.n	80027c8 <TrajectoryGenerator+0x818>
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	85f06f69 	.word	0x85f06f69
 800257c:	3fd554c9 	.word	0x3fd554c9
 8002580:	20000690 	.word	0x20000690
 8002584:	200005b8 	.word	0x200005b8
 8002588:	20000694 	.word	0x20000694
 800258c:	20000070 	.word	0x20000070
 8002590:	20000598 	.word	0x20000598
 8002594:	2000059c 	.word	0x2000059c
 8002598:	200005a0 	.word	0x200005a0
 800259c:	20000060 	.word	0x20000060
 80025a0:	2000068c 	.word	0x2000068c
			}
			else if(theta_dest >= Sa){
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <TrajectoryGenerator+0x770>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff79 	bl	80004a0 <__aeabi_f2d>
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <TrajectoryGenerator+0x774>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fe fa48 	bl	8000a48 <__aeabi_dcmple>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8104 	beq.w	80027c8 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <TrajectoryGenerator+0x778>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff6b 	bl	80004a0 <__aeabi_f2d>
 80025ca:	4b56      	ldr	r3, [pc, #344]	; (8002724 <TrajectoryGenerator+0x774>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe fa4e 	bl	8000a70 <__aeabi_dcmpgt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80b6 	beq.w	8002748 <TrajectoryGenerator+0x798>
					//caseVI
					tj = a_max/j_max;
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <TrajectoryGenerator+0x77c>)
 80025de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <TrajectoryGenerator+0x780>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f8dc 	bl	80007a4 <__aeabi_ddiv>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fa7c 	bl	8000af0 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a4e      	ldr	r2, [pc, #312]	; (8002734 <TrajectoryGenerator+0x784>)
 80025fc:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 80025fe:	4b49      	ldr	r3, [pc, #292]	; (8002724 <TrajectoryGenerator+0x774>)
 8002600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <TrajectoryGenerator+0x788>)
 800260a:	f7fd ffa1 	bl	8000550 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <TrajectoryGenerator+0x780>)
 8002618:	ed93 7b00 	vldr	d7, [r3]
 800261c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002710 <TrajectoryGenerator+0x760>
 8002620:	eeb0 0a47 	vmov.f32	s0, s14
 8002624:	eef0 0a67 	vmov.f32	s1, s15
 8002628:	f009 fb6e 	bl	800bd08 <pow>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd ff8c 	bl	8000550 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <TrajectoryGenerator+0x77c>)
 8002642:	ed93 7b00 	vldr	d7, [r3]
 8002646:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002718 <TrajectoryGenerator+0x768>
 800264a:	eeb0 0a47 	vmov.f32	s0, s14
 800264e:	eef0 0a67 	vmov.f32	s1, s15
 8002652:	f009 fb59 	bl	800bd08 <pow>
 8002656:	ec53 2b10 	vmov	r2, r3, d0
 800265a:	4620      	mov	r0, r4
 800265c:	4629      	mov	r1, r5
 800265e:	f7fd fdc1 	bl	80001e4 <__adddf3>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4614      	mov	r4, r2
 8002668:	461d      	mov	r5, r3
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <TrajectoryGenerator+0x780>)
 800266c:	ed93 7b00 	vldr	d7, [r3]
 8002670:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8002710 <TrajectoryGenerator+0x760>
 8002674:	eeb0 0a47 	vmov.f32	s0, s14
 8002678:	eef0 0a67 	vmov.f32	s1, s15
 800267c:	f009 fb44 	bl	800bd08 <pow>
 8002680:	ec51 0b10 	vmov	r0, r1, d0
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <TrajectoryGenerator+0x77c>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd ff61 	bl	8000550 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f7fe f885 	bl	80007a4 <__aeabi_ddiv>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	ec43 2b17 	vmov	d7, r2, r3
 80026a2:	eeb0 0a47 	vmov.f32	s0, s14
 80026a6:	eef0 0a67 	vmov.f32	s1, s15
 80026aa:	f009 fb9d 	bl	800bde8 <sqrt>
 80026ae:	ec55 4b10 	vmov	r4, r5, d0
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <TrajectoryGenerator+0x77c>)
 80026b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <TrajectoryGenerator+0x780>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fe f871 	bl	80007a4 <__aeabi_ddiv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd fd89 	bl	80001e0 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <TrajectoryGenerator+0x78c>)
 80026dc:	f7fd ff38 	bl	8000550 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa02 	bl	8000af0 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <TrajectoryGenerator+0x790>)
 80026f0:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <TrajectoryGenerator+0x790>)
 80026f4:	ed93 7a00 	vldr	s14, [r3]
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <TrajectoryGenerator+0x784>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <TrajectoryGenerator+0x794>)
 8002704:	edc3 7a00 	vstr	s15, [r3]
 8002708:	e05e      	b.n	80027c8 <TrajectoryGenerator+0x818>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	00000000 	.word	0x00000000
 8002714:	40000000 	.word	0x40000000
 8002718:	00000000 	.word	0x00000000
 800271c:	40080000 	.word	0x40080000
 8002720:	20000690 	.word	0x20000690
 8002724:	200005b8 	.word	0x200005b8
 8002728:	20000694 	.word	0x20000694
 800272c:	20000068 	.word	0x20000068
 8002730:	20000070 	.word	0x20000070
 8002734:	20000598 	.word	0x20000598
 8002738:	40100000 	.word	0x40100000
 800273c:	3fe00000 	.word	0x3fe00000
 8002740:	2000059c 	.word	0x2000059c
 8002744:	200005a0 	.word	0x200005a0
				}
				else if(theta_dest >= Sv){
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <TrajectoryGenerator+0x944>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fea7 	bl	80004a0 <__aeabi_f2d>
 8002752:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <TrajectoryGenerator+0x948>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f976 	bl	8000a48 <__aeabi_dcmple>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d032      	beq.n	80027c8 <TrajectoryGenerator+0x818>
					//caseV
					tj = a_max/j_max;
 8002762:	4b66      	ldr	r3, [pc, #408]	; (80028fc <TrajectoryGenerator+0x94c>)
 8002764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002768:	4b65      	ldr	r3, [pc, #404]	; (8002900 <TrajectoryGenerator+0x950>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fe f819 	bl	80007a4 <__aeabi_ddiv>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe f9b9 	bl	8000af0 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
 8002780:	4a60      	ldr	r2, [pc, #384]	; (8002904 <TrajectoryGenerator+0x954>)
 8002782:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 8002784:	4b60      	ldr	r3, [pc, #384]	; (8002908 <TrajectoryGenerator+0x958>)
 8002786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <TrajectoryGenerator+0x94c>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fe f808 	bl	80007a4 <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe f9a8 	bl	8000af0 <__aeabi_d2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a5a      	ldr	r2, [pc, #360]	; (800290c <TrajectoryGenerator+0x95c>)
 80027a4:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <TrajectoryGenerator+0x948>)
 80027a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <TrajectoryGenerator+0x958>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fff7 	bl	80007a4 <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f997 	bl	8000af0 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <TrajectoryGenerator+0x960>)
 80027c6:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 80027c8:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <TrajectoryGenerator+0x954>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a51      	ldr	r2, [pc, #324]	; (8002914 <TrajectoryGenerator+0x964>)
 80027ce:	6013      	str	r3, [r2, #0]
		t2 = ta;
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <TrajectoryGenerator+0x95c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a50      	ldr	r2, [pc, #320]	; (8002918 <TrajectoryGenerator+0x968>)
 80027d6:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <TrajectoryGenerator+0x95c>)
 80027da:	ed93 7a00 	vldr	s14, [r3]
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <TrajectoryGenerator+0x954>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e8:	4b4c      	ldr	r3, [pc, #304]	; (800291c <TrajectoryGenerator+0x96c>)
 80027ea:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <TrajectoryGenerator+0x960>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <TrajectoryGenerator+0x970>)
 80027f4:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 80027f6:	4b46      	ldr	r3, [pc, #280]	; (8002910 <TrajectoryGenerator+0x960>)
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	4b41      	ldr	r3, [pc, #260]	; (8002904 <TrajectoryGenerator+0x954>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <TrajectoryGenerator+0x974>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <TrajectoryGenerator+0x960>)
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <TrajectoryGenerator+0x95c>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <TrajectoryGenerator+0x978>)
 800281e:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <TrajectoryGenerator+0x960>)
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <TrajectoryGenerator+0x954>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <TrajectoryGenerator+0x95c>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <TrajectoryGenerator+0x97c>)
 800283e:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <TrajectoryGenerator+0x980>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	493a      	ldr	r1, [pc, #232]	; (8002934 <TrajectoryGenerator+0x984>)
 800284a:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 800284e:	493a      	ldr	r1, [pc, #232]	; (8002938 <TrajectoryGenerator+0x988>)
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 800285c:	4b37      	ldr	r3, [pc, #220]	; (800293c <TrajectoryGenerator+0x98c>)
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <TrajectoryGenerator+0x990>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d16b      	bne.n	8002944 <TrajectoryGenerator+0x994>
		{
			j_max = negative(j_max);
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <TrajectoryGenerator+0x950>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f7fe f93b 	bl	8000af0 <__aeabi_d2f>
 800287a:	4603      	mov	r3, r0
 800287c:	ee00 3a10 	vmov	s0, r3
 8002880:	f001 fb04 	bl	8003e8c <negative>
 8002884:	ee10 3a10 	vmov	r3, s0
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe09 	bl	80004a0 <__aeabi_f2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	491b      	ldr	r1, [pc, #108]	; (8002900 <TrajectoryGenerator+0x950>)
 8002894:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <TrajectoryGenerator+0x94c>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f925 	bl	8000af0 <__aeabi_d2f>
 80028a6:	4603      	mov	r3, r0
 80028a8:	ee00 3a10 	vmov	s0, r3
 80028ac:	f001 faee 	bl	8003e8c <negative>
 80028b0:	ee10 3a10 	vmov	r3, s0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fdf3 	bl	80004a0 <__aeabi_f2d>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	490f      	ldr	r1, [pc, #60]	; (80028fc <TrajectoryGenerator+0x94c>)
 80028c0:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <TrajectoryGenerator+0x958>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f90f 	bl	8000af0 <__aeabi_d2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	ee00 3a10 	vmov	s0, r3
 80028d8:	f001 fad8 	bl	8003e8c <negative>
 80028dc:	ee10 3a10 	vmov	r3, s0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fddd 	bl	80004a0 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4907      	ldr	r1, [pc, #28]	; (8002908 <TrajectoryGenerator+0x958>)
 80028ec:	e9c1 2300 	strd	r2, r3, [r1]
 80028f0:	e06a      	b.n	80029c8 <TrajectoryGenerator+0xa18>
 80028f2:	bf00      	nop
 80028f4:	20000694 	.word	0x20000694
 80028f8:	200005b8 	.word	0x200005b8
 80028fc:	20000068 	.word	0x20000068
 8002900:	20000070 	.word	0x20000070
 8002904:	20000598 	.word	0x20000598
 8002908:	20000060 	.word	0x20000060
 800290c:	2000059c 	.word	0x2000059c
 8002910:	200005a0 	.word	0x200005a0
 8002914:	2000057c 	.word	0x2000057c
 8002918:	20000580 	.word	0x20000580
 800291c:	20000584 	.word	0x20000584
 8002920:	20000588 	.word	0x20000588
 8002924:	2000058c 	.word	0x2000058c
 8002928:	20000590 	.word	0x20000590
 800292c:	20000594 	.word	0x20000594
 8002930:	200005a8 	.word	0x200005a8
 8002934:	20000608 	.word	0x20000608
 8002938:	20000610 	.word	0x20000610
 800293c:	20000618 	.word	0x20000618
 8002940:	200000c1 	.word	0x200000c1
		}

		else
		{
			j_max = positive(j_max);
 8002944:	4bcc      	ldr	r3, [pc, #816]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f8cf 	bl	8000af0 <__aeabi_d2f>
 8002952:	4603      	mov	r3, r0
 8002954:	ee00 3a10 	vmov	s0, r3
 8002958:	f001 fab4 	bl	8003ec4 <positive>
 800295c:	ee10 3a10 	vmov	r3, s0
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fd9d 	bl	80004a0 <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	49c3      	ldr	r1, [pc, #780]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 800296c:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 8002970:	4bc2      	ldr	r3, [pc, #776]	; (8002c7c <TrajectoryGenerator+0xccc>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f8b9 	bl	8000af0 <__aeabi_d2f>
 800297e:	4603      	mov	r3, r0
 8002980:	ee00 3a10 	vmov	s0, r3
 8002984:	f001 fa9e 	bl	8003ec4 <positive>
 8002988:	ee10 3a10 	vmov	r3, s0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fd87 	bl	80004a0 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	49b9      	ldr	r1, [pc, #740]	; (8002c7c <TrajectoryGenerator+0xccc>)
 8002998:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 800299c:	4bb8      	ldr	r3, [pc, #736]	; (8002c80 <TrajectoryGenerator+0xcd0>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f8a3 	bl	8000af0 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	ee00 3a10 	vmov	s0, r3
 80029b0:	f001 fa88 	bl	8003ec4 <positive>
 80029b4:	ee10 3a10 	vmov	r3, s0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd71 	bl	80004a0 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	49af      	ldr	r1, [pc, #700]	; (8002c80 <TrajectoryGenerator+0xcd0>)
 80029c4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 80029c8:	4bab      	ldr	r3, [pc, #684]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 80029ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ce:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c60 <TrajectoryGenerator+0xcb0>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f7fd fdbc 	bl	8000550 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4ba8      	ldr	r3, [pc, #672]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd5b 	bl	80004a0 <__aeabi_f2d>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002c68 <TrajectoryGenerator+0xcb8>
 80029f2:	ec43 2b10 	vmov	d0, r2, r3
 80029f6:	f009 f987 	bl	800bd08 <pow>
 80029fa:	ec53 2b10 	vmov	r2, r3, d0
 80029fe:	4620      	mov	r0, r4
 8002a00:	4629      	mov	r1, r5
 8002a02:	f7fd fda5 	bl	8000550 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7fe f86f 	bl	8000af0 <__aeabi_d2f>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a9c      	ldr	r2, [pc, #624]	; (8002c88 <TrajectoryGenerator+0xcd8>)
 8002a16:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8002a18:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 8002a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	4b9a      	ldr	r3, [pc, #616]	; (8002c8c <TrajectoryGenerator+0xcdc>)
 8002a24:	f7fd fd94 	bl	8000550 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd33 	bl	80004a0 <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002c70 <TrajectoryGenerator+0xcc0>
 8002a42:	ec43 2b10 	vmov	d0, r2, r3
 8002a46:	f009 f95f 	bl	800bd08 <pow>
 8002a4a:	ec53 2b10 	vmov	r2, r3, d0
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fd7d 	bl	8000550 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f847 	bl	8000af0 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a8a      	ldr	r2, [pc, #552]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002a66:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002a68:	4b86      	ldr	r3, [pc, #536]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fd6a 	bl	8000550 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f834 	bl	8000af0 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a82      	ldr	r2, [pc, #520]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002a8c:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <TrajectoryGenerator+0xcd8>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002a96:	edd3 6a00 	vldr	s13, [r3]
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002a9c:	ed93 6a00 	vldr	s12, [r3]
 8002aa0:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab2:	ee17 0a90 	vmov	r0, s15
 8002ab6:	f7fd fcf3 	bl	80004a0 <__aeabi_f2d>
 8002aba:	4604      	mov	r4, r0
 8002abc:	460d      	mov	r5, r1
 8002abe:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fcec 	bl	80004a0 <__aeabi_f2d>
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <TrajectoryGenerator+0xcdc>)
 8002ace:	f7fd fd3f 	bl	8000550 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4699      	mov	r9, r3
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002adc:	ed93 7a00 	vldr	s14, [r3]
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aea:	ee17 0a90 	vmov	r0, s15
 8002aee:	f7fd fcd7 	bl	80004a0 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002c70 <TrajectoryGenerator+0xcc0>
 8002afa:	ec43 2b10 	vmov	d0, r2, r3
 8002afe:	f009 f903 	bl	800bd08 <pow>
 8002b02:	ec53 2b10 	vmov	r2, r3, d0
 8002b06:	4640      	mov	r0, r8
 8002b08:	4649      	mov	r1, r9
 8002b0a:	f7fd fd21 	bl	8000550 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7fd fb65 	bl	80001e4 <__adddf3>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fd ffe5 	bl	8000af0 <__aeabi_d2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <TrajectoryGenerator+0xcd8>)
 8002b2a:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002b2c:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002b34:	edd3 6a00 	vldr	s13, [r3]
 8002b38:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002b3a:	ed93 6a00 	vldr	s12, [r3]
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <TrajectoryGenerator+0xcd4>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002b52:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002b56:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002b5c:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <TrajectoryGenerator+0xcd8>)
 8002b60:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002b66:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b6a:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <TrajectoryGenerator+0xcec>)
 8002b6c:	ed93 6a00 	vldr	s12, [r3]
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b82:	ee17 0a90 	vmov	r0, s15
 8002b86:	f7fd fc8b 	bl	80004a0 <__aeabi_f2d>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	460d      	mov	r5, r1
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <TrajectoryGenerator+0xce4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fc84 	bl	80004a0 <__aeabi_f2d>
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <TrajectoryGenerator+0xcdc>)
 8002b9e:	f7fd fcd7 	bl	8000550 <__aeabi_dmul>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4690      	mov	r8, r2
 8002ba8:	4699      	mov	r9, r3
 8002baa:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <TrajectoryGenerator+0xcec>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bba:	ee17 0a90 	vmov	r0, s15
 8002bbe:	f7fd fc6f 	bl	80004a0 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8002c70 <TrajectoryGenerator+0xcc0>
 8002bca:	ec43 2b10 	vmov	d0, r2, r3
 8002bce:	f009 f89b 	bl	800bd08 <pow>
 8002bd2:	ec53 2b10 	vmov	r2, r3, d0
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f7fd fcb9 	bl	8000550 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fafd 	bl	80001e4 <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <TrajectoryGenerator+0xcec>)
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <TrajectoryGenerator+0xce8>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c02:	ee17 0a90 	vmov	r0, s15
 8002c06:	f7fd fc4b 	bl	80004a0 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002c68 <TrajectoryGenerator+0xcb8>
 8002c12:	ec43 2b10 	vmov	d0, r2, r3
 8002c16:	f009 f877 	bl	800bd08 <pow>
 8002c1a:	ec51 0b10 	vmov	r0, r1, d0
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <TrajectoryGenerator+0xcc8>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fc94 	bl	8000550 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <TrajectoryGenerator+0xcf0>)
 8002c36:	f7fd fdb5 	bl	80007a4 <__aeabi_ddiv>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd facd 	bl	80001e0 <__aeabi_dsub>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fd ff4f 	bl	8000af0 <__aeabi_d2f>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <TrajectoryGenerator+0xcd8>)
 8002c56:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <TrajectoryGenerator+0xce0>)
 8002c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c5e:	e021      	b.n	8002ca4 <TrajectoryGenerator+0xcf4>
 8002c60:	55555555 	.word	0x55555555
 8002c64:	3fc55555 	.word	0x3fc55555
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	40080000 	.word	0x40080000
 8002c70:	00000000 	.word	0x00000000
 8002c74:	40000000 	.word	0x40000000
 8002c78:	20000070 	.word	0x20000070
 8002c7c:	20000068 	.word	0x20000068
 8002c80:	20000060 	.word	0x20000060
 8002c84:	2000057c 	.word	0x2000057c
 8002c88:	200005f0 	.word	0x200005f0
 8002c8c:	3fe00000 	.word	0x3fe00000
 8002c90:	200005d8 	.word	0x200005d8
 8002c94:	200005c0 	.word	0x200005c0
 8002c98:	20000580 	.word	0x20000580
 8002c9c:	20000584 	.word	0x20000584
 8002ca0:	40180000 	.word	0x40180000
 8002ca4:	4bd0      	ldr	r3, [pc, #832]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002ca6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002caa:	4bd0      	ldr	r3, [pc, #832]	; (8002fec <TrajectoryGenerator+0x103c>)
 8002cac:	ed93 6a00 	vldr	s12, [r3]
 8002cb0:	4bcf      	ldr	r3, [pc, #828]	; (8002ff0 <TrajectoryGenerator+0x1040>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	ee17 0a90 	vmov	r0, s15
 8002cc6:	f7fd fbeb 	bl	80004a0 <__aeabi_f2d>
 8002cca:	4604      	mov	r4, r0
 8002ccc:	460d      	mov	r5, r1
 8002cce:	4bc9      	ldr	r3, [pc, #804]	; (8002ff4 <TrajectoryGenerator+0x1044>)
 8002cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4bc7      	ldr	r3, [pc, #796]	; (8002ff8 <TrajectoryGenerator+0x1048>)
 8002cda:	f7fd fc39 	bl	8000550 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	4bc1      	ldr	r3, [pc, #772]	; (8002fec <TrajectoryGenerator+0x103c>)
 8002ce8:	ed93 7a00 	vldr	s14, [r3]
 8002cec:	4bc0      	ldr	r3, [pc, #768]	; (8002ff0 <TrajectoryGenerator+0x1040>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	ee17 0a90 	vmov	r0, s15
 8002cfa:	f7fd fbd1 	bl	80004a0 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8002fd8 <TrajectoryGenerator+0x1028>
 8002d06:	ec43 2b10 	vmov	d0, r2, r3
 8002d0a:	f008 fffd 	bl	800bd08 <pow>
 8002d0e:	ec53 2b10 	vmov	r2, r3, d0
 8002d12:	4640      	mov	r0, r8
 8002d14:	4649      	mov	r1, r9
 8002d16:	f7fd fc1b 	bl	8000550 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fa5d 	bl	80001e0 <__aeabi_dsub>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd fedf 	bl	8000af0 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4ab1      	ldr	r2, [pc, #708]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002d36:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 8002d38:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbaf 	bl	80004a0 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	4ba9      	ldr	r3, [pc, #676]	; (8002fec <TrajectoryGenerator+0x103c>)
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	4ba8      	ldr	r3, [pc, #672]	; (8002ff0 <TrajectoryGenerator+0x1040>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	ee17 0a90 	vmov	r0, s15
 8002d5a:	f7fd fba1 	bl	80004a0 <__aeabi_f2d>
 8002d5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <TrajectoryGenerator+0x1044>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fbf4 	bl	8000550 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fa36 	bl	80001e0 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd feb8 	bl	8000af0 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a99      	ldr	r2, [pc, #612]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002d84:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8002d86:	4b9e      	ldr	r3, [pc, #632]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002d88:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d8c:	4b9b      	ldr	r3, [pc, #620]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002d8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d92:	4b9c      	ldr	r3, [pc, #624]	; (8003004 <TrajectoryGenerator+0x1054>)
 8002d94:	ed93 6a00 	vldr	s12, [r3]
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <TrajectoryGenerator+0x103c>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	4b95      	ldr	r3, [pc, #596]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002dac:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8002db0:	4b92      	ldr	r3, [pc, #584]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a91      	ldr	r2, [pc, #580]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002db6:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8002db8:	4b8b      	ldr	r3, [pc, #556]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a8a      	ldr	r2, [pc, #552]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002dbe:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002dc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002dc6:	4b8d      	ldr	r3, [pc, #564]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002dc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002dce:	ed93 6a00 	vldr	s12, [r3]
 8002dd2:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <TrajectoryGenerator+0x1054>)
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de4:	ee17 0a90 	vmov	r0, s15
 8002de8:	f7fd fb5a 	bl	80004a0 <__aeabi_f2d>
 8002dec:	4604      	mov	r4, r0
 8002dee:	460d      	mov	r5, r1
 8002df0:	4b85      	ldr	r3, [pc, #532]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002df2:	ed93 7a00 	vldr	s14, [r3]
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <TrajectoryGenerator+0x1054>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	ee17 0a90 	vmov	r0, s15
 8002e04:	f7fd fb4c 	bl	80004a0 <__aeabi_f2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002fe0 <TrajectoryGenerator+0x1030>
 8002e10:	ec43 2b10 	vmov	d0, r2, r3
 8002e14:	f008 ff78 	bl	800bd08 <pow>
 8002e18:	ec51 0b10 	vmov	r0, r1, d0
 8002e1c:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <TrajectoryGenerator+0x1044>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fb95 	bl	8000550 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	4b76      	ldr	r3, [pc, #472]	; (800300c <TrajectoryGenerator+0x105c>)
 8002e34:	f7fd fcb6 	bl	80007a4 <__aeabi_ddiv>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9ce 	bl	80001e0 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f7fd fe50 	bl	8000af0 <__aeabi_d2f>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4a6b      	ldr	r2, [pc, #428]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002e54:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 8002e56:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb20 	bl	80004a0 <__aeabi_f2d>
 8002e60:	4604      	mov	r4, r0
 8002e62:	460d      	mov	r5, r1
 8002e64:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <TrajectoryGenerator+0x1044>)
 8002e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <TrajectoryGenerator+0x1048>)
 8002e70:	f7fd fb6e 	bl	8000550 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4690      	mov	r8, r2
 8002e7a:	4699      	mov	r9, r3
 8002e7c:	4b62      	ldr	r3, [pc, #392]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002e7e:	ed93 7a00 	vldr	s14, [r3]
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <TrajectoryGenerator+0x1054>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8c:	ee17 0a90 	vmov	r0, s15
 8002e90:	f7fd fb06 	bl	80004a0 <__aeabi_f2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002fd8 <TrajectoryGenerator+0x1028>
 8002e9c:	ec43 2b10 	vmov	d0, r2, r3
 8002ea0:	f008 ff32 	bl	800bd08 <pow>
 8002ea4:	ec53 2b10 	vmov	r2, r3, d0
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	4649      	mov	r1, r9
 8002eac:	f7fd fb50 	bl	8000550 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7fd f992 	bl	80001e0 <__aeabi_dsub>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7fd fe14 	bl	8000af0 <__aeabi_d2f>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a4c      	ldr	r2, [pc, #304]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002ecc:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fae4 	bl	80004a0 <__aeabi_f2d>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002ede:	ed93 7a00 	vldr	s14, [r3]
 8002ee2:	4b48      	ldr	r3, [pc, #288]	; (8003004 <TrajectoryGenerator+0x1054>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f7fd fad6 	bl	80004a0 <__aeabi_f2d>
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <TrajectoryGenerator+0x1044>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fb29 	bl	8000550 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f96b 	bl	80001e0 <__aeabi_dsub>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fded 	bl	8000af0 <__aeabi_d2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002f1a:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 8002f1c:	4b38      	ldr	r3, [pc, #224]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002f1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002f24:	edd3 6a04 	vldr	s13, [r3, #16]
 8002f28:	4b39      	ldr	r3, [pc, #228]	; (8003010 <TrajectoryGenerator+0x1060>)
 8002f2a:	ed93 6a00 	vldr	s12, [r3]
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd faac 	bl	80004a0 <__aeabi_f2d>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd faa5 	bl	80004a0 <__aeabi_f2d>
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <TrajectoryGenerator+0x1048>)
 8002f5c:	f7fd faf8 	bl	8000550 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4690      	mov	r8, r2
 8002f66:	4699      	mov	r9, r3
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <TrajectoryGenerator+0x1060>)
 8002f6a:	ed93 7a00 	vldr	s14, [r3]
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f78:	ee17 0a90 	vmov	r0, s15
 8002f7c:	f7fd fa90 	bl	80004a0 <__aeabi_f2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002fd8 <TrajectoryGenerator+0x1028>
 8002f88:	ec43 2b10 	vmov	d0, r2, r3
 8002f8c:	f008 febc 	bl	800bd08 <pow>
 8002f90:	ec53 2b10 	vmov	r2, r3, d0
 8002f94:	4640      	mov	r0, r8
 8002f96:	4649      	mov	r1, r9
 8002f98:	f7fd fada 	bl	8000550 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f91e 	bl	80001e4 <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fd9e 	bl	8000af0 <__aeabi_d2f>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <TrajectoryGenerator+0x1050>)
 8002fb8:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <TrajectoryGenerator+0x104c>)
 8002fbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <TrajectoryGenerator+0x1038>)
 8002fc2:	edd3 6a04 	vldr	s13, [r3, #16]
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <TrajectoryGenerator+0x1060>)
 8002fc8:	ed93 6a00 	vldr	s12, [r3]
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <TrajectoryGenerator+0x1058>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fd6:	e01d      	b.n	8003014 <TrajectoryGenerator+0x1064>
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	40000000 	.word	0x40000000
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	40080000 	.word	0x40080000
 8002fe8:	200005c0 	.word	0x200005c0
 8002fec:	20000584 	.word	0x20000584
 8002ff0:	20000580 	.word	0x20000580
 8002ff4:	20000070 	.word	0x20000070
 8002ff8:	3fe00000 	.word	0x3fe00000
 8002ffc:	200005d8 	.word	0x200005d8
 8003000:	200005f0 	.word	0x200005f0
 8003004:	20000588 	.word	0x20000588
 8003008:	2000058c 	.word	0x2000058c
 800300c:	40180000 	.word	0x40180000
 8003010:	20000590 	.word	0x20000590
 8003014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <TrajectoryGenerator+0x10c4>)
 800301e:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <TrajectoryGenerator+0x10c8>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <TrajectoryGenerator+0x10c8>)
 8003028:	6153      	str	r3, [r2, #20]

		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <TrajectoryGenerator+0x10cc>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <TrajectoryGenerator+0x10d0>)
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]

		//Reset Cascade PID
		e1 = 0;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <TrajectoryGenerator+0x10d4>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
		s1 = 0;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <TrajectoryGenerator+0x10d8>)
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
		p1 = 0;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <TrajectoryGenerator+0x10dc>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
		u1 = 0;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <TrajectoryGenerator+0x10e0>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
		e2 = 0;
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <TrajectoryGenerator+0x10e4>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
		s2 = 0;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <TrajectoryGenerator+0x10e8>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
		u2 = 0;
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <TrajectoryGenerator+0x10ec>)
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
	}
}
 800306e:	bf00      	nop
 8003070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003074:	200005d8 	.word	0x200005d8
 8003078:	200005c0 	.word	0x200005c0
 800307c:	200003de 	.word	0x200003de
 8003080:	200003dd 	.word	0x200003dd
 8003084:	2000061c 	.word	0x2000061c
 8003088:	20000620 	.word	0x20000620
 800308c:	20000624 	.word	0x20000624
 8003090:	20000628 	.word	0x20000628
 8003094:	2000062c 	.word	0x2000062c
 8003098:	20000630 	.word	0x20000630
 800309c:	20000634 	.word	0x20000634

080030a0 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	af00      	add	r7, sp, #0
	if( 0 <= t && t < t1){
 80030a6:	4b8e      	ldr	r3, [pc, #568]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	db70      	blt.n	8003198 <TrajectoryEvaluation+0xf8>
 80030b6:	4b8a      	ldr	r3, [pc, #552]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <TrajectoryEvaluation+0x244>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d565      	bpl.n	8003198 <TrajectoryEvaluation+0xf8>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 80030cc:	4b86      	ldr	r3, [pc, #536]	; (80032e8 <TrajectoryEvaluation+0x248>)
 80030ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d2:	a37d      	add	r3, pc, #500	; (adr r3, 80032c8 <TrajectoryEvaluation+0x228>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd fa3a 	bl	8000550 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4614      	mov	r4, r2
 80030e2:	461d      	mov	r5, r3
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd f9d9 	bl	80004a0 <__aeabi_f2d>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80032d0 <TrajectoryEvaluation+0x230>
 80030f6:	ec43 2b10 	vmov	d0, r2, r3
 80030fa:	f008 fe05 	bl	800bd08 <pow>
 80030fe:	ec53 2b10 	vmov	r2, r3, d0
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f7fd fa23 	bl	8000550 <__aeabi_dmul>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <TrajectoryEvaluation+0x24c>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd f864 	bl	80001e4 <__adddf3>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4973      	ldr	r1, [pc, #460]	; (80032f0 <TrajectoryEvaluation+0x250>)
 8003122:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 8003126:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <TrajectoryEvaluation+0x248>)
 8003128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <TrajectoryEvaluation+0x254>)
 8003132:	f7fd fa0d 	bl	8000550 <__aeabi_dmul>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4614      	mov	r4, r2
 800313c:	461d      	mov	r5, r3
 800313e:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <TrajectoryEvaluation+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd f9ac 	bl	80004a0 <__aeabi_f2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	ed9f 1b62 	vldr	d1, [pc, #392]	; 80032d8 <TrajectoryEvaluation+0x238>
 8003150:	ec43 2b10 	vmov	d0, r2, r3
 8003154:	f008 fdd8 	bl	800bd08 <pow>
 8003158:	ec53 2b10 	vmov	r2, r3, d0
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	f7fd f9f6 	bl	8000550 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4963      	ldr	r1, [pc, #396]	; (80032f8 <TrajectoryEvaluation+0x258>)
 800316a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 800316e:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <TrajectoryEvaluation+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f994 	bl	80004a0 <__aeabi_f2d>
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <TrajectoryEvaluation+0x248>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f7fd f9e7 	bl	8000550 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fd fcb1 	bl	8000af0 <__aeabi_d2f>
 800318e:	4603      	mov	r3, r0
 8003190:	4a5a      	ldr	r2, [pc, #360]	; (80032fc <TrajectoryEvaluation+0x25c>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	f000 bcff 	b.w	8003b96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t1 <= t && t< t2){
 8003198:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <TrajectoryEvaluation+0x244>)
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	f200 80b0 	bhi.w	8003310 <TrajectoryEvaluation+0x270>
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80031b2:	ed93 7a00 	vldr	s14, [r3]
 80031b6:	4b52      	ldr	r3, [pc, #328]	; (8003300 <TrajectoryEvaluation+0x260>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	f140 80a4 	bpl.w	8003310 <TrajectoryEvaluation+0x270>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 80031c8:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <TrajectoryEvaluation+0x264>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd f967 	bl	80004a0 <__aeabi_f2d>
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <TrajectoryEvaluation+0x24c>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd f804 	bl	80001e4 <__adddf3>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4614      	mov	r4, r2
 80031e2:	461d      	mov	r5, r3
 80031e4:	4b48      	ldr	r3, [pc, #288]	; (8003308 <TrajectoryEvaluation+0x268>)
 80031e6:	ed93 7a00 	vldr	s14, [r3]
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <TrajectoryEvaluation+0x240>)
 80031ec:	edd3 6a00 	vldr	s13, [r3]
 80031f0:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <TrajectoryEvaluation+0x244>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	ee17 0a90 	vmov	r0, s15
 8003202:	f7fd f94d 	bl	80004a0 <__aeabi_f2d>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4620      	mov	r0, r4
 800320c:	4629      	mov	r1, r5
 800320e:	f7fc ffe9 	bl	80001e4 <__adddf3>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4614      	mov	r4, r2
 8003218:	461d      	mov	r5, r3
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <TrajectoryEvaluation+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f93e 	bl	80004a0 <__aeabi_f2d>
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <TrajectoryEvaluation+0x254>)
 800322a:	f7fd f991 	bl	8000550 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4690      	mov	r8, r2
 8003234:	4699      	mov	r9, r3
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <TrajectoryEvaluation+0x240>)
 8003238:	ed93 7a00 	vldr	s14, [r3]
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <TrajectoryEvaluation+0x244>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003246:	ee17 0a90 	vmov	r0, s15
 800324a:	f7fd f929 	bl	80004a0 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80032d8 <TrajectoryEvaluation+0x238>
 8003256:	ec43 2b10 	vmov	d0, r2, r3
 800325a:	f008 fd55 	bl	800bd08 <pow>
 800325e:	ec53 2b10 	vmov	r2, r3, d0
 8003262:	4640      	mov	r0, r8
 8003264:	4649      	mov	r1, r9
 8003266:	f7fd f973 	bl	8000550 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fc ffb7 	bl	80001e4 <__adddf3>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	491d      	ldr	r1, [pc, #116]	; (80032f0 <TrajectoryEvaluation+0x250>)
 800327c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <TrajectoryEvaluation+0x268>)
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <TrajectoryEvaluation+0x26c>)
 8003288:	edd3 6a00 	vldr	s13, [r3]
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <TrajectoryEvaluation+0x240>)
 800328e:	ed93 6a00 	vldr	s12, [r3]
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <TrajectoryEvaluation+0x244>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ee76 7a67 	vsub.f32	s15, s12, s15
 800329c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	ee17 0a90 	vmov	r0, s15
 80032a8:	f7fd f8fa 	bl	80004a0 <__aeabi_f2d>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4911      	ldr	r1, [pc, #68]	; (80032f8 <TrajectoryEvaluation+0x258>)
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <TrajectoryEvaluation+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <TrajectoryEvaluation+0x25c>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	f000 bc6a 	b.w	8003b96 <TrajectoryEvaluation+0xaf6>
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	55555555 	.word	0x55555555
 80032cc:	3fc55555 	.word	0x3fc55555
 80032d0:	00000000 	.word	0x00000000
 80032d4:	40080000 	.word	0x40080000
 80032d8:	00000000 	.word	0x00000000
 80032dc:	40000000 	.word	0x40000000
 80032e0:	20000578 	.word	0x20000578
 80032e4:	2000057c 	.word	0x2000057c
 80032e8:	20000070 	.word	0x20000070
 80032ec:	200005a8 	.word	0x200005a8
 80032f0:	20000608 	.word	0x20000608
 80032f4:	3fe00000 	.word	0x3fe00000
 80032f8:	20000610 	.word	0x20000610
 80032fc:	20000618 	.word	0x20000618
 8003300:	20000580 	.word	0x20000580
 8003304:	200005f0 	.word	0x200005f0
 8003308:	200005d8 	.word	0x200005d8
 800330c:	200005c0 	.word	0x200005c0
	}
	else if (t2 <= t && t < t3){
 8003310:	4bb5      	ldr	r3, [pc, #724]	; (80035e8 <TrajectoryEvaluation+0x548>)
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	4bb5      	ldr	r3, [pc, #724]	; (80035ec <TrajectoryEvaluation+0x54c>)
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	f200 8107 	bhi.w	8003536 <TrajectoryEvaluation+0x496>
 8003328:	4bb0      	ldr	r3, [pc, #704]	; (80035ec <TrajectoryEvaluation+0x54c>)
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	4bb0      	ldr	r3, [pc, #704]	; (80035f0 <TrajectoryEvaluation+0x550>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	f140 80fb 	bpl.w	8003536 <TrajectoryEvaluation+0x496>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 8003340:	4bac      	ldr	r3, [pc, #688]	; (80035f4 <TrajectoryEvaluation+0x554>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f8ab 	bl	80004a0 <__aeabi_f2d>
 800334a:	4bab      	ldr	r3, [pc, #684]	; (80035f8 <TrajectoryEvaluation+0x558>)
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f7fc ff48 	bl	80001e4 <__adddf3>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	4ba7      	ldr	r3, [pc, #668]	; (80035fc <TrajectoryEvaluation+0x55c>)
 800335e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003362:	4ba2      	ldr	r3, [pc, #648]	; (80035ec <TrajectoryEvaluation+0x54c>)
 8003364:	edd3 6a00 	vldr	s13, [r3]
 8003368:	4b9f      	ldr	r3, [pc, #636]	; (80035e8 <TrajectoryEvaluation+0x548>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	ee17 0a90 	vmov	r0, s15
 800337a:	f7fd f891 	bl	80004a0 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff2d 	bl	80001e4 <__adddf3>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4614      	mov	r4, r2
 8003390:	461d      	mov	r5, r3
 8003392:	4b9b      	ldr	r3, [pc, #620]	; (8003600 <TrajectoryEvaluation+0x560>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f882 	bl	80004a0 <__aeabi_f2d>
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	4b98      	ldr	r3, [pc, #608]	; (8003604 <TrajectoryEvaluation+0x564>)
 80033a2:	f7fd f8d5 	bl	8000550 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <TrajectoryEvaluation+0x54c>)
 80033b0:	ed93 7a00 	vldr	s14, [r3]
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <TrajectoryEvaluation+0x548>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033be:	ee17 0a90 	vmov	r0, s15
 80033c2:	f7fd f86d 	bl	80004a0 <__aeabi_f2d>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	ed9f 1b83 	vldr	d1, [pc, #524]	; 80035d8 <TrajectoryEvaluation+0x538>
 80033ce:	ec43 2b10 	vmov	d0, r2, r3
 80033d2:	f008 fc99 	bl	800bd08 <pow>
 80033d6:	ec53 2b10 	vmov	r2, r3, d0
 80033da:	4640      	mov	r0, r8
 80033dc:	4649      	mov	r1, r9
 80033de:	f7fd f8b7 	bl	8000550 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fc fefb 	bl	80001e4 <__adddf3>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	461d      	mov	r5, r3
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <TrajectoryEvaluation+0x54c>)
 80033f8:	ed93 7a00 	vldr	s14, [r3]
 80033fc:	4b7a      	ldr	r3, [pc, #488]	; (80035e8 <TrajectoryEvaluation+0x548>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003406:	ee17 0a90 	vmov	r0, s15
 800340a:	f7fd f849 	bl	80004a0 <__aeabi_f2d>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	ed9f 1b73 	vldr	d1, [pc, #460]	; 80035e0 <TrajectoryEvaluation+0x540>
 8003416:	ec43 2b10 	vmov	d0, r2, r3
 800341a:	f008 fc75 	bl	800bd08 <pow>
 800341e:	ec51 0b10 	vmov	r0, r1, d0
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <TrajectoryEvaluation+0x568>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f892 	bl	8000550 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b74      	ldr	r3, [pc, #464]	; (800360c <TrajectoryEvaluation+0x56c>)
 800343a:	f7fd f9b3 	bl	80007a4 <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc fecb 	bl	80001e0 <__aeabi_dsub>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4970      	ldr	r1, [pc, #448]	; (8003610 <TrajectoryEvaluation+0x570>)
 8003450:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 8003454:	4b69      	ldr	r3, [pc, #420]	; (80035fc <TrajectoryEvaluation+0x55c>)
 8003456:	ed93 7a01 	vldr	s14, [r3, #4]
 800345a:	4b69      	ldr	r3, [pc, #420]	; (8003600 <TrajectoryEvaluation+0x560>)
 800345c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003460:	4b62      	ldr	r3, [pc, #392]	; (80035ec <TrajectoryEvaluation+0x54c>)
 8003462:	ed93 6a00 	vldr	s12, [r3]
 8003466:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <TrajectoryEvaluation+0x548>)
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003478:	ee17 0a90 	vmov	r0, s15
 800347c:	f7fd f810 	bl	80004a0 <__aeabi_f2d>
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	4b60      	ldr	r3, [pc, #384]	; (8003608 <TrajectoryEvaluation+0x568>)
 8003486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <TrajectoryEvaluation+0x564>)
 8003490:	f7fd f85e 	bl	8000550 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4690      	mov	r8, r2
 800349a:	4699      	mov	r9, r3
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <TrajectoryEvaluation+0x54c>)
 800349e:	ed93 7a00 	vldr	s14, [r3]
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <TrajectoryEvaluation+0x548>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ac:	ee17 0a90 	vmov	r0, s15
 80034b0:	f7fc fff6 	bl	80004a0 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80035d8 <TrajectoryEvaluation+0x538>
 80034bc:	ec43 2b10 	vmov	d0, r2, r3
 80034c0:	f008 fc22 	bl	800bd08 <pow>
 80034c4:	ec53 2b10 	vmov	r2, r3, d0
 80034c8:	4640      	mov	r0, r8
 80034ca:	4649      	mov	r1, r9
 80034cc:	f7fd f840 	bl	8000550 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4620      	mov	r0, r4
 80034d6:	4629      	mov	r1, r5
 80034d8:	f7fc fe82 	bl	80001e0 <__aeabi_dsub>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	494c      	ldr	r1, [pc, #304]	; (8003614 <TrajectoryEvaluation+0x574>)
 80034e2:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 80034e6:	4b46      	ldr	r3, [pc, #280]	; (8003600 <TrajectoryEvaluation+0x560>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc ffd8 	bl	80004a0 <__aeabi_f2d>
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
 80034f4:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <TrajectoryEvaluation+0x54c>)
 80034f6:	ed93 7a00 	vldr	s14, [r3]
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <TrajectoryEvaluation+0x548>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003504:	ee17 0a90 	vmov	r0, s15
 8003508:	f7fc ffca 	bl	80004a0 <__aeabi_f2d>
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <TrajectoryEvaluation+0x568>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f7fd f81d 	bl	8000550 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fc fe5f 	bl	80001e0 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f7fd fae1 	bl	8000af0 <__aeabi_d2f>
 800352e:	4603      	mov	r3, r0
 8003530:	4a39      	ldr	r2, [pc, #228]	; (8003618 <TrajectoryEvaluation+0x578>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e32f      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t3 <= t && t < t4 ){
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <TrajectoryEvaluation+0x550>)
 8003538:	ed93 7a00 	vldr	s14, [r3]
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <TrajectoryEvaluation+0x54c>)
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	d869      	bhi.n	8003620 <TrajectoryEvaluation+0x580>
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <TrajectoryEvaluation+0x54c>)
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	4b32      	ldr	r3, [pc, #200]	; (800361c <TrajectoryEvaluation+0x57c>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	d55e      	bpl.n	8003620 <TrajectoryEvaluation+0x580>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <TrajectoryEvaluation+0x554>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc ff9a 	bl	80004a0 <__aeabi_f2d>
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <TrajectoryEvaluation+0x558>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f7fc fe37 	bl	80001e4 <__adddf3>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4614      	mov	r4, r2
 800357c:	461d      	mov	r5, r3
 800357e:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <TrajectoryEvaluation+0x55c>)
 8003580:	ed93 7a02 	vldr	s14, [r3, #8]
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <TrajectoryEvaluation+0x54c>)
 8003586:	edd3 6a00 	vldr	s13, [r3]
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <TrajectoryEvaluation+0x550>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	ee17 0a90 	vmov	r0, s15
 800359c:	f7fc ff80 	bl	80004a0 <__aeabi_f2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc fe1c 	bl	80001e4 <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4917      	ldr	r1, [pc, #92]	; (8003610 <TrajectoryEvaluation+0x570>)
 80035b2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <TrajectoryEvaluation+0x55c>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ff70 	bl	80004a0 <__aeabi_f2d>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4913      	ldr	r1, [pc, #76]	; (8003614 <TrajectoryEvaluation+0x574>)
 80035c6:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <TrajectoryEvaluation+0x578>)
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e2e0      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
 80035d4:	f3af 8000 	nop.w
 80035d8:	00000000 	.word	0x00000000
 80035dc:	40000000 	.word	0x40000000
 80035e0:	00000000 	.word	0x00000000
 80035e4:	40080000 	.word	0x40080000
 80035e8:	20000580 	.word	0x20000580
 80035ec:	20000578 	.word	0x20000578
 80035f0:	20000584 	.word	0x20000584
 80035f4:	200005f0 	.word	0x200005f0
 80035f8:	200005a8 	.word	0x200005a8
 80035fc:	200005d8 	.word	0x200005d8
 8003600:	200005c0 	.word	0x200005c0
 8003604:	3fe00000 	.word	0x3fe00000
 8003608:	20000070 	.word	0x20000070
 800360c:	40180000 	.word	0x40180000
 8003610:	20000608 	.word	0x20000608
 8003614:	20000610 	.word	0x20000610
 8003618:	20000618 	.word	0x20000618
 800361c:	20000588 	.word	0x20000588
	}
	else if (t4 <= t && t < t5 ){
 8003620:	4bb3      	ldr	r3, [pc, #716]	; (80038f0 <TrajectoryEvaluation+0x850>)
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	4bb3      	ldr	r3, [pc, #716]	; (80038f4 <TrajectoryEvaluation+0x854>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	f200 80be 	bhi.w	80037b4 <TrajectoryEvaluation+0x714>
 8003638:	4bae      	ldr	r3, [pc, #696]	; (80038f4 <TrajectoryEvaluation+0x854>)
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	4bae      	ldr	r3, [pc, #696]	; (80038f8 <TrajectoryEvaluation+0x858>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	f140 80b2 	bpl.w	80037b4 <TrajectoryEvaluation+0x714>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 8003650:	4baa      	ldr	r3, [pc, #680]	; (80038fc <TrajectoryEvaluation+0x85c>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff23 	bl	80004a0 <__aeabi_f2d>
 800365a:	4ba9      	ldr	r3, [pc, #676]	; (8003900 <TrajectoryEvaluation+0x860>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fdc0 	bl	80001e4 <__adddf3>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4690      	mov	r8, r2
 800366a:	4699      	mov	r9, r3
 800366c:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <TrajectoryEvaluation+0x864>)
 800366e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003672:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <TrajectoryEvaluation+0x854>)
 8003674:	edd3 6a00 	vldr	s13, [r3]
 8003678:	4b9d      	ldr	r3, [pc, #628]	; (80038f0 <TrajectoryEvaluation+0x850>)
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	ee17 0a90 	vmov	r0, s15
 800368a:	f7fc ff09 	bl	80004a0 <__aeabi_f2d>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc fda5 	bl	80001e4 <__adddf3>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4690      	mov	r8, r2
 80036a0:	4699      	mov	r9, r3
 80036a2:	4b94      	ldr	r3, [pc, #592]	; (80038f4 <TrajectoryEvaluation+0x854>)
 80036a4:	ed93 7a00 	vldr	s14, [r3]
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <TrajectoryEvaluation+0x850>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b2:	ee17 0a90 	vmov	r0, s15
 80036b6:	f7fc fef3 	bl	80004a0 <__aeabi_f2d>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	ed9f 1b88 	vldr	d1, [pc, #544]	; 80038e0 <TrajectoryEvaluation+0x840>
 80036c2:	ec43 2b10 	vmov	d0, r2, r3
 80036c6:	f008 fb1f 	bl	800bd08 <pow>
 80036ca:	ec51 0b10 	vmov	r0, r1, d0
 80036ce:	4b8e      	ldr	r3, [pc, #568]	; (8003908 <TrajectoryEvaluation+0x868>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc ff3c 	bl	8000550 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	4b89      	ldr	r3, [pc, #548]	; (800390c <TrajectoryEvaluation+0x86c>)
 80036e6:	f7fd f85d 	bl	80007a4 <__aeabi_ddiv>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4640      	mov	r0, r8
 80036f0:	4649      	mov	r1, r9
 80036f2:	f7fc fd75 	bl	80001e0 <__aeabi_dsub>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4985      	ldr	r1, [pc, #532]	; (8003910 <TrajectoryEvaluation+0x870>)
 80036fc:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 8003700:	4b80      	ldr	r3, [pc, #512]	; (8003904 <TrajectoryEvaluation+0x864>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc fecb 	bl	80004a0 <__aeabi_f2d>
 800370a:	4680      	mov	r8, r0
 800370c:	4689      	mov	r9, r1
 800370e:	4b7e      	ldr	r3, [pc, #504]	; (8003908 <TrajectoryEvaluation+0x868>)
 8003710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <TrajectoryEvaluation+0x874>)
 800371a:	f7fc ff19 	bl	8000550 <__aeabi_dmul>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4692      	mov	sl, r2
 8003724:	469b      	mov	fp, r3
 8003726:	4b73      	ldr	r3, [pc, #460]	; (80038f4 <TrajectoryEvaluation+0x854>)
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <TrajectoryEvaluation+0x850>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	ee17 0a90 	vmov	r0, s15
 800373a:	f7fc feb1 	bl	80004a0 <__aeabi_f2d>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	ed9f 1b69 	vldr	d1, [pc, #420]	; 80038e8 <TrajectoryEvaluation+0x848>
 8003746:	ec43 2b10 	vmov	d0, r2, r3
 800374a:	f008 fadd 	bl	800bd08 <pow>
 800374e:	ec53 2b10 	vmov	r2, r3, d0
 8003752:	4650      	mov	r0, sl
 8003754:	4659      	mov	r1, fp
 8003756:	f7fc fefb 	bl	8000550 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4640      	mov	r0, r8
 8003760:	4649      	mov	r1, r9
 8003762:	f7fc fd3d 	bl	80001e0 <__aeabi_dsub>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	496b      	ldr	r1, [pc, #428]	; (8003918 <TrajectoryEvaluation+0x878>)
 800376c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 8003770:	4b65      	ldr	r3, [pc, #404]	; (8003908 <TrajectoryEvaluation+0x868>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	4614      	mov	r4, r2
 8003778:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800377c:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <TrajectoryEvaluation+0x854>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <TrajectoryEvaluation+0x850>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	ee17 0a90 	vmov	r0, s15
 8003790:	f7fc fe86 	bl	80004a0 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4620      	mov	r0, r4
 800379a:	4629      	mov	r1, r5
 800379c:	f7fc fed8 	bl	8000550 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7fd f9a2 	bl	8000af0 <__aeabi_d2f>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a5b      	ldr	r2, [pc, #364]	; (800391c <TrajectoryEvaluation+0x87c>)
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e1f0      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t5 <= t && t < t6 ){
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <TrajectoryEvaluation+0x858>)
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	4b4e      	ldr	r3, [pc, #312]	; (80038f4 <TrajectoryEvaluation+0x854>)
 80037bc:	edd3 7a00 	vldr	s15, [r3]
 80037c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c8:	f200 80ae 	bhi.w	8003928 <TrajectoryEvaluation+0x888>
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <TrajectoryEvaluation+0x854>)
 80037ce:	ed93 7a00 	vldr	s14, [r3]
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <TrajectoryEvaluation+0x880>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e0:	f140 80a2 	bpl.w	8003928 <TrajectoryEvaluation+0x888>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 80037e4:	4b45      	ldr	r3, [pc, #276]	; (80038fc <TrajectoryEvaluation+0x85c>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fe59 	bl	80004a0 <__aeabi_f2d>
 80037ee:	4b44      	ldr	r3, [pc, #272]	; (8003900 <TrajectoryEvaluation+0x860>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fcf6 	bl	80001e4 <__adddf3>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	4b40      	ldr	r3, [pc, #256]	; (8003904 <TrajectoryEvaluation+0x864>)
 8003802:	ed93 7a04 	vldr	s14, [r3, #16]
 8003806:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <TrajectoryEvaluation+0x854>)
 8003808:	edd3 6a00 	vldr	s13, [r3]
 800380c:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <TrajectoryEvaluation+0x858>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	ee17 0a90 	vmov	r0, s15
 800381e:	f7fc fe3f 	bl	80004a0 <__aeabi_f2d>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fc fcdb 	bl	80001e4 <__adddf3>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4614      	mov	r4, r2
 8003834:	461d      	mov	r5, r3
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <TrajectoryEvaluation+0x884>)
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fe30 	bl	80004a0 <__aeabi_f2d>
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	4b33      	ldr	r3, [pc, #204]	; (8003914 <TrajectoryEvaluation+0x874>)
 8003846:	f7fc fe83 	bl	8000550 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4690      	mov	r8, r2
 8003850:	4699      	mov	r9, r3
 8003852:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <TrajectoryEvaluation+0x854>)
 8003854:	ed93 7a00 	vldr	s14, [r3]
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <TrajectoryEvaluation+0x858>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003862:	ee17 0a90 	vmov	r0, s15
 8003866:	f7fc fe1b 	bl	80004a0 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80038e8 <TrajectoryEvaluation+0x848>
 8003872:	ec43 2b10 	vmov	d0, r2, r3
 8003876:	f008 fa47 	bl	800bd08 <pow>
 800387a:	ec53 2b10 	vmov	r2, r3, d0
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f7fc fe65 	bl	8000550 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fc fca9 	bl	80001e4 <__adddf3>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	491e      	ldr	r1, [pc, #120]	; (8003910 <TrajectoryEvaluation+0x870>)
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <TrajectoryEvaluation+0x864>)
 800389e:	ed93 7a04 	vldr	s14, [r3, #16]
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <TrajectoryEvaluation+0x884>)
 80038a4:	edd3 6a04 	vldr	s13, [r3, #16]
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <TrajectoryEvaluation+0x854>)
 80038aa:	ed93 6a00 	vldr	s12, [r3]
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <TrajectoryEvaluation+0x858>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80038b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c0:	ee17 0a90 	vmov	r0, s15
 80038c4:	f7fc fdec 	bl	80004a0 <__aeabi_f2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4912      	ldr	r1, [pc, #72]	; (8003918 <TrajectoryEvaluation+0x878>)
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <TrajectoryEvaluation+0x884>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <TrajectoryEvaluation+0x87c>)
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e15c      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
 80038dc:	f3af 8000 	nop.w
 80038e0:	00000000 	.word	0x00000000
 80038e4:	40080000 	.word	0x40080000
 80038e8:	00000000 	.word	0x00000000
 80038ec:	40000000 	.word	0x40000000
 80038f0:	20000588 	.word	0x20000588
 80038f4:	20000578 	.word	0x20000578
 80038f8:	2000058c 	.word	0x2000058c
 80038fc:	200005f0 	.word	0x200005f0
 8003900:	200005a8 	.word	0x200005a8
 8003904:	200005d8 	.word	0x200005d8
 8003908:	20000070 	.word	0x20000070
 800390c:	40180000 	.word	0x40180000
 8003910:	20000608 	.word	0x20000608
 8003914:	3fe00000 	.word	0x3fe00000
 8003918:	20000610 	.word	0x20000610
 800391c:	20000618 	.word	0x20000618
 8003920:	20000590 	.word	0x20000590
 8003924:	200005c0 	.word	0x200005c0
	}
	else if (t6 <= t && t < t7 ){
 8003928:	4ba1      	ldr	r3, [pc, #644]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 800392a:	ed93 7a00 	vldr	s14, [r3]
 800392e:	4ba1      	ldr	r3, [pc, #644]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	f200 8107 	bhi.w	8003b4e <TrajectoryEvaluation+0xaae>
 8003940:	4b9c      	ldr	r3, [pc, #624]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	4b9c      	ldr	r3, [pc, #624]	; (8003bb8 <TrajectoryEvaluation+0xb18>)
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003954:	f140 80fb 	bpl.w	8003b4e <TrajectoryEvaluation+0xaae>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8003958:	4b98      	ldr	r3, [pc, #608]	; (8003bbc <TrajectoryEvaluation+0xb1c>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fd9f 	bl	80004a0 <__aeabi_f2d>
 8003962:	4b97      	ldr	r3, [pc, #604]	; (8003bc0 <TrajectoryEvaluation+0xb20>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc fc3c 	bl	80001e4 <__adddf3>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <TrajectoryEvaluation+0xb24>)
 8003976:	ed93 7a05 	vldr	s14, [r3, #20]
 800397a:	4b8e      	ldr	r3, [pc, #568]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 800397c:	edd3 6a00 	vldr	s13, [r3]
 8003980:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	ee17 0a90 	vmov	r0, s15
 8003992:	f7fc fd85 	bl	80004a0 <__aeabi_f2d>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fc21 	bl	80001e4 <__adddf3>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4614      	mov	r4, r2
 80039a8:	461d      	mov	r5, r3
 80039aa:	4b87      	ldr	r3, [pc, #540]	; (8003bc8 <TrajectoryEvaluation+0xb28>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fd76 	bl	80004a0 <__aeabi_f2d>
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <TrajectoryEvaluation+0xb2c>)
 80039ba:	f7fc fdc9 	bl	8000550 <__aeabi_dmul>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 80039c8:	ed93 7a00 	vldr	s14, [r3]
 80039cc:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 80039ce:	edd3 7a00 	vldr	s15, [r3]
 80039d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d6:	ee17 0a90 	vmov	r0, s15
 80039da:	f7fc fd61 	bl	80004a0 <__aeabi_f2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003ba0 <TrajectoryEvaluation+0xb00>
 80039e6:	ec43 2b10 	vmov	d0, r2, r3
 80039ea:	f008 f98d 	bl	800bd08 <pow>
 80039ee:	ec53 2b10 	vmov	r2, r3, d0
 80039f2:	4640      	mov	r0, r8
 80039f4:	4649      	mov	r1, r9
 80039f6:	f7fc fdab 	bl	8000550 <__aeabi_dmul>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f7fc fbef 	bl	80001e4 <__adddf3>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	4b69      	ldr	r3, [pc, #420]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003a10:	ed93 7a00 	vldr	s14, [r3]
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a1e:	ee17 0a90 	vmov	r0, s15
 8003a22:	f7fc fd3d 	bl	80004a0 <__aeabi_f2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8003ba8 <TrajectoryEvaluation+0xb08>
 8003a2e:	ec43 2b10 	vmov	d0, r2, r3
 8003a32:	f008 f969 	bl	800bd08 <pow>
 8003a36:	ec51 0b10 	vmov	r0, r1, d0
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <TrajectoryEvaluation+0xb30>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fd86 	bl	8000550 <__aeabi_dmul>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b60      	ldr	r3, [pc, #384]	; (8003bd4 <TrajectoryEvaluation+0xb34>)
 8003a52:	f7fc fea7 	bl	80007a4 <__aeabi_ddiv>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fbc1 	bl	80001e4 <__adddf3>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	495c      	ldr	r1, [pc, #368]	; (8003bd8 <TrajectoryEvaluation+0xb38>)
 8003a68:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003a6c:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <TrajectoryEvaluation+0xb24>)
 8003a6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <TrajectoryEvaluation+0xb28>)
 8003a74:	edd3 6a05 	vldr	s13, [r3, #20]
 8003a78:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003a7a:	ed93 6a00 	vldr	s12, [r3]
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a90:	ee17 0a90 	vmov	r0, s15
 8003a94:	f7fc fd04 	bl	80004a0 <__aeabi_f2d>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <TrajectoryEvaluation+0xb30>)
 8003a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <TrajectoryEvaluation+0xb2c>)
 8003aa8:	f7fc fd52 	bl	8000550 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4690      	mov	r8, r2
 8003ab2:	4699      	mov	r9, r3
 8003ab4:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003ab6:	ed93 7a00 	vldr	s14, [r3]
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac4:	ee17 0a90 	vmov	r0, s15
 8003ac8:	f7fc fcea 	bl	80004a0 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8003ba0 <TrajectoryEvaluation+0xb00>
 8003ad4:	ec43 2b10 	vmov	d0, r2, r3
 8003ad8:	f008 f916 	bl	800bd08 <pow>
 8003adc:	ec53 2b10 	vmov	r2, r3, d0
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	f7fc fd34 	bl	8000550 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fb78 	bl	80001e4 <__adddf3>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4938      	ldr	r1, [pc, #224]	; (8003bdc <TrajectoryEvaluation+0xb3c>)
 8003afa:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <TrajectoryEvaluation+0xb28>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fccc 	bl	80004a0 <__aeabi_f2d>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003b0e:	ed93 7a00 	vldr	s14, [r3]
 8003b12:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <TrajectoryEvaluation+0xb10>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1c:	ee17 0a90 	vmov	r0, s15
 8003b20:	f7fc fcbe 	bl	80004a0 <__aeabi_f2d>
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <TrajectoryEvaluation+0xb30>)
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f7fc fd11 	bl	8000550 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fb55 	bl	80001e4 <__adddf3>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fc ffd5 	bl	8000af0 <__aeabi_d2f>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <TrajectoryEvaluation+0xb40>)
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e023      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t7 <= t ){
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <TrajectoryEvaluation+0xb18>)
 8003b50:	ed93 7a00 	vldr	s14, [r3]
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003b56:	edd3 7a00 	vldr	s15, [r3]
 8003b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b62:	d900      	bls.n	8003b66 <TrajectoryEvaluation+0xac6>
		omega_ref = omega_ref;
		alpha_ref = alpha_ref;
		Go_Flag = 0;
		t = 0;
	}
}
 8003b64:	e017      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
		theta_ref = theta_f;
 8003b66:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <TrajectoryEvaluation+0xb44>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	491a      	ldr	r1, [pc, #104]	; (8003bd8 <TrajectoryEvaluation+0xb38>)
 8003b6e:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <TrajectoryEvaluation+0xb3c>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	4918      	ldr	r1, [pc, #96]	; (8003bdc <TrajectoryEvaluation+0xb3c>)
 8003b7a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <TrajectoryEvaluation+0xb40>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <TrajectoryEvaluation+0xb40>)
 8003b84:	6013      	str	r3, [r2, #0]
		Go_Flag = 0;
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <TrajectoryEvaluation+0xb48>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
		t = 0;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <TrajectoryEvaluation+0xb14>)
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	e7ff      	b.n	8003b96 <TrajectoryEvaluation+0xaf6>
 8003b96:	bf00      	nop
 8003b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9c:	f3af 8000 	nop.w
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	40000000 	.word	0x40000000
 8003ba8:	00000000 	.word	0x00000000
 8003bac:	40080000 	.word	0x40080000
 8003bb0:	20000590 	.word	0x20000590
 8003bb4:	20000578 	.word	0x20000578
 8003bb8:	20000594 	.word	0x20000594
 8003bbc:	200005f0 	.word	0x200005f0
 8003bc0:	200005a8 	.word	0x200005a8
 8003bc4:	200005d8 	.word	0x200005d8
 8003bc8:	200005c0 	.word	0x200005c0
 8003bcc:	3fe00000 	.word	0x3fe00000
 8003bd0:	20000070 	.word	0x20000070
 8003bd4:	40180000 	.word	0x40180000
 8003bd8:	20000608 	.word	0x20000608
 8003bdc:	20000610 	.word	0x20000610
 8003be0:	20000618 	.word	0x20000618
 8003be4:	200005b0 	.word	0x200005b0
 8003be8:	200003dd 	.word	0x200003dd

08003bec <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bf6:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003bfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bfe:	edd7 7a00 	vldr	s15, [r7]
 8003c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <PositionController+0x9c>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <PositionController+0xa0>)
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <PositionController+0x9c>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <PositionController+0xa0>)
 8003c1e:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <PositionController+0xa4>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <PositionController+0x9c>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <PositionController+0xa8>)
 8003c34:	edd3 6a00 	vldr	s13, [r3]
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <PositionController+0xa0>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <PositionController+0x9c>)
 8003c48:	edd3 6a00 	vldr	s13, [r3]
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <PositionController+0xac>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <PositionController+0xb0>)
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <PositionController+0xb4>)
 8003c66:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <PositionController+0x9c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <PositionController+0xac>)
 8003c70:	6013      	str	r3, [r2, #0]
	return u1;
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <PositionController+0xb4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	ee07 3a90 	vmov	s15, r3
}
 8003c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	2000061c 	.word	0x2000061c
 8003c8c:	20000620 	.word	0x20000620
 8003c90:	20000638 	.word	0x20000638
 8003c94:	2000063c 	.word	0x2000063c
 8003c98:	20000624 	.word	0x20000624
 8003c9c:	20000640 	.word	0x20000640
 8003ca0:	20000628 	.word	0x20000628

08003ca4 <VelocityController>:

float VelocityController(float r,float y,float uP)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	ed87 0a03 	vstr	s0, [r7, #12]
 8003cae:	edc7 0a02 	vstr	s1, [r7, #8]
 8003cb2:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 8003cb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <VelocityController+0xfc>)
 8003cc4:	edc3 7a00 	vstr	s15, [r3]
	if(e2 >= w_max)
 8003cc8:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <VelocityController+0xfc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fbe7 	bl	80004a0 <__aeabi_f2d>
 8003cd2:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <VelocityController+0x100>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fec0 	bl	8000a5c <__aeabi_dcmpge>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <VelocityController+0x54>
	{
		e2 = w_max;
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <VelocityController+0x100>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc ff00 	bl	8000af0 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <VelocityController+0xfc>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e020      	b.n	8003d3a <VelocityController+0x96>
	}

	else if (e2 <= -w_max)
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <VelocityController+0xfc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fc fbcf 	bl	80004a0 <__aeabi_f2d>
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <VelocityController+0x100>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	4614      	mov	r4, r2
 8003d0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d0e:	4622      	mov	r2, r4
 8003d10:	462b      	mov	r3, r5
 8003d12:	f7fc fe99 	bl	8000a48 <__aeabi_dcmple>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <VelocityController+0x96>
	{
		e2 = -w_max;
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <VelocityController+0x100>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f7fc fee3 	bl	8000af0 <__aeabi_d2f>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef1 7a67 	vneg.f32	s15, s15
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <VelocityController+0xfc>)
 8003d36:	edc3 7a00 	vstr	s15, [r3]
	}

	e2 = e2 - y;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <VelocityController+0xfc>)
 8003d3c:	ed93 7a00 	vldr	s14, [r3]
 8003d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <VelocityController+0xfc>)
 8003d4a:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <VelocityController+0x104>)
 8003d50:	ed93 7a00 	vldr	s14, [r3]
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <VelocityController+0xfc>)
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <VelocityController+0x104>)
 8003d60:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2);
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <VelocityController+0x108>)
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <VelocityController+0xfc>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <VelocityController+0x10c>)
 8003d76:	edd3 6a00 	vldr	s13, [r3]
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <VelocityController+0x104>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <VelocityController+0x110>)
 8003d8a:	edc3 7a00 	vstr	s15, [r3]
	return u2;
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <VelocityController+0x110>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	ee07 3a90 	vmov	s15, r3
}
 8003d96:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003da0:	2000062c 	.word	0x2000062c
 8003da4:	20000060 	.word	0x20000060
 8003da8:	20000630 	.word	0x20000630
 8003dac:	20000078 	.word	0x20000078
 8003db0:	2000007c 	.word	0x2000007c
 8003db4:	20000634 	.word	0x20000634

08003db8 <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003dc6:	ed87 1a01 	vstr	s2, [r7, #4]
 8003dca:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	static float add = 2.0;
	u = PositionController(Pd, P);
 8003dce:	edd7 0a02 	vldr	s1, [r7, #8]
 8003dd2:	ed97 0a03 	vldr	s0, [r7, #12]
 8003dd6:	f7ff ff09 	bl	8003bec <PositionController>
 8003dda:	eef0 7a40 	vmov.f32	s15, s0
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <Cascade+0xc0>)
 8003de0:	edc3 7a00 	vstr	s15, [r3]
	u = VelocityController(Vd, V, u);
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <Cascade+0xc0>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	eeb0 1a67 	vmov.f32	s2, s15
 8003dee:	edd7 0a00 	vldr	s1, [r7]
 8003df2:	ed97 0a01 	vldr	s0, [r7, #4]
 8003df6:	f7ff ff55 	bl	8003ca4 <VelocityController>
 8003dfa:	eef0 7a40 	vmov.f32	s15, s0
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <Cascade+0xc0>)
 8003e00:	edc3 7a00 	vstr	s15, [r3]
	if (u >= 0)
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <Cascade+0xc0>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	db03      	blt.n	8003e1c <Cascade+0x64>
	{
		PID_dir = 1;
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <Cascade+0xc4>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e00a      	b.n	8003e32 <Cascade+0x7a>
	}

	else
	{
		u = -u;
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <Cascade+0xc0>)
 8003e1e:	edd3 7a00 	vldr	s15, [r3]
 8003e22:	eef1 7a67 	vneg.f32	s15, s15
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <Cascade+0xc0>)
 8003e28:	edc3 7a00 	vstr	s15, [r3]
		PID_dir = 0;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <Cascade+0xc4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
	}

	if(t >= t5)
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <Cascade+0xc8>)
 8003e34:	ed93 7a00 	vldr	s14, [r3]
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <Cascade+0xcc>)
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	db03      	blt.n	8003e50 <Cascade+0x98>
	{
		add = 0;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <Cascade+0xd0>)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
	}

	return limit(u, add);
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <Cascade+0xc0>)
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <Cascade+0xd0>)
 8003e58:	ed93 7a00 	vldr	s14, [r3]
 8003e5c:	eef0 0a47 	vmov.f32	s1, s14
 8003e60:	eeb0 0a67 	vmov.f32	s0, s15
 8003e64:	f000 f84a 	bl	8003efc <limit>
 8003e68:	eef0 7a40 	vmov.f32	s15, s0
}
 8003e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000698 	.word	0x20000698
 8003e7c:	200000c2 	.word	0x200000c2
 8003e80:	20000578 	.word	0x20000578
 8003e84:	2000058c 	.word	0x2000058c
 8003e88:	200000c4 	.word	0x200000c4

08003e8c <negative>:

float negative(float var)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 8003e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	dd05      	ble.n	8003eb0 <negative+0x24>
		var = -var;
 8003ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ea8:	eef1 7a67 	vneg.f32	s15, s15
 8003eac:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	ee07 3a90 	vmov	s15, r3
}
 8003eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <positive>:

float positive(float var)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 8003ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eda:	d505      	bpl.n	8003ee8 <positive+0x24>
			var = -var;
 8003edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ee0:	eef1 7a67 	vneg.f32	s15, s15
 8003ee4:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	ee07 3a90 	vmov	s15, r3
}
 8003eee:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <limit>:

float limit(float var1, float var2)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f06:	edc7 0a00 	vstr	s1, [r7]
	return (var1 > 24.0-var2) ? 24.0 : var1+var2;
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc fac8 	bl	80004a0 <__aeabi_f2d>
 8003f10:	4604      	mov	r4, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f7fc fac3 	bl	80004a0 <__aeabi_f2d>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	490d      	ldr	r1, [pc, #52]	; (8003f58 <limit+0x5c>)
 8003f24:	f7fc f95c 	bl	80001e0 <__aeabi_dsub>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f7fc fd9e 	bl	8000a70 <__aeabi_dcmpgt>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <limit+0x44>
 8003f3a:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8003f3e:	e005      	b.n	8003f4c <limit+0x50>
 8003f40:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f44:	edd7 7a00 	vldr	s15, [r7]
 8003f48:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 8003f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40380000 	.word	0x40380000
 8003f5c:	00000000 	.word	0x00000000

08003f60 <UART>:

void UART(){
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b096      	sub	sp, #88	; 0x58
 8003f66:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8003f68:	4baf      	ldr	r3, [pc, #700]	; (8004228 <UART+0x2c8>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 851a 	beq.w	80049a6 <UART+0xa46>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f2c0 8542 	blt.w	80049fc <UART+0xa9c>
 8003f78:	2b9e      	cmp	r3, #158	; 0x9e
 8003f7a:	f300 853f 	bgt.w	80049fc <UART+0xa9c>
 8003f7e:	2b58      	cmp	r3, #88	; 0x58
 8003f80:	f2c0 853c 	blt.w	80049fc <UART+0xa9c>
 8003f84:	3b58      	subs	r3, #88	; 0x58
 8003f86:	2b46      	cmp	r3, #70	; 0x46
 8003f88:	f200 8538 	bhi.w	80049fc <UART+0xa9c>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART+0x34>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	080049b3 	.word	0x080049b3
 8003f98:	080049fd 	.word	0x080049fd
 8003f9c:	080049fd 	.word	0x080049fd
 8003fa0:	080049fd 	.word	0x080049fd
 8003fa4:	080049fd 	.word	0x080049fd
 8003fa8:	080049fd 	.word	0x080049fd
 8003fac:	080049fd 	.word	0x080049fd
 8003fb0:	080049fd 	.word	0x080049fd
 8003fb4:	080049fd 	.word	0x080049fd
 8003fb8:	080049fd 	.word	0x080049fd
 8003fbc:	080049fd 	.word	0x080049fd
 8003fc0:	080049fd 	.word	0x080049fd
 8003fc4:	080049fd 	.word	0x080049fd
 8003fc8:	080049fd 	.word	0x080049fd
 8003fcc:	080049fd 	.word	0x080049fd
 8003fd0:	080049fd 	.word	0x080049fd
 8003fd4:	080049fd 	.word	0x080049fd
 8003fd8:	080049fd 	.word	0x080049fd
 8003fdc:	080049fd 	.word	0x080049fd
 8003fe0:	080049fd 	.word	0x080049fd
 8003fe4:	080049fd 	.word	0x080049fd
 8003fe8:	080049fd 	.word	0x080049fd
 8003fec:	080049fd 	.word	0x080049fd
 8003ff0:	080049fd 	.word	0x080049fd
 8003ff4:	080049fd 	.word	0x080049fd
 8003ff8:	080049fd 	.word	0x080049fd
 8003ffc:	080049fd 	.word	0x080049fd
 8004000:	080049fd 	.word	0x080049fd
 8004004:	080049fd 	.word	0x080049fd
 8004008:	080049fd 	.word	0x080049fd
 800400c:	080049fd 	.word	0x080049fd
 8004010:	080049fd 	.word	0x080049fd
 8004014:	080049fd 	.word	0x080049fd
 8004018:	080049fd 	.word	0x080049fd
 800401c:	080049fd 	.word	0x080049fd
 8004020:	080049fd 	.word	0x080049fd
 8004024:	080049fd 	.word	0x080049fd
 8004028:	080049fd 	.word	0x080049fd
 800402c:	080049fd 	.word	0x080049fd
 8004030:	080049fd 	.word	0x080049fd
 8004034:	080049fd 	.word	0x080049fd
 8004038:	080049fd 	.word	0x080049fd
 800403c:	080049fd 	.word	0x080049fd
 8004040:	080049fd 	.word	0x080049fd
 8004044:	080049fd 	.word	0x080049fd
 8004048:	080049fd 	.word	0x080049fd
 800404c:	080049fd 	.word	0x080049fd
 8004050:	080049fd 	.word	0x080049fd
 8004054:	080049fd 	.word	0x080049fd
 8004058:	080049fd 	.word	0x080049fd
 800405c:	080049fd 	.word	0x080049fd
 8004060:	080049fd 	.word	0x080049fd
 8004064:	080049fd 	.word	0x080049fd
 8004068:	080049fd 	.word	0x080049fd
 800406c:	080049fd 	.word	0x080049fd
 8004070:	080049fd 	.word	0x080049fd
 8004074:	080049fd 	.word	0x080049fd
 8004078:	08004a0b 	.word	0x08004a0b
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080040d5 	.word	0x080040d5
 8004084:	080040f9 	.word	0x080040f9
 8004088:	08004189 	.word	0x08004189
 800408c:	0800424d 	.word	0x0800424d
 8004090:	080042e1 	.word	0x080042e1
 8004094:	080043d3 	.word	0x080043d3
 8004098:	080043fb 	.word	0x080043fb
 800409c:	080045d5 	.word	0x080045d5
 80040a0:	0800479d 	.word	0x0800479d
 80040a4:	08004927 	.word	0x08004927
 80040a8:	0800494f 	.word	0x0800494f
 80040ac:	08004975 	.word	0x08004975
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 80040b0:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <UART+0x2c8>)
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	2b6d      	cmp	r3, #109	; 0x6d
 80040b6:	f040 84aa 	bne.w	8004a0e <UART+0xaae>
			//connect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80040ba:	2202      	movs	r2, #2
 80040bc:	495b      	ldr	r1, [pc, #364]	; (800422c <UART+0x2cc>)
 80040be:	485c      	ldr	r0, [pc, #368]	; (8004230 <UART+0x2d0>)
 80040c0:	f006 f974 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80040c4:	4b58      	ldr	r3, [pc, #352]	; (8004228 <UART+0x2c8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80040ca:	4859      	ldr	r0, [pc, #356]	; (8004230 <UART+0x2d0>)
 80040cc:	f006 fa1c 	bl	800a508 <HAL_UART_DMAStop>

		}
		break;
 80040d0:	f000 bc9d 	b.w	8004a0e <UART+0xaae>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 80040d4:	4b54      	ldr	r3, [pc, #336]	; (8004228 <UART+0x2c8>)
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b6c      	cmp	r3, #108	; 0x6c
 80040da:	f040 849a 	bne.w	8004a12 <UART+0xab2>
			//disconnect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80040de:	2202      	movs	r2, #2
 80040e0:	4952      	ldr	r1, [pc, #328]	; (800422c <UART+0x2cc>)
 80040e2:	4853      	ldr	r0, [pc, #332]	; (8004230 <UART+0x2d0>)
 80040e4:	f006 f962 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80040e8:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <UART+0x2c8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80040ee:	4850      	ldr	r0, [pc, #320]	; (8004230 <UART+0x2d0>)
 80040f0:	f006 fa0a 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 80040f4:	f000 bc8d 	b.w	8004a12 <UART+0xab2>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <UART+0x2c8>)
 80040fa:	785a      	ldrb	r2, [r3, #1]
 80040fc:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <UART+0x2d4>)
 80040fe:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004100:	4b49      	ldr	r3, [pc, #292]	; (8004228 <UART+0x2c8>)
 8004102:	789a      	ldrb	r2, [r3, #2]
 8004104:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <UART+0x2d8>)
 8004106:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004108:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <UART+0x2d4>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	b29a      	uxth	r2, r3
 8004112:	4b49      	ldr	r3, [pc, #292]	; (8004238 <UART+0x2d8>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	4413      	add	r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b47      	ldr	r3, [pc, #284]	; (800423c <UART+0x2dc>)
 800411e:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <UART+0x2c8>)
 8004122:	78da      	ldrb	r2, [r3, #3]
 8004124:	4b43      	ldr	r3, [pc, #268]	; (8004234 <UART+0x2d4>)
 8004126:	7819      	ldrb	r1, [r3, #0]
 8004128:	4b43      	ldr	r3, [pc, #268]	; (8004238 <UART+0x2d8>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	440b      	add	r3, r1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3b6c      	subs	r3, #108	; 0x6c
 8004132:	b2db      	uxtb	r3, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	429a      	cmp	r2, r3
 800413a:	f040 846c 	bne.w	8004a16 <UART+0xab6>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <UART+0x2dc>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc f98a 	bl	800045c <__aeabi_ui2d>
 8004148:	a331      	add	r3, pc, #196	; (adr r3, 8004210 <UART+0x2b0>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f9ff 	bl	8000550 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	a32f      	add	r3, pc, #188	; (adr r3, 8004218 <UART+0x2b8>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc f9f6 	bl	8000550 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <UART+0x2e0>)
 800416a:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800416e:	2202      	movs	r2, #2
 8004170:	492e      	ldr	r1, [pc, #184]	; (800422c <UART+0x2cc>)
 8004172:	482f      	ldr	r0, [pc, #188]	; (8004230 <UART+0x2d0>)
 8004174:	f006 f91a 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <UART+0x2c8>)
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800417e:	482c      	ldr	r0, [pc, #176]	; (8004230 <UART+0x2d0>)
 8004180:	f006 f9c2 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 8004184:	f000 bc47 	b.w	8004a16 <UART+0xab6>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <UART+0x2c8>)
 800418a:	785a      	ldrb	r2, [r3, #1]
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <UART+0x2d4>)
 800418e:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <UART+0x2c8>)
 8004192:	789a      	ldrb	r2, [r3, #2]
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <UART+0x2d8>)
 8004196:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004198:	4b26      	ldr	r3, [pc, #152]	; (8004234 <UART+0x2d4>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <UART+0x2d8>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <UART+0x2dc>)
 80041ae:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <UART+0x2c8>)
 80041b2:	78da      	ldrb	r2, [r3, #3]
 80041b4:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <UART+0x2d4>)
 80041b6:	7819      	ldrb	r1, [r3, #0]
 80041b8:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <UART+0x2d8>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	440b      	add	r3, r1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	3b6b      	subs	r3, #107	; 0x6b
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	429a      	cmp	r2, r3
 80041ca:	f040 8426 	bne.w	8004a1a <UART+0xaba>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <UART+0x2dc>)
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fc f942 	bl	800045c <__aeabi_ui2d>
 80041d8:	a311      	add	r3, pc, #68	; (adr r3, 8004220 <UART+0x2c0>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fc fae1 	bl	80007a4 <__aeabi_ddiv>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <UART+0x2e4>)
 80041e8:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80041ec:	2202      	movs	r2, #2
 80041ee:	490f      	ldr	r1, [pc, #60]	; (800422c <UART+0x2cc>)
 80041f0:	480f      	ldr	r0, [pc, #60]	; (8004230 <UART+0x2d0>)
 80041f2:	f006 f8db 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <UART+0x2c8>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
			ModeN =0;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <UART+0x2e8>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004202:	480b      	ldr	r0, [pc, #44]	; (8004230 <UART+0x2d0>)
 8004204:	f006 f980 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 8004208:	f000 bc07 	b.w	8004a1a <UART+0xaba>
 800420c:	f3af 8000 	nop.w
 8004210:	14141414 	.word	0x14141414
 8004214:	3fa41414 	.word	0x3fa41414
 8004218:	f37bebd5 	.word	0xf37bebd5
 800421c:	3fbacee9 	.word	0x3fbacee9
 8004220:	00000000 	.word	0x00000000
 8004224:	40c38800 	.word	0x40c38800
 8004228:	20000644 	.word	0x20000644
 800422c:	20000090 	.word	0x20000090
 8004230:	200002d0 	.word	0x200002d0
 8004234:	2000069c 	.word	0x2000069c
 8004238:	2000069d 	.word	0x2000069d
 800423c:	2000069e 	.word	0x2000069e
 8004240:	20000060 	.word	0x20000060
 8004244:	200005b0 	.word	0x200005b0
 8004248:	20000660 	.word	0x20000660
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 800424c:	4b98      	ldr	r3, [pc, #608]	; (80044b0 <UART+0x550>)
 800424e:	785a      	ldrb	r2, [r3, #1]
 8004250:	4b98      	ldr	r3, [pc, #608]	; (80044b4 <UART+0x554>)
 8004252:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004254:	4b96      	ldr	r3, [pc, #600]	; (80044b0 <UART+0x550>)
 8004256:	789a      	ldrb	r2, [r3, #2]
 8004258:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <UART+0x558>)
 800425a:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 800425c:	4b95      	ldr	r3, [pc, #596]	; (80044b4 <UART+0x554>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	b29a      	uxth	r2, r3
 8004266:	4b94      	ldr	r3, [pc, #592]	; (80044b8 <UART+0x558>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	4413      	add	r3, r2
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b92      	ldr	r3, [pc, #584]	; (80044bc <UART+0x55c>)
 8004272:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 8004274:	4b8e      	ldr	r3, [pc, #568]	; (80044b0 <UART+0x550>)
 8004276:	78da      	ldrb	r2, [r3, #3]
 8004278:	4b8e      	ldr	r3, [pc, #568]	; (80044b4 <UART+0x554>)
 800427a:	7819      	ldrb	r1, [r3, #0]
 800427c:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <UART+0x558>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	440b      	add	r3, r1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3b6a      	subs	r3, #106	; 0x6a
 8004286:	b2db      	uxtb	r3, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	429a      	cmp	r2, r3
 800428e:	f040 83c6 	bne.w	8004a1e <UART+0xabe>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 8004292:	4b89      	ldr	r3, [pc, #548]	; (80044b8 <UART+0x558>)
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <UART+0x560>)
 8004298:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 800429a:	4b89      	ldr	r3, [pc, #548]	; (80044c0 <UART+0x560>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a88      	ldr	r2, [pc, #544]	; (80044c4 <UART+0x564>)
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc f8f9 	bl	80004a0 <__aeabi_f2d>
 80042ae:	a37e      	add	r3, pc, #504	; (adr r3, 80044a8 <UART+0x548>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc f94c 	bl	8000550 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4982      	ldr	r1, [pc, #520]	; (80044c8 <UART+0x568>)
 80042be:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 80042c2:	4b82      	ldr	r3, [pc, #520]	; (80044cc <UART+0x56c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80042c8:	2202      	movs	r2, #2
 80042ca:	4981      	ldr	r1, [pc, #516]	; (80044d0 <UART+0x570>)
 80042cc:	4881      	ldr	r0, [pc, #516]	; (80044d4 <UART+0x574>)
 80042ce:	f006 f86d 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80042d2:	4b77      	ldr	r3, [pc, #476]	; (80044b0 <UART+0x550>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80042d8:	487e      	ldr	r0, [pc, #504]	; (80044d4 <UART+0x574>)
 80042da:	f006 f915 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 80042de:	e39e      	b.n	8004a1e <UART+0xabe>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 80042e0:	4b73      	ldr	r3, [pc, #460]	; (80044b0 <UART+0x550>)
 80042e2:	785a      	ldrb	r2, [r3, #1]
 80042e4:	4b7c      	ldr	r3, [pc, #496]	; (80044d8 <UART+0x578>)
 80042e6:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t k=2;
 80042ee:	2302      	movs	r3, #2
 80042f0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 80042f4:	2300      	movs	r3, #0
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
 80042f8:	e01d      	b.n	8004336 <UART+0x3d6>
			index_station[j] = RxData[k]%16;
 80042fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80042fe:	4a6c      	ldr	r2, [pc, #432]	; (80044b0 <UART+0x550>)
 8004300:	5cd3      	ldrb	r3, [r2, r3]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	b2d9      	uxtb	r1, r3
 8004308:	4a6d      	ldr	r2, [pc, #436]	; (80044c0 <UART+0x560>)
 800430a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430c:	4413      	add	r3, r2
 800430e:	460a      	mov	r2, r1
 8004310:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 8004312:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004316:	4a66      	ldr	r2, [pc, #408]	; (80044b0 <UART+0x550>)
 8004318:	5cd2      	ldrb	r2, [r2, r3]
 800431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431c:	3301      	adds	r3, #1
 800431e:	0912      	lsrs	r2, r2, #4
 8004320:	b2d1      	uxtb	r1, r2
 8004322:	4a67      	ldr	r2, [pc, #412]	; (80044c0 <UART+0x560>)
 8004324:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8004326:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800432a:	3301      	adds	r3, #1
 800432c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 8004330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004332:	3302      	adds	r3, #2
 8004334:	653b      	str	r3, [r7, #80]	; 0x50
 8004336:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <UART+0x578>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433e:	4293      	cmp	r3, r2
 8004340:	dbdb      	blt.n	80042fa <UART+0x39a>
		}
		for(int f = 0; f<k;f++){
 8004342:	2300      	movs	r3, #0
 8004344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004346:	e00b      	b.n	8004360 <UART+0x400>
			Check += RxData[f];
 8004348:	4a59      	ldr	r2, [pc, #356]	; (80044b0 <UART+0x550>)
 800434a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434c:	4413      	add	r3, r2
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004354:	4413      	add	r3, r2
 8004356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for(int f = 0; f<k;f++){
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	3301      	adds	r3, #1
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004360:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004366:	429a      	cmp	r2, r3
 8004368:	dbee      	blt.n	8004348 <UART+0x3e8>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 800436a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800436e:	4a50      	ldr	r2, [pc, #320]	; (80044b0 <UART+0x550>)
 8004370:	5cd2      	ldrb	r2, [r2, r3]
 8004372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004376:	43db      	mvns	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	429a      	cmp	r2, r3
 800437c:	f040 8351 	bne.w	8004a22 <UART+0xac2>

			ModeN=1;
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <UART+0x56c>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
			n_station=0;
 8004386:	4b55      	ldr	r3, [pc, #340]	; (80044dc <UART+0x57c>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <UART+0x57c>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <UART+0x560>)
 8004394:	5c9b      	ldrb	r3, [r3, r2]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a4a      	ldr	r2, [pc, #296]	; (80044c4 <UART+0x564>)
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f87d 	bl	80004a0 <__aeabi_f2d>
 80043a6:	a340      	add	r3, pc, #256	; (adr r3, 80044a8 <UART+0x548>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc f8d0 	bl	8000550 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4944      	ldr	r1, [pc, #272]	; (80044c8 <UART+0x568>)
 80043b6:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80043ba:	2202      	movs	r2, #2
 80043bc:	4944      	ldr	r1, [pc, #272]	; (80044d0 <UART+0x570>)
 80043be:	4845      	ldr	r0, [pc, #276]	; (80044d4 <UART+0x574>)
 80043c0:	f005 fff4 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80043c4:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <UART+0x550>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80043ca:	4842      	ldr	r0, [pc, #264]	; (80044d4 <UART+0x574>)
 80043cc:	f006 f89c 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 80043d0:	e327      	b.n	8004a22 <UART+0xac2>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <UART+0x550>)
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	2b67      	cmp	r3, #103	; 0x67
 80043d8:	f040 8325 	bne.w	8004a26 <UART+0xac6>
			//Go to Station / Goal Position
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80043dc:	2202      	movs	r2, #2
 80043de:	493c      	ldr	r1, [pc, #240]	; (80044d0 <UART+0x570>)
 80043e0:	483c      	ldr	r0, [pc, #240]	; (80044d4 <UART+0x574>)
 80043e2:	f005 ffe3 	bl	800a3ac <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <UART+0x580>)
 80043e8:	2206      	movs	r2, #6
 80043ea:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 80043ec:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <UART+0x550>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80043f2:	4838      	ldr	r0, [pc, #224]	; (80044d4 <UART+0x574>)
 80043f4:	f006 f888 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 80043f8:	e315      	b.n	8004a26 <UART+0xac6>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 80043fa:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <UART+0x550>)
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b66      	cmp	r3, #102	; 0x66
 8004400:	f040 8313 	bne.w	8004a2a <UART+0xaca>
			//Request Current Station
			if(Finish){
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <UART+0x584>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d075      	beq.n	80044f8 <UART+0x598>
				if(CheckTrasmit){
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <UART+0x588>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01e      	beq.n	8004452 <UART+0x4f2>
					TxData2[4]=TxData[2];
 8004414:	4b35      	ldr	r3, [pc, #212]	; (80044ec <UART+0x58c>)
 8004416:	789a      	ldrb	r2, [r3, #2]
 8004418:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <UART+0x590>)
 800441a:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <UART+0x58c>)
 800441e:	78da      	ldrb	r2, [r3, #3]
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <UART+0x590>)
 8004422:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <UART+0x58c>)
 8004426:	791a      	ldrb	r2, [r3, #4]
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <UART+0x590>)
 800442a:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 800442c:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <UART+0x58c>)
 800442e:	795a      	ldrb	r2, [r3, #5]
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <UART+0x590>)
 8004432:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <UART+0x588>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 800443a:	2208      	movs	r2, #8
 800443c:	492c      	ldr	r1, [pc, #176]	; (80044f0 <UART+0x590>)
 800443e:	4825      	ldr	r0, [pc, #148]	; (80044d4 <UART+0x574>)
 8004440:	f005 ffb4 	bl	800a3ac <HAL_UART_Transmit_DMA>
					Timestamp_UI=micros();
 8004444:	f7fd fa8a 	bl	800195c <micros>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <UART+0x594>)
 800444e:	601a      	str	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
					CheckTrasmit=1;
				}
			}
		}
		break;
 8004450:	e2eb      	b.n	8004a2a <UART+0xaca>
					if(micros() - Timestamp_UI > 150){
 8004452:	f7fd fa83 	bl	800195c <micros>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4926      	ldr	r1, [pc, #152]	; (80044f4 <UART+0x594>)
 800445c:	6809      	ldr	r1, [r1, #0]
 800445e:	2000      	movs	r0, #0
 8004460:	6439      	str	r1, [r7, #64]	; 0x40
 8004462:	6478      	str	r0, [r7, #68]	; 0x44
 8004464:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004468:	4621      	mov	r1, r4
 800446a:	1a51      	subs	r1, r2, r1
 800446c:	63b9      	str	r1, [r7, #56]	; 0x38
 800446e:	4629      	mov	r1, r5
 8004470:	eb63 0301 	sbc.w	r3, r3, r1
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004476:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800447a:	460b      	mov	r3, r1
 800447c:	2b97      	cmp	r3, #151	; 0x97
 800447e:	4613      	mov	r3, r2
 8004480:	f173 0300 	sbcs.w	r3, r3, #0
 8004484:	f0c0 82d1 	bcc.w	8004a2a <UART+0xaca>
						RxData[0] = 0;
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <UART+0x550>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
						CheckTrasmit=1;
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <UART+0x588>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
						Finish =0;
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <UART+0x584>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
						HAL_UART_DMAStop(&huart2);
 800449a:	480e      	ldr	r0, [pc, #56]	; (80044d4 <UART+0x574>)
 800449c:	f006 f834 	bl	800a508 <HAL_UART_DMAStop>
		break;
 80044a0:	e2c3      	b.n	8004a2a <UART+0xaca>
 80044a2:	bf00      	nop
 80044a4:	f3af 8000 	nop.w
 80044a8:	a2529d39 	.word	0xa2529d39
 80044ac:	3f91df46 	.word	0x3f91df46
 80044b0:	20000644 	.word	0x20000644
 80044b4:	2000069c 	.word	0x2000069c
 80044b8:	2000069d 	.word	0x2000069d
 80044bc:	2000069e 	.word	0x2000069e
 80044c0:	20000664 	.word	0x20000664
 80044c4:	20000094 	.word	0x20000094
 80044c8:	200005b0 	.word	0x200005b0
 80044cc:	20000660 	.word	0x20000660
 80044d0:	20000090 	.word	0x20000090
 80044d4:	200002d0 	.word	0x200002d0
 80044d8:	200000bd 	.word	0x200000bd
 80044dc:	200000be 	.word	0x200000be
 80044e0:	200000bf 	.word	0x200000bf
 80044e4:	20000661 	.word	0x20000661
 80044e8:	200000c8 	.word	0x200000c8
 80044ec:	20000080 	.word	0x20000080
 80044f0:	20000088 	.word	0x20000088
 80044f4:	200006a0 	.word	0x200006a0
			else if(CheckTrasmit){
 80044f8:	4b9d      	ldr	r3, [pc, #628]	; (8004770 <UART+0x810>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d044      	beq.n	800458a <UART+0x62a>
				TxData[2] = 0b10011001;
 8004500:	4b9c      	ldr	r3, [pc, #624]	; (8004774 <UART+0x814>)
 8004502:	2299      	movs	r2, #153	; 0x99
 8004504:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 8004506:	4b9b      	ldr	r3, [pc, #620]	; (8004774 <UART+0x814>)
 8004508:	2200      	movs	r2, #0
 800450a:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 800450c:	4b9a      	ldr	r3, [pc, #616]	; (8004778 <UART+0x818>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fb ffc5 	bl	80004a0 <__aeabi_f2d>
 8004516:	a392      	add	r3, pc, #584	; (adr r3, 8004760 <UART+0x800>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fc f942 	bl	80007a4 <__aeabi_ddiv>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	ec43 2b17 	vmov	d7, r2, r3
 8004528:	eeb0 0a47 	vmov.f32	s0, s14
 800452c:	eef0 0a67 	vmov.f32	s1, s15
 8004530:	f007 fb66 	bl	800bc00 <ceil>
 8004534:	ec53 2b10 	vmov	r2, r3, d0
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	f7fc fab8 	bl	8000ab0 <__aeabi_d2uiz>
 8004540:	4603      	mov	r3, r0
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b8d      	ldr	r3, [pc, #564]	; (800477c <UART+0x81c>)
 8004546:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 8004548:	4b8c      	ldr	r3, [pc, #560]	; (800477c <UART+0x81c>)
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	4b89      	ldr	r3, [pc, #548]	; (8004774 <UART+0x814>)
 800454e:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <UART+0x814>)
 8004552:	789a      	ldrb	r2, [r3, #2]
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <UART+0x814>)
 8004556:	78db      	ldrb	r3, [r3, #3]
 8004558:	4413      	add	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	4b85      	ldr	r3, [pc, #532]	; (8004774 <UART+0x814>)
 800455e:	791b      	ldrb	r3, [r3, #4]
 8004560:	4413      	add	r3, r2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	b2da      	uxtb	r2, r3
 8004568:	4b82      	ldr	r3, [pc, #520]	; (8004774 <UART+0x814>)
 800456a:	715a      	strb	r2, [r3, #5]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 800456c:	2206      	movs	r2, #6
 800456e:	4981      	ldr	r1, [pc, #516]	; (8004774 <UART+0x814>)
 8004570:	4883      	ldr	r0, [pc, #524]	; (8004780 <UART+0x820>)
 8004572:	f005 ff1b 	bl	800a3ac <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004576:	f7fd f9f1 	bl	800195c <micros>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b81      	ldr	r3, [pc, #516]	; (8004784 <UART+0x824>)
 8004580:	601a      	str	r2, [r3, #0]
				CheckTrasmit=0;
 8004582:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <UART+0x810>)
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
		break;
 8004588:	e24f      	b.n	8004a2a <UART+0xaca>
				if(micros() - Timestamp_UI > 150){
 800458a:	f7fd f9e7 	bl	800195c <micros>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	497c      	ldr	r1, [pc, #496]	; (8004784 <UART+0x824>)
 8004594:	6809      	ldr	r1, [r1, #0]
 8004596:	2000      	movs	r0, #0
 8004598:	6339      	str	r1, [r7, #48]	; 0x30
 800459a:	6378      	str	r0, [r7, #52]	; 0x34
 800459c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045a0:	4621      	mov	r1, r4
 80045a2:	1a51      	subs	r1, r2, r1
 80045a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a6:	4629      	mov	r1, r5
 80045a8:	eb63 0301 	sbc.w	r3, r3, r1
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045b2:	460b      	mov	r3, r1
 80045b4:	2b97      	cmp	r3, #151	; 0x97
 80045b6:	4613      	mov	r3, r2
 80045b8:	f173 0300 	sbcs.w	r3, r3, #0
 80045bc:	f0c0 8235 	bcc.w	8004a2a <UART+0xaca>
					RxData[0] = 0;
 80045c0:	4b71      	ldr	r3, [pc, #452]	; (8004788 <UART+0x828>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 80045c6:	486e      	ldr	r0, [pc, #440]	; (8004780 <UART+0x820>)
 80045c8:	f005 ff9e 	bl	800a508 <HAL_UART_DMAStop>
					CheckTrasmit=1;
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <UART+0x810>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
		break;
 80045d2:	e22a      	b.n	8004a2a <UART+0xaca>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 80045d4:	4b6c      	ldr	r3, [pc, #432]	; (8004788 <UART+0x828>)
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	2b65      	cmp	r3, #101	; 0x65
 80045da:	f040 8228 	bne.w	8004a2e <UART+0xace>
			//Request Angular Position
		if(Finish){
 80045de:	4b6b      	ldr	r3, [pc, #428]	; (800478c <UART+0x82c>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d04a      	beq.n	800467c <UART+0x71c>

			if(CheckTrasmit){
 80045e6:	4b62      	ldr	r3, [pc, #392]	; (8004770 <UART+0x810>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01e      	beq.n	800462c <UART+0x6cc>
				TxData2[4]=TxData[2];
 80045ee:	4b61      	ldr	r3, [pc, #388]	; (8004774 <UART+0x814>)
 80045f0:	789a      	ldrb	r2, [r3, #2]
 80045f2:	4b67      	ldr	r3, [pc, #412]	; (8004790 <UART+0x830>)
 80045f4:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 80045f6:	4b5f      	ldr	r3, [pc, #380]	; (8004774 <UART+0x814>)
 80045f8:	78da      	ldrb	r2, [r3, #3]
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <UART+0x830>)
 80045fc:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 80045fe:	4b5d      	ldr	r3, [pc, #372]	; (8004774 <UART+0x814>)
 8004600:	791a      	ldrb	r2, [r3, #4]
 8004602:	4b63      	ldr	r3, [pc, #396]	; (8004790 <UART+0x830>)
 8004604:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004606:	4b5b      	ldr	r3, [pc, #364]	; (8004774 <UART+0x814>)
 8004608:	795a      	ldrb	r2, [r3, #5]
 800460a:	4b61      	ldr	r3, [pc, #388]	; (8004790 <UART+0x830>)
 800460c:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 800460e:	4b58      	ldr	r3, [pc, #352]	; (8004770 <UART+0x810>)
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004614:	2208      	movs	r2, #8
 8004616:	495e      	ldr	r1, [pc, #376]	; (8004790 <UART+0x830>)
 8004618:	4859      	ldr	r0, [pc, #356]	; (8004780 <UART+0x820>)
 800461a:	f005 fec7 	bl	800a3ac <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 800461e:	f7fd f99d 	bl	800195c <micros>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b57      	ldr	r3, [pc, #348]	; (8004784 <UART+0x824>)
 8004628:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 800462a:	e200      	b.n	8004a2e <UART+0xace>
				if(micros() - Timestamp_UI > 150){
 800462c:	f7fd f996 	bl	800195c <micros>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4953      	ldr	r1, [pc, #332]	; (8004784 <UART+0x824>)
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	2000      	movs	r0, #0
 800463a:	6239      	str	r1, [r7, #32]
 800463c:	6278      	str	r0, [r7, #36]	; 0x24
 800463e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004642:	4621      	mov	r1, r4
 8004644:	1a51      	subs	r1, r2, r1
 8004646:	61b9      	str	r1, [r7, #24]
 8004648:	4629      	mov	r1, r5
 800464a:	eb63 0301 	sbc.w	r3, r3, r1
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004654:	460b      	mov	r3, r1
 8004656:	2b97      	cmp	r3, #151	; 0x97
 8004658:	4613      	mov	r3, r2
 800465a:	f173 0300 	sbcs.w	r3, r3, #0
 800465e:	f0c0 81e6 	bcc.w	8004a2e <UART+0xace>
					RxData[0] = 0;
 8004662:	4b49      	ldr	r3, [pc, #292]	; (8004788 <UART+0x828>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004668:	4b41      	ldr	r3, [pc, #260]	; (8004770 <UART+0x810>)
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
					Finish =0;
 800466e:	4b47      	ldr	r3, [pc, #284]	; (800478c <UART+0x82c>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004674:	4842      	ldr	r0, [pc, #264]	; (8004780 <UART+0x820>)
 8004676:	f005 ff47 	bl	800a508 <HAL_UART_DMAStop>
		break;
 800467a:	e1d8      	b.n	8004a2e <UART+0xace>
		else if(CheckTrasmit){
 800467c:	4b3c      	ldr	r3, [pc, #240]	; (8004770 <UART+0x810>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d04c      	beq.n	800471e <UART+0x7be>
			TxData[2] = 0b10011010;
 8004684:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <UART+0x814>)
 8004686:	229a      	movs	r2, #154	; 0x9a
 8004688:	709a      	strb	r2, [r3, #2]
			TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <UART+0x818>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb ff06 	bl	80004a0 <__aeabi_f2d>
 8004694:	a334      	add	r3, pc, #208	; (adr r3, 8004768 <UART+0x808>)
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f7fb ff59 	bl	8000550 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	4b3a      	ldr	r3, [pc, #232]	; (8004794 <UART+0x834>)
 80046ac:	f7fc f87a 	bl	80007a4 <__aeabi_ddiv>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	f7fc f9fa 	bl	8000ab0 <__aeabi_d2uiz>
 80046bc:	4603      	mov	r3, r0
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <UART+0x814>)
 80046c2:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)(theta_now*10000)%256;
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <UART+0x818>)
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004798 <UART+0x838>
 80046ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80046da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <UART+0x814>)
 80046e2:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <UART+0x814>)
 80046e6:	789a      	ldrb	r2, [r3, #2]
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <UART+0x814>)
 80046ea:	78db      	ldrb	r3, [r3, #3]
 80046ec:	4413      	add	r3, r2
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <UART+0x814>)
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <UART+0x814>)
 80046fe:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004700:	2206      	movs	r2, #6
 8004702:	491c      	ldr	r1, [pc, #112]	; (8004774 <UART+0x814>)
 8004704:	481e      	ldr	r0, [pc, #120]	; (8004780 <UART+0x820>)
 8004706:	f005 fe51 	bl	800a3ac <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 800470a:	f7fd f927 	bl	800195c <micros>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <UART+0x824>)
 8004714:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004716:	4b16      	ldr	r3, [pc, #88]	; (8004770 <UART+0x810>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
		break;
 800471c:	e187      	b.n	8004a2e <UART+0xace>
			if(micros() - Timestamp_UI > 150){
 800471e:	f7fd f91d 	bl	800195c <micros>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4917      	ldr	r1, [pc, #92]	; (8004784 <UART+0x824>)
 8004728:	6809      	ldr	r1, [r1, #0]
 800472a:	2000      	movs	r0, #0
 800472c:	6139      	str	r1, [r7, #16]
 800472e:	6178      	str	r0, [r7, #20]
 8004730:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004734:	4621      	mov	r1, r4
 8004736:	ebb2 0a01 	subs.w	sl, r2, r1
 800473a:	4629      	mov	r1, r5
 800473c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004740:	f1ba 0f97 	cmp.w	sl, #151	; 0x97
 8004744:	f17b 0300 	sbcs.w	r3, fp, #0
 8004748:	f0c0 8171 	bcc.w	8004a2e <UART+0xace>
				RxData[0] = 0;
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <UART+0x828>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004752:	480b      	ldr	r0, [pc, #44]	; (8004780 <UART+0x820>)
 8004754:	f005 fed8 	bl	800a508 <HAL_UART_DMAStop>
				CheckTrasmit=1;
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <UART+0x810>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
		break;
 800475e:	e166      	b.n	8004a2e <UART+0xace>
 8004760:	cac08312 	.word	0xcac08312
 8004764:	3fb645a1 	.word	0x3fb645a1
 8004768:	00000000 	.word	0x00000000
 800476c:	40c38800 	.word	0x40c38800
 8004770:	200000c8 	.word	0x200000c8
 8004774:	20000080 	.word	0x20000080
 8004778:	200003e0 	.word	0x200003e0
 800477c:	200000bc 	.word	0x200000bc
 8004780:	200002d0 	.word	0x200002d0
 8004784:	200006a0 	.word	0x200006a0
 8004788:	20000644 	.word	0x20000644
 800478c:	20000661 	.word	0x20000661
 8004790:	20000088 	.word	0x20000088
 8004794:	40700000 	.word	0x40700000
 8004798:	461c4000 	.word	0x461c4000
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 800479c:	4bae      	ldr	r3, [pc, #696]	; (8004a58 <UART+0xaf8>)
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b64      	cmp	r3, #100	; 0x64
 80047a2:	f040 8146 	bne.w	8004a32 <UART+0xad2>
			//Request Angular Velocity
		if(Finish){
 80047a6:	4bad      	ldr	r3, [pc, #692]	; (8004a5c <UART+0xafc>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d049      	beq.n	8004842 <UART+0x8e2>
			if(CheckTrasmit){
 80047ae:	4bac      	ldr	r3, [pc, #688]	; (8004a60 <UART+0xb00>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01e      	beq.n	80047f4 <UART+0x894>
				TxData2[4]=TxData[2];
 80047b6:	4bab      	ldr	r3, [pc, #684]	; (8004a64 <UART+0xb04>)
 80047b8:	789a      	ldrb	r2, [r3, #2]
 80047ba:	4bab      	ldr	r3, [pc, #684]	; (8004a68 <UART+0xb08>)
 80047bc:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 80047be:	4ba9      	ldr	r3, [pc, #676]	; (8004a64 <UART+0xb04>)
 80047c0:	78da      	ldrb	r2, [r3, #3]
 80047c2:	4ba9      	ldr	r3, [pc, #676]	; (8004a68 <UART+0xb08>)
 80047c4:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 80047c6:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <UART+0xb04>)
 80047c8:	791a      	ldrb	r2, [r3, #4]
 80047ca:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <UART+0xb08>)
 80047cc:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 80047ce:	4ba5      	ldr	r3, [pc, #660]	; (8004a64 <UART+0xb04>)
 80047d0:	795a      	ldrb	r2, [r3, #5]
 80047d2:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <UART+0xb08>)
 80047d4:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 80047d6:	4ba2      	ldr	r3, [pc, #648]	; (8004a60 <UART+0xb00>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 80047dc:	2208      	movs	r2, #8
 80047de:	49a2      	ldr	r1, [pc, #648]	; (8004a68 <UART+0xb08>)
 80047e0:	48a2      	ldr	r0, [pc, #648]	; (8004a6c <UART+0xb0c>)
 80047e2:	f005 fde3 	bl	800a3ac <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 80047e6:	f7fd f8b9 	bl	800195c <micros>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4ba0      	ldr	r3, [pc, #640]	; (8004a70 <UART+0xb10>)
 80047f0:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 80047f2:	e11e      	b.n	8004a32 <UART+0xad2>
				if(micros() - Timestamp_UI > 150){
 80047f4:	f7fd f8b2 	bl	800195c <micros>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	499c      	ldr	r1, [pc, #624]	; (8004a70 <UART+0xb10>)
 80047fe:	6809      	ldr	r1, [r1, #0]
 8004800:	2000      	movs	r0, #0
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800480a:	4621      	mov	r1, r4
 800480c:	ebb2 0801 	subs.w	r8, r2, r1
 8004810:	4629      	mov	r1, r5
 8004812:	eb63 0901 	sbc.w	r9, r3, r1
 8004816:	f1b8 0f97 	cmp.w	r8, #151	; 0x97
 800481a:	f179 0300 	sbcs.w	r3, r9, #0
 800481e:	f0c0 8108 	bcc.w	8004a32 <UART+0xad2>
					RxData[0] = 0;
 8004822:	4b8d      	ldr	r3, [pc, #564]	; (8004a58 <UART+0xaf8>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004828:	4b8d      	ldr	r3, [pc, #564]	; (8004a60 <UART+0xb00>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
					Finish =0;
 800482e:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <UART+0xafc>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004834:	488d      	ldr	r0, [pc, #564]	; (8004a6c <UART+0xb0c>)
 8004836:	f005 fe67 	bl	800a508 <HAL_UART_DMAStop>
					CheckTrasmit=1;
 800483a:	4b89      	ldr	r3, [pc, #548]	; (8004a60 <UART+0xb00>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
		break;
 8004840:	e0f7      	b.n	8004a32 <UART+0xad2>
		else if (CheckTrasmit){
 8004842:	4b87      	ldr	r3, [pc, #540]	; (8004a60 <UART+0xb00>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04e      	beq.n	80048e8 <UART+0x988>
			TxData[2] = 0b10011011;
 800484a:	4b86      	ldr	r3, [pc, #536]	; (8004a64 <UART+0xb04>)
 800484c:	229b      	movs	r2, #155	; 0x9b
 800484e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8004850:	4b84      	ldr	r3, [pc, #528]	; (8004a64 <UART+0xb04>)
 8004852:	2200      	movs	r2, #0
 8004854:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((omega_kalman*60/(2*M_PI))*255/10);
 8004856:	4b87      	ldr	r3, [pc, #540]	; (8004a74 <UART+0xb14>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004a78 <UART+0xb18>
 8004860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004864:	ee17 0a90 	vmov	r0, s15
 8004868:	f7fb fe1a 	bl	80004a0 <__aeabi_f2d>
 800486c:	a376      	add	r3, pc, #472	; (adr r3, 8004a48 <UART+0xae8>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb ff97 	bl	80007a4 <__aeabi_ddiv>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	a374      	add	r3, pc, #464	; (adr r3, 8004a50 <UART+0xaf0>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb fe64 	bl	8000550 <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <UART+0xb1c>)
 8004896:	f7fb ff85 	bl	80007a4 <__aeabi_ddiv>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	f7fc f905 	bl	8000ab0 <__aeabi_d2uiz>
 80048a6:	4603      	mov	r3, r0
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4b6e      	ldr	r3, [pc, #440]	; (8004a64 <UART+0xb04>)
 80048ac:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <UART+0xb04>)
 80048b0:	789a      	ldrb	r2, [r3, #2]
 80048b2:	4b6c      	ldr	r3, [pc, #432]	; (8004a64 <UART+0xb04>)
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	4413      	add	r3, r2
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <UART+0xb04>)
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4b67      	ldr	r3, [pc, #412]	; (8004a64 <UART+0xb04>)
 80048c8:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 80048ca:	2206      	movs	r2, #6
 80048cc:	4965      	ldr	r1, [pc, #404]	; (8004a64 <UART+0xb04>)
 80048ce:	4867      	ldr	r0, [pc, #412]	; (8004a6c <UART+0xb0c>)
 80048d0:	f005 fd6c 	bl	800a3ac <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 80048d4:	f7fd f842 	bl	800195c <micros>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b64      	ldr	r3, [pc, #400]	; (8004a70 <UART+0xb10>)
 80048de:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 80048e0:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <UART+0xb00>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
		break;
 80048e6:	e0a4      	b.n	8004a32 <UART+0xad2>
			if(micros() - Timestamp_UI > 150){
 80048e8:	f7fd f838 	bl	800195c <micros>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	495f      	ldr	r1, [pc, #380]	; (8004a70 <UART+0xb10>)
 80048f2:	6809      	ldr	r1, [r1, #0]
 80048f4:	2000      	movs	r0, #0
 80048f6:	6039      	str	r1, [r7, #0]
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	e9d7 8900 	ldrd	r8, r9, [r7]
 80048fe:	4641      	mov	r1, r8
 8004900:	1a54      	subs	r4, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb63 0501 	sbc.w	r5, r3, r1
 8004908:	2c97      	cmp	r4, #151	; 0x97
 800490a:	f175 0300 	sbcs.w	r3, r5, #0
 800490e:	f0c0 8090 	bcc.w	8004a32 <UART+0xad2>
				RxData[0] = 0;
 8004912:	4b51      	ldr	r3, [pc, #324]	; (8004a58 <UART+0xaf8>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004918:	4854      	ldr	r0, [pc, #336]	; (8004a6c <UART+0xb0c>)
 800491a:	f005 fdf5 	bl	800a508 <HAL_UART_DMAStop>
				CheckTrasmit=1;
 800491e:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <UART+0xb00>)
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
		break;
 8004924:	e085      	b.n	8004a32 <UART+0xad2>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 8004926:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <UART+0xaf8>)
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b63      	cmp	r3, #99	; 0x63
 800492c:	f040 8083 	bne.w	8004a36 <UART+0xad6>
			//enable gripple
			Enable_EndEffector = 1;
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <UART+0xb20>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004936:	2202      	movs	r2, #2
 8004938:	4952      	ldr	r1, [pc, #328]	; (8004a84 <UART+0xb24>)
 800493a:	484c      	ldr	r0, [pc, #304]	; (8004a6c <UART+0xb0c>)
 800493c:	f005 fd36 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004940:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <UART+0xaf8>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004946:	4849      	ldr	r0, [pc, #292]	; (8004a6c <UART+0xb0c>)
 8004948:	f005 fdde 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 800494c:	e073      	b.n	8004a36 <UART+0xad6>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 800494e:	4b42      	ldr	r3, [pc, #264]	; (8004a58 <UART+0xaf8>)
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	2b62      	cmp	r3, #98	; 0x62
 8004954:	d171      	bne.n	8004a3a <UART+0xada>
			//disable gripple
			Enable_EndEffector = 0;
 8004956:	4b4a      	ldr	r3, [pc, #296]	; (8004a80 <UART+0xb20>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800495c:	2202      	movs	r2, #2
 800495e:	4949      	ldr	r1, [pc, #292]	; (8004a84 <UART+0xb24>)
 8004960:	4842      	ldr	r0, [pc, #264]	; (8004a6c <UART+0xb0c>)
 8004962:	f005 fd23 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004966:	4b3c      	ldr	r3, [pc, #240]	; (8004a58 <UART+0xaf8>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800496c:	483f      	ldr	r0, [pc, #252]	; (8004a6c <UART+0xb0c>)
 800496e:	f005 fdcb 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 8004972:	e062      	b.n	8004a3a <UART+0xada>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004974:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <UART+0xaf8>)
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b61      	cmp	r3, #97	; 0x61
 800497a:	d160      	bne.n	8004a3e <UART+0xade>
			//Set HOME
			Arm_State = Home;
 800497c:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <UART+0xb28>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
			theta_now = 0.1;
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <UART+0xb2c>)
 8004984:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <UART+0xb30>)
 8004986:	601a      	str	r2, [r3, #0]
			SetHome_Flag=1;
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <UART+0xb34>)
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800498e:	2202      	movs	r2, #2
 8004990:	493c      	ldr	r1, [pc, #240]	; (8004a84 <UART+0xb24>)
 8004992:	4836      	ldr	r0, [pc, #216]	; (8004a6c <UART+0xb0c>)
 8004994:	f005 fd0a 	bl	800a3ac <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004998:	4b2f      	ldr	r3, [pc, #188]	; (8004a58 <UART+0xaf8>)
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800499e:	4833      	ldr	r0, [pc, #204]	; (8004a6c <UART+0xb0c>)
 80049a0:	f005 fdb2 	bl	800a508 <HAL_UART_DMAStop>
		}
		break;
 80049a4:	e04b      	b.n	8004a3e <UART+0xade>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80049a6:	220c      	movs	r2, #12
 80049a8:	492b      	ldr	r1, [pc, #172]	; (8004a58 <UART+0xaf8>)
 80049aa:	4830      	ldr	r0, [pc, #192]	; (8004a6c <UART+0xb0c>)
 80049ac:	f005 fd7c 	bl	800a4a8 <HAL_UART_Receive_DMA>
		break;
 80049b0:	e073      	b.n	8004a9a <UART+0xb3a>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 80049b2:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <UART+0xaf8>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b58      	cmp	r3, #88	; 0x58
 80049b8:	d16e      	bne.n	8004a98 <UART+0xb38>
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <UART+0xaf8>)
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b75      	cmp	r3, #117	; 0x75
 80049c0:	d16a      	bne.n	8004a98 <UART+0xb38>
			if(RxData[2] !=0 && RxData[3] != 0){
 80049c2:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <UART+0xaf8>)
 80049c4:	789b      	ldrb	r3, [r3, #2]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d066      	beq.n	8004a98 <UART+0xb38>
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <UART+0xaf8>)
 80049cc:	78db      	ldrb	r3, [r3, #3]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d062      	beq.n	8004a98 <UART+0xb38>
				RxData[0]=RxData[2];
 80049d2:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <UART+0xaf8>)
 80049d4:	789a      	ldrb	r2, [r3, #2]
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <UART+0xaf8>)
 80049d8:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <UART+0xaf8>)
 80049dc:	78da      	ldrb	r2, [r3, #3]
 80049de:	4b1e      	ldr	r3, [pc, #120]	; (8004a58 <UART+0xaf8>)
 80049e0:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <UART+0xaf8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <UART+0xaf8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 80049ee:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <UART+0xaf8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 80049f4:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <UART+0xaf8>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 80049fa:	e04d      	b.n	8004a98 <UART+0xb38>
	default: //RESET Go_Mode
		RxData[0] = 0;
 80049fc:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <UART+0xaf8>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 8004a02:	481a      	ldr	r0, [pc, #104]	; (8004a6c <UART+0xb0c>)
 8004a04:	f005 fd80 	bl	800a508 <HAL_UART_DMAStop>
		break;
 8004a08:	e047      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a0a:	bf00      	nop
 8004a0c:	e045      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a0e:	bf00      	nop
 8004a10:	e043      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a12:	bf00      	nop
 8004a14:	e041      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a16:	bf00      	nop
 8004a18:	e03f      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a1a:	bf00      	nop
 8004a1c:	e03d      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a1e:	bf00      	nop
 8004a20:	e03b      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a22:	bf00      	nop
 8004a24:	e039      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a26:	bf00      	nop
 8004a28:	e037      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a2a:	bf00      	nop
 8004a2c:	e035      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a2e:	bf00      	nop
 8004a30:	e033      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a32:	bf00      	nop
 8004a34:	e031      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a36:	bf00      	nop
 8004a38:	e02f      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a3a:	bf00      	nop
 8004a3c:	e02d      	b.n	8004a9a <UART+0xb3a>
		break;
 8004a3e:	bf00      	nop
 8004a40:	e02b      	b.n	8004a9a <UART+0xb3a>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	54442d18 	.word	0x54442d18
 8004a4c:	401921fb 	.word	0x401921fb
 8004a50:	00000000 	.word	0x00000000
 8004a54:	406fe000 	.word	0x406fe000
 8004a58:	20000644 	.word	0x20000644
 8004a5c:	20000661 	.word	0x20000661
 8004a60:	200000c8 	.word	0x200000c8
 8004a64:	20000080 	.word	0x20000080
 8004a68:	20000088 	.word	0x20000088
 8004a6c:	200002d0 	.word	0x200002d0
 8004a70:	200006a0 	.word	0x200006a0
 8004a74:	200003f0 	.word	0x200003f0
 8004a78:	42700000 	.word	0x42700000
 8004a7c:	40240000 	.word	0x40240000
 8004a80:	20000653 	.word	0x20000653
 8004a84:	20000090 	.word	0x20000090
 8004a88:	200000bf 	.word	0x200000bf
 8004a8c:	200003e0 	.word	0x200003e0
 8004a90:	3dcccccd 	.word	0x3dcccccd
 8004a94:	200003dc 	.word	0x200003dc
		break;
 8004a98:	bf00      	nop
	}
}
 8004a9a:	bf00      	nop
 8004a9c:	3758      	adds	r7, #88	; 0x58
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004aa4 <OpenEndEffector>:

void OpenEndEffector() {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <OpenEndEffector+0xf0>)
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d119      	bne.n	8004aea <OpenEndEffector+0x46>
 8004ab6:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <OpenEndEffector+0xf4>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d115      	bne.n	8004aea <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8004abe:	2364      	movs	r3, #100	; 0x64
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <OpenEndEffector+0xf8>)
 8004ac6:	2146      	movs	r1, #70	; 0x46
 8004ac8:	4832      	ldr	r0, [pc, #200]	; (8004b94 <OpenEndEffector+0xf0>)
 8004aca:	f001 fc3f 	bl	800634c <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 8004ace:	4b32      	ldr	r3, [pc, #200]	; (8004b98 <OpenEndEffector+0xf4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 8004ad4:	4b32      	ldr	r3, [pc, #200]	; (8004ba0 <OpenEndEffector+0xfc>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 8004ada:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <OpenEndEffector+0x100>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 8004ae0:	f000 fbd0 	bl	8005284 <HAL_GetTick>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <OpenEndEffector+0x104>)
 8004ae8:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <OpenEndEffector+0xfc>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d144      	bne.n	8004b7c <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 8004af2:	f000 fbc7 	bl	8005284 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <OpenEndEffector+0x104>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2bfa      	cmp	r3, #250	; 0xfa
 8004b00:	d906      	bls.n	8004b10 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 8004b02:	f000 fbbf 	bl	8005284 <HAL_GetTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4a27      	ldr	r2, [pc, #156]	; (8004ba8 <OpenEndEffector+0x104>)
 8004b0a:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 8004b0c:	f000 f850 	bl	8004bb0 <CheckEndEffector>
		}

		switch(EndEffector_State)
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <OpenEndEffector+0x100>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d83a      	bhi.n	8004b8e <OpenEndEffector+0xea>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <OpenEndEffector+0x7c>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b35 	.word	0x08004b35
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b75 	.word	0x08004b75
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <OpenEndEffector+0x108>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	2b12      	cmp	r3, #18
 8004b3a:	d121      	bne.n	8004b80 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <OpenEndEffector+0x100>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b42:	e01d      	b.n	8004b80 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <OpenEndEffector+0x108>)
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	2b34      	cmp	r3, #52	; 0x34
 8004b4a:	d11b      	bne.n	8004b84 <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <OpenEndEffector+0x100>)
 8004b4e:	2202      	movs	r2, #2
 8004b50:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b52:	e017      	b.n	8004b84 <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <OpenEndEffector+0x108>)
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	2b56      	cmp	r3, #86	; 0x56
 8004b5a:	d115      	bne.n	8004b88 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <OpenEndEffector+0x100>)
 8004b5e:	2203      	movs	r2, #3
 8004b60:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b62:	e011      	b.n	8004b88 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <OpenEndEffector+0x108>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	2b78      	cmp	r3, #120	; 0x78
 8004b6a:	d10f      	bne.n	8004b8c <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <OpenEndEffector+0x100>)
 8004b6e:	2204      	movs	r2, #4
 8004b70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b72:	e00b      	b.n	8004b8c <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <OpenEndEffector+0xfc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
			break;
 8004b7a:	e008      	b.n	8004b8e <OpenEndEffector+0xea>
		}
	}
 8004b7c:	bf00      	nop
 8004b7e:	e006      	b.n	8004b8e <OpenEndEffector+0xea>
			break;
 8004b80:	bf00      	nop
 8004b82:	e004      	b.n	8004b8e <OpenEndEffector+0xea>
			break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <OpenEndEffector+0xea>
			break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <OpenEndEffector+0xea>
			break;
 8004b8c:	bf00      	nop
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2000015c 	.word	0x2000015c
 8004b98:	20000674 	.word	0x20000674
 8004b9c:	200000c9 	.word	0x200000c9
 8004ba0:	20000675 	.word	0x20000675
 8004ba4:	200000c0 	.word	0x200000c0
 8004ba8:	20000678 	.word	0x20000678
 8004bac:	20000676 	.word	0x20000676

08004bb0 <CheckEndEffector>:

void CheckEndEffector()
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <CheckEndEffector+0x38>)
 8004bbe:	2146      	movs	r1, #70	; 0x46
 8004bc0:	480a      	ldr	r0, [pc, #40]	; (8004bec <CheckEndEffector+0x3c>)
 8004bc2:	f001 fcc1 	bl	8006548 <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <CheckEndEffector+0x3c>)
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d107      	bne.n	8004be2 <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <CheckEndEffector+0x40>)
 8004bda:	2146      	movs	r1, #70	; 0x46
 8004bdc:	4803      	ldr	r0, [pc, #12]	; (8004bec <CheckEndEffector+0x3c>)
 8004bde:	f001 fd79 	bl	80066d4 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200000ca 	.word	0x200000ca
 8004bec:	2000015c 	.word	0x2000015c
 8004bf0:	20000676 	.word	0x20000676

08004bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf8:	b672      	cpsid	i
}
 8004bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bfc:	e7fe      	b.n	8004bfc <Error_Handler+0x8>
	...

08004c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	6453      	str	r3, [r2, #68]	; 0x44
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_MspInit+0x4c>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c3e:	2007      	movs	r0, #7
 8004c40:	f000 fc20 	bl	8005484 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800

08004c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <HAL_I2C_MspInit+0xa4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d13c      	bne.n	8004cec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c94:	2312      	movs	r3, #18
 8004c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4814      	ldr	r0, [pc, #80]	; (8004cfc <HAL_I2C_MspInit+0xac>)
 8004cac:	f001 f83c 	bl	8005d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_I2C_MspInit+0xa8>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	201f      	movs	r0, #31
 8004cd2:	f000 fbe2 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004cd6:	201f      	movs	r0, #31
 8004cd8:	f000 fbfb 	bl	80054d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2020      	movs	r0, #32
 8004ce2:	f000 fbda 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ce6:	2020      	movs	r0, #32
 8004ce8:	f000 fbf3 	bl	80054d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cec:	bf00      	nop
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40005400 	.word	0x40005400
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40020400 	.word	0x40020400

08004d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_TIM_Base_MspInit+0xb8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d116      	bne.n	8004d40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6453      	str	r3, [r2, #68]	; 0x44
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	201a      	movs	r0, #26
 8004d34:	f000 fbb1 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004d38:	201a      	movs	r0, #26
 8004d3a:	f000 fbca 	bl	80054d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004d3e:	e036      	b.n	8004dae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_MspInit+0xc0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d116      	bne.n	8004d78 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d54:	f043 0304 	orr.w	r3, r3, #4
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5a:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	201e      	movs	r0, #30
 8004d6c:	f000 fb95 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d70:	201e      	movs	r0, #30
 8004d72:	f000 fbae 	bl	80054d2 <HAL_NVIC_EnableIRQ>
}
 8004d76:	e01a      	b.n	8004dae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_TIM_Base_MspInit+0xc4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d115      	bne.n	8004dae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d90:	6453      	str	r3, [r2, #68]	; 0x44
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_TIM_Base_MspInit+0xbc>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	201a      	movs	r0, #26
 8004da4:	f000 fb79 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004da8:	201a      	movs	r0, #26
 8004daa:	f000 fb92 	bl	80054d2 <HAL_NVIC_EnableIRQ>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40014800 	.word	0x40014800

08004dc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12b      	bne.n	8004e42 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a10      	ldr	r2, [pc, #64]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8004e22:	23c0      	movs	r3, #192	; 0xc0
 8004e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2302      	movs	r3, #2
 8004e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e32:	2302      	movs	r3, #2
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4805      	ldr	r0, [pc, #20]	; (8004e54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004e3e:	f000 ff73 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e42:	bf00      	nop
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40020000 	.word	0x40020000

08004e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <HAL_TIM_MspPostInit+0x68>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d11e      	bne.n	8004eb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <HAL_TIM_MspPostInit+0x6c>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <HAL_TIM_MspPostInit+0x6c>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <HAL_TIM_MspPostInit+0x6c>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8004e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <HAL_TIM_MspPostInit+0x70>)
 8004eb4:	f000 ff38 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004eb8:	bf00      	nop
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40020000 	.word	0x40020000

08004ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a4c      	ldr	r2, [pc, #304]	; (800501c <HAL_UART_MspInit+0x150>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	f040 8091 	bne.w	8005012 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	4a49      	ldr	r2, [pc, #292]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efe:	6413      	str	r3, [r2, #64]	; 0x40
 8004f00:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	4a42      	ldr	r2, [pc, #264]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1c:	4b40      	ldr	r3, [pc, #256]	; (8005020 <HAL_UART_MspInit+0x154>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004f28:	230c      	movs	r3, #12
 8004f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f34:	2303      	movs	r3, #3
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f38:	2307      	movs	r3, #7
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	4619      	mov	r1, r3
 8004f42:	4838      	ldr	r0, [pc, #224]	; (8005024 <HAL_UART_MspInit+0x158>)
 8004f44:	f000 fef0 	bl	8005d28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004f48:	4b37      	ldr	r3, [pc, #220]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f4a:	4a38      	ldr	r2, [pc, #224]	; (800502c <HAL_UART_MspInit+0x160>)
 8004f4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f56:	4b34      	ldr	r3, [pc, #208]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f5c:	4b32      	ldr	r3, [pc, #200]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f62:	4b31      	ldr	r3, [pc, #196]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f8a:	4827      	ldr	r0, [pc, #156]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f8c:	f000 fabc 	bl	8005508 <HAL_DMA_Init>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004f96:	f7ff fe2d 	bl	8004bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a22      	ldr	r2, [pc, #136]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8004fa0:	4a21      	ldr	r2, [pc, #132]	; (8005028 <HAL_UART_MspInit+0x15c>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_UART_MspInit+0x168>)
 8004faa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fb6:	2240      	movs	r2, #64	; 0x40
 8004fb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fce:	4b18      	ldr	r3, [pc, #96]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fe6:	4812      	ldr	r0, [pc, #72]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004fe8:	f000 fa8e 	bl	8005508 <HAL_DMA_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004ff2:	f7ff fdff 	bl	8004bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_UART_MspInit+0x164>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	2026      	movs	r0, #38	; 0x26
 8005008:	f000 fa47 	bl	800549a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800500c:	2026      	movs	r0, #38	; 0x26
 800500e:	f000 fa60 	bl	80054d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005012:	bf00      	nop
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40004400 	.word	0x40004400
 8005020:	40023800 	.word	0x40023800
 8005024:	40020000 	.word	0x40020000
 8005028:	20000314 	.word	0x20000314
 800502c:	40026088 	.word	0x40026088
 8005030:	20000374 	.word	0x20000374
 8005034:	400260a0 	.word	0x400260a0

08005038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800503c:	e7fe      	b.n	800503c <NMI_Handler+0x4>

0800503e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005042:	e7fe      	b.n	8005042 <HardFault_Handler+0x4>

08005044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005048:	e7fe      	b.n	8005048 <MemManage_Handler+0x4>

0800504a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800504e:	e7fe      	b.n	800504e <BusFault_Handler+0x4>

08005050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005054:	e7fe      	b.n	8005054 <UsageFault_Handler+0x4>

08005056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005084:	f000 f8ea 	bl	800525c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}

0800508c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8005090:	2010      	movs	r0, #16
 8005092:	f000 ffff 	bl	8006094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <DMA1_Stream5_IRQHandler+0x10>)
 80050a2:	f000 fbc9 	bl	8005838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000314 	.word	0x20000314

080050b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <DMA1_Stream6_IRQHandler+0x10>)
 80050b6:	f000 fbbf 	bl	8005838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000374 	.word	0x20000374

080050c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_X_Pin);
 80050c8:	2080      	movs	r0, #128	; 0x80
 80050ca:	f000 ffe3 	bl	8006094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050d8:	4803      	ldr	r0, [pc, #12]	; (80050e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80050da:	f004 fabf 	bl	800965c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80050de:	4803      	ldr	r0, [pc, #12]	; (80050ec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80050e0:	f004 fabc 	bl	800965c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200001b0 	.word	0x200001b0
 80050ec:	20000288 	.word	0x20000288

080050f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80050f4:	4802      	ldr	r0, [pc, #8]	; (8005100 <TIM4_IRQHandler+0x10>)
 80050f6:	f004 fab1 	bl	800965c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000240 	.word	0x20000240

08005104 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005108:	4802      	ldr	r0, [pc, #8]	; (8005114 <I2C1_EV_IRQHandler+0x10>)
 800510a:	f001 fbe1 	bl	80068d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000015c 	.word	0x2000015c

08005118 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800511c:	4802      	ldr	r0, [pc, #8]	; (8005128 <I2C1_ER_IRQHandler+0x10>)
 800511e:	f001 fd48 	bl	8006bb2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000015c 	.word	0x2000015c

0800512c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005130:	4802      	ldr	r0, [pc, #8]	; (800513c <USART2_IRQHandler+0x10>)
 8005132:	f005 fa69 	bl	800a608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200002d0 	.word	0x200002d0

08005140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <SystemInit+0x20>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <SystemInit+0x20>)
 800514c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000ed00 	.word	0xe000ed00

08005164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800519c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005168:	480d      	ldr	r0, [pc, #52]	; (80051a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800516a:	490e      	ldr	r1, [pc, #56]	; (80051a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800516c:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800516e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005170:	e002      	b.n	8005178 <LoopCopyDataInit>

08005172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005176:	3304      	adds	r3, #4

08005178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800517a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800517c:	d3f9      	bcc.n	8005172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800517e:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005180:	4c0b      	ldr	r4, [pc, #44]	; (80051b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005184:	e001      	b.n	800518a <LoopFillZerobss>

08005186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005188:	3204      	adds	r2, #4

0800518a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800518a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800518c:	d3fb      	bcc.n	8005186 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800518e:	f7ff ffd7 	bl	8005140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005192:	f006 fd07 	bl	800bba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005196:	f7fb fe7f 	bl	8000e98 <main>
  bx  lr    
 800519a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800519c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051a4:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 80051a8:	0800cc10 	.word	0x0800cc10
  ldr r2, =_sbss
 80051ac:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 80051b0:	200006a8 	.word	0x200006a8

080051b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051b4:	e7fe      	b.n	80051b4 <ADC_IRQHandler>
	...

080051b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_Init+0x40>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <HAL_Init+0x40>)
 80051c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_Init+0x40>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <HAL_Init+0x40>)
 80051ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <HAL_Init+0x40>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <HAL_Init+0x40>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051e0:	2003      	movs	r0, #3
 80051e2:	f000 f94f 	bl	8005484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f000 f808 	bl	80051fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051ec:	f7ff fd08 	bl	8004c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00

080051fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <HAL_InitTick+0x54>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_InitTick+0x58>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005212:	fbb3 f3f1 	udiv	r3, r3, r1
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f967 	bl	80054ee <HAL_SYSTICK_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e00e      	b.n	8005248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d80a      	bhi.n	8005246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005230:	2200      	movs	r2, #0
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	f000 f92f 	bl	800549a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800523c:	4a06      	ldr	r2, [pc, #24]	; (8005258 <HAL_InitTick+0x5c>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200000cc 	.word	0x200000cc
 8005254:	200000d4 	.word	0x200000d4
 8005258:	200000d0 	.word	0x200000d0

0800525c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_IncTick+0x20>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_IncTick+0x24>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4413      	add	r3, r2
 800526c:	4a04      	ldr	r2, [pc, #16]	; (8005280 <HAL_IncTick+0x24>)
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200000d4 	.word	0x200000d4
 8005280:	200006a4 	.word	0x200006a4

08005284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return uwTick;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_GetTick+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	200006a4 	.word	0x200006a4

0800529c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052a4:	f7ff ffee 	bl	8005284 <HAL_GetTick>
 80052a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d005      	beq.n	80052c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_Delay+0x44>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052c2:	bf00      	nop
 80052c4:	f7ff ffde 	bl	8005284 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d8f7      	bhi.n	80052c4 <HAL_Delay+0x28>
  {
  }
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200000d4 	.word	0x200000d4

080052e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <__NVIC_SetPriorityGrouping+0x44>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005300:	4013      	ands	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800530c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <__NVIC_SetPriorityGrouping+0x44>)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	60d3      	str	r3, [r2, #12]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <__NVIC_GetPriorityGrouping+0x18>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	f003 0307 	and.w	r3, r3, #7
}
 800533a:	4618      	mov	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005356:	2b00      	cmp	r3, #0
 8005358:	db0b      	blt.n	8005372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	f003 021f 	and.w	r2, r3, #31
 8005360:	4907      	ldr	r1, [pc, #28]	; (8005380 <__NVIC_EnableIRQ+0x38>)
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2001      	movs	r0, #1
 800536a:	fa00 f202 	lsl.w	r2, r0, r2
 800536e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	e000e100 	.word	0xe000e100

08005384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	6039      	str	r1, [r7, #0]
 800538e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005394:	2b00      	cmp	r3, #0
 8005396:	db0a      	blt.n	80053ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	490c      	ldr	r1, [pc, #48]	; (80053d0 <__NVIC_SetPriority+0x4c>)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	0112      	lsls	r2, r2, #4
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	440b      	add	r3, r1
 80053a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053ac:	e00a      	b.n	80053c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4908      	ldr	r1, [pc, #32]	; (80053d4 <__NVIC_SetPriority+0x50>)
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3b04      	subs	r3, #4
 80053bc:	0112      	lsls	r2, r2, #4
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	440b      	add	r3, r1
 80053c2:	761a      	strb	r2, [r3, #24]
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000e100 	.word	0xe000e100
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f1c3 0307 	rsb	r3, r3, #7
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	bf28      	it	cs
 80053f6:	2304      	movcs	r3, #4
 80053f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2b06      	cmp	r3, #6
 8005400:	d902      	bls.n	8005408 <NVIC_EncodePriority+0x30>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3b03      	subs	r3, #3
 8005406:	e000      	b.n	800540a <NVIC_EncodePriority+0x32>
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800540c:	f04f 32ff 	mov.w	r2, #4294967295
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	401a      	ands	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005420:	f04f 31ff 	mov.w	r1, #4294967295
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	fa01 f303 	lsl.w	r3, r1, r3
 800542a:	43d9      	mvns	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005430:	4313      	orrs	r3, r2
         );
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	; 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3b01      	subs	r3, #1
 800544c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005450:	d301      	bcc.n	8005456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005452:	2301      	movs	r3, #1
 8005454:	e00f      	b.n	8005476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <SysTick_Config+0x40>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800545e:	210f      	movs	r1, #15
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	f7ff ff8e 	bl	8005384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <SysTick_Config+0x40>)
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <SysTick_Config+0x40>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	e000e010 	.word	0xe000e010

08005484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ff29 	bl	80052e4 <__NVIC_SetPriorityGrouping>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054ac:	f7ff ff3e 	bl	800532c <__NVIC_GetPriorityGrouping>
 80054b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff ff8e 	bl	80053d8 <NVIC_EncodePriority>
 80054bc:	4602      	mov	r2, r0
 80054be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff5d 	bl	8005384 <__NVIC_SetPriority>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	4603      	mov	r3, r0
 80054da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff31 	bl	8005348 <__NVIC_EnableIRQ>
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff ffa2 	bl	8005440 <SysTick_Config>
 80054fc:	4603      	mov	r3, r0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005514:	f7ff feb6 	bl	8005284 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e099      	b.n	8005658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005544:	e00f      	b.n	8005566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005546:	f7ff fe9d 	bl	8005284 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b05      	cmp	r3, #5
 8005552:	d908      	bls.n	8005566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e078      	b.n	8005658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e8      	bne.n	8005546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4b38      	ldr	r3, [pc, #224]	; (8005660 <HAL_DMA_Init+0x158>)
 8005580:	4013      	ands	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800559e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d107      	bne.n	80055d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4313      	orrs	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0307 	bic.w	r3, r3, #7
 80055e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d117      	bne.n	800562a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb0f 	bl	8005c30 <DMA_CheckFifoParam>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2240      	movs	r2, #64	; 0x40
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005626:	2301      	movs	r3, #1
 8005628:	e016      	b.n	8005658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fac6 	bl	8005bc4 <DMA_CalcBaseAndBitshift>
 8005638:	4603      	mov	r3, r0
 800563a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	223f      	movs	r2, #63	; 0x3f
 8005642:	409a      	lsls	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	f010803f 	.word	0xf010803f

08005664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_DMA_Start_IT+0x26>
 8005686:	2302      	movs	r3, #2
 8005688:	e040      	b.n	800570c <HAL_DMA_Start_IT+0xa8>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d12f      	bne.n	80056fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fa58 	bl	8005b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	223f      	movs	r2, #63	; 0x3f
 80056be:	409a      	lsls	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0216 	orr.w	r2, r2, #22
 80056d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e005      	b.n	800570a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005706:	2302      	movs	r3, #2
 8005708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005722:	f7ff fdaf 	bl	8005284 <HAL_GetTick>
 8005726:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d008      	beq.n	8005746 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e052      	b.n	80057ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0216 	bic.w	r2, r2, #22
 8005754:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005764:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_DMA_Abort+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0208 	bic.w	r2, r2, #8
 8005784:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005796:	e013      	b.n	80057c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005798:	f7ff fd74 	bl	8005284 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b05      	cmp	r3, #5
 80057a4:	d90c      	bls.n	80057c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2203      	movs	r2, #3
 80057b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e015      	b.n	80057ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e4      	bne.n	8005798 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	223f      	movs	r2, #63	; 0x3f
 80057d4:	409a      	lsls	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d004      	beq.n	8005812 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e00c      	b.n	800582c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2205      	movs	r2, #5
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005844:	4b8e      	ldr	r3, [pc, #568]	; (8005a80 <HAL_DMA_IRQHandler+0x248>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a8e      	ldr	r2, [pc, #568]	; (8005a84 <HAL_DMA_IRQHandler+0x24c>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0a9b      	lsrs	r3, r3, #10
 8005850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	2208      	movs	r2, #8
 8005864:	409a      	lsls	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01a      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0204 	bic.w	r2, r2, #4
 800588a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	2208      	movs	r2, #8
 8005892:	409a      	lsls	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0201 	orr.w	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2201      	movs	r2, #1
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	2201      	movs	r2, #1
 80058c8:	409a      	lsls	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f043 0202 	orr.w	r2, r3, #2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	2204      	movs	r2, #4
 80058e0:	409a      	lsls	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d012      	beq.n	8005910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	2204      	movs	r2, #4
 80058fe:	409a      	lsls	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	2210      	movs	r2, #16
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d043      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d03c      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	2210      	movs	r2, #16
 8005934:	409a      	lsls	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d018      	beq.n	800597a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d024      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
 8005966:	e01f      	b.n	80059a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
 8005978:	e016      	b.n	80059a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0208 	bic.w	r2, r2, #8
 8005996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	2220      	movs	r2, #32
 80059ae:	409a      	lsls	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 808f 	beq.w	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8087 	beq.w	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	2220      	movs	r2, #32
 80059d0:	409a      	lsls	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d136      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0216 	bic.w	r2, r2, #22
 80059f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x1da>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0208 	bic.w	r2, r2, #8
 8005a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	223f      	movs	r2, #63	; 0x3f
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d07e      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
        }
        return;
 8005a4e:	e079      	b.n	8005b44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10d      	bne.n	8005a88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d031      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
 8005a7c:	e02c      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
 8005a7e:	bf00      	nop
 8005a80:	200000cc 	.word	0x200000cc
 8005a84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d023      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
 8005a98:	e01e      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0210 	bic.w	r2, r2, #16
 8005ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d032      	beq.n	8005b46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d022      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2205      	movs	r2, #5
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d307      	bcc.n	8005b20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f2      	bne.n	8005b04 <HAL_DMA_IRQHandler+0x2cc>
 8005b1e:	e000      	b.n	8005b22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	e000      	b.n	8005b46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b44:	bf00      	nop
    }
  }
}
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b5a:	b2db      	uxtb	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d108      	bne.n	8005ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ba6:	e007      	b.n	8005bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	3b10      	subs	r3, #16
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <DMA_CalcBaseAndBitshift+0x64>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <DMA_CalcBaseAndBitshift+0x68>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d909      	bls.n	8005c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	659a      	str	r2, [r3, #88]	; 0x58
 8005c04:	e007      	b.n	8005c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	aaaaaaab 	.word	0xaaaaaaab
 8005c2c:	0800cbc8 	.word	0x0800cbc8

08005c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11f      	bne.n	8005c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d856      	bhi.n	8005cfe <DMA_CheckFifoParam+0xce>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <DMA_CheckFifoParam+0x28>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c7b 	.word	0x08005c7b
 8005c60:	08005c69 	.word	0x08005c69
 8005c64:	08005cff 	.word	0x08005cff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d046      	beq.n	8005d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c78:	e043      	b.n	8005d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c82:	d140      	bne.n	8005d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c88:	e03d      	b.n	8005d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d121      	bne.n	8005cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d837      	bhi.n	8005d0a <DMA_CheckFifoParam+0xda>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <DMA_CheckFifoParam+0x70>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cb7 	.word	0x08005cb7
 8005ca8:	08005cb1 	.word	0x08005cb1
 8005cac:	08005cc9 	.word	0x08005cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	e030      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d025      	beq.n	8005d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc6:	e022      	b.n	8005d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd0:	d11f      	bne.n	8005d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cd6:	e01c      	b.n	8005d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d903      	bls.n	8005ce6 <DMA_CheckFifoParam+0xb6>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d003      	beq.n	8005cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ce4:	e018      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cea:	e015      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e00b      	b.n	8005d16 <DMA_CheckFifoParam+0xe6>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e00a      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d02:	bf00      	nop
 8005d04:	e008      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d06:	bf00      	nop
 8005d08:	e006      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e004      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d16:	bf00      	nop
    }
  } 
  
  return status; 
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e159      	b.n	8005ff8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d44:	2201      	movs	r2, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 8148 	bne.w	8005ff2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d005      	beq.n	8005d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d130      	bne.n	8005ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2203      	movs	r2, #3
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0201 	and.w	r2, r3, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d017      	beq.n	8005e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d123      	bne.n	8005e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	08da      	lsrs	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3208      	adds	r2, #8
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	08da      	lsrs	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3208      	adds	r2, #8
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0203 	and.w	r2, r3, #3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80a2 	beq.w	8005ff2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b57      	ldr	r3, [pc, #348]	; (8006010 <HAL_GPIO_Init+0x2e8>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a56      	ldr	r2, [pc, #344]	; (8006010 <HAL_GPIO_Init+0x2e8>)
 8005eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b54      	ldr	r3, [pc, #336]	; (8006010 <HAL_GPIO_Init+0x2e8>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eca:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_GPIO_Init+0x2ec>)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a49      	ldr	r2, [pc, #292]	; (8006018 <HAL_GPIO_Init+0x2f0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d019      	beq.n	8005f2a <HAL_GPIO_Init+0x202>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a48      	ldr	r2, [pc, #288]	; (800601c <HAL_GPIO_Init+0x2f4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_GPIO_Init+0x1fe>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a47      	ldr	r2, [pc, #284]	; (8006020 <HAL_GPIO_Init+0x2f8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00d      	beq.n	8005f22 <HAL_GPIO_Init+0x1fa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a46      	ldr	r2, [pc, #280]	; (8006024 <HAL_GPIO_Init+0x2fc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <HAL_GPIO_Init+0x1f6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a45      	ldr	r2, [pc, #276]	; (8006028 <HAL_GPIO_Init+0x300>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_GPIO_Init+0x1f2>
 8005f16:	2304      	movs	r3, #4
 8005f18:	e008      	b.n	8005f2c <HAL_GPIO_Init+0x204>
 8005f1a:	2307      	movs	r3, #7
 8005f1c:	e006      	b.n	8005f2c <HAL_GPIO_Init+0x204>
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e004      	b.n	8005f2c <HAL_GPIO_Init+0x204>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e002      	b.n	8005f2c <HAL_GPIO_Init+0x204>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_GPIO_Init+0x204>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	f002 0203 	and.w	r2, r2, #3
 8005f32:	0092      	lsls	r2, r2, #2
 8005f34:	4093      	lsls	r3, r2
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f3c:	4935      	ldr	r1, [pc, #212]	; (8006014 <HAL_GPIO_Init+0x2ec>)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	3302      	adds	r3, #2
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f4a:	4b38      	ldr	r3, [pc, #224]	; (800602c <HAL_GPIO_Init+0x304>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	; (800602c <HAL_GPIO_Init+0x304>)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <HAL_GPIO_Init+0x304>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f98:	4a24      	ldr	r2, [pc, #144]	; (800602c <HAL_GPIO_Init+0x304>)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <HAL_GPIO_Init+0x304>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc2:	4a1a      	ldr	r2, [pc, #104]	; (800602c <HAL_GPIO_Init+0x304>)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_GPIO_Init+0x304>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fec:	4a0f      	ldr	r2, [pc, #60]	; (800602c <HAL_GPIO_Init+0x304>)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	f67f aea2 	bls.w	8005d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3724      	adds	r7, #36	; 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800
 8006014:	40013800 	.word	0x40013800
 8006018:	40020000 	.word	0x40020000
 800601c:	40020400 	.word	0x40020400
 8006020:	40020800 	.word	0x40020800
 8006024:	40020c00 	.word	0x40020c00
 8006028:	40021000 	.word	0x40021000
 800602c:	40013c00 	.word	0x40013c00

08006030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060aa:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fb fbee 	bl	8001894 <HAL_GPIO_EXTI_Callback>
  }
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40013c00 	.word	0x40013c00

080060c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e12b      	b.n	800632e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe fdb0 	bl	8004c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2224      	movs	r2, #36	; 0x24
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006128:	f002 ff26 	bl	8008f78 <HAL_RCC_GetPCLK1Freq>
 800612c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4a81      	ldr	r2, [pc, #516]	; (8006338 <HAL_I2C_Init+0x274>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d807      	bhi.n	8006148 <HAL_I2C_Init+0x84>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a80      	ldr	r2, [pc, #512]	; (800633c <HAL_I2C_Init+0x278>)
 800613c:	4293      	cmp	r3, r2
 800613e:	bf94      	ite	ls
 8006140:	2301      	movls	r3, #1
 8006142:	2300      	movhi	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e006      	b.n	8006156 <HAL_I2C_Init+0x92>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4a7d      	ldr	r2, [pc, #500]	; (8006340 <HAL_I2C_Init+0x27c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	bf94      	ite	ls
 8006150:	2301      	movls	r3, #1
 8006152:	2300      	movhi	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e0e7      	b.n	800632e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a78      	ldr	r2, [pc, #480]	; (8006344 <HAL_I2C_Init+0x280>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0c9b      	lsrs	r3, r3, #18
 8006168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a6a      	ldr	r2, [pc, #424]	; (8006338 <HAL_I2C_Init+0x274>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d802      	bhi.n	8006198 <HAL_I2C_Init+0xd4>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3301      	adds	r3, #1
 8006196:	e009      	b.n	80061ac <HAL_I2C_Init+0xe8>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	4a69      	ldr	r2, [pc, #420]	; (8006348 <HAL_I2C_Init+0x284>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	099b      	lsrs	r3, r3, #6
 80061aa:	3301      	adds	r3, #1
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	430b      	orrs	r3, r1
 80061b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	495c      	ldr	r1, [pc, #368]	; (8006338 <HAL_I2C_Init+0x274>)
 80061c8:	428b      	cmp	r3, r1
 80061ca:	d819      	bhi.n	8006200 <HAL_I2C_Init+0x13c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1e59      	subs	r1, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061e0:	400b      	ands	r3, r1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_I2C_Init+0x138>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1e59      	subs	r1, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fa:	e051      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 80061fc:	2304      	movs	r3, #4
 80061fe:	e04f      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d111      	bne.n	800622c <HAL_I2C_Init+0x168>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1e58      	subs	r0, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	440b      	add	r3, r1
 8006216:	fbb0 f3f3 	udiv	r3, r0, r3
 800621a:	3301      	adds	r3, #1
 800621c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e012      	b.n	8006252 <HAL_I2C_Init+0x18e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e58      	subs	r0, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	0099      	lsls	r1, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006242:	3301      	adds	r3, #1
 8006244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Init+0x196>
 8006256:	2301      	movs	r3, #1
 8006258:	e022      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10e      	bne.n	8006280 <HAL_I2C_Init+0x1bc>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1e58      	subs	r0, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6859      	ldr	r1, [r3, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	440b      	add	r3, r1
 8006270:	fbb0 f3f3 	udiv	r3, r0, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627e:	e00f      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e58      	subs	r0, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	0099      	lsls	r1, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	fbb0 f3f3 	udiv	r3, r0, r3
 8006296:	3301      	adds	r3, #1
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	6809      	ldr	r1, [r1, #0]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6911      	ldr	r1, [r2, #16]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68d2      	ldr	r2, [r2, #12]
 80062da:	4311      	orrs	r1, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	000186a0 	.word	0x000186a0
 800633c:	001e847f 	.word	0x001e847f
 8006340:	003d08ff 	.word	0x003d08ff
 8006344:	431bde83 	.word	0x431bde83
 8006348:	10624dd3 	.word	0x10624dd3

0800634c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	461a      	mov	r2, r3
 8006358:	460b      	mov	r3, r1
 800635a:	817b      	strh	r3, [r7, #10]
 800635c:	4613      	mov	r3, r2
 800635e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7fe ff90 	bl	8005284 <HAL_GetTick>
 8006364:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	f040 80e0 	bne.w	8006534 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2319      	movs	r3, #25
 800637a:	2201      	movs	r2, #1
 800637c:	4970      	ldr	r1, [pc, #448]	; (8006540 <HAL_I2C_Master_Transmit+0x1f4>)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f001 ffb6 	bl	80082f0 <I2C_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800638a:	2302      	movs	r3, #2
 800638c:	e0d3      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_I2C_Master_Transmit+0x50>
 8006398:	2302      	movs	r3, #2
 800639a:	e0cc      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d007      	beq.n	80063c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2210      	movs	r2, #16
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	893a      	ldrh	r2, [r7, #8]
 80063f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a50      	ldr	r2, [pc, #320]	; (8006544 <HAL_I2C_Master_Transmit+0x1f8>)
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006404:	8979      	ldrh	r1, [r7, #10]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f001 fe46 	bl	800809c <I2C_MasterRequestWrite>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e08d      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006430:	e066      	b.n	8006500 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	6a39      	ldr	r1, [r7, #32]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f002 f830 	bl	800849c <I2C_WaitOnTXEFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	2b04      	cmp	r3, #4
 8006448:	d107      	bne.n	800645a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e06b      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11b      	bne.n	80064d4 <HAL_I2C_Master_Transmit+0x188>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d017      	beq.n	80064d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	6a39      	ldr	r1, [r7, #32]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f002 f820 	bl	800851e <I2C_WaitOnBTFFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d107      	bne.n	80064fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e01a      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	2b00      	cmp	r3, #0
 8006506:	d194      	bne.n	8006432 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	00100002 	.word	0x00100002
 8006544:	ffff0000 	.word	0xffff0000

08006548 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	461a      	mov	r2, r3
 8006554:	460b      	mov	r3, r1
 8006556:	817b      	strh	r3, [r7, #10]
 8006558:	4613      	mov	r3, r2
 800655a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	f040 80a6 	bne.w	80066be <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d005      	beq.n	800658e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d002      	beq.n	800658e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d130      	bne.n	80065f0 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800658e:	4b4f      	ldr	r3, [pc, #316]	; (80066cc <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	08db      	lsrs	r3, r3, #3
 8006594:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	0a1a      	lsrs	r2, r3, #8
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009a      	lsls	r2, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d116      	bne.n	80065e2 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f043 0220 	orr.w	r2, r3, #32
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e06e      	b.n	80066c0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d0db      	beq.n	80065a8 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e060      	b.n	80066c0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d007      	beq.n	8006624 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2221      	movs	r2, #33	; 0x21
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2210      	movs	r2, #16
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	893a      	ldrh	r2, [r7, #8]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006666:	897a      	ldrh	r2, [r7, #10]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b11      	cmp	r3, #17
 8006676:	d10c      	bne.n	8006692 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800667e:	d003      	beq.n	8006688 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006686:	d101      	bne.n	800668c <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800668c:	2300      	movs	r3, #0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80066b8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200000cc 	.word	0x200000cc
 80066d0:	14f8b589 	.word	0x14f8b589

080066d4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	461a      	mov	r2, r3
 80066e0:	460b      	mov	r3, r1
 80066e2:	817b      	strh	r3, [r7, #10]
 80066e4:	4613      	mov	r3, r2
 80066e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80066f4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 80da 	bne.w	80068b8 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006712:	d005      	beq.n	8006720 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	2b08      	cmp	r3, #8
 8006718:	d002      	beq.n	8006720 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2b01      	cmp	r3, #1
 800671e:	d130      	bne.n	8006782 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006720:	4b69      	ldr	r3, [pc, #420]	; (80068c8 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	4a69      	ldr	r2, [pc, #420]	; (80068cc <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	0a1a      	lsrs	r2, r3, #8
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009a      	lsls	r2, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3b01      	subs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d116      	bne.n	8006774 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0a2      	b.n	80068ba <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d0db      	beq.n	800673a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800678c:	2302      	movs	r3, #2
 800678e:	e094      	b.n	80068ba <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d007      	beq.n	80067b6 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0201 	orr.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2222      	movs	r2, #34	; 0x22
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2210      	movs	r2, #16
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	893a      	ldrh	r2, [r7, #8]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80067f8:	897a      	ldrh	r2, [r7, #10]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d126      	bne.n	800685c <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	2b20      	cmp	r3, #32
 8006812:	d002      	beq.n	800681a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	2b10      	cmp	r3, #16
 8006818:	d120      	bne.n	800685c <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b12      	cmp	r3, #18
 800681e:	d114      	bne.n	800684a <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682e:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683e:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006846:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006848:	e010      	b.n	800686c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006858:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800685a:	e007      	b.n	800686c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800686a:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b12      	cmp	r3, #18
 8006870:	d10c      	bne.n	800688c <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006878:	d003      	beq.n	8006882 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006880:	d101      	bne.n	8006886 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8006886:	2300      	movs	r3, #0
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	200000cc 	.word	0x200000cc
 80068cc:	14f8b589 	.word	0x14f8b589

080068d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d003      	beq.n	8006908 <HAL_I2C_EV_IRQHandler+0x38>
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	f040 80c1 	bne.w	8006a8a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10d      	bne.n	800693e <HAL_I2C_EV_IRQHandler+0x6e>
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006928:	d003      	beq.n	8006932 <HAL_I2C_EV_IRQHandler+0x62>
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006930:	d101      	bne.n	8006936 <HAL_I2C_EV_IRQHandler+0x66>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x68>
 8006936:	2300      	movs	r3, #0
 8006938:	2b01      	cmp	r3, #1
 800693a:	f000 8132 	beq.w	8006ba2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_I2C_EV_IRQHandler+0x92>
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	0a5b      	lsrs	r3, r3, #9
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fe84 	bl	8008662 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd83 	bl	8007466 <I2C_Master_SB>
 8006960:	e092      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	08db      	lsrs	r3, r3, #3
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0xb2>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	0a5b      	lsrs	r3, r3, #9
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fdf9 	bl	8007572 <I2C_Master_ADD10>
 8006980:	e082      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fe13 	bl	80075c6 <I2C_Master_ADDR>
 80069a0:	e072      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d03b      	beq.n	8006a26 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069bc:	f000 80f3 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	09db      	lsrs	r3, r3, #7
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <HAL_I2C_EV_IRQHandler+0x11c>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a9b      	lsrs	r3, r3, #10
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_I2C_EV_IRQHandler+0x11c>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	089b      	lsrs	r3, r3, #2
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9f3 	bl	8006dd0 <I2C_MasterTransmit_TXE>
 80069ea:	e04d      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	089b      	lsrs	r3, r3, #2
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80d6 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	0a5b      	lsrs	r3, r3, #9
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80cf 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b21      	cmp	r3, #33	; 0x21
 8006a0c:	d103      	bne.n	8006a16 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa7a 	bl	8006f08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a14:	e0c7      	b.n	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	f040 80c4 	bne.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fae8 	bl	8006ff4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a24:	e0bf      	b.n	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a34:	f000 80b7 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	099b      	lsrs	r3, r3, #6
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <HAL_I2C_EV_IRQHandler+0x194>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	0a9b      	lsrs	r3, r3, #10
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_I2C_EV_IRQHandler+0x194>
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fb5d 	bl	800711c <I2C_MasterReceive_RXNE>
 8006a62:	e011      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	089b      	lsrs	r3, r3, #2
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 809a 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	0a5b      	lsrs	r3, r3, #9
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8093 	beq.w	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc06 	bl	8007292 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a86:	e08e      	b.n	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a88:	e08d      	b.n	8006ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e007      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <HAL_I2C_EV_IRQHandler+0x20e>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	0a5b      	lsrs	r3, r3, #9
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00c      	beq.n	8006ade <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 ffc4 	bl	8007a64 <I2C_Slave_ADDR>
 8006adc:	e066      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x22e>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	0a5b      	lsrs	r3, r3, #9
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fffe 	bl	8007af8 <I2C_Slave_STOPF>
 8006afc:	e056      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	2b21      	cmp	r3, #33	; 0x21
 8006b02:	d002      	beq.n	8006b0a <HAL_I2C_EV_IRQHandler+0x23a>
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b29      	cmp	r3, #41	; 0x29
 8006b08:	d125      	bne.n	8006b56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <HAL_I2C_EV_IRQHandler+0x266>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	0a9b      	lsrs	r3, r3, #10
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <HAL_I2C_EV_IRQHandler+0x266>
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	089b      	lsrs	r3, r3, #2
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 feda 	bl	80078e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b34:	e039      	b.n	8006baa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	089b      	lsrs	r3, r3, #2
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d033      	beq.n	8006baa <HAL_I2C_EV_IRQHandler+0x2da>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	0a5b      	lsrs	r3, r3, #9
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d02d      	beq.n	8006baa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 ff07 	bl	8007962 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b54:	e029      	b.n	8006baa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	099b      	lsrs	r3, r3, #6
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	0a9b      	lsrs	r3, r3, #10
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	089b      	lsrs	r3, r3, #2
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 ff12 	bl	80079a4 <I2C_SlaveReceive_RXNE>
 8006b80:	e014      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	089b      	lsrs	r3, r3, #2
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	0a5b      	lsrs	r3, r3, #9
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d008      	beq.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 ff40 	bl	8007a20 <I2C_SlaveReceive_BTF>
 8006ba0:	e004      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006baa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b08a      	sub	sp, #40	; 0x28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <HAL_I2C_ER_IRQHandler+0x4e>
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	0a1b      	lsrs	r3, r3, #8
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bfe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	0a5b      	lsrs	r3, r3, #9
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <HAL_I2C_ER_IRQHandler+0x78>
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f043 0302 	orr.w	r3, r3, #2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	0a9b      	lsrs	r3, r3, #10
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d03f      	beq.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x104>
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d039      	beq.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006c42:	7efb      	ldrb	r3, [r7, #27]
 8006c44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006c5c:	7ebb      	ldrb	r3, [r7, #26]
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d112      	bne.n	8006c88 <HAL_I2C_ER_IRQHandler+0xd6>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10f      	bne.n	8006c88 <HAL_I2C_ER_IRQHandler+0xd6>
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	2b21      	cmp	r3, #33	; 0x21
 8006c6c:	d008      	beq.n	8006c80 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006c6e:	7cfb      	ldrb	r3, [r7, #19]
 8006c70:	2b29      	cmp	r3, #41	; 0x29
 8006c72:	d005      	beq.n	8006c80 <HAL_I2C_ER_IRQHandler+0xce>
 8006c74:	7cfb      	ldrb	r3, [r7, #19]
 8006c76:	2b28      	cmp	r3, #40	; 0x28
 8006c78:	d106      	bne.n	8006c88 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b21      	cmp	r3, #33	; 0x21
 8006c7e:	d103      	bne.n	8006c88 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f869 	bl	8007d58 <I2C_Slave_AF>
 8006c86:	e016      	b.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	f043 0304 	orr.w	r3, r3, #4
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c9a:	7efb      	ldrb	r3, [r7, #27]
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d002      	beq.n	8006ca6 <HAL_I2C_ER_IRQHandler+0xf4>
 8006ca0:	7efb      	ldrb	r3, [r7, #27]
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d107      	bne.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	0adb      	lsrs	r3, r3, #11
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_I2C_ER_IRQHandler+0x12e>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	f043 0308 	orr.w	r3, r3, #8
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006cde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f8a0 	bl	8007e38 <I2C_ITError>
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d150      	bne.n	8006e98 <I2C_MasterTransmit_TXE+0xc8>
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b21      	cmp	r3, #33	; 0x21
 8006dfa:	d14d      	bne.n	8006e98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d01d      	beq.n	8006e3e <I2C_MasterTransmit_TXE+0x6e>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d01a      	beq.n	8006e3e <I2C_MasterTransmit_TXE+0x6e>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e0e:	d016      	beq.n	8006e3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2211      	movs	r2, #17
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff ff62 	bl	8006d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e3c:	e060      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d107      	bne.n	8006e88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ff7d 	bl	8006d80 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e86:	e03b      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff ff35 	bl	8006d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e96:	e033      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b21      	cmp	r3, #33	; 0x21
 8006e9c:	d005      	beq.n	8006eaa <I2C_MasterTransmit_TXE+0xda>
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d12d      	bne.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b22      	cmp	r3, #34	; 0x22
 8006ea8:	d12a      	bne.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d108      	bne.n	8006ec6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ec4:	e01c      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d103      	bne.n	8006eda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f88e 	bl	8006ff4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006ed8:	e012      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006efe:	e7ff      	b.n	8006f00 <I2C_MasterTransmit_TXE+0x130>
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b21      	cmp	r3, #33	; 0x21
 8006f20:	d164      	bne.n	8006fec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006f50:	e04c      	b.n	8006fec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d01d      	beq.n	8006f94 <I2C_MasterTransmit_BTF+0x8c>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d01a      	beq.n	8006f94 <I2C_MasterTransmit_BTF+0x8c>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f64:	d016      	beq.n	8006f94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2211      	movs	r2, #17
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff feb7 	bl	8006d00 <HAL_I2C_MasterTxCpltCallback>
}
 8006f92:	e02b      	b.n	8006fec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fa2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d107      	bne.n	8006fde <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fed2 	bl	8006d80 <HAL_I2C_MemTxCpltCallback>
}
 8006fdc:	e006      	b.n	8006fec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fe8a 	bl	8006d00 <HAL_I2C_MasterTxCpltCallback>
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007002:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d10b      	bne.n	800702c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007018:	b2da      	uxtb	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800702a:	e073      	b.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007030:	b29b      	uxth	r3, r3
 8007032:	121b      	asrs	r3, r3, #8
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007046:	e065      	b.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10b      	bne.n	8007068 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007054:	b2da      	uxtb	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007066:	e055      	b.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	2b02      	cmp	r3, #2
 800706e:	d151      	bne.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b22      	cmp	r3, #34	; 0x22
 8007074:	d10d      	bne.n	8007092 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007084:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007090:	e040      	b.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	2b21      	cmp	r3, #33	; 0x21
 80070a0:	d112      	bne.n	80070c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070c6:	e025      	b.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d120      	bne.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b21      	cmp	r3, #33	; 0x21
 80070d6:	d11d      	bne.n	8007114 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fe36 	bl	8006d80 <HAL_I2C_MemTxCpltCallback>
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b22      	cmp	r3, #34	; 0x22
 800712e:	f040 80ac 	bne.w	800728a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007136:	b29b      	uxth	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d921      	bls.n	8007184 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b03      	cmp	r3, #3
 800716e:	f040 808c 	bne.w	800728a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007180:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007182:	e082      	b.n	800728a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2b02      	cmp	r3, #2
 800718a:	d075      	beq.n	8007278 <I2C_MasterReceive_RXNE+0x15c>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d002      	beq.n	8007198 <I2C_MasterReceive_RXNE+0x7c>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16f      	bne.n	8007278 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fa01 	bl	80085a0 <I2C_WaitOnSTOPRequestThroughIT>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d142      	bne.n	800722a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d10a      	bne.n	8007214 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff fdc1 	bl	8006d94 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007212:	e03a      	b.n	800728a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2212      	movs	r2, #18
 8007220:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fd76 	bl	8006d14 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007228:	e02f      	b.n	800728a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007238:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fd99 	bl	8006da8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007276:	e008      	b.n	800728a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007286:	605a      	str	r2, [r3, #4]
}
 8007288:	e7ff      	b.n	800728a <I2C_MasterReceive_RXNE+0x16e>
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d11b      	bne.n	80072e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80072e0:	e0bd      	b.n	800745e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d129      	bne.n	8007340 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d00a      	beq.n	8007318 <I2C_MasterReceive_BTF+0x86>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d007      	beq.n	8007318 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007316:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800733e:	e08e      	b.n	800745e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d176      	bne.n	8007438 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d002      	beq.n	8007356 <I2C_MasterReceive_BTF+0xc4>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b10      	cmp	r3, #16
 8007354:	d108      	bne.n	8007368 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e019      	b.n	800739c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b04      	cmp	r3, #4
 800736c:	d002      	beq.n	8007374 <I2C_MasterReceive_BTF+0xe2>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d108      	bne.n	8007386 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e00a      	b.n	800739c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b10      	cmp	r3, #16
 800738a:	d007      	beq.n	800739c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d10a      	bne.n	8007422 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fcba 	bl	8006d94 <HAL_I2C_MemRxCpltCallback>
}
 8007420:	e01d      	b.n	800745e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2212      	movs	r2, #18
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fc6f 	bl	8006d14 <HAL_I2C_MasterRxCpltCallback>
}
 8007436:	e012      	b.n	800745e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d117      	bne.n	80074aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	b2db      	uxtb	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007492:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007494:	e067      	b.n	8007566 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	b2db      	uxtb	r3, r3
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	611a      	str	r2, [r3, #16]
}
 80074a8:	e05d      	b.n	8007566 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074b2:	d133      	bne.n	800751c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b21      	cmp	r3, #33	; 0x21
 80074be:	d109      	bne.n	80074d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074d0:	611a      	str	r2, [r3, #16]
 80074d2:	e008      	b.n	80074e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <I2C_Master_SB+0x92>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d108      	bne.n	800750a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d032      	beq.n	8007566 <I2C_Master_SB+0x100>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d02d      	beq.n	8007566 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007518:	605a      	str	r2, [r3, #4]
}
 800751a:	e024      	b.n	8007566 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10e      	bne.n	8007542 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	b29b      	uxth	r3, r3
 800752a:	11db      	asrs	r3, r3, #7
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f063 030f 	orn	r3, r3, #15
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	611a      	str	r2, [r3, #16]
}
 8007540:	e011      	b.n	8007566 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10d      	bne.n	8007566 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754e:	b29b      	uxth	r3, r3
 8007550:	11db      	asrs	r3, r3, #7
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0306 	and.w	r3, r3, #6
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f063 030e 	orn	r3, r3, #14
 800755e:	b2da      	uxtb	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	611a      	str	r2, [r3, #16]
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <I2C_Master_ADD10+0x26>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <I2C_Master_ADD10+0x48>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b8:	605a      	str	r2, [r3, #4]
  }
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b091      	sub	sp, #68	; 0x44
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b22      	cmp	r3, #34	; 0x22
 80075ee:	f040 8169 	bne.w	80078c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <I2C_Master_ADDR+0x54>
 80075fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d10b      	bne.n	800761a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007602:	2300      	movs	r3, #0
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	e160      	b.n	80078dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11d      	bne.n	800765e <I2C_Master_ADDR+0x98>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800762a:	d118      	bne.n	800765e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762c:	2300      	movs	r3, #0
 800762e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007650:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	651a      	str	r2, [r3, #80]	; 0x50
 800765c:	e13e      	b.n	80078dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d113      	bne.n	8007690 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007668:	2300      	movs	r3, #0
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e115      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	f040 808a 	bne.w	80077b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076a2:	d137      	bne.n	8007714 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c2:	d113      	bne.n	80076ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d4:	2300      	movs	r3, #0
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	e0e7      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e0d3      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	2b08      	cmp	r3, #8
 8007718:	d02e      	beq.n	8007778 <I2C_Master_ADDR+0x1b2>
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	2b20      	cmp	r3, #32
 800771e:	d02b      	beq.n	8007778 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	2b12      	cmp	r3, #18
 8007724:	d102      	bne.n	800772c <I2C_Master_ADDR+0x166>
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	2b01      	cmp	r3, #1
 800772a:	d125      	bne.n	8007778 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	2b04      	cmp	r3, #4
 8007730:	d00e      	beq.n	8007750 <I2C_Master_ADDR+0x18a>
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	2b02      	cmp	r3, #2
 8007736:	d00b      	beq.n	8007750 <I2C_Master_ADDR+0x18a>
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	2b10      	cmp	r3, #16
 800773c:	d008      	beq.n	8007750 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e007      	b.n	8007760 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800775e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	e0a1      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007786:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007788:	2300      	movs	r3, #0
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e085      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d14d      	bne.n	8007856 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d016      	beq.n	80077ee <I2C_Master_ADDR+0x228>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d013      	beq.n	80077ee <I2C_Master_ADDR+0x228>
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d010      	beq.n	80077ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e007      	b.n	80077fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800780c:	d117      	bne.n	800783e <I2C_Master_ADDR+0x278>
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007814:	d00b      	beq.n	800782e <I2C_Master_ADDR+0x268>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b01      	cmp	r3, #1
 800781a:	d008      	beq.n	800782e <I2C_Master_ADDR+0x268>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	2b08      	cmp	r3, #8
 8007820:	d005      	beq.n	800782e <I2C_Master_ADDR+0x268>
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2b10      	cmp	r3, #16
 8007826:	d002      	beq.n	800782e <I2C_Master_ADDR+0x268>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	2b20      	cmp	r3, #32
 800782c:	d107      	bne.n	800783e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800783c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	e032      	b.n	80078bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007864:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d117      	bne.n	80078a6 <I2C_Master_ADDR+0x2e0>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800787c:	d00b      	beq.n	8007896 <I2C_Master_ADDR+0x2d0>
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	2b01      	cmp	r3, #1
 8007882:	d008      	beq.n	8007896 <I2C_Master_ADDR+0x2d0>
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	2b08      	cmp	r3, #8
 8007888:	d005      	beq.n	8007896 <I2C_Master_ADDR+0x2d0>
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2b10      	cmp	r3, #16
 800788e:	d002      	beq.n	8007896 <I2C_Master_ADDR+0x2d0>
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b20      	cmp	r3, #32
 8007894:	d107      	bne.n	80078a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80078c2:	e00b      	b.n	80078dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
}
 80078da:	e7ff      	b.n	80078dc <I2C_Master_ADDR+0x316>
 80078dc:	bf00      	nop
 80078de:	3744      	adds	r7, #68	; 0x44
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d02b      	beq.n	800795a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d114      	bne.n	800795a <I2C_SlaveTransmit_TXE+0x72>
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b29      	cmp	r3, #41	; 0x29
 8007934:	d111      	bne.n	800795a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007944:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2221      	movs	r2, #33	; 0x21
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2228      	movs	r2, #40	; 0x28
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff f9e7 	bl	8006d28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d02c      	beq.n	8007a18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d114      	bne.n	8007a18 <I2C_SlaveReceive_RXNE+0x74>
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b2a      	cmp	r3, #42	; 0x2a
 80079f2:	d111      	bne.n	8007a18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2222      	movs	r2, #34	; 0x22
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2228      	movs	r2, #40	; 0x28
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff f992 	bl	8006d3c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d012      	beq.n	8007a58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a7e:	2b28      	cmp	r3, #40	; 0x28
 8007a80:	d127      	bne.n	8007ad2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	089b      	lsrs	r3, r3, #2
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	09db      	lsrs	r3, r3, #7
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	81bb      	strh	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007ac4:	89ba      	ldrh	r2, [r7, #12]
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff f940 	bl	8006d50 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ad0:	e00e      	b.n	8007af0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60bb      	str	r3, [r7, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	60bb      	str	r3, [r7, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b54:	d172      	bne.n	8007c3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b22      	cmp	r3, #34	; 0x22
 8007b5a:	d002      	beq.n	8007b62 <I2C_Slave_STOPF+0x6a>
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b60:	d135      	bne.n	8007bce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0204 	orr.w	r2, r3, #4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd ffd6 	bl	8005b4c <HAL_DMA_GetState>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d049      	beq.n	8007c3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	4a69      	ldr	r2, [pc, #420]	; (8007d50 <I2C_Slave_STOPF+0x258>)
 8007bac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fe1e 	bl	80057f4 <HAL_DMA_Abort_IT>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03d      	beq.n	8007c3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bcc:	e035      	b.n	8007c3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0204 	orr.w	r2, r3, #4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd ffa0 	bl	8005b4c <HAL_DMA_GetState>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d014      	beq.n	8007c3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c16:	4a4e      	ldr	r2, [pc, #312]	; (8007d50 <I2C_Slave_STOPF+0x258>)
 8007c18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fde8 	bl	80057f4 <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	e000      	b.n	8007c3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d03e      	beq.n	8007cc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d112      	bne.n	8007c7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d112      	bne.n	8007cae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f043 0204 	orr.w	r2, r3, #4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f8b3 	bl	8007e38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007cd2:	e039      	b.n	8007d48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd8:	d109      	bne.n	8007cee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2228      	movs	r2, #40	; 0x28
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff f827 	bl	8006d3c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b28      	cmp	r3, #40	; 0x28
 8007cf8:	d111      	bne.n	8007d1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <I2C_Slave_STOPF+0x25c>)
 8007cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff f828 	bl	8006d6c <HAL_I2C_ListenCpltCallback>
}
 8007d1c:	e014      	b.n	8007d48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	2b22      	cmp	r3, #34	; 0x22
 8007d24:	d002      	beq.n	8007d2c <I2C_Slave_STOPF+0x234>
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b22      	cmp	r3, #34	; 0x22
 8007d2a:	d10d      	bne.n	8007d48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fe fffa 	bl	8006d3c <HAL_I2C_SlaveRxCpltCallback>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	080081a1 	.word	0x080081a1
 8007d54:	ffff0000 	.word	0xffff0000

08007d58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d002      	beq.n	8007d7a <I2C_Slave_AF+0x22>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d129      	bne.n	8007dce <I2C_Slave_AF+0x76>
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b28      	cmp	r3, #40	; 0x28
 8007d7e:	d126      	bne.n	8007dce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a2c      	ldr	r2, [pc, #176]	; (8007e34 <I2C_Slave_AF+0xdc>)
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe ffd0 	bl	8006d6c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007dcc:	e02e      	b.n	8007e2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b21      	cmp	r3, #33	; 0x21
 8007dd2:	d126      	bne.n	8007e22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <I2C_Slave_AF+0xdc>)
 8007dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2221      	movs	r2, #33	; 0x21
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fe ff84 	bl	8006d28 <HAL_I2C_SlaveTxCpltCallback>
}
 8007e20:	e004      	b.n	8007e2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e2a:	615a      	str	r2, [r3, #20]
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	ffff0000 	.word	0xffff0000

08007e38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b10      	cmp	r3, #16
 8007e54:	d002      	beq.n	8007e5c <I2C_ITError+0x24>
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b40      	cmp	r3, #64	; 0x40
 8007e5a:	d10a      	bne.n	8007e72 <I2C_ITError+0x3a>
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b22      	cmp	r3, #34	; 0x22
 8007e60:	d107      	bne.n	8007e72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e78:	2b28      	cmp	r3, #40	; 0x28
 8007e7a:	d107      	bne.n	8007e8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2228      	movs	r2, #40	; 0x28
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e8a:	e015      	b.n	8007eb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e9a:	d00a      	beq.n	8007eb2 <I2C_ITError+0x7a>
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b60      	cmp	r3, #96	; 0x60
 8007ea0:	d007      	beq.n	8007eb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec6:	d162      	bne.n	8007f8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ed6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d020      	beq.n	8007f28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	4a6a      	ldr	r2, [pc, #424]	; (8008094 <I2C_ITError+0x25c>)
 8007eec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd fc7e 	bl	80057f4 <HAL_DMA_Abort_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8089 	beq.w	8008012 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f22:	4610      	mov	r0, r2
 8007f24:	4798      	blx	r3
 8007f26:	e074      	b.n	8008012 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	4a59      	ldr	r2, [pc, #356]	; (8008094 <I2C_ITError+0x25c>)
 8007f2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fd fc5d 	bl	80057f4 <HAL_DMA_Abort_IT>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d068      	beq.n	8008012 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d10b      	bne.n	8007f66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	e041      	b.n	8008012 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b60      	cmp	r3, #96	; 0x60
 8007f98:	d125      	bne.n	8007fe6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d10b      	bne.n	8007fce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0201 	bic.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fe feec 	bl	8006dbc <HAL_I2C_AbortCpltCallback>
 8007fe4:	e015      	b.n	8008012 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff0:	2b40      	cmp	r3, #64	; 0x40
 8007ff2:	d10b      	bne.n	800800c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fe fecb 	bl	8006da8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10e      	bne.n	8008040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008032:	2b00      	cmp	r3, #0
 8008034:	d104      	bne.n	8008040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800804e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008056:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d113      	bne.n	800808c <I2C_ITError+0x254>
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b28      	cmp	r3, #40	; 0x28
 8008068:	d110      	bne.n	800808c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <I2C_ITError+0x260>)
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe fe70 	bl	8006d6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	080081a1 	.word	0x080081a1
 8008098:	ffff0000 	.word	0xffff0000

0800809c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	460b      	mov	r3, r1
 80080aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d006      	beq.n	80080c6 <I2C_MasterRequestWrite+0x2a>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d003      	beq.n	80080c6 <I2C_MasterRequestWrite+0x2a>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080c4:	d108      	bne.n	80080d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	e00b      	b.n	80080f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	2b12      	cmp	r3, #18
 80080de:	d107      	bne.n	80080f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f8f7 	bl	80082f0 <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008116:	d103      	bne.n	8008120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e035      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800812c:	d108      	bne.n	8008140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800812e:	897b      	ldrh	r3, [r7, #10]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800813c:	611a      	str	r2, [r3, #16]
 800813e:	e01b      	b.n	8008178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008140:	897b      	ldrh	r3, [r7, #10]
 8008142:	11db      	asrs	r3, r3, #7
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0306 	and.w	r3, r3, #6
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f063 030f 	orn	r3, r3, #15
 8008150:	b2da      	uxtb	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <I2C_MasterRequestWrite+0xfc>)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f91d 	bl	800839e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e010      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800816e:	897b      	ldrh	r3, [r7, #10]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4907      	ldr	r1, [pc, #28]	; (800819c <I2C_MasterRequestWrite+0x100>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f90d 	bl	800839e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	00010008 	.word	0x00010008
 800819c:	00010002 	.word	0x00010002

080081a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081ba:	4b4b      	ldr	r3, [pc, #300]	; (80082e8 <I2C_DMAAbort+0x148>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	08db      	lsrs	r3, r3, #3
 80081c0:	4a4a      	ldr	r2, [pc, #296]	; (80082ec <I2C_DMAAbort+0x14c>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	0a1a      	lsrs	r2, r3, #8
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f043 0220 	orr.w	r2, r3, #32
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80081e6:	e00a      	b.n	80081fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081fc:	d0ea      	beq.n	80081d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820a:	2200      	movs	r2, #0
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	2200      	movs	r2, #0
 800821c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2200      	movs	r2, #0
 8008232:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008240:	2200      	movs	r2, #0
 8008242:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	2200      	movs	r2, #0
 8008252:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0201 	bic.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b60      	cmp	r3, #96	; 0x60
 800826e:	d10e      	bne.n	800828e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2200      	movs	r2, #0
 8008284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008286:	6978      	ldr	r0, [r7, #20]
 8008288:	f7fe fd98 	bl	8006dbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800828c:	e027      	b.n	80082de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800828e:	7cfb      	ldrb	r3, [r7, #19]
 8008290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008294:	2b28      	cmp	r3, #40	; 0x28
 8008296:	d117      	bne.n	80082c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2228      	movs	r2, #40	; 0x28
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082c6:	e007      	b.n	80082d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80082d8:	6978      	ldr	r0, [r7, #20]
 80082da:	f7fe fd65 	bl	8006da8 <HAL_I2C_ErrorCallback>
}
 80082de:	bf00      	nop
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200000cc 	.word	0x200000cc
 80082ec:	14f8b589 	.word	0x14f8b589

080082f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008300:	e025      	b.n	800834e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d021      	beq.n	800834e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fc ffbb 	bl	8005284 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0220 	orr.w	r2, r3, #32
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e023      	b.n	8008396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10d      	bne.n	8008374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	43da      	mvns	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	e00c      	b.n	800838e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	43da      	mvns	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4013      	ands	r3, r2
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf0c      	ite	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	2300      	movne	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	429a      	cmp	r2, r3
 8008392:	d0b6      	beq.n	8008302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083ac:	e051      	b.n	8008452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083bc:	d123      	bne.n	8008406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	f043 0204 	orr.w	r2, r3, #4
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e046      	b.n	8008494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d021      	beq.n	8008452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840e:	f7fc ff39 	bl	8005284 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d302      	bcc.n	8008424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d116      	bne.n	8008452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f043 0220 	orr.w	r2, r3, #32
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e020      	b.n	8008494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	d10c      	bne.n	8008476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	43da      	mvns	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	bf14      	ite	ne
 800846e:	2301      	movne	r3, #1
 8008470:	2300      	moveq	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	e00b      	b.n	800848e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	43da      	mvns	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	4013      	ands	r3, r2
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf14      	ite	ne
 8008488:	2301      	movne	r3, #1
 800848a:	2300      	moveq	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d18d      	bne.n	80083ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084a8:	e02d      	b.n	8008506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f8aa 	bl	8008604 <I2C_IsAcknowledgeFailed>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e02d      	b.n	8008516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c0:	d021      	beq.n	8008506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c2:	f7fc fedf 	bl	8005284 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d302      	bcc.n	80084d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d116      	bne.n	8008506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	f043 0220 	orr.w	r2, r3, #32
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e007      	b.n	8008516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008510:	2b80      	cmp	r3, #128	; 0x80
 8008512:	d1ca      	bne.n	80084aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800852a:	e02d      	b.n	8008588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f869 	bl	8008604 <I2C_IsAcknowledgeFailed>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e02d      	b.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d021      	beq.n	8008588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008544:	f7fc fe9e 	bl	8005284 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d302      	bcc.n	800855a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d116      	bne.n	8008588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	f043 0220 	orr.w	r2, r3, #32
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e007      	b.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b04      	cmp	r3, #4
 8008594:	d1ca      	bne.n	800852c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80085ac:	4b13      	ldr	r3, [pc, #76]	; (80085fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	08db      	lsrs	r3, r3, #3
 80085b2:	4a13      	ldr	r2, [pc, #76]	; (8008600 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80085b4:	fba2 2303 	umull	r2, r3, r2, r3
 80085b8:	0a1a      	lsrs	r2, r3, #8
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d107      	bne.n	80085de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e008      	b.n	80085f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ec:	d0e9      	beq.n	80085c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	200000cc 	.word	0x200000cc
 8008600:	14f8b589 	.word	0x14f8b589

08008604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861a:	d11b      	bne.n	8008654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f043 0204 	orr.w	r2, r3, #4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008672:	d103      	bne.n	800867c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800867a:	e007      	b.n	800868c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008684:	d102      	bne.n	800868c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2208      	movs	r2, #8
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e267      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d075      	beq.n	80087a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086b6:	4b88      	ldr	r3, [pc, #544]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 030c 	and.w	r3, r3, #12
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d00c      	beq.n	80086dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086c2:	4b85      	ldr	r3, [pc, #532]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d112      	bne.n	80086f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ce:	4b82      	ldr	r3, [pc, #520]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086da:	d10b      	bne.n	80086f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086dc:	4b7e      	ldr	r3, [pc, #504]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d05b      	beq.n	80087a0 <HAL_RCC_OscConfig+0x108>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d157      	bne.n	80087a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e242      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fc:	d106      	bne.n	800870c <HAL_RCC_OscConfig+0x74>
 80086fe:	4b76      	ldr	r3, [pc, #472]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a75      	ldr	r2, [pc, #468]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	e01d      	b.n	8008748 <HAL_RCC_OscConfig+0xb0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008714:	d10c      	bne.n	8008730 <HAL_RCC_OscConfig+0x98>
 8008716:	4b70      	ldr	r3, [pc, #448]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a6f      	ldr	r2, [pc, #444]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 800871c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	4b6d      	ldr	r3, [pc, #436]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6c      	ldr	r2, [pc, #432]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	e00b      	b.n	8008748 <HAL_RCC_OscConfig+0xb0>
 8008730:	4b69      	ldr	r3, [pc, #420]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a68      	ldr	r2, [pc, #416]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4b66      	ldr	r3, [pc, #408]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a65      	ldr	r2, [pc, #404]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d013      	beq.n	8008778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008750:	f7fc fd98 	bl	8005284 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008758:	f7fc fd94 	bl	8005284 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b64      	cmp	r3, #100	; 0x64
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e207      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800876a:	4b5b      	ldr	r3, [pc, #364]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0xc0>
 8008776:	e014      	b.n	80087a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7fc fd84 	bl	8005284 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008780:	f7fc fd80 	bl	8005284 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b64      	cmp	r3, #100	; 0x64
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e1f3      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008792:	4b51      	ldr	r3, [pc, #324]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f0      	bne.n	8008780 <HAL_RCC_OscConfig+0xe8>
 800879e:	e000      	b.n	80087a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d063      	beq.n	8008876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ae:	4b4a      	ldr	r3, [pc, #296]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00b      	beq.n	80087d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087ba:	4b47      	ldr	r3, [pc, #284]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d11c      	bne.n	8008800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c6:	4b44      	ldr	r3, [pc, #272]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d116      	bne.n	8008800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087d2:	4b41      	ldr	r3, [pc, #260]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_RCC_OscConfig+0x152>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e1c7      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ea:	4b3b      	ldr	r3, [pc, #236]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4937      	ldr	r1, [pc, #220]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087fe:	e03a      	b.n	8008876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d020      	beq.n	800884a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008808:	4b34      	ldr	r3, [pc, #208]	; (80088dc <HAL_RCC_OscConfig+0x244>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fc fd39 	bl	8005284 <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008816:	f7fc fd35 	bl	8005284 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1a8      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008828:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008834:	4b28      	ldr	r3, [pc, #160]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	4925      	ldr	r1, [pc, #148]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008844:	4313      	orrs	r3, r2
 8008846:	600b      	str	r3, [r1, #0]
 8008848:	e015      	b.n	8008876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <HAL_RCC_OscConfig+0x244>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fc fd18 	bl	8005284 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008858:	f7fc fd14 	bl	8005284 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e187      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800886a:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d036      	beq.n	80088f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d016      	beq.n	80088b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800888a:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <HAL_RCC_OscConfig+0x248>)
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008890:	f7fc fcf8 	bl	8005284 <HAL_GetTick>
 8008894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008898:	f7fc fcf4 	bl	8005284 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e167      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <HAL_RCC_OscConfig+0x240>)
 80088ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f0      	beq.n	8008898 <HAL_RCC_OscConfig+0x200>
 80088b6:	e01b      	b.n	80088f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088b8:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <HAL_RCC_OscConfig+0x248>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088be:	f7fc fce1 	bl	8005284 <HAL_GetTick>
 80088c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c4:	e00e      	b.n	80088e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088c6:	f7fc fcdd 	bl	8005284 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d907      	bls.n	80088e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e150      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
 80088d8:	40023800 	.word	0x40023800
 80088dc:	42470000 	.word	0x42470000
 80088e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e4:	4b88      	ldr	r3, [pc, #544]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80088e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ea      	bne.n	80088c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8097 	beq.w	8008a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008902:	4b81      	ldr	r3, [pc, #516]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10f      	bne.n	800892e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	4b7d      	ldr	r3, [pc, #500]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	4a7c      	ldr	r2, [pc, #496]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800891c:	6413      	str	r3, [r2, #64]	; 0x40
 800891e:	4b7a      	ldr	r3, [pc, #488]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892e:	4b77      	ldr	r3, [pc, #476]	; (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d118      	bne.n	800896c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800893a:	4b74      	ldr	r3, [pc, #464]	; (8008b0c <HAL_RCC_OscConfig+0x474>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a73      	ldr	r2, [pc, #460]	; (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008946:	f7fc fc9d 	bl	8005284 <HAL_GetTick>
 800894a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800894e:	f7fc fc99 	bl	8005284 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e10c      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008960:	4b6a      	ldr	r3, [pc, #424]	; (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0f0      	beq.n	800894e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d106      	bne.n	8008982 <HAL_RCC_OscConfig+0x2ea>
 8008974:	4b64      	ldr	r3, [pc, #400]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008978:	4a63      	ldr	r2, [pc, #396]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6713      	str	r3, [r2, #112]	; 0x70
 8008980:	e01c      	b.n	80089bc <HAL_RCC_OscConfig+0x324>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b05      	cmp	r3, #5
 8008988:	d10c      	bne.n	80089a4 <HAL_RCC_OscConfig+0x30c>
 800898a:	4b5f      	ldr	r3, [pc, #380]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a5e      	ldr	r2, [pc, #376]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008990:	f043 0304 	orr.w	r3, r3, #4
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
 8008996:	4b5c      	ldr	r3, [pc, #368]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a5b      	ldr	r2, [pc, #364]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	e00b      	b.n	80089bc <HAL_RCC_OscConfig+0x324>
 80089a4:	4b58      	ldr	r3, [pc, #352]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	4a57      	ldr	r2, [pc, #348]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	6713      	str	r3, [r2, #112]	; 0x70
 80089b0:	4b55      	ldr	r3, [pc, #340]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b4:	4a54      	ldr	r2, [pc, #336]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089b6:	f023 0304 	bic.w	r3, r3, #4
 80089ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d015      	beq.n	80089f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c4:	f7fc fc5e 	bl	8005284 <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ca:	e00a      	b.n	80089e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089cc:	f7fc fc5a 	bl	8005284 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089da:	4293      	cmp	r3, r2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e0cb      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e2:	4b49      	ldr	r3, [pc, #292]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ee      	beq.n	80089cc <HAL_RCC_OscConfig+0x334>
 80089ee:	e014      	b.n	8008a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f0:	f7fc fc48 	bl	8005284 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089f8:	f7fc fc44 	bl	8005284 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e0b5      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a0e:	4b3e      	ldr	r3, [pc, #248]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1ee      	bne.n	80089f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d105      	bne.n	8008a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a20:	4b39      	ldr	r3, [pc, #228]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	4a38      	ldr	r2, [pc, #224]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80a1 	beq.w	8008b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a36:	4b34      	ldr	r3, [pc, #208]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 030c 	and.w	r3, r3, #12
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d05c      	beq.n	8008afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d141      	bne.n	8008ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a4a:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a50:	f7fc fc18 	bl	8005284 <HAL_GetTick>
 8008a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a58:	f7fc fc14 	bl	8005284 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e087      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a6a:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f0      	bne.n	8008a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69da      	ldr	r2, [r3, #28]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	019b      	lsls	r3, r3, #6
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	061b      	lsls	r3, r3, #24
 8008a9a:	491b      	ldr	r1, [pc, #108]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa6:	f7fc fbed 	bl	8005284 <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aae:	f7fc fbe9 	bl	8005284 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e05c      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac0:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0f0      	beq.n	8008aae <HAL_RCC_OscConfig+0x416>
 8008acc:	e054      	b.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ace:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad4:	f7fc fbd6 	bl	8005284 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fc fbd2 	bl	8005284 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e045      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x444>
 8008afa:	e03d      	b.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d107      	bne.n	8008b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e038      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	40007000 	.word	0x40007000
 8008b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b14:	4b1b      	ldr	r3, [pc, #108]	; (8008b84 <HAL_RCC_OscConfig+0x4ec>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d028      	beq.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d121      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d11a      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d111      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d107      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d001      	beq.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40023800 	.word	0x40023800

08008b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0cc      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b9c:	4b68      	ldr	r3, [pc, #416]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d90c      	bls.n	8008bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008baa:	4b65      	ldr	r3, [pc, #404]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b63      	ldr	r3, [pc, #396]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0b8      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bdc:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	4a58      	ldr	r2, [pc, #352]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bf4:	4b53      	ldr	r3, [pc, #332]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	4a52      	ldr	r2, [pc, #328]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c00:	4b50      	ldr	r3, [pc, #320]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	494d      	ldr	r1, [pc, #308]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d044      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d107      	bne.n	8008c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d119      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e07f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d107      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c46:	4b3f      	ldr	r3, [pc, #252]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d109      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e06f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c56:	4b3b      	ldr	r3, [pc, #236]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e067      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c66:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 0203 	bic.w	r2, r3, #3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	4934      	ldr	r1, [pc, #208]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c78:	f7fc fb04 	bl	8005284 <HAL_GetTick>
 8008c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c7e:	e00a      	b.n	8008c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c80:	f7fc fb00 	bl	8005284 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e04f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c96:	4b2b      	ldr	r3, [pc, #172]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 020c 	and.w	r2, r3, #12
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d1eb      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca8:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d20c      	bcs.n	8008cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb6:	4b22      	ldr	r3, [pc, #136]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b20      	ldr	r3, [pc, #128]	; (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e032      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4916      	ldr	r1, [pc, #88]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	490e      	ldr	r1, [pc, #56]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d0e:	f000 f821 	bl	8008d54 <HAL_RCC_GetSysClockFreq>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	091b      	lsrs	r3, r3, #4
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	490a      	ldr	r1, [pc, #40]	; (8008d48 <HAL_RCC_ClockConfig+0x1c0>)
 8008d20:	5ccb      	ldrb	r3, [r1, r3]
 8008d22:	fa22 f303 	lsr.w	r3, r2, r3
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <HAL_RCC_ClockConfig+0x1c4>)
 8008d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <HAL_RCC_ClockConfig+0x1c8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fc fa64 	bl	80051fc <HAL_InitTick>

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40023c00 	.word	0x40023c00
 8008d44:	40023800 	.word	0x40023800
 8008d48:	0800cbb0 	.word	0x0800cbb0
 8008d4c:	200000cc 	.word	0x200000cc
 8008d50:	200000d0 	.word	0x200000d0

08008d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d58:	b094      	sub	sp, #80	; 0x50
 8008d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d60:	2300      	movs	r3, #0
 8008d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d64:	2300      	movs	r3, #0
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6c:	4b79      	ldr	r3, [pc, #484]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 030c 	and.w	r3, r3, #12
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d00d      	beq.n	8008d94 <HAL_RCC_GetSysClockFreq+0x40>
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	f200 80e1 	bhi.w	8008f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0x34>
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d003      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d86:	e0db      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d88:	4b73      	ldr	r3, [pc, #460]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d8c:	e0db      	b.n	8008f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d8e:	4b73      	ldr	r3, [pc, #460]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8008d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d92:	e0d8      	b.n	8008f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d94:	4b6f      	ldr	r3, [pc, #444]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d9e:	4b6d      	ldr	r3, [pc, #436]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d063      	beq.n	8008e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008daa:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	099b      	lsrs	r3, r3, #6
 8008db0:	2200      	movs	r2, #0
 8008db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	462b      	mov	r3, r5
 8008dca:	f04f 0000 	mov.w	r0, #0
 8008dce:	f04f 0100 	mov.w	r1, #0
 8008dd2:	0159      	lsls	r1, r3, #5
 8008dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dd8:	0150      	lsls	r0, r2, #5
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4621      	mov	r1, r4
 8008de0:	1a51      	subs	r1, r2, r1
 8008de2:	6139      	str	r1, [r7, #16]
 8008de4:	4629      	mov	r1, r5
 8008de6:	eb63 0301 	sbc.w	r3, r3, r1
 8008dea:	617b      	str	r3, [r7, #20]
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	f04f 0300 	mov.w	r3, #0
 8008df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008df8:	4659      	mov	r1, fp
 8008dfa:	018b      	lsls	r3, r1, #6
 8008dfc:	4651      	mov	r1, sl
 8008dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e02:	4651      	mov	r1, sl
 8008e04:	018a      	lsls	r2, r1, #6
 8008e06:	4651      	mov	r1, sl
 8008e08:	ebb2 0801 	subs.w	r8, r2, r1
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	f04f 0300 	mov.w	r3, #0
 8008e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e26:	4690      	mov	r8, r2
 8008e28:	4699      	mov	r9, r3
 8008e2a:	4623      	mov	r3, r4
 8008e2c:	eb18 0303 	adds.w	r3, r8, r3
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	462b      	mov	r3, r5
 8008e34:	eb49 0303 	adc.w	r3, r9, r3
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e46:	4629      	mov	r1, r5
 8008e48:	024b      	lsls	r3, r1, #9
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e50:	4621      	mov	r1, r4
 8008e52:	024a      	lsls	r2, r1, #9
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e64:	f7f7 fe94 	bl	8000b90 <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e70:	e058      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e72:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e82:	623b      	str	r3, [r7, #32]
 8008e84:	2300      	movs	r3, #0
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
 8008e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	464b      	mov	r3, r9
 8008e90:	f04f 0000 	mov.w	r0, #0
 8008e94:	f04f 0100 	mov.w	r1, #0
 8008e98:	0159      	lsls	r1, r3, #5
 8008e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e9e:	0150      	lsls	r0, r2, #5
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008eaa:	4649      	mov	r1, r9
 8008eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8008ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	00eb      	lsls	r3, r5, #3
 8008ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eda:	00e2      	lsls	r2, r4, #3
 8008edc:	4614      	mov	r4, r2
 8008ede:	461d      	mov	r5, r3
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	18e3      	adds	r3, r4, r3
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	eb45 0303 	adc.w	r3, r5, r3
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008efa:	4629      	mov	r1, r5
 8008efc:	028b      	lsls	r3, r1, #10
 8008efe:	4621      	mov	r1, r4
 8008f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f04:	4621      	mov	r1, r4
 8008f06:	028a      	lsls	r2, r1, #10
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0e:	2200      	movs	r2, #0
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	61fa      	str	r2, [r7, #28]
 8008f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f18:	f7f7 fe3a 	bl	8000b90 <__aeabi_uldivmod>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4613      	mov	r3, r2
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	3301      	adds	r3, #1
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f3e:	e002      	b.n	8008f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3750      	adds	r7, #80	; 0x50
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800
 8008f58:	00f42400 	.word	0x00f42400
 8008f5c:	007a1200 	.word	0x007a1200

08008f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f66:	681b      	ldr	r3, [r3, #0]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	200000cc 	.word	0x200000cc

08008f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f7c:	f7ff fff0 	bl	8008f60 <HAL_RCC_GetHCLKFreq>
 8008f80:	4602      	mov	r2, r0
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	0a9b      	lsrs	r3, r3, #10
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	4903      	ldr	r1, [pc, #12]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f8e:	5ccb      	ldrb	r3, [r1, r3]
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	0800cbc0 	.word	0x0800cbc0

08008fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fa4:	f7ff ffdc 	bl	8008f60 <HAL_RCC_GetHCLKFreq>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	0b5b      	lsrs	r3, r3, #13
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	4903      	ldr	r1, [pc, #12]	; (8008fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fb6:	5ccb      	ldrb	r3, [r1, r3]
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	40023800 	.word	0x40023800
 8008fc4:	0800cbc0 	.word	0x0800cbc0

08008fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e041      	b.n	800905e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fb fe86 	bl	8004d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f000 fde2 	bl	8009bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	d001      	beq.n	8009080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e03c      	b.n	80090fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1e      	ldr	r2, [pc, #120]	; (8009108 <HAL_TIM_Base_Start+0xa0>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d018      	beq.n	80090c4 <HAL_TIM_Base_Start+0x5c>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909a:	d013      	beq.n	80090c4 <HAL_TIM_Base_Start+0x5c>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a1a      	ldr	r2, [pc, #104]	; (800910c <HAL_TIM_Base_Start+0xa4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00e      	beq.n	80090c4 <HAL_TIM_Base_Start+0x5c>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a19      	ldr	r2, [pc, #100]	; (8009110 <HAL_TIM_Base_Start+0xa8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d009      	beq.n	80090c4 <HAL_TIM_Base_Start+0x5c>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a17      	ldr	r2, [pc, #92]	; (8009114 <HAL_TIM_Base_Start+0xac>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <HAL_TIM_Base_Start+0x5c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a16      	ldr	r2, [pc, #88]	; (8009118 <HAL_TIM_Base_Start+0xb0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d111      	bne.n	80090e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b06      	cmp	r3, #6
 80090d4:	d010      	beq.n	80090f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0201 	orr.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	e007      	b.n	80090f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40010000 	.word	0x40010000
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	40000c00 	.word	0x40000c00
 8009118:	40014000 	.word	0x40014000

0800911c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b01      	cmp	r3, #1
 800912e:	d001      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e044      	b.n	80091be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <HAL_TIM_Base_Start_IT+0xb0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d018      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x6c>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915e:	d013      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x6c>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00e      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x6c>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x6c>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x6c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a16      	ldr	r2, [pc, #88]	; (80091dc <HAL_TIM_Base_Start_IT+0xc0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d111      	bne.n	80091ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0307 	and.w	r3, r3, #7
 8009192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b06      	cmp	r3, #6
 8009198:	d010      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f042 0201 	orr.w	r2, r2, #1
 80091a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091aa:	e007      	b.n	80091bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40014000 	.word	0x40014000

080091e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e041      	b.n	8009276 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f839 	bl	800927e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f000 fcd6 	bl	8009bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d109      	bne.n	80092b8 <HAL_TIM_PWM_Start+0x24>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	bf14      	ite	ne
 80092b0:	2301      	movne	r3, #1
 80092b2:	2300      	moveq	r3, #0
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	e022      	b.n	80092fe <HAL_TIM_PWM_Start+0x6a>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d109      	bne.n	80092d2 <HAL_TIM_PWM_Start+0x3e>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	e015      	b.n	80092fe <HAL_TIM_PWM_Start+0x6a>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d109      	bne.n	80092ec <HAL_TIM_PWM_Start+0x58>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	bf14      	ite	ne
 80092e4:	2301      	movne	r3, #1
 80092e6:	2300      	moveq	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	e008      	b.n	80092fe <HAL_TIM_PWM_Start+0x6a>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	bf14      	ite	ne
 80092f8:	2301      	movne	r3, #1
 80092fa:	2300      	moveq	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e068      	b.n	80093d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Start+0x82>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009314:	e013      	b.n	800933e <HAL_TIM_PWM_Start+0xaa>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b04      	cmp	r3, #4
 800931a:	d104      	bne.n	8009326 <HAL_TIM_PWM_Start+0x92>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009324:	e00b      	b.n	800933e <HAL_TIM_PWM_Start+0xaa>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b08      	cmp	r3, #8
 800932a:	d104      	bne.n	8009336 <HAL_TIM_PWM_Start+0xa2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009334:	e003      	b.n	800933e <HAL_TIM_PWM_Start+0xaa>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2202      	movs	r2, #2
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2201      	movs	r2, #1
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fee8 	bl	800a11c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a23      	ldr	r2, [pc, #140]	; (80093e0 <HAL_TIM_PWM_Start+0x14c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d107      	bne.n	8009366 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1d      	ldr	r2, [pc, #116]	; (80093e0 <HAL_TIM_PWM_Start+0x14c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d018      	beq.n	80093a2 <HAL_TIM_PWM_Start+0x10e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009378:	d013      	beq.n	80093a2 <HAL_TIM_PWM_Start+0x10e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a19      	ldr	r2, [pc, #100]	; (80093e4 <HAL_TIM_PWM_Start+0x150>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00e      	beq.n	80093a2 <HAL_TIM_PWM_Start+0x10e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a17      	ldr	r2, [pc, #92]	; (80093e8 <HAL_TIM_PWM_Start+0x154>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d009      	beq.n	80093a2 <HAL_TIM_PWM_Start+0x10e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a16      	ldr	r2, [pc, #88]	; (80093ec <HAL_TIM_PWM_Start+0x158>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d004      	beq.n	80093a2 <HAL_TIM_PWM_Start+0x10e>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a14      	ldr	r2, [pc, #80]	; (80093f0 <HAL_TIM_PWM_Start+0x15c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d111      	bne.n	80093c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b06      	cmp	r3, #6
 80093b2:	d010      	beq.n	80093d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c4:	e007      	b.n	80093d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f042 0201 	orr.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40010000 	.word	0x40010000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40014000 	.word	0x40014000

080093f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e097      	b.n	8009538 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d106      	bne.n	8009422 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7fb fcd3 	bl	8004dc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009438:	f023 0307 	bic.w	r3, r3, #7
 800943c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3304      	adds	r3, #4
 8009446:	4619      	mov	r1, r3
 8009448:	4610      	mov	r0, r2
 800944a:	f000 fbc1 	bl	8009bd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	4313      	orrs	r3, r2
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	4313      	orrs	r3, r2
 800948c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009494:	f023 030c 	bic.w	r3, r3, #12
 8009498:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	4313      	orrs	r3, r2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	011a      	lsls	r2, r3, #4
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	031b      	lsls	r3, r3, #12
 80094c4:	4313      	orrs	r3, r2
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	4313      	orrs	r3, r2
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009550:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009558:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009560:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009568:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d102      	bne.n	800957c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009576:	7b7b      	ldrb	r3, [r7, #13]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e069      	b.n	8009654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009590:	e031      	b.n	80095f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b04      	cmp	r3, #4
 8009596:	d110      	bne.n	80095ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800959e:	7b3b      	ldrb	r3, [r7, #12]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d001      	beq.n	80095a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e055      	b.n	8009654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095b8:	e01d      	b.n	80095f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d108      	bne.n	80095d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095c6:	7b7b      	ldrb	r3, [r7, #13]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d102      	bne.n	80095d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095cc:	7b3b      	ldrb	r3, [r7, #12]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d001      	beq.n	80095d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e03e      	b.n	8009654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2202      	movs	r2, #2
 80095da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2202      	movs	r2, #2
 80095e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2202      	movs	r2, #2
 80095ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2202      	movs	r2, #2
 80095f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_TIM_Encoder_Start+0xc4>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d008      	beq.n	8009614 <HAL_TIM_Encoder_Start+0xd4>
 8009602:	e00f      	b.n	8009624 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2201      	movs	r2, #1
 800960a:	2100      	movs	r1, #0
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fd85 	bl	800a11c <TIM_CCxChannelCmd>
      break;
 8009612:	e016      	b.n	8009642 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2201      	movs	r2, #1
 800961a:	2104      	movs	r1, #4
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fd7d 	bl	800a11c <TIM_CCxChannelCmd>
      break;
 8009622:	e00e      	b.n	8009642 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2201      	movs	r2, #1
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fd75 	bl	800a11c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2201      	movs	r2, #1
 8009638:	2104      	movs	r1, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fd6e 	bl	800a11c <TIM_CCxChannelCmd>
      break;
 8009640:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0201 	orr.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b02      	cmp	r3, #2
 8009670:	d122      	bne.n	80096b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b02      	cmp	r3, #2
 800967e:	d11b      	bne.n	80096b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f06f 0202 	mvn.w	r2, #2
 8009688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa77 	bl	8009b92 <HAL_TIM_IC_CaptureCallback>
 80096a4:	e005      	b.n	80096b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa69 	bl	8009b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa7a 	bl	8009ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d122      	bne.n	800970c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d11b      	bne.n	800970c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f06f 0204 	mvn.w	r2, #4
 80096dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2202      	movs	r2, #2
 80096e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa4d 	bl	8009b92 <HAL_TIM_IC_CaptureCallback>
 80096f8:	e005      	b.n	8009706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa3f 	bl	8009b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa50 	bl	8009ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b08      	cmp	r3, #8
 8009718:	d122      	bne.n	8009760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b08      	cmp	r3, #8
 8009726:	d11b      	bne.n	8009760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f06f 0208 	mvn.w	r2, #8
 8009730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2204      	movs	r2, #4
 8009736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f003 0303 	and.w	r3, r3, #3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa23 	bl	8009b92 <HAL_TIM_IC_CaptureCallback>
 800974c:	e005      	b.n	800975a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa15 	bl	8009b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fa26 	bl	8009ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b10      	cmp	r3, #16
 800976c:	d122      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b10      	cmp	r3, #16
 800977a:	d11b      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f06f 0210 	mvn.w	r2, #16
 8009784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2208      	movs	r2, #8
 800978a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9f9 	bl	8009b92 <HAL_TIM_IC_CaptureCallback>
 80097a0:	e005      	b.n	80097ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9eb 	bl	8009b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9fc 	bl	8009ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d10e      	bne.n	80097e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d107      	bne.n	80097e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0201 	mvn.w	r2, #1
 80097d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7f8 f8d8 	bl	8001990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d10e      	bne.n	800980c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f8:	2b80      	cmp	r3, #128	; 0x80
 80097fa:	d107      	bne.n	800980c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fd78 	bl	800a2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	d10e      	bne.n	8009838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009824:	2b40      	cmp	r3, #64	; 0x40
 8009826:	d107      	bne.n	8009838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f9c1 	bl	8009bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f003 0320 	and.w	r3, r3, #32
 8009842:	2b20      	cmp	r3, #32
 8009844:	d10e      	bne.n	8009864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b20      	cmp	r3, #32
 8009852:	d107      	bne.n	8009864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0220 	mvn.w	r2, #32
 800985c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fd42 	bl	800a2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009886:	2302      	movs	r3, #2
 8009888:	e0ae      	b.n	80099e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b0c      	cmp	r3, #12
 8009896:	f200 809f 	bhi.w	80099d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800989a:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098d5 	.word	0x080098d5
 80098a4:	080099d9 	.word	0x080099d9
 80098a8:	080099d9 	.word	0x080099d9
 80098ac:	080099d9 	.word	0x080099d9
 80098b0:	08009915 	.word	0x08009915
 80098b4:	080099d9 	.word	0x080099d9
 80098b8:	080099d9 	.word	0x080099d9
 80098bc:	080099d9 	.word	0x080099d9
 80098c0:	08009957 	.word	0x08009957
 80098c4:	080099d9 	.word	0x080099d9
 80098c8:	080099d9 	.word	0x080099d9
 80098cc:	080099d9 	.word	0x080099d9
 80098d0:	08009997 	.word	0x08009997
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f9f8 	bl	8009cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699a      	ldr	r2, [r3, #24]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 0208 	orr.w	r2, r2, #8
 80098ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0204 	bic.w	r2, r2, #4
 80098fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6999      	ldr	r1, [r3, #24]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	619a      	str	r2, [r3, #24]
      break;
 8009912:	e064      	b.n	80099de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fa3e 	bl	8009d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6999      	ldr	r1, [r3, #24]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	021a      	lsls	r2, r3, #8
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	619a      	str	r2, [r3, #24]
      break;
 8009954:	e043      	b.n	80099de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fa89 	bl	8009e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69da      	ldr	r2, [r3, #28]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f042 0208 	orr.w	r2, r2, #8
 8009970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0204 	bic.w	r2, r2, #4
 8009980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69d9      	ldr	r1, [r3, #28]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	61da      	str	r2, [r3, #28]
      break;
 8009994:	e023      	b.n	80099de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fad3 	bl	8009f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69da      	ldr	r2, [r3, #28]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69da      	ldr	r2, [r3, #28]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	69d9      	ldr	r1, [r3, #28]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	021a      	lsls	r2, r3, #8
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	61da      	str	r2, [r3, #28]
      break;
 80099d6:	e002      	b.n	80099de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
      break;
 80099dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e0b4      	b.n	8009b76 <HAL_TIM_ConfigClockSource+0x186>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a44:	d03e      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8009a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a4a:	f200 8087 	bhi.w	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a52:	f000 8086 	beq.w	8009b62 <HAL_TIM_ConfigClockSource+0x172>
 8009a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5a:	d87f      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a5c:	2b70      	cmp	r3, #112	; 0x70
 8009a5e:	d01a      	beq.n	8009a96 <HAL_TIM_ConfigClockSource+0xa6>
 8009a60:	2b70      	cmp	r3, #112	; 0x70
 8009a62:	d87b      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a64:	2b60      	cmp	r3, #96	; 0x60
 8009a66:	d050      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x11a>
 8009a68:	2b60      	cmp	r3, #96	; 0x60
 8009a6a:	d877      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a6c:	2b50      	cmp	r3, #80	; 0x50
 8009a6e:	d03c      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0xfa>
 8009a70:	2b50      	cmp	r3, #80	; 0x50
 8009a72:	d873      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d058      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x13a>
 8009a78:	2b40      	cmp	r3, #64	; 0x40
 8009a7a:	d86f      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a7c:	2b30      	cmp	r3, #48	; 0x30
 8009a7e:	d064      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0x15a>
 8009a80:	2b30      	cmp	r3, #48	; 0x30
 8009a82:	d86b      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	d060      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0x15a>
 8009a88:	2b20      	cmp	r3, #32
 8009a8a:	d867      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d05c      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0x15a>
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d05a      	beq.n	8009b4a <HAL_TIM_ConfigClockSource+0x15a>
 8009a94:	e062      	b.n	8009b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	6899      	ldr	r1, [r3, #8]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f000 fb19 	bl	800a0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	609a      	str	r2, [r3, #8]
      break;
 8009ac2:	e04f      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	6899      	ldr	r1, [r3, #8]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f000 fb02 	bl	800a0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ae6:	609a      	str	r2, [r3, #8]
      break;
 8009ae8:	e03c      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fa76 	bl	8009fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2150      	movs	r1, #80	; 0x50
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 facf 	bl	800a0a6 <TIM_ITRx_SetConfig>
      break;
 8009b08:	e02c      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	6859      	ldr	r1, [r3, #4]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f000 fa95 	bl	800a046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2160      	movs	r1, #96	; 0x60
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fabf 	bl	800a0a6 <TIM_ITRx_SetConfig>
      break;
 8009b28:	e01c      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6818      	ldr	r0, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6859      	ldr	r1, [r3, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f000 fa56 	bl	8009fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2140      	movs	r1, #64	; 0x40
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 faaf 	bl	800a0a6 <TIM_ITRx_SetConfig>
      break;
 8009b48:	e00c      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f000 faa6 	bl	800a0a6 <TIM_ITRx_SetConfig>
      break;
 8009b5a:	e003      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b60:	e000      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
	...

08009bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a34      	ldr	r2, [pc, #208]	; (8009cb4 <TIM_Base_SetConfig+0xe4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00f      	beq.n	8009c08 <TIM_Base_SetConfig+0x38>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bee:	d00b      	beq.n	8009c08 <TIM_Base_SetConfig+0x38>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a31      	ldr	r2, [pc, #196]	; (8009cb8 <TIM_Base_SetConfig+0xe8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d007      	beq.n	8009c08 <TIM_Base_SetConfig+0x38>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a30      	ldr	r2, [pc, #192]	; (8009cbc <TIM_Base_SetConfig+0xec>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_Base_SetConfig+0x38>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a2f      	ldr	r2, [pc, #188]	; (8009cc0 <TIM_Base_SetConfig+0xf0>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d108      	bne.n	8009c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a25      	ldr	r2, [pc, #148]	; (8009cb4 <TIM_Base_SetConfig+0xe4>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01b      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c28:	d017      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a22      	ldr	r2, [pc, #136]	; (8009cb8 <TIM_Base_SetConfig+0xe8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a21      	ldr	r2, [pc, #132]	; (8009cbc <TIM_Base_SetConfig+0xec>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d00f      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a20      	ldr	r2, [pc, #128]	; (8009cc0 <TIM_Base_SetConfig+0xf0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00b      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1f      	ldr	r2, [pc, #124]	; (8009cc4 <TIM_Base_SetConfig+0xf4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d007      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1e      	ldr	r2, [pc, #120]	; (8009cc8 <TIM_Base_SetConfig+0xf8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <TIM_Base_SetConfig+0x8a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <TIM_Base_SetConfig+0xfc>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d108      	bne.n	8009c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a08      	ldr	r2, [pc, #32]	; (8009cb4 <TIM_Base_SetConfig+0xe4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d103      	bne.n	8009ca0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	615a      	str	r2, [r3, #20]
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40014000 	.word	0x40014000
 8009cc8:	40014400 	.word	0x40014400
 8009ccc:	40014800 	.word	0x40014800

08009cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	f023 0201 	bic.w	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f023 0302 	bic.w	r3, r3, #2
 8009d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1c      	ldr	r2, [pc, #112]	; (8009d98 <TIM_OC1_SetConfig+0xc8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d10c      	bne.n	8009d46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f023 0308 	bic.w	r3, r3, #8
 8009d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f023 0304 	bic.w	r3, r3, #4
 8009d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a13      	ldr	r2, [pc, #76]	; (8009d98 <TIM_OC1_SetConfig+0xc8>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d111      	bne.n	8009d72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	621a      	str	r2, [r3, #32]
}
 8009d8c:	bf00      	nop
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	40010000 	.word	0x40010000

08009d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	f023 0210 	bic.w	r2, r3, #16
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	021b      	lsls	r3, r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0320 	bic.w	r3, r3, #32
 8009de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a1e      	ldr	r2, [pc, #120]	; (8009e70 <TIM_OC2_SetConfig+0xd4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d10d      	bne.n	8009e18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <TIM_OC2_SetConfig+0xd4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d113      	bne.n	8009e48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	621a      	str	r2, [r3, #32]
}
 8009e62:	bf00      	nop
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40010000 	.word	0x40010000

08009e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0303 	bic.w	r3, r3, #3
 8009eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <TIM_OC3_SetConfig+0xd0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d10d      	bne.n	8009eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	021b      	lsls	r3, r3, #8
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a14      	ldr	r2, [pc, #80]	; (8009f44 <TIM_OC3_SetConfig+0xd0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d113      	bne.n	8009f1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	621a      	str	r2, [r3, #32]
}
 8009f38:	bf00      	nop
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	40010000 	.word	0x40010000

08009f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	031b      	lsls	r3, r3, #12
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a10      	ldr	r2, [pc, #64]	; (8009fe4 <TIM_OC4_SetConfig+0x9c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d109      	bne.n	8009fbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	019b      	lsls	r3, r3, #6
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40010000 	.word	0x40010000

08009fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0201 	bic.w	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f023 030a 	bic.w	r3, r3, #10
 800a024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	621a      	str	r2, [r3, #32]
}
 800a03a:	bf00      	nop
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a046:	b480      	push	{r7}
 800a048:	b087      	sub	sp, #28
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0210 	bic.w	r2, r3, #16
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	031b      	lsls	r3, r3, #12
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	f043 0307 	orr.w	r3, r3, #7
 800a0c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	609a      	str	r2, [r3, #8]
}
 800a0d0:	bf00      	nop
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	021a      	lsls	r2, r3, #8
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	431a      	orrs	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4313      	orrs	r3, r2
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	4313      	orrs	r3, r2
 800a108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	609a      	str	r2, [r3, #8]
}
 800a110:	bf00      	nop
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f003 031f 	and.w	r3, r3, #31
 800a12e:	2201      	movs	r2, #1
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1a      	ldr	r2, [r3, #32]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	43db      	mvns	r3, r3
 800a13e:	401a      	ands	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a1a      	ldr	r2, [r3, #32]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f003 031f 	and.w	r3, r3, #31
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	fa01 f303 	lsl.w	r3, r1, r3
 800a154:	431a      	orrs	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e050      	b.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1c      	ldr	r2, [pc, #112]	; (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d018      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1cc:	d013      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a18      	ldr	r2, [pc, #96]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00e      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a16      	ldr	r2, [pc, #88]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d009      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a15      	ldr	r2, [pc, #84]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d004      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d10c      	bne.n	800a210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	4313      	orrs	r3, r2
 800a206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000
 800a234:	40000400 	.word	0x40000400
 800a238:	40000800 	.word	0x40000800
 800a23c:	40000c00 	.word	0x40000c00
 800a240:	40014000 	.word	0x40014000

0800a244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e03d      	b.n	800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e03f      	b.n	800a3a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fa fdc8 	bl	8004ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2224      	movs	r2, #36	; 0x24
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 ffd7 	bl	800b308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	695a      	ldr	r2, [r3, #20]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08c      	sub	sp, #48	; 0x30
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	d165      	bne.n	800a492 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_UART_Transmit_DMA+0x26>
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e05e      	b.n	800a494 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <HAL_UART_Transmit_DMA+0x38>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e057      	b.n	800a494 <HAL_UART_Transmit_DMA+0xe8>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2221      	movs	r2, #33	; 0x21
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	4a22      	ldr	r2, [pc, #136]	; (800a49c <HAL_UART_Transmit_DMA+0xf0>)
 800a412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	4a21      	ldr	r2, [pc, #132]	; (800a4a0 <HAL_UART_Transmit_DMA+0xf4>)
 800a41a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a420:	4a20      	ldr	r2, [pc, #128]	; (800a4a4 <HAL_UART_Transmit_DMA+0xf8>)
 800a422:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a428:	2200      	movs	r2, #0
 800a42a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3304      	adds	r3, #4
 800a440:	461a      	mov	r2, r3
 800a442:	88fb      	ldrh	r3, [r7, #6]
 800a444:	f7fb f90e 	bl	8005664 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a450:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3314      	adds	r3, #20
 800a460:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	617b      	str	r3, [r7, #20]
   return(result);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3314      	adds	r3, #20
 800a478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47a:	627a      	str	r2, [r7, #36]	; 0x24
 800a47c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6a39      	ldr	r1, [r7, #32]
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	61fb      	str	r3, [r7, #28]
   return(result);
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e5      	bne.n	800a45a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3730      	adds	r7, #48	; 0x30
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	0800aba1 	.word	0x0800aba1
 800a4a0:	0800ac3b 	.word	0x0800ac3b
 800a4a4:	0800adb3 	.word	0x0800adb3

0800a4a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	d11d      	bne.n	800a4fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <HAL_UART_Receive_DMA+0x26>
 800a4c8:	88fb      	ldrh	r3, [r7, #6]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e016      	b.n	800a500 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d101      	bne.n	800a4e0 <HAL_UART_Receive_DMA+0x38>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e00f      	b.n	800a500 <HAL_UART_Receive_DMA+0x58>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fca7 	bl	800ae48 <UART_Start_Receive_DMA>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	e000      	b.n	800a500 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4fe:	2302      	movs	r3, #2
  }
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b090      	sub	sp, #64	; 0x40
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a510:	2300      	movs	r3, #0
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51e:	2b80      	cmp	r3, #128	; 0x80
 800a520:	bf0c      	ite	eq
 800a522:	2301      	moveq	r3, #1
 800a524:	2300      	movne	r3, #0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b21      	cmp	r3, #33	; 0x21
 800a534:	d128      	bne.n	800a588 <HAL_UART_DMAStop+0x80>
 800a536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d025      	beq.n	800a588 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	623b      	str	r3, [r7, #32]
   return(result);
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a552:	63bb      	str	r3, [r7, #56]	; 0x38
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a55c:	633a      	str	r2, [r7, #48]	; 0x30
 800a55e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e5      	bne.n	800a53c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fb f8c9 	bl	8005714 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fcfe 	bl	800af84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a592:	2b40      	cmp	r3, #64	; 0x40
 800a594:	bf0c      	ite	eq
 800a596:	2301      	moveq	r3, #1
 800a598:	2300      	movne	r3, #0
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b22      	cmp	r3, #34	; 0x22
 800a5a8:	d128      	bne.n	800a5fc <HAL_UART_DMAStop+0xf4>
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d025      	beq.n	800a5fc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3314      	adds	r3, #20
 800a5b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d0:	61fa      	str	r2, [r7, #28]
 800a5d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d4:	69b9      	ldr	r1, [r7, #24]
 800a5d6:	69fa      	ldr	r2, [r7, #28]
 800a5d8:	e841 2300 	strex	r3, r2, [r1]
 800a5dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e5      	bne.n	800a5b0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fb f88f 	bl	8005714 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fcec 	bl	800afd4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3740      	adds	r7, #64	; 0x40
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b0ba      	sub	sp, #232	; 0xe8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a62e:	2300      	movs	r3, #0
 800a630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a634:	2300      	movs	r3, #0
 800a636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10f      	bne.n	800a66e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a652:	f003 0320 	and.w	r3, r3, #32
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <HAL_UART_IRQHandler+0x66>
 800a65a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fd93 	bl	800b192 <UART_Receive_IT>
      return;
 800a66c:	e256      	b.n	800ab1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a66e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80de 	beq.w	800a834 <HAL_UART_IRQHandler+0x22c>
 800a678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d106      	bne.n	800a692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a688:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 80d1 	beq.w	800a834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xae>
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	f043 0201 	orr.w	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ba:	f003 0304 	and.w	r3, r3, #4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00b      	beq.n	800a6da <HAL_UART_IRQHandler+0xd2>
 800a6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f043 0202 	orr.w	r2, r3, #2
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00b      	beq.n	800a6fe <HAL_UART_IRQHandler+0xf6>
 800a6e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d005      	beq.n	800a6fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	f043 0204 	orr.w	r2, r3, #4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b00      	cmp	r3, #0
 800a708:	d011      	beq.n	800a72e <HAL_UART_IRQHandler+0x126>
 800a70a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f043 0208 	orr.w	r2, r3, #8
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 81ed 	beq.w	800ab12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73c:	f003 0320 	and.w	r3, r3, #32
 800a740:	2b00      	cmp	r3, #0
 800a742:	d008      	beq.n	800a756 <HAL_UART_IRQHandler+0x14e>
 800a744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a748:	f003 0320 	and.w	r3, r3, #32
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fd1e 	bl	800b192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a760:	2b40      	cmp	r3, #64	; 0x40
 800a762:	bf0c      	ite	eq
 800a764:	2301      	moveq	r3, #1
 800a766:	2300      	movne	r3, #0
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <HAL_UART_IRQHandler+0x17a>
 800a77a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d04f      	beq.n	800a822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fc26 	bl	800afd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d141      	bne.n	800a81a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3314      	adds	r3, #20
 800a79c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a7c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a7c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a7ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1d9      	bne.n	800a796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d013      	beq.n	800a812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ee:	4a7d      	ldr	r2, [pc, #500]	; (800a9e4 <HAL_UART_IRQHandler+0x3dc>)
 800a7f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fa fffc 	bl	80057f4 <HAL_DMA_Abort_IT>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d016      	beq.n	800a830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a810:	e00e      	b.n	800a830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9ae 	bl	800ab74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a818:	e00a      	b.n	800a830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f9aa 	bl	800ab74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a820:	e006      	b.n	800a830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f9a6 	bl	800ab74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a82e:	e170      	b.n	800ab12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a830:	bf00      	nop
    return;
 800a832:	e16e      	b.n	800ab12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	2b01      	cmp	r3, #1
 800a83a:	f040 814a 	bne.w	800aad2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f003 0310 	and.w	r3, r3, #16
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 8143 	beq.w	800aad2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 813c 	beq.w	800aad2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a85a:	2300      	movs	r3, #0
 800a85c:	60bb      	str	r3, [r7, #8]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60bb      	str	r3, [r7, #8]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	60bb      	str	r3, [r7, #8]
 800a86e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	f040 80b4 	bne.w	800a9e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a88c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8140 	beq.w	800ab16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a89a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	f080 8139 	bcs.w	800ab16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	f000 8088 	beq.w	800a9ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	330c      	adds	r3, #12
 800a8c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a8d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a8e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a8f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1d9      	bne.n	800a8ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3314      	adds	r3, #20
 800a90c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3314      	adds	r3, #20
 800a926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a92a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a92e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e1      	bne.n	800a906 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3314      	adds	r3, #20
 800a948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3314      	adds	r3, #20
 800a962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a966:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a96c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e3      	bne.n	800a942 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a992:	e853 3f00 	ldrex	r3, [r3]
 800a996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99a:	f023 0310 	bic.w	r3, r3, #16
 800a99e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	330c      	adds	r3, #12
 800a9a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a9ac:	65ba      	str	r2, [r7, #88]	; 0x58
 800a9ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e3      	bne.n	800a988 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fa fea5 	bl	8005714 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f8d4 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9e0:	e099      	b.n	800ab16 <HAL_UART_IRQHandler+0x50e>
 800a9e2:	bf00      	nop
 800a9e4:	0800b09b 	.word	0x0800b09b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 808b 	beq.w	800ab1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8086 	beq.w	800ab1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	330c      	adds	r3, #12
 800aa14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa32:	647a      	str	r2, [r7, #68]	; 0x44
 800aa34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e3      	bne.n	800aa0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	623b      	str	r3, [r7, #32]
   return(result);
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3314      	adds	r3, #20
 800aa66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa6a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa72:	e841 2300 	strex	r3, r2, [r1]
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1e3      	bne.n	800aa46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	330c      	adds	r3, #12
 800aa92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f023 0310 	bic.w	r3, r3, #16
 800aaa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	330c      	adds	r3, #12
 800aaac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aab0:	61fa      	str	r2, [r7, #28]
 800aab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69b9      	ldr	r1, [r7, #24]
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	617b      	str	r3, [r7, #20]
   return(result);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e3      	bne.n	800aa8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f85c 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aad0:	e023      	b.n	800ab1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x4ea>
 800aade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fae9 	bl	800b0c2 <UART_Transmit_IT>
    return;
 800aaf0:	e014      	b.n	800ab1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aaf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <HAL_UART_IRQHandler+0x514>
 800aafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d008      	beq.n	800ab1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb29 	bl	800b162 <UART_EndTransmit_IT>
    return;
 800ab10:	e004      	b.n	800ab1c <HAL_UART_IRQHandler+0x514>
    return;
 800ab12:	bf00      	nop
 800ab14:	e002      	b.n	800ab1c <HAL_UART_IRQHandler+0x514>
      return;
 800ab16:	bf00      	nop
 800ab18:	e000      	b.n	800ab1c <HAL_UART_IRQHandler+0x514>
      return;
 800ab1a:	bf00      	nop
  }
}
 800ab1c:	37e8      	adds	r7, #232	; 0xe8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop

0800ab24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b090      	sub	sp, #64	; 0x40
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d137      	bne.n	800ac2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800abbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abbe:	2200      	movs	r2, #0
 800abc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3314      	adds	r3, #20
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	623b      	str	r3, [r7, #32]
   return(result);
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3314      	adds	r3, #20
 800abe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abe2:	633a      	str	r2, [r7, #48]	; 0x30
 800abe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e5      	bne.n	800abc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	330c      	adds	r3, #12
 800abfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	330c      	adds	r3, #12
 800ac14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac16:	61fa      	str	r2, [r7, #28]
 800ac18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	617b      	str	r3, [r7, #20]
   return(result);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e5      	bne.n	800abf6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac2a:	e002      	b.n	800ac32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac2e:	f7ff ff79 	bl	800ab24 <HAL_UART_TxCpltCallback>
}
 800ac32:	bf00      	nop
 800ac34:	3740      	adds	r7, #64	; 0x40
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7ff ff75 	bl	800ab38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b09c      	sub	sp, #112	; 0x70
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d172      	bne.n	800ad58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ac72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac74:	2200      	movs	r2, #0
 800ac76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	330c      	adds	r3, #12
 800ac96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac98:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e5      	bne.n	800ac78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3314      	adds	r3, #20
 800acb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	f023 0301 	bic.w	r3, r3, #1
 800acc2:	667b      	str	r3, [r7, #100]	; 0x64
 800acc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3314      	adds	r3, #20
 800acca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800accc:	647a      	str	r2, [r7, #68]	; 0x44
 800acce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e5      	bne.n	800acac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3314      	adds	r3, #20
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	623b      	str	r3, [r7, #32]
   return(result);
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf6:	663b      	str	r3, [r7, #96]	; 0x60
 800acf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3314      	adds	r3, #20
 800acfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad00:	633a      	str	r2, [r7, #48]	; 0x30
 800ad02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e5      	bne.n	800ace0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	2220      	movs	r2, #32
 800ad18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d119      	bne.n	800ad58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	330c      	adds	r3, #12
 800ad2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0310 	bic.w	r3, r3, #16
 800ad3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	330c      	adds	r3, #12
 800ad42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad44:	61fa      	str	r2, [r7, #28]
 800ad46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	69b9      	ldr	r1, [r7, #24]
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	617b      	str	r3, [r7, #20]
   return(result);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d106      	bne.n	800ad6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad64:	4619      	mov	r1, r3
 800ad66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad68:	f7ff ff0e 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad6c:	e002      	b.n	800ad74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ad6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad70:	f7ff feec 	bl	800ab4c <HAL_UART_RxCpltCallback>
}
 800ad74:	bf00      	nop
 800ad76:	3770      	adds	r7, #112	; 0x70
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d108      	bne.n	800ada4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff fef3 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada2:	e002      	b.n	800adaa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f7ff fedb 	bl	800ab60 <HAL_UART_RxHalfCpltCallback>
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adce:	2b80      	cmp	r3, #128	; 0x80
 800add0:	bf0c      	ite	eq
 800add2:	2301      	moveq	r3, #1
 800add4:	2300      	movne	r3, #0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b21      	cmp	r3, #33	; 0x21
 800ade4:	d108      	bne.n	800adf8 <UART_DMAError+0x46>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f000 f8c6 	bl	800af84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae02:	2b40      	cmp	r3, #64	; 0x40
 800ae04:	bf0c      	ite	eq
 800ae06:	2301      	moveq	r3, #1
 800ae08:	2300      	movne	r3, #0
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b22      	cmp	r3, #34	; 0x22
 800ae18:	d108      	bne.n	800ae2c <UART_DMAError+0x7a>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae26:	68b8      	ldr	r0, [r7, #8]
 800ae28:	f000 f8d4 	bl	800afd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	f043 0210 	orr.w	r2, r3, #16
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae38:	68b8      	ldr	r0, [r7, #8]
 800ae3a:	f7ff fe9b 	bl	800ab74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b098      	sub	sp, #96	; 0x60
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	88fa      	ldrh	r2, [r7, #6]
 800ae60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2222      	movs	r2, #34	; 0x22
 800ae6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae74:	4a40      	ldr	r2, [pc, #256]	; (800af78 <UART_Start_Receive_DMA+0x130>)
 800ae76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	4a3f      	ldr	r2, [pc, #252]	; (800af7c <UART_Start_Receive_DMA+0x134>)
 800ae7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae84:	4a3e      	ldr	r2, [pc, #248]	; (800af80 <UART_Start_Receive_DMA+0x138>)
 800ae86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	f7fa fbdc 	bl	8005664 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aeac:	2300      	movs	r3, #0
 800aeae:	613b      	str	r3, [r7, #16]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d019      	beq.n	800af06 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	330c      	adds	r3, #12
 800aed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aee8:	65bb      	str	r3, [r7, #88]	; 0x58
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	330c      	adds	r3, #12
 800aef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aef2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aef4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e5      	bne.n	800aed2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3314      	adds	r3, #20
 800af0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	f043 0301 	orr.w	r3, r3, #1
 800af1c:	657b      	str	r3, [r7, #84]	; 0x54
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3314      	adds	r3, #20
 800af24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af26:	63ba      	str	r2, [r7, #56]	; 0x38
 800af28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e5      	bne.n	800af06 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3314      	adds	r3, #20
 800af40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	617b      	str	r3, [r7, #20]
   return(result);
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	653b      	str	r3, [r7, #80]	; 0x50
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3314      	adds	r3, #20
 800af58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af5a:	627a      	str	r2, [r7, #36]	; 0x24
 800af5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5e:	6a39      	ldr	r1, [r7, #32]
 800af60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	61fb      	str	r3, [r7, #28]
   return(result);
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1e5      	bne.n	800af3a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3760      	adds	r7, #96	; 0x60
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	0800ac57 	.word	0x0800ac57
 800af7c:	0800ad7d 	.word	0x0800ad7d
 800af80:	0800adb3 	.word	0x0800adb3

0800af84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af84:	b480      	push	{r7}
 800af86:	b089      	sub	sp, #36	; 0x24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	330c      	adds	r3, #12
 800af92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afa2:	61fb      	str	r3, [r7, #28]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	61ba      	str	r2, [r7, #24]
 800afae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6979      	ldr	r1, [r7, #20]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	613b      	str	r3, [r7, #16]
   return(result);
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e5      	bne.n	800af8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800afc8:	bf00      	nop
 800afca:	3724      	adds	r7, #36	; 0x24
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b095      	sub	sp, #84	; 0x54
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	330c      	adds	r3, #12
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	e853 3f00 	ldrex	r3, [r3]
 800afea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	330c      	adds	r3, #12
 800affa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800affc:	643a      	str	r2, [r7, #64]	; 0x40
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e5      	bne.n	800afdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3314      	adds	r3, #20
 800b016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	f023 0301 	bic.w	r3, r3, #1
 800b026:	64bb      	str	r3, [r7, #72]	; 0x48
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3314      	adds	r3, #20
 800b02e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b030:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e5      	bne.n	800b010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d119      	bne.n	800b080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f023 0310 	bic.w	r3, r3, #16
 800b062:	647b      	str	r3, [r7, #68]	; 0x44
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b06c:	61ba      	str	r2, [r7, #24]
 800b06e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b070:	6979      	ldr	r1, [r7, #20]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	e841 2300 	strex	r3, r2, [r1]
 800b078:	613b      	str	r3, [r7, #16]
   return(result);
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e5      	bne.n	800b04c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2220      	movs	r2, #32
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b08e:	bf00      	nop
 800b090:	3754      	adds	r7, #84	; 0x54
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fd5d 	bl	800ab74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b21      	cmp	r3, #33	; 0x21
 800b0d4:	d13e      	bne.n	800b154 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	d114      	bne.n	800b10a <UART_Transmit_IT+0x48>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d110      	bne.n	800b10a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	1c9a      	adds	r2, r3, #2
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	621a      	str	r2, [r3, #32]
 800b108:	e008      	b.n	800b11c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	1c59      	adds	r1, r3, #1
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6211      	str	r1, [r2, #32]
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	b29b      	uxth	r3, r3
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	4619      	mov	r1, r3
 800b12a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10f      	bne.n	800b150 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b13e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b14e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	e000      	b.n	800b156 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b154:	2302      	movs	r3, #2
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7ff fcce 	bl	800ab24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b08c      	sub	sp, #48	; 0x30
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b22      	cmp	r3, #34	; 0x22
 800b1a4:	f040 80ab 	bne.w	800b2fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b0:	d117      	bne.n	800b1e2 <UART_Receive_IT+0x50>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d113      	bne.n	800b1e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1da:	1c9a      	adds	r2, r3, #2
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	629a      	str	r2, [r3, #40]	; 0x28
 800b1e0:	e026      	b.n	800b230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f4:	d007      	beq.n	800b206 <UART_Receive_IT+0x74>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <UART_Receive_IT+0x82>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	e008      	b.n	800b226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b220:	b2da      	uxtb	r2, r3
 800b222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	b29b      	uxth	r3, r3
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	4619      	mov	r1, r3
 800b23e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b240:	2b00      	cmp	r3, #0
 800b242:	d15a      	bne.n	800b2fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68da      	ldr	r2, [r3, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 0220 	bic.w	r2, r2, #32
 800b252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68da      	ldr	r2, [r3, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	695a      	ldr	r2, [r3, #20]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0201 	bic.w	r2, r2, #1
 800b272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2220      	movs	r2, #32
 800b278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b280:	2b01      	cmp	r3, #1
 800b282:	d135      	bne.n	800b2f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	330c      	adds	r3, #12
 800b290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	613b      	str	r3, [r7, #16]
   return(result);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f023 0310 	bic.w	r3, r3, #16
 800b2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	330c      	adds	r3, #12
 800b2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2aa:	623a      	str	r2, [r7, #32]
 800b2ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	69f9      	ldr	r1, [r7, #28]
 800b2b0:	6a3a      	ldr	r2, [r7, #32]
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e5      	bne.n	800b28a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0310 	and.w	r3, r3, #16
 800b2c8:	2b10      	cmp	r3, #16
 800b2ca:	d10a      	bne.n	800b2e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff fc4d 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
 800b2ee:	e002      	b.n	800b2f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff fc2b 	bl	800ab4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e002      	b.n	800b300 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e000      	b.n	800b300 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b2fe:	2302      	movs	r3, #2
  }
}
 800b300:	4618      	mov	r0, r3
 800b302:	3730      	adds	r7, #48	; 0x30
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b30c:	b0c0      	sub	sp, #256	; 0x100
 800b30e:	af00      	add	r7, sp, #0
 800b310:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	68d9      	ldr	r1, [r3, #12]
 800b326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	ea40 0301 	orr.w	r3, r0, r1
 800b330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b336:	689a      	ldr	r2, [r3, #8]
 800b338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	431a      	orrs	r2, r3
 800b340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	431a      	orrs	r2, r3
 800b348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	4313      	orrs	r3, r2
 800b350:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b360:	f021 010c 	bic.w	r1, r1, #12
 800b364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b36e:	430b      	orrs	r3, r1
 800b370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b382:	6999      	ldr	r1, [r3, #24]
 800b384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	ea40 0301 	orr.w	r3, r0, r1
 800b38e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	4b8f      	ldr	r3, [pc, #572]	; (800b5d4 <UART_SetConfig+0x2cc>)
 800b398:	429a      	cmp	r2, r3
 800b39a:	d005      	beq.n	800b3a8 <UART_SetConfig+0xa0>
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b8d      	ldr	r3, [pc, #564]	; (800b5d8 <UART_SetConfig+0x2d0>)
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d104      	bne.n	800b3b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b3a8:	f7fd fdfa 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800b3ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b3b0:	e003      	b.n	800b3ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3b2:	f7fd fde1 	bl	8008f78 <HAL_RCC_GetPCLK1Freq>
 800b3b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c4:	f040 810c 	bne.w	800b5e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b3c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b3d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	1891      	adds	r1, r2, r2
 800b3e0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b3e2:	415b      	adcs	r3, r3
 800b3e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	eb12 0801 	adds.w	r8, r2, r1
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	eb43 0901 	adc.w	r9, r3, r1
 800b3f6:	f04f 0200 	mov.w	r2, #0
 800b3fa:	f04f 0300 	mov.w	r3, #0
 800b3fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b40a:	4690      	mov	r8, r2
 800b40c:	4699      	mov	r9, r3
 800b40e:	4623      	mov	r3, r4
 800b410:	eb18 0303 	adds.w	r3, r8, r3
 800b414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b418:	462b      	mov	r3, r5
 800b41a:	eb49 0303 	adc.w	r3, r9, r3
 800b41e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b42e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b436:	460b      	mov	r3, r1
 800b438:	18db      	adds	r3, r3, r3
 800b43a:	653b      	str	r3, [r7, #80]	; 0x50
 800b43c:	4613      	mov	r3, r2
 800b43e:	eb42 0303 	adc.w	r3, r2, r3
 800b442:	657b      	str	r3, [r7, #84]	; 0x54
 800b444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b44c:	f7f5 fba0 	bl	8000b90 <__aeabi_uldivmod>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4b61      	ldr	r3, [pc, #388]	; (800b5dc <UART_SetConfig+0x2d4>)
 800b456:	fba3 2302 	umull	r2, r3, r3, r2
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	011c      	lsls	r4, r3, #4
 800b45e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b462:	2200      	movs	r2, #0
 800b464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b468:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b46c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	1891      	adds	r1, r2, r2
 800b476:	64b9      	str	r1, [r7, #72]	; 0x48
 800b478:	415b      	adcs	r3, r3
 800b47a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b47c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b480:	4641      	mov	r1, r8
 800b482:	eb12 0a01 	adds.w	sl, r2, r1
 800b486:	4649      	mov	r1, r9
 800b488:	eb43 0b01 	adc.w	fp, r3, r1
 800b48c:	f04f 0200 	mov.w	r2, #0
 800b490:	f04f 0300 	mov.w	r3, #0
 800b494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b49c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4a0:	4692      	mov	sl, r2
 800b4a2:	469b      	mov	fp, r3
 800b4a4:	4643      	mov	r3, r8
 800b4a6:	eb1a 0303 	adds.w	r3, sl, r3
 800b4aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	eb4b 0303 	adc.w	r3, fp, r3
 800b4b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b4c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	18db      	adds	r3, r3, r3
 800b4d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	eb42 0303 	adc.w	r3, r2, r3
 800b4d8:	647b      	str	r3, [r7, #68]	; 0x44
 800b4da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b4e2:	f7f5 fb55 	bl	8000b90 <__aeabi_uldivmod>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4b3b      	ldr	r3, [pc, #236]	; (800b5dc <UART_SetConfig+0x2d4>)
 800b4ee:	fba3 2301 	umull	r2, r3, r3, r1
 800b4f2:	095b      	lsrs	r3, r3, #5
 800b4f4:	2264      	movs	r2, #100	; 0x64
 800b4f6:	fb02 f303 	mul.w	r3, r2, r3
 800b4fa:	1acb      	subs	r3, r1, r3
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b502:	4b36      	ldr	r3, [pc, #216]	; (800b5dc <UART_SetConfig+0x2d4>)
 800b504:	fba3 2302 	umull	r2, r3, r3, r2
 800b508:	095b      	lsrs	r3, r3, #5
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b510:	441c      	add	r4, r3
 800b512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b516:	2200      	movs	r2, #0
 800b518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b51c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	1891      	adds	r1, r2, r2
 800b52a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b52c:	415b      	adcs	r3, r3
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b534:	4641      	mov	r1, r8
 800b536:	1851      	adds	r1, r2, r1
 800b538:	6339      	str	r1, [r7, #48]	; 0x30
 800b53a:	4649      	mov	r1, r9
 800b53c:	414b      	adcs	r3, r1
 800b53e:	637b      	str	r3, [r7, #52]	; 0x34
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b54c:	4659      	mov	r1, fp
 800b54e:	00cb      	lsls	r3, r1, #3
 800b550:	4651      	mov	r1, sl
 800b552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b556:	4651      	mov	r1, sl
 800b558:	00ca      	lsls	r2, r1, #3
 800b55a:	4610      	mov	r0, r2
 800b55c:	4619      	mov	r1, r3
 800b55e:	4603      	mov	r3, r0
 800b560:	4642      	mov	r2, r8
 800b562:	189b      	adds	r3, r3, r2
 800b564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b568:	464b      	mov	r3, r9
 800b56a:	460a      	mov	r2, r1
 800b56c:	eb42 0303 	adc.w	r3, r2, r3
 800b570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b580:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b588:	460b      	mov	r3, r1
 800b58a:	18db      	adds	r3, r3, r3
 800b58c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b58e:	4613      	mov	r3, r2
 800b590:	eb42 0303 	adc.w	r3, r2, r3
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b59a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b59e:	f7f5 faf7 	bl	8000b90 <__aeabi_uldivmod>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <UART_SetConfig+0x2d4>)
 800b5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	2164      	movs	r1, #100	; 0x64
 800b5b0:	fb01 f303 	mul.w	r3, r1, r3
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	3332      	adds	r3, #50	; 0x32
 800b5ba:	4a08      	ldr	r2, [pc, #32]	; (800b5dc <UART_SetConfig+0x2d4>)
 800b5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c0:	095b      	lsrs	r3, r3, #5
 800b5c2:	f003 0207 	and.w	r2, r3, #7
 800b5c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4422      	add	r2, r4
 800b5ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b5d0:	e105      	b.n	800b7de <UART_SetConfig+0x4d6>
 800b5d2:	bf00      	nop
 800b5d4:	40011000 	.word	0x40011000
 800b5d8:	40011400 	.word	0x40011400
 800b5dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b5f2:	4642      	mov	r2, r8
 800b5f4:	464b      	mov	r3, r9
 800b5f6:	1891      	adds	r1, r2, r2
 800b5f8:	6239      	str	r1, [r7, #32]
 800b5fa:	415b      	adcs	r3, r3
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b602:	4641      	mov	r1, r8
 800b604:	1854      	adds	r4, r2, r1
 800b606:	4649      	mov	r1, r9
 800b608:	eb43 0501 	adc.w	r5, r3, r1
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	00eb      	lsls	r3, r5, #3
 800b616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b61a:	00e2      	lsls	r2, r4, #3
 800b61c:	4614      	mov	r4, r2
 800b61e:	461d      	mov	r5, r3
 800b620:	4643      	mov	r3, r8
 800b622:	18e3      	adds	r3, r4, r3
 800b624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b628:	464b      	mov	r3, r9
 800b62a:	eb45 0303 	adc.w	r3, r5, r3
 800b62e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b63e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b642:	f04f 0200 	mov.w	r2, #0
 800b646:	f04f 0300 	mov.w	r3, #0
 800b64a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b64e:	4629      	mov	r1, r5
 800b650:	008b      	lsls	r3, r1, #2
 800b652:	4621      	mov	r1, r4
 800b654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b658:	4621      	mov	r1, r4
 800b65a:	008a      	lsls	r2, r1, #2
 800b65c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b660:	f7f5 fa96 	bl	8000b90 <__aeabi_uldivmod>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4b60      	ldr	r3, [pc, #384]	; (800b7ec <UART_SetConfig+0x4e4>)
 800b66a:	fba3 2302 	umull	r2, r3, r3, r2
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	011c      	lsls	r4, r3, #4
 800b672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b676:	2200      	movs	r2, #0
 800b678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b67c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b684:	4642      	mov	r2, r8
 800b686:	464b      	mov	r3, r9
 800b688:	1891      	adds	r1, r2, r2
 800b68a:	61b9      	str	r1, [r7, #24]
 800b68c:	415b      	adcs	r3, r3
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b694:	4641      	mov	r1, r8
 800b696:	1851      	adds	r1, r2, r1
 800b698:	6139      	str	r1, [r7, #16]
 800b69a:	4649      	mov	r1, r9
 800b69c:	414b      	adcs	r3, r1
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	f04f 0200 	mov.w	r2, #0
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	00cb      	lsls	r3, r1, #3
 800b6b0:	4651      	mov	r1, sl
 800b6b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6b6:	4651      	mov	r1, sl
 800b6b8:	00ca      	lsls	r2, r1, #3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4642      	mov	r2, r8
 800b6c2:	189b      	adds	r3, r3, r2
 800b6c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6c8:	464b      	mov	r3, r9
 800b6ca:	460a      	mov	r2, r1
 800b6cc:	eb42 0303 	adc.w	r3, r2, r3
 800b6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6de:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b6e0:	f04f 0200 	mov.w	r2, #0
 800b6e4:	f04f 0300 	mov.w	r3, #0
 800b6e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	008b      	lsls	r3, r1, #2
 800b6f0:	4641      	mov	r1, r8
 800b6f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6f6:	4641      	mov	r1, r8
 800b6f8:	008a      	lsls	r2, r1, #2
 800b6fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b6fe:	f7f5 fa47 	bl	8000b90 <__aeabi_uldivmod>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <UART_SetConfig+0x4e4>)
 800b708:	fba3 1302 	umull	r1, r3, r3, r2
 800b70c:	095b      	lsrs	r3, r3, #5
 800b70e:	2164      	movs	r1, #100	; 0x64
 800b710:	fb01 f303 	mul.w	r3, r1, r3
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	011b      	lsls	r3, r3, #4
 800b718:	3332      	adds	r3, #50	; 0x32
 800b71a:	4a34      	ldr	r2, [pc, #208]	; (800b7ec <UART_SetConfig+0x4e4>)
 800b71c:	fba2 2303 	umull	r2, r3, r2, r3
 800b720:	095b      	lsrs	r3, r3, #5
 800b722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b726:	441c      	add	r4, r3
 800b728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b72c:	2200      	movs	r2, #0
 800b72e:	673b      	str	r3, [r7, #112]	; 0x70
 800b730:	677a      	str	r2, [r7, #116]	; 0x74
 800b732:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	1891      	adds	r1, r2, r2
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	415b      	adcs	r3, r3
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b746:	4641      	mov	r1, r8
 800b748:	1851      	adds	r1, r2, r1
 800b74a:	6039      	str	r1, [r7, #0]
 800b74c:	4649      	mov	r1, r9
 800b74e:	414b      	adcs	r3, r1
 800b750:	607b      	str	r3, [r7, #4]
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	f04f 0300 	mov.w	r3, #0
 800b75a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b75e:	4659      	mov	r1, fp
 800b760:	00cb      	lsls	r3, r1, #3
 800b762:	4651      	mov	r1, sl
 800b764:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b768:	4651      	mov	r1, sl
 800b76a:	00ca      	lsls	r2, r1, #3
 800b76c:	4610      	mov	r0, r2
 800b76e:	4619      	mov	r1, r3
 800b770:	4603      	mov	r3, r0
 800b772:	4642      	mov	r2, r8
 800b774:	189b      	adds	r3, r3, r2
 800b776:	66bb      	str	r3, [r7, #104]	; 0x68
 800b778:	464b      	mov	r3, r9
 800b77a:	460a      	mov	r2, r1
 800b77c:	eb42 0303 	adc.w	r3, r2, r3
 800b780:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	663b      	str	r3, [r7, #96]	; 0x60
 800b78c:	667a      	str	r2, [r7, #100]	; 0x64
 800b78e:	f04f 0200 	mov.w	r2, #0
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b79a:	4649      	mov	r1, r9
 800b79c:	008b      	lsls	r3, r1, #2
 800b79e:	4641      	mov	r1, r8
 800b7a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7a4:	4641      	mov	r1, r8
 800b7a6:	008a      	lsls	r2, r1, #2
 800b7a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b7ac:	f7f5 f9f0 	bl	8000b90 <__aeabi_uldivmod>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4b0d      	ldr	r3, [pc, #52]	; (800b7ec <UART_SetConfig+0x4e4>)
 800b7b6:	fba3 1302 	umull	r1, r3, r3, r2
 800b7ba:	095b      	lsrs	r3, r3, #5
 800b7bc:	2164      	movs	r1, #100	; 0x64
 800b7be:	fb01 f303 	mul.w	r3, r1, r3
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	3332      	adds	r3, #50	; 0x32
 800b7c8:	4a08      	ldr	r2, [pc, #32]	; (800b7ec <UART_SetConfig+0x4e4>)
 800b7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	f003 020f 	and.w	r2, r3, #15
 800b7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4422      	add	r2, r4
 800b7dc:	609a      	str	r2, [r3, #8]
}
 800b7de:	bf00      	nop
 800b7e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7ea:	bf00      	nop
 800b7ec:	51eb851f 	.word	0x51eb851f

0800b7f0 <arm_mat_trans_f32>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	8802      	ldrh	r2, [r0, #0]
 800b7f6:	884b      	ldrh	r3, [r1, #2]
 800b7f8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b7fc:	684f      	ldr	r7, [r1, #4]
 800b7fe:	8840      	ldrh	r0, [r0, #2]
 800b800:	4293      	cmp	r3, r2
 800b802:	b083      	sub	sp, #12
 800b804:	d14c      	bne.n	800b8a0 <arm_mat_trans_f32+0xb0>
 800b806:	f8b1 e000 	ldrh.w	lr, [r1]
 800b80a:	4586      	cmp	lr, r0
 800b80c:	d148      	bne.n	800b8a0 <arm_mat_trans_f32+0xb0>
 800b80e:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b812:	009c      	lsls	r4, r3, #2
 800b814:	f00e 0e03 	and.w	lr, lr, #3
 800b818:	fb08 f904 	mul.w	r9, r8, r4
 800b81c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b820:	011d      	lsls	r5, r3, #4
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b828:	eb07 0a04 	add.w	sl, r7, r4
 800b82c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b830:	9201      	str	r2, [sp, #4]
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	463b      	mov	r3, r7
 800b836:	f1b8 0f00 	cmp.w	r8, #0
 800b83a:	d01d      	beq.n	800b878 <arm_mat_trans_f32+0x88>
 800b83c:	9900      	ldr	r1, [sp, #0]
 800b83e:	f10c 0210 	add.w	r2, ip, #16
 800b842:	4439      	add	r1, r7
 800b844:	4640      	mov	r0, r8
 800b846:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b84a:	601e      	str	r6, [r3, #0]
 800b84c:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b850:	191e      	adds	r6, r3, r4
 800b852:	edc6 7a00 	vstr	s15, [r6]
 800b856:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b85a:	600e      	str	r6, [r1, #0]
 800b85c:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b860:	190e      	adds	r6, r1, r4
 800b862:	3801      	subs	r0, #1
 800b864:	442b      	add	r3, r5
 800b866:	f102 0210 	add.w	r2, r2, #16
 800b86a:	edc6 7a00 	vstr	s15, [r6]
 800b86e:	4429      	add	r1, r5
 800b870:	d1e9      	bne.n	800b846 <arm_mat_trans_f32+0x56>
 800b872:	44dc      	add	ip, fp
 800b874:	eb09 0307 	add.w	r3, r9, r7
 800b878:	f1be 0f00 	cmp.w	lr, #0
 800b87c:	d009      	beq.n	800b892 <arm_mat_trans_f32+0xa2>
 800b87e:	4672      	mov	r2, lr
 800b880:	4661      	mov	r1, ip
 800b882:	f851 0b04 	ldr.w	r0, [r1], #4
 800b886:	6018      	str	r0, [r3, #0]
 800b888:	3a01      	subs	r2, #1
 800b88a:	4423      	add	r3, r4
 800b88c:	d1f9      	bne.n	800b882 <arm_mat_trans_f32+0x92>
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	449c      	add	ip, r3
 800b892:	3704      	adds	r7, #4
 800b894:	4557      	cmp	r7, sl
 800b896:	d1cd      	bne.n	800b834 <arm_mat_trans_f32+0x44>
 800b898:	2000      	movs	r0, #0
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	f06f 0002 	mvn.w	r0, #2
 800b8a4:	e7f9      	b.n	800b89a <arm_mat_trans_f32+0xaa>
 800b8a6:	bf00      	nop

0800b8a8 <arm_mat_sub_f32>:
 800b8a8:	b4f0      	push	{r4, r5, r6, r7}
 800b8aa:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b8ae:	6803      	ldr	r3, [r0, #0]
 800b8b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b8b4:	6856      	ldr	r6, [r2, #4]
 800b8b6:	42a3      	cmp	r3, r4
 800b8b8:	d15d      	bne.n	800b976 <arm_mat_sub_f32+0xce>
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d15a      	bne.n	800b976 <arm_mat_sub_f32+0xce>
 800b8c0:	8803      	ldrh	r3, [r0, #0]
 800b8c2:	8844      	ldrh	r4, [r0, #2]
 800b8c4:	fb04 f403 	mul.w	r4, r4, r3
 800b8c8:	08a5      	lsrs	r5, r4, #2
 800b8ca:	d032      	beq.n	800b932 <arm_mat_sub_f32+0x8a>
 800b8cc:	f10c 0110 	add.w	r1, ip, #16
 800b8d0:	f107 0210 	add.w	r2, r7, #16
 800b8d4:	f106 0310 	add.w	r3, r6, #16
 800b8d8:	4628      	mov	r0, r5
 800b8da:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b8de:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8e6:	3801      	subs	r0, #1
 800b8e8:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b8ec:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b8f0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8f8:	f101 0110 	add.w	r1, r1, #16
 800b8fc:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b900:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b904:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b90c:	f102 0210 	add.w	r2, r2, #16
 800b910:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b914:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b918:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b91c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b920:	f103 0310 	add.w	r3, r3, #16
 800b924:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b928:	d1d7      	bne.n	800b8da <arm_mat_sub_f32+0x32>
 800b92a:	012b      	lsls	r3, r5, #4
 800b92c:	449c      	add	ip, r3
 800b92e:	441f      	add	r7, r3
 800b930:	441e      	add	r6, r3
 800b932:	f014 0403 	ands.w	r4, r4, #3
 800b936:	d01b      	beq.n	800b970 <arm_mat_sub_f32+0xc8>
 800b938:	eddc 7a00 	vldr	s15, [ip]
 800b93c:	ed97 7a00 	vldr	s14, [r7]
 800b940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b944:	3c01      	subs	r4, #1
 800b946:	edc6 7a00 	vstr	s15, [r6]
 800b94a:	d011      	beq.n	800b970 <arm_mat_sub_f32+0xc8>
 800b94c:	eddc 7a01 	vldr	s15, [ip, #4]
 800b950:	ed97 7a01 	vldr	s14, [r7, #4]
 800b954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b958:	2c01      	cmp	r4, #1
 800b95a:	edc6 7a01 	vstr	s15, [r6, #4]
 800b95e:	d007      	beq.n	800b970 <arm_mat_sub_f32+0xc8>
 800b960:	eddc 7a02 	vldr	s15, [ip, #8]
 800b964:	ed97 7a02 	vldr	s14, [r7, #8]
 800b968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b96c:	edc6 7a02 	vstr	s15, [r6, #8]
 800b970:	2000      	movs	r0, #0
 800b972:	bcf0      	pop	{r4, r5, r6, r7}
 800b974:	4770      	bx	lr
 800b976:	f06f 0002 	mvn.w	r0, #2
 800b97a:	e7fa      	b.n	800b972 <arm_mat_sub_f32+0xca>

0800b97c <arm_mat_mult_f32>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	8845      	ldrh	r5, [r0, #2]
 800b982:	880b      	ldrh	r3, [r1, #0]
 800b984:	8806      	ldrh	r6, [r0, #0]
 800b986:	6847      	ldr	r7, [r0, #4]
 800b988:	6854      	ldr	r4, [r2, #4]
 800b98a:	6848      	ldr	r0, [r1, #4]
 800b98c:	b08b      	sub	sp, #44	; 0x2c
 800b98e:	42ab      	cmp	r3, r5
 800b990:	9109      	str	r1, [sp, #36]	; 0x24
 800b992:	9604      	str	r6, [sp, #16]
 800b994:	8849      	ldrh	r1, [r1, #2]
 800b996:	f040 808a 	bne.w	800baae <arm_mat_mult_f32+0x132>
 800b99a:	8815      	ldrh	r5, [r2, #0]
 800b99c:	42b5      	cmp	r5, r6
 800b99e:	f040 8086 	bne.w	800baae <arm_mat_mult_f32+0x132>
 800b9a2:	8852      	ldrh	r2, [r2, #2]
 800b9a4:	428a      	cmp	r2, r1
 800b9a6:	f040 8082 	bne.w	800baae <arm_mat_mult_f32+0x132>
 800b9aa:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b9ae:	1d01      	adds	r1, r0, #4
 800b9b0:	0116      	lsls	r6, r2, #4
 800b9b2:	9108      	str	r1, [sp, #32]
 800b9b4:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800b9b8:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800b9bc:	9101      	str	r1, [sp, #4]
 800b9be:	fb06 f108 	mul.w	r1, r6, r8
 800b9c2:	0095      	lsls	r5, r2, #2
 800b9c4:	9103      	str	r1, [sp, #12]
 800b9c6:	00d2      	lsls	r2, r2, #3
 800b9c8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800b9cc:	f003 0903 	and.w	r9, r3, #3
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	f107 0b10 	add.w	fp, r7, #16
 800b9d6:	eb04 0a05 	add.w	sl, r4, r5
 800b9da:	9107      	str	r1, [sp, #28]
 800b9dc:	9202      	str	r2, [sp, #8]
 800b9de:	9306      	str	r3, [sp, #24]
 800b9e0:	f1ab 0310 	sub.w	r3, fp, #16
 800b9e4:	9305      	str	r3, [sp, #20]
 800b9e6:	9b07      	ldr	r3, [sp, #28]
 800b9e8:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b9ec:	eb03 0c0a 	add.w	ip, r3, sl
 800b9f0:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bab8 <arm_mat_mult_f32+0x13c>
 800b9f4:	f1b8 0f00 	cmp.w	r8, #0
 800b9f8:	d053      	beq.n	800baa2 <arm_mat_mult_f32+0x126>
 800b9fa:	9b02      	ldr	r3, [sp, #8]
 800b9fc:	4644      	mov	r4, r8
 800b9fe:	18c1      	adds	r1, r0, r3
 800ba00:	4602      	mov	r2, r0
 800ba02:	465b      	mov	r3, fp
 800ba04:	ed92 6a00 	vldr	s12, [r2]
 800ba08:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ba0c:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ba10:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ba14:	ed91 5a00 	vldr	s10, [r1]
 800ba18:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ba1c:	1957      	adds	r7, r2, r5
 800ba1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ba22:	ed97 6a00 	vldr	s12, [r7]
 800ba26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba2a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ba2e:	194f      	adds	r7, r1, r5
 800ba30:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ba34:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ba38:	edd7 7a00 	vldr	s15, [r7]
 800ba3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ba40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ba44:	3c01      	subs	r4, #1
 800ba46:	4432      	add	r2, r6
 800ba48:	4431      	add	r1, r6
 800ba4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba4e:	f103 0310 	add.w	r3, r3, #16
 800ba52:	d1d7      	bne.n	800ba04 <arm_mat_mult_f32+0x88>
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	9a01      	ldr	r2, [sp, #4]
 800ba58:	4418      	add	r0, r3
 800ba5a:	f1b9 0f00 	cmp.w	r9, #0
 800ba5e:	d00b      	beq.n	800ba78 <arm_mat_mult_f32+0xfc>
 800ba60:	464b      	mov	r3, r9
 800ba62:	edd0 6a00 	vldr	s13, [r0]
 800ba66:	ecb2 7a01 	vldmia	r2!, {s14}
 800ba6a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	4428      	add	r0, r5
 800ba72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba76:	d1f4      	bne.n	800ba62 <arm_mat_mult_f32+0xe6>
 800ba78:	ecec 7a01 	vstmia	ip!, {s15}
 800ba7c:	45d4      	cmp	ip, sl
 800ba7e:	4670      	mov	r0, lr
 800ba80:	f10e 0e04 	add.w	lr, lr, #4
 800ba84:	d1b4      	bne.n	800b9f0 <arm_mat_mult_f32+0x74>
 800ba86:	9a01      	ldr	r2, [sp, #4]
 800ba88:	9b06      	ldr	r3, [sp, #24]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	4419      	add	r1, r3
 800ba8e:	449b      	add	fp, r3
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	9101      	str	r1, [sp, #4]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	44aa      	add	sl, r5
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	d004      	beq.n	800baa6 <arm_mat_mult_f32+0x12a>
 800ba9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba9e:	6858      	ldr	r0, [r3, #4]
 800baa0:	e79e      	b.n	800b9e0 <arm_mat_mult_f32+0x64>
 800baa2:	9a05      	ldr	r2, [sp, #20]
 800baa4:	e7d9      	b.n	800ba5a <arm_mat_mult_f32+0xde>
 800baa6:	4618      	mov	r0, r3
 800baa8:	b00b      	add	sp, #44	; 0x2c
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	f06f 0002 	mvn.w	r0, #2
 800bab2:	b00b      	add	sp, #44	; 0x2c
 800bab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab8:	00000000 	.word	0x00000000

0800babc <arm_mat_init_f32>:
 800babc:	8001      	strh	r1, [r0, #0]
 800babe:	8042      	strh	r2, [r0, #2]
 800bac0:	6043      	str	r3, [r0, #4]
 800bac2:	4770      	bx	lr

0800bac4 <arm_mat_add_f32>:
 800bac4:	b4f0      	push	{r4, r5, r6, r7}
 800bac6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800baca:	6803      	ldr	r3, [r0, #0]
 800bacc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bad0:	6856      	ldr	r6, [r2, #4]
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	d15d      	bne.n	800bb92 <arm_mat_add_f32+0xce>
 800bad6:	6812      	ldr	r2, [r2, #0]
 800bad8:	4293      	cmp	r3, r2
 800bada:	d15a      	bne.n	800bb92 <arm_mat_add_f32+0xce>
 800badc:	8803      	ldrh	r3, [r0, #0]
 800bade:	8844      	ldrh	r4, [r0, #2]
 800bae0:	fb04 f403 	mul.w	r4, r4, r3
 800bae4:	08a5      	lsrs	r5, r4, #2
 800bae6:	d032      	beq.n	800bb4e <arm_mat_add_f32+0x8a>
 800bae8:	f10c 0110 	add.w	r1, ip, #16
 800baec:	f107 0210 	add.w	r2, r7, #16
 800baf0:	f106 0310 	add.w	r3, r6, #16
 800baf4:	4628      	mov	r0, r5
 800baf6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800bafa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800bafe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb02:	3801      	subs	r0, #1
 800bb04:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bb08:	ed12 7a03 	vldr	s14, [r2, #-12]
 800bb0c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bb10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb14:	f101 0110 	add.w	r1, r1, #16
 800bb18:	ed43 7a03 	vstr	s15, [r3, #-12]
 800bb1c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800bb20:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800bb24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb28:	f102 0210 	add.w	r2, r2, #16
 800bb2c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bb30:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800bb34:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800bb38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb3c:	f103 0310 	add.w	r3, r3, #16
 800bb40:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800bb44:	d1d7      	bne.n	800baf6 <arm_mat_add_f32+0x32>
 800bb46:	012b      	lsls	r3, r5, #4
 800bb48:	449c      	add	ip, r3
 800bb4a:	441f      	add	r7, r3
 800bb4c:	441e      	add	r6, r3
 800bb4e:	f014 0403 	ands.w	r4, r4, #3
 800bb52:	d01b      	beq.n	800bb8c <arm_mat_add_f32+0xc8>
 800bb54:	edd7 7a00 	vldr	s15, [r7]
 800bb58:	ed9c 7a00 	vldr	s14, [ip]
 800bb5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb60:	3c01      	subs	r4, #1
 800bb62:	edc6 7a00 	vstr	s15, [r6]
 800bb66:	d011      	beq.n	800bb8c <arm_mat_add_f32+0xc8>
 800bb68:	eddc 7a01 	vldr	s15, [ip, #4]
 800bb6c:	ed97 7a01 	vldr	s14, [r7, #4]
 800bb70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb74:	2c01      	cmp	r4, #1
 800bb76:	edc6 7a01 	vstr	s15, [r6, #4]
 800bb7a:	d007      	beq.n	800bb8c <arm_mat_add_f32+0xc8>
 800bb7c:	eddc 7a02 	vldr	s15, [ip, #8]
 800bb80:	ed97 7a02 	vldr	s14, [r7, #8]
 800bb84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb88:	edc6 7a02 	vstr	s15, [r6, #8]
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	bcf0      	pop	{r4, r5, r6, r7}
 800bb90:	4770      	bx	lr
 800bb92:	f06f 0002 	mvn.w	r0, #2
 800bb96:	e7fa      	b.n	800bb8e <arm_mat_add_f32+0xca>

0800bb98 <__errno>:
 800bb98:	4b01      	ldr	r3, [pc, #4]	; (800bba0 <__errno+0x8>)
 800bb9a:	6818      	ldr	r0, [r3, #0]
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	200000d8 	.word	0x200000d8

0800bba4 <__libc_init_array>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4d0d      	ldr	r5, [pc, #52]	; (800bbdc <__libc_init_array+0x38>)
 800bba8:	4c0d      	ldr	r4, [pc, #52]	; (800bbe0 <__libc_init_array+0x3c>)
 800bbaa:	1b64      	subs	r4, r4, r5
 800bbac:	10a4      	asrs	r4, r4, #2
 800bbae:	2600      	movs	r6, #0
 800bbb0:	42a6      	cmp	r6, r4
 800bbb2:	d109      	bne.n	800bbc8 <__libc_init_array+0x24>
 800bbb4:	4d0b      	ldr	r5, [pc, #44]	; (800bbe4 <__libc_init_array+0x40>)
 800bbb6:	4c0c      	ldr	r4, [pc, #48]	; (800bbe8 <__libc_init_array+0x44>)
 800bbb8:	f000 ffec 	bl	800cb94 <_init>
 800bbbc:	1b64      	subs	r4, r4, r5
 800bbbe:	10a4      	asrs	r4, r4, #2
 800bbc0:	2600      	movs	r6, #0
 800bbc2:	42a6      	cmp	r6, r4
 800bbc4:	d105      	bne.n	800bbd2 <__libc_init_array+0x2e>
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbcc:	4798      	blx	r3
 800bbce:	3601      	adds	r6, #1
 800bbd0:	e7ee      	b.n	800bbb0 <__libc_init_array+0xc>
 800bbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd6:	4798      	blx	r3
 800bbd8:	3601      	adds	r6, #1
 800bbda:	e7f2      	b.n	800bbc2 <__libc_init_array+0x1e>
 800bbdc:	0800cc08 	.word	0x0800cc08
 800bbe0:	0800cc08 	.word	0x0800cc08
 800bbe4:	0800cc08 	.word	0x0800cc08
 800bbe8:	0800cc0c 	.word	0x0800cc0c

0800bbec <memset>:
 800bbec:	4402      	add	r2, r0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d100      	bne.n	800bbf6 <memset+0xa>
 800bbf4:	4770      	bx	lr
 800bbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbfa:	e7f9      	b.n	800bbf0 <memset+0x4>
 800bbfc:	0000      	movs	r0, r0
	...

0800bc00 <ceil>:
 800bc00:	ec51 0b10 	vmov	r0, r1, d0
 800bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bc0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bc10:	2e13      	cmp	r6, #19
 800bc12:	ee10 5a10 	vmov	r5, s0
 800bc16:	ee10 8a10 	vmov	r8, s0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	dc30      	bgt.n	800bc80 <ceil+0x80>
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	da12      	bge.n	800bc48 <ceil+0x48>
 800bc22:	a335      	add	r3, pc, #212	; (adr r3, 800bcf8 <ceil+0xf8>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fadc 	bl	80001e4 <__adddf3>
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f7f4 ff1e 	bl	8000a70 <__aeabi_dcmpgt>
 800bc34:	b128      	cbz	r0, 800bc42 <ceil+0x42>
 800bc36:	2c00      	cmp	r4, #0
 800bc38:	db55      	blt.n	800bce6 <ceil+0xe6>
 800bc3a:	432c      	orrs	r4, r5
 800bc3c:	d057      	beq.n	800bcee <ceil+0xee>
 800bc3e:	4c30      	ldr	r4, [pc, #192]	; (800bd00 <ceil+0x100>)
 800bc40:	2500      	movs	r5, #0
 800bc42:	4621      	mov	r1, r4
 800bc44:	4628      	mov	r0, r5
 800bc46:	e025      	b.n	800bc94 <ceil+0x94>
 800bc48:	4f2e      	ldr	r7, [pc, #184]	; (800bd04 <ceil+0x104>)
 800bc4a:	4137      	asrs	r7, r6
 800bc4c:	ea01 0307 	and.w	r3, r1, r7
 800bc50:	4303      	orrs	r3, r0
 800bc52:	d01f      	beq.n	800bc94 <ceil+0x94>
 800bc54:	a328      	add	r3, pc, #160	; (adr r3, 800bcf8 <ceil+0xf8>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fac3 	bl	80001e4 <__adddf3>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2300      	movs	r3, #0
 800bc62:	f7f4 ff05 	bl	8000a70 <__aeabi_dcmpgt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0eb      	beq.n	800bc42 <ceil+0x42>
 800bc6a:	2c00      	cmp	r4, #0
 800bc6c:	bfc2      	ittt	gt
 800bc6e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800bc72:	fa43 f606 	asrgt.w	r6, r3, r6
 800bc76:	19a4      	addgt	r4, r4, r6
 800bc78:	ea24 0407 	bic.w	r4, r4, r7
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	e7e0      	b.n	800bc42 <ceil+0x42>
 800bc80:	2e33      	cmp	r6, #51	; 0x33
 800bc82:	dd0b      	ble.n	800bc9c <ceil+0x9c>
 800bc84:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bc88:	d104      	bne.n	800bc94 <ceil+0x94>
 800bc8a:	ee10 2a10 	vmov	r2, s0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	f7f4 faa8 	bl	80001e4 <__adddf3>
 800bc94:	ec41 0b10 	vmov	d0, r0, r1
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	fa23 f707 	lsr.w	r7, r3, r7
 800bca8:	4207      	tst	r7, r0
 800bcaa:	d0f3      	beq.n	800bc94 <ceil+0x94>
 800bcac:	a312      	add	r3, pc, #72	; (adr r3, 800bcf8 <ceil+0xf8>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	f7f4 fa97 	bl	80001e4 <__adddf3>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f7f4 fed9 	bl	8000a70 <__aeabi_dcmpgt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d0bf      	beq.n	800bc42 <ceil+0x42>
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	dd02      	ble.n	800bccc <ceil+0xcc>
 800bcc6:	2e14      	cmp	r6, #20
 800bcc8:	d103      	bne.n	800bcd2 <ceil+0xd2>
 800bcca:	3401      	adds	r4, #1
 800bccc:	ea25 0507 	bic.w	r5, r5, r7
 800bcd0:	e7b7      	b.n	800bc42 <ceil+0x42>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bcd8:	fa03 f606 	lsl.w	r6, r3, r6
 800bcdc:	4435      	add	r5, r6
 800bcde:	4545      	cmp	r5, r8
 800bce0:	bf38      	it	cc
 800bce2:	18e4      	addcc	r4, r4, r3
 800bce4:	e7f2      	b.n	800bccc <ceil+0xcc>
 800bce6:	2500      	movs	r5, #0
 800bce8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bcec:	e7a9      	b.n	800bc42 <ceil+0x42>
 800bcee:	4625      	mov	r5, r4
 800bcf0:	e7a7      	b.n	800bc42 <ceil+0x42>
 800bcf2:	bf00      	nop
 800bcf4:	f3af 8000 	nop.w
 800bcf8:	8800759c 	.word	0x8800759c
 800bcfc:	7e37e43c 	.word	0x7e37e43c
 800bd00:	3ff00000 	.word	0x3ff00000
 800bd04:	000fffff 	.word	0x000fffff

0800bd08 <pow>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	ed2d 8b02 	vpush	{d8}
 800bd0e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd12:	eef0 8a60 	vmov.f32	s17, s1
 800bd16:	ec55 4b11 	vmov	r4, r5, d1
 800bd1a:	f000 f891 	bl	800be40 <__ieee754_pow>
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	ec57 6b10 	vmov	r6, r7, d0
 800bd2a:	f7f4 feab 	bl	8000a84 <__aeabi_dcmpun>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d13b      	bne.n	800bdaa <pow+0xa2>
 800bd32:	ec51 0b18 	vmov	r0, r1, d8
 800bd36:	2200      	movs	r2, #0
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f7f4 fe71 	bl	8000a20 <__aeabi_dcmpeq>
 800bd3e:	b1b8      	cbz	r0, 800bd70 <pow+0x68>
 800bd40:	2200      	movs	r2, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fe6a 	bl	8000a20 <__aeabi_dcmpeq>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d146      	bne.n	800bdde <pow+0xd6>
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	f000 fe8d 	bl	800ca72 <finite>
 800bd58:	b338      	cbz	r0, 800bdaa <pow+0xa2>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 fe67 	bl	8000a34 <__aeabi_dcmplt>
 800bd66:	b300      	cbz	r0, 800bdaa <pow+0xa2>
 800bd68:	f7ff ff16 	bl	800bb98 <__errno>
 800bd6c:	2322      	movs	r3, #34	; 0x22
 800bd6e:	e01b      	b.n	800bda8 <pow+0xa0>
 800bd70:	ec47 6b10 	vmov	d0, r6, r7
 800bd74:	f000 fe7d 	bl	800ca72 <finite>
 800bd78:	b9e0      	cbnz	r0, 800bdb4 <pow+0xac>
 800bd7a:	eeb0 0a48 	vmov.f32	s0, s16
 800bd7e:	eef0 0a68 	vmov.f32	s1, s17
 800bd82:	f000 fe76 	bl	800ca72 <finite>
 800bd86:	b1a8      	cbz	r0, 800bdb4 <pow+0xac>
 800bd88:	ec45 4b10 	vmov	d0, r4, r5
 800bd8c:	f000 fe71 	bl	800ca72 <finite>
 800bd90:	b180      	cbz	r0, 800bdb4 <pow+0xac>
 800bd92:	4632      	mov	r2, r6
 800bd94:	463b      	mov	r3, r7
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f7f4 fe73 	bl	8000a84 <__aeabi_dcmpun>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d0e2      	beq.n	800bd68 <pow+0x60>
 800bda2:	f7ff fef9 	bl	800bb98 <__errno>
 800bda6:	2321      	movs	r3, #33	; 0x21
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	ecbd 8b02 	vpop	{d8}
 800bdae:	ec47 6b10 	vmov	d0, r6, r7
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 fe30 	bl	8000a20 <__aeabi_dcmpeq>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d0f2      	beq.n	800bdaa <pow+0xa2>
 800bdc4:	eeb0 0a48 	vmov.f32	s0, s16
 800bdc8:	eef0 0a68 	vmov.f32	s1, s17
 800bdcc:	f000 fe51 	bl	800ca72 <finite>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0ea      	beq.n	800bdaa <pow+0xa2>
 800bdd4:	ec45 4b10 	vmov	d0, r4, r5
 800bdd8:	f000 fe4b 	bl	800ca72 <finite>
 800bddc:	e7c3      	b.n	800bd66 <pow+0x5e>
 800bdde:	4f01      	ldr	r7, [pc, #4]	; (800bde4 <pow+0xdc>)
 800bde0:	2600      	movs	r6, #0
 800bde2:	e7e2      	b.n	800bdaa <pow+0xa2>
 800bde4:	3ff00000 	.word	0x3ff00000

0800bde8 <sqrt>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	ed2d 8b02 	vpush	{d8}
 800bdee:	ec55 4b10 	vmov	r4, r5, d0
 800bdf2:	f000 fd53 	bl	800c89c <__ieee754_sqrt>
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	eeb0 8a40 	vmov.f32	s16, s0
 800be02:	eef0 8a60 	vmov.f32	s17, s1
 800be06:	f7f4 fe3d 	bl	8000a84 <__aeabi_dcmpun>
 800be0a:	b990      	cbnz	r0, 800be32 <sqrt+0x4a>
 800be0c:	2200      	movs	r2, #0
 800be0e:	2300      	movs	r3, #0
 800be10:	4620      	mov	r0, r4
 800be12:	4629      	mov	r1, r5
 800be14:	f7f4 fe0e 	bl	8000a34 <__aeabi_dcmplt>
 800be18:	b158      	cbz	r0, 800be32 <sqrt+0x4a>
 800be1a:	f7ff febd 	bl	800bb98 <__errno>
 800be1e:	2321      	movs	r3, #33	; 0x21
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2200      	movs	r2, #0
 800be24:	2300      	movs	r3, #0
 800be26:	4610      	mov	r0, r2
 800be28:	4619      	mov	r1, r3
 800be2a:	f7f4 fcbb 	bl	80007a4 <__aeabi_ddiv>
 800be2e:	ec41 0b18 	vmov	d8, r0, r1
 800be32:	eeb0 0a48 	vmov.f32	s0, s16
 800be36:	eef0 0a68 	vmov.f32	s1, s17
 800be3a:	ecbd 8b02 	vpop	{d8}
 800be3e:	bd38      	pop	{r3, r4, r5, pc}

0800be40 <__ieee754_pow>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	ed2d 8b06 	vpush	{d8-d10}
 800be48:	b089      	sub	sp, #36	; 0x24
 800be4a:	ed8d 1b00 	vstr	d1, [sp]
 800be4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800be52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800be56:	ea58 0102 	orrs.w	r1, r8, r2
 800be5a:	ec57 6b10 	vmov	r6, r7, d0
 800be5e:	d115      	bne.n	800be8c <__ieee754_pow+0x4c>
 800be60:	19b3      	adds	r3, r6, r6
 800be62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800be66:	4152      	adcs	r2, r2
 800be68:	4299      	cmp	r1, r3
 800be6a:	4b89      	ldr	r3, [pc, #548]	; (800c090 <__ieee754_pow+0x250>)
 800be6c:	4193      	sbcs	r3, r2
 800be6e:	f080 84d2 	bcs.w	800c816 <__ieee754_pow+0x9d6>
 800be72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 f9b3 	bl	80001e4 <__adddf3>
 800be7e:	ec41 0b10 	vmov	d0, r0, r1
 800be82:	b009      	add	sp, #36	; 0x24
 800be84:	ecbd 8b06 	vpop	{d8-d10}
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	4b81      	ldr	r3, [pc, #516]	; (800c094 <__ieee754_pow+0x254>)
 800be8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800be92:	429c      	cmp	r4, r3
 800be94:	ee10 aa10 	vmov	sl, s0
 800be98:	463d      	mov	r5, r7
 800be9a:	dc06      	bgt.n	800beaa <__ieee754_pow+0x6a>
 800be9c:	d101      	bne.n	800bea2 <__ieee754_pow+0x62>
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d1e7      	bne.n	800be72 <__ieee754_pow+0x32>
 800bea2:	4598      	cmp	r8, r3
 800bea4:	dc01      	bgt.n	800beaa <__ieee754_pow+0x6a>
 800bea6:	d10f      	bne.n	800bec8 <__ieee754_pow+0x88>
 800bea8:	b172      	cbz	r2, 800bec8 <__ieee754_pow+0x88>
 800beaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800beae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800beb2:	ea55 050a 	orrs.w	r5, r5, sl
 800beb6:	d1dc      	bne.n	800be72 <__ieee754_pow+0x32>
 800beb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bebc:	18db      	adds	r3, r3, r3
 800bebe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bec2:	4152      	adcs	r2, r2
 800bec4:	429d      	cmp	r5, r3
 800bec6:	e7d0      	b.n	800be6a <__ieee754_pow+0x2a>
 800bec8:	2d00      	cmp	r5, #0
 800beca:	da3b      	bge.n	800bf44 <__ieee754_pow+0x104>
 800becc:	4b72      	ldr	r3, [pc, #456]	; (800c098 <__ieee754_pow+0x258>)
 800bece:	4598      	cmp	r8, r3
 800bed0:	dc51      	bgt.n	800bf76 <__ieee754_pow+0x136>
 800bed2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bed6:	4598      	cmp	r8, r3
 800bed8:	f340 84ac 	ble.w	800c834 <__ieee754_pow+0x9f4>
 800bedc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bee4:	2b14      	cmp	r3, #20
 800bee6:	dd0f      	ble.n	800bf08 <__ieee754_pow+0xc8>
 800bee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800beec:	fa22 f103 	lsr.w	r1, r2, r3
 800bef0:	fa01 f303 	lsl.w	r3, r1, r3
 800bef4:	4293      	cmp	r3, r2
 800bef6:	f040 849d 	bne.w	800c834 <__ieee754_pow+0x9f4>
 800befa:	f001 0101 	and.w	r1, r1, #1
 800befe:	f1c1 0302 	rsb	r3, r1, #2
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	b182      	cbz	r2, 800bf28 <__ieee754_pow+0xe8>
 800bf06:	e05f      	b.n	800bfc8 <__ieee754_pow+0x188>
 800bf08:	2a00      	cmp	r2, #0
 800bf0a:	d15b      	bne.n	800bfc4 <__ieee754_pow+0x184>
 800bf0c:	f1c3 0314 	rsb	r3, r3, #20
 800bf10:	fa48 f103 	asr.w	r1, r8, r3
 800bf14:	fa01 f303 	lsl.w	r3, r1, r3
 800bf18:	4543      	cmp	r3, r8
 800bf1a:	f040 8488 	bne.w	800c82e <__ieee754_pow+0x9ee>
 800bf1e:	f001 0101 	and.w	r1, r1, #1
 800bf22:	f1c1 0302 	rsb	r3, r1, #2
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	4b5c      	ldr	r3, [pc, #368]	; (800c09c <__ieee754_pow+0x25c>)
 800bf2a:	4598      	cmp	r8, r3
 800bf2c:	d132      	bne.n	800bf94 <__ieee754_pow+0x154>
 800bf2e:	f1b9 0f00 	cmp.w	r9, #0
 800bf32:	f280 8478 	bge.w	800c826 <__ieee754_pow+0x9e6>
 800bf36:	4959      	ldr	r1, [pc, #356]	; (800c09c <__ieee754_pow+0x25c>)
 800bf38:	4632      	mov	r2, r6
 800bf3a:	463b      	mov	r3, r7
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	f7f4 fc31 	bl	80007a4 <__aeabi_ddiv>
 800bf42:	e79c      	b.n	800be7e <__ieee754_pow+0x3e>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9304      	str	r3, [sp, #16]
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	d13d      	bne.n	800bfc8 <__ieee754_pow+0x188>
 800bf4c:	4b51      	ldr	r3, [pc, #324]	; (800c094 <__ieee754_pow+0x254>)
 800bf4e:	4598      	cmp	r8, r3
 800bf50:	d1ea      	bne.n	800bf28 <__ieee754_pow+0xe8>
 800bf52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bf56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bf5a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf5e:	f000 845a 	beq.w	800c816 <__ieee754_pow+0x9d6>
 800bf62:	4b4f      	ldr	r3, [pc, #316]	; (800c0a0 <__ieee754_pow+0x260>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	dd08      	ble.n	800bf7a <__ieee754_pow+0x13a>
 800bf68:	f1b9 0f00 	cmp.w	r9, #0
 800bf6c:	f2c0 8457 	blt.w	800c81e <__ieee754_pow+0x9de>
 800bf70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf74:	e783      	b.n	800be7e <__ieee754_pow+0x3e>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e7e5      	b.n	800bf46 <__ieee754_pow+0x106>
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	f04f 0000 	mov.w	r0, #0
 800bf82:	f04f 0100 	mov.w	r1, #0
 800bf86:	f6bf af7a 	bge.w	800be7e <__ieee754_pow+0x3e>
 800bf8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bf8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bf92:	e774      	b.n	800be7e <__ieee754_pow+0x3e>
 800bf94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bf98:	d106      	bne.n	800bfa8 <__ieee754_pow+0x168>
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	f7f4 fad5 	bl	8000550 <__aeabi_dmul>
 800bfa6:	e76a      	b.n	800be7e <__ieee754_pow+0x3e>
 800bfa8:	4b3e      	ldr	r3, [pc, #248]	; (800c0a4 <__ieee754_pow+0x264>)
 800bfaa:	4599      	cmp	r9, r3
 800bfac:	d10c      	bne.n	800bfc8 <__ieee754_pow+0x188>
 800bfae:	2d00      	cmp	r5, #0
 800bfb0:	db0a      	blt.n	800bfc8 <__ieee754_pow+0x188>
 800bfb2:	ec47 6b10 	vmov	d0, r6, r7
 800bfb6:	b009      	add	sp, #36	; 0x24
 800bfb8:	ecbd 8b06 	vpop	{d8-d10}
 800bfbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	f000 bc6c 	b.w	800c89c <__ieee754_sqrt>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	ec47 6b10 	vmov	d0, r6, r7
 800bfcc:	f000 fd48 	bl	800ca60 <fabs>
 800bfd0:	ec51 0b10 	vmov	r0, r1, d0
 800bfd4:	f1ba 0f00 	cmp.w	sl, #0
 800bfd8:	d129      	bne.n	800c02e <__ieee754_pow+0x1ee>
 800bfda:	b124      	cbz	r4, 800bfe6 <__ieee754_pow+0x1a6>
 800bfdc:	4b2f      	ldr	r3, [pc, #188]	; (800c09c <__ieee754_pow+0x25c>)
 800bfde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d123      	bne.n	800c02e <__ieee754_pow+0x1ee>
 800bfe6:	f1b9 0f00 	cmp.w	r9, #0
 800bfea:	da05      	bge.n	800bff8 <__ieee754_pow+0x1b8>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	2000      	movs	r0, #0
 800bff2:	492a      	ldr	r1, [pc, #168]	; (800c09c <__ieee754_pow+0x25c>)
 800bff4:	f7f4 fbd6 	bl	80007a4 <__aeabi_ddiv>
 800bff8:	2d00      	cmp	r5, #0
 800bffa:	f6bf af40 	bge.w	800be7e <__ieee754_pow+0x3e>
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c004:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c008:	4323      	orrs	r3, r4
 800c00a:	d108      	bne.n	800c01e <__ieee754_pow+0x1de>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4610      	mov	r0, r2
 800c012:	4619      	mov	r1, r3
 800c014:	f7f4 f8e4 	bl	80001e0 <__aeabi_dsub>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e78f      	b.n	800bf3e <__ieee754_pow+0xfe>
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	2b01      	cmp	r3, #1
 800c022:	f47f af2c 	bne.w	800be7e <__ieee754_pow+0x3e>
 800c026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c02a:	4619      	mov	r1, r3
 800c02c:	e727      	b.n	800be7e <__ieee754_pow+0x3e>
 800c02e:	0feb      	lsrs	r3, r5, #31
 800c030:	3b01      	subs	r3, #1
 800c032:	9306      	str	r3, [sp, #24]
 800c034:	9a06      	ldr	r2, [sp, #24]
 800c036:	9b04      	ldr	r3, [sp, #16]
 800c038:	4313      	orrs	r3, r2
 800c03a:	d102      	bne.n	800c042 <__ieee754_pow+0x202>
 800c03c:	4632      	mov	r2, r6
 800c03e:	463b      	mov	r3, r7
 800c040:	e7e6      	b.n	800c010 <__ieee754_pow+0x1d0>
 800c042:	4b19      	ldr	r3, [pc, #100]	; (800c0a8 <__ieee754_pow+0x268>)
 800c044:	4598      	cmp	r8, r3
 800c046:	f340 80fb 	ble.w	800c240 <__ieee754_pow+0x400>
 800c04a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c04e:	4598      	cmp	r8, r3
 800c050:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <__ieee754_pow+0x260>)
 800c052:	dd0c      	ble.n	800c06e <__ieee754_pow+0x22e>
 800c054:	429c      	cmp	r4, r3
 800c056:	dc0f      	bgt.n	800c078 <__ieee754_pow+0x238>
 800c058:	f1b9 0f00 	cmp.w	r9, #0
 800c05c:	da0f      	bge.n	800c07e <__ieee754_pow+0x23e>
 800c05e:	2000      	movs	r0, #0
 800c060:	b009      	add	sp, #36	; 0x24
 800c062:	ecbd 8b06 	vpop	{d8-d10}
 800c066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06a:	f000 bcf0 	b.w	800ca4e <__math_oflow>
 800c06e:	429c      	cmp	r4, r3
 800c070:	dbf2      	blt.n	800c058 <__ieee754_pow+0x218>
 800c072:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <__ieee754_pow+0x25c>)
 800c074:	429c      	cmp	r4, r3
 800c076:	dd19      	ble.n	800c0ac <__ieee754_pow+0x26c>
 800c078:	f1b9 0f00 	cmp.w	r9, #0
 800c07c:	dcef      	bgt.n	800c05e <__ieee754_pow+0x21e>
 800c07e:	2000      	movs	r0, #0
 800c080:	b009      	add	sp, #36	; 0x24
 800c082:	ecbd 8b06 	vpop	{d8-d10}
 800c086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08a:	f000 bcd7 	b.w	800ca3c <__math_uflow>
 800c08e:	bf00      	nop
 800c090:	fff00000 	.word	0xfff00000
 800c094:	7ff00000 	.word	0x7ff00000
 800c098:	433fffff 	.word	0x433fffff
 800c09c:	3ff00000 	.word	0x3ff00000
 800c0a0:	3fefffff 	.word	0x3fefffff
 800c0a4:	3fe00000 	.word	0x3fe00000
 800c0a8:	41e00000 	.word	0x41e00000
 800c0ac:	4b60      	ldr	r3, [pc, #384]	; (800c230 <__ieee754_pow+0x3f0>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f7f4 f896 	bl	80001e0 <__aeabi_dsub>
 800c0b4:	a354      	add	r3, pc, #336	; (adr r3, 800c208 <__ieee754_pow+0x3c8>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	f7f4 fa47 	bl	8000550 <__aeabi_dmul>
 800c0c2:	a353      	add	r3, pc, #332	; (adr r3, 800c210 <__ieee754_pow+0x3d0>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f7f4 fa3e 	bl	8000550 <__aeabi_dmul>
 800c0d4:	4b57      	ldr	r3, [pc, #348]	; (800c234 <__ieee754_pow+0x3f4>)
 800c0d6:	4682      	mov	sl, r0
 800c0d8:	468b      	mov	fp, r1
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7f4 fa36 	bl	8000550 <__aeabi_dmul>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	a14b      	add	r1, pc, #300	; (adr r1, 800c218 <__ieee754_pow+0x3d8>)
 800c0ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ee:	f7f4 f877 	bl	80001e0 <__aeabi_dsub>
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	f7f4 fa2b 	bl	8000550 <__aeabi_dmul>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	2000      	movs	r0, #0
 800c100:	494d      	ldr	r1, [pc, #308]	; (800c238 <__ieee754_pow+0x3f8>)
 800c102:	f7f4 f86d 	bl	80001e0 <__aeabi_dsub>
 800c106:	4622      	mov	r2, r4
 800c108:	4680      	mov	r8, r0
 800c10a:	4689      	mov	r9, r1
 800c10c:	462b      	mov	r3, r5
 800c10e:	4620      	mov	r0, r4
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 fa1d 	bl	8000550 <__aeabi_dmul>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 fa17 	bl	8000550 <__aeabi_dmul>
 800c122:	a33f      	add	r3, pc, #252	; (adr r3, 800c220 <__ieee754_pow+0x3e0>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 fa12 	bl	8000550 <__aeabi_dmul>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4650      	mov	r0, sl
 800c132:	4659      	mov	r1, fp
 800c134:	f7f4 f854 	bl	80001e0 <__aeabi_dsub>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4680      	mov	r8, r0
 800c13e:	4689      	mov	r9, r1
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 f84e 	bl	80001e4 <__adddf3>
 800c148:	2000      	movs	r0, #0
 800c14a:	4632      	mov	r2, r6
 800c14c:	463b      	mov	r3, r7
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	f7f4 f845 	bl	80001e0 <__aeabi_dsub>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4640      	mov	r0, r8
 800c15c:	4649      	mov	r1, r9
 800c15e:	f7f4 f83f 	bl	80001e0 <__aeabi_dsub>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	9a06      	ldr	r2, [sp, #24]
 800c166:	3b01      	subs	r3, #1
 800c168:	4313      	orrs	r3, r2
 800c16a:	4682      	mov	sl, r0
 800c16c:	468b      	mov	fp, r1
 800c16e:	f040 81e7 	bne.w	800c540 <__ieee754_pow+0x700>
 800c172:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c228 <__ieee754_pow+0x3e8>
 800c176:	eeb0 8a47 	vmov.f32	s16, s14
 800c17a:	eef0 8a67 	vmov.f32	s17, s15
 800c17e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c182:	2600      	movs	r6, #0
 800c184:	4632      	mov	r2, r6
 800c186:	463b      	mov	r3, r7
 800c188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c18c:	f7f4 f828 	bl	80001e0 <__aeabi_dsub>
 800c190:	4622      	mov	r2, r4
 800c192:	462b      	mov	r3, r5
 800c194:	f7f4 f9dc 	bl	8000550 <__aeabi_dmul>
 800c198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c19c:	4680      	mov	r8, r0
 800c19e:	4689      	mov	r9, r1
 800c1a0:	4650      	mov	r0, sl
 800c1a2:	4659      	mov	r1, fp
 800c1a4:	f7f4 f9d4 	bl	8000550 <__aeabi_dmul>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	f7f4 f818 	bl	80001e4 <__adddf3>
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4689      	mov	r9, r1
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 f9c6 	bl	8000550 <__aeabi_dmul>
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	460d      	mov	r5, r1
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7f4 f808 	bl	80001e4 <__adddf3>
 800c1d4:	4b19      	ldr	r3, [pc, #100]	; (800c23c <__ieee754_pow+0x3fc>)
 800c1d6:	4299      	cmp	r1, r3
 800c1d8:	ec45 4b19 	vmov	d9, r4, r5
 800c1dc:	4606      	mov	r6, r0
 800c1de:	460f      	mov	r7, r1
 800c1e0:	468b      	mov	fp, r1
 800c1e2:	f340 82f1 	ble.w	800c7c8 <__ieee754_pow+0x988>
 800c1e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c1ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c1ee:	4303      	orrs	r3, r0
 800c1f0:	f000 81e4 	beq.w	800c5bc <__ieee754_pow+0x77c>
 800c1f4:	ec51 0b18 	vmov	r0, r1, d8
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f7f4 fc1a 	bl	8000a34 <__aeabi_dcmplt>
 800c200:	3800      	subs	r0, #0
 800c202:	bf18      	it	ne
 800c204:	2001      	movne	r0, #1
 800c206:	e72b      	b.n	800c060 <__ieee754_pow+0x220>
 800c208:	60000000 	.word	0x60000000
 800c20c:	3ff71547 	.word	0x3ff71547
 800c210:	f85ddf44 	.word	0xf85ddf44
 800c214:	3e54ae0b 	.word	0x3e54ae0b
 800c218:	55555555 	.word	0x55555555
 800c21c:	3fd55555 	.word	0x3fd55555
 800c220:	652b82fe 	.word	0x652b82fe
 800c224:	3ff71547 	.word	0x3ff71547
 800c228:	00000000 	.word	0x00000000
 800c22c:	bff00000 	.word	0xbff00000
 800c230:	3ff00000 	.word	0x3ff00000
 800c234:	3fd00000 	.word	0x3fd00000
 800c238:	3fe00000 	.word	0x3fe00000
 800c23c:	408fffff 	.word	0x408fffff
 800c240:	4bd5      	ldr	r3, [pc, #852]	; (800c598 <__ieee754_pow+0x758>)
 800c242:	402b      	ands	r3, r5
 800c244:	2200      	movs	r2, #0
 800c246:	b92b      	cbnz	r3, 800c254 <__ieee754_pow+0x414>
 800c248:	4bd4      	ldr	r3, [pc, #848]	; (800c59c <__ieee754_pow+0x75c>)
 800c24a:	f7f4 f981 	bl	8000550 <__aeabi_dmul>
 800c24e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c252:	460c      	mov	r4, r1
 800c254:	1523      	asrs	r3, r4, #20
 800c256:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c25a:	4413      	add	r3, r2
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	4bd0      	ldr	r3, [pc, #832]	; (800c5a0 <__ieee754_pow+0x760>)
 800c260:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c264:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c268:	429c      	cmp	r4, r3
 800c26a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c26e:	dd08      	ble.n	800c282 <__ieee754_pow+0x442>
 800c270:	4bcc      	ldr	r3, [pc, #816]	; (800c5a4 <__ieee754_pow+0x764>)
 800c272:	429c      	cmp	r4, r3
 800c274:	f340 8162 	ble.w	800c53c <__ieee754_pow+0x6fc>
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	3301      	adds	r3, #1
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c282:	2400      	movs	r4, #0
 800c284:	00e3      	lsls	r3, r4, #3
 800c286:	9307      	str	r3, [sp, #28]
 800c288:	4bc7      	ldr	r3, [pc, #796]	; (800c5a8 <__ieee754_pow+0x768>)
 800c28a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c28e:	ed93 7b00 	vldr	d7, [r3]
 800c292:	4629      	mov	r1, r5
 800c294:	ec53 2b17 	vmov	r2, r3, d7
 800c298:	eeb0 9a47 	vmov.f32	s18, s14
 800c29c:	eef0 9a67 	vmov.f32	s19, s15
 800c2a0:	4682      	mov	sl, r0
 800c2a2:	f7f3 ff9d 	bl	80001e0 <__aeabi_dsub>
 800c2a6:	4652      	mov	r2, sl
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	460f      	mov	r7, r1
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	ec51 0b19 	vmov	r0, r1, d9
 800c2b2:	f7f3 ff97 	bl	80001e4 <__adddf3>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	49bb      	ldr	r1, [pc, #748]	; (800c5ac <__ieee754_pow+0x76c>)
 800c2be:	f7f4 fa71 	bl	80007a4 <__aeabi_ddiv>
 800c2c2:	ec41 0b1a 	vmov	d10, r0, r1
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f4 f93f 	bl	8000550 <__aeabi_dmul>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2de:	46ab      	mov	fp, r5
 800c2e0:	106d      	asrs	r5, r5, #1
 800c2e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c2e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c2ea:	ec41 0b18 	vmov	d8, r0, r1
 800c2ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	461d      	mov	r5, r3
 800c2fc:	f7f4 f928 	bl	8000550 <__aeabi_dmul>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	f7f3 ff6a 	bl	80001e0 <__aeabi_dsub>
 800c30c:	ec53 2b19 	vmov	r2, r3, d9
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f7f3 ff62 	bl	80001e0 <__aeabi_dsub>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4650      	mov	r0, sl
 800c322:	4659      	mov	r1, fp
 800c324:	f7f3 ff5c 	bl	80001e0 <__aeabi_dsub>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	f7f4 f910 	bl	8000550 <__aeabi_dmul>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	f7f3 ff52 	bl	80001e0 <__aeabi_dsub>
 800c33c:	ec53 2b1a 	vmov	r2, r3, d10
 800c340:	f7f4 f906 	bl	8000550 <__aeabi_dmul>
 800c344:	ec53 2b18 	vmov	r2, r3, d8
 800c348:	ec41 0b19 	vmov	d9, r0, r1
 800c34c:	ec51 0b18 	vmov	r0, r1, d8
 800c350:	f7f4 f8fe 	bl	8000550 <__aeabi_dmul>
 800c354:	a37c      	add	r3, pc, #496	; (adr r3, 800c548 <__ieee754_pow+0x708>)
 800c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35a:	4604      	mov	r4, r0
 800c35c:	460d      	mov	r5, r1
 800c35e:	f7f4 f8f7 	bl	8000550 <__aeabi_dmul>
 800c362:	a37b      	add	r3, pc, #492	; (adr r3, 800c550 <__ieee754_pow+0x710>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f3 ff3c 	bl	80001e4 <__adddf3>
 800c36c:	4622      	mov	r2, r4
 800c36e:	462b      	mov	r3, r5
 800c370:	f7f4 f8ee 	bl	8000550 <__aeabi_dmul>
 800c374:	a378      	add	r3, pc, #480	; (adr r3, 800c558 <__ieee754_pow+0x718>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	f7f3 ff33 	bl	80001e4 <__adddf3>
 800c37e:	4622      	mov	r2, r4
 800c380:	462b      	mov	r3, r5
 800c382:	f7f4 f8e5 	bl	8000550 <__aeabi_dmul>
 800c386:	a376      	add	r3, pc, #472	; (adr r3, 800c560 <__ieee754_pow+0x720>)
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	f7f3 ff2a 	bl	80001e4 <__adddf3>
 800c390:	4622      	mov	r2, r4
 800c392:	462b      	mov	r3, r5
 800c394:	f7f4 f8dc 	bl	8000550 <__aeabi_dmul>
 800c398:	a373      	add	r3, pc, #460	; (adr r3, 800c568 <__ieee754_pow+0x728>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f7f3 ff21 	bl	80001e4 <__adddf3>
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	462b      	mov	r3, r5
 800c3a6:	f7f4 f8d3 	bl	8000550 <__aeabi_dmul>
 800c3aa:	a371      	add	r3, pc, #452	; (adr r3, 800c570 <__ieee754_pow+0x730>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f3 ff18 	bl	80001e4 <__adddf3>
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	460f      	mov	r7, r1
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f4 f8c6 	bl	8000550 <__aeabi_dmul>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f4 f8c0 	bl	8000550 <__aeabi_dmul>
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	ec51 0b18 	vmov	r0, r1, d8
 800c3dc:	f7f3 ff02 	bl	80001e4 <__adddf3>
 800c3e0:	ec53 2b19 	vmov	r2, r3, d9
 800c3e4:	f7f4 f8b4 	bl	8000550 <__aeabi_dmul>
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	f7f3 fefa 	bl	80001e4 <__adddf3>
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	4682      	mov	sl, r0
 800c3f4:	468b      	mov	fp, r1
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	4640      	mov	r0, r8
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	f7f4 f8a8 	bl	8000550 <__aeabi_dmul>
 800c400:	4b6b      	ldr	r3, [pc, #428]	; (800c5b0 <__ieee754_pow+0x770>)
 800c402:	2200      	movs	r2, #0
 800c404:	4606      	mov	r6, r0
 800c406:	460f      	mov	r7, r1
 800c408:	f7f3 feec 	bl	80001e4 <__adddf3>
 800c40c:	4652      	mov	r2, sl
 800c40e:	465b      	mov	r3, fp
 800c410:	f7f3 fee8 	bl	80001e4 <__adddf3>
 800c414:	2000      	movs	r0, #0
 800c416:	4604      	mov	r4, r0
 800c418:	460d      	mov	r5, r1
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	4640      	mov	r0, r8
 800c420:	4649      	mov	r1, r9
 800c422:	f7f4 f895 	bl	8000550 <__aeabi_dmul>
 800c426:	4b62      	ldr	r3, [pc, #392]	; (800c5b0 <__ieee754_pow+0x770>)
 800c428:	4680      	mov	r8, r0
 800c42a:	4689      	mov	r9, r1
 800c42c:	2200      	movs	r2, #0
 800c42e:	4620      	mov	r0, r4
 800c430:	4629      	mov	r1, r5
 800c432:	f7f3 fed5 	bl	80001e0 <__aeabi_dsub>
 800c436:	4632      	mov	r2, r6
 800c438:	463b      	mov	r3, r7
 800c43a:	f7f3 fed1 	bl	80001e0 <__aeabi_dsub>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4650      	mov	r0, sl
 800c444:	4659      	mov	r1, fp
 800c446:	f7f3 fecb 	bl	80001e0 <__aeabi_dsub>
 800c44a:	ec53 2b18 	vmov	r2, r3, d8
 800c44e:	f7f4 f87f 	bl	8000550 <__aeabi_dmul>
 800c452:	4622      	mov	r2, r4
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	462b      	mov	r3, r5
 800c45a:	ec51 0b19 	vmov	r0, r1, d9
 800c45e:	f7f4 f877 	bl	8000550 <__aeabi_dmul>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4630      	mov	r0, r6
 800c468:	4639      	mov	r1, r7
 800c46a:	f7f3 febb 	bl	80001e4 <__adddf3>
 800c46e:	4606      	mov	r6, r0
 800c470:	460f      	mov	r7, r1
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4640      	mov	r0, r8
 800c478:	4649      	mov	r1, r9
 800c47a:	f7f3 feb3 	bl	80001e4 <__adddf3>
 800c47e:	a33e      	add	r3, pc, #248	; (adr r3, 800c578 <__ieee754_pow+0x738>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	2000      	movs	r0, #0
 800c486:	4604      	mov	r4, r0
 800c488:	460d      	mov	r5, r1
 800c48a:	f7f4 f861 	bl	8000550 <__aeabi_dmul>
 800c48e:	4642      	mov	r2, r8
 800c490:	ec41 0b18 	vmov	d8, r0, r1
 800c494:	464b      	mov	r3, r9
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f3 fea1 	bl	80001e0 <__aeabi_dsub>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f3 fe9b 	bl	80001e0 <__aeabi_dsub>
 800c4aa:	a335      	add	r3, pc, #212	; (adr r3, 800c580 <__ieee754_pow+0x740>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f7f4 f84e 	bl	8000550 <__aeabi_dmul>
 800c4b4:	a334      	add	r3, pc, #208	; (adr r3, 800c588 <__ieee754_pow+0x748>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f4 f845 	bl	8000550 <__aeabi_dmul>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f3 fe89 	bl	80001e4 <__adddf3>
 800c4d2:	9a07      	ldr	r2, [sp, #28]
 800c4d4:	4b37      	ldr	r3, [pc, #220]	; (800c5b4 <__ieee754_pow+0x774>)
 800c4d6:	4413      	add	r3, r2
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	f7f3 fe82 	bl	80001e4 <__adddf3>
 800c4e0:	4682      	mov	sl, r0
 800c4e2:	9805      	ldr	r0, [sp, #20]
 800c4e4:	468b      	mov	fp, r1
 800c4e6:	f7f3 ffc9 	bl	800047c <__aeabi_i2d>
 800c4ea:	9a07      	ldr	r2, [sp, #28]
 800c4ec:	4b32      	ldr	r3, [pc, #200]	; (800c5b8 <__ieee754_pow+0x778>)
 800c4ee:	4413      	add	r3, r2
 800c4f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	460f      	mov	r7, r1
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	465b      	mov	r3, fp
 800c4fc:	ec51 0b18 	vmov	r0, r1, d8
 800c500:	f7f3 fe70 	bl	80001e4 <__adddf3>
 800c504:	4642      	mov	r2, r8
 800c506:	464b      	mov	r3, r9
 800c508:	f7f3 fe6c 	bl	80001e4 <__adddf3>
 800c50c:	4632      	mov	r2, r6
 800c50e:	463b      	mov	r3, r7
 800c510:	f7f3 fe68 	bl	80001e4 <__adddf3>
 800c514:	2000      	movs	r0, #0
 800c516:	4632      	mov	r2, r6
 800c518:	463b      	mov	r3, r7
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	f7f3 fe5f 	bl	80001e0 <__aeabi_dsub>
 800c522:	4642      	mov	r2, r8
 800c524:	464b      	mov	r3, r9
 800c526:	f7f3 fe5b 	bl	80001e0 <__aeabi_dsub>
 800c52a:	ec53 2b18 	vmov	r2, r3, d8
 800c52e:	f7f3 fe57 	bl	80001e0 <__aeabi_dsub>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4650      	mov	r0, sl
 800c538:	4659      	mov	r1, fp
 800c53a:	e610      	b.n	800c15e <__ieee754_pow+0x31e>
 800c53c:	2401      	movs	r4, #1
 800c53e:	e6a1      	b.n	800c284 <__ieee754_pow+0x444>
 800c540:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c590 <__ieee754_pow+0x750>
 800c544:	e617      	b.n	800c176 <__ieee754_pow+0x336>
 800c546:	bf00      	nop
 800c548:	4a454eef 	.word	0x4a454eef
 800c54c:	3fca7e28 	.word	0x3fca7e28
 800c550:	93c9db65 	.word	0x93c9db65
 800c554:	3fcd864a 	.word	0x3fcd864a
 800c558:	a91d4101 	.word	0xa91d4101
 800c55c:	3fd17460 	.word	0x3fd17460
 800c560:	518f264d 	.word	0x518f264d
 800c564:	3fd55555 	.word	0x3fd55555
 800c568:	db6fabff 	.word	0xdb6fabff
 800c56c:	3fdb6db6 	.word	0x3fdb6db6
 800c570:	33333303 	.word	0x33333303
 800c574:	3fe33333 	.word	0x3fe33333
 800c578:	e0000000 	.word	0xe0000000
 800c57c:	3feec709 	.word	0x3feec709
 800c580:	dc3a03fd 	.word	0xdc3a03fd
 800c584:	3feec709 	.word	0x3feec709
 800c588:	145b01f5 	.word	0x145b01f5
 800c58c:	be3e2fe0 	.word	0xbe3e2fe0
 800c590:	00000000 	.word	0x00000000
 800c594:	3ff00000 	.word	0x3ff00000
 800c598:	7ff00000 	.word	0x7ff00000
 800c59c:	43400000 	.word	0x43400000
 800c5a0:	0003988e 	.word	0x0003988e
 800c5a4:	000bb679 	.word	0x000bb679
 800c5a8:	0800cbd0 	.word	0x0800cbd0
 800c5ac:	3ff00000 	.word	0x3ff00000
 800c5b0:	40080000 	.word	0x40080000
 800c5b4:	0800cbf0 	.word	0x0800cbf0
 800c5b8:	0800cbe0 	.word	0x0800cbe0
 800c5bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c894 <__ieee754_pow+0xa54>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	4649      	mov	r1, r9
 800c5c6:	f7f3 fe0d 	bl	80001e4 <__adddf3>
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	ec41 0b1a 	vmov	d10, r0, r1
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	f7f3 fe03 	bl	80001e0 <__aeabi_dsub>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	ec51 0b1a 	vmov	r0, r1, d10
 800c5e2:	f7f4 fa45 	bl	8000a70 <__aeabi_dcmpgt>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	f47f ae04 	bne.w	800c1f4 <__ieee754_pow+0x3b4>
 800c5ec:	4aa4      	ldr	r2, [pc, #656]	; (800c880 <__ieee754_pow+0xa40>)
 800c5ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	f340 8108 	ble.w	800c808 <__ieee754_pow+0x9c8>
 800c5f8:	151b      	asrs	r3, r3, #20
 800c5fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c5fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c602:	fa4a f303 	asr.w	r3, sl, r3
 800c606:	445b      	add	r3, fp
 800c608:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c60c:	4e9d      	ldr	r6, [pc, #628]	; (800c884 <__ieee754_pow+0xa44>)
 800c60e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c612:	4116      	asrs	r6, r2
 800c614:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c618:	2000      	movs	r0, #0
 800c61a:	ea23 0106 	bic.w	r1, r3, r6
 800c61e:	f1c2 0214 	rsb	r2, r2, #20
 800c622:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c626:	fa4a fa02 	asr.w	sl, sl, r2
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4620      	mov	r0, r4
 800c634:	4629      	mov	r1, r5
 800c636:	bfb8      	it	lt
 800c638:	f1ca 0a00 	rsblt	sl, sl, #0
 800c63c:	f7f3 fdd0 	bl	80001e0 <__aeabi_dsub>
 800c640:	ec41 0b19 	vmov	d9, r0, r1
 800c644:	4642      	mov	r2, r8
 800c646:	464b      	mov	r3, r9
 800c648:	ec51 0b19 	vmov	r0, r1, d9
 800c64c:	f7f3 fdca 	bl	80001e4 <__adddf3>
 800c650:	a37b      	add	r3, pc, #492	; (adr r3, 800c840 <__ieee754_pow+0xa00>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	2000      	movs	r0, #0
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	f7f3 ff78 	bl	8000550 <__aeabi_dmul>
 800c660:	ec53 2b19 	vmov	r2, r3, d9
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fdb8 	bl	80001e0 <__aeabi_dsub>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4640      	mov	r0, r8
 800c676:	4649      	mov	r1, r9
 800c678:	f7f3 fdb2 	bl	80001e0 <__aeabi_dsub>
 800c67c:	a372      	add	r3, pc, #456	; (adr r3, 800c848 <__ieee754_pow+0xa08>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 ff65 	bl	8000550 <__aeabi_dmul>
 800c686:	a372      	add	r3, pc, #456	; (adr r3, 800c850 <__ieee754_pow+0xa10>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	4620      	mov	r0, r4
 800c692:	4629      	mov	r1, r5
 800c694:	f7f3 ff5c 	bl	8000550 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4640      	mov	r0, r8
 800c69e:	4649      	mov	r1, r9
 800c6a0:	f7f3 fda0 	bl	80001e4 <__adddf3>
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f3 fd98 	bl	80001e4 <__adddf3>
 800c6b4:	4632      	mov	r2, r6
 800c6b6:	463b      	mov	r3, r7
 800c6b8:	4680      	mov	r8, r0
 800c6ba:	4689      	mov	r9, r1
 800c6bc:	f7f3 fd90 	bl	80001e0 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f3 fd8a 	bl	80001e0 <__aeabi_dsub>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	f7f3 ff3a 	bl	8000550 <__aeabi_dmul>
 800c6dc:	a35e      	add	r3, pc, #376	; (adr r3, 800c858 <__ieee754_pow+0xa18>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	f7f3 ff33 	bl	8000550 <__aeabi_dmul>
 800c6ea:	a35d      	add	r3, pc, #372	; (adr r3, 800c860 <__ieee754_pow+0xa20>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fd76 	bl	80001e0 <__aeabi_dsub>
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	f7f3 ff2a 	bl	8000550 <__aeabi_dmul>
 800c6fc:	a35a      	add	r3, pc, #360	; (adr r3, 800c868 <__ieee754_pow+0xa28>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fd6f 	bl	80001e4 <__adddf3>
 800c706:	4622      	mov	r2, r4
 800c708:	462b      	mov	r3, r5
 800c70a:	f7f3 ff21 	bl	8000550 <__aeabi_dmul>
 800c70e:	a358      	add	r3, pc, #352	; (adr r3, 800c870 <__ieee754_pow+0xa30>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f7f3 fd64 	bl	80001e0 <__aeabi_dsub>
 800c718:	4622      	mov	r2, r4
 800c71a:	462b      	mov	r3, r5
 800c71c:	f7f3 ff18 	bl	8000550 <__aeabi_dmul>
 800c720:	a355      	add	r3, pc, #340	; (adr r3, 800c878 <__ieee754_pow+0xa38>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 fd5d 	bl	80001e4 <__adddf3>
 800c72a:	4622      	mov	r2, r4
 800c72c:	462b      	mov	r3, r5
 800c72e:	f7f3 ff0f 	bl	8000550 <__aeabi_dmul>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4640      	mov	r0, r8
 800c738:	4649      	mov	r1, r9
 800c73a:	f7f3 fd51 	bl	80001e0 <__aeabi_dsub>
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4640      	mov	r0, r8
 800c748:	4649      	mov	r1, r9
 800c74a:	f7f3 ff01 	bl	8000550 <__aeabi_dmul>
 800c74e:	2200      	movs	r2, #0
 800c750:	ec41 0b19 	vmov	d9, r0, r1
 800c754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c758:	4620      	mov	r0, r4
 800c75a:	4629      	mov	r1, r5
 800c75c:	f7f3 fd40 	bl	80001e0 <__aeabi_dsub>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	ec51 0b19 	vmov	r0, r1, d9
 800c768:	f7f4 f81c 	bl	80007a4 <__aeabi_ddiv>
 800c76c:	4632      	mov	r2, r6
 800c76e:	4604      	mov	r4, r0
 800c770:	460d      	mov	r5, r1
 800c772:	463b      	mov	r3, r7
 800c774:	4640      	mov	r0, r8
 800c776:	4649      	mov	r1, r9
 800c778:	f7f3 feea 	bl	8000550 <__aeabi_dmul>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	f7f3 fd30 	bl	80001e4 <__adddf3>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4620      	mov	r0, r4
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7f3 fd28 	bl	80001e0 <__aeabi_dsub>
 800c790:	4642      	mov	r2, r8
 800c792:	464b      	mov	r3, r9
 800c794:	f7f3 fd24 	bl	80001e0 <__aeabi_dsub>
 800c798:	460b      	mov	r3, r1
 800c79a:	4602      	mov	r2, r0
 800c79c:	493a      	ldr	r1, [pc, #232]	; (800c888 <__ieee754_pow+0xa48>)
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f7f3 fd1e 	bl	80001e0 <__aeabi_dsub>
 800c7a4:	ec41 0b10 	vmov	d0, r0, r1
 800c7a8:	ee10 3a90 	vmov	r3, s1
 800c7ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c7b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7b4:	da2b      	bge.n	800c80e <__ieee754_pow+0x9ce>
 800c7b6:	4650      	mov	r0, sl
 800c7b8:	f000 f966 	bl	800ca88 <scalbn>
 800c7bc:	ec51 0b10 	vmov	r0, r1, d0
 800c7c0:	ec53 2b18 	vmov	r2, r3, d8
 800c7c4:	f7ff bbed 	b.w	800bfa2 <__ieee754_pow+0x162>
 800c7c8:	4b30      	ldr	r3, [pc, #192]	; (800c88c <__ieee754_pow+0xa4c>)
 800c7ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	f77f af0c 	ble.w	800c5ec <__ieee754_pow+0x7ac>
 800c7d4:	4b2e      	ldr	r3, [pc, #184]	; (800c890 <__ieee754_pow+0xa50>)
 800c7d6:	440b      	add	r3, r1
 800c7d8:	4303      	orrs	r3, r0
 800c7da:	d009      	beq.n	800c7f0 <__ieee754_pow+0x9b0>
 800c7dc:	ec51 0b18 	vmov	r0, r1, d8
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f7f4 f926 	bl	8000a34 <__aeabi_dcmplt>
 800c7e8:	3800      	subs	r0, #0
 800c7ea:	bf18      	it	ne
 800c7ec:	2001      	movne	r0, #1
 800c7ee:	e447      	b.n	800c080 <__ieee754_pow+0x240>
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	f7f3 fcf4 	bl	80001e0 <__aeabi_dsub>
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	f7f4 f92e 	bl	8000a5c <__aeabi_dcmpge>
 800c800:	2800      	cmp	r0, #0
 800c802:	f43f aef3 	beq.w	800c5ec <__ieee754_pow+0x7ac>
 800c806:	e7e9      	b.n	800c7dc <__ieee754_pow+0x99c>
 800c808:	f04f 0a00 	mov.w	sl, #0
 800c80c:	e71a      	b.n	800c644 <__ieee754_pow+0x804>
 800c80e:	ec51 0b10 	vmov	r0, r1, d0
 800c812:	4619      	mov	r1, r3
 800c814:	e7d4      	b.n	800c7c0 <__ieee754_pow+0x980>
 800c816:	491c      	ldr	r1, [pc, #112]	; (800c888 <__ieee754_pow+0xa48>)
 800c818:	2000      	movs	r0, #0
 800c81a:	f7ff bb30 	b.w	800be7e <__ieee754_pow+0x3e>
 800c81e:	2000      	movs	r0, #0
 800c820:	2100      	movs	r1, #0
 800c822:	f7ff bb2c 	b.w	800be7e <__ieee754_pow+0x3e>
 800c826:	4630      	mov	r0, r6
 800c828:	4639      	mov	r1, r7
 800c82a:	f7ff bb28 	b.w	800be7e <__ieee754_pow+0x3e>
 800c82e:	9204      	str	r2, [sp, #16]
 800c830:	f7ff bb7a 	b.w	800bf28 <__ieee754_pow+0xe8>
 800c834:	2300      	movs	r3, #0
 800c836:	f7ff bb64 	b.w	800bf02 <__ieee754_pow+0xc2>
 800c83a:	bf00      	nop
 800c83c:	f3af 8000 	nop.w
 800c840:	00000000 	.word	0x00000000
 800c844:	3fe62e43 	.word	0x3fe62e43
 800c848:	fefa39ef 	.word	0xfefa39ef
 800c84c:	3fe62e42 	.word	0x3fe62e42
 800c850:	0ca86c39 	.word	0x0ca86c39
 800c854:	be205c61 	.word	0xbe205c61
 800c858:	72bea4d0 	.word	0x72bea4d0
 800c85c:	3e663769 	.word	0x3e663769
 800c860:	c5d26bf1 	.word	0xc5d26bf1
 800c864:	3ebbbd41 	.word	0x3ebbbd41
 800c868:	af25de2c 	.word	0xaf25de2c
 800c86c:	3f11566a 	.word	0x3f11566a
 800c870:	16bebd93 	.word	0x16bebd93
 800c874:	3f66c16c 	.word	0x3f66c16c
 800c878:	5555553e 	.word	0x5555553e
 800c87c:	3fc55555 	.word	0x3fc55555
 800c880:	3fe00000 	.word	0x3fe00000
 800c884:	000fffff 	.word	0x000fffff
 800c888:	3ff00000 	.word	0x3ff00000
 800c88c:	4090cbff 	.word	0x4090cbff
 800c890:	3f6f3400 	.word	0x3f6f3400
 800c894:	652b82fe 	.word	0x652b82fe
 800c898:	3c971547 	.word	0x3c971547

0800c89c <__ieee754_sqrt>:
 800c89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a0:	ec55 4b10 	vmov	r4, r5, d0
 800c8a4:	4e55      	ldr	r6, [pc, #340]	; (800c9fc <__ieee754_sqrt+0x160>)
 800c8a6:	43ae      	bics	r6, r5
 800c8a8:	ee10 0a10 	vmov	r0, s0
 800c8ac:	ee10 3a10 	vmov	r3, s0
 800c8b0:	462a      	mov	r2, r5
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	d110      	bne.n	800c8d8 <__ieee754_sqrt+0x3c>
 800c8b6:	ee10 2a10 	vmov	r2, s0
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	f7f3 fe48 	bl	8000550 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f7f3 fc8c 	bl	80001e4 <__adddf3>
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	ec45 4b10 	vmov	d0, r4, r5
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	2d00      	cmp	r5, #0
 800c8da:	dc10      	bgt.n	800c8fe <__ieee754_sqrt+0x62>
 800c8dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8e0:	4330      	orrs	r0, r6
 800c8e2:	d0f5      	beq.n	800c8d0 <__ieee754_sqrt+0x34>
 800c8e4:	b15d      	cbz	r5, 800c8fe <__ieee754_sqrt+0x62>
 800c8e6:	ee10 2a10 	vmov	r2, s0
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	ee10 0a10 	vmov	r0, s0
 800c8f0:	f7f3 fc76 	bl	80001e0 <__aeabi_dsub>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	f7f3 ff54 	bl	80007a4 <__aeabi_ddiv>
 800c8fc:	e7e6      	b.n	800c8cc <__ieee754_sqrt+0x30>
 800c8fe:	1512      	asrs	r2, r2, #20
 800c900:	d074      	beq.n	800c9ec <__ieee754_sqrt+0x150>
 800c902:	07d4      	lsls	r4, r2, #31
 800c904:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c908:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c90c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c910:	bf5e      	ittt	pl
 800c912:	0fda      	lsrpl	r2, r3, #31
 800c914:	005b      	lslpl	r3, r3, #1
 800c916:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c91a:	2400      	movs	r4, #0
 800c91c:	0fda      	lsrs	r2, r3, #31
 800c91e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c922:	107f      	asrs	r7, r7, #1
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	2516      	movs	r5, #22
 800c928:	4620      	mov	r0, r4
 800c92a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c92e:	1886      	adds	r6, r0, r2
 800c930:	428e      	cmp	r6, r1
 800c932:	bfde      	ittt	le
 800c934:	1b89      	suble	r1, r1, r6
 800c936:	18b0      	addle	r0, r6, r2
 800c938:	18a4      	addle	r4, r4, r2
 800c93a:	0049      	lsls	r1, r1, #1
 800c93c:	3d01      	subs	r5, #1
 800c93e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c942:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c94a:	d1f0      	bne.n	800c92e <__ieee754_sqrt+0x92>
 800c94c:	462a      	mov	r2, r5
 800c94e:	f04f 0e20 	mov.w	lr, #32
 800c952:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c956:	4281      	cmp	r1, r0
 800c958:	eb06 0c05 	add.w	ip, r6, r5
 800c95c:	dc02      	bgt.n	800c964 <__ieee754_sqrt+0xc8>
 800c95e:	d113      	bne.n	800c988 <__ieee754_sqrt+0xec>
 800c960:	459c      	cmp	ip, r3
 800c962:	d811      	bhi.n	800c988 <__ieee754_sqrt+0xec>
 800c964:	f1bc 0f00 	cmp.w	ip, #0
 800c968:	eb0c 0506 	add.w	r5, ip, r6
 800c96c:	da43      	bge.n	800c9f6 <__ieee754_sqrt+0x15a>
 800c96e:	2d00      	cmp	r5, #0
 800c970:	db41      	blt.n	800c9f6 <__ieee754_sqrt+0x15a>
 800c972:	f100 0801 	add.w	r8, r0, #1
 800c976:	1a09      	subs	r1, r1, r0
 800c978:	459c      	cmp	ip, r3
 800c97a:	bf88      	it	hi
 800c97c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c980:	eba3 030c 	sub.w	r3, r3, ip
 800c984:	4432      	add	r2, r6
 800c986:	4640      	mov	r0, r8
 800c988:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c98c:	f1be 0e01 	subs.w	lr, lr, #1
 800c990:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c998:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c99c:	d1db      	bne.n	800c956 <__ieee754_sqrt+0xba>
 800c99e:	430b      	orrs	r3, r1
 800c9a0:	d006      	beq.n	800c9b0 <__ieee754_sqrt+0x114>
 800c9a2:	1c50      	adds	r0, r2, #1
 800c9a4:	bf13      	iteet	ne
 800c9a6:	3201      	addne	r2, #1
 800c9a8:	3401      	addeq	r4, #1
 800c9aa:	4672      	moveq	r2, lr
 800c9ac:	f022 0201 	bicne.w	r2, r2, #1
 800c9b0:	1063      	asrs	r3, r4, #1
 800c9b2:	0852      	lsrs	r2, r2, #1
 800c9b4:	07e1      	lsls	r1, r4, #31
 800c9b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c9ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9be:	bf48      	it	mi
 800c9c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c9c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c9c8:	4614      	mov	r4, r2
 800c9ca:	e781      	b.n	800c8d0 <__ieee754_sqrt+0x34>
 800c9cc:	0ad9      	lsrs	r1, r3, #11
 800c9ce:	3815      	subs	r0, #21
 800c9d0:	055b      	lsls	r3, r3, #21
 800c9d2:	2900      	cmp	r1, #0
 800c9d4:	d0fa      	beq.n	800c9cc <__ieee754_sqrt+0x130>
 800c9d6:	02cd      	lsls	r5, r1, #11
 800c9d8:	d50a      	bpl.n	800c9f0 <__ieee754_sqrt+0x154>
 800c9da:	f1c2 0420 	rsb	r4, r2, #32
 800c9de:	fa23 f404 	lsr.w	r4, r3, r4
 800c9e2:	1e55      	subs	r5, r2, #1
 800c9e4:	4093      	lsls	r3, r2
 800c9e6:	4321      	orrs	r1, r4
 800c9e8:	1b42      	subs	r2, r0, r5
 800c9ea:	e78a      	b.n	800c902 <__ieee754_sqrt+0x66>
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	e7f0      	b.n	800c9d2 <__ieee754_sqrt+0x136>
 800c9f0:	0049      	lsls	r1, r1, #1
 800c9f2:	3201      	adds	r2, #1
 800c9f4:	e7ef      	b.n	800c9d6 <__ieee754_sqrt+0x13a>
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	e7bd      	b.n	800c976 <__ieee754_sqrt+0xda>
 800c9fa:	bf00      	nop
 800c9fc:	7ff00000 	.word	0x7ff00000

0800ca00 <with_errno>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	4604      	mov	r4, r0
 800ca04:	460d      	mov	r5, r1
 800ca06:	4616      	mov	r6, r2
 800ca08:	f7ff f8c6 	bl	800bb98 <__errno>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	6006      	str	r6, [r0, #0]
 800ca10:	4620      	mov	r0, r4
 800ca12:	bd70      	pop	{r4, r5, r6, pc}

0800ca14 <xflow>:
 800ca14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca16:	4614      	mov	r4, r2
 800ca18:	461d      	mov	r5, r3
 800ca1a:	b108      	cbz	r0, 800ca20 <xflow+0xc>
 800ca1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca20:	e9cd 2300 	strd	r2, r3, [sp]
 800ca24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7f3 fd90 	bl	8000550 <__aeabi_dmul>
 800ca30:	2222      	movs	r2, #34	; 0x22
 800ca32:	b003      	add	sp, #12
 800ca34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca38:	f7ff bfe2 	b.w	800ca00 <with_errno>

0800ca3c <__math_uflow>:
 800ca3c:	b508      	push	{r3, lr}
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca44:	f7ff ffe6 	bl	800ca14 <xflow>
 800ca48:	ec41 0b10 	vmov	d0, r0, r1
 800ca4c:	bd08      	pop	{r3, pc}

0800ca4e <__math_oflow>:
 800ca4e:	b508      	push	{r3, lr}
 800ca50:	2200      	movs	r2, #0
 800ca52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca56:	f7ff ffdd 	bl	800ca14 <xflow>
 800ca5a:	ec41 0b10 	vmov	d0, r0, r1
 800ca5e:	bd08      	pop	{r3, pc}

0800ca60 <fabs>:
 800ca60:	ec51 0b10 	vmov	r0, r1, d0
 800ca64:	ee10 2a10 	vmov	r2, s0
 800ca68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca6c:	ec43 2b10 	vmov	d0, r2, r3
 800ca70:	4770      	bx	lr

0800ca72 <finite>:
 800ca72:	b082      	sub	sp, #8
 800ca74:	ed8d 0b00 	vstr	d0, [sp]
 800ca78:	9801      	ldr	r0, [sp, #4]
 800ca7a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ca7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ca82:	0fc0      	lsrs	r0, r0, #31
 800ca84:	b002      	add	sp, #8
 800ca86:	4770      	bx	lr

0800ca88 <scalbn>:
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	ec55 4b10 	vmov	r4, r5, d0
 800ca8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ca92:	4606      	mov	r6, r0
 800ca94:	462b      	mov	r3, r5
 800ca96:	b99a      	cbnz	r2, 800cac0 <scalbn+0x38>
 800ca98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca9c:	4323      	orrs	r3, r4
 800ca9e:	d036      	beq.n	800cb0e <scalbn+0x86>
 800caa0:	4b39      	ldr	r3, [pc, #228]	; (800cb88 <scalbn+0x100>)
 800caa2:	4629      	mov	r1, r5
 800caa4:	ee10 0a10 	vmov	r0, s0
 800caa8:	2200      	movs	r2, #0
 800caaa:	f7f3 fd51 	bl	8000550 <__aeabi_dmul>
 800caae:	4b37      	ldr	r3, [pc, #220]	; (800cb8c <scalbn+0x104>)
 800cab0:	429e      	cmp	r6, r3
 800cab2:	4604      	mov	r4, r0
 800cab4:	460d      	mov	r5, r1
 800cab6:	da10      	bge.n	800cada <scalbn+0x52>
 800cab8:	a32b      	add	r3, pc, #172	; (adr r3, 800cb68 <scalbn+0xe0>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	e03a      	b.n	800cb36 <scalbn+0xae>
 800cac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cac4:	428a      	cmp	r2, r1
 800cac6:	d10c      	bne.n	800cae2 <scalbn+0x5a>
 800cac8:	ee10 2a10 	vmov	r2, s0
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fb88 	bl	80001e4 <__adddf3>
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	e019      	b.n	800cb0e <scalbn+0x86>
 800cada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cade:	460b      	mov	r3, r1
 800cae0:	3a36      	subs	r2, #54	; 0x36
 800cae2:	4432      	add	r2, r6
 800cae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cae8:	428a      	cmp	r2, r1
 800caea:	dd08      	ble.n	800cafe <scalbn+0x76>
 800caec:	2d00      	cmp	r5, #0
 800caee:	a120      	add	r1, pc, #128	; (adr r1, 800cb70 <scalbn+0xe8>)
 800caf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caf4:	da1c      	bge.n	800cb30 <scalbn+0xa8>
 800caf6:	a120      	add	r1, pc, #128	; (adr r1, 800cb78 <scalbn+0xf0>)
 800caf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cafc:	e018      	b.n	800cb30 <scalbn+0xa8>
 800cafe:	2a00      	cmp	r2, #0
 800cb00:	dd08      	ble.n	800cb14 <scalbn+0x8c>
 800cb02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb0e:	ec45 4b10 	vmov	d0, r4, r5
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb18:	da19      	bge.n	800cb4e <scalbn+0xc6>
 800cb1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb1e:	429e      	cmp	r6, r3
 800cb20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cb24:	dd0a      	ble.n	800cb3c <scalbn+0xb4>
 800cb26:	a112      	add	r1, pc, #72	; (adr r1, 800cb70 <scalbn+0xe8>)
 800cb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e2      	bne.n	800caf6 <scalbn+0x6e>
 800cb30:	a30f      	add	r3, pc, #60	; (adr r3, 800cb70 <scalbn+0xe8>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fd0b 	bl	8000550 <__aeabi_dmul>
 800cb3a:	e7cb      	b.n	800cad4 <scalbn+0x4c>
 800cb3c:	a10a      	add	r1, pc, #40	; (adr r1, 800cb68 <scalbn+0xe0>)
 800cb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0b8      	beq.n	800cab8 <scalbn+0x30>
 800cb46:	a10e      	add	r1, pc, #56	; (adr r1, 800cb80 <scalbn+0xf8>)
 800cb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb4c:	e7b4      	b.n	800cab8 <scalbn+0x30>
 800cb4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb52:	3236      	adds	r2, #54	; 0x36
 800cb54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <scalbn+0x108>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	e7e8      	b.n	800cb36 <scalbn+0xae>
 800cb64:	f3af 8000 	nop.w
 800cb68:	c2f8f359 	.word	0xc2f8f359
 800cb6c:	01a56e1f 	.word	0x01a56e1f
 800cb70:	8800759c 	.word	0x8800759c
 800cb74:	7e37e43c 	.word	0x7e37e43c
 800cb78:	8800759c 	.word	0x8800759c
 800cb7c:	fe37e43c 	.word	0xfe37e43c
 800cb80:	c2f8f359 	.word	0xc2f8f359
 800cb84:	81a56e1f 	.word	0x81a56e1f
 800cb88:	43500000 	.word	0x43500000
 800cb8c:	ffff3cb0 	.word	0xffff3cb0
 800cb90:	3c900000 	.word	0x3c900000

0800cb94 <_init>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr

0800cba0 <_fini>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr
