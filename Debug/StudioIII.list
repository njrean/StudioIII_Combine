
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d040  0800d040  0001d040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d090  0800d090  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800d090  0800d090  0001d090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d098  0800d098  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d098  0800d098  0001d098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d09c  0800d09c  0001d09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800d0a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000150  0800d1f0  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800d1f0  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015967  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  00035ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00038460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8e  00000000  00000000  0003a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134c6  00000000  00000000  00050efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091974  00000000  00000000  000643c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f5d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  000f5e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fa8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000150 	.word	0x20000150
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d024 	.word	0x0800d024

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000154 	.word	0x20000154
 80001d4:	0800d024 	.word	0x0800d024

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 fbb9 	bl	8005614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f94d 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fb9b 	bl	80015e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fb71 	bl	8001590 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f9af 	bl	8001210 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9db 	bl	800126c <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb1b 	bl	80014f0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa77 	bl	80013ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fac9 	bl	8001454 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fb39 	bl	8001538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f004 fc16 	bl	80056f8 <HAL_Delay>
  setmatrix();
 8000ecc:	f000 fec4 	bl	8001c58 <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	4881      	ldr	r0, [pc, #516]	; (80010d8 <main+0x240>)
 8000ed2:	f008 fb11 	bl	80094f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	487f      	ldr	r0, [pc, #508]	; (80010d8 <main+0x240>)
 8000eda:	f008 fc23 	bl	8009724 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	487e      	ldr	r0, [pc, #504]	; (80010dc <main+0x244>)
 8000ee2:	f008 fd75 	bl	80099d0 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	487e      	ldr	r0, [pc, #504]	; (80010e0 <main+0x248>)
 8000ee8:	f008 fb60 	bl	80095ac <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	487d      	ldr	r0, [pc, #500]	; (80010e4 <main+0x24c>)
 8000eee:	f008 fb5d 	bl	80095ac <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	487c      	ldr	r0, [pc, #496]	; (80010e8 <main+0x250>)
 8000ef8:	f005 fae0 	bl	80064bc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <main+0x254>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fd9 	.word	0x08000fd9
 8000f10:	08000f37 	.word	0x08000f37
 8000f14:	08001073 	.word	0x08001073
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f6b 	.word	0x08000f6b
 8000f24:	08000fc3 	.word	0x08000fc3
		case Main:
			UART();
 8000f28:	f003 f9f6 	bl	8004318 <UART>
			ReadEncoder();
 8000f2c:	f000 fc64 	bl	80017f8 <ReadEncoder>
			kalmanfilter();
 8000f30:	f001 f8ea 	bl	8002108 <kalmanfilter>
			break;
 8000f34:	e0c9      	b.n	80010ca <main+0x232>
		case Home:
			UART();
 8000f36:	f003 f9ef 	bl	8004318 <UART>
			ReadEncoder();
 8000f3a:	f000 fc5d 	bl	80017f8 <ReadEncoder>
			SetHome();
 8000f3e:	f000 fd0d 	bl	800195c <SetHome>
			kalmanfilter();
 8000f42:	f001 f8e1 	bl	8002108 <kalmanfilter>
			break;
 8000f46:	e0c0      	b.n	80010ca <main+0x232>
		case Emergency:
			UART();
 8000f48:	f003 f9e6 	bl	8004318 <UART>
			if(Emergency_status == 1){
 8000f4c:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <main+0x258>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <main+0xca>
				Arm_State = Emergency;
 8000f54:	4b65      	ldr	r3, [pc, #404]	; (80010ec <main+0x254>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <main+0x25c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000f60:	e0b3      	b.n	80010ca <main+0x232>
				Arm_State = Main;
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <main+0x254>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e0af      	b.n	80010ca <main+0x232>
		case Setzero:
			UART();
 8000f6a:	f003 f9d5 	bl	8004318 <UART>
			if(micros() - timestamp > 2000000){
 8000f6e:	f000 fdc9 	bl	8001b04 <micros>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4960      	ldr	r1, [pc, #384]	; (80010f8 <main+0x260>)
 8000f78:	6809      	ldr	r1, [r1, #0]
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	4688      	mov	r8, r1
 8000f7e:	4681      	mov	r9, r0
 8000f80:	ebb2 0408 	subs.w	r4, r2, r8
 8000f84:	eb63 0509 	sbc.w	r5, r3, r9
 8000f88:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x264>)
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	f175 0300 	sbcs.w	r3, r5, #0
 8000f90:	f0c0 8096 	bcc.w	80010c0 <main+0x228>
				if (SetZeroState)
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <main+0x268>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <main+0x122>
				{
					TIM3->CNT = 0;
 8000f9c:	4b59      	ldr	r3, [pc, #356]	; (8001104 <main+0x26c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
					angle_base = 0;
 8000fa2:	4b59      	ldr	r3, [pc, #356]	; (8001108 <main+0x270>)
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
					angle = 0;
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <main+0x274>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
					theta_now = 0;
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <main+0x278>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
				}
				Arm_State = Main;
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <main+0x254>)
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8000fc0:	e07e      	b.n	80010c0 <main+0x228>
		case PrepareRun:
			UART();
 8000fc2:	f003 f9a9 	bl	8004318 <UART>
			TrajectoryGenerator_Flag=1;
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <main+0x27c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 8000fcc:	f001 f8c0 	bl	8002150 <TrajectoryGenerator>
			Arm_State = Run;
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <main+0x254>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			break;
 8000fd6:	e078      	b.n	80010ca <main+0x232>
		case Run:
			UART();
 8000fd8:	f003 f99e 	bl	8004318 <UART>
			if(Go_Flag == 0){
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <main+0x280>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d16f      	bne.n	80010c4 <main+0x22c>
				if(ModeN==1){
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0x284>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d138      	bne.n	800105e <main+0x1c6>
					if(n_station >= n_station_max-1){
 8000fec:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x288>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <main+0x28c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	db0c      	blt.n	8001016 <main+0x17e>
						Arm_State = EndEffector;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <main+0x254>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <main+0x290>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <main+0x284>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <main+0x25c>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e005      	b.n	8001022 <main+0x18a>
					}
					else{
						n_station++;
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <main+0x288>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x288>)
 8001020:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <main+0x254>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <main+0x290>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <main+0x288>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <main+0x294>)
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <main+0x298>)
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa2c 	bl	80004a0 <__aeabi_f2d>
 8001048:	a321      	add	r3, pc, #132	; (adr r3, 80010d0 <main+0x238>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa7f 	bl	8000550 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4937      	ldr	r1, [pc, #220]	; (8001134 <main+0x29c>)
 8001058:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 800105c:	e032      	b.n	80010c4 <main+0x22c>
					Arm_State = EndEffector;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0x254>)
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <main+0x290>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
					Finish =1;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0x25c>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	e028      	b.n	80010c4 <main+0x22c>
		case EndEffector:
			UART();
 8001072:	f003 f951 	bl	8004318 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <main+0x2a0>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d111      	bne.n	80010a2 <main+0x20a>
			{
				OpenEndEffector();
 800107e:	f003 ff39 	bl	8004ef4 <OpenEndEffector>
				if(EndEffector_State == State_wait){
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <main+0x2a4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d11e      	bne.n	80010c8 <main+0x230>
					if(ModeN==1){
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <main+0x284>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d103      	bne.n	800109a <main+0x202>
						Arm_State = PrepareRun;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <main+0x254>)
 8001094:	2206      	movs	r2, #6
 8001096:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001098:	e016      	b.n	80010c8 <main+0x230>
						Arm_State = Main;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <main+0x254>)
 800109c:	2204      	movs	r2, #4
 800109e:	701a      	strb	r2, [r3, #0]
			break;
 80010a0:	e012      	b.n	80010c8 <main+0x230>
				FlagOpen_EndEffector =0;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <main+0x290>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <main+0x284>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d103      	bne.n	80010b8 <main+0x220>
					Arm_State = PrepareRun;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <main+0x254>)
 80010b2:	2206      	movs	r2, #6
 80010b4:	701a      	strb	r2, [r3, #0]
			break;
 80010b6:	e007      	b.n	80010c8 <main+0x230>
					Arm_State = Main;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <main+0x254>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	701a      	strb	r2, [r3, #0]
			break;
 80010be:	e003      	b.n	80010c8 <main+0x230>
			break;
 80010c0:	bf00      	nop
 80010c2:	e71b      	b.n	8000efc <main+0x64>
			break;
 80010c4:	bf00      	nop
 80010c6:	e719      	b.n	8000efc <main+0x64>
			break;
 80010c8:	bf00      	nop
	  switch (Arm_State) {
 80010ca:	e717      	b.n	8000efc <main+0x64>
 80010cc:	f3af 8000 	nop.w
 80010d0:	a2529d39 	.word	0xa2529d39
 80010d4:	3f91df46 	.word	0x3f91df46
 80010d8:	200001c0 	.word	0x200001c0
 80010dc:	20000208 	.word	0x20000208
 80010e0:	20000250 	.word	0x20000250
 80010e4:	20000298 	.word	0x20000298
 80010e8:	40020400 	.word	0x40020400
 80010ec:	200000d7 	.word	0x200000d7
 80010f0:	200003eb 	.word	0x200003eb
 80010f4:	200006a1 	.word	0x200006a1
 80010f8:	200006bc 	.word	0x200006bc
 80010fc:	001e8481 	.word	0x001e8481
 8001100:	20000094 	.word	0x20000094
 8001104:	40000400 	.word	0x40000400
 8001108:	20000400 	.word	0x20000400
 800110c:	200003ec 	.word	0x200003ec
 8001110:	200003f4 	.word	0x200003f4
 8001114:	200003ea 	.word	0x200003ea
 8001118:	200003e9 	.word	0x200003e9
 800111c:	200006a0 	.word	0x200006a0
 8001120:	200000d6 	.word	0x200000d6
 8001124:	200000d5 	.word	0x200000d5
 8001128:	200006b4 	.word	0x200006b4
 800112c:	200006a4 	.word	0x200006a4
 8001130:	200000ac 	.word	0x200000ac
 8001134:	200005c8 	.word	0x200005c8
 8001138:	20000697 	.word	0x20000697
 800113c:	200000d8 	.word	0x200000d8

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f00a ff94 	bl	800c07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <SystemClock_Config+0xc8>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xc8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SystemClock_Config+0xcc>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemClock_Config+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b0:	2308      	movs	r3, #8
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fcaf 	bl	8008b28 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d0:	f003 ff38 	bl	8005044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2103      	movs	r1, #3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f007 ff11 	bl	8009018 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011fc:	f003 ff22 	bl	8005044 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f005 f981 	bl	8006554 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f003 fef4 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000016c 	.word	0x2000016c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a fee9 	bl	800c07c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012ac:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <MX_TIM1_Init+0x13c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012be:	f241 3287 	movw	r2, #4999	; 0x1387
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d8:	f008 f8be 	bl	8009458 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f003 feaf 	bl	8005044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482c      	ldr	r0, [pc, #176]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012f4:	f008 fdc4 	bl	8009e80 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f003 fea1 	bl	8005044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4828      	ldr	r0, [pc, #160]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001304:	f008 f9b4 	bl	8009670 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f003 fe99 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001322:	f009 f969 	bl	800a5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f003 fe8a 	bl	8005044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001356:	f008 fcd1 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001360:	f003 fe70 	bl	8005044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001388:	f009 f9a4 	bl	800a6d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001392:	f003 fe57 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001398:	f003 ff86 	bl	80052a8 <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	; 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001c0 	.word	0x200001c0
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00a fe5e 	bl	800c07c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <MX_TIM3_Init+0xa4>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM3_Init+0xa0>)
 80013dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM3_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ee:	2303      	movs	r3, #3
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_TIM3_Init+0xa0>)
 800141a:	f008 fa33 	bl	8009884 <HAL_TIM_Encoder_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001424:	f003 fe0e 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM3_Init+0xa0>)
 8001436:	f009 f8df 	bl	800a5f8 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001440:	f003 fe00 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000208 	.word	0x20000208
 8001450:	40000400 	.word	0x40000400

08001454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_TIM4_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001478:	2209      	movs	r2, #9
 800147a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001484:	f242 720f 	movw	r2, #9999	; 0x270f
 8001488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_TIM4_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001498:	f007 ffde 	bl	8009458 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80014a2:	f003 fdcf 	bl	8005044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_TIM4_Init+0x94>)
 80014b4:	f008 fce4 	bl	8009e80 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014be:	f003 fdc1 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM4_Init+0x94>)
 80014d0:	f009 f892 	bl	800a5f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014da:	f003 fdb3 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000250 	.word	0x20000250
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_TIM11_Init+0x40>)
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <MX_TIM11_Init+0x44>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_TIM11_Init+0x40>)
 80014fc:	2263      	movs	r2, #99	; 0x63
 80014fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_TIM11_Init+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_TIM11_Init+0x40>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_TIM11_Init+0x40>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_TIM11_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM11_Init+0x40>)
 800151c:	f007 ff9c 	bl	8009458 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001526:	f003 fd8d 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000298 	.word	0x20000298
 8001534:	40014800 	.word	0x40014800

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001544:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800154c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001550:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001574:	f009 f914 	bl	800a7a0 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800157e:	f003 fd61 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002e0 	.word	0x200002e0
 800158c:	40004400 	.word	0x40004400

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_DMA_Init+0x4c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <MX_DMA_Init+0x4c>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_DMA_Init+0x4c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2010      	movs	r0, #16
 80015b8:	f004 f99d 	bl	80058f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015bc:	2010      	movs	r0, #16
 80015be:	f004 f9b6 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2011      	movs	r0, #17
 80015c8:	f004 f995 	bl	80058f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f004 f9ae 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <MX_GPIO_Init+0x17c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a57      	ldr	r2, [pc, #348]	; (800175c <MX_GPIO_Init+0x17c>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b55      	ldr	r3, [pc, #340]	; (800175c <MX_GPIO_Init+0x17c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <MX_GPIO_Init+0x17c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a50      	ldr	r2, [pc, #320]	; (800175c <MX_GPIO_Init+0x17c>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <MX_GPIO_Init+0x17c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <MX_GPIO_Init+0x17c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a49      	ldr	r2, [pc, #292]	; (800175c <MX_GPIO_Init+0x17c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MX_GPIO_Init+0x17c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <MX_GPIO_Init+0x17c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <MX_GPIO_Init+0x17c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <MX_GPIO_Init+0x17c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	483d      	ldr	r0, [pc, #244]	; (8001760 <MX_GPIO_Init+0x180>)
 800166c:	f004 ff26 	bl	80064bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001676:	483b      	ldr	r0, [pc, #236]	; (8001764 <MX_GPIO_Init+0x184>)
 8001678:	f004 ff20 	bl	80064bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001682:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4835      	ldr	r0, [pc, #212]	; (8001768 <MX_GPIO_Init+0x188>)
 8001694:	f004 fd76 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001698:	2304      	movs	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800169c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <MX_GPIO_Init+0x188>)
 80016ae:	f004 fd69 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b2:	2320      	movs	r3, #32
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_GPIO_Init+0x180>)
 80016ca:	f004 fd5b 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	481f      	ldr	r0, [pc, #124]	; (8001764 <MX_GPIO_Init+0x184>)
 80016e8:	f004 fd4c 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80016ec:	2310      	movs	r3, #16
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4818      	ldr	r0, [pc, #96]	; (8001764 <MX_GPIO_Init+0x184>)
 8001702:	f004 fd3f 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 8001706:	2320      	movs	r3, #32
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800170a:	2311      	movs	r3, #17
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <MX_GPIO_Init+0x184>)
 800171e:	f004 fd31 	bl	8006184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2008      	movs	r0, #8
 8001728:	f004 f8e5 	bl	80058f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800172c:	2008      	movs	r0, #8
 800172e:	f004 f8fe 	bl	800592e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200a      	movs	r0, #10
 8001738:	f004 f8dd 	bl	80058f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800173c:	200a      	movs	r0, #10
 800173e:	f004 f8f6 	bl	800592e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2028      	movs	r0, #40	; 0x28
 8001748:	f004 f8d5 	bl	80058f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800174c:	2028      	movs	r0, #40	; 0x28
 800174e:	f004 f8ee 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	00000000 	.word	0x00000000

08001770 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;
	PWMOut = (volt*5000.0)/24.0;
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fe8e 	bl	80004a0 <__aeabi_f2d>
 8001784:	a31a      	add	r3, pc, #104	; (adr r3, 80017f0 <RunMotor+0x80>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fee1 	bl	8000550 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <RunMotor+0x70>)
 800179c:	f7ff f802 	bl	80007a4 <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9a2 	bl	8000af0 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <RunMotor+0x74>)
 80017b0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <RunMotor+0x78>)
 80017bc:	f004 fe7e 	bl	80064bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RunMotor+0x74>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <RunMotor+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ce:	ee17 2a90 	vmov	r2, s15
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f3af 8000 	nop.w
 80017e0:	40380000 	.word	0x40380000
 80017e4:	200006c0 	.word	0x200006c0
 80017e8:	40020400 	.word	0x40020400
 80017ec:	200001c0 	.word	0x200001c0
 80017f0:	00000000 	.word	0x00000000
 80017f4:	40b38800 	.word	0x40b38800

080017f8 <ReadEncoder>:

void ReadEncoder()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
//	angle_sum_before = theta_now;
//	theta_now = (TIM3->CNT/8191.0)*(2.0*M_PI);

	angle_before = angle;
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <ReadEncoder+0x100>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <ReadEncoder+0x104>)
 8001802:	6013      	str	r3, [r2, #0]
	angle_sum_before = theta_now;
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <ReadEncoder+0x108>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3e      	ldr	r2, [pc, #248]	; (8001904 <ReadEncoder+0x10c>)
 800180a:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2.0*M_PI);
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <ReadEncoder+0x110>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe23 	bl	800045c <__aeabi_ui2d>
 8001816:	a334      	add	r3, pc, #208	; (adr r3, 80018e8 <ReadEncoder+0xf0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ffc2 	bl	80007a4 <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a331      	add	r3, pc, #196	; (adr r3, 80018f0 <ReadEncoder+0xf8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fe8f 	bl	8000550 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f959 	bl	8000af0 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <ReadEncoder+0x100>)
 8001842:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <ReadEncoder+0x114>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <ReadEncoder+0x118>)
 800184a:	6013      	str	r3, [r2, #0]
	if ((angle - angle_before) <= -threshold)
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <ReadEncoder+0x100>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <ReadEncoder+0x104>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <ReadEncoder+0x11c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eef1 7a67 	vneg.f32	s15, s15
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d80b      	bhi.n	8001888 <ReadEncoder+0x90>
	{
		angle_base = angle_base_before + angle_max;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <ReadEncoder+0x118>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <ReadEncoder+0x120>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <ReadEncoder+0x114>)
 8001882:	edc3 7a00 	vstr	s15, [r3]
 8001886:	e01f      	b.n	80018c8 <ReadEncoder+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <ReadEncoder+0x100>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <ReadEncoder+0x104>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <ReadEncoder+0x11c>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	db0b      	blt.n	80018c0 <ReadEncoder+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <ReadEncoder+0x118>)
 80018aa:	ed93 7a00 	vldr	s14, [r3]
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <ReadEncoder+0x120>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <ReadEncoder+0x114>)
 80018ba:	edc3 7a00 	vstr	s15, [r3]
 80018be:	e003      	b.n	80018c8 <ReadEncoder+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <ReadEncoder+0x118>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <ReadEncoder+0x114>)
 80018c6:	6013      	str	r3, [r2, #0]
	}

	theta_now = angle + angle_base;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <ReadEncoder+0x100>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <ReadEncoder+0x114>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <ReadEncoder+0x108>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40bfff00 	.word	0x40bfff00
 80018f0:	54442d18 	.word	0x54442d18
 80018f4:	401921fb 	.word	0x401921fb
 80018f8:	200003ec 	.word	0x200003ec
 80018fc:	200003f0 	.word	0x200003f0
 8001900:	200003f4 	.word	0x200003f4
 8001904:	200003f8 	.word	0x200003f8
 8001908:	40000400 	.word	0x40000400
 800190c:	20000400 	.word	0x20000400
 8001910:	200003fc 	.word	0x200003fc
 8001914:	20000004 	.word	0x20000004
 8001918:	20000008 	.word	0x20000008

0800191c <BackwardDifference>:

void BackwardDifference()
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	omega_tosensor = (theta_now-angle_sum_before)/dt;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <BackwardDifference+0x30>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <BackwardDifference+0x34>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <BackwardDifference+0x38>)
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <BackwardDifference+0x3c>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200003f4 	.word	0x200003f4
 8001950:	200003f8 	.word	0x200003f8
 8001954:	2000000c 	.word	0x2000000c
 8001958:	20000404 	.word	0x20000404

0800195c <SetHome>:

void SetHome()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Proximity_GPIO_Port, Proximity_Pin) == GPIO_PIN_RESET && AlSet_Flag == 2)
 8001960:	2104      	movs	r1, #4
 8001962:	481d      	ldr	r0, [pc, #116]	; (80019d8 <SetHome+0x7c>)
 8001964:	f004 fd92 	bl	800648c <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <SetHome+0x20>
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <SetHome+0x80>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d102      	bne.n	800197c <SetHome+0x20>
	{
		SetHome_Flag = 2;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <SetHome+0x84>)
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
	}

	if(SetHome_Flag == 1)
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <SetHome+0x84>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d111      	bne.n	80019a8 <SetHome+0x4c>
	{
		volt = 9;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <SetHome+0x88>)
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <SetHome+0x8c>)
 8001988:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <SetHome+0x88>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	2000      	movs	r0, #0
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	f7ff feeb 	bl	8001770 <RunMotor>
		AlSet_Flag = 1;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <SetHome+0x80>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <SetHome+0x84>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
		volt = 6.5;
		RunMotor(volt, counterclockwise);
		AlSet_Flag = 0;
		SetHome_Flag = 0;
	}
}
 80019a6:	e014      	b.n	80019d2 <SetHome+0x76>
	else if(SetHome_Flag == 2)
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <SetHome+0x84>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d110      	bne.n	80019d2 <SetHome+0x76>
		volt = 6.5;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <SetHome+0x88>)
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <SetHome+0x90>)
 80019b4:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <SetHome+0x88>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	2000      	movs	r0, #0
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f7ff fed5 	bl	8001770 <RunMotor>
		AlSet_Flag = 0;
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SetHome+0x80>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SetHome+0x84>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800
 80019dc:	20000000 	.word	0x20000000
 80019e0:	200003e8 	.word	0x200003e8
 80019e4:	200003e4 	.word	0x200003e4
 80019e8:	41100000 	.word	0x41100000
 80019ec:	40d00000 	.word	0x40d00000

080019f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 0)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d122      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x56>
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11e      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x56>
	{
		volt = 0;
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_GPIO_EXTI_Callback+0xec>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <HAL_GPIO_EXTI_Callback+0xec>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	2001      	movs	r0, #1
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f7ff fea8 	bl	8001770 <RunMotor>
		theta_now = 0;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
		kalmanfilter();
 8001a28:	f000 fb6e 	bl	8002108 <kalmanfilter>
		AlSet_Flag = 2;
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 8001a32:	f000 f867 	bl	8001b04 <micros>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a3c:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a40:	2205      	movs	r2, #5
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e009      	b.n	8001a5a <HAL_GPIO_EXTI_Callback+0x6a>
	}

	else if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 1)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d106      	bne.n	8001a5a <HAL_GPIO_EXTI_Callback+0x6a>
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_GPIO_EXTI_Callback+0x6a>
	{
		SetHome_Flag = 2;
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == B1_Pin)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a60:	d10e      	bne.n	8001a80 <HAL_GPIO_EXTI_Callback+0x90>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	4822      	ldr	r0, [pc, #136]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a66:	f004 fd42 	bl	80064ee <HAL_GPIO_TogglePin>
		SetZeroState = (SetZeroState+1)%2;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	bfb8      	it	lt
 8001a78:	425b      	neglt	r3, r3
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d124      	bne.n	8001ad0 <HAL_GPIO_EXTI_Callback+0xe0>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001a86:	2110      	movs	r1, #16
 8001a88:	481b      	ldr	r0, [pc, #108]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001a8a:	f004 fcff 	bl	800648c <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11a      	bne.n	8001aca <HAL_GPIO_EXTI_Callback+0xda>
		{
			Arm_State=Main;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a96:	2204      	movs	r2, #4
 8001a98:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_GPIO_EXTI_Callback+0x10c>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4813      	ldr	r0, [pc, #76]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001aac:	f004 fd06 	bl	80064bc <HAL_GPIO_WritePin>
			volt = 0;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_GPIO_EXTI_Callback+0xec>)
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_GPIO_EXTI_Callback+0xec>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	2001      	movs	r0, #1
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f7ff fe54 	bl	8001770 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_EXTI_Callback+0xe0>
			Emergency_status = 0;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x110>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	200003e4 	.word	0x200003e4
 8001ae0:	200003f4 	.word	0x200003f4
 8001ae4:	200006bc 	.word	0x200006bc
 8001ae8:	200000d7 	.word	0x200000d7
 8001aec:	200003e8 	.word	0x200003e8
 8001af0:	40020000 	.word	0x40020000
 8001af4:	20000094 	.word	0x20000094
 8001af8:	40020400 	.word	0x40020400
 8001afc:	200006a1 	.word	0x200006a1
 8001b00:	200003eb 	.word	0x200003eb

08001b04 <micros>:

inline uint64_t micros()
{
 8001b04:	b4b0      	push	{r4, r5, r7}
 8001b06:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <micros+0x2c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	4611      	mov	r1, r2
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <micros+0x30>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	1884      	adds	r4, r0, r2
 8001b1c:	eb41 0503 	adc.w	r5, r1, r3
 8001b20:	4622      	mov	r2, r4
 8001b22:	462b      	mov	r3, r5
}
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bcb0      	pop	{r4, r5, r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000298 	.word	0x20000298
 8001b34:	20000698 	.word	0x20000698

08001b38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	ed2d 8b02 	vpush	{d8}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a37      	ldr	r2, [pc, #220]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d155      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d051      	beq.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d14d      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0xc0>
	{
		ReadEncoder();
 8001b5c:	f7ff fe4c 	bl	80017f8 <ReadEncoder>
		BackwardDifference();
 8001b60:	f7ff fedc 	bl	800191c <BackwardDifference>
		TrajectoryEvaluation();
 8001b64:	f001 fbdc 	bl	8003320 <TrajectoryEvaluation>
		kalmanfilter();
 8001b68:	f000 face 	bl	8002108 <kalmanfilter>

		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe ffbb 	bl	8000af0 <__aeabi_d2f>
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b7e:	ed93 8a00 	vldr	s16, [r3]
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe ffb0 	bl	8000af0 <__aeabi_d2f>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eef0 1a67 	vmov.f32	s3, s15
 8001b9c:	ee01 2a10 	vmov	s2, r2
 8001ba0:	eef0 0a48 	vmov.f32	s1, s16
 8001ba4:	ee00 6a10 	vmov	s0, r6
 8001ba8:	f002 faf6 	bl	8004198 <Cascade>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]

		t+=dt;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bb8:	ed93 7a00 	vldr	s14, [r3]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]


		if (Go_Flag == 0) //when last loop
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			volt = 0;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
			t = 0;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
		}


		RunMotor(volt, PID_dir);
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	f7ff fdbc 	bl	8001770 <RunMotor>
	}

	if (htim == &htim11)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d10a      	bne.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0xde>
	{
		_micro += 65535;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c0a:	1854      	adds	r4, r2, r1
 8001c0c:	f143 0500 	adc.w	r5, r3, #0
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c12:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	ecbd 8b02 	vpop	{d8}
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000250 	.word	0x20000250
 8001c28:	200003e9 	.word	0x200003e9
 8001c2c:	200000d7 	.word	0x200000d7
 8001c30:	20000620 	.word	0x20000620
 8001c34:	20000408 	.word	0x20000408
 8001c38:	20000628 	.word	0x20000628
 8001c3c:	2000040c 	.word	0x2000040c
 8001c40:	200003e4 	.word	0x200003e4
 8001c44:	20000594 	.word	0x20000594
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	200000da 	.word	0x200000da
 8001c50:	20000298 	.word	0x20000298
 8001c54:	20000698 	.word	0x20000698

08001c58 <setmatrix>:

void setmatrix(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001c5c:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <setmatrix+0x1d4>)
 8001c5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c62:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <setmatrix+0x1d8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a70      	ldr	r2, [pc, #448]	; (8001e2c <setmatrix+0x1d4>)
 8001c6a:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <setmatrix+0x1d8>)
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <setmatrix+0x1d8>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c84:	4b69      	ldr	r3, [pc, #420]	; (8001e2c <setmatrix+0x1d4>)
 8001c86:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001c8a:	4b69      	ldr	r3, [pc, #420]	; (8001e30 <setmatrix+0x1d8>)
 8001c8c:	ed93 7a00 	vldr	s14, [r3]
 8001c90:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <setmatrix+0x1d8>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <setmatrix+0x1d8>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	4b5f      	ldr	r3, [pc, #380]	; (8001e2c <setmatrix+0x1d4>)
 8001cae:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <setmatrix+0x1d4>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001cba:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <setmatrix+0x1d4>)
 8001cbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc0:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <setmatrix+0x1d8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <setmatrix+0x1d4>)
 8001cc8:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001cca:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <setmatrix+0x1d8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <setmatrix+0x1d8>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cda:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce2:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <setmatrix+0x1d4>)
 8001ce4:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <setmatrix+0x1d4>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <setmatrix+0x1d4>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <setmatrix+0x1d4>)
 8001cfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001d00:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <setmatrix+0x1d8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <setmatrix+0x1d4>)
 8001d06:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001d08:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <setmatrix+0x1d4>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <setmatrix+0x1d4>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <setmatrix+0x1d4>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <setmatrix+0x1d4>)
 8001d22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <setmatrix+0x1d8>)
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <setmatrix+0x1d8>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d38:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <setmatrix+0x1d8>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d42:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <setmatrix+0x1dc>)
 8001d4c:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <setmatrix+0x1d8>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <setmatrix+0x1d8>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d68:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <setmatrix+0x1dc>)
 8001d6a:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <setmatrix+0x1d8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <setmatrix+0x1dc>)
 8001d74:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <setmatrix+0x1dc>)
 8001d78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d7c:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <setmatrix+0x1e0>)
 8001d80:	2204      	movs	r2, #4
 8001d82:	2104      	movs	r1, #4
 8001d84:	482d      	ldr	r0, [pc, #180]	; (8001e3c <setmatrix+0x1e4>)
 8001d86:	f00a f8e1 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <setmatrix+0x1d4>)
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	2104      	movs	r1, #4
 8001d90:	482b      	ldr	r0, [pc, #172]	; (8001e40 <setmatrix+0x1e8>)
 8001d92:	f00a f8db 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <setmatrix+0x1dc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4829      	ldr	r0, [pc, #164]	; (8001e44 <setmatrix+0x1ec>)
 8001d9e:	f00a f8d5 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <setmatrix+0x1f0>)
 8001da4:	2204      	movs	r2, #4
 8001da6:	2101      	movs	r1, #1
 8001da8:	4828      	ldr	r0, [pc, #160]	; (8001e4c <setmatrix+0x1f4>)
 8001daa:	f00a f8cf 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <setmatrix+0x1f8>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	2101      	movs	r1, #1
 8001db4:	4827      	ldr	r0, [pc, #156]	; (8001e54 <setmatrix+0x1fc>)
 8001db6:	f00a f8c9 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <setmatrix+0x200>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4826      	ldr	r0, [pc, #152]	; (8001e5c <setmatrix+0x204>)
 8001dc2:	f00a f8c3 	bl	800bf4c <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <setmatrix+0x208>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <setmatrix+0x20c>)
 8001dce:	f00a f8bd 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <setmatrix+0x210>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4824      	ldr	r0, [pc, #144]	; (8001e6c <setmatrix+0x214>)
 8001dda:	f00a f8b7 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <setmatrix+0x218>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	2104      	movs	r1, #4
 8001de4:	4823      	ldr	r0, [pc, #140]	; (8001e74 <setmatrix+0x21c>)
 8001de6:	f00a f8b1 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <setmatrix+0x220>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	2104      	movs	r1, #4
 8001df0:	4822      	ldr	r0, [pc, #136]	; (8001e7c <setmatrix+0x224>)
 8001df2:	f00a f8ab 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <setmatrix+0x228>)
 8001df8:	2204      	movs	r2, #4
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <setmatrix+0x22c>)
 8001dfe:	f00a f8a5 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <setmatrix+0x230>)
 8001e04:	2204      	movs	r2, #4
 8001e06:	2104      	movs	r1, #4
 8001e08:	4820      	ldr	r0, [pc, #128]	; (8001e8c <setmatrix+0x234>)
 8001e0a:	f00a f89f 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <setmatrix+0x238>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	2101      	movs	r1, #1
 8001e14:	481f      	ldr	r0, [pc, #124]	; (8001e94 <setmatrix+0x23c>)
 8001e16:	f00a f899 	bl	800bf4c <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <setmatrix+0x240>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2101      	movs	r1, #1
 8001e20:	481e      	ldr	r0, [pc, #120]	; (8001e9c <setmatrix+0x244>)
 8001e22:	f00a f893 	bl	800bf4c <arm_mat_init_f32>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000488 	.word	0x20000488
 8001e30:	2000000c 	.word	0x2000000c
 8001e34:	200004c8 	.word	0x200004c8
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	20000418 	.word	0x20000418
 8001e40:	20000420 	.word	0x20000420
 8001e44:	20000428 	.word	0x20000428
 8001e48:	20000050 	.word	0x20000050
 8001e4c:	20000440 	.word	0x20000440
 8001e50:	20000060 	.word	0x20000060
 8001e54:	20000448 	.word	0x20000448
 8001e58:	20000064 	.word	0x20000064
 8001e5c:	20000430 	.word	0x20000430
 8001e60:	200004d8 	.word	0x200004d8
 8001e64:	20000450 	.word	0x20000450
 8001e68:	200004dc 	.word	0x200004dc
 8001e6c:	20000438 	.word	0x20000438
 8001e70:	200004ec 	.word	0x200004ec
 8001e74:	20000468 	.word	0x20000468
 8001e78:	200004fc 	.word	0x200004fc
 8001e7c:	20000470 	.word	0x20000470
 8001e80:	2000050c 	.word	0x2000050c
 8001e84:	20000478 	.word	0x20000478
 8001e88:	2000054c 	.word	0x2000054c
 8001e8c:	20000480 	.word	0x20000480
 8001e90:	2000058c 	.word	0x2000058c
 8001e94:	20000458 	.word	0x20000458
 8001e98:	20000590 	.word	0x20000590
 8001e9c:	20000460 	.word	0x20000460

08001ea0 <prediction>:

void prediction(){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0c2      	sub	sp, #264	; 0x108
 8001ea4:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001ea6:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <prediction+0xcc>)
 8001ea8:	4931      	ldr	r1, [pc, #196]	; (8001f70 <prediction+0xd0>)
 8001eaa:	4832      	ldr	r0, [pc, #200]	; (8001f74 <prediction+0xd4>)
 8001eac:	f009 ffae 	bl	800be0c <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001eb0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001eb4:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001eb8:	2204      	movs	r2, #4
 8001eba:	2104      	movs	r1, #4
 8001ebc:	f00a f846 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001ec0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ec4:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2104      	movs	r1, #4
 8001ecc:	f00a f83e 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001ed0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ed4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001ed8:	2204      	movs	r2, #4
 8001eda:	2104      	movs	r1, #4
 8001edc:	f00a f836 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	f107 0018 	add.w	r0, r7, #24
 8001ee8:	2204      	movs	r2, #4
 8001eea:	2104      	movs	r1, #4
 8001eec:	f00a f82e 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	f00a f827 	bl	800bf4c <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	4619      	mov	r1, r3
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <prediction+0xd4>)
 8001f06:	f009 febb 	bl	800bc80 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481a      	ldr	r0, [pc, #104]	; (8001f78 <prediction+0xd8>)
 8001f10:	f009 feb6 	bl	800bc80 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001f14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4918      	ldr	r1, [pc, #96]	; (8001f7c <prediction+0xdc>)
 8001f1c:	4815      	ldr	r0, [pc, #84]	; (8001f74 <prediction+0xd4>)
 8001f1e:	f009 ff75 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001f22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f26:	461a      	mov	r2, r3
 8001f28:	4915      	ldr	r1, [pc, #84]	; (8001f80 <prediction+0xe0>)
 8001f2a:	4813      	ldr	r0, [pc, #76]	; (8001f78 <prediction+0xd8>)
 8001f2c:	f009 ff6e 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001f30:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f34:	f107 0118 	add.w	r1, r7, #24
 8001f38:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 ff65 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001f42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f46:	4639      	mov	r1, r7
 8001f48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f009 ff5d 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001f52:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <prediction+0xe4>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f009 fff9 	bl	800bf54 <arm_mat_add_f32>
}
 8001f62:	bf00      	nop
 8001f64:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000470 	.word	0x20000470
 8001f70:	20000468 	.word	0x20000468
 8001f74:	20000420 	.word	0x20000420
 8001f78:	20000428 	.word	0x20000428
 8001f7c:	20000478 	.word	0x20000478
 8001f80:	20000430 	.word	0x20000430
 8001f84:	20000480 	.word	0x20000480

08001f88 <update>:

void update(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0ae      	sub	sp, #184	; 0xb8
 8001f8c:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001f8e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f92:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f96:	2201      	movs	r2, #1
 8001f98:	2101      	movs	r1, #1
 8001f9a:	f009 ffd7 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	2104      	movs	r1, #4
 8001faa:	f009 ffcf 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001fae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2104      	movs	r1, #4
 8001fba:	f009 ffc7 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8001fbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	2101      	movs	r1, #1
 8001fca:	f009 ffbf 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8001fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f009 ffb7 	bl	800bf4c <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	f107 0010 	add.w	r0, r7, #16
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2104      	movs	r1, #4
 8001fea:	f009 ffaf 	bl	800bf4c <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4837      	ldr	r0, [pc, #220]	; (80020d4 <update+0x14c>)
 8001ff6:	f009 fe43 	bl	800bc80 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 8001ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffe:	461a      	mov	r2, r3
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <update+0x150>)
 8002002:	4834      	ldr	r0, [pc, #208]	; (80020d4 <update+0x14c>)
 8002004:	f009 ff02 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8002008:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200c:	f107 0110 	add.w	r1, r7, #16
 8002010:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002014:	4618      	mov	r0, r3
 8002016:	f009 fef9 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 800201a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800201e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002022:	4619      	mov	r1, r3
 8002024:	482d      	ldr	r0, [pc, #180]	; (80020dc <update+0x154>)
 8002026:	f009 ff95 	bl	800bf54 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 800202a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800202e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002036:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	f107 0008 	add.w	r0, r7, #8
 8002040:	2201      	movs	r2, #1
 8002042:	2101      	movs	r1, #1
 8002044:	f009 ff82 	bl	800bf4c <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 8002048:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4821      	ldr	r0, [pc, #132]	; (80020d8 <update+0x150>)
 8002054:	f009 feda 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 8002058:	f107 0108 	add.w	r1, r7, #8
 800205c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <update+0x158>)
 8002062:	4618      	mov	r0, r3
 8002064:	f009 fed2 	bl	800be0c <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 8002068:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800206c:	461a      	mov	r2, r3
 800206e:	4919      	ldr	r1, [pc, #100]	; (80020d4 <update+0x14c>)
 8002070:	481b      	ldr	r0, [pc, #108]	; (80020e0 <update+0x158>)
 8002072:	f009 fecb 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 8002076:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800207a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800207e:	4619      	mov	r1, r3
 8002080:	4818      	ldr	r0, [pc, #96]	; (80020e4 <update+0x15c>)
 8002082:	f009 fe59 	bl	800bd38 <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 8002086:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800208a:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <update+0x160>)
 800208c:	4912      	ldr	r1, [pc, #72]	; (80020d8 <update+0x150>)
 800208e:	4618      	mov	r0, r3
 8002090:	f009 febc 	bl	800be0c <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <update+0x164>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <update+0x168>)
 800209a:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 800209c:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <update+0x16c>)
 800209e:	4916      	ldr	r1, [pc, #88]	; (80020f8 <update+0x170>)
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <update+0x14c>)
 80020a2:	f009 feb3 	bl	800be0c <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <update+0x174>)
 80020a8:	4912      	ldr	r1, [pc, #72]	; (80020f4 <update+0x16c>)
 80020aa:	4815      	ldr	r0, [pc, #84]	; (8002100 <update+0x178>)
 80020ac:	f009 fe44 	bl	800bd38 <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 80020b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b4:	461a      	mov	r2, r3
 80020b6:	4911      	ldr	r1, [pc, #68]	; (80020fc <update+0x174>)
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <update+0x158>)
 80020ba:	f009 fea7 	bl	800be0c <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 80020be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <update+0x17c>)
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <update+0x170>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f009 ff44 	bl	800bf54 <arm_mat_add_f32>
}
 80020cc:	bf00      	nop
 80020ce:	37b8      	adds	r7, #184	; 0xb8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000440 	.word	0x20000440
 80020d8:	20000480 	.word	0x20000480
 80020dc:	20000448 	.word	0x20000448
 80020e0:	20000438 	.word	0x20000438
 80020e4:	20000418 	.word	0x20000418
 80020e8:	20000478 	.word	0x20000478
 80020ec:	200003f4 	.word	0x200003f4
 80020f0:	200004d8 	.word	0x200004d8
 80020f4:	20000460 	.word	0x20000460
 80020f8:	20000470 	.word	0x20000470
 80020fc:	20000458 	.word	0x20000458
 8002100:	20000450 	.word	0x20000450
 8002104:	20000468 	.word	0x20000468

08002108 <kalmanfilter>:

void kalmanfilter()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	prediction();
 800210c:	f7ff fec8 	bl	8001ea0 <prediction>
	update();
 8002110:	f7ff ff3a 	bl	8001f88 <update>
	position_kalman = data_x_new[0];
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <kalmanfilter+0x30>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <kalmanfilter+0x34>)
 800211a:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <kalmanfilter+0x30>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <kalmanfilter+0x38>)
 8002122:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <kalmanfilter+0x30>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <kalmanfilter+0x3c>)
 800212a:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <kalmanfilter+0x30>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <kalmanfilter+0x40>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200004fc 	.word	0x200004fc
 800213c:	20000408 	.word	0x20000408
 8002140:	2000040c 	.word	0x2000040c
 8002144:	20000410 	.word	0x20000410
 8002148:	20000414 	.word	0x20000414
 800214c:	00000000 	.word	0x00000000

08002150 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8002150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002154:	af00      	add	r7, sp, #0
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <TrajectoryGenerator+0x158>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f001 8097 	beq.w	800328e <TrajectoryGenerator+0x113e>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 8002160:	4b52      	ldr	r3, [pc, #328]	; (80022ac <TrajectoryGenerator+0x15c>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fcc1 	bl	8000af0 <__aeabi_d2f>
 800216e:	4603      	mov	r3, r0
 8002170:	ee00 3a10 	vmov	s0, r3
 8002174:	f002 f882 	bl	800427c <positive>
 8002178:	ee10 3a10 	vmov	r3, s0
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f98f 	bl	80004a0 <__aeabi_f2d>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4949      	ldr	r1, [pc, #292]	; (80022ac <TrajectoryGenerator+0x15c>)
 8002188:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <TrajectoryGenerator+0x160>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fcab 	bl	8000af0 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	ee00 3a10 	vmov	s0, r3
 80021a0:	f002 f86c 	bl	800427c <positive>
 80021a4:	ee10 3a10 	vmov	r3, s0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f979 	bl	80004a0 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	493f      	ldr	r1, [pc, #252]	; (80022b0 <TrajectoryGenerator+0x160>)
 80021b4:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 80021b8:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <TrajectoryGenerator+0x164>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fc95 	bl	8000af0 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	ee00 3a10 	vmov	s0, r3
 80021cc:	f002 f856 	bl	800427c <positive>
 80021d0:	ee10 3a10 	vmov	r3, s0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f963 	bl	80004a0 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4935      	ldr	r1, [pc, #212]	; (80022b4 <TrajectoryGenerator+0x164>)
 80021e0:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <TrajectoryGenerator+0x168>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f959 	bl	80004a0 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4932      	ldr	r1, [pc, #200]	; (80022bc <TrajectoryGenerator+0x16c>)
 80021f4:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <TrajectoryGenerator+0x170>)
 80021fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <TrajectoryGenerator+0x16c>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fd ffec 	bl	80001e0 <__aeabi_dsub>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	492d      	ldr	r1, [pc, #180]	; (80022c4 <TrajectoryGenerator+0x174>)
 800220e:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <TrajectoryGenerator+0x174>)
 8002214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fe fc08 	bl	8000a34 <__aeabi_dcmplt>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <TrajectoryGenerator+0xf4>
		{
			theta_dest = -(theta_dest);
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <TrajectoryGenerator+0x174>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	4614      	mov	r4, r2
 8002232:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <TrajectoryGenerator+0x174>)
 8002238:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <TrajectoryGenerator+0x178>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e002      	b.n	800224a <TrajectoryGenerator+0xfa>
		}

		else
		{
			dir = 1;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <TrajectoryGenerator+0x178>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
		}

		if(w_max*j_max < pow(a_max,2.0)){
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <TrajectoryGenerator+0x164>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <TrajectoryGenerator+0x15c>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f97b 	bl	8000550 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	461d      	mov	r5, r3
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <TrajectoryGenerator+0x160>)
 8002264:	ed93 7b00 	vldr	d7, [r3]
 8002268:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80022a0 <TrajectoryGenerator+0x150>
 800226c:	eeb0 0a47 	vmov.f32	s0, s14
 8002270:	eef0 0a67 	vmov.f32	s1, s15
 8002274:	f009 ff90 	bl	800c198 <pow>
 8002278:	ec53 2b10 	vmov	r2, r3, d0
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe fbd8 	bl	8000a34 <__aeabi_dcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <TrajectoryGenerator+0x184>
			M=1.0;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <TrajectoryGenerator+0x17c>)
 800228c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002290:	601a      	str	r2, [r3, #0]
			N=0.0;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <TrajectoryGenerator+0x180>)
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e043      	b.n	8002324 <TrajectoryGenerator+0x1d4>
 800229c:	f3af 8000 	nop.w
 80022a0:	00000000 	.word	0x00000000
 80022a4:	40000000 	.word	0x40000000
 80022a8:	200003ea 	.word	0x200003ea
 80022ac:	20000078 	.word	0x20000078
 80022b0:	20000070 	.word	0x20000070
 80022b4:	20000068 	.word	0x20000068
 80022b8:	200003f4 	.word	0x200003f4
 80022bc:	200005c0 	.word	0x200005c0
 80022c0:	200005c8 	.word	0x200005c8
 80022c4:	200005d0 	.word	0x200005d0
 80022c8:	200000d9 	.word	0x200000d9
 80022cc:	200006c4 	.word	0x200006c4
 80022d0:	200006c8 	.word	0x200006c8
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 80022d4:	4b96      	ldr	r3, [pc, #600]	; (8002530 <TrajectoryGenerator+0x3e0>)
 80022d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022da:	4b96      	ldr	r3, [pc, #600]	; (8002534 <TrajectoryGenerator+0x3e4>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f936 	bl	8000550 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	461d      	mov	r5, r3
 80022ec:	4b92      	ldr	r3, [pc, #584]	; (8002538 <TrajectoryGenerator+0x3e8>)
 80022ee:	ed93 7b00 	vldr	d7, [r3]
 80022f2:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002520 <TrajectoryGenerator+0x3d0>
 80022f6:	eeb0 0a47 	vmov.f32	s0, s14
 80022fa:	eef0 0a67 	vmov.f32	s1, s15
 80022fe:	f009 ff4b 	bl	800c198 <pow>
 8002302:	ec53 2b10 	vmov	r2, r3, d0
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fe fba7 	bl	8000a5c <__aeabi_dcmpge>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <TrajectoryGenerator+0x1d4>
			M=0.0;
 8002314:	4b89      	ldr	r3, [pc, #548]	; (800253c <TrajectoryGenerator+0x3ec>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
			N=1.0;
 800231c:	4b88      	ldr	r3, [pc, #544]	; (8002540 <TrajectoryGenerator+0x3f0>)
 800231e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002322:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 8002324:	4b84      	ldr	r3, [pc, #528]	; (8002538 <TrajectoryGenerator+0x3e8>)
 8002326:	ed93 7b00 	vldr	d7, [r3]
 800232a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002520 <TrajectoryGenerator+0x3d0>
 800232e:	eeb0 0a47 	vmov.f32	s0, s14
 8002332:	eef0 0a67 	vmov.f32	s1, s15
 8002336:	f009 ff2f 	bl	800c198 <pow>
 800233a:	ec51 0b10 	vmov	r0, r1, d0
 800233e:	4b7d      	ldr	r3, [pc, #500]	; (8002534 <TrajectoryGenerator+0x3e4>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa2e 	bl	80007a4 <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fbce 	bl	8000af0 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	4a7b      	ldr	r2, [pc, #492]	; (8002544 <TrajectoryGenerator+0x3f4>)
 8002358:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <TrajectoryGenerator+0x3e8>)
 800235c:	ed93 7b00 	vldr	d7, [r3]
 8002360:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002528 <TrajectoryGenerator+0x3d8>
 8002364:	eeb0 0a47 	vmov.f32	s0, s14
 8002368:	eef0 0a67 	vmov.f32	s1, s15
 800236c:	f009 ff14 	bl	800c198 <pow>
 8002370:	ec51 0b10 	vmov	r0, r1, d0
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	f7fd ff34 	bl	80001e4 <__adddf3>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4614      	mov	r4, r2
 8002382:	461d      	mov	r5, r3
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <TrajectoryGenerator+0x3e4>)
 8002386:	ed93 7b00 	vldr	d7, [r3]
 800238a:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002520 <TrajectoryGenerator+0x3d0>
 800238e:	eeb0 0a47 	vmov.f32	s0, s14
 8002392:	eef0 0a67 	vmov.f32	s1, s15
 8002396:	f009 feff 	bl	800c198 <pow>
 800239a:	ec53 2b10 	vmov	r2, r3, d0
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7fe f9ff 	bl	80007a4 <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fb9f 	bl	8000af0 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a64      	ldr	r2, [pc, #400]	; (8002548 <TrajectoryGenerator+0x3f8>)
 80023b6:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 80023b8:	4b60      	ldr	r3, [pc, #384]	; (800253c <TrajectoryGenerator+0x3ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f86f 	bl	80004a0 <__aeabi_f2d>
 80023c2:	4604      	mov	r4, r0
 80023c4:	460d      	mov	r5, r1
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <TrajectoryGenerator+0x3e0>)
 80023c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <TrajectoryGenerator+0x3e4>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f9e7 	bl	80007a4 <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	ec43 2b17 	vmov	d7, r2, r3
 80023de:	eeb0 0a47 	vmov.f32	s0, s14
 80023e2:	eef0 0a67 	vmov.f32	s1, s15
 80023e6:	f009 ff47 	bl	800c278 <sqrt>
 80023ea:	ec51 0b10 	vmov	r0, r1, d0
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	f7fd fef7 	bl	80001e4 <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4620      	mov	r0, r4
 80023fc:	4629      	mov	r1, r5
 80023fe:	f7fe f8a7 	bl	8000550 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4690      	mov	r8, r2
 8002408:	4699      	mov	r9, r3
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <TrajectoryGenerator+0x3f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f846 	bl	80004a0 <__aeabi_f2d>
 8002414:	4604      	mov	r4, r0
 8002416:	460d      	mov	r5, r1
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <TrajectoryGenerator+0x3e0>)
 800241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <TrajectoryGenerator+0x3e8>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f9be 	bl	80007a4 <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4692      	mov	sl, r2
 800242e:	469b      	mov	fp, r3
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <TrajectoryGenerator+0x3e8>)
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <TrajectoryGenerator+0x3e4>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f9b2 	bl	80007a4 <__aeabi_ddiv>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4650      	mov	r0, sl
 8002446:	4659      	mov	r1, fp
 8002448:	f7fd fecc 	bl	80001e4 <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fe f87c 	bl	8000550 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4640      	mov	r0, r8
 800245e:	4649      	mov	r1, r9
 8002460:	f7fd fec0 	bl	80001e4 <__adddf3>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <TrajectoryGenerator+0x3e0>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f86d 	bl	8000550 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fb37 	bl	8000af0 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	4a31      	ldr	r2, [pc, #196]	; (800254c <TrajectoryGenerator+0x3fc>)
 8002486:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <TrajectoryGenerator+0x3f4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f807 	bl	80004a0 <__aeabi_f2d>
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <TrajectoryGenerator+0x3e0>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe faea 	bl	8000a70 <__aeabi_dcmpgt>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80ea 	beq.w	8002678 <TrajectoryGenerator+0x528>
			if(theta_dest > Sa){
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <TrajectoryGenerator+0x3f8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd fff9 	bl	80004a0 <__aeabi_f2d>
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <TrajectoryGenerator+0x400>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe fabe 	bl	8000a34 <__aeabi_dcmplt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d050      	beq.n	8002560 <TrajectoryGenerator+0x410>
				//caseI
				tj = sqrt((w_max/j_max));
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <TrajectoryGenerator+0x3e0>)
 80024c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <TrajectoryGenerator+0x3e4>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f96b 	bl	80007a4 <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	ec43 2b17 	vmov	d7, r2, r3
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	f009 fecb 	bl	800c278 <sqrt>
 80024e2:	ec53 2b10 	vmov	r2, r3, d0
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb01 	bl	8000af0 <__aeabi_d2f>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <TrajectoryGenerator+0x404>)
 80024f2:	6013      	str	r3, [r2, #0]
				ta = tj;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <TrajectoryGenerator+0x404>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <TrajectoryGenerator+0x408>)
 80024fa:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <TrajectoryGenerator+0x400>)
 80024fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <TrajectoryGenerator+0x3e0>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f94c 	bl	80007a4 <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe faec 	bl	8000af0 <__aeabi_d2f>
 8002518:	4603      	mov	r3, r0
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <TrajectoryGenerator+0x40c>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e223      	b.n	8002968 <TrajectoryGenerator+0x818>
 8002520:	00000000 	.word	0x00000000
 8002524:	40000000 	.word	0x40000000
 8002528:	00000000 	.word	0x00000000
 800252c:	40080000 	.word	0x40080000
 8002530:	20000068 	.word	0x20000068
 8002534:	20000078 	.word	0x20000078
 8002538:	20000070 	.word	0x20000070
 800253c:	200006c4 	.word	0x200006c4
 8002540:	200006c8 	.word	0x200006c8
 8002544:	200006cc 	.word	0x200006cc
 8002548:	200006d0 	.word	0x200006d0
 800254c:	200006d4 	.word	0x200006d4
 8002550:	200005d0 	.word	0x200005d0
 8002554:	200005b4 	.word	0x200005b4
 8002558:	200005b8 	.word	0x200005b8
 800255c:	200005bc 	.word	0x200005bc
			}
			else if(theta_dest < Sa){
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <TrajectoryGenerator+0x5d0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff9b 	bl	80004a0 <__aeabi_f2d>
 800256a:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <TrajectoryGenerator+0x5d4>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe fa7e 	bl	8000a70 <__aeabi_dcmpgt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 81f6 	beq.w	8002968 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <TrajectoryGenerator+0x5d8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ff8d 	bl	80004a0 <__aeabi_f2d>
 8002586:	4b67      	ldr	r3, [pc, #412]	; (8002724 <TrajectoryGenerator+0x5d4>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe fa70 	bl	8000a70 <__aeabi_dcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d031      	beq.n	80025fa <TrajectoryGenerator+0x4aa>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <TrajectoryGenerator+0x5d4>)
 8002598:	e9d3 4500 	ldrd	r4, r5, [r3]
 800259c:	4b63      	ldr	r3, [pc, #396]	; (800272c <TrajectoryGenerator+0x5dc>)
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	f7fd fe1d 	bl	80001e4 <__adddf3>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fe f8f7 	bl	80007a4 <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b17 	vmov	d7, r2, r3
 80025be:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002718 <TrajectoryGenerator+0x5c8>
 80025c2:	eeb0 0a47 	vmov.f32	s0, s14
 80025c6:	eef0 0a67 	vmov.f32	s1, s15
 80025ca:	f009 fde5 	bl	800c198 <pow>
 80025ce:	ec53 2b10 	vmov	r2, r3, d0
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fe fa8b 	bl	8000af0 <__aeabi_d2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a54      	ldr	r2, [pc, #336]	; (8002730 <TrajectoryGenerator+0x5e0>)
 80025de:	6013      	str	r3, [r2, #0]
					ta = tj;
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <TrajectoryGenerator+0x5e0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a53      	ldr	r2, [pc, #332]	; (8002734 <TrajectoryGenerator+0x5e4>)
 80025e6:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 80025e8:	4b51      	ldr	r3, [pc, #324]	; (8002730 <TrajectoryGenerator+0x5e0>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <TrajectoryGenerator+0x5e8>)
 80025f4:	edc3 7a00 	vstr	s15, [r3]
 80025f8:	e1b6      	b.n	8002968 <TrajectoryGenerator+0x818>
				}
				else if(theta_dest > Sv){
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <TrajectoryGenerator+0x5d8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff4e 	bl	80004a0 <__aeabi_f2d>
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <TrajectoryGenerator+0x5d4>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe fa13 	bl	8000a34 <__aeabi_dcmplt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 81a9 	beq.w	8002968 <TrajectoryGenerator+0x818>
					//caseIII
					tj = sqrt((w_max/j_max));
 8002616:	4b49      	ldr	r3, [pc, #292]	; (800273c <TrajectoryGenerator+0x5ec>)
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <TrajectoryGenerator+0x5dc>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f8bf 	bl	80007a4 <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	ec43 2b17 	vmov	d7, r2, r3
 800262e:	eeb0 0a47 	vmov.f32	s0, s14
 8002632:	eef0 0a67 	vmov.f32	s1, s15
 8002636:	f009 fe1f 	bl	800c278 <sqrt>
 800263a:	ec53 2b10 	vmov	r2, r3, d0
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fa55 	bl	8000af0 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a39      	ldr	r2, [pc, #228]	; (8002730 <TrajectoryGenerator+0x5e0>)
 800264a:	6013      	str	r3, [r2, #0]
					ta = tj;
 800264c:	4b38      	ldr	r3, [pc, #224]	; (8002730 <TrajectoryGenerator+0x5e0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a38      	ldr	r2, [pc, #224]	; (8002734 <TrajectoryGenerator+0x5e4>)
 8002652:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <TrajectoryGenerator+0x5d4>)
 8002656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <TrajectoryGenerator+0x5ec>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fe f8a0 	bl	80007a4 <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fa40 	bl	8000af0 <__aeabi_d2f>
 8002670:	4603      	mov	r3, r0
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <TrajectoryGenerator+0x5e8>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e177      	b.n	8002968 <TrajectoryGenerator+0x818>
				}
			}
		}
		else if(w_max >= Va){
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <TrajectoryGenerator+0x5f0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff0f 	bl	80004a0 <__aeabi_f2d>
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <TrajectoryGenerator+0x5ec>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fe f9de 	bl	8000a48 <__aeabi_dcmple>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 816a 	beq.w	8002968 <TrajectoryGenerator+0x818>
			if(theta_dest < Sa){
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <TrajectoryGenerator+0x5d0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff01 	bl	80004a0 <__aeabi_f2d>
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <TrajectoryGenerator+0x5d4>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fe f9e4 	bl	8000a70 <__aeabi_dcmpgt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d04a      	beq.n	8002744 <TrajectoryGenerator+0x5f4>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <TrajectoryGenerator+0x5d4>)
 80026b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <TrajectoryGenerator+0x5dc>)
 80026b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f7fd fd91 	bl	80001e4 <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fe f86b 	bl	80007a4 <__aeabi_ddiv>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ec43 2b17 	vmov	d7, r2, r3
 80026d6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002718 <TrajectoryGenerator+0x5c8>
 80026da:	eeb0 0a47 	vmov.f32	s0, s14
 80026de:	eef0 0a67 	vmov.f32	s1, s15
 80026e2:	f009 fd59 	bl	800c198 <pow>
 80026e6:	ec53 2b10 	vmov	r2, r3, d0
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe f9ff 	bl	8000af0 <__aeabi_d2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <TrajectoryGenerator+0x5e0>)
 80026f6:	6013      	str	r3, [r2, #0]
				ta = tj;
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <TrajectoryGenerator+0x5e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <TrajectoryGenerator+0x5e4>)
 80026fe:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <TrajectoryGenerator+0x5e0>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <TrajectoryGenerator+0x5e8>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
 8002710:	e12a      	b.n	8002968 <TrajectoryGenerator+0x818>
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	85f06f69 	.word	0x85f06f69
 800271c:	3fd554c9 	.word	0x3fd554c9
 8002720:	200006d0 	.word	0x200006d0
 8002724:	200005d0 	.word	0x200005d0
 8002728:	200006d4 	.word	0x200006d4
 800272c:	20000078 	.word	0x20000078
 8002730:	200005b4 	.word	0x200005b4
 8002734:	200005b8 	.word	0x200005b8
 8002738:	200005bc 	.word	0x200005bc
 800273c:	20000068 	.word	0x20000068
 8002740:	200006cc 	.word	0x200006cc
			}
			else if(theta_dest >= Sa){
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <TrajectoryGenerator+0x770>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fea9 	bl	80004a0 <__aeabi_f2d>
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <TrajectoryGenerator+0x774>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fe f978 	bl	8000a48 <__aeabi_dcmple>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8104 	beq.w	8002968 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <TrajectoryGenerator+0x778>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fe9b 	bl	80004a0 <__aeabi_f2d>
 800276a:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <TrajectoryGenerator+0x774>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fe f97e 	bl	8000a70 <__aeabi_dcmpgt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80b6 	beq.w	80028e8 <TrajectoryGenerator+0x798>
					//caseVI
					tj = a_max/j_max;
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <TrajectoryGenerator+0x77c>)
 800277e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <TrajectoryGenerator+0x780>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fe f80c 	bl	80007a4 <__aeabi_ddiv>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe f9ac 	bl	8000af0 <__aeabi_d2f>
 8002798:	4603      	mov	r3, r0
 800279a:	4a4e      	ldr	r2, [pc, #312]	; (80028d4 <TrajectoryGenerator+0x784>)
 800279c:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <TrajectoryGenerator+0x774>)
 80027a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <TrajectoryGenerator+0x788>)
 80027aa:	f7fd fed1 	bl	8000550 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <TrajectoryGenerator+0x780>)
 80027b8:	ed93 7b00 	vldr	d7, [r3]
 80027bc:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80028b0 <TrajectoryGenerator+0x760>
 80027c0:	eeb0 0a47 	vmov.f32	s0, s14
 80027c4:	eef0 0a67 	vmov.f32	s1, s15
 80027c8:	f009 fce6 	bl	800c198 <pow>
 80027cc:	ec53 2b10 	vmov	r2, r3, d0
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd febc 	bl	8000550 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4614      	mov	r4, r2
 80027de:	461d      	mov	r5, r3
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <TrajectoryGenerator+0x77c>)
 80027e2:	ed93 7b00 	vldr	d7, [r3]
 80027e6:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80028b8 <TrajectoryGenerator+0x768>
 80027ea:	eeb0 0a47 	vmov.f32	s0, s14
 80027ee:	eef0 0a67 	vmov.f32	s1, s15
 80027f2:	f009 fcd1 	bl	800c198 <pow>
 80027f6:	ec53 2b10 	vmov	r2, r3, d0
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd fcf1 	bl	80001e4 <__adddf3>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	461d      	mov	r5, r3
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <TrajectoryGenerator+0x780>)
 800280c:	ed93 7b00 	vldr	d7, [r3]
 8002810:	ed9f 1b27 	vldr	d1, [pc, #156]	; 80028b0 <TrajectoryGenerator+0x760>
 8002814:	eeb0 0a47 	vmov.f32	s0, s14
 8002818:	eef0 0a67 	vmov.f32	s1, s15
 800281c:	f009 fcbc 	bl	800c198 <pow>
 8002820:	ec51 0b10 	vmov	r0, r1, d0
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <TrajectoryGenerator+0x77c>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fd fe91 	bl	8000550 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd ffb5 	bl	80007a4 <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b17 	vmov	d7, r2, r3
 8002842:	eeb0 0a47 	vmov.f32	s0, s14
 8002846:	eef0 0a67 	vmov.f32	s1, s15
 800284a:	f009 fd15 	bl	800c278 <sqrt>
 800284e:	ec55 4b10 	vmov	r4, r5, d0
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <TrajectoryGenerator+0x77c>)
 8002854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <TrajectoryGenerator+0x780>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd ffa1 	bl	80007a4 <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7fd fcb9 	bl	80001e0 <__aeabi_dsub>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <TrajectoryGenerator+0x78c>)
 800287c:	f7fd fe68 	bl	8000550 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f932 	bl	8000af0 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <TrajectoryGenerator+0x790>)
 8002890:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <TrajectoryGenerator+0x790>)
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <TrajectoryGenerator+0x784>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <TrajectoryGenerator+0x794>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
 80028a8:	e05e      	b.n	8002968 <TrajectoryGenerator+0x818>
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40000000 	.word	0x40000000
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40080000 	.word	0x40080000
 80028c0:	200006d0 	.word	0x200006d0
 80028c4:	200005d0 	.word	0x200005d0
 80028c8:	200006d4 	.word	0x200006d4
 80028cc:	20000070 	.word	0x20000070
 80028d0:	20000078 	.word	0x20000078
 80028d4:	200005b4 	.word	0x200005b4
 80028d8:	40100000 	.word	0x40100000
 80028dc:	3fe00000 	.word	0x3fe00000
 80028e0:	200005b8 	.word	0x200005b8
 80028e4:	200005bc 	.word	0x200005bc
				}
				else if(theta_dest >= Sv){
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <TrajectoryGenerator+0x944>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fdd7 	bl	80004a0 <__aeabi_f2d>
 80028f2:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <TrajectoryGenerator+0x948>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fe f8a6 	bl	8000a48 <__aeabi_dcmple>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d032      	beq.n	8002968 <TrajectoryGenerator+0x818>
					//caseV
					tj = a_max/j_max;
 8002902:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <TrajectoryGenerator+0x94c>)
 8002904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002908:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <TrajectoryGenerator+0x950>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd ff49 	bl	80007a4 <__aeabi_ddiv>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f8e9 	bl	8000af0 <__aeabi_d2f>
 800291e:	4603      	mov	r3, r0
 8002920:	4a60      	ldr	r2, [pc, #384]	; (8002aa4 <TrajectoryGenerator+0x954>)
 8002922:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <TrajectoryGenerator+0x958>)
 8002926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <TrajectoryGenerator+0x94c>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd ff38 	bl	80007a4 <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f8d8 	bl	8000af0 <__aeabi_d2f>
 8002940:	4603      	mov	r3, r0
 8002942:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <TrajectoryGenerator+0x95c>)
 8002944:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <TrajectoryGenerator+0x948>)
 8002948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800294c:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <TrajectoryGenerator+0x958>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd ff27 	bl	80007a4 <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f7fe f8c7 	bl	8000af0 <__aeabi_d2f>
 8002962:	4603      	mov	r3, r0
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <TrajectoryGenerator+0x960>)
 8002966:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 8002968:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <TrajectoryGenerator+0x954>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a51      	ldr	r2, [pc, #324]	; (8002ab4 <TrajectoryGenerator+0x964>)
 800296e:	6013      	str	r3, [r2, #0]
		t2 = ta;
 8002970:	4b4e      	ldr	r3, [pc, #312]	; (8002aac <TrajectoryGenerator+0x95c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a50      	ldr	r2, [pc, #320]	; (8002ab8 <TrajectoryGenerator+0x968>)
 8002976:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <TrajectoryGenerator+0x95c>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <TrajectoryGenerator+0x954>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <TrajectoryGenerator+0x96c>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <TrajectoryGenerator+0x960>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <TrajectoryGenerator+0x970>)
 8002994:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <TrajectoryGenerator+0x960>)
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <TrajectoryGenerator+0x954>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <TrajectoryGenerator+0x974>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <TrajectoryGenerator+0x960>)
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <TrajectoryGenerator+0x95c>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <TrajectoryGenerator+0x978>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <TrajectoryGenerator+0x960>)
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <TrajectoryGenerator+0x954>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <TrajectoryGenerator+0x95c>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <TrajectoryGenerator+0x97c>)
 80029de:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <TrajectoryGenerator+0x980>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	493a      	ldr	r1, [pc, #232]	; (8002ad4 <TrajectoryGenerator+0x984>)
 80029ea:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 80029ee:	493a      	ldr	r1, [pc, #232]	; (8002ad8 <TrajectoryGenerator+0x988>)
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <TrajectoryGenerator+0x98c>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <TrajectoryGenerator+0x990>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d16b      	bne.n	8002ae4 <TrajectoryGenerator+0x994>
		{
			j_max = negative(j_max);
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <TrajectoryGenerator+0x950>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f86b 	bl	8000af0 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	ee00 3a10 	vmov	s0, r3
 8002a20:	f001 fc10 	bl	8004244 <negative>
 8002a24:	ee10 3a10 	vmov	r3, s0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd39 	bl	80004a0 <__aeabi_f2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <TrajectoryGenerator+0x950>)
 8002a34:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <TrajectoryGenerator+0x94c>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f855 	bl	8000af0 <__aeabi_d2f>
 8002a46:	4603      	mov	r3, r0
 8002a48:	ee00 3a10 	vmov	s0, r3
 8002a4c:	f001 fbfa 	bl	8004244 <negative>
 8002a50:	ee10 3a10 	vmov	r3, s0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd23 	bl	80004a0 <__aeabi_f2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <TrajectoryGenerator+0x94c>)
 8002a60:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <TrajectoryGenerator+0x958>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f7fe f83f 	bl	8000af0 <__aeabi_d2f>
 8002a72:	4603      	mov	r3, r0
 8002a74:	ee00 3a10 	vmov	s0, r3
 8002a78:	f001 fbe4 	bl	8004244 <negative>
 8002a7c:	ee10 3a10 	vmov	r3, s0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd0d 	bl	80004a0 <__aeabi_f2d>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <TrajectoryGenerator+0x958>)
 8002a8c:	e9c1 2300 	strd	r2, r3, [r1]
 8002a90:	e06a      	b.n	8002b68 <TrajectoryGenerator+0xa18>
 8002a92:	bf00      	nop
 8002a94:	200006d4 	.word	0x200006d4
 8002a98:	200005d0 	.word	0x200005d0
 8002a9c:	20000070 	.word	0x20000070
 8002aa0:	20000078 	.word	0x20000078
 8002aa4:	200005b4 	.word	0x200005b4
 8002aa8:	20000068 	.word	0x20000068
 8002aac:	200005b8 	.word	0x200005b8
 8002ab0:	200005bc 	.word	0x200005bc
 8002ab4:	20000598 	.word	0x20000598
 8002ab8:	2000059c 	.word	0x2000059c
 8002abc:	200005a0 	.word	0x200005a0
 8002ac0:	200005a4 	.word	0x200005a4
 8002ac4:	200005a8 	.word	0x200005a8
 8002ac8:	200005ac 	.word	0x200005ac
 8002acc:	200005b0 	.word	0x200005b0
 8002ad0:	200005c0 	.word	0x200005c0
 8002ad4:	20000620 	.word	0x20000620
 8002ad8:	20000628 	.word	0x20000628
 8002adc:	20000630 	.word	0x20000630
 8002ae0:	200000d9 	.word	0x200000d9
		}

		else
		{
			j_max = positive(j_max);
 8002ae4:	4bcc      	ldr	r3, [pc, #816]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fd ffff 	bl	8000af0 <__aeabi_d2f>
 8002af2:	4603      	mov	r3, r0
 8002af4:	ee00 3a10 	vmov	s0, r3
 8002af8:	f001 fbc0 	bl	800427c <positive>
 8002afc:	ee10 3a10 	vmov	r3, s0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fccd 	bl	80004a0 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	49c3      	ldr	r1, [pc, #780]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002b0c:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 8002b10:	4bc2      	ldr	r3, [pc, #776]	; (8002e1c <TrajectoryGenerator+0xccc>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fd ffe9 	bl	8000af0 <__aeabi_d2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	ee00 3a10 	vmov	s0, r3
 8002b24:	f001 fbaa 	bl	800427c <positive>
 8002b28:	ee10 3a10 	vmov	r3, s0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcb7 	bl	80004a0 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	49b9      	ldr	r1, [pc, #740]	; (8002e1c <TrajectoryGenerator+0xccc>)
 8002b38:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 8002b3c:	4bb8      	ldr	r3, [pc, #736]	; (8002e20 <TrajectoryGenerator+0xcd0>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fd ffd3 	bl	8000af0 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	ee00 3a10 	vmov	s0, r3
 8002b50:	f001 fb94 	bl	800427c <positive>
 8002b54:	ee10 3a10 	vmov	r3, s0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fca1 	bl	80004a0 <__aeabi_f2d>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	49af      	ldr	r1, [pc, #700]	; (8002e20 <TrajectoryGenerator+0xcd0>)
 8002b64:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 8002b68:	4bab      	ldr	r3, [pc, #684]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002e00 <TrajectoryGenerator+0xcb0>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fcec 	bl	8000550 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4ba8      	ldr	r3, [pc, #672]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fc8b 	bl	80004a0 <__aeabi_f2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002e08 <TrajectoryGenerator+0xcb8>
 8002b92:	ec43 2b10 	vmov	d0, r2, r3
 8002b96:	f009 faff 	bl	800c198 <pow>
 8002b9a:	ec53 2b10 	vmov	r2, r3, d0
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fcd5 	bl	8000550 <__aeabi_dmul>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fd ff9f 	bl	8000af0 <__aeabi_d2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a9c      	ldr	r2, [pc, #624]	; (8002e28 <TrajectoryGenerator+0xcd8>)
 8002bb6:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8002bb8:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b9a      	ldr	r3, [pc, #616]	; (8002e2c <TrajectoryGenerator+0xcdc>)
 8002bc4:	f7fd fcc4 	bl	8000550 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc63 	bl	80004a0 <__aeabi_f2d>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002e10 <TrajectoryGenerator+0xcc0>
 8002be2:	ec43 2b10 	vmov	d0, r2, r3
 8002be6:	f009 fad7 	bl	800c198 <pow>
 8002bea:	ec53 2b10 	vmov	r2, r3, d0
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fcad 	bl	8000550 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff77 	bl	8000af0 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4a8a      	ldr	r2, [pc, #552]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002c06:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002c08:	4b86      	ldr	r3, [pc, #536]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc47 	bl	80004a0 <__aeabi_f2d>
 8002c12:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fc9a 	bl	8000550 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ff64 	bl	8000af0 <__aeabi_d2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a82      	ldr	r2, [pc, #520]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002c2c:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002c2e:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <TrajectoryGenerator+0xcd8>)
 8002c30:	ed93 7a00 	vldr	s14, [r3]
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002c36:	edd3 6a00 	vldr	s13, [r3]
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002c3c:	ed93 6a00 	vldr	s12, [r3]
 8002c40:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	ee17 0a90 	vmov	r0, s15
 8002c56:	f7fd fc23 	bl	80004a0 <__aeabi_f2d>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	4b75      	ldr	r3, [pc, #468]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc1c 	bl	80004a0 <__aeabi_f2d>
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <TrajectoryGenerator+0xcdc>)
 8002c6e:	f7fd fc6f 	bl	8000550 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4690      	mov	r8, r2
 8002c78:	4699      	mov	r9, r3
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c8a:	ee17 0a90 	vmov	r0, s15
 8002c8e:	f7fd fc07 	bl	80004a0 <__aeabi_f2d>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002e10 <TrajectoryGenerator+0xcc0>
 8002c9a:	ec43 2b10 	vmov	d0, r2, r3
 8002c9e:	f009 fa7b 	bl	800c198 <pow>
 8002ca2:	ec53 2b10 	vmov	r2, r3, d0
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	4649      	mov	r1, r9
 8002caa:	f7fd fc51 	bl	8000550 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fa95 	bl	80001e4 <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff15 	bl	8000af0 <__aeabi_d2f>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a57      	ldr	r2, [pc, #348]	; (8002e28 <TrajectoryGenerator+0xcd8>)
 8002cca:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002cd4:	edd3 6a00 	vldr	s13, [r3]
 8002cd8:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002cda:	ed93 6a00 	vldr	s12, [r3]
 8002cde:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <TrajectoryGenerator+0xcd4>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002cf2:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002cf6:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4e      	ldr	r2, [pc, #312]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002cfc:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <TrajectoryGenerator+0xcd8>)
 8002d00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002d06:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <TrajectoryGenerator+0xcec>)
 8002d0c:	ed93 6a00 	vldr	s12, [r3]
 8002d10:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	ee17 0a90 	vmov	r0, s15
 8002d26:	f7fd fbbb 	bl	80004a0 <__aeabi_f2d>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <TrajectoryGenerator+0xce4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fbb4 	bl	80004a0 <__aeabi_f2d>
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <TrajectoryGenerator+0xcdc>)
 8002d3e:	f7fd fc07 	bl	8000550 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4690      	mov	r8, r2
 8002d48:	4699      	mov	r9, r3
 8002d4a:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <TrajectoryGenerator+0xcec>)
 8002d4c:	ed93 7a00 	vldr	s14, [r3]
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	ee17 0a90 	vmov	r0, s15
 8002d5e:	f7fd fb9f 	bl	80004a0 <__aeabi_f2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8002e10 <TrajectoryGenerator+0xcc0>
 8002d6a:	ec43 2b10 	vmov	d0, r2, r3
 8002d6e:	f009 fa13 	bl	800c198 <pow>
 8002d72:	ec53 2b10 	vmov	r2, r3, d0
 8002d76:	4640      	mov	r0, r8
 8002d78:	4649      	mov	r1, r9
 8002d7a:	f7fd fbe9 	bl	8000550 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fa2d 	bl	80001e4 <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4614      	mov	r4, r2
 8002d90:	461d      	mov	r5, r3
 8002d92:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <TrajectoryGenerator+0xcec>)
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <TrajectoryGenerator+0xce8>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	ee17 0a90 	vmov	r0, s15
 8002da6:	f7fd fb7b 	bl	80004a0 <__aeabi_f2d>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002e08 <TrajectoryGenerator+0xcb8>
 8002db2:	ec43 2b10 	vmov	d0, r2, r3
 8002db6:	f009 f9ef 	bl	800c198 <pow>
 8002dba:	ec51 0b10 	vmov	r0, r1, d0
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <TrajectoryGenerator+0xcc8>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fbc4 	bl	8000550 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <TrajectoryGenerator+0xcf0>)
 8002dd6:	f7fd fce5 	bl	80007a4 <__aeabi_ddiv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd f9fd 	bl	80001e0 <__aeabi_dsub>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f7fd fe7f 	bl	8000af0 <__aeabi_d2f>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <TrajectoryGenerator+0xcd8>)
 8002df6:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <TrajectoryGenerator+0xce0>)
 8002dfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dfe:	e021      	b.n	8002e44 <TrajectoryGenerator+0xcf4>
 8002e00:	55555555 	.word	0x55555555
 8002e04:	3fc55555 	.word	0x3fc55555
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40080000 	.word	0x40080000
 8002e10:	00000000 	.word	0x00000000
 8002e14:	40000000 	.word	0x40000000
 8002e18:	20000078 	.word	0x20000078
 8002e1c:	20000070 	.word	0x20000070
 8002e20:	20000068 	.word	0x20000068
 8002e24:	20000598 	.word	0x20000598
 8002e28:	20000608 	.word	0x20000608
 8002e2c:	3fe00000 	.word	0x3fe00000
 8002e30:	200005f0 	.word	0x200005f0
 8002e34:	200005d8 	.word	0x200005d8
 8002e38:	2000059c 	.word	0x2000059c
 8002e3c:	200005a0 	.word	0x200005a0
 8002e40:	40180000 	.word	0x40180000
 8002e44:	4bd0      	ldr	r3, [pc, #832]	; (8003188 <TrajectoryGenerator+0x1038>)
 8002e46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e4a:	4bd0      	ldr	r3, [pc, #832]	; (800318c <TrajectoryGenerator+0x103c>)
 8002e4c:	ed93 6a00 	vldr	s12, [r3]
 8002e50:	4bcf      	ldr	r3, [pc, #828]	; (8003190 <TrajectoryGenerator+0x1040>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e62:	ee17 0a90 	vmov	r0, s15
 8002e66:	f7fd fb1b 	bl	80004a0 <__aeabi_f2d>
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	4bc9      	ldr	r3, [pc, #804]	; (8003194 <TrajectoryGenerator+0x1044>)
 8002e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4bc7      	ldr	r3, [pc, #796]	; (8003198 <TrajectoryGenerator+0x1048>)
 8002e7a:	f7fd fb69 	bl	8000550 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4690      	mov	r8, r2
 8002e84:	4699      	mov	r9, r3
 8002e86:	4bc1      	ldr	r3, [pc, #772]	; (800318c <TrajectoryGenerator+0x103c>)
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	4bc0      	ldr	r3, [pc, #768]	; (8003190 <TrajectoryGenerator+0x1040>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f7fd fb01 	bl	80004a0 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003178 <TrajectoryGenerator+0x1028>
 8002ea6:	ec43 2b10 	vmov	d0, r2, r3
 8002eaa:	f009 f975 	bl	800c198 <pow>
 8002eae:	ec53 2b10 	vmov	r2, r3, d0
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	f7fd fb4b 	bl	8000550 <__aeabi_dmul>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd f98d 	bl	80001e0 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f7fd fe0f 	bl	8000af0 <__aeabi_d2f>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4ab1      	ldr	r2, [pc, #708]	; (800319c <TrajectoryGenerator+0x104c>)
 8002ed6:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 8002ed8:	4bab      	ldr	r3, [pc, #684]	; (8003188 <TrajectoryGenerator+0x1038>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fadf 	bl	80004a0 <__aeabi_f2d>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	4ba9      	ldr	r3, [pc, #676]	; (800318c <TrajectoryGenerator+0x103c>)
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	4ba8      	ldr	r3, [pc, #672]	; (8003190 <TrajectoryGenerator+0x1040>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fad1 	bl	80004a0 <__aeabi_f2d>
 8002efe:	4ba5      	ldr	r3, [pc, #660]	; (8003194 <TrajectoryGenerator+0x1044>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fb24 	bl	8000550 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd f966 	bl	80001e0 <__aeabi_dsub>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fd fde8 	bl	8000af0 <__aeabi_d2f>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4a99      	ldr	r2, [pc, #612]	; (8003188 <TrajectoryGenerator+0x1038>)
 8002f24:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8002f26:	4b9e      	ldr	r3, [pc, #632]	; (80031a0 <TrajectoryGenerator+0x1050>)
 8002f28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f2c:	4b9b      	ldr	r3, [pc, #620]	; (800319c <TrajectoryGenerator+0x104c>)
 8002f2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f32:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <TrajectoryGenerator+0x1054>)
 8002f34:	ed93 6a00 	vldr	s12, [r3]
 8002f38:	4b94      	ldr	r3, [pc, #592]	; (800318c <TrajectoryGenerator+0x103c>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4a:	4b95      	ldr	r3, [pc, #596]	; (80031a0 <TrajectoryGenerator+0x1050>)
 8002f4c:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8002f50:	4b92      	ldr	r3, [pc, #584]	; (800319c <TrajectoryGenerator+0x104c>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a91      	ldr	r2, [pc, #580]	; (800319c <TrajectoryGenerator+0x104c>)
 8002f56:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8002f58:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <TrajectoryGenerator+0x1038>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a8a      	ldr	r2, [pc, #552]	; (8003188 <TrajectoryGenerator+0x1038>)
 8002f5e:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8002f60:	4b8f      	ldr	r3, [pc, #572]	; (80031a0 <TrajectoryGenerator+0x1050>)
 8002f62:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f66:	4b8d      	ldr	r3, [pc, #564]	; (800319c <TrajectoryGenerator+0x104c>)
 8002f68:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f6c:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <TrajectoryGenerator+0x1058>)
 8002f6e:	ed93 6a00 	vldr	s12, [r3]
 8002f72:	4b8c      	ldr	r3, [pc, #560]	; (80031a4 <TrajectoryGenerator+0x1054>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	ee17 0a90 	vmov	r0, s15
 8002f88:	f7fd fa8a 	bl	80004a0 <__aeabi_f2d>
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	460d      	mov	r5, r1
 8002f90:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <TrajectoryGenerator+0x1058>)
 8002f92:	ed93 7a00 	vldr	s14, [r3]
 8002f96:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <TrajectoryGenerator+0x1054>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa0:	ee17 0a90 	vmov	r0, s15
 8002fa4:	f7fd fa7c 	bl	80004a0 <__aeabi_f2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003180 <TrajectoryGenerator+0x1030>
 8002fb0:	ec43 2b10 	vmov	d0, r2, r3
 8002fb4:	f009 f8f0 	bl	800c198 <pow>
 8002fb8:	ec51 0b10 	vmov	r0, r1, d0
 8002fbc:	4b75      	ldr	r3, [pc, #468]	; (8003194 <TrajectoryGenerator+0x1044>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fac5 	bl	8000550 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b76      	ldr	r3, [pc, #472]	; (80031ac <TrajectoryGenerator+0x105c>)
 8002fd4:	f7fd fbe6 	bl	80007a4 <__aeabi_ddiv>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4620      	mov	r0, r4
 8002fde:	4629      	mov	r1, r5
 8002fe0:	f7fd f8fe 	bl	80001e0 <__aeabi_dsub>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fd80 	bl	8000af0 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a6b      	ldr	r2, [pc, #428]	; (80031a0 <TrajectoryGenerator+0x1050>)
 8002ff4:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <TrajectoryGenerator+0x104c>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa50 	bl	80004a0 <__aeabi_f2d>
 8003000:	4604      	mov	r4, r0
 8003002:	460d      	mov	r5, r1
 8003004:	4b63      	ldr	r3, [pc, #396]	; (8003194 <TrajectoryGenerator+0x1044>)
 8003006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b62      	ldr	r3, [pc, #392]	; (8003198 <TrajectoryGenerator+0x1048>)
 8003010:	f7fd fa9e 	bl	8000550 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4690      	mov	r8, r2
 800301a:	4699      	mov	r9, r3
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <TrajectoryGenerator+0x1058>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <TrajectoryGenerator+0x1054>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	ee17 0a90 	vmov	r0, s15
 8003030:	f7fd fa36 	bl	80004a0 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8003178 <TrajectoryGenerator+0x1028>
 800303c:	ec43 2b10 	vmov	d0, r2, r3
 8003040:	f009 f8aa 	bl	800c198 <pow>
 8003044:	ec53 2b10 	vmov	r2, r3, d0
 8003048:	4640      	mov	r0, r8
 800304a:	4649      	mov	r1, r9
 800304c:	f7fd fa80 	bl	8000550 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f8c2 	bl	80001e0 <__aeabi_dsub>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fd44 	bl	8000af0 <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	4a4c      	ldr	r2, [pc, #304]	; (800319c <TrajectoryGenerator+0x104c>)
 800306c:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 800306e:	4b46      	ldr	r3, [pc, #280]	; (8003188 <TrajectoryGenerator+0x1038>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa14 	bl	80004a0 <__aeabi_f2d>
 8003078:	4604      	mov	r4, r0
 800307a:	460d      	mov	r5, r1
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <TrajectoryGenerator+0x1058>)
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <TrajectoryGenerator+0x1054>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa06 	bl	80004a0 <__aeabi_f2d>
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <TrajectoryGenerator+0x1044>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fa59 	bl	8000550 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd f89b 	bl	80001e0 <__aeabi_dsub>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fd1d 	bl	8000af0 <__aeabi_d2f>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a33      	ldr	r2, [pc, #204]	; (8003188 <TrajectoryGenerator+0x1038>)
 80030ba:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 80030bc:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <TrajectoryGenerator+0x1050>)
 80030be:	ed93 7a04 	vldr	s14, [r3, #16]
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <TrajectoryGenerator+0x104c>)
 80030c4:	edd3 6a04 	vldr	s13, [r3, #16]
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <TrajectoryGenerator+0x1060>)
 80030ca:	ed93 6a00 	vldr	s12, [r3]
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <TrajectoryGenerator+0x1058>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	ee17 0a90 	vmov	r0, s15
 80030e4:	f7fd f9dc 	bl	80004a0 <__aeabi_f2d>
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <TrajectoryGenerator+0x1038>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f9d5 	bl	80004a0 <__aeabi_f2d>
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <TrajectoryGenerator+0x1048>)
 80030fc:	f7fd fa28 	bl	8000550 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4690      	mov	r8, r2
 8003106:	4699      	mov	r9, r3
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <TrajectoryGenerator+0x1060>)
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <TrajectoryGenerator+0x1058>)
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003118:	ee17 0a90 	vmov	r0, s15
 800311c:	f7fd f9c0 	bl	80004a0 <__aeabi_f2d>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003178 <TrajectoryGenerator+0x1028>
 8003128:	ec43 2b10 	vmov	d0, r2, r3
 800312c:	f009 f834 	bl	800c198 <pow>
 8003130:	ec53 2b10 	vmov	r2, r3, d0
 8003134:	4640      	mov	r0, r8
 8003136:	4649      	mov	r1, r9
 8003138:	f7fd fa0a 	bl	8000550 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f84e 	bl	80001e4 <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fcce 	bl	8000af0 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <TrajectoryGenerator+0x1050>)
 8003158:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <TrajectoryGenerator+0x104c>)
 800315c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <TrajectoryGenerator+0x1038>)
 8003162:	edd3 6a04 	vldr	s13, [r3, #16]
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <TrajectoryGenerator+0x1060>)
 8003168:	ed93 6a00 	vldr	s12, [r3]
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <TrajectoryGenerator+0x1058>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003176:	e01d      	b.n	80031b4 <TrajectoryGenerator+0x1064>
 8003178:	00000000 	.word	0x00000000
 800317c:	40000000 	.word	0x40000000
 8003180:	00000000 	.word	0x00000000
 8003184:	40080000 	.word	0x40080000
 8003188:	200005d8 	.word	0x200005d8
 800318c:	200005a0 	.word	0x200005a0
 8003190:	2000059c 	.word	0x2000059c
 8003194:	20000078 	.word	0x20000078
 8003198:	3fe00000 	.word	0x3fe00000
 800319c:	200005f0 	.word	0x200005f0
 80031a0:	20000608 	.word	0x20000608
 80031a4:	200005a4 	.word	0x200005a4
 80031a8:	200005a8 	.word	0x200005a8
 80031ac:	40180000 	.word	0x40180000
 80031b0:	200005ac 	.word	0x200005ac
 80031b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <TrajectoryGenerator+0x1150>)
 80031be:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <TrajectoryGenerator+0x1154>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <TrajectoryGenerator+0x1154>)
 80031c8:	6153      	str	r3, [r2, #20]

		//Change Cascade Gain
		if (theta_dest > (2*M_PI/9))
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <TrajectoryGenerator+0x1158>)
 80031cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d0:	a331      	add	r3, pc, #196	; (adr r3, 8003298 <TrajectoryGenerator+0x1148>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd fc4b 	bl	8000a70 <__aeabi_dcmpgt>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d018      	beq.n	8003212 <TrajectoryGenerator+0x10c2>
		{
			kp_1 = kp_1_m;
 80031e0:	4b32      	ldr	r3, [pc, #200]	; (80032ac <TrajectoryGenerator+0x115c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <TrajectoryGenerator+0x1160>)
 80031e6:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_m;
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <TrajectoryGenerator+0x1164>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a32      	ldr	r2, [pc, #200]	; (80032b8 <TrajectoryGenerator+0x1168>)
 80031ee:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_m;
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <TrajectoryGenerator+0x116c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <TrajectoryGenerator+0x1170>)
 80031f6:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_m;
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <TrajectoryGenerator+0x1174>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <TrajectoryGenerator+0x1178>)
 80031fe:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_m;
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <TrajectoryGenerator+0x117c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a32      	ldr	r2, [pc, #200]	; (80032d0 <TrajectoryGenerator+0x1180>)
 8003206:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_m;
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <TrajectoryGenerator+0x1184>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a32      	ldr	r2, [pc, #200]	; (80032d8 <TrajectoryGenerator+0x1188>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e017      	b.n	8003242 <TrajectoryGenerator+0x10f2>

		}

		else
		{
			kp_1 = kp_1_l;
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <TrajectoryGenerator+0x118c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <TrajectoryGenerator+0x1160>)
 8003218:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_l;
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <TrajectoryGenerator+0x1190>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <TrajectoryGenerator+0x1168>)
 8003220:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_l;
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <TrajectoryGenerator+0x1194>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <TrajectoryGenerator+0x1170>)
 8003228:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_l;
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <TrajectoryGenerator+0x1198>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <TrajectoryGenerator+0x1178>)
 8003230:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_l;
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <TrajectoryGenerator+0x119c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <TrajectoryGenerator+0x1180>)
 8003238:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_l;
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <TrajectoryGenerator+0x11a0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <TrajectoryGenerator+0x1188>)
 8003240:	6013      	str	r3, [r2, #0]
		}


		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <TrajectoryGenerator+0x11a4>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <TrajectoryGenerator+0x11a8>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]

		//Reset Cascade PID
		e1 = 0;
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <TrajectoryGenerator+0x11ac>)
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
		s1 = 0;
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <TrajectoryGenerator+0x11b0>)
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
		p1 = 0;
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <TrajectoryGenerator+0x11b4>)
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
		u1 = 0;
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <TrajectoryGenerator+0x11b8>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
		e2 = 0;
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <TrajectoryGenerator+0x11bc>)
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
		s2 = 0;
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <TrajectoryGenerator+0x11c0>)
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
		p2 = 0;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <TrajectoryGenerator+0x11c4>)
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
		u2 = 0;
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <TrajectoryGenerator+0x11c8>)
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
	}
}
 800328e:	bf00      	nop
 8003290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003294:	f3af 8000 	nop.w
 8003298:	4ae74487 	.word	0x4ae74487
 800329c:	3fe65718 	.word	0x3fe65718
 80032a0:	200005f0 	.word	0x200005f0
 80032a4:	200005d8 	.word	0x200005d8
 80032a8:	200005d0 	.word	0x200005d0
 80032ac:	2000066c 	.word	0x2000066c
 80032b0:	20000654 	.word	0x20000654
 80032b4:	20000670 	.word	0x20000670
 80032b8:	20000658 	.word	0x20000658
 80032bc:	20000674 	.word	0x20000674
 80032c0:	2000065c 	.word	0x2000065c
 80032c4:	20000080 	.word	0x20000080
 80032c8:	20000660 	.word	0x20000660
 80032cc:	20000084 	.word	0x20000084
 80032d0:	20000664 	.word	0x20000664
 80032d4:	20000088 	.word	0x20000088
 80032d8:	20000668 	.word	0x20000668
 80032dc:	20000678 	.word	0x20000678
 80032e0:	2000067c 	.word	0x2000067c
 80032e4:	20000680 	.word	0x20000680
 80032e8:	20000684 	.word	0x20000684
 80032ec:	2000008c 	.word	0x2000008c
 80032f0:	20000090 	.word	0x20000090
 80032f4:	200003ea 	.word	0x200003ea
 80032f8:	200003e9 	.word	0x200003e9
 80032fc:	20000634 	.word	0x20000634
 8003300:	20000638 	.word	0x20000638
 8003304:	2000063c 	.word	0x2000063c
 8003308:	20000640 	.word	0x20000640
 800330c:	20000644 	.word	0x20000644
 8003310:	20000648 	.word	0x20000648
 8003314:	2000064c 	.word	0x2000064c
 8003318:	20000650 	.word	0x20000650
 800331c:	00000000 	.word	0x00000000

08003320 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	af00      	add	r7, sp, #0
	if( 0 <= t && t < t1){
 8003326:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <TrajectoryEvaluation+0x240>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	db70      	blt.n	8003418 <TrajectoryEvaluation+0xf8>
 8003336:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <TrajectoryEvaluation+0x240>)
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	4b89      	ldr	r3, [pc, #548]	; (8003564 <TrajectoryEvaluation+0x244>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d565      	bpl.n	8003418 <TrajectoryEvaluation+0xf8>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 800334c:	4b86      	ldr	r3, [pc, #536]	; (8003568 <TrajectoryEvaluation+0x248>)
 800334e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003352:	a37d      	add	r3, pc, #500	; (adr r3, 8003548 <TrajectoryEvaluation+0x228>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f8fa 	bl	8000550 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <TrajectoryEvaluation+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f899 	bl	80004a0 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003550 <TrajectoryEvaluation+0x230>
 8003376:	ec43 2b10 	vmov	d0, r2, r3
 800337a:	f008 ff0d 	bl	800c198 <pow>
 800337e:	ec53 2b10 	vmov	r2, r3, d0
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fd f8e3 	bl	8000550 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <TrajectoryEvaluation+0x24c>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fc ff24 	bl	80001e4 <__adddf3>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4973      	ldr	r1, [pc, #460]	; (8003570 <TrajectoryEvaluation+0x250>)
 80033a2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 80033a6:	4b70      	ldr	r3, [pc, #448]	; (8003568 <TrajectoryEvaluation+0x248>)
 80033a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <TrajectoryEvaluation+0x254>)
 80033b2:	f7fd f8cd 	bl	8000550 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4614      	mov	r4, r2
 80033bc:	461d      	mov	r5, r3
 80033be:	4b68      	ldr	r3, [pc, #416]	; (8003560 <TrajectoryEvaluation+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f86c 	bl	80004a0 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8003558 <TrajectoryEvaluation+0x238>
 80033d0:	ec43 2b10 	vmov	d0, r2, r3
 80033d4:	f008 fee0 	bl	800c198 <pow>
 80033d8:	ec53 2b10 	vmov	r2, r3, d0
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fd f8b6 	bl	8000550 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4963      	ldr	r1, [pc, #396]	; (8003578 <TrajectoryEvaluation+0x258>)
 80033ea:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 80033ee:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <TrajectoryEvaluation+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f854 	bl	80004a0 <__aeabi_f2d>
 80033f8:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <TrajectoryEvaluation+0x248>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fd f8a7 	bl	8000550 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fb71 	bl	8000af0 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	4a5a      	ldr	r2, [pc, #360]	; (800357c <TrajectoryEvaluation+0x25c>)
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	f000 bdab 	b.w	8003f6e <TrajectoryEvaluation+0xc4e>
	}
	else if (t1 <= t && t< t2){
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <TrajectoryEvaluation+0x244>)
 800341a:	ed93 7a00 	vldr	s14, [r3]
 800341e:	4b50      	ldr	r3, [pc, #320]	; (8003560 <TrajectoryEvaluation+0x240>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	f200 80b0 	bhi.w	8003590 <TrajectoryEvaluation+0x270>
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <TrajectoryEvaluation+0x240>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	4b52      	ldr	r3, [pc, #328]	; (8003580 <TrajectoryEvaluation+0x260>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	f140 80a4 	bpl.w	8003590 <TrajectoryEvaluation+0x270>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 8003448:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <TrajectoryEvaluation+0x264>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f827 	bl	80004a0 <__aeabi_f2d>
 8003452:	4b46      	ldr	r3, [pc, #280]	; (800356c <TrajectoryEvaluation+0x24c>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f7fc fec4 	bl	80001e4 <__adddf3>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	4b48      	ldr	r3, [pc, #288]	; (8003588 <TrajectoryEvaluation+0x268>)
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <TrajectoryEvaluation+0x240>)
 800346c:	edd3 6a00 	vldr	s13, [r3]
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <TrajectoryEvaluation+0x244>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	ee17 0a90 	vmov	r0, s15
 8003482:	f7fd f80d 	bl	80004a0 <__aeabi_f2d>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	f7fc fea9 	bl	80001e4 <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	4b3c      	ldr	r3, [pc, #240]	; (800358c <TrajectoryEvaluation+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc fffe 	bl	80004a0 <__aeabi_f2d>
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <TrajectoryEvaluation+0x254>)
 80034aa:	f7fd f851 	bl	8000550 <__aeabi_dmul>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <TrajectoryEvaluation+0x240>)
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <TrajectoryEvaluation+0x244>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c6:	ee17 0a90 	vmov	r0, s15
 80034ca:	f7fc ffe9 	bl	80004a0 <__aeabi_f2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003558 <TrajectoryEvaluation+0x238>
 80034d6:	ec43 2b10 	vmov	d0, r2, r3
 80034da:	f008 fe5d 	bl	800c198 <pow>
 80034de:	ec53 2b10 	vmov	r2, r3, d0
 80034e2:	4640      	mov	r0, r8
 80034e4:	4649      	mov	r1, r9
 80034e6:	f7fd f833 	bl	8000550 <__aeabi_dmul>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fc fe77 	bl	80001e4 <__adddf3>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	491d      	ldr	r1, [pc, #116]	; (8003570 <TrajectoryEvaluation+0x250>)
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <TrajectoryEvaluation+0x268>)
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <TrajectoryEvaluation+0x26c>)
 8003508:	edd3 6a00 	vldr	s13, [r3]
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <TrajectoryEvaluation+0x240>)
 800350e:	ed93 6a00 	vldr	s12, [r3]
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <TrajectoryEvaluation+0x244>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	ee76 7a67 	vsub.f32	s15, s12, s15
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	ee17 0a90 	vmov	r0, s15
 8003528:	f7fc ffba 	bl	80004a0 <__aeabi_f2d>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4911      	ldr	r1, [pc, #68]	; (8003578 <TrajectoryEvaluation+0x258>)
 8003532:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <TrajectoryEvaluation+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <TrajectoryEvaluation+0x25c>)
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	f000 bd16 	b.w	8003f6e <TrajectoryEvaluation+0xc4e>
 8003542:	bf00      	nop
 8003544:	f3af 8000 	nop.w
 8003548:	55555555 	.word	0x55555555
 800354c:	3fc55555 	.word	0x3fc55555
 8003550:	00000000 	.word	0x00000000
 8003554:	40080000 	.word	0x40080000
 8003558:	00000000 	.word	0x00000000
 800355c:	40000000 	.word	0x40000000
 8003560:	20000594 	.word	0x20000594
 8003564:	20000598 	.word	0x20000598
 8003568:	20000078 	.word	0x20000078
 800356c:	200005c0 	.word	0x200005c0
 8003570:	20000620 	.word	0x20000620
 8003574:	3fe00000 	.word	0x3fe00000
 8003578:	20000628 	.word	0x20000628
 800357c:	20000630 	.word	0x20000630
 8003580:	2000059c 	.word	0x2000059c
 8003584:	20000608 	.word	0x20000608
 8003588:	200005f0 	.word	0x200005f0
 800358c:	200005d8 	.word	0x200005d8
	}
	else if (t2 <= t && t < t3){
 8003590:	4bb5      	ldr	r3, [pc, #724]	; (8003868 <TrajectoryEvaluation+0x548>)
 8003592:	ed93 7a00 	vldr	s14, [r3]
 8003596:	4bb5      	ldr	r3, [pc, #724]	; (800386c <TrajectoryEvaluation+0x54c>)
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	f200 8107 	bhi.w	80037b6 <TrajectoryEvaluation+0x496>
 80035a8:	4bb0      	ldr	r3, [pc, #704]	; (800386c <TrajectoryEvaluation+0x54c>)
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	4bb0      	ldr	r3, [pc, #704]	; (8003870 <TrajectoryEvaluation+0x550>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035bc:	f140 80fb 	bpl.w	80037b6 <TrajectoryEvaluation+0x496>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 80035c0:	4bac      	ldr	r3, [pc, #688]	; (8003874 <TrajectoryEvaluation+0x554>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ff6b 	bl	80004a0 <__aeabi_f2d>
 80035ca:	4bab      	ldr	r3, [pc, #684]	; (8003878 <TrajectoryEvaluation+0x558>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fc fe08 	bl	80001e4 <__adddf3>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	4ba7      	ldr	r3, [pc, #668]	; (800387c <TrajectoryEvaluation+0x55c>)
 80035de:	ed93 7a01 	vldr	s14, [r3, #4]
 80035e2:	4ba2      	ldr	r3, [pc, #648]	; (800386c <TrajectoryEvaluation+0x54c>)
 80035e4:	edd3 6a00 	vldr	s13, [r3]
 80035e8:	4b9f      	ldr	r3, [pc, #636]	; (8003868 <TrajectoryEvaluation+0x548>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	ee17 0a90 	vmov	r0, s15
 80035fa:	f7fc ff51 	bl	80004a0 <__aeabi_f2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc fded 	bl	80001e4 <__adddf3>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	4b9b      	ldr	r3, [pc, #620]	; (8003880 <TrajectoryEvaluation+0x560>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ff42 	bl	80004a0 <__aeabi_f2d>
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	4b98      	ldr	r3, [pc, #608]	; (8003884 <TrajectoryEvaluation+0x564>)
 8003622:	f7fc ff95 	bl	8000550 <__aeabi_dmul>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4b8f      	ldr	r3, [pc, #572]	; (800386c <TrajectoryEvaluation+0x54c>)
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	4b8c      	ldr	r3, [pc, #560]	; (8003868 <TrajectoryEvaluation+0x548>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363e:	ee17 0a90 	vmov	r0, s15
 8003642:	f7fc ff2d 	bl	80004a0 <__aeabi_f2d>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8003858 <TrajectoryEvaluation+0x538>
 800364e:	ec43 2b10 	vmov	d0, r2, r3
 8003652:	f008 fda1 	bl	800c198 <pow>
 8003656:	ec53 2b10 	vmov	r2, r3, d0
 800365a:	4640      	mov	r0, r8
 800365c:	4649      	mov	r1, r9
 800365e:	f7fc ff77 	bl	8000550 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4620      	mov	r0, r4
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc fdbb 	bl	80001e4 <__adddf3>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4614      	mov	r4, r2
 8003674:	461d      	mov	r5, r3
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <TrajectoryEvaluation+0x54c>)
 8003678:	ed93 7a00 	vldr	s14, [r3]
 800367c:	4b7a      	ldr	r3, [pc, #488]	; (8003868 <TrajectoryEvaluation+0x548>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003686:	ee17 0a90 	vmov	r0, s15
 800368a:	f7fc ff09 	bl	80004a0 <__aeabi_f2d>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8003860 <TrajectoryEvaluation+0x540>
 8003696:	ec43 2b10 	vmov	d0, r2, r3
 800369a:	f008 fd7d 	bl	800c198 <pow>
 800369e:	ec51 0b10 	vmov	r0, r1, d0
 80036a2:	4b79      	ldr	r3, [pc, #484]	; (8003888 <TrajectoryEvaluation+0x568>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ff52 	bl	8000550 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b74      	ldr	r3, [pc, #464]	; (800388c <TrajectoryEvaluation+0x56c>)
 80036ba:	f7fd f873 	bl	80007a4 <__aeabi_ddiv>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc fd8b 	bl	80001e0 <__aeabi_dsub>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4970      	ldr	r1, [pc, #448]	; (8003890 <TrajectoryEvaluation+0x570>)
 80036d0:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 80036d4:	4b69      	ldr	r3, [pc, #420]	; (800387c <TrajectoryEvaluation+0x55c>)
 80036d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80036da:	4b69      	ldr	r3, [pc, #420]	; (8003880 <TrajectoryEvaluation+0x560>)
 80036dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80036e0:	4b62      	ldr	r3, [pc, #392]	; (800386c <TrajectoryEvaluation+0x54c>)
 80036e2:	ed93 6a00 	vldr	s12, [r3]
 80036e6:	4b60      	ldr	r3, [pc, #384]	; (8003868 <TrajectoryEvaluation+0x548>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f8:	ee17 0a90 	vmov	r0, s15
 80036fc:	f7fc fed0 	bl	80004a0 <__aeabi_f2d>
 8003700:	4604      	mov	r4, r0
 8003702:	460d      	mov	r5, r1
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <TrajectoryEvaluation+0x568>)
 8003706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <TrajectoryEvaluation+0x564>)
 8003710:	f7fc ff1e 	bl	8000550 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4690      	mov	r8, r2
 800371a:	4699      	mov	r9, r3
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <TrajectoryEvaluation+0x54c>)
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	4b51      	ldr	r3, [pc, #324]	; (8003868 <TrajectoryEvaluation+0x548>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372c:	ee17 0a90 	vmov	r0, s15
 8003730:	f7fc feb6 	bl	80004a0 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8003858 <TrajectoryEvaluation+0x538>
 800373c:	ec43 2b10 	vmov	d0, r2, r3
 8003740:	f008 fd2a 	bl	800c198 <pow>
 8003744:	ec53 2b10 	vmov	r2, r3, d0
 8003748:	4640      	mov	r0, r8
 800374a:	4649      	mov	r1, r9
 800374c:	f7fc ff00 	bl	8000550 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fc fd42 	bl	80001e0 <__aeabi_dsub>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	494c      	ldr	r1, [pc, #304]	; (8003894 <TrajectoryEvaluation+0x574>)
 8003762:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 8003766:	4b46      	ldr	r3, [pc, #280]	; (8003880 <TrajectoryEvaluation+0x560>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fe98 	bl	80004a0 <__aeabi_f2d>
 8003770:	4604      	mov	r4, r0
 8003772:	460d      	mov	r5, r1
 8003774:	4b3d      	ldr	r3, [pc, #244]	; (800386c <TrajectoryEvaluation+0x54c>)
 8003776:	ed93 7a00 	vldr	s14, [r3]
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <TrajectoryEvaluation+0x548>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003784:	ee17 0a90 	vmov	r0, s15
 8003788:	f7fc fe8a 	bl	80004a0 <__aeabi_f2d>
 800378c:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <TrajectoryEvaluation+0x568>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fc fedd 	bl	8000550 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc fd1f 	bl	80001e0 <__aeabi_dsub>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fd f9a1 	bl	8000af0 <__aeabi_d2f>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4a39      	ldr	r2, [pc, #228]	; (8003898 <TrajectoryEvaluation+0x578>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e3db      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
	}
	else if (t3 <= t && t < t4 ){
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <TrajectoryEvaluation+0x550>)
 80037b8:	ed93 7a00 	vldr	s14, [r3]
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <TrajectoryEvaluation+0x54c>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d869      	bhi.n	80038a0 <TrajectoryEvaluation+0x580>
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <TrajectoryEvaluation+0x54c>)
 80037ce:	ed93 7a00 	vldr	s14, [r3]
 80037d2:	4b32      	ldr	r3, [pc, #200]	; (800389c <TrajectoryEvaluation+0x57c>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e0:	d55e      	bpl.n	80038a0 <TrajectoryEvaluation+0x580>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <TrajectoryEvaluation+0x554>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe5a 	bl	80004a0 <__aeabi_f2d>
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <TrajectoryEvaluation+0x558>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc fcf7 	bl	80001e4 <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	461d      	mov	r5, r3
 80037fe:	4b1f      	ldr	r3, [pc, #124]	; (800387c <TrajectoryEvaluation+0x55c>)
 8003800:	ed93 7a02 	vldr	s14, [r3, #8]
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <TrajectoryEvaluation+0x54c>)
 8003806:	edd3 6a00 	vldr	s13, [r3]
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <TrajectoryEvaluation+0x550>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	ee17 0a90 	vmov	r0, s15
 800381c:	f7fc fe40 	bl	80004a0 <__aeabi_f2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fc fcdc 	bl	80001e4 <__adddf3>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4917      	ldr	r1, [pc, #92]	; (8003890 <TrajectoryEvaluation+0x570>)
 8003832:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <TrajectoryEvaluation+0x55c>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fe30 	bl	80004a0 <__aeabi_f2d>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4913      	ldr	r1, [pc, #76]	; (8003894 <TrajectoryEvaluation+0x574>)
 8003846:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <TrajectoryEvaluation+0x578>)
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e38c      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
 8003854:	f3af 8000 	nop.w
 8003858:	00000000 	.word	0x00000000
 800385c:	40000000 	.word	0x40000000
 8003860:	00000000 	.word	0x00000000
 8003864:	40080000 	.word	0x40080000
 8003868:	2000059c 	.word	0x2000059c
 800386c:	20000594 	.word	0x20000594
 8003870:	200005a0 	.word	0x200005a0
 8003874:	20000608 	.word	0x20000608
 8003878:	200005c0 	.word	0x200005c0
 800387c:	200005f0 	.word	0x200005f0
 8003880:	200005d8 	.word	0x200005d8
 8003884:	3fe00000 	.word	0x3fe00000
 8003888:	20000078 	.word	0x20000078
 800388c:	40180000 	.word	0x40180000
 8003890:	20000620 	.word	0x20000620
 8003894:	20000628 	.word	0x20000628
 8003898:	20000630 	.word	0x20000630
 800389c:	200005a4 	.word	0x200005a4
	}
	else if (t4 <= t && t < t5 ){
 80038a0:	4bb3      	ldr	r3, [pc, #716]	; (8003b70 <TrajectoryEvaluation+0x850>)
 80038a2:	ed93 7a00 	vldr	s14, [r3]
 80038a6:	4bb3      	ldr	r3, [pc, #716]	; (8003b74 <TrajectoryEvaluation+0x854>)
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	f200 80be 	bhi.w	8003a34 <TrajectoryEvaluation+0x714>
 80038b8:	4bae      	ldr	r3, [pc, #696]	; (8003b74 <TrajectoryEvaluation+0x854>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	4bae      	ldr	r3, [pc, #696]	; (8003b78 <TrajectoryEvaluation+0x858>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	f140 80b2 	bpl.w	8003a34 <TrajectoryEvaluation+0x714>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 80038d0:	4baa      	ldr	r3, [pc, #680]	; (8003b7c <TrajectoryEvaluation+0x85c>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fde3 	bl	80004a0 <__aeabi_f2d>
 80038da:	4ba9      	ldr	r3, [pc, #676]	; (8003b80 <TrajectoryEvaluation+0x860>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fc80 	bl	80001e4 <__adddf3>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4690      	mov	r8, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	4ba5      	ldr	r3, [pc, #660]	; (8003b84 <TrajectoryEvaluation+0x864>)
 80038ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80038f2:	4ba0      	ldr	r3, [pc, #640]	; (8003b74 <TrajectoryEvaluation+0x854>)
 80038f4:	edd3 6a00 	vldr	s13, [r3]
 80038f8:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <TrajectoryEvaluation+0x850>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	ee17 0a90 	vmov	r0, s15
 800390a:	f7fc fdc9 	bl	80004a0 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f7fc fc65 	bl	80001e4 <__adddf3>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4690      	mov	r8, r2
 8003920:	4699      	mov	r9, r3
 8003922:	4b94      	ldr	r3, [pc, #592]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003924:	ed93 7a00 	vldr	s14, [r3]
 8003928:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <TrajectoryEvaluation+0x850>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003932:	ee17 0a90 	vmov	r0, s15
 8003936:	f7fc fdb3 	bl	80004a0 <__aeabi_f2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003b60 <TrajectoryEvaluation+0x840>
 8003942:	ec43 2b10 	vmov	d0, r2, r3
 8003946:	f008 fc27 	bl	800c198 <pow>
 800394a:	ec51 0b10 	vmov	r0, r1, d0
 800394e:	4b8e      	ldr	r3, [pc, #568]	; (8003b88 <TrajectoryEvaluation+0x868>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f7fc fdfc 	bl	8000550 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <TrajectoryEvaluation+0x86c>)
 8003966:	f7fc ff1d 	bl	80007a4 <__aeabi_ddiv>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4640      	mov	r0, r8
 8003970:	4649      	mov	r1, r9
 8003972:	f7fc fc35 	bl	80001e0 <__aeabi_dsub>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4985      	ldr	r1, [pc, #532]	; (8003b90 <TrajectoryEvaluation+0x870>)
 800397c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 8003980:	4b80      	ldr	r3, [pc, #512]	; (8003b84 <TrajectoryEvaluation+0x864>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fd8b 	bl	80004a0 <__aeabi_f2d>
 800398a:	4680      	mov	r8, r0
 800398c:	4689      	mov	r9, r1
 800398e:	4b7e      	ldr	r3, [pc, #504]	; (8003b88 <TrajectoryEvaluation+0x868>)
 8003990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <TrajectoryEvaluation+0x874>)
 800399a:	f7fc fdd9 	bl	8000550 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4692      	mov	sl, r2
 80039a4:	469b      	mov	fp, r3
 80039a6:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <TrajectoryEvaluation+0x854>)
 80039a8:	ed93 7a00 	vldr	s14, [r3]
 80039ac:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <TrajectoryEvaluation+0x850>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b6:	ee17 0a90 	vmov	r0, s15
 80039ba:	f7fc fd71 	bl	80004a0 <__aeabi_f2d>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003b68 <TrajectoryEvaluation+0x848>
 80039c6:	ec43 2b10 	vmov	d0, r2, r3
 80039ca:	f008 fbe5 	bl	800c198 <pow>
 80039ce:	ec53 2b10 	vmov	r2, r3, d0
 80039d2:	4650      	mov	r0, sl
 80039d4:	4659      	mov	r1, fp
 80039d6:	f7fc fdbb 	bl	8000550 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4640      	mov	r0, r8
 80039e0:	4649      	mov	r1, r9
 80039e2:	f7fc fbfd 	bl	80001e0 <__aeabi_dsub>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	496b      	ldr	r1, [pc, #428]	; (8003b98 <TrajectoryEvaluation+0x878>)
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 80039f0:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <TrajectoryEvaluation+0x868>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	4614      	mov	r4, r2
 80039f8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80039fc:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <TrajectoryEvaluation+0x854>)
 80039fe:	ed93 7a00 	vldr	s14, [r3]
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <TrajectoryEvaluation+0x850>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0c:	ee17 0a90 	vmov	r0, s15
 8003a10:	f7fc fd46 	bl	80004a0 <__aeabi_f2d>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fd98 	bl	8000550 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f862 	bl	8000af0 <__aeabi_d2f>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	; (8003b9c <TrajectoryEvaluation+0x87c>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e29c      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
	}
	else if (t5 <= t && t < t6 ){
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <TrajectoryEvaluation+0x858>)
 8003a36:	ed93 7a00 	vldr	s14, [r3]
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003a3c:	edd3 7a00 	vldr	s15, [r3]
 8003a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	f200 80ae 	bhi.w	8003ba8 <TrajectoryEvaluation+0x888>
 8003a4c:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003a4e:	ed93 7a00 	vldr	s14, [r3]
 8003a52:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <TrajectoryEvaluation+0x880>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	f140 80a2 	bpl.w	8003ba8 <TrajectoryEvaluation+0x888>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <TrajectoryEvaluation+0x85c>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fd19 	bl	80004a0 <__aeabi_f2d>
 8003a6e:	4b44      	ldr	r3, [pc, #272]	; (8003b80 <TrajectoryEvaluation+0x860>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbb6 	bl	80001e4 <__adddf3>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <TrajectoryEvaluation+0x864>)
 8003a82:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003a88:	edd3 6a00 	vldr	s13, [r3]
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <TrajectoryEvaluation+0x858>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	ee17 0a90 	vmov	r0, s15
 8003a9e:	f7fc fcff 	bl	80004a0 <__aeabi_f2d>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7fc fb9b 	bl	80001e4 <__adddf3>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <TrajectoryEvaluation+0x884>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fcf0 	bl	80004a0 <__aeabi_f2d>
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <TrajectoryEvaluation+0x874>)
 8003ac6:	f7fc fd43 	bl	8000550 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4690      	mov	r8, r2
 8003ad0:	4699      	mov	r9, r3
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003ad4:	ed93 7a00 	vldr	s14, [r3]
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <TrajectoryEvaluation+0x858>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae2:	ee17 0a90 	vmov	r0, s15
 8003ae6:	f7fc fcdb 	bl	80004a0 <__aeabi_f2d>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8003b68 <TrajectoryEvaluation+0x848>
 8003af2:	ec43 2b10 	vmov	d0, r2, r3
 8003af6:	f008 fb4f 	bl	800c198 <pow>
 8003afa:	ec53 2b10 	vmov	r2, r3, d0
 8003afe:	4640      	mov	r0, r8
 8003b00:	4649      	mov	r1, r9
 8003b02:	f7fc fd25 	bl	8000550 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fb69 	bl	80001e4 <__adddf3>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	491e      	ldr	r1, [pc, #120]	; (8003b90 <TrajectoryEvaluation+0x870>)
 8003b18:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <TrajectoryEvaluation+0x864>)
 8003b1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <TrajectoryEvaluation+0x884>)
 8003b24:	edd3 6a04 	vldr	s13, [r3, #16]
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <TrajectoryEvaluation+0x854>)
 8003b2a:	ed93 6a00 	vldr	s12, [r3]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <TrajectoryEvaluation+0x858>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	ee17 0a90 	vmov	r0, s15
 8003b44:	f7fc fcac 	bl	80004a0 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4912      	ldr	r1, [pc, #72]	; (8003b98 <TrajectoryEvaluation+0x878>)
 8003b4e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <TrajectoryEvaluation+0x884>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <TrajectoryEvaluation+0x87c>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e208      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
 8003b5c:	f3af 8000 	nop.w
 8003b60:	00000000 	.word	0x00000000
 8003b64:	40080000 	.word	0x40080000
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	40000000 	.word	0x40000000
 8003b70:	200005a4 	.word	0x200005a4
 8003b74:	20000594 	.word	0x20000594
 8003b78:	200005a8 	.word	0x200005a8
 8003b7c:	20000608 	.word	0x20000608
 8003b80:	200005c0 	.word	0x200005c0
 8003b84:	200005f0 	.word	0x200005f0
 8003b88:	20000078 	.word	0x20000078
 8003b8c:	40180000 	.word	0x40180000
 8003b90:	20000620 	.word	0x20000620
 8003b94:	3fe00000 	.word	0x3fe00000
 8003b98:	20000628 	.word	0x20000628
 8003b9c:	20000630 	.word	0x20000630
 8003ba0:	200005ac 	.word	0x200005ac
 8003ba4:	200005d8 	.word	0x200005d8
	}
	else if (t6 <= t && t < t7 ){
 8003ba8:	4bbd      	ldr	r3, [pc, #756]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003baa:	ed93 7a00 	vldr	s14, [r3]
 8003bae:	4bbd      	ldr	r3, [pc, #756]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003bb0:	edd3 7a00 	vldr	s15, [r3]
 8003bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbc:	f200 8107 	bhi.w	8003dce <TrajectoryEvaluation+0xaae>
 8003bc0:	4bb8      	ldr	r3, [pc, #736]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003bc2:	ed93 7a00 	vldr	s14, [r3]
 8003bc6:	4bb8      	ldr	r3, [pc, #736]	; (8003ea8 <TrajectoryEvaluation+0xb88>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	f140 80fb 	bpl.w	8003dce <TrajectoryEvaluation+0xaae>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8003bd8:	4bb4      	ldr	r3, [pc, #720]	; (8003eac <TrajectoryEvaluation+0xb8c>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fc5f 	bl	80004a0 <__aeabi_f2d>
 8003be2:	4bb3      	ldr	r3, [pc, #716]	; (8003eb0 <TrajectoryEvaluation+0xb90>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fafc 	bl	80001e4 <__adddf3>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	4baf      	ldr	r3, [pc, #700]	; (8003eb4 <TrajectoryEvaluation+0xb94>)
 8003bf6:	ed93 7a05 	vldr	s14, [r3, #20]
 8003bfa:	4baa      	ldr	r3, [pc, #680]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003bfc:	edd3 6a00 	vldr	s13, [r3]
 8003c00:	4ba7      	ldr	r3, [pc, #668]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	ee17 0a90 	vmov	r0, s15
 8003c12:	f7fc fc45 	bl	80004a0 <__aeabi_f2d>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc fae1 	bl	80001e4 <__adddf3>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4614      	mov	r4, r2
 8003c28:	461d      	mov	r5, r3
 8003c2a:	4ba3      	ldr	r3, [pc, #652]	; (8003eb8 <TrajectoryEvaluation+0xb98>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc fc36 	bl	80004a0 <__aeabi_f2d>
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	4ba0      	ldr	r3, [pc, #640]	; (8003ebc <TrajectoryEvaluation+0xb9c>)
 8003c3a:	f7fc fc89 	bl	8000550 <__aeabi_dmul>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4b97      	ldr	r3, [pc, #604]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003c48:	ed93 7a00 	vldr	s14, [r3]
 8003c4c:	4b94      	ldr	r3, [pc, #592]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c56:	ee17 0a90 	vmov	r0, s15
 8003c5a:	f7fc fc21 	bl	80004a0 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8003e88 <TrajectoryEvaluation+0xb68>
 8003c66:	ec43 2b10 	vmov	d0, r2, r3
 8003c6a:	f008 fa95 	bl	800c198 <pow>
 8003c6e:	ec53 2b10 	vmov	r2, r3, d0
 8003c72:	4640      	mov	r0, r8
 8003c74:	4649      	mov	r1, r9
 8003c76:	f7fc fc6b 	bl	8000550 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7fc faaf 	bl	80001e4 <__adddf3>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	4b85      	ldr	r3, [pc, #532]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003c90:	ed93 7a00 	vldr	s14, [r3]
 8003c94:	4b82      	ldr	r3, [pc, #520]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9e:	ee17 0a90 	vmov	r0, s15
 8003ca2:	f7fc fbfd 	bl	80004a0 <__aeabi_f2d>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8003e90 <TrajectoryEvaluation+0xb70>
 8003cae:	ec43 2b10 	vmov	d0, r2, r3
 8003cb2:	f008 fa71 	bl	800c198 <pow>
 8003cb6:	ec51 0b10 	vmov	r0, r1, d0
 8003cba:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <TrajectoryEvaluation+0xba0>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fc46 	bl	8000550 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4b7c      	ldr	r3, [pc, #496]	; (8003ec4 <TrajectoryEvaluation+0xba4>)
 8003cd2:	f7fc fd67 	bl	80007a4 <__aeabi_ddiv>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fa81 	bl	80001e4 <__adddf3>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4978      	ldr	r1, [pc, #480]	; (8003ec8 <TrajectoryEvaluation+0xba8>)
 8003ce8:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003cec:	4b71      	ldr	r3, [pc, #452]	; (8003eb4 <TrajectoryEvaluation+0xb94>)
 8003cee:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cf2:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <TrajectoryEvaluation+0xb98>)
 8003cf4:	edd3 6a05 	vldr	s13, [r3, #20]
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003cfa:	ed93 6a00 	vldr	s12, [r3]
 8003cfe:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d10:	ee17 0a90 	vmov	r0, s15
 8003d14:	f7fc fbc4 	bl	80004a0 <__aeabi_f2d>
 8003d18:	4604      	mov	r4, r0
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	4b68      	ldr	r3, [pc, #416]	; (8003ec0 <TrajectoryEvaluation+0xba0>)
 8003d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <TrajectoryEvaluation+0xb9c>)
 8003d28:	f7fc fc12 	bl	8000550 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4690      	mov	r8, r2
 8003d32:	4699      	mov	r9, r3
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003d36:	ed93 7a00 	vldr	s14, [r3]
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	ee17 0a90 	vmov	r0, s15
 8003d48:	f7fc fbaa 	bl	80004a0 <__aeabi_f2d>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8003e88 <TrajectoryEvaluation+0xb68>
 8003d54:	ec43 2b10 	vmov	d0, r2, r3
 8003d58:	f008 fa1e 	bl	800c198 <pow>
 8003d5c:	ec53 2b10 	vmov	r2, r3, d0
 8003d60:	4640      	mov	r0, r8
 8003d62:	4649      	mov	r1, r9
 8003d64:	f7fc fbf4 	bl	8000550 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7fc fa38 	bl	80001e4 <__adddf3>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4954      	ldr	r1, [pc, #336]	; (8003ecc <TrajectoryEvaluation+0xbac>)
 8003d7a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003d7e:	4b4e      	ldr	r3, [pc, #312]	; (8003eb8 <TrajectoryEvaluation+0xb98>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fb8c 	bl	80004a0 <__aeabi_f2d>
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <TrajectoryEvaluation+0xb80>)
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9c:	ee17 0a90 	vmov	r0, s15
 8003da0:	f7fc fb7e 	bl	80004a0 <__aeabi_f2d>
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <TrajectoryEvaluation+0xba0>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc fbd1 	bl	8000550 <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fa15 	bl	80001e4 <__adddf3>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f7fc fe95 	bl	8000af0 <__aeabi_d2f>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <TrajectoryEvaluation+0xbb0>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e0cf      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
	}
	else if (t7 <= t ){
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <TrajectoryEvaluation+0xb88>)
 8003dd0:	ed93 7a00 	vldr	s14, [r3]
 8003dd4:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	d900      	bls.n	8003de6 <TrajectoryEvaluation+0xac6>
			RunMotor(volt, PID_dir);
			Go_Flag = 0;
			t = 0;
		}
	}
}
 8003de4:	e0c3      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
		theta_ref = theta_f;
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <TrajectoryEvaluation+0xbb4>)
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	4936      	ldr	r1, [pc, #216]	; (8003ec8 <TrajectoryEvaluation+0xba8>)
 8003dee:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8003df2:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <TrajectoryEvaluation+0xbac>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	4934      	ldr	r1, [pc, #208]	; (8003ecc <TrajectoryEvaluation+0xbac>)
 8003dfa:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <TrajectoryEvaluation+0xbb0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <TrajectoryEvaluation+0xbb0>)
 8003e04:	6013      	str	r3, [r2, #0]
		if (dir == 1 && theta_now >= (theta_ref - 0.008) && theta_now <= theta_ref)
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <TrajectoryEvaluation+0xbb8>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d16e      	bne.n	8003eec <TrajectoryEvaluation+0xbcc>
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <TrajectoryEvaluation+0xbbc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb44 	bl	80004a0 <__aeabi_f2d>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <TrajectoryEvaluation+0xba8>)
 8003e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e22:	a31d      	add	r3, pc, #116	; (adr r3, 8003e98 <TrajectoryEvaluation+0xb78>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc f9da 	bl	80001e0 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4620      	mov	r0, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc fe12 	bl	8000a5c <__aeabi_dcmpge>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d056      	beq.n	8003eec <TrajectoryEvaluation+0xbcc>
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <TrajectoryEvaluation+0xbbc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fb2c 	bl	80004a0 <__aeabi_f2d>
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <TrajectoryEvaluation+0xba8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fdfb 	bl	8000a48 <__aeabi_dcmple>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d049      	beq.n	8003eec <TrajectoryEvaluation+0xbcc>
			volt = 0;
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <TrajectoryEvaluation+0xbc0>)
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
			RunMotor(volt, PID_dir);
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <TrajectoryEvaluation+0xbc0>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <TrajectoryEvaluation+0xbc4>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e70:	f7fd fc7e 	bl	8001770 <RunMotor>
			Go_Flag = 0;
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <TrajectoryEvaluation+0xbc8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
			t = 0;
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <TrajectoryEvaluation+0xb84>)
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e074      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
 8003e84:	f3af 8000 	nop.w
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	40000000 	.word	0x40000000
 8003e90:	00000000 	.word	0x00000000
 8003e94:	40080000 	.word	0x40080000
 8003e98:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e9c:	3f80624d 	.word	0x3f80624d
 8003ea0:	200005ac 	.word	0x200005ac
 8003ea4:	20000594 	.word	0x20000594
 8003ea8:	200005b0 	.word	0x200005b0
 8003eac:	20000608 	.word	0x20000608
 8003eb0:	200005c0 	.word	0x200005c0
 8003eb4:	200005f0 	.word	0x200005f0
 8003eb8:	200005d8 	.word	0x200005d8
 8003ebc:	3fe00000 	.word	0x3fe00000
 8003ec0:	20000078 	.word	0x20000078
 8003ec4:	40180000 	.word	0x40180000
 8003ec8:	20000620 	.word	0x20000620
 8003ecc:	20000628 	.word	0x20000628
 8003ed0:	20000630 	.word	0x20000630
 8003ed4:	200005c8 	.word	0x200005c8
 8003ed8:	200000d9 	.word	0x200000d9
 8003edc:	200003f4 	.word	0x200003f4
 8003ee0:	200003e4 	.word	0x200003e4
 8003ee4:	200000da 	.word	0x200000da
 8003ee8:	200003e9 	.word	0x200003e9
		else if (dir == 0 && theta_now >= theta_ref && theta_now <= (theta_ref + 0.008))
 8003eec:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <TrajectoryEvaluation+0xc60>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d13c      	bne.n	8003f6e <TrajectoryEvaluation+0xc4e>
 8003ef4:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <TrajectoryEvaluation+0xc64>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fad1 	bl	80004a0 <__aeabi_f2d>
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <TrajectoryEvaluation+0xc68>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc fdaa 	bl	8000a5c <__aeabi_dcmpge>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d100      	bne.n	8003f10 <TrajectoryEvaluation+0xbf0>
}
 8003f0e:	e02e      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
		else if (dir == 0 && theta_now >= theta_ref && theta_now <= (theta_ref + 0.008))
 8003f10:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <TrajectoryEvaluation+0xc64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fac3 	bl	80004a0 <__aeabi_f2d>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	460d      	mov	r5, r1
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <TrajectoryEvaluation+0xc68>)
 8003f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f24:	a314      	add	r3, pc, #80	; (adr r3, 8003f78 <TrajectoryEvaluation+0xc58>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f7fc f95b 	bl	80001e4 <__adddf3>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7fc fd87 	bl	8000a48 <__aeabi_dcmple>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <TrajectoryEvaluation+0xc22>
}
 8003f40:	e015      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
			volt = 0;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <TrajectoryEvaluation+0xc6c>)
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
			RunMotor(volt, PID_dir);
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <TrajectoryEvaluation+0xc6c>)
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <TrajectoryEvaluation+0xc70>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5a:	f7fd fc09 	bl	8001770 <RunMotor>
			Go_Flag = 0;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <TrajectoryEvaluation+0xc74>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
			t = 0;
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <TrajectoryEvaluation+0xc78>)
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	e7ff      	b.n	8003f6e <TrajectoryEvaluation+0xc4e>
 8003f6e:	bf00      	nop
 8003f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f74:	f3af 8000 	nop.w
 8003f78:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f7c:	3f80624d 	.word	0x3f80624d
 8003f80:	200000d9 	.word	0x200000d9
 8003f84:	200003f4 	.word	0x200003f4
 8003f88:	20000620 	.word	0x20000620
 8003f8c:	200003e4 	.word	0x200003e4
 8003f90:	200000da 	.word	0x200000da
 8003f94:	200003e9 	.word	0x200003e9
 8003f98:	20000594 	.word	0x20000594

08003f9c <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fa6:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fae:	edd7 7a00 	vldr	s15, [r7]
 8003fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <PositionController+0x9c>)
 8003fb8:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <PositionController+0xa0>)
 8003fbe:	ed93 7a00 	vldr	s14, [r3]
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <PositionController+0x9c>)
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <PositionController+0xa0>)
 8003fce:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <PositionController+0xa4>)
 8003fd4:	ed93 7a00 	vldr	s14, [r3]
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <PositionController+0x9c>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <PositionController+0xa8>)
 8003fe4:	edd3 6a00 	vldr	s13, [r3]
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <PositionController+0xa0>)
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <PositionController+0x9c>)
 8003ff8:	edd3 6a00 	vldr	s13, [r3]
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <PositionController+0xac>)
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <PositionController+0xb0>)
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <PositionController+0xb4>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <PositionController+0x9c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <PositionController+0xac>)
 8004020:	6013      	str	r3, [r2, #0]
	return u1;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <PositionController+0xb4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	ee07 3a90 	vmov	s15, r3
}
 800402a:	eeb0 0a67 	vmov.f32	s0, s15
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000634 	.word	0x20000634
 800403c:	20000638 	.word	0x20000638
 8004040:	20000654 	.word	0x20000654
 8004044:	20000658 	.word	0x20000658
 8004048:	2000063c 	.word	0x2000063c
 800404c:	2000065c 	.word	0x2000065c
 8004050:	20000640 	.word	0x20000640

08004054 <VelocityController>:

float VelocityController(float r,float y,float uP) //r == trajectory, y==feedback
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	ed87 0a03 	vstr	s0, [r7, #12]
 800405e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004062:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 8004066:	ed97 7a01 	vldr	s14, [r7, #4]
 800406a:	edd7 7a03 	vldr	s15, [r7, #12]
 800406e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004072:	4b40      	ldr	r3, [pc, #256]	; (8004174 <VelocityController+0x120>)
 8004074:	edc3 7a00 	vstr	s15, [r3]

	if (dir == 0 && e2 <= w_max)
 8004078:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <VelocityController+0x124>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d117      	bne.n	80040b0 <VelocityController+0x5c>
 8004080:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <VelocityController+0x120>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa0b 	bl	80004a0 <__aeabi_f2d>
 800408a:	4b3c      	ldr	r3, [pc, #240]	; (800417c <VelocityController+0x128>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fcda 	bl	8000a48 <__aeabi_dcmple>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <VelocityController+0x5c>
	{
		e2 = w_max;
 800409a:	4b38      	ldr	r3, [pc, #224]	; (800417c <VelocityController+0x128>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fd24 	bl	8000af0 <__aeabi_d2f>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4a32      	ldr	r2, [pc, #200]	; (8004174 <VelocityController+0x120>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e01a      	b.n	80040e6 <VelocityController+0x92>
	}

	else if (dir == 1 && e2 >= w_max)
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <VelocityController+0x124>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d116      	bne.n	80040e6 <VelocityController+0x92>
 80040b8:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <VelocityController+0x120>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f9ef 	bl	80004a0 <__aeabi_f2d>
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <VelocityController+0x128>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc fcc8 	bl	8000a5c <__aeabi_dcmpge>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <VelocityController+0x92>
	{
		e2 = w_max;
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <VelocityController+0x128>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fc fd08 	bl	8000af0 <__aeabi_d2f>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4a24      	ldr	r2, [pc, #144]	; (8004174 <VelocityController+0x120>)
 80040e4:	6013      	str	r3, [r2, #0]
	}

	e2 = e2 - y;
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <VelocityController+0x120>)
 80040e8:	ed93 7a00 	vldr	s14, [r3]
 80040ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <VelocityController+0x120>)
 80040f6:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <VelocityController+0x12c>)
 80040fc:	ed93 7a00 	vldr	s14, [r3]
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <VelocityController+0x120>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <VelocityController+0x12c>)
 800410c:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2) + (kd_2*(e2-p2));
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <VelocityController+0x130>)
 8004112:	ed93 7a00 	vldr	s14, [r3]
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <VelocityController+0x120>)
 8004118:	edd3 7a00 	vldr	s15, [r3]
 800411c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <VelocityController+0x134>)
 8004122:	edd3 6a00 	vldr	s13, [r3]
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <VelocityController+0x12c>)
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <VelocityController+0x120>)
 8004136:	edd3 6a00 	vldr	s13, [r3]
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <VelocityController+0x138>)
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <VelocityController+0x13c>)
 8004146:	edd3 7a00 	vldr	s15, [r3]
 800414a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800414e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <VelocityController+0x140>)
 8004154:	edc3 7a00 	vstr	s15, [r3]
	p2 = e2;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <VelocityController+0x120>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <VelocityController+0x138>)
 800415e:	6013      	str	r3, [r2, #0]
	return u2;
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <VelocityController+0x140>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	ee07 3a90 	vmov	s15, r3
}
 8004168:	eeb0 0a67 	vmov.f32	s0, s15
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000644 	.word	0x20000644
 8004178:	200000d9 	.word	0x200000d9
 800417c:	20000068 	.word	0x20000068
 8004180:	20000648 	.word	0x20000648
 8004184:	20000660 	.word	0x20000660
 8004188:	20000664 	.word	0x20000664
 800418c:	2000064c 	.word	0x2000064c
 8004190:	20000668 	.word	0x20000668
 8004194:	20000650 	.word	0x20000650

08004198 <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	ed87 0a03 	vstr	s0, [r7, #12]
 80041a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80041a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80041aa:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	static float add = 0;
	u = PositionController(Pd, P);
 80041ae:	edd7 0a02 	vldr	s1, [r7, #8]
 80041b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80041b6:	f7ff fef1 	bl	8003f9c <PositionController>
 80041ba:	eef0 7a40 	vmov.f32	s15, s0
 80041be:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <Cascade+0xa0>)
 80041c0:	edc3 7a00 	vstr	s15, [r3]
	u = VelocityController(Vd, V, u);
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <Cascade+0xa0>)
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	eeb0 1a67 	vmov.f32	s2, s15
 80041ce:	edd7 0a00 	vldr	s1, [r7]
 80041d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80041d6:	f7ff ff3d 	bl	8004054 <VelocityController>
 80041da:	eef0 7a40 	vmov.f32	s15, s0
 80041de:	4b16      	ldr	r3, [pc, #88]	; (8004238 <Cascade+0xa0>)
 80041e0:	edc3 7a00 	vstr	s15, [r3]
	if (u >= 0)
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <Cascade+0xa0>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f2:	db03      	blt.n	80041fc <Cascade+0x64>
	{
		PID_dir = 1;
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <Cascade+0xa4>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e00a      	b.n	8004212 <Cascade+0x7a>
	}

	else
	{
		u = -u;
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <Cascade+0xa0>)
 80041fe:	edd3 7a00 	vldr	s15, [r3]
 8004202:	eef1 7a67 	vneg.f32	s15, s15
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <Cascade+0xa0>)
 8004208:	edc3 7a00 	vstr	s15, [r3]
		PID_dir = 0;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <Cascade+0xa4>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
//	else if (t >= t6)
//	{
//		add = 4.7-1.6;
//	}

	return limit(u, add);
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <Cascade+0xa0>)
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <Cascade+0xa8>)
 800421a:	ed93 7a00 	vldr	s14, [r3]
 800421e:	eef0 0a47 	vmov.f32	s1, s14
 8004222:	eeb0 0a67 	vmov.f32	s0, s15
 8004226:	f000 f845 	bl	80042b4 <limit>
 800422a:	eef0 7a40 	vmov.f32	s15, s0
}
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	200006d8 	.word	0x200006d8
 800423c:	200000da 	.word	0x200000da
 8004240:	200006dc 	.word	0x200006dc

08004244 <negative>:

float negative(float var)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 800424e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	dd05      	ble.n	8004268 <negative+0x24>
		var = -var;
 800425c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004260:	eef1 7a67 	vneg.f32	s15, s15
 8004264:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	ee07 3a90 	vmov	s15, r3
}
 800426e:	eeb0 0a67 	vmov.f32	s0, s15
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <positive>:

float positive(float var)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 8004286:	edd7 7a01 	vldr	s15, [r7, #4]
 800428a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d505      	bpl.n	80042a0 <positive+0x24>
			var = -var;
 8004294:	edd7 7a01 	vldr	s15, [r7, #4]
 8004298:	eef1 7a67 	vneg.f32	s15, s15
 800429c:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	ee07 3a90 	vmov	s15, r3
}
 80042a6:	eeb0 0a67 	vmov.f32	s0, s15
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <limit>:

float limit(float var1, float var2)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80042be:	edc7 0a00 	vstr	s1, [r7]
	return (var1 > 24.0-var2) ? 24.0 : var1+var2;
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc f8ec 	bl	80004a0 <__aeabi_f2d>
 80042c8:	4604      	mov	r4, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	6838      	ldr	r0, [r7, #0]
 80042ce:	f7fc f8e7 	bl	80004a0 <__aeabi_f2d>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	490d      	ldr	r1, [pc, #52]	; (8004310 <limit+0x5c>)
 80042dc:	f7fb ff80 	bl	80001e0 <__aeabi_dsub>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fc fbc2 	bl	8000a70 <__aeabi_dcmpgt>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <limit+0x44>
 80042f2:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80042f6:	e005      	b.n	8004304 <limit+0x50>
 80042f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80042fc:	edd7 7a00 	vldr	s15, [r7]
 8004300:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 8004304:	eeb0 0a67 	vmov.f32	s0, s15
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bdb0      	pop	{r4, r5, r7, pc}
 800430e:	bf00      	nop
 8004310:	40380000 	.word	0x40380000
 8004314:	00000000 	.word	0x00000000

08004318 <UART>:

void UART(){
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b0a2      	sub	sp, #136	; 0x88
 800431e:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8004320:	4baf      	ldr	r3, [pc, #700]	; (80045e0 <UART+0x2c8>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8566 	beq.w	8004df6 <UART+0xade>
 800432a:	2b00      	cmp	r3, #0
 800432c:	f2c0 858e 	blt.w	8004e4c <UART+0xb34>
 8004330:	2b9e      	cmp	r3, #158	; 0x9e
 8004332:	f300 858b 	bgt.w	8004e4c <UART+0xb34>
 8004336:	2b58      	cmp	r3, #88	; 0x58
 8004338:	f2c0 8588 	blt.w	8004e4c <UART+0xb34>
 800433c:	3b58      	subs	r3, #88	; 0x58
 800433e:	2b46      	cmp	r3, #70	; 0x46
 8004340:	f200 8584 	bhi.w	8004e4c <UART+0xb34>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART+0x34>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004e03 	.word	0x08004e03
 8004350:	08004e4d 	.word	0x08004e4d
 8004354:	08004e4d 	.word	0x08004e4d
 8004358:	08004e4d 	.word	0x08004e4d
 800435c:	08004e4d 	.word	0x08004e4d
 8004360:	08004e4d 	.word	0x08004e4d
 8004364:	08004e4d 	.word	0x08004e4d
 8004368:	08004e4d 	.word	0x08004e4d
 800436c:	08004e4d 	.word	0x08004e4d
 8004370:	08004e4d 	.word	0x08004e4d
 8004374:	08004e4d 	.word	0x08004e4d
 8004378:	08004e4d 	.word	0x08004e4d
 800437c:	08004e4d 	.word	0x08004e4d
 8004380:	08004e4d 	.word	0x08004e4d
 8004384:	08004e4d 	.word	0x08004e4d
 8004388:	08004e4d 	.word	0x08004e4d
 800438c:	08004e4d 	.word	0x08004e4d
 8004390:	08004e4d 	.word	0x08004e4d
 8004394:	08004e4d 	.word	0x08004e4d
 8004398:	08004e4d 	.word	0x08004e4d
 800439c:	08004e4d 	.word	0x08004e4d
 80043a0:	08004e4d 	.word	0x08004e4d
 80043a4:	08004e4d 	.word	0x08004e4d
 80043a8:	08004e4d 	.word	0x08004e4d
 80043ac:	08004e4d 	.word	0x08004e4d
 80043b0:	08004e4d 	.word	0x08004e4d
 80043b4:	08004e4d 	.word	0x08004e4d
 80043b8:	08004e4d 	.word	0x08004e4d
 80043bc:	08004e4d 	.word	0x08004e4d
 80043c0:	08004e4d 	.word	0x08004e4d
 80043c4:	08004e4d 	.word	0x08004e4d
 80043c8:	08004e4d 	.word	0x08004e4d
 80043cc:	08004e4d 	.word	0x08004e4d
 80043d0:	08004e4d 	.word	0x08004e4d
 80043d4:	08004e4d 	.word	0x08004e4d
 80043d8:	08004e4d 	.word	0x08004e4d
 80043dc:	08004e4d 	.word	0x08004e4d
 80043e0:	08004e4d 	.word	0x08004e4d
 80043e4:	08004e4d 	.word	0x08004e4d
 80043e8:	08004e4d 	.word	0x08004e4d
 80043ec:	08004e4d 	.word	0x08004e4d
 80043f0:	08004e4d 	.word	0x08004e4d
 80043f4:	08004e4d 	.word	0x08004e4d
 80043f8:	08004e4d 	.word	0x08004e4d
 80043fc:	08004e4d 	.word	0x08004e4d
 8004400:	08004e4d 	.word	0x08004e4d
 8004404:	08004e4d 	.word	0x08004e4d
 8004408:	08004e4d 	.word	0x08004e4d
 800440c:	08004e4d 	.word	0x08004e4d
 8004410:	08004e4d 	.word	0x08004e4d
 8004414:	08004e4d 	.word	0x08004e4d
 8004418:	08004e4d 	.word	0x08004e4d
 800441c:	08004e4d 	.word	0x08004e4d
 8004420:	08004e4d 	.word	0x08004e4d
 8004424:	08004e4d 	.word	0x08004e4d
 8004428:	08004e4d 	.word	0x08004e4d
 800442c:	08004e4d 	.word	0x08004e4d
 8004430:	08004e5b 	.word	0x08004e5b
 8004434:	08004469 	.word	0x08004469
 8004438:	0800448d 	.word	0x0800448d
 800443c:	080044b1 	.word	0x080044b1
 8004440:	08004541 	.word	0x08004541
 8004444:	08004605 	.word	0x08004605
 8004448:	0800469b 	.word	0x0800469b
 800444c:	08004799 	.word	0x08004799
 8004450:	080047c1 	.word	0x080047c1
 8004454:	080049c3 	.word	0x080049c3
 8004458:	08004bb9 	.word	0x08004bb9
 800445c:	08004d73 	.word	0x08004d73
 8004460:	08004d9b 	.word	0x08004d9b
 8004464:	08004dc3 	.word	0x08004dc3
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 8004468:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <UART+0x2c8>)
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	2b6d      	cmp	r3, #109	; 0x6d
 800446e:	f040 84f6 	bne.w	8004e5e <UART+0xb46>
			//connect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004472:	2202      	movs	r2, #2
 8004474:	495b      	ldr	r1, [pc, #364]	; (80045e4 <UART+0x2cc>)
 8004476:	485c      	ldr	r0, [pc, #368]	; (80045e8 <UART+0x2d0>)
 8004478:	f006 f9e0 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800447c:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <UART+0x2c8>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004482:	4859      	ldr	r0, [pc, #356]	; (80045e8 <UART+0x2d0>)
 8004484:	f006 fa88 	bl	800a998 <HAL_UART_DMAStop>

		}
		break;
 8004488:	f000 bce9 	b.w	8004e5e <UART+0xb46>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 800448c:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <UART+0x2c8>)
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b6c      	cmp	r3, #108	; 0x6c
 8004492:	f040 84e6 	bne.w	8004e62 <UART+0xb4a>
			//disconnect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004496:	2202      	movs	r2, #2
 8004498:	4952      	ldr	r1, [pc, #328]	; (80045e4 <UART+0x2cc>)
 800449a:	4853      	ldr	r0, [pc, #332]	; (80045e8 <UART+0x2d0>)
 800449c:	f006 f9ce 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80044a0:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <UART+0x2c8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80044a6:	4850      	ldr	r0, [pc, #320]	; (80045e8 <UART+0x2d0>)
 80044a8:	f006 fa76 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 80044ac:	f000 bcd9 	b.w	8004e62 <UART+0xb4a>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <UART+0x2c8>)
 80044b2:	785a      	ldrb	r2, [r3, #1]
 80044b4:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <UART+0x2d4>)
 80044b6:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80044b8:	4b49      	ldr	r3, [pc, #292]	; (80045e0 <UART+0x2c8>)
 80044ba:	789a      	ldrb	r2, [r3, #2]
 80044bc:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <UART+0x2d8>)
 80044be:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80044c0:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <UART+0x2d4>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <UART+0x2d8>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <UART+0x2dc>)
 80044d6:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 80044d8:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <UART+0x2c8>)
 80044da:	78da      	ldrb	r2, [r3, #3]
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <UART+0x2d4>)
 80044de:	7819      	ldrb	r1, [r3, #0]
 80044e0:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <UART+0x2d8>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	440b      	add	r3, r1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b6c      	subs	r3, #108	; 0x6c
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	429a      	cmp	r2, r3
 80044f2:	f040 84e3 	bne.w	8004ebc <UART+0xba4>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 80044f6:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <UART+0x2dc>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fb ffae 	bl	800045c <__aeabi_ui2d>
 8004500:	a331      	add	r3, pc, #196	; (adr r3, 80045c8 <UART+0x2b0>)
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f7fc f823 	bl	8000550 <__aeabi_dmul>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	a32f      	add	r3, pc, #188	; (adr r3, 80045d0 <UART+0x2b8>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f81a 	bl	8000550 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4935      	ldr	r1, [pc, #212]	; (80045f8 <UART+0x2e0>)
 8004522:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004526:	2202      	movs	r2, #2
 8004528:	492e      	ldr	r1, [pc, #184]	; (80045e4 <UART+0x2cc>)
 800452a:	482f      	ldr	r0, [pc, #188]	; (80045e8 <UART+0x2d0>)
 800452c:	f006 f986 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <UART+0x2c8>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004536:	482c      	ldr	r0, [pc, #176]	; (80045e8 <UART+0x2d0>)
 8004538:	f006 fa2e 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 800453c:	f000 bcbe 	b.w	8004ebc <UART+0xba4>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <UART+0x2c8>)
 8004542:	785a      	ldrb	r2, [r3, #1]
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <UART+0x2d4>)
 8004546:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004548:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <UART+0x2c8>)
 800454a:	789a      	ldrb	r2, [r3, #2]
 800454c:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <UART+0x2d8>)
 800454e:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <UART+0x2d4>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	b29a      	uxth	r2, r3
 800455a:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <UART+0x2d8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	4413      	add	r3, r2
 8004562:	b29a      	uxth	r2, r3
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <UART+0x2dc>)
 8004566:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <UART+0x2c8>)
 800456a:	78da      	ldrb	r2, [r3, #3]
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <UART+0x2d4>)
 800456e:	7819      	ldrb	r1, [r3, #0]
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <UART+0x2d8>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	440b      	add	r3, r1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	3b6b      	subs	r3, #107	; 0x6b
 800457a:	b2db      	uxtb	r3, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	429a      	cmp	r2, r3
 8004582:	f040 849d 	bne.w	8004ec0 <UART+0xba8>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <UART+0x2dc>)
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ff66 	bl	800045c <__aeabi_ui2d>
 8004590:	a311      	add	r3, pc, #68	; (adr r3, 80045d8 <UART+0x2c0>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc f905 	bl	80007a4 <__aeabi_ddiv>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4917      	ldr	r1, [pc, #92]	; (80045fc <UART+0x2e4>)
 80045a0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80045a4:	2202      	movs	r2, #2
 80045a6:	490f      	ldr	r1, [pc, #60]	; (80045e4 <UART+0x2cc>)
 80045a8:	480f      	ldr	r0, [pc, #60]	; (80045e8 <UART+0x2d0>)
 80045aa:	f006 f947 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <UART+0x2c8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
			ModeN =0;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <UART+0x2e8>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80045ba:	480b      	ldr	r0, [pc, #44]	; (80045e8 <UART+0x2d0>)
 80045bc:	f006 f9ec 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 80045c0:	f000 bc7e 	b.w	8004ec0 <UART+0xba8>
 80045c4:	f3af 8000 	nop.w
 80045c8:	14141414 	.word	0x14141414
 80045cc:	3fa41414 	.word	0x3fa41414
 80045d0:	f37bebd5 	.word	0xf37bebd5
 80045d4:	3fbacee9 	.word	0x3fbacee9
 80045d8:	00000000 	.word	0x00000000
 80045dc:	40c38800 	.word	0x40c38800
 80045e0:	20000688 	.word	0x20000688
 80045e4:	200000a8 	.word	0x200000a8
 80045e8:	200002e0 	.word	0x200002e0
 80045ec:	200006e0 	.word	0x200006e0
 80045f0:	200006e1 	.word	0x200006e1
 80045f4:	200006e2 	.word	0x200006e2
 80045f8:	20000068 	.word	0x20000068
 80045fc:	200005c8 	.word	0x200005c8
 8004600:	200006a0 	.word	0x200006a0
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 8004604:	4ba0      	ldr	r3, [pc, #640]	; (8004888 <UART+0x570>)
 8004606:	785a      	ldrb	r2, [r3, #1]
 8004608:	4ba0      	ldr	r3, [pc, #640]	; (800488c <UART+0x574>)
 800460a:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 800460c:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <UART+0x570>)
 800460e:	789a      	ldrb	r2, [r3, #2]
 8004610:	4b9f      	ldr	r3, [pc, #636]	; (8004890 <UART+0x578>)
 8004612:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004614:	4b9d      	ldr	r3, [pc, #628]	; (800488c <UART+0x574>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	b29a      	uxth	r2, r3
 800461e:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <UART+0x578>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	4413      	add	r3, r2
 8004626:	b29a      	uxth	r2, r3
 8004628:	4b9a      	ldr	r3, [pc, #616]	; (8004894 <UART+0x57c>)
 800462a:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 800462c:	4b96      	ldr	r3, [pc, #600]	; (8004888 <UART+0x570>)
 800462e:	78da      	ldrb	r2, [r3, #3]
 8004630:	4b96      	ldr	r3, [pc, #600]	; (800488c <UART+0x574>)
 8004632:	7819      	ldrb	r1, [r3, #0]
 8004634:	4b96      	ldr	r3, [pc, #600]	; (8004890 <UART+0x578>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	440b      	add	r3, r1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3b6a      	subs	r3, #106	; 0x6a
 800463e:	b2db      	uxtb	r3, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	429a      	cmp	r2, r3
 8004646:	f040 843d 	bne.w	8004ec4 <UART+0xbac>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 800464a:	4b91      	ldr	r3, [pc, #580]	; (8004890 <UART+0x578>)
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	4b92      	ldr	r3, [pc, #584]	; (8004898 <UART+0x580>)
 8004650:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 8004652:	4b91      	ldr	r3, [pc, #580]	; (8004898 <UART+0x580>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	3b01      	subs	r3, #1
 8004658:	4a90      	ldr	r2, [pc, #576]	; (800489c <UART+0x584>)
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb ff1d 	bl	80004a0 <__aeabi_f2d>
 8004666:	a386      	add	r3, pc, #536	; (adr r3, 8004880 <UART+0x568>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb ff70 	bl	8000550 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	498a      	ldr	r1, [pc, #552]	; (80048a0 <UART+0x588>)
 8004676:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 800467a:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <UART+0x58c>)
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004680:	2202      	movs	r2, #2
 8004682:	4989      	ldr	r1, [pc, #548]	; (80048a8 <UART+0x590>)
 8004684:	4889      	ldr	r0, [pc, #548]	; (80048ac <UART+0x594>)
 8004686:	f006 f8d9 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800468a:	4b7f      	ldr	r3, [pc, #508]	; (8004888 <UART+0x570>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004690:	4886      	ldr	r0, [pc, #536]	; (80048ac <UART+0x594>)
 8004692:	f006 f981 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 8004696:	f000 bc15 	b.w	8004ec4 <UART+0xbac>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <UART+0x570>)
 800469c:	785a      	ldrb	r2, [r3, #1]
 800469e:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <UART+0x598>)
 80046a0:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		uint8_t k=2;
 80046a8:	2302      	movs	r3, #2
 80046aa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		for(int j = 0;j<n_station_max;j+=2){
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b4:	e021      	b.n	80046fa <UART+0x3e2>
			index_station[j] = RxData[k]%16;
 80046b6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80046ba:	4a73      	ldr	r2, [pc, #460]	; (8004888 <UART+0x570>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	b2d9      	uxtb	r1, r3
 80046c4:	4a74      	ldr	r2, [pc, #464]	; (8004898 <UART+0x580>)
 80046c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ca:	4413      	add	r3, r2
 80046cc:	460a      	mov	r2, r1
 80046ce:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 80046d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80046d4:	4a6c      	ldr	r2, [pc, #432]	; (8004888 <UART+0x570>)
 80046d6:	5cd2      	ldrb	r2, [r2, r3]
 80046d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046dc:	3301      	adds	r3, #1
 80046de:	0912      	lsrs	r2, r2, #4
 80046e0:	b2d1      	uxtb	r1, r2
 80046e2:	4a6d      	ldr	r2, [pc, #436]	; (8004898 <UART+0x580>)
 80046e4:	54d1      	strb	r1, [r2, r3]
			k+=1;
 80046e6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80046ea:	3301      	adds	r3, #1
 80046ec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		for(int j = 0;j<n_station_max;j+=2){
 80046f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046f4:	3302      	adds	r3, #2
 80046f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <UART+0x598>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004704:	4293      	cmp	r3, r2
 8004706:	dbd6      	blt.n	80046b6 <UART+0x39e>
		}
		for(int f = 0; f<k;f++){
 8004708:	2300      	movs	r3, #0
 800470a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800470c:	e00b      	b.n	8004726 <UART+0x40e>
			Check += RxData[f];
 800470e:	4a5e      	ldr	r2, [pc, #376]	; (8004888 <UART+0x570>)
 8004710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004712:	4413      	add	r3, r2
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800471a:	4413      	add	r3, r2
 800471c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		for(int f = 0; f<k;f++){
 8004720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004722:	3301      	adds	r3, #1
 8004724:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004726:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800472a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800472c:	429a      	cmp	r2, r3
 800472e:	dbee      	blt.n	800470e <UART+0x3f6>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 8004730:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004734:	4a54      	ldr	r2, [pc, #336]	; (8004888 <UART+0x570>)
 8004736:	5cd2      	ldrb	r2, [r2, r3]
 8004738:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800473c:	43db      	mvns	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	429a      	cmp	r2, r3
 8004742:	f040 83c1 	bne.w	8004ec8 <UART+0xbb0>

			ModeN=1;
 8004746:	4b57      	ldr	r3, [pc, #348]	; (80048a4 <UART+0x58c>)
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]
			n_station=0;
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <UART+0x59c>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 8004752:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <UART+0x59c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <UART+0x580>)
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	3b01      	subs	r3, #1
 800475e:	4a4f      	ldr	r2, [pc, #316]	; (800489c <UART+0x584>)
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb fe9a 	bl	80004a0 <__aeabi_f2d>
 800476c:	a344      	add	r3, pc, #272	; (adr r3, 8004880 <UART+0x568>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb feed 	bl	8000550 <__aeabi_dmul>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4949      	ldr	r1, [pc, #292]	; (80048a0 <UART+0x588>)
 800477c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004780:	2202      	movs	r2, #2
 8004782:	4949      	ldr	r1, [pc, #292]	; (80048a8 <UART+0x590>)
 8004784:	4849      	ldr	r0, [pc, #292]	; (80048ac <UART+0x594>)
 8004786:	f006 f859 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800478a:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <UART+0x570>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004790:	4846      	ldr	r0, [pc, #280]	; (80048ac <UART+0x594>)
 8004792:	f006 f901 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 8004796:	e397      	b.n	8004ec8 <UART+0xbb0>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <UART+0x570>)
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b67      	cmp	r3, #103	; 0x67
 800479e:	f040 8395 	bne.w	8004ecc <UART+0xbb4>
			//Go to Station / Goal Position
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80047a2:	2202      	movs	r2, #2
 80047a4:	4940      	ldr	r1, [pc, #256]	; (80048a8 <UART+0x590>)
 80047a6:	4841      	ldr	r0, [pc, #260]	; (80048ac <UART+0x594>)
 80047a8:	f006 f848 	bl	800a83c <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 80047ac:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <UART+0x5a0>)
 80047ae:	2206      	movs	r2, #6
 80047b0:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 80047b2:	4b35      	ldr	r3, [pc, #212]	; (8004888 <UART+0x570>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80047b8:	483c      	ldr	r0, [pc, #240]	; (80048ac <UART+0x594>)
 80047ba:	f006 f8ed 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 80047be:	e385      	b.n	8004ecc <UART+0xbb4>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <UART+0x570>)
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b66      	cmp	r3, #102	; 0x66
 80047c6:	f040 8383 	bne.w	8004ed0 <UART+0xbb8>
			//Request Current Station
			if(Finish){
 80047ca:	4b3c      	ldr	r3, [pc, #240]	; (80048bc <UART+0x5a4>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8080 	beq.w	80048d4 <UART+0x5bc>
				if(CheckTrasmit){
 80047d4:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <UART+0x5a8>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01e      	beq.n	800481a <UART+0x502>
					TxData2[4]=TxData[2];
 80047dc:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <UART+0x5ac>)
 80047de:	789a      	ldrb	r2, [r3, #2]
 80047e0:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <UART+0x5b0>)
 80047e2:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <UART+0x5ac>)
 80047e6:	78da      	ldrb	r2, [r3, #3]
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <UART+0x5b0>)
 80047ea:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 80047ec:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <UART+0x5ac>)
 80047ee:	791a      	ldrb	r2, [r3, #4]
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <UART+0x5b0>)
 80047f2:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 80047f4:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <UART+0x5ac>)
 80047f6:	795a      	ldrb	r2, [r3, #5]
 80047f8:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <UART+0x5b0>)
 80047fa:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <UART+0x5a8>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004802:	2208      	movs	r2, #8
 8004804:	4930      	ldr	r1, [pc, #192]	; (80048c8 <UART+0x5b0>)
 8004806:	4829      	ldr	r0, [pc, #164]	; (80048ac <UART+0x594>)
 8004808:	f006 f818 	bl	800a83c <HAL_UART_Transmit_DMA>
					Timestamp_UI=micros();
 800480c:	f7fd f97a 	bl	8001b04 <micros>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <UART+0x5b4>)
 8004816:	601a      	str	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
					CheckTrasmit=1;
				}
			}
		}
		break;
 8004818:	e35a      	b.n	8004ed0 <UART+0xbb8>
					if(micros() - Timestamp_UI > UARTDelay){
 800481a:	f7fd f973 	bl	8001b04 <micros>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	492a      	ldr	r1, [pc, #168]	; (80048cc <UART+0x5b4>)
 8004824:	6809      	ldr	r1, [r1, #0]
 8004826:	2000      	movs	r0, #0
 8004828:	6739      	str	r1, [r7, #112]	; 0x70
 800482a:	6778      	str	r0, [r7, #116]	; 0x74
 800482c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004830:	4621      	mov	r1, r4
 8004832:	1a51      	subs	r1, r2, r1
 8004834:	66b9      	str	r1, [r7, #104]	; 0x68
 8004836:	4629      	mov	r1, r5
 8004838:	eb63 0301 	sbc.w	r3, r3, r1
 800483c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <UART+0x5b8>)
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	2200      	movs	r2, #0
 8004846:	663b      	str	r3, [r7, #96]	; 0x60
 8004848:	667a      	str	r2, [r7, #100]	; 0x64
 800484a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800484e:	4623      	mov	r3, r4
 8004850:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004854:	4602      	mov	r2, r0
 8004856:	4293      	cmp	r3, r2
 8004858:	462b      	mov	r3, r5
 800485a:	460a      	mov	r2, r1
 800485c:	4193      	sbcs	r3, r2
 800485e:	f080 8337 	bcs.w	8004ed0 <UART+0xbb8>
						RxData[0] = 0;
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <UART+0x570>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
						CheckTrasmit=1;
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <UART+0x5a8>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
						Finish =0;
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <UART+0x5a4>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
						HAL_UART_DMAStop(&huart2);
 8004874:	480d      	ldr	r0, [pc, #52]	; (80048ac <UART+0x594>)
 8004876:	f006 f88f 	bl	800a998 <HAL_UART_DMAStop>
		break;
 800487a:	e329      	b.n	8004ed0 <UART+0xbb8>
 800487c:	f3af 8000 	nop.w
 8004880:	a2529d39 	.word	0xa2529d39
 8004884:	3f91df46 	.word	0x3f91df46
 8004888:	20000688 	.word	0x20000688
 800488c:	200006e0 	.word	0x200006e0
 8004890:	200006e1 	.word	0x200006e1
 8004894:	200006e2 	.word	0x200006e2
 8004898:	200006a4 	.word	0x200006a4
 800489c:	200000ac 	.word	0x200000ac
 80048a0:	200005c8 	.word	0x200005c8
 80048a4:	200006a0 	.word	0x200006a0
 80048a8:	200000a8 	.word	0x200000a8
 80048ac:	200002e0 	.word	0x200002e0
 80048b0:	200000d5 	.word	0x200000d5
 80048b4:	200000d6 	.word	0x200000d6
 80048b8:	200000d7 	.word	0x200000d7
 80048bc:	200006a1 	.word	0x200006a1
 80048c0:	200000db 	.word	0x200000db
 80048c4:	20000098 	.word	0x20000098
 80048c8:	200000a0 	.word	0x200000a0
 80048cc:	200006e4 	.word	0x200006e4
 80048d0:	20000096 	.word	0x20000096
			else if(CheckTrasmit){
 80048d4:	4bac      	ldr	r3, [pc, #688]	; (8004b88 <UART+0x870>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d044      	beq.n	8004966 <UART+0x64e>
				TxData[2] = 0b10011001;
 80048dc:	4bab      	ldr	r3, [pc, #684]	; (8004b8c <UART+0x874>)
 80048de:	2299      	movs	r2, #153	; 0x99
 80048e0:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 80048e2:	4baa      	ldr	r3, [pc, #680]	; (8004b8c <UART+0x874>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 80048e8:	4ba9      	ldr	r3, [pc, #676]	; (8004b90 <UART+0x878>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fdd7 	bl	80004a0 <__aeabi_f2d>
 80048f2:	a3a1      	add	r3, pc, #644	; (adr r3, 8004b78 <UART+0x860>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb ff54 	bl	80007a4 <__aeabi_ddiv>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	ec43 2b17 	vmov	d7, r2, r3
 8004904:	eeb0 0a47 	vmov.f32	s0, s14
 8004908:	eef0 0a67 	vmov.f32	s1, s15
 800490c:	f007 fbc0 	bl	800c090 <ceil>
 8004910:	ec53 2b10 	vmov	r2, r3, d0
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f7fc f8ca 	bl	8000ab0 <__aeabi_d2uiz>
 800491c:	4603      	mov	r3, r0
 800491e:	b2da      	uxtb	r2, r3
 8004920:	4b9c      	ldr	r3, [pc, #624]	; (8004b94 <UART+0x87c>)
 8004922:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 8004924:	4b9b      	ldr	r3, [pc, #620]	; (8004b94 <UART+0x87c>)
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	4b98      	ldr	r3, [pc, #608]	; (8004b8c <UART+0x874>)
 800492a:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 800492c:	4b97      	ldr	r3, [pc, #604]	; (8004b8c <UART+0x874>)
 800492e:	789a      	ldrb	r2, [r3, #2]
 8004930:	4b96      	ldr	r3, [pc, #600]	; (8004b8c <UART+0x874>)
 8004932:	78db      	ldrb	r3, [r3, #3]
 8004934:	4413      	add	r3, r2
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b94      	ldr	r3, [pc, #592]	; (8004b8c <UART+0x874>)
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	4413      	add	r3, r2
 800493e:	b2db      	uxtb	r3, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	b2da      	uxtb	r2, r3
 8004944:	4b91      	ldr	r3, [pc, #580]	; (8004b8c <UART+0x874>)
 8004946:	715a      	strb	r2, [r3, #5]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004948:	2206      	movs	r2, #6
 800494a:	4990      	ldr	r1, [pc, #576]	; (8004b8c <UART+0x874>)
 800494c:	4892      	ldr	r0, [pc, #584]	; (8004b98 <UART+0x880>)
 800494e:	f005 ff75 	bl	800a83c <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004952:	f7fd f8d7 	bl	8001b04 <micros>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4b90      	ldr	r3, [pc, #576]	; (8004b9c <UART+0x884>)
 800495c:	601a      	str	r2, [r3, #0]
				CheckTrasmit=0;
 800495e:	4b8a      	ldr	r3, [pc, #552]	; (8004b88 <UART+0x870>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
		break;
 8004964:	e2b4      	b.n	8004ed0 <UART+0xbb8>
				if(micros() - Timestamp_UI > UARTDelay){
 8004966:	f7fd f8cd 	bl	8001b04 <micros>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	498b      	ldr	r1, [pc, #556]	; (8004b9c <UART+0x884>)
 8004970:	6809      	ldr	r1, [r1, #0]
 8004972:	2000      	movs	r0, #0
 8004974:	65b9      	str	r1, [r7, #88]	; 0x58
 8004976:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004978:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800497c:	4621      	mov	r1, r4
 800497e:	1a51      	subs	r1, r2, r1
 8004980:	6539      	str	r1, [r7, #80]	; 0x50
 8004982:	4629      	mov	r1, r5
 8004984:	eb63 0301 	sbc.w	r3, r3, r1
 8004988:	657b      	str	r3, [r7, #84]	; 0x54
 800498a:	4b85      	ldr	r3, [pc, #532]	; (8004ba0 <UART+0x888>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	2200      	movs	r2, #0
 8004992:	64bb      	str	r3, [r7, #72]	; 0x48
 8004994:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004996:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800499a:	4623      	mov	r3, r4
 800499c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049a0:	4602      	mov	r2, r0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	462b      	mov	r3, r5
 80049a6:	460a      	mov	r2, r1
 80049a8:	4193      	sbcs	r3, r2
 80049aa:	f080 8291 	bcs.w	8004ed0 <UART+0xbb8>
					RxData[0] = 0;
 80049ae:	4b7d      	ldr	r3, [pc, #500]	; (8004ba4 <UART+0x88c>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 80049b4:	4878      	ldr	r0, [pc, #480]	; (8004b98 <UART+0x880>)
 80049b6:	f005 ffef 	bl	800a998 <HAL_UART_DMAStop>
					CheckTrasmit=1;
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <UART+0x870>)
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
		break;
 80049c0:	e286      	b.n	8004ed0 <UART+0xbb8>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 80049c2:	4b78      	ldr	r3, [pc, #480]	; (8004ba4 <UART+0x88c>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b65      	cmp	r3, #101	; 0x65
 80049c8:	f040 8284 	bne.w	8004ed4 <UART+0xbbc>
			//Request Angular Position
		if(Finish){
 80049cc:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <UART+0x890>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d053      	beq.n	8004a7c <UART+0x764>

			if(CheckTrasmit){
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <UART+0x870>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01e      	beq.n	8004a1a <UART+0x702>
				TxData2[4]=TxData[2];
 80049dc:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <UART+0x874>)
 80049de:	789a      	ldrb	r2, [r3, #2]
 80049e0:	4b72      	ldr	r3, [pc, #456]	; (8004bac <UART+0x894>)
 80049e2:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 80049e4:	4b69      	ldr	r3, [pc, #420]	; (8004b8c <UART+0x874>)
 80049e6:	78da      	ldrb	r2, [r3, #3]
 80049e8:	4b70      	ldr	r3, [pc, #448]	; (8004bac <UART+0x894>)
 80049ea:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 80049ec:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <UART+0x874>)
 80049ee:	791a      	ldrb	r2, [r3, #4]
 80049f0:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <UART+0x894>)
 80049f2:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 80049f4:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <UART+0x874>)
 80049f6:	795a      	ldrb	r2, [r3, #5]
 80049f8:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <UART+0x894>)
 80049fa:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 80049fc:	4b62      	ldr	r3, [pc, #392]	; (8004b88 <UART+0x870>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004a02:	2208      	movs	r2, #8
 8004a04:	4969      	ldr	r1, [pc, #420]	; (8004bac <UART+0x894>)
 8004a06:	4864      	ldr	r0, [pc, #400]	; (8004b98 <UART+0x880>)
 8004a08:	f005 ff18 	bl	800a83c <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004a0c:	f7fd f87a 	bl	8001b04 <micros>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <UART+0x884>)
 8004a16:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 8004a18:	e25c      	b.n	8004ed4 <UART+0xbbc>
				if(micros() - Timestamp_UI > UARTDelay){
 8004a1a:	f7fd f873 	bl	8001b04 <micros>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	495e      	ldr	r1, [pc, #376]	; (8004b9c <UART+0x884>)
 8004a24:	6809      	ldr	r1, [r1, #0]
 8004a26:	2000      	movs	r0, #0
 8004a28:	6439      	str	r1, [r7, #64]	; 0x40
 8004a2a:	6478      	str	r0, [r7, #68]	; 0x44
 8004a2c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004a30:	4621      	mov	r1, r4
 8004a32:	1a51      	subs	r1, r2, r1
 8004a34:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a36:	4629      	mov	r1, r5
 8004a38:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3e:	4b58      	ldr	r3, [pc, #352]	; (8004ba0 <UART+0x888>)
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2200      	movs	r2, #0
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
 8004a48:	637a      	str	r2, [r7, #52]	; 0x34
 8004a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a4e:	4623      	mov	r3, r4
 8004a50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a54:	4602      	mov	r2, r0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	462b      	mov	r3, r5
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	4193      	sbcs	r3, r2
 8004a5e:	f080 8239 	bcs.w	8004ed4 <UART+0xbbc>
					RxData[0] = 0;
 8004a62:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <UART+0x88c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004a68:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <UART+0x870>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <UART+0x890>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004a74:	4848      	ldr	r0, [pc, #288]	; (8004b98 <UART+0x880>)
 8004a76:	f005 ff8f 	bl	800a998 <HAL_UART_DMAStop>
		break;
 8004a7a:	e22b      	b.n	8004ed4 <UART+0xbbc>
		else if(CheckTrasmit){
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <UART+0x870>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04c      	beq.n	8004b1e <UART+0x806>
			TxData[2] = 0b10011010;
 8004a84:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <UART+0x874>)
 8004a86:	229a      	movs	r2, #154	; 0x9a
 8004a88:	709a      	strb	r2, [r3, #2]
			TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <UART+0x878>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fb fd06 	bl	80004a0 <__aeabi_f2d>
 8004a94:	a33a      	add	r3, pc, #232	; (adr r3, 8004b80 <UART+0x868>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fd59 	bl	8000550 <__aeabi_dmul>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <UART+0x898>)
 8004aac:	f7fb fe7a 	bl	80007a4 <__aeabi_ddiv>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7fb fffa 	bl	8000ab0 <__aeabi_d2uiz>
 8004abc:	4603      	mov	r3, r0
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <UART+0x874>)
 8004ac2:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)(theta_now*10000)%256;
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <UART+0x878>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004bb4 <UART+0x89c>
 8004ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8004ada:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <UART+0x874>)
 8004ae2:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <UART+0x874>)
 8004ae6:	789a      	ldrb	r2, [r3, #2]
 8004ae8:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <UART+0x874>)
 8004aea:	78db      	ldrb	r3, [r3, #3]
 8004aec:	4413      	add	r3, r2
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <UART+0x874>)
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <UART+0x874>)
 8004afe:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004b00:	2206      	movs	r2, #6
 8004b02:	4922      	ldr	r1, [pc, #136]	; (8004b8c <UART+0x874>)
 8004b04:	4824      	ldr	r0, [pc, #144]	; (8004b98 <UART+0x880>)
 8004b06:	f005 fe99 	bl	800a83c <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004b0a:	f7fc fffb 	bl	8001b04 <micros>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <UART+0x884>)
 8004b14:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <UART+0x870>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
		break;
 8004b1c:	e1da      	b.n	8004ed4 <UART+0xbbc>
			if(micros() - Timestamp_UI > UARTDelay){
 8004b1e:	f7fc fff1 	bl	8001b04 <micros>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	491d      	ldr	r1, [pc, #116]	; (8004b9c <UART+0x884>)
 8004b28:	6809      	ldr	r1, [r1, #0]
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b30:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004b34:	4621      	mov	r1, r4
 8004b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <UART+0x888>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2200      	movs	r2, #0
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b50:	460b      	mov	r3, r1
 8004b52:	4553      	cmp	r3, sl
 8004b54:	4613      	mov	r3, r2
 8004b56:	eb73 030b 	sbcs.w	r3, r3, fp
 8004b5a:	f080 81bb 	bcs.w	8004ed4 <UART+0xbbc>
				RxData[0] = 0;
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <UART+0x88c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <UART+0x880>)
 8004b66:	f005 ff17 	bl	800a998 <HAL_UART_DMAStop>
				CheckTrasmit=1;
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <UART+0x870>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
		break;
 8004b70:	e1b0      	b.n	8004ed4 <UART+0xbbc>
 8004b72:	bf00      	nop
 8004b74:	f3af 8000 	nop.w
 8004b78:	cac08312 	.word	0xcac08312
 8004b7c:	3fb645a1 	.word	0x3fb645a1
 8004b80:	00000000 	.word	0x00000000
 8004b84:	40c38800 	.word	0x40c38800
 8004b88:	200000db 	.word	0x200000db
 8004b8c:	20000098 	.word	0x20000098
 8004b90:	200003f4 	.word	0x200003f4
 8004b94:	200000d4 	.word	0x200000d4
 8004b98:	200002e0 	.word	0x200002e0
 8004b9c:	200006e4 	.word	0x200006e4
 8004ba0:	20000096 	.word	0x20000096
 8004ba4:	20000688 	.word	0x20000688
 8004ba8:	200006a1 	.word	0x200006a1
 8004bac:	200000a0 	.word	0x200000a0
 8004bb0:	40700000 	.word	0x40700000
 8004bb4:	461c4000 	.word	0x461c4000
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 8004bb8:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <UART+0xb60>)
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b64      	cmp	r3, #100	; 0x64
 8004bbe:	f040 818b 	bne.w	8004ed8 <UART+0xbc0>
			//Request Angular Velocity
		if(Finish){
 8004bc2:	4bae      	ldr	r3, [pc, #696]	; (8004e7c <UART+0xb64>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d052      	beq.n	8004c70 <UART+0x958>
			if(CheckTrasmit){
 8004bca:	4bad      	ldr	r3, [pc, #692]	; (8004e80 <UART+0xb68>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01e      	beq.n	8004c10 <UART+0x8f8>
				TxData2[4]=TxData[2];
 8004bd2:	4bac      	ldr	r3, [pc, #688]	; (8004e84 <UART+0xb6c>)
 8004bd4:	789a      	ldrb	r2, [r3, #2]
 8004bd6:	4bac      	ldr	r3, [pc, #688]	; (8004e88 <UART+0xb70>)
 8004bd8:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004bda:	4baa      	ldr	r3, [pc, #680]	; (8004e84 <UART+0xb6c>)
 8004bdc:	78da      	ldrb	r2, [r3, #3]
 8004bde:	4baa      	ldr	r3, [pc, #680]	; (8004e88 <UART+0xb70>)
 8004be0:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004be2:	4ba8      	ldr	r3, [pc, #672]	; (8004e84 <UART+0xb6c>)
 8004be4:	791a      	ldrb	r2, [r3, #4]
 8004be6:	4ba8      	ldr	r3, [pc, #672]	; (8004e88 <UART+0xb70>)
 8004be8:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004bea:	4ba6      	ldr	r3, [pc, #664]	; (8004e84 <UART+0xb6c>)
 8004bec:	795a      	ldrb	r2, [r3, #5]
 8004bee:	4ba6      	ldr	r3, [pc, #664]	; (8004e88 <UART+0xb70>)
 8004bf0:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004bf2:	4ba3      	ldr	r3, [pc, #652]	; (8004e80 <UART+0xb68>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	49a3      	ldr	r1, [pc, #652]	; (8004e88 <UART+0xb70>)
 8004bfc:	48a3      	ldr	r0, [pc, #652]	; (8004e8c <UART+0xb74>)
 8004bfe:	f005 fe1d 	bl	800a83c <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004c02:	f7fc ff7f 	bl	8001b04 <micros>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4ba1      	ldr	r3, [pc, #644]	; (8004e90 <UART+0xb78>)
 8004c0c:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 8004c0e:	e163      	b.n	8004ed8 <UART+0xbc0>
				if(micros() - Timestamp_UI > UARTDelay){
 8004c10:	f7fc ff78 	bl	8001b04 <micros>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	499d      	ldr	r1, [pc, #628]	; (8004e90 <UART+0xb78>)
 8004c1a:	6809      	ldr	r1, [r1, #0]
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	61b9      	str	r1, [r7, #24]
 8004c20:	61f8      	str	r0, [r7, #28]
 8004c22:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004c26:	4621      	mov	r1, r4
 8004c28:	ebb2 0801 	subs.w	r8, r2, r1
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c32:	4b98      	ldr	r3, [pc, #608]	; (8004e94 <UART+0xb7c>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	617a      	str	r2, [r7, #20]
 8004c3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c42:	460b      	mov	r3, r1
 8004c44:	4543      	cmp	r3, r8
 8004c46:	4613      	mov	r3, r2
 8004c48:	eb73 0309 	sbcs.w	r3, r3, r9
 8004c4c:	f080 8144 	bcs.w	8004ed8 <UART+0xbc0>
					RxData[0] = 0;
 8004c50:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <UART+0xb60>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004c56:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <UART+0xb68>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004c5c:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <UART+0xb64>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004c62:	488a      	ldr	r0, [pc, #552]	; (8004e8c <UART+0xb74>)
 8004c64:	f005 fe98 	bl	800a998 <HAL_UART_DMAStop>
					CheckTrasmit=1;
 8004c68:	4b85      	ldr	r3, [pc, #532]	; (8004e80 <UART+0xb68>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
		break;
 8004c6e:	e133      	b.n	8004ed8 <UART+0xbc0>
		else if (CheckTrasmit){
 8004c70:	4b83      	ldr	r3, [pc, #524]	; (8004e80 <UART+0xb68>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d054      	beq.n	8004d22 <UART+0xa0a>
			TxData[2] = 0b10011011;
 8004c78:	4b82      	ldr	r3, [pc, #520]	; (8004e84 <UART+0xb6c>)
 8004c7a:	229b      	movs	r2, #155	; 0x9b
 8004c7c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <UART+0xb6c>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((positive(omega_kalman)*60/(2*M_PI))*255/10);
 8004c84:	4b84      	ldr	r3, [pc, #528]	; (8004e98 <UART+0xb80>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c8e:	f7ff faf5 	bl	800427c <positive>
 8004c92:	eef0 7a40 	vmov.f32	s15, s0
 8004c96:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004e9c <UART+0xb84>
 8004c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c9e:	ee17 0a90 	vmov	r0, s15
 8004ca2:	f7fb fbfd 	bl	80004a0 <__aeabi_f2d>
 8004ca6:	a370      	add	r3, pc, #448	; (adr r3, 8004e68 <UART+0xb50>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f7fb fd7a 	bl	80007a4 <__aeabi_ddiv>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	a36d      	add	r3, pc, #436	; (adr r3, 8004e70 <UART+0xb58>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc47 	bl	8000550 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	4b74      	ldr	r3, [pc, #464]	; (8004ea0 <UART+0xb88>)
 8004cd0:	f7fb fd68 	bl	80007a4 <__aeabi_ddiv>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7fb fee8 	bl	8000ab0 <__aeabi_d2uiz>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b67      	ldr	r3, [pc, #412]	; (8004e84 <UART+0xb6c>)
 8004ce6:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004ce8:	4b66      	ldr	r3, [pc, #408]	; (8004e84 <UART+0xb6c>)
 8004cea:	789a      	ldrb	r2, [r3, #2]
 8004cec:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <UART+0xb6c>)
 8004cee:	78db      	ldrb	r3, [r3, #3]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	4b63      	ldr	r3, [pc, #396]	; (8004e84 <UART+0xb6c>)
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <UART+0xb6c>)
 8004d02:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004d04:	2206      	movs	r2, #6
 8004d06:	495f      	ldr	r1, [pc, #380]	; (8004e84 <UART+0xb6c>)
 8004d08:	4860      	ldr	r0, [pc, #384]	; (8004e8c <UART+0xb74>)
 8004d0a:	f005 fd97 	bl	800a83c <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004d0e:	f7fc fef9 	bl	8001b04 <micros>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4b5e      	ldr	r3, [pc, #376]	; (8004e90 <UART+0xb78>)
 8004d18:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004d1a:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <UART+0xb68>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
		break;
 8004d20:	e0da      	b.n	8004ed8 <UART+0xbc0>
			if(micros() - Timestamp_UI > UARTDelay){
 8004d22:	f7fc feef 	bl	8001b04 <micros>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4959      	ldr	r1, [pc, #356]	; (8004e90 <UART+0xb78>)
 8004d2c:	6809      	ldr	r1, [r1, #0]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1a54      	subs	r4, r2, r1
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	eb63 0501 	sbc.w	r5, r3, r1
 8004d42:	4b54      	ldr	r3, [pc, #336]	; (8004e94 <UART+0xb7c>)
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d52:	460b      	mov	r3, r1
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	4613      	mov	r3, r2
 8004d58:	41ab      	sbcs	r3, r5
 8004d5a:	f080 80bd 	bcs.w	8004ed8 <UART+0xbc0>
				RxData[0] = 0;
 8004d5e:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <UART+0xb60>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004d64:	4849      	ldr	r0, [pc, #292]	; (8004e8c <UART+0xb74>)
 8004d66:	f005 fe17 	bl	800a998 <HAL_UART_DMAStop>
				CheckTrasmit=1;
 8004d6a:	4b45      	ldr	r3, [pc, #276]	; (8004e80 <UART+0xb68>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
		break;
 8004d70:	e0b2      	b.n	8004ed8 <UART+0xbc0>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <UART+0xb60>)
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b63      	cmp	r3, #99	; 0x63
 8004d78:	f040 80b0 	bne.w	8004edc <UART+0xbc4>
			//enable gripple
			Enable_EndEffector = 1;
 8004d7c:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <UART+0xb8c>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004d82:	2202      	movs	r2, #2
 8004d84:	4948      	ldr	r1, [pc, #288]	; (8004ea8 <UART+0xb90>)
 8004d86:	4841      	ldr	r0, [pc, #260]	; (8004e8c <UART+0xb74>)
 8004d88:	f005 fd58 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004d8c:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <UART+0xb60>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004d92:	483e      	ldr	r0, [pc, #248]	; (8004e8c <UART+0xb74>)
 8004d94:	f005 fe00 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 8004d98:	e0a0      	b.n	8004edc <UART+0xbc4>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 8004d9a:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <UART+0xb60>)
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b62      	cmp	r3, #98	; 0x62
 8004da0:	f040 809e 	bne.w	8004ee0 <UART+0xbc8>
			//disable gripple
			Enable_EndEffector = 0;
 8004da4:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <UART+0xb8c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004daa:	2202      	movs	r2, #2
 8004dac:	493e      	ldr	r1, [pc, #248]	; (8004ea8 <UART+0xb90>)
 8004dae:	4837      	ldr	r0, [pc, #220]	; (8004e8c <UART+0xb74>)
 8004db0:	f005 fd44 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004db4:	4b30      	ldr	r3, [pc, #192]	; (8004e78 <UART+0xb60>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004dba:	4834      	ldr	r0, [pc, #208]	; (8004e8c <UART+0xb74>)
 8004dbc:	f005 fdec 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 8004dc0:	e08e      	b.n	8004ee0 <UART+0xbc8>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <UART+0xb60>)
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b61      	cmp	r3, #97	; 0x61
 8004dc8:	f040 808c 	bne.w	8004ee4 <UART+0xbcc>
			//Set HOME
			Arm_State = Home;
 8004dcc:	4b37      	ldr	r3, [pc, #220]	; (8004eac <UART+0xb94>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
			theta_now = 0.1;
 8004dd2:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <UART+0xb98>)
 8004dd4:	4a37      	ldr	r2, [pc, #220]	; (8004eb4 <UART+0xb9c>)
 8004dd6:	601a      	str	r2, [r3, #0]
			SetHome_Flag=1;
 8004dd8:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <UART+0xba0>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004dde:	2202      	movs	r2, #2
 8004de0:	4931      	ldr	r1, [pc, #196]	; (8004ea8 <UART+0xb90>)
 8004de2:	482a      	ldr	r0, [pc, #168]	; (8004e8c <UART+0xb74>)
 8004de4:	f005 fd2a 	bl	800a83c <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004de8:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <UART+0xb60>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004dee:	4827      	ldr	r0, [pc, #156]	; (8004e8c <UART+0xb74>)
 8004df0:	f005 fdd2 	bl	800a998 <HAL_UART_DMAStop>
		}
		break;
 8004df4:	e076      	b.n	8004ee4 <UART+0xbcc>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004df6:	220c      	movs	r2, #12
 8004df8:	491f      	ldr	r1, [pc, #124]	; (8004e78 <UART+0xb60>)
 8004dfa:	4824      	ldr	r0, [pc, #144]	; (8004e8c <UART+0xb74>)
 8004dfc:	f005 fd9c 	bl	800a938 <HAL_UART_Receive_DMA>
		break;
 8004e00:	e073      	b.n	8004eea <UART+0xbd2>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <UART+0xb60>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b58      	cmp	r3, #88	; 0x58
 8004e08:	d16e      	bne.n	8004ee8 <UART+0xbd0>
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <UART+0xb60>)
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b75      	cmp	r3, #117	; 0x75
 8004e10:	d16a      	bne.n	8004ee8 <UART+0xbd0>
			if(RxData[2] !=0 && RxData[3] != 0){
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <UART+0xb60>)
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d066      	beq.n	8004ee8 <UART+0xbd0>
 8004e1a:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <UART+0xb60>)
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d062      	beq.n	8004ee8 <UART+0xbd0>
				RxData[0]=RxData[2];
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <UART+0xb60>)
 8004e24:	789a      	ldrb	r2, [r3, #2]
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <UART+0xb60>)
 8004e28:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <UART+0xb60>)
 8004e2c:	78da      	ldrb	r2, [r3, #3]
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <UART+0xb60>)
 8004e30:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <UART+0xb60>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <UART+0xb60>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <UART+0xb60>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <UART+0xb60>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8004e4a:	e04d      	b.n	8004ee8 <UART+0xbd0>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <UART+0xb60>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 8004e52:	480e      	ldr	r0, [pc, #56]	; (8004e8c <UART+0xb74>)
 8004e54:	f005 fda0 	bl	800a998 <HAL_UART_DMAStop>
		break;
 8004e58:	e047      	b.n	8004eea <UART+0xbd2>
		break;
 8004e5a:	bf00      	nop
 8004e5c:	e045      	b.n	8004eea <UART+0xbd2>
		break;
 8004e5e:	bf00      	nop
 8004e60:	e043      	b.n	8004eea <UART+0xbd2>
		break;
 8004e62:	bf00      	nop
 8004e64:	e041      	b.n	8004eea <UART+0xbd2>
 8004e66:	bf00      	nop
 8004e68:	54442d18 	.word	0x54442d18
 8004e6c:	401921fb 	.word	0x401921fb
 8004e70:	00000000 	.word	0x00000000
 8004e74:	406fe000 	.word	0x406fe000
 8004e78:	20000688 	.word	0x20000688
 8004e7c:	200006a1 	.word	0x200006a1
 8004e80:	200000db 	.word	0x200000db
 8004e84:	20000098 	.word	0x20000098
 8004e88:	200000a0 	.word	0x200000a0
 8004e8c:	200002e0 	.word	0x200002e0
 8004e90:	200006e4 	.word	0x200006e4
 8004e94:	20000096 	.word	0x20000096
 8004e98:	2000040c 	.word	0x2000040c
 8004e9c:	42700000 	.word	0x42700000
 8004ea0:	40240000 	.word	0x40240000
 8004ea4:	20000697 	.word	0x20000697
 8004ea8:	200000a8 	.word	0x200000a8
 8004eac:	200000d7 	.word	0x200000d7
 8004eb0:	200003f4 	.word	0x200003f4
 8004eb4:	3dcccccd 	.word	0x3dcccccd
 8004eb8:	200003e8 	.word	0x200003e8
		break;
 8004ebc:	bf00      	nop
 8004ebe:	e014      	b.n	8004eea <UART+0xbd2>
		break;
 8004ec0:	bf00      	nop
 8004ec2:	e012      	b.n	8004eea <UART+0xbd2>
		break;
 8004ec4:	bf00      	nop
 8004ec6:	e010      	b.n	8004eea <UART+0xbd2>
		break;
 8004ec8:	bf00      	nop
 8004eca:	e00e      	b.n	8004eea <UART+0xbd2>
		break;
 8004ecc:	bf00      	nop
 8004ece:	e00c      	b.n	8004eea <UART+0xbd2>
		break;
 8004ed0:	bf00      	nop
 8004ed2:	e00a      	b.n	8004eea <UART+0xbd2>
		break;
 8004ed4:	bf00      	nop
 8004ed6:	e008      	b.n	8004eea <UART+0xbd2>
		break;
 8004ed8:	bf00      	nop
 8004eda:	e006      	b.n	8004eea <UART+0xbd2>
		break;
 8004edc:	bf00      	nop
 8004ede:	e004      	b.n	8004eea <UART+0xbd2>
		break;
 8004ee0:	bf00      	nop
 8004ee2:	e002      	b.n	8004eea <UART+0xbd2>
		break;
 8004ee4:	bf00      	nop
 8004ee6:	e000      	b.n	8004eea <UART+0xbd2>
		break;
 8004ee8:	bf00      	nop
	}
}
 8004eea:	bf00      	nop
 8004eec:	3788      	adds	r7, #136	; 0x88
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ef4 <OpenEndEffector>:

void OpenEndEffector() {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8004efa:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <OpenEndEffector+0xf0>)
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d119      	bne.n	8004f3a <OpenEndEffector+0x46>
 8004f06:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <OpenEndEffector+0xf4>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d115      	bne.n	8004f3a <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8004f0e:	2364      	movs	r3, #100	; 0x64
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2301      	movs	r3, #1
 8004f14:	4a35      	ldr	r2, [pc, #212]	; (8004fec <OpenEndEffector+0xf8>)
 8004f16:	2146      	movs	r1, #70	; 0x46
 8004f18:	4832      	ldr	r0, [pc, #200]	; (8004fe4 <OpenEndEffector+0xf0>)
 8004f1a:	f001 fc5f 	bl	80067dc <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <OpenEndEffector+0xf4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <OpenEndEffector+0xfc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 8004f2a:	4b32      	ldr	r3, [pc, #200]	; (8004ff4 <OpenEndEffector+0x100>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 8004f30:	f000 fbd6 	bl	80056e0 <HAL_GetTick>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a30      	ldr	r2, [pc, #192]	; (8004ff8 <OpenEndEffector+0x104>)
 8004f38:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <OpenEndEffector+0xfc>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d144      	bne.n	8004fcc <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 8004f42:	f000 fbcd 	bl	80056e0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <OpenEndEffector+0x104>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2bfa      	cmp	r3, #250	; 0xfa
 8004f50:	d906      	bls.n	8004f60 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 8004f52:	f000 fbc5 	bl	80056e0 <HAL_GetTick>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <OpenEndEffector+0x104>)
 8004f5a:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 8004f5c:	f000 f850 	bl	8005000 <CheckEndEffector>
		}

		switch(EndEffector_State)
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <OpenEndEffector+0x100>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d83a      	bhi.n	8004fde <OpenEndEffector+0xea>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <OpenEndEffector+0x7c>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f85 	.word	0x08004f85
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fc5 	.word	0x08004fc5
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <OpenEndEffector+0x108>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	2b12      	cmp	r3, #18
 8004f8a:	d121      	bne.n	8004fd0 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <OpenEndEffector+0x100>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004f92:	e01d      	b.n	8004fd0 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <OpenEndEffector+0x108>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	2b34      	cmp	r3, #52	; 0x34
 8004f9a:	d11b      	bne.n	8004fd4 <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8004f9c:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <OpenEndEffector+0x100>)
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004fa2:	e017      	b.n	8004fd4 <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 8004fa4:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <OpenEndEffector+0x108>)
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	2b56      	cmp	r3, #86	; 0x56
 8004faa:	d115      	bne.n	8004fd8 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <OpenEndEffector+0x100>)
 8004fae:	2203      	movs	r2, #3
 8004fb0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004fb2:	e011      	b.n	8004fd8 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <OpenEndEffector+0x108>)
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	2b78      	cmp	r3, #120	; 0x78
 8004fba:	d10f      	bne.n	8004fdc <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <OpenEndEffector+0x100>)
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004fc2:	e00b      	b.n	8004fdc <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <OpenEndEffector+0xfc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
			break;
 8004fca:	e008      	b.n	8004fde <OpenEndEffector+0xea>
		}
	}
 8004fcc:	bf00      	nop
 8004fce:	e006      	b.n	8004fde <OpenEndEffector+0xea>
			break;
 8004fd0:	bf00      	nop
 8004fd2:	e004      	b.n	8004fde <OpenEndEffector+0xea>
			break;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <OpenEndEffector+0xea>
			break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <OpenEndEffector+0xea>
			break;
 8004fdc:	bf00      	nop
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000016c 	.word	0x2000016c
 8004fe8:	200006b4 	.word	0x200006b4
 8004fec:	200000dc 	.word	0x200000dc
 8004ff0:	200006b5 	.word	0x200006b5
 8004ff4:	200000d8 	.word	0x200000d8
 8004ff8:	200006b8 	.word	0x200006b8
 8004ffc:	200006b6 	.word	0x200006b6

08005000 <CheckEndEffector>:

void CheckEndEffector()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 8005006:	2301      	movs	r3, #1
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2301      	movs	r3, #1
 800500c:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <CheckEndEffector+0x38>)
 800500e:	2146      	movs	r1, #70	; 0x46
 8005010:	480a      	ldr	r0, [pc, #40]	; (800503c <CheckEndEffector+0x3c>)
 8005012:	f001 fce1 	bl	80069d8 <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <CheckEndEffector+0x3c>)
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b20      	cmp	r3, #32
 8005020:	d107      	bne.n	8005032 <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 8005022:	2320      	movs	r3, #32
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2301      	movs	r3, #1
 8005028:	4a05      	ldr	r2, [pc, #20]	; (8005040 <CheckEndEffector+0x40>)
 800502a:	2146      	movs	r1, #70	; 0x46
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <CheckEndEffector+0x3c>)
 800502e:	f001 fd99 	bl	8006b64 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	200000dd 	.word	0x200000dd
 800503c:	2000016c 	.word	0x2000016c
 8005040:	200006b6 	.word	0x200006b6

08005044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005048:	b672      	cpsid	i
}
 800504a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800504c:	e7fe      	b.n	800504c <Error_Handler+0x8>
	...

08005050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_MspInit+0x4c>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <HAL_MspInit+0x4c>)
 8005060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005064:	6453      	str	r3, [r2, #68]	; 0x44
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_MspInit+0x4c>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_MspInit+0x4c>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <HAL_MspInit+0x4c>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_MspInit+0x4c>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800508e:	2007      	movs	r0, #7
 8005090:	f000 fc26 	bl	80058e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800

080050a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_I2C_MspInit+0xa4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d13c      	bne.n	800513c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	6313      	str	r3, [r2, #48]	; 0x30
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80050de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e4:	2312      	movs	r3, #18
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050f0:	2304      	movs	r3, #4
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4619      	mov	r1, r3
 80050fa:	4814      	ldr	r0, [pc, #80]	; (800514c <HAL_I2C_MspInit+0xac>)
 80050fc:	f001 f842 	bl	8006184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 800510a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800510e:	6413      	str	r3, [r2, #64]	; 0x40
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_I2C_MspInit+0xa8>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	201f      	movs	r0, #31
 8005122:	f000 fbe8 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005126:	201f      	movs	r0, #31
 8005128:	f000 fc01 	bl	800592e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	2020      	movs	r0, #32
 8005132:	f000 fbe0 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005136:	2020      	movs	r0, #32
 8005138:	f000 fbf9 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800513c:	bf00      	nop
 800513e:	3728      	adds	r7, #40	; 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40005400 	.word	0x40005400
 8005148:	40023800 	.word	0x40023800
 800514c:	40020400 	.word	0x40020400

08005150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <HAL_TIM_Base_MspInit+0xb8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d116      	bne.n	8005190 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	4a28      	ldr	r2, [pc, #160]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6453      	str	r3, [r2, #68]	; 0x44
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	201a      	movs	r0, #26
 8005184:	f000 fbb7 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005188:	201a      	movs	r0, #26
 800518a:	f000 fbd0 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800518e:	e036      	b.n	80051fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_TIM_Base_MspInit+0xc0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d116      	bne.n	80051c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	4a1a      	ldr	r2, [pc, #104]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051a4:	f043 0304 	orr.w	r3, r3, #4
 80051a8:	6413      	str	r3, [r2, #64]	; 0x40
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2100      	movs	r1, #0
 80051ba:	201e      	movs	r0, #30
 80051bc:	f000 fb9b 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80051c0:	201e      	movs	r0, #30
 80051c2:	f000 fbb4 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 80051c6:	e01a      	b.n	80051fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <HAL_TIM_Base_MspInit+0xc4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d115      	bne.n	80051fe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e0:	6453      	str	r3, [r2, #68]	; 0x44
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_TIM_Base_MspInit+0xbc>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2100      	movs	r1, #0
 80051f2:	201a      	movs	r0, #26
 80051f4:	f000 fb7f 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80051f8:	201a      	movs	r0, #26
 80051fa:	f000 fb98 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40023800 	.word	0x40023800
 8005210:	40000800 	.word	0x40000800
 8005214:	40014800 	.word	0x40014800

08005218 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_TIM_Encoder_MspInit+0x84>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d12b      	bne.n	8005292 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	6413      	str	r3, [r2, #64]	; 0x40
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	6313      	str	r3, [r2, #48]	; 0x30
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005272:	23c0      	movs	r3, #192	; 0xc0
 8005274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	2302      	movs	r3, #2
 8005278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527e:	2300      	movs	r3, #0
 8005280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005282:	2302      	movs	r3, #2
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005286:	f107 0314 	add.w	r3, r7, #20
 800528a:	4619      	mov	r1, r3
 800528c:	4805      	ldr	r0, [pc, #20]	; (80052a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800528e:	f000 ff79 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40000400 	.word	0x40000400
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40020000 	.word	0x40020000

080052a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 030c 	add.w	r3, r7, #12
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_TIM_MspPostInit+0x68>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d11e      	bne.n	8005308 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 80052e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2302      	movs	r3, #2
 80052ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052f8:	2301      	movs	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	4619      	mov	r1, r3
 8005302:	4805      	ldr	r0, [pc, #20]	; (8005318 <HAL_TIM_MspPostInit+0x70>)
 8005304:	f000 ff3e 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005308:	bf00      	nop
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40010000 	.word	0x40010000
 8005314:	40023800 	.word	0x40023800
 8005318:	40020000 	.word	0x40020000

0800531c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a4c      	ldr	r2, [pc, #304]	; (800546c <HAL_UART_MspInit+0x150>)
 800533a:	4293      	cmp	r3, r2
 800533c:	f040 8091 	bne.w	8005462 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	4b4a      	ldr	r3, [pc, #296]	; (8005470 <HAL_UART_MspInit+0x154>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a49      	ldr	r2, [pc, #292]	; (8005470 <HAL_UART_MspInit+0x154>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
 8005350:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_UART_MspInit+0x154>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	4b43      	ldr	r3, [pc, #268]	; (8005470 <HAL_UART_MspInit+0x154>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	4a42      	ldr	r2, [pc, #264]	; (8005470 <HAL_UART_MspInit+0x154>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6313      	str	r3, [r2, #48]	; 0x30
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <HAL_UART_MspInit+0x154>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005378:	230c      	movs	r3, #12
 800537a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537c:	2302      	movs	r3, #2
 800537e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005384:	2303      	movs	r3, #3
 8005386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005388:	2307      	movs	r3, #7
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	4619      	mov	r1, r3
 8005392:	4838      	ldr	r0, [pc, #224]	; (8005474 <HAL_UART_MspInit+0x158>)
 8005394:	f000 fef6 	bl	8006184 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_UART_MspInit+0x15c>)
 800539a:	4a38      	ldr	r2, [pc, #224]	; (800547c <HAL_UART_MspInit+0x160>)
 800539c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800539e:	4b36      	ldr	r3, [pc, #216]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053b2:	4b31      	ldr	r3, [pc, #196]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ba:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c0:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80053c6:	4b2c      	ldr	r3, [pc, #176]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053ce:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053da:	4827      	ldr	r0, [pc, #156]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053dc:	f000 fac2 	bl	8005964 <HAL_DMA_Init>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80053e6:	f7ff fe2d 	bl	8005044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_UART_MspInit+0x15c>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_UART_MspInit+0x164>)
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_UART_MspInit+0x168>)
 80053fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80053fc:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_UART_MspInit+0x164>)
 80053fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005402:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005404:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005406:	2240      	movs	r2, #64	; 0x40
 8005408:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_UART_MspInit+0x164>)
 800540c:	2200      	movs	r2, #0
 800540e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005416:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_UART_MspInit+0x164>)
 800541a:	2200      	movs	r2, #0
 800541c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005420:	2200      	movs	r2, #0
 8005422:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_UART_MspInit+0x164>)
 800542c:	2200      	movs	r2, #0
 800542e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005432:	2200      	movs	r2, #0
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005436:	4812      	ldr	r0, [pc, #72]	; (8005480 <HAL_UART_MspInit+0x164>)
 8005438:	f000 fa94 	bl	8005964 <HAL_DMA_Init>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005442:	f7ff fdff 	bl	8005044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <HAL_UART_MspInit+0x164>)
 800544a:	635a      	str	r2, [r3, #52]	; 0x34
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <HAL_UART_MspInit+0x164>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005452:	2200      	movs	r2, #0
 8005454:	2100      	movs	r1, #0
 8005456:	2026      	movs	r0, #38	; 0x26
 8005458:	f000 fa4d 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800545c:	2026      	movs	r0, #38	; 0x26
 800545e:	f000 fa66 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005462:	bf00      	nop
 8005464:	3728      	adds	r7, #40	; 0x28
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40004400 	.word	0x40004400
 8005470:	40023800 	.word	0x40023800
 8005474:	40020000 	.word	0x40020000
 8005478:	20000324 	.word	0x20000324
 800547c:	40026088 	.word	0x40026088
 8005480:	20000384 	.word	0x20000384
 8005484:	400260a0 	.word	0x400260a0

08005488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800548c:	e7fe      	b.n	800548c <NMI_Handler+0x4>

0800548e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005492:	e7fe      	b.n	8005492 <HardFault_Handler+0x4>

08005494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005498:	e7fe      	b.n	8005498 <MemManage_Handler+0x4>

0800549a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800549e:	e7fe      	b.n	800549e <BusFault_Handler+0x4>

080054a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054a4:	e7fe      	b.n	80054a4 <UsageFault_Handler+0x4>

080054a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054d4:	f000 f8f0 	bl	80056b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}

080054dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 80054e0:	2004      	movs	r0, #4
 80054e2:	f001 f81f 	bl	8006524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}

080054ea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80054ee:	2010      	movs	r0, #16
 80054f0:	f001 f818 	bl	8006524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80054f4:	bf00      	nop
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054fc:	4802      	ldr	r0, [pc, #8]	; (8005508 <DMA1_Stream5_IRQHandler+0x10>)
 80054fe:	f000 fbc9 	bl	8005c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000324 	.word	0x20000324

0800550c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005510:	4802      	ldr	r0, [pc, #8]	; (800551c <DMA1_Stream6_IRQHandler+0x10>)
 8005512:	f000 fbbf 	bl	8005c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000384 	.word	0x20000384

08005520 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005524:	4803      	ldr	r0, [pc, #12]	; (8005534 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005526:	f004 fae1 	bl	8009aec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800552a:	4803      	ldr	r0, [pc, #12]	; (8005538 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800552c:	f004 fade 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005530:	bf00      	nop
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200001c0 	.word	0x200001c0
 8005538:	20000298 	.word	0x20000298

0800553c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005540:	4802      	ldr	r0, [pc, #8]	; (800554c <TIM4_IRQHandler+0x10>)
 8005542:	f004 fad3 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000250 	.word	0x20000250

08005550 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <I2C1_EV_IRQHandler+0x10>)
 8005556:	f001 fc03 	bl	8006d60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	2000016c 	.word	0x2000016c

08005564 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <I2C1_ER_IRQHandler+0x10>)
 800556a:	f001 fd6a 	bl	8007042 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2000016c 	.word	0x2000016c

08005578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <USART2_IRQHandler+0x10>)
 800557e:	f005 fa8b 	bl	800aa98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200002e0 	.word	0x200002e0

0800558c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005594:	f000 ffc6 	bl	8006524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <SystemInit+0x20>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	4a05      	ldr	r2, [pc, #20]	; (80055bc <SystemInit+0x20>)
 80055a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <Reset_Handler>:
 80055c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055f8 <LoopFillZerobss+0x12>
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <LoopFillZerobss+0x16>)
 80055c6:	490e      	ldr	r1, [pc, #56]	; (8005600 <LoopFillZerobss+0x1a>)
 80055c8:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <LoopFillZerobss+0x1e>)
 80055ca:	2300      	movs	r3, #0
 80055cc:	e002      	b.n	80055d4 <LoopCopyDataInit>

080055ce <CopyDataInit>:
 80055ce:	58d4      	ldr	r4, [r2, r3]
 80055d0:	50c4      	str	r4, [r0, r3]
 80055d2:	3304      	adds	r3, #4

080055d4 <LoopCopyDataInit>:
 80055d4:	18c4      	adds	r4, r0, r3
 80055d6:	428c      	cmp	r4, r1
 80055d8:	d3f9      	bcc.n	80055ce <CopyDataInit>
 80055da:	4a0b      	ldr	r2, [pc, #44]	; (8005608 <LoopFillZerobss+0x22>)
 80055dc:	4c0b      	ldr	r4, [pc, #44]	; (800560c <LoopFillZerobss+0x26>)
 80055de:	2300      	movs	r3, #0
 80055e0:	e001      	b.n	80055e6 <LoopFillZerobss>

080055e2 <FillZerobss>:
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	3204      	adds	r2, #4

080055e6 <LoopFillZerobss>:
 80055e6:	42a2      	cmp	r2, r4
 80055e8:	d3fb      	bcc.n	80055e2 <FillZerobss>
 80055ea:	f7ff ffd7 	bl	800559c <SystemInit>
 80055ee:	f006 fd21 	bl	800c034 <__libc_init_array>
 80055f2:	f7fb fc51 	bl	8000e98 <main>
 80055f6:	4770      	bx	lr
 80055f8:	20020000 	.word	0x20020000
 80055fc:	20000000 	.word	0x20000000
 8005600:	20000150 	.word	0x20000150
 8005604:	0800d0a0 	.word	0x0800d0a0
 8005608:	20000150 	.word	0x20000150
 800560c:	200006ec 	.word	0x200006ec

08005610 <ADC_IRQHandler>:
 8005610:	e7fe      	b.n	8005610 <ADC_IRQHandler>
	...

08005614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_Init+0x40>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_Init+0x40>)
 800561e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_Init+0x40>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <HAL_Init+0x40>)
 800562a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800562e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_Init+0x40>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a07      	ldr	r2, [pc, #28]	; (8005654 <HAL_Init+0x40>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800563c:	2003      	movs	r0, #3
 800563e:	f000 f94f 	bl	80058e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005642:	2000      	movs	r0, #0
 8005644:	f000 f808 	bl	8005658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005648:	f7ff fd02 	bl	8005050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00

08005658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <HAL_InitTick+0x54>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_InitTick+0x58>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800566e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f967 	bl	800594a <HAL_SYSTICK_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e00e      	b.n	80056a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d80a      	bhi.n	80056a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568c:	2200      	movs	r2, #0
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	f000 f92f 	bl	80058f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005698:	4a06      	ldr	r2, [pc, #24]	; (80056b4 <HAL_InitTick+0x5c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200000e0 	.word	0x200000e0
 80056b0:	200000e8 	.word	0x200000e8
 80056b4:	200000e4 	.word	0x200000e4

080056b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_IncTick+0x20>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_IncTick+0x24>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4413      	add	r3, r2
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_IncTick+0x24>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	200000e8 	.word	0x200000e8
 80056dc:	200006e8 	.word	0x200006e8

080056e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return uwTick;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_GetTick+0x14>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200006e8 	.word	0x200006e8

080056f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7ff ffee 	bl	80056e0 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d005      	beq.n	800571e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_Delay+0x44>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800571e:	bf00      	nop
 8005720:	f7ff ffde 	bl	80056e0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d8f7      	bhi.n	8005720 <HAL_Delay+0x28>
  {
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200000e8 	.word	0x200000e8

08005740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <__NVIC_GetPriorityGrouping+0x18>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 0307 	and.w	r3, r3, #7
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db0b      	blt.n	80057ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4907      	ldr	r1, [pc, #28]	; (80057dc <__NVIC_EnableIRQ+0x38>)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2001      	movs	r0, #1
 80057c6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	e000e100 	.word	0xe000e100

080057e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db0a      	blt.n	800580a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	490c      	ldr	r1, [pc, #48]	; (800582c <__NVIC_SetPriority+0x4c>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	440b      	add	r3, r1
 8005804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005808:	e00a      	b.n	8005820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4908      	ldr	r1, [pc, #32]	; (8005830 <__NVIC_SetPriority+0x50>)
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3b04      	subs	r3, #4
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	440b      	add	r3, r1
 800581e:	761a      	strb	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000e100 	.word	0xe000e100
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f1c3 0307 	rsb	r3, r3, #7
 800584e:	2b04      	cmp	r3, #4
 8005850:	bf28      	it	cs
 8005852:	2304      	movcs	r3, #4
 8005854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3304      	adds	r3, #4
 800585a:	2b06      	cmp	r3, #6
 800585c:	d902      	bls.n	8005864 <NVIC_EncodePriority+0x30>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3b03      	subs	r3, #3
 8005862:	e000      	b.n	8005866 <NVIC_EncodePriority+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	401a      	ands	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800587c:	f04f 31ff 	mov.w	r1, #4294967295
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43d9      	mvns	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	4313      	orrs	r3, r2
         );
}
 800588e:	4618      	mov	r0, r3
 8005890:	3724      	adds	r7, #36	; 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058ac:	d301      	bcc.n	80058b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ae:	2301      	movs	r3, #1
 80058b0:	e00f      	b.n	80058d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b2:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <SysTick_Config+0x40>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ba:	210f      	movs	r1, #15
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	f7ff ff8e 	bl	80057e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <SysTick_Config+0x40>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <SysTick_Config+0x40>)
 80058cc:	2207      	movs	r2, #7
 80058ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000e010 	.word	0xe000e010

080058e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff29 	bl	8005740 <__NVIC_SetPriorityGrouping>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005908:	f7ff ff3e 	bl	8005788 <__NVIC_GetPriorityGrouping>
 800590c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6978      	ldr	r0, [r7, #20]
 8005914:	f7ff ff8e 	bl	8005834 <NVIC_EncodePriority>
 8005918:	4602      	mov	r2, r0
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff5d 	bl	80057e0 <__NVIC_SetPriority>
}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff31 	bl	80057a4 <__NVIC_EnableIRQ>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ffa2 	bl	800589c <SysTick_Config>
 8005958:	4603      	mov	r3, r0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005970:	f7ff feb6 	bl	80056e0 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e099      	b.n	8005ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059a0:	e00f      	b.n	80059c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059a2:	f7ff fe9d 	bl	80056e0 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d908      	bls.n	80059c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2203      	movs	r2, #3
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e078      	b.n	8005ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e8      	bne.n	80059a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4b38      	ldr	r3, [pc, #224]	; (8005abc <HAL_DMA_Init+0x158>)
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d107      	bne.n	8005a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	4313      	orrs	r3, r2
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0307 	bic.w	r3, r3, #7
 8005a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d117      	bne.n	8005a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb0f 	bl	800608c <DMA_CheckFifoParam>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2240      	movs	r2, #64	; 0x40
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a82:	2301      	movs	r3, #1
 8005a84:	e016      	b.n	8005ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fac6 	bl	8006020 <DMA_CalcBaseAndBitshift>
 8005a94:	4603      	mov	r3, r0
 8005a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9c:	223f      	movs	r2, #63	; 0x3f
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	f010803f 	.word	0xf010803f

08005ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_DMA_Start_IT+0x26>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e040      	b.n	8005b68 <HAL_DMA_Start_IT+0xa8>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d12f      	bne.n	8005b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa58 	bl	8005fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b18:	223f      	movs	r2, #63	; 0x3f
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0216 	orr.w	r2, r2, #22
 8005b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e005      	b.n	8005b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
 8005b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b7e:	f7ff fdaf 	bl	80056e0 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e052      	b.n	8005c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0216 	bic.w	r2, r2, #22
 8005bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_DMA_Abort+0x62>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0208 	bic.w	r2, r2, #8
 8005be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bf2:	e013      	b.n	8005c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bf4:	f7ff fd74 	bl	80056e0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d90c      	bls.n	8005c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e015      	b.n	8005c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e4      	bne.n	8005bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2e:	223f      	movs	r2, #63	; 0x3f
 8005c30:	409a      	lsls	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00c      	b.n	8005c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2205      	movs	r2, #5
 8005c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ca0:	4b8e      	ldr	r3, [pc, #568]	; (8005edc <HAL_DMA_IRQHandler+0x248>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a8e      	ldr	r2, [pc, #568]	; (8005ee0 <HAL_DMA_IRQHandler+0x24c>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01a      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0204 	bic.w	r2, r2, #4
 8005ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	2208      	movs	r2, #8
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d012      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	2204      	movs	r2, #4
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	f043 0204 	orr.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	2210      	movs	r2, #16
 8005d72:	409a      	lsls	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d043      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	2210      	movs	r2, #16
 8005d90:	409a      	lsls	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e01f      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
 8005dd4:	e016      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0208 	bic.w	r2, r2, #8
 8005df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	2220      	movs	r2, #32
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 808f 	beq.w	8005f34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8087 	beq.w	8005f34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d136      	bne.n	8005eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0216 	bic.w	r2, r2, #22
 8005e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x1da>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0208 	bic.w	r2, r2, #8
 8005e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	223f      	movs	r2, #63	; 0x3f
 8005e84:	409a      	lsls	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d07e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
        }
        return;
 8005eaa:	e079      	b.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	e02c      	b.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
 8005eda:	bf00      	nop
 8005edc:	200000e0 	.word	0x200000e0
 8005ee0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d023      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	e01e      	b.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10f      	bne.n	8005f24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0210 	bic.w	r2, r2, #16
 8005f12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d032      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d307      	bcc.n	8005f7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f2      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x2cc>
 8005f7a:	e000      	b.n	8005f7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
 8005f9e:	e000      	b.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005fa0:	bf00      	nop
    }
  }
}
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb6:	b2db      	uxtb	r3, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d108      	bne.n	8006004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006002:	e007      	b.n	8006014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	3b10      	subs	r3, #16
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <DMA_CalcBaseAndBitshift+0x64>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <DMA_CalcBaseAndBitshift+0x68>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d909      	bls.n	8006062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	659a      	str	r2, [r3, #88]	; 0x58
 8006060:	e007      	b.n	8006072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	aaaaaaab 	.word	0xaaaaaaab
 8006088:	0800d058 	.word	0x0800d058

0800608c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11f      	bne.n	80060e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d856      	bhi.n	800615a <DMA_CheckFifoParam+0xce>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <DMA_CheckFifoParam+0x28>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d7 	.word	0x080060d7
 80060bc:	080060c5 	.word	0x080060c5
 80060c0:	0800615b 	.word	0x0800615b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d046      	beq.n	800615e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d4:	e043      	b.n	800615e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060de:	d140      	bne.n	8006162 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e4:	e03d      	b.n	8006162 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	d121      	bne.n	8006134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d837      	bhi.n	8006166 <DMA_CheckFifoParam+0xda>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <DMA_CheckFifoParam+0x70>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006113 	.word	0x08006113
 8006104:	0800610d 	.word	0x0800610d
 8006108:	08006125 	.word	0x08006125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e030      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d025      	beq.n	800616a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006122:	e022      	b.n	800616a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800612c:	d11f      	bne.n	800616e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006132:	e01c      	b.n	800616e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d903      	bls.n	8006142 <DMA_CheckFifoParam+0xb6>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d003      	beq.n	8006148 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006140:	e018      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
      break;
 8006146:	e015      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e00b      	b.n	8006172 <DMA_CheckFifoParam+0xe6>
      break;
 800615a:	bf00      	nop
 800615c:	e00a      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;
 800615e:	bf00      	nop
 8006160:	e008      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;   
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
      break;
 8006172:	bf00      	nop
    }
  } 
  
  return status; 
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop

08006184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006192:	2300      	movs	r3, #0
 8006194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e159      	b.n	8006454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061a0:	2201      	movs	r2, #1
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	f040 8148 	bne.w	800644e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d005      	beq.n	80061d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d130      	bne.n	8006238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	2203      	movs	r2, #3
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4013      	ands	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800620c:	2201      	movs	r2, #1
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	091b      	lsrs	r3, r3, #4
 8006222:	f003 0201 	and.w	r2, r3, #1
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	2b03      	cmp	r3, #3
 8006242:	d017      	beq.n	8006274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	2203      	movs	r2, #3
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d123      	bne.n	80062c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	08da      	lsrs	r2, r3, #3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3208      	adds	r2, #8
 8006288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	220f      	movs	r2, #15
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	08da      	lsrs	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3208      	adds	r2, #8
 80062c2:	69b9      	ldr	r1, [r7, #24]
 80062c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	2203      	movs	r2, #3
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0203 	and.w	r2, r3, #3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80a2 	beq.w	800644e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	4b57      	ldr	r3, [pc, #348]	; (800646c <HAL_GPIO_Init+0x2e8>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	4a56      	ldr	r2, [pc, #344]	; (800646c <HAL_GPIO_Init+0x2e8>)
 8006314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006318:	6453      	str	r3, [r2, #68]	; 0x44
 800631a:	4b54      	ldr	r3, [pc, #336]	; (800646c <HAL_GPIO_Init+0x2e8>)
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006326:	4a52      	ldr	r2, [pc, #328]	; (8006470 <HAL_GPIO_Init+0x2ec>)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	3302      	adds	r3, #2
 800632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	220f      	movs	r2, #15
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43db      	mvns	r3, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4013      	ands	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a49      	ldr	r2, [pc, #292]	; (8006474 <HAL_GPIO_Init+0x2f0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d019      	beq.n	8006386 <HAL_GPIO_Init+0x202>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a48      	ldr	r2, [pc, #288]	; (8006478 <HAL_GPIO_Init+0x2f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_GPIO_Init+0x1fe>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a47      	ldr	r2, [pc, #284]	; (800647c <HAL_GPIO_Init+0x2f8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00d      	beq.n	800637e <HAL_GPIO_Init+0x1fa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a46      	ldr	r2, [pc, #280]	; (8006480 <HAL_GPIO_Init+0x2fc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <HAL_GPIO_Init+0x1f6>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a45      	ldr	r2, [pc, #276]	; (8006484 <HAL_GPIO_Init+0x300>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <HAL_GPIO_Init+0x1f2>
 8006372:	2304      	movs	r3, #4
 8006374:	e008      	b.n	8006388 <HAL_GPIO_Init+0x204>
 8006376:	2307      	movs	r3, #7
 8006378:	e006      	b.n	8006388 <HAL_GPIO_Init+0x204>
 800637a:	2303      	movs	r3, #3
 800637c:	e004      	b.n	8006388 <HAL_GPIO_Init+0x204>
 800637e:	2302      	movs	r3, #2
 8006380:	e002      	b.n	8006388 <HAL_GPIO_Init+0x204>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <HAL_GPIO_Init+0x204>
 8006386:	2300      	movs	r3, #0
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	f002 0203 	and.w	r2, r2, #3
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	4093      	lsls	r3, r2
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006398:	4935      	ldr	r1, [pc, #212]	; (8006470 <HAL_GPIO_Init+0x2ec>)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	3302      	adds	r3, #2
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063a6:	4b38      	ldr	r3, [pc, #224]	; (8006488 <HAL_GPIO_Init+0x304>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063ca:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <HAL_GPIO_Init+0x304>)
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_GPIO_Init+0x304>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	43db      	mvns	r3, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4013      	ands	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063f4:	4a24      	ldr	r2, [pc, #144]	; (8006488 <HAL_GPIO_Init+0x304>)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063fa:	4b23      	ldr	r3, [pc, #140]	; (8006488 <HAL_GPIO_Init+0x304>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800641e:	4a1a      	ldr	r2, [pc, #104]	; (8006488 <HAL_GPIO_Init+0x304>)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_GPIO_Init+0x304>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	43db      	mvns	r3, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006448:	4a0f      	ldr	r2, [pc, #60]	; (8006488 <HAL_GPIO_Init+0x304>)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	f67f aea2 	bls.w	80061a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40023800 	.word	0x40023800
 8006470:	40013800 	.word	0x40013800
 8006474:	40020000 	.word	0x40020000
 8006478:	40020400 	.word	0x40020400
 800647c:	40020800 	.word	0x40020800
 8006480:	40020c00 	.word	0x40020c00
 8006484:	40021000 	.word	0x40021000
 8006488:	40013c00 	.word	0x40013c00

0800648c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	4013      	ands	r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064a4:	2301      	movs	r3, #1
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e001      	b.n	80064ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	807b      	strh	r3, [r7, #2]
 80064c8:	4613      	mov	r3, r2
 80064ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064cc:	787b      	ldrb	r3, [r7, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064d2:	887a      	ldrh	r2, [r7, #2]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064d8:	e003      	b.n	80064e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064da:	887b      	ldrh	r3, [r7, #2]
 80064dc:	041a      	lsls	r2, r3, #16
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	619a      	str	r2, [r3, #24]
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006500:	887a      	ldrh	r2, [r7, #2]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4013      	ands	r3, r2
 8006506:	041a      	lsls	r2, r3, #16
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	43d9      	mvns	r1, r3
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	400b      	ands	r3, r1
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	619a      	str	r2, [r3, #24]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	4013      	ands	r3, r2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800653a:	4a05      	ldr	r2, [pc, #20]	; (8006550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fb fa54 	bl	80019f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40013c00 	.word	0x40013c00

08006554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e12b      	b.n	80067be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe fd90 	bl	80050a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2224      	movs	r2, #36	; 0x24
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065b8:	f002 ff26 	bl	8009408 <HAL_RCC_GetPCLK1Freq>
 80065bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4a81      	ldr	r2, [pc, #516]	; (80067c8 <HAL_I2C_Init+0x274>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d807      	bhi.n	80065d8 <HAL_I2C_Init+0x84>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a80      	ldr	r2, [pc, #512]	; (80067cc <HAL_I2C_Init+0x278>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bf94      	ite	ls
 80065d0:	2301      	movls	r3, #1
 80065d2:	2300      	movhi	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e006      	b.n	80065e6 <HAL_I2C_Init+0x92>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a7d      	ldr	r2, [pc, #500]	; (80067d0 <HAL_I2C_Init+0x27c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	bf94      	ite	ls
 80065e0:	2301      	movls	r3, #1
 80065e2:	2300      	movhi	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e0e7      	b.n	80067be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a78      	ldr	r2, [pc, #480]	; (80067d4 <HAL_I2C_Init+0x280>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	0c9b      	lsrs	r3, r3, #18
 80065f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <HAL_I2C_Init+0x274>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d802      	bhi.n	8006628 <HAL_I2C_Init+0xd4>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	3301      	adds	r3, #1
 8006626:	e009      	b.n	800663c <HAL_I2C_Init+0xe8>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800662e:	fb02 f303 	mul.w	r3, r2, r3
 8006632:	4a69      	ldr	r2, [pc, #420]	; (80067d8 <HAL_I2C_Init+0x284>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	099b      	lsrs	r3, r3, #6
 800663a:	3301      	adds	r3, #1
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	430b      	orrs	r3, r1
 8006642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800664e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	495c      	ldr	r1, [pc, #368]	; (80067c8 <HAL_I2C_Init+0x274>)
 8006658:	428b      	cmp	r3, r1
 800665a:	d819      	bhi.n	8006690 <HAL_I2C_Init+0x13c>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	1e59      	subs	r1, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	fbb1 f3f3 	udiv	r3, r1, r3
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006670:	400b      	ands	r3, r1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_I2C_Init+0x138>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1e59      	subs	r1, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	fbb1 f3f3 	udiv	r3, r1, r3
 8006684:	3301      	adds	r3, #1
 8006686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668a:	e051      	b.n	8006730 <HAL_I2C_Init+0x1dc>
 800668c:	2304      	movs	r3, #4
 800668e:	e04f      	b.n	8006730 <HAL_I2C_Init+0x1dc>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d111      	bne.n	80066bc <HAL_I2C_Init+0x168>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1e58      	subs	r0, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6859      	ldr	r1, [r3, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	440b      	add	r3, r1
 80066a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066aa:	3301      	adds	r3, #1
 80066ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	e012      	b.n	80066e2 <HAL_I2C_Init+0x18e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1e58      	subs	r0, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	0099      	lsls	r1, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_I2C_Init+0x196>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e022      	b.n	8006730 <HAL_I2C_Init+0x1dc>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10e      	bne.n	8006710 <HAL_I2C_Init+0x1bc>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1e58      	subs	r0, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	440b      	add	r3, r1
 8006700:	fbb0 f3f3 	udiv	r3, r0, r3
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	e00f      	b.n	8006730 <HAL_I2C_Init+0x1dc>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1e58      	subs	r0, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6859      	ldr	r1, [r3, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	0099      	lsls	r1, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	fbb0 f3f3 	udiv	r3, r0, r3
 8006726:	3301      	adds	r3, #1
 8006728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800672c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	6809      	ldr	r1, [r1, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800675e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6911      	ldr	r1, [r2, #16]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68d2      	ldr	r2, [r2, #12]
 800676a:	4311      	orrs	r1, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	430b      	orrs	r3, r1
 8006772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	000186a0 	.word	0x000186a0
 80067cc:	001e847f 	.word	0x001e847f
 80067d0:	003d08ff 	.word	0x003d08ff
 80067d4:	431bde83 	.word	0x431bde83
 80067d8:	10624dd3 	.word	0x10624dd3

080067dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	461a      	mov	r2, r3
 80067e8:	460b      	mov	r3, r1
 80067ea:	817b      	strh	r3, [r7, #10]
 80067ec:	4613      	mov	r3, r2
 80067ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067f0:	f7fe ff76 	bl	80056e0 <HAL_GetTick>
 80067f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b20      	cmp	r3, #32
 8006800:	f040 80e0 	bne.w	80069c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2319      	movs	r3, #25
 800680a:	2201      	movs	r2, #1
 800680c:	4970      	ldr	r1, [pc, #448]	; (80069d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f001 ffb6 	bl	8008780 <I2C_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
 800681c:	e0d3      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_I2C_Master_Transmit+0x50>
 8006828:	2302      	movs	r3, #2
 800682a:	e0cc      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b01      	cmp	r3, #1
 8006840:	d007      	beq.n	8006852 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2210      	movs	r2, #16
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	893a      	ldrh	r2, [r7, #8]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a50      	ldr	r2, [pc, #320]	; (80069d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006894:	8979      	ldrh	r1, [r7, #10]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6a3a      	ldr	r2, [r7, #32]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f001 fe46 	bl	800852c <I2C_MasterRequestWrite>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e08d      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80068c0:	e066      	b.n	8006990 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	6a39      	ldr	r1, [r7, #32]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f002 f830 	bl	800892c <I2C_WaitOnTXEFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d107      	bne.n	80068ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e06b      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b04      	cmp	r3, #4
 800692a:	d11b      	bne.n	8006964 <HAL_I2C_Master_Transmit+0x188>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d017      	beq.n	8006964 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	6a39      	ldr	r1, [r7, #32]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f002 f820 	bl	80089ae <I2C_WaitOnBTFFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00d      	beq.n	8006990 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b04      	cmp	r3, #4
 800697a:	d107      	bne.n	800698c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e01a      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006994:	2b00      	cmp	r3, #0
 8006996:	d194      	bne.n	80068c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	00100002 	.word	0x00100002
 80069d4:	ffff0000 	.word	0xffff0000

080069d8 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	817b      	strh	r3, [r7, #10]
 80069e8:	4613      	mov	r3, r2
 80069ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	f040 80a6 	bne.w	8006b4e <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d005      	beq.n	8006a1e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d002      	beq.n	8006a1e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d130      	bne.n	8006a80 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	4a4e      	ldr	r2, [pc, #312]	; (8006b60 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	0a1a      	lsrs	r2, r3, #8
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009a      	lsls	r2, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d116      	bne.n	8006a72 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e06e      	b.n	8006b50 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d0db      	beq.n	8006a38 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e060      	b.n	8006b50 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d007      	beq.n	8006ab4 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	893a      	ldrh	r2, [r7, #8]
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a3a      	ldr	r2, [r7, #32]
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006af6:	897a      	ldrh	r2, [r7, #10]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b11      	cmp	r3, #17
 8006b06:	d10c      	bne.n	8006b22 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b0e:	d003      	beq.n	8006b18 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b16:	d101      	bne.n	8006b1c <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b30:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006b48:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e000      	b.n	8006b50 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
  }
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	200000e0 	.word	0x200000e0
 8006b60:	14f8b589 	.word	0x14f8b589

08006b64 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	460b      	mov	r3, r1
 8006b72:	817b      	strh	r3, [r7, #10]
 8006b74:	4613      	mov	r3, r2
 8006b76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006b84:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	f040 80da 	bne.w	8006d48 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba2:	d005      	beq.n	8006bb0 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d002      	beq.n	8006bb0 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d130      	bne.n	8006c12 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bb0:	4b69      	ldr	r3, [pc, #420]	; (8006d58 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	4a69      	ldr	r2, [pc, #420]	; (8006d5c <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	0a1a      	lsrs	r2, r3, #8
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009a      	lsls	r2, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0a2      	b.n	8006d4a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d0db      	beq.n	8006bca <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e094      	b.n	8006d4a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d007      	beq.n	8006c46 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c54:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2222      	movs	r2, #34	; 0x22
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2210      	movs	r2, #16
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	893a      	ldrh	r2, [r7, #8]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006c88:	897a      	ldrh	r2, [r7, #10]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d126      	bne.n	8006cec <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d002      	beq.n	8006caa <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d120      	bne.n	8006cec <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b12      	cmp	r3, #18
 8006cae:	d114      	bne.n	8006cda <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbe:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cce:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd6:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006cd8:	e010      	b.n	8006cfc <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce8:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006cea:	e007      	b.n	8006cfc <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cfa:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b12      	cmp	r3, #18
 8006d00:	d10c      	bne.n	8006d1c <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d08:	d003      	beq.n	8006d12 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d10:	d101      	bne.n	8006d16 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d107      	bne.n	8006d2c <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e000      	b.n	8006d4a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3724      	adds	r7, #36	; 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	200000e0 	.word	0x200000e0
 8006d5c:	14f8b589 	.word	0x14f8b589

08006d60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d003      	beq.n	8006d98 <HAL_I2C_EV_IRQHandler+0x38>
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	f040 80c1 	bne.w	8006f1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10d      	bne.n	8006dce <HAL_I2C_EV_IRQHandler+0x6e>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006db8:	d003      	beq.n	8006dc2 <HAL_I2C_EV_IRQHandler+0x62>
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dc0:	d101      	bne.n	8006dc6 <HAL_I2C_EV_IRQHandler+0x66>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <HAL_I2C_EV_IRQHandler+0x68>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f000 8132 	beq.w	8007032 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0x92>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	0a5b      	lsrs	r3, r3, #9
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fe84 	bl	8008af2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd83 	bl	80078f6 <I2C_Master_SB>
 8006df0:	e092      	b.n	8006f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_I2C_EV_IRQHandler+0xb2>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	0a5b      	lsrs	r3, r3, #9
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fdf9 	bl	8007a02 <I2C_Master_ADD10>
 8006e10:	e082      	b.n	8006f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0xd2>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	0a5b      	lsrs	r3, r3, #9
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fe13 	bl	8007a56 <I2C_Master_ADDR>
 8006e30:	e072      	b.n	8006f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	089b      	lsrs	r3, r3, #2
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d03b      	beq.n	8006eb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4c:	f000 80f3 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	09db      	lsrs	r3, r3, #7
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00f      	beq.n	8006e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	0a9b      	lsrs	r3, r3, #10
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	089b      	lsrs	r3, r3, #2
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9f3 	bl	8007260 <I2C_MasterTransmit_TXE>
 8006e7a:	e04d      	b.n	8006f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80d6 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	0a5b      	lsrs	r3, r3, #9
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80cf 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b21      	cmp	r3, #33	; 0x21
 8006e9c:	d103      	bne.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7a 	bl	8007398 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ea4:	e0c7      	b.n	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	f040 80c4 	bne.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fae8 	bl	8007484 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eb4:	e0bf      	b.n	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec4:	f000 80b7 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00f      	beq.n	8006ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	0a9b      	lsrs	r3, r3, #10
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fb5d 	bl	80075ac <I2C_MasterReceive_RXNE>
 8006ef2:	e011      	b.n	8006f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 809a 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0a5b      	lsrs	r3, r3, #9
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8093 	beq.w	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc06 	bl	8007722 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f16:	e08e      	b.n	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f18:	e08d      	b.n	8007036 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e007      	b.n	8006f3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_I2C_EV_IRQHandler+0x20e>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	0a5b      	lsrs	r3, r3, #9
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f64:	69b9      	ldr	r1, [r7, #24]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 ffc4 	bl	8007ef4 <I2C_Slave_ADDR>
 8006f6c:	e066      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_I2C_EV_IRQHandler+0x22e>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	0a5b      	lsrs	r3, r3, #9
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fffe 	bl	8007f88 <I2C_Slave_STOPF>
 8006f8c:	e056      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b21      	cmp	r3, #33	; 0x21
 8006f92:	d002      	beq.n	8006f9a <HAL_I2C_EV_IRQHandler+0x23a>
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	2b29      	cmp	r3, #41	; 0x29
 8006f98:	d125      	bne.n	8006fe6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	09db      	lsrs	r3, r3, #7
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00f      	beq.n	8006fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	0a9b      	lsrs	r3, r3, #10
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	089b      	lsrs	r3, r3, #2
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 feda 	bl	8007d78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fc4:	e039      	b.n	800703a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d033      	beq.n	800703a <HAL_I2C_EV_IRQHandler+0x2da>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d02d      	beq.n	800703a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 ff07 	bl	8007df2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fe4:	e029      	b.n	800703a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	099b      	lsrs	r3, r3, #6
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00f      	beq.n	8007012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	0a9b      	lsrs	r3, r3, #10
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	089b      	lsrs	r3, r3, #2
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 ff12 	bl	8007e34 <I2C_SlaveReceive_RXNE>
 8007010:	e014      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	0a5b      	lsrs	r3, r3, #9
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 ff40 	bl	8007eb0 <I2C_SlaveReceive_BTF>
 8007030:	e004      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007032:	bf00      	nop
 8007034:	e002      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007036:	bf00      	nop
 8007038:	e000      	b.n	800703c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800703a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b08a      	sub	sp, #40	; 0x28
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <HAL_I2C_ER_IRQHandler+0x4e>
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800708e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	0a5b      	lsrs	r3, r3, #9
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00e      	beq.n	80070ba <HAL_I2C_ER_IRQHandler+0x78>
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f043 0302 	orr.w	r3, r3, #2
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80070b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	0a9b      	lsrs	r3, r3, #10
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d03f      	beq.n	8007146 <HAL_I2C_ER_IRQHandler+0x104>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d039      	beq.n	8007146 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80070d2:	7efb      	ldrb	r3, [r7, #27]
 80070d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80070ec:	7ebb      	ldrb	r3, [r7, #26]
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d112      	bne.n	8007118 <HAL_I2C_ER_IRQHandler+0xd6>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <HAL_I2C_ER_IRQHandler+0xd6>
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b21      	cmp	r3, #33	; 0x21
 80070fc:	d008      	beq.n	8007110 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80070fe:	7cfb      	ldrb	r3, [r7, #19]
 8007100:	2b29      	cmp	r3, #41	; 0x29
 8007102:	d005      	beq.n	8007110 <HAL_I2C_ER_IRQHandler+0xce>
 8007104:	7cfb      	ldrb	r3, [r7, #19]
 8007106:	2b28      	cmp	r3, #40	; 0x28
 8007108:	d106      	bne.n	8007118 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b21      	cmp	r3, #33	; 0x21
 800710e:	d103      	bne.n	8007118 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f869 	bl	80081e8 <I2C_Slave_AF>
 8007116:	e016      	b.n	8007146 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007120:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800712a:	7efb      	ldrb	r3, [r7, #27]
 800712c:	2b10      	cmp	r3, #16
 800712e:	d002      	beq.n	8007136 <HAL_I2C_ER_IRQHandler+0xf4>
 8007130:	7efb      	ldrb	r3, [r7, #27]
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d107      	bne.n	8007146 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007144:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	0adb      	lsrs	r3, r3, #11
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00e      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0x12e>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	f043 0308 	orr.w	r3, r3, #8
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800716e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 f8a0 	bl	80082c8 <I2C_ITError>
  }
}
 8007188:	bf00      	nop
 800718a:	3728      	adds	r7, #40	; 0x28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
 80071ec:	4613      	mov	r3, r2
 80071ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007276:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007282:	2b00      	cmp	r3, #0
 8007284:	d150      	bne.n	8007328 <I2C_MasterTransmit_TXE+0xc8>
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b21      	cmp	r3, #33	; 0x21
 800728a:	d14d      	bne.n	8007328 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b08      	cmp	r3, #8
 8007290:	d01d      	beq.n	80072ce <I2C_MasterTransmit_TXE+0x6e>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b20      	cmp	r3, #32
 8007296:	d01a      	beq.n	80072ce <I2C_MasterTransmit_TXE+0x6e>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800729e:	d016      	beq.n	80072ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2211      	movs	r2, #17
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff62 	bl	8007190 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072cc:	e060      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d107      	bne.n	8007318 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff7d 	bl	8007210 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007316:	e03b      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff35 	bl	8007190 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007326:	e033      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2b21      	cmp	r3, #33	; 0x21
 800732c:	d005      	beq.n	800733a <I2C_MasterTransmit_TXE+0xda>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d12d      	bne.n	8007390 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b22      	cmp	r3, #34	; 0x22
 8007338:	d12a      	bne.n	8007390 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007354:	e01c      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d103      	bne.n	800736a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f88e 	bl	8007484 <I2C_MemoryTransmit_TXE_BTF>
}
 8007368:	e012      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800738e:	e7ff      	b.n	8007390 <I2C_MasterTransmit_TXE+0x130>
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b21      	cmp	r3, #33	; 0x21
 80073b0:	d164      	bne.n	800747c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80073e0:	e04c      	b.n	800747c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d01d      	beq.n	8007424 <I2C_MasterTransmit_BTF+0x8c>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d01a      	beq.n	8007424 <I2C_MasterTransmit_BTF+0x8c>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073f4:	d016      	beq.n	8007424 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007404:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2211      	movs	r2, #17
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff feb7 	bl	8007190 <HAL_I2C_MasterTxCpltCallback>
}
 8007422:	e02b      	b.n	800747c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007432:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007442:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	d107      	bne.n	800746e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fed2 	bl	8007210 <HAL_I2C_MemTxCpltCallback>
}
 800746c:	e006      	b.n	800747c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fe8a 	bl	8007190 <HAL_I2C_MasterTxCpltCallback>
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007492:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11d      	bne.n	80074d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d10b      	bne.n	80074bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b4:	1c9a      	adds	r2, r3, #2
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80074ba:	e073      	b.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	121b      	asrs	r3, r3, #8
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074d6:	e065      	b.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10b      	bne.n	80074f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074f6:	e055      	b.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d151      	bne.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b22      	cmp	r3, #34	; 0x22
 8007504:	d10d      	bne.n	8007522 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007514:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007520:	e040      	b.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d015      	beq.n	8007558 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b21      	cmp	r3, #33	; 0x21
 8007530:	d112      	bne.n	8007558 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007556:	e025      	b.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d120      	bne.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b21      	cmp	r3, #33	; 0x21
 8007566:	d11d      	bne.n	80075a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007576:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007586:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fe36 	bl	8007210 <HAL_I2C_MemTxCpltCallback>
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b22      	cmp	r3, #34	; 0x22
 80075be:	f040 80ac 	bne.w	800771a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d921      	bls.n	8007614 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	f040 808c 	bne.w	800771a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007610:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007612:	e082      	b.n	800771a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	2b02      	cmp	r3, #2
 800761a:	d075      	beq.n	8007708 <I2C_MasterReceive_RXNE+0x15c>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d002      	beq.n	8007628 <I2C_MasterReceive_RXNE+0x7c>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d16f      	bne.n	8007708 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fa01 	bl	8008a30 <I2C_WaitOnSTOPRequestThroughIT>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d142      	bne.n	80076ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007642:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007652:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d10a      	bne.n	80076a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fdc1 	bl	8007224 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076a2:	e03a      	b.n	800771a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2212      	movs	r2, #18
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fd76 	bl	80071a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076b8:	e02f      	b.n	800771a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fd99 	bl	8007238 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007706:	e008      	b.n	800771a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007716:	605a      	str	r2, [r3, #4]
}
 8007718:	e7ff      	b.n	800771a <I2C_MasterReceive_RXNE+0x16e>
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b04      	cmp	r3, #4
 8007738:	d11b      	bne.n	8007772 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007748:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007770:	e0bd      	b.n	80078ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b03      	cmp	r3, #3
 800777a:	d129      	bne.n	80077d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d00a      	beq.n	80077a8 <I2C_MasterReceive_BTF+0x86>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d007      	beq.n	80077a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691a      	ldr	r2, [r3, #16]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80077ce:	e08e      	b.n	80078ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d176      	bne.n	80078c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d002      	beq.n	80077e6 <I2C_MasterReceive_BTF+0xc4>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d108      	bne.n	80077f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e019      	b.n	800782c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d002      	beq.n	8007804 <I2C_MasterReceive_BTF+0xe2>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d108      	bne.n	8007816 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e00a      	b.n	800782c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b10      	cmp	r3, #16
 800781a:	d007      	beq.n	800782c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800782a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691a      	ldr	r2, [r3, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007886:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d10a      	bne.n	80078b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fcba 	bl	8007224 <HAL_I2C_MemRxCpltCallback>
}
 80078b0:	e01d      	b.n	80078ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2212      	movs	r2, #18
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fc6f 	bl	80071a4 <HAL_I2C_MasterRxCpltCallback>
}
 80078c6:	e012      	b.n	80078ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d117      	bne.n	800793a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007916:	b2db      	uxtb	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007922:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007924:	e067      	b.n	80079f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	611a      	str	r2, [r3, #16]
}
 8007938:	e05d      	b.n	80079f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007942:	d133      	bne.n	80079ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b21      	cmp	r3, #33	; 0x21
 800794e:	d109      	bne.n	8007964 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007960:	611a      	str	r2, [r3, #16]
 8007962:	e008      	b.n	8007976 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <I2C_Master_SB+0x92>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d108      	bne.n	800799a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d032      	beq.n	80079f6 <I2C_Master_SB+0x100>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02d      	beq.n	80079f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a8:	605a      	str	r2, [r3, #4]
}
 80079aa:	e024      	b.n	80079f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10e      	bne.n	80079d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	11db      	asrs	r3, r3, #7
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0306 	and.w	r3, r3, #6
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f063 030f 	orn	r3, r3, #15
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	611a      	str	r2, [r3, #16]
}
 80079d0:	e011      	b.n	80079f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d10d      	bne.n	80079f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	b29b      	uxth	r3, r3
 80079e0:	11db      	asrs	r3, r3, #7
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0306 	and.w	r3, r3, #6
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f063 030e 	orn	r3, r3, #14
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	611a      	str	r2, [r3, #16]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <I2C_Master_ADD10+0x26>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d108      	bne.n	8007a3a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00c      	beq.n	8007a4a <I2C_Master_ADD10+0x48>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a48:	605a      	str	r2, [r3, #4]
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b091      	sub	sp, #68	; 0x44
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b22      	cmp	r3, #34	; 0x22
 8007a7e:	f040 8169 	bne.w	8007d54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10f      	bne.n	8007aaa <I2C_Master_ADDR+0x54>
 8007a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a8e:	2b40      	cmp	r3, #64	; 0x40
 8007a90:	d10b      	bne.n	8007aaa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a92:	2300      	movs	r3, #0
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	e160      	b.n	8007d6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11d      	bne.n	8007aee <I2C_Master_ADDR+0x98>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007aba:	d118      	bne.n	8007aee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007abc:	2300      	movs	r3, #0
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ae0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	651a      	str	r2, [r3, #80]	; 0x50
 8007aec:	e13e      	b.n	8007d6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d113      	bne.n	8007b20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af8:	2300      	movs	r3, #0
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e115      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	f040 808a 	bne.w	8007c40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b32:	d137      	bne.n	8007ba4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b52:	d113      	bne.n	8007b7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b64:	2300      	movs	r3, #0
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	e0e7      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	623b      	str	r3, [r7, #32]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	623b      	str	r3, [r7, #32]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	623b      	str	r3, [r7, #32]
 8007b90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e0d3      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b08      	cmp	r3, #8
 8007ba8:	d02e      	beq.n	8007c08 <I2C_Master_ADDR+0x1b2>
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d02b      	beq.n	8007c08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	2b12      	cmp	r3, #18
 8007bb4:	d102      	bne.n	8007bbc <I2C_Master_ADDR+0x166>
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d125      	bne.n	8007c08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d00e      	beq.n	8007be0 <I2C_Master_ADDR+0x18a>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d00b      	beq.n	8007be0 <I2C_Master_ADDR+0x18a>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	2b10      	cmp	r3, #16
 8007bcc:	d008      	beq.n	8007be0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e007      	b.n	8007bf0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	e0a1      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e085      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d14d      	bne.n	8007ce6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d016      	beq.n	8007c7e <I2C_Master_ADDR+0x228>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d013      	beq.n	8007c7e <I2C_Master_ADDR+0x228>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d010      	beq.n	8007c7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e007      	b.n	8007c8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9c:	d117      	bne.n	8007cce <I2C_Master_ADDR+0x278>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ca4:	d00b      	beq.n	8007cbe <I2C_Master_ADDR+0x268>
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d008      	beq.n	8007cbe <I2C_Master_ADDR+0x268>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d005      	beq.n	8007cbe <I2C_Master_ADDR+0x268>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d002      	beq.n	8007cbe <I2C_Master_ADDR+0x268>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d107      	bne.n	8007cce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ccc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	e032      	b.n	8007d4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cf4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d04:	d117      	bne.n	8007d36 <I2C_Master_ADDR+0x2e0>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d0c:	d00b      	beq.n	8007d26 <I2C_Master_ADDR+0x2d0>
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d008      	beq.n	8007d26 <I2C_Master_ADDR+0x2d0>
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d005      	beq.n	8007d26 <I2C_Master_ADDR+0x2d0>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d002      	beq.n	8007d26 <I2C_Master_ADDR+0x2d0>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d107      	bne.n	8007d36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007d52:	e00b      	b.n	8007d6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
}
 8007d6a:	e7ff      	b.n	8007d6c <I2C_Master_ADDR+0x316>
 8007d6c:	bf00      	nop
 8007d6e:	3744      	adds	r7, #68	; 0x44
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d02b      	beq.n	8007dea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	781a      	ldrb	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d114      	bne.n	8007dea <I2C_SlaveTransmit_TXE+0x72>
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b29      	cmp	r3, #41	; 0x29
 8007dc4:	d111      	bne.n	8007dea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2221      	movs	r2, #33	; 0x21
 8007dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2228      	movs	r2, #40	; 0x28
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff f9e7 	bl	80071b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d011      	beq.n	8007e28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	781a      	ldrb	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d02c      	beq.n	8007ea8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d114      	bne.n	8007ea8 <I2C_SlaveReceive_RXNE+0x74>
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b2a      	cmp	r3, #42	; 0x2a
 8007e82:	d111      	bne.n	8007ea8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2222      	movs	r2, #34	; 0x22
 8007e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2228      	movs	r2, #40	; 0x28
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff f992 	bl	80071cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d012      	beq.n	8007ee8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f0e:	2b28      	cmp	r3, #40	; 0x28
 8007f10:	d127      	bne.n	8007f62 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	09db      	lsrs	r3, r3, #7
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	81bb      	strh	r3, [r7, #12]
 8007f44:	e002      	b.n	8007f4c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007f54:	89ba      	ldrh	r2, [r7, #12]
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff f940 	bl	80071e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007f60:	e00e      	b.n	8007f80 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	60bb      	str	r3, [r7, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	60bb      	str	r3, [r7, #8]
 8007f76:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	60bb      	str	r3, [r7, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0201 	orr.w	r2, r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fd4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe4:	d172      	bne.n	80080cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b22      	cmp	r3, #34	; 0x22
 8007fea:	d002      	beq.n	8007ff2 <I2C_Slave_STOPF+0x6a>
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff0:	d135      	bne.n	800805e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f043 0204 	orr.w	r2, r3, #4
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008024:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd ffbc 	bl	8005fa8 <HAL_DMA_GetState>
 8008030:	4603      	mov	r3, r0
 8008032:	2b01      	cmp	r3, #1
 8008034:	d049      	beq.n	80080ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	4a69      	ldr	r2, [pc, #420]	; (80081e0 <I2C_Slave_STOPF+0x258>)
 800803c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	4618      	mov	r0, r3
 8008044:	f7fd fe04 	bl	8005c50 <HAL_DMA_Abort_IT>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d03d      	beq.n	80080ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800805c:	e035      	b.n	80080ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f043 0204 	orr.w	r2, r3, #4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008090:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd ff86 	bl	8005fa8 <HAL_DMA_GetState>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d014      	beq.n	80080cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	4a4e      	ldr	r2, [pc, #312]	; (80081e0 <I2C_Slave_STOPF+0x258>)
 80080a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fdce 	bl	8005c50 <HAL_DMA_Abort_IT>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	e000      	b.n	80080cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d03e      	beq.n	8008154 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d112      	bne.n	800810a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d112      	bne.n	800813e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	f043 0204 	orr.w	r2, r3, #4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8b3 	bl	80082c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008162:	e039      	b.n	80081d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	2b2a      	cmp	r3, #42	; 0x2a
 8008168:	d109      	bne.n	800817e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2228      	movs	r2, #40	; 0x28
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff f827 	bl	80071cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b28      	cmp	r3, #40	; 0x28
 8008188:	d111      	bne.n	80081ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <I2C_Slave_STOPF+0x25c>)
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff f828 	bl	80071fc <HAL_I2C_ListenCpltCallback>
}
 80081ac:	e014      	b.n	80081d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	2b22      	cmp	r3, #34	; 0x22
 80081b4:	d002      	beq.n	80081bc <I2C_Slave_STOPF+0x234>
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	2b22      	cmp	r3, #34	; 0x22
 80081ba:	d10d      	bne.n	80081d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fe fffa 	bl	80071cc <HAL_I2C_SlaveRxCpltCallback>
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08008631 	.word	0x08008631
 80081e4:	ffff0000 	.word	0xffff0000

080081e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d002      	beq.n	800820a <I2C_Slave_AF+0x22>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b20      	cmp	r3, #32
 8008208:	d129      	bne.n	800825e <I2C_Slave_AF+0x76>
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b28      	cmp	r3, #40	; 0x28
 800820e:	d126      	bne.n	800825e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a2c      	ldr	r2, [pc, #176]	; (80082c4 <I2C_Slave_AF+0xdc>)
 8008214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008224:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800822e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fe ffd0 	bl	80071fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800825c:	e02e      	b.n	80082bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	2b21      	cmp	r3, #33	; 0x21
 8008262:	d126      	bne.n	80082b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <I2C_Slave_AF+0xdc>)
 8008268:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2221      	movs	r2, #33	; 0x21
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800828e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008298:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fe ff84 	bl	80071b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80082b0:	e004      	b.n	80082bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082ba:	615a      	str	r2, [r3, #20]
}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	ffff0000 	.word	0xffff0000

080082c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	d002      	beq.n	80082ec <I2C_ITError+0x24>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b40      	cmp	r3, #64	; 0x40
 80082ea:	d10a      	bne.n	8008302 <I2C_ITError+0x3a>
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b22      	cmp	r3, #34	; 0x22
 80082f0:	d107      	bne.n	8008302 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008300:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008308:	2b28      	cmp	r3, #40	; 0x28
 800830a:	d107      	bne.n	800831c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2228      	movs	r2, #40	; 0x28
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800831a:	e015      	b.n	8008348 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d00a      	beq.n	8008342 <I2C_ITError+0x7a>
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b60      	cmp	r3, #96	; 0x60
 8008330:	d007      	beq.n	8008342 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008356:	d162      	bne.n	800841e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008366:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b01      	cmp	r3, #1
 8008374:	d020      	beq.n	80083b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	4a6a      	ldr	r2, [pc, #424]	; (8008524 <I2C_ITError+0x25c>)
 800837c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fc64 	bl	8005c50 <HAL_DMA_Abort_IT>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8089 	beq.w	80084a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	e074      	b.n	80084a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	4a59      	ldr	r2, [pc, #356]	; (8008524 <I2C_ITError+0x25c>)
 80083be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fd fc43 	bl	8005c50 <HAL_DMA_Abort_IT>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d068      	beq.n	80084a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d10b      	bne.n	80083f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	b2d2      	uxtb	r2, r2
 80083ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	e041      	b.n	80084a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b60      	cmp	r3, #96	; 0x60
 8008428:	d125      	bne.n	8008476 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d10b      	bne.n	800845e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe feec 	bl	800724c <HAL_I2C_AbortCpltCallback>
 8008474:	e015      	b.n	80084a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d10b      	bne.n	800849c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe fecb 	bl	8007238 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10e      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d113      	bne.n	800851c <I2C_ITError+0x254>
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b28      	cmp	r3, #40	; 0x28
 80084f8:	d110      	bne.n	800851c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <I2C_ITError+0x260>)
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe fe70 	bl	80071fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	08008631 	.word	0x08008631
 8008528:	ffff0000 	.word	0xffff0000

0800852c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	460b      	mov	r3, r1
 800853a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b08      	cmp	r3, #8
 8008546:	d006      	beq.n	8008556 <I2C_MasterRequestWrite+0x2a>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d003      	beq.n	8008556 <I2C_MasterRequestWrite+0x2a>
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008554:	d108      	bne.n	8008568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	e00b      	b.n	8008580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	2b12      	cmp	r3, #18
 800856e:	d107      	bne.n	8008580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800857e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f8f7 	bl	8008780 <I2C_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00d      	beq.n	80085b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a6:	d103      	bne.n	80085b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e035      	b.n	8008620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085bc:	d108      	bne.n	80085d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085be:	897b      	ldrh	r3, [r7, #10]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085cc:	611a      	str	r2, [r3, #16]
 80085ce:	e01b      	b.n	8008608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80085d0:	897b      	ldrh	r3, [r7, #10]
 80085d2:	11db      	asrs	r3, r3, #7
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0306 	and.w	r3, r3, #6
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f063 030f 	orn	r3, r3, #15
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	490e      	ldr	r1, [pc, #56]	; (8008628 <I2C_MasterRequestWrite+0xfc>)
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f91d 	bl	800882e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e010      	b.n	8008620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80085fe:	897b      	ldrh	r3, [r7, #10]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4907      	ldr	r1, [pc, #28]	; (800862c <I2C_MasterRequestWrite+0x100>)
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 f90d 	bl	800882e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	00010008 	.word	0x00010008
 800862c:	00010002 	.word	0x00010002

08008630 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008648:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800864a:	4b4b      	ldr	r3, [pc, #300]	; (8008778 <I2C_DMAAbort+0x148>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	08db      	lsrs	r3, r3, #3
 8008650:	4a4a      	ldr	r2, [pc, #296]	; (800877c <I2C_DMAAbort+0x14c>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	0a1a      	lsrs	r2, r3, #8
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	00da      	lsls	r2, r3, #3
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008676:	e00a      	b.n	800868e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3b01      	subs	r3, #1
 800867c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868c:	d0ea      	beq.n	8008664 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	2200      	movs	r2, #0
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	2200      	movs	r2, #0
 80086ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	2200      	movs	r2, #0
 80086d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	2200      	movs	r2, #0
 80086e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0201 	bic.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b60      	cmp	r3, #96	; 0x60
 80086fe:	d10e      	bne.n	800871e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2200      	movs	r2, #0
 8008714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008716:	6978      	ldr	r0, [r7, #20]
 8008718:	f7fe fd98 	bl	800724c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800871c:	e027      	b.n	800876e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800871e:	7cfb      	ldrb	r3, [r7, #19]
 8008720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008724:	2b28      	cmp	r3, #40	; 0x28
 8008726:	d117      	bne.n	8008758 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008746:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2200      	movs	r2, #0
 800874c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2228      	movs	r2, #40	; 0x28
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008756:	e007      	b.n	8008768 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008768:	6978      	ldr	r0, [r7, #20]
 800876a:	f7fe fd65 	bl	8007238 <HAL_I2C_ErrorCallback>
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200000e0 	.word	0x200000e0
 800877c:	14f8b589 	.word	0x14f8b589

08008780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008790:	e025      	b.n	80087de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d021      	beq.n	80087de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879a:	f7fc ffa1 	bl	80056e0 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d302      	bcc.n	80087b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d116      	bne.n	80087de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f043 0220 	orr.w	r2, r3, #32
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e023      	b.n	8008826 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	0c1b      	lsrs	r3, r3, #16
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10d      	bne.n	8008804 <I2C_WaitOnFlagUntilTimeout+0x84>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	43da      	mvns	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	e00c      	b.n	800881e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	43da      	mvns	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4013      	ands	r3, r2
 8008810:	b29b      	uxth	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	bf0c      	ite	eq
 8008816:	2301      	moveq	r3, #1
 8008818:	2300      	movne	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	429a      	cmp	r2, r3
 8008822:	d0b6      	beq.n	8008792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800883c:	e051      	b.n	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800884c:	d123      	bne.n	8008896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800885c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008866:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	f043 0204 	orr.w	r2, r3, #4
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e046      	b.n	8008924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d021      	beq.n	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7fc ff1f 	bl	80056e0 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d116      	bne.n	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	f043 0220 	orr.w	r2, r3, #32
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e020      	b.n	8008924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10c      	bne.n	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	43da      	mvns	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	4013      	ands	r3, r2
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bf14      	ite	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	2300      	moveq	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	e00b      	b.n	800891e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	43da      	mvns	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4013      	ands	r3, r2
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d18d      	bne.n	800883e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008938:	e02d      	b.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f8aa 	bl	8008a94 <I2C_IsAcknowledgeFailed>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e02d      	b.n	80089a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d021      	beq.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008952:	f7fc fec5 	bl	80056e0 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d116      	bne.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	f043 0220 	orr.w	r2, r3, #32
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e007      	b.n	80089a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d1ca      	bne.n	800893a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089ba:	e02d      	b.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f869 	bl	8008a94 <I2C_IsAcknowledgeFailed>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e02d      	b.n	8008a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d021      	beq.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d4:	f7fc fe84 	bl	80056e0 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d302      	bcc.n	80089ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d116      	bne.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f043 0220 	orr.w	r2, r3, #32
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e007      	b.n	8008a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d1ca      	bne.n	80089bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a3c:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	08db      	lsrs	r3, r3, #3
 8008a42:	4a13      	ldr	r2, [pc, #76]	; (8008a90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a44:	fba2 2303 	umull	r2, r3, r2, r3
 8008a48:	0a1a      	lsrs	r2, r3, #8
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d107      	bne.n	8008a6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e008      	b.n	8008a80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7c:	d0e9      	beq.n	8008a52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	200000e0 	.word	0x200000e0
 8008a90:	14f8b589 	.word	0x14f8b589

08008a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aaa:	d11b      	bne.n	8008ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	f043 0204 	orr.w	r2, r3, #4
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b02:	d103      	bne.n	8008b0c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b0a:	e007      	b.n	8008b1c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b14:	d102      	bne.n	8008b1c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2208      	movs	r2, #8
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e267      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d075      	beq.n	8008c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b46:	4b88      	ldr	r3, [pc, #544]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 030c 	and.w	r3, r3, #12
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d00c      	beq.n	8008b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b52:	4b85      	ldr	r3, [pc, #532]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d112      	bne.n	8008b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b5e:	4b82      	ldr	r3, [pc, #520]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b6a:	d10b      	bne.n	8008b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b6c:	4b7e      	ldr	r3, [pc, #504]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d05b      	beq.n	8008c30 <HAL_RCC_OscConfig+0x108>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d157      	bne.n	8008c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e242      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8c:	d106      	bne.n	8008b9c <HAL_RCC_OscConfig+0x74>
 8008b8e:	4b76      	ldr	r3, [pc, #472]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a75      	ldr	r2, [pc, #468]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e01d      	b.n	8008bd8 <HAL_RCC_OscConfig+0xb0>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x98>
 8008ba6:	4b70      	ldr	r3, [pc, #448]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a6f      	ldr	r2, [pc, #444]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	4b6d      	ldr	r3, [pc, #436]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a6c      	ldr	r2, [pc, #432]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	e00b      	b.n	8008bd8 <HAL_RCC_OscConfig+0xb0>
 8008bc0:	4b69      	ldr	r3, [pc, #420]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a68      	ldr	r2, [pc, #416]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	4b66      	ldr	r3, [pc, #408]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a65      	ldr	r2, [pc, #404]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d013      	beq.n	8008c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be0:	f7fc fd7e 	bl	80056e0 <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008be8:	f7fc fd7a 	bl	80056e0 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b64      	cmp	r3, #100	; 0x64
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e207      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfa:	4b5b      	ldr	r3, [pc, #364]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f0      	beq.n	8008be8 <HAL_RCC_OscConfig+0xc0>
 8008c06:	e014      	b.n	8008c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c08:	f7fc fd6a 	bl	80056e0 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c10:	f7fc fd66 	bl	80056e0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b64      	cmp	r3, #100	; 0x64
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e1f3      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c22:	4b51      	ldr	r3, [pc, #324]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f0      	bne.n	8008c10 <HAL_RCC_OscConfig+0xe8>
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d063      	beq.n	8008d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c3e:	4b4a      	ldr	r3, [pc, #296]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 030c 	and.w	r3, r3, #12
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c4a:	4b47      	ldr	r3, [pc, #284]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d11c      	bne.n	8008c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c56:	4b44      	ldr	r3, [pc, #272]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d116      	bne.n	8008c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c62:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_RCC_OscConfig+0x152>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d001      	beq.n	8008c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e1c7      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c7a:	4b3b      	ldr	r3, [pc, #236]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4937      	ldr	r1, [pc, #220]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c8e:	e03a      	b.n	8008d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d020      	beq.n	8008cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c98:	4b34      	ldr	r3, [pc, #208]	; (8008d6c <HAL_RCC_OscConfig+0x244>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c9e:	f7fc fd1f 	bl	80056e0 <HAL_GetTick>
 8008ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	e008      	b.n	8008cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ca6:	f7fc fd1b 	bl	80056e0 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d901      	bls.n	8008cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e1a8      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb8:	4b2b      	ldr	r3, [pc, #172]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0f0      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc4:	4b28      	ldr	r3, [pc, #160]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4925      	ldr	r1, [pc, #148]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	e015      	b.n	8008d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cda:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <HAL_RCC_OscConfig+0x244>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce0:	f7fc fcfe 	bl	80056e0 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ce8:	f7fc fcfa 	bl	80056e0 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e187      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d036      	beq.n	8008d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <HAL_RCC_OscConfig+0x248>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d20:	f7fc fcde 	bl	80056e0 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d28:	f7fc fcda 	bl	80056e0 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e167      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d3a:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <HAL_RCC_OscConfig+0x240>)
 8008d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x200>
 8008d46:	e01b      	b.n	8008d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <HAL_RCC_OscConfig+0x248>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d4e:	f7fc fcc7 	bl	80056e0 <HAL_GetTick>
 8008d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d54:	e00e      	b.n	8008d74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d56:	f7fc fcc3 	bl	80056e0 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d907      	bls.n	8008d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e150      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	42470000 	.word	0x42470000
 8008d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d74:	4b88      	ldr	r3, [pc, #544]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ea      	bne.n	8008d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8097 	beq.w	8008ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d92:	4b81      	ldr	r3, [pc, #516]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10f      	bne.n	8008dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	4b7d      	ldr	r3, [pc, #500]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	4a7c      	ldr	r2, [pc, #496]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dac:	6413      	str	r3, [r2, #64]	; 0x40
 8008dae:	4b7a      	ldr	r3, [pc, #488]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dbe:	4b77      	ldr	r3, [pc, #476]	; (8008f9c <HAL_RCC_OscConfig+0x474>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d118      	bne.n	8008dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dca:	4b74      	ldr	r3, [pc, #464]	; (8008f9c <HAL_RCC_OscConfig+0x474>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a73      	ldr	r2, [pc, #460]	; (8008f9c <HAL_RCC_OscConfig+0x474>)
 8008dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dd6:	f7fc fc83 	bl	80056e0 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ddc:	e008      	b.n	8008df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dde:	f7fc fc7f 	bl	80056e0 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e10c      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df0:	4b6a      	ldr	r3, [pc, #424]	; (8008f9c <HAL_RCC_OscConfig+0x474>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0f0      	beq.n	8008dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d106      	bne.n	8008e12 <HAL_RCC_OscConfig+0x2ea>
 8008e04:	4b64      	ldr	r3, [pc, #400]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	4a63      	ldr	r2, [pc, #396]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e10:	e01c      	b.n	8008e4c <HAL_RCC_OscConfig+0x324>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d10c      	bne.n	8008e34 <HAL_RCC_OscConfig+0x30c>
 8008e1a:	4b5f      	ldr	r3, [pc, #380]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	4a5e      	ldr	r2, [pc, #376]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e20:	f043 0304 	orr.w	r3, r3, #4
 8008e24:	6713      	str	r3, [r2, #112]	; 0x70
 8008e26:	4b5c      	ldr	r3, [pc, #368]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	4a5b      	ldr	r2, [pc, #364]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	6713      	str	r3, [r2, #112]	; 0x70
 8008e32:	e00b      	b.n	8008e4c <HAL_RCC_OscConfig+0x324>
 8008e34:	4b58      	ldr	r3, [pc, #352]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e38:	4a57      	ldr	r2, [pc, #348]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e3a:	f023 0301 	bic.w	r3, r3, #1
 8008e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e40:	4b55      	ldr	r3, [pc, #340]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e44:	4a54      	ldr	r2, [pc, #336]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e46:	f023 0304 	bic.w	r3, r3, #4
 8008e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d015      	beq.n	8008e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e54:	f7fc fc44 	bl	80056e0 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5a:	e00a      	b.n	8008e72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e5c:	f7fc fc40 	bl	80056e0 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e0cb      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e72:	4b49      	ldr	r3, [pc, #292]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0ee      	beq.n	8008e5c <HAL_RCC_OscConfig+0x334>
 8008e7e:	e014      	b.n	8008eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e80:	f7fc fc2e 	bl	80056e0 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e86:	e00a      	b.n	8008e9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e88:	f7fc fc2a 	bl	80056e0 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e0b5      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e9e:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1ee      	bne.n	8008e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d105      	bne.n	8008ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80a1 	beq.w	8009008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ec6:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 030c 	and.w	r3, r3, #12
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d05c      	beq.n	8008f8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d141      	bne.n	8008f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eda:	4b31      	ldr	r3, [pc, #196]	; (8008fa0 <HAL_RCC_OscConfig+0x478>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee0:	f7fc fbfe 	bl	80056e0 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ee8:	f7fc fbfa 	bl	80056e0 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e087      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008efa:	4b27      	ldr	r3, [pc, #156]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f0      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	061b      	lsls	r3, r3, #24
 8008f2a:	491b      	ldr	r1, [pc, #108]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f30:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <HAL_RCC_OscConfig+0x478>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f36:	f7fc fbd3 	bl	80056e0 <HAL_GetTick>
 8008f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f3e:	f7fc fbcf 	bl	80056e0 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e05c      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f50:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x416>
 8008f5c:	e054      	b.n	8009008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f5e:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <HAL_RCC_OscConfig+0x478>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f64:	f7fc fbbc 	bl	80056e0 <HAL_GetTick>
 8008f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f6c:	f7fc fbb8 	bl	80056e0 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e045      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCC_OscConfig+0x470>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f0      	bne.n	8008f6c <HAL_RCC_OscConfig+0x444>
 8008f8a:	e03d      	b.n	8009008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e038      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	40007000 	.word	0x40007000
 8008fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fa4:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <HAL_RCC_OscConfig+0x4ec>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d028      	beq.n	8009004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d121      	bne.n	8009004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d11a      	bne.n	8009004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d111      	bne.n	8009004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	3b01      	subs	r3, #1
 8008fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009000:	429a      	cmp	r2, r3
 8009002:	d001      	beq.n	8009008 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40023800 	.word	0x40023800

08009018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0cc      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800902c:	4b68      	ldr	r3, [pc, #416]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d90c      	bls.n	8009054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800903a:	4b65      	ldr	r3, [pc, #404]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009042:	4b63      	ldr	r3, [pc, #396]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d001      	beq.n	8009054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e0b8      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d020      	beq.n	80090a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800906c:	4b59      	ldr	r3, [pc, #356]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	4a58      	ldr	r2, [pc, #352]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009084:	4b53      	ldr	r3, [pc, #332]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4a52      	ldr	r2, [pc, #328]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800908e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009090:	4b50      	ldr	r3, [pc, #320]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	494d      	ldr	r1, [pc, #308]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d044      	beq.n	8009138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d107      	bne.n	80090c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090b6:	4b47      	ldr	r3, [pc, #284]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d119      	bne.n	80090f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e07f      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d003      	beq.n	80090d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d107      	bne.n	80090e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090d6:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e06f      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e6:	4b3b      	ldr	r3, [pc, #236]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e067      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090f6:	4b37      	ldr	r3, [pc, #220]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f023 0203 	bic.w	r2, r3, #3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4934      	ldr	r1, [pc, #208]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009104:	4313      	orrs	r3, r2
 8009106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009108:	f7fc faea 	bl	80056e0 <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800910e:	e00a      	b.n	8009126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009110:	f7fc fae6 	bl	80056e0 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	f241 3288 	movw	r2, #5000	; 0x1388
 800911e:	4293      	cmp	r3, r2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e04f      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009126:	4b2b      	ldr	r3, [pc, #172]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 020c 	and.w	r2, r3, #12
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	429a      	cmp	r2, r3
 8009136:	d1eb      	bne.n	8009110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0307 	and.w	r3, r3, #7
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d20c      	bcs.n	8009160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009146:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800914e:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d001      	beq.n	8009160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e032      	b.n	80091c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	4916      	ldr	r1, [pc, #88]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	4313      	orrs	r3, r2
 800917c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800918a:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	490e      	ldr	r1, [pc, #56]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 800919a:	4313      	orrs	r3, r2
 800919c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800919e:	f000 f821 	bl	80091e4 <HAL_RCC_GetSysClockFreq>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	091b      	lsrs	r3, r3, #4
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	490a      	ldr	r1, [pc, #40]	; (80091d8 <HAL_RCC_ClockConfig+0x1c0>)
 80091b0:	5ccb      	ldrb	r3, [r1, r3]
 80091b2:	fa22 f303 	lsr.w	r3, r2, r3
 80091b6:	4a09      	ldr	r2, [pc, #36]	; (80091dc <HAL_RCC_ClockConfig+0x1c4>)
 80091b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <HAL_RCC_ClockConfig+0x1c8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fc fa4a 	bl	8005658 <HAL_InitTick>

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40023c00 	.word	0x40023c00
 80091d4:	40023800 	.word	0x40023800
 80091d8:	0800d040 	.word	0x0800d040
 80091dc:	200000e0 	.word	0x200000e0
 80091e0:	200000e4 	.word	0x200000e4

080091e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e8:	b094      	sub	sp, #80	; 0x50
 80091ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	647b      	str	r3, [r7, #68]	; 0x44
 80091f0:	2300      	movs	r3, #0
 80091f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f4:	2300      	movs	r3, #0
 80091f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091fc:	4b79      	ldr	r3, [pc, #484]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 030c 	and.w	r3, r3, #12
 8009204:	2b08      	cmp	r3, #8
 8009206:	d00d      	beq.n	8009224 <HAL_RCC_GetSysClockFreq+0x40>
 8009208:	2b08      	cmp	r3, #8
 800920a:	f200 80e1 	bhi.w	80093d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_RCC_GetSysClockFreq+0x34>
 8009212:	2b04      	cmp	r3, #4
 8009214:	d003      	beq.n	800921e <HAL_RCC_GetSysClockFreq+0x3a>
 8009216:	e0db      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009218:	4b73      	ldr	r3, [pc, #460]	; (80093e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800921a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800921c:	e0db      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800921e:	4b73      	ldr	r3, [pc, #460]	; (80093ec <HAL_RCC_GetSysClockFreq+0x208>)
 8009220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009222:	e0d8      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009224:	4b6f      	ldr	r3, [pc, #444]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800922c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800922e:	4b6d      	ldr	r3, [pc, #436]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d063      	beq.n	8009302 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800923a:	4b6a      	ldr	r3, [pc, #424]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	099b      	lsrs	r3, r3, #6
 8009240:	2200      	movs	r2, #0
 8009242:	63bb      	str	r3, [r7, #56]	; 0x38
 8009244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924c:	633b      	str	r3, [r7, #48]	; 0x30
 800924e:	2300      	movs	r3, #0
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
 8009252:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009256:	4622      	mov	r2, r4
 8009258:	462b      	mov	r3, r5
 800925a:	f04f 0000 	mov.w	r0, #0
 800925e:	f04f 0100 	mov.w	r1, #0
 8009262:	0159      	lsls	r1, r3, #5
 8009264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009268:	0150      	lsls	r0, r2, #5
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4621      	mov	r1, r4
 8009270:	1a51      	subs	r1, r2, r1
 8009272:	6139      	str	r1, [r7, #16]
 8009274:	4629      	mov	r1, r5
 8009276:	eb63 0301 	sbc.w	r3, r3, r1
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009288:	4659      	mov	r1, fp
 800928a:	018b      	lsls	r3, r1, #6
 800928c:	4651      	mov	r1, sl
 800928e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009292:	4651      	mov	r1, sl
 8009294:	018a      	lsls	r2, r1, #6
 8009296:	4651      	mov	r1, sl
 8009298:	ebb2 0801 	subs.w	r8, r2, r1
 800929c:	4659      	mov	r1, fp
 800929e:	eb63 0901 	sbc.w	r9, r3, r1
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092b6:	4690      	mov	r8, r2
 80092b8:	4699      	mov	r9, r3
 80092ba:	4623      	mov	r3, r4
 80092bc:	eb18 0303 	adds.w	r3, r8, r3
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	462b      	mov	r3, r5
 80092c4:	eb49 0303 	adc.w	r3, r9, r3
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80092d6:	4629      	mov	r1, r5
 80092d8:	024b      	lsls	r3, r1, #9
 80092da:	4621      	mov	r1, r4
 80092dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092e0:	4621      	mov	r1, r4
 80092e2:	024a      	lsls	r2, r1, #9
 80092e4:	4610      	mov	r0, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ea:	2200      	movs	r2, #0
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092f4:	f7f7 fc4c 	bl	8000b90 <__aeabi_uldivmod>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4613      	mov	r3, r2
 80092fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009300:	e058      	b.n	80093b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009302:	4b38      	ldr	r3, [pc, #224]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	099b      	lsrs	r3, r3, #6
 8009308:	2200      	movs	r2, #0
 800930a:	4618      	mov	r0, r3
 800930c:	4611      	mov	r1, r2
 800930e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009312:	623b      	str	r3, [r7, #32]
 8009314:	2300      	movs	r3, #0
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
 8009318:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	f04f 0000 	mov.w	r0, #0
 8009324:	f04f 0100 	mov.w	r1, #0
 8009328:	0159      	lsls	r1, r3, #5
 800932a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800932e:	0150      	lsls	r0, r2, #5
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4641      	mov	r1, r8
 8009336:	ebb2 0a01 	subs.w	sl, r2, r1
 800933a:	4649      	mov	r1, r9
 800933c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800934c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009350:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009354:	ebb2 040a 	subs.w	r4, r2, sl
 8009358:	eb63 050b 	sbc.w	r5, r3, fp
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	00eb      	lsls	r3, r5, #3
 8009366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800936a:	00e2      	lsls	r2, r4, #3
 800936c:	4614      	mov	r4, r2
 800936e:	461d      	mov	r5, r3
 8009370:	4643      	mov	r3, r8
 8009372:	18e3      	adds	r3, r4, r3
 8009374:	603b      	str	r3, [r7, #0]
 8009376:	464b      	mov	r3, r9
 8009378:	eb45 0303 	adc.w	r3, r5, r3
 800937c:	607b      	str	r3, [r7, #4]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800938a:	4629      	mov	r1, r5
 800938c:	028b      	lsls	r3, r1, #10
 800938e:	4621      	mov	r1, r4
 8009390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009394:	4621      	mov	r1, r4
 8009396:	028a      	lsls	r2, r1, #10
 8009398:	4610      	mov	r0, r2
 800939a:	4619      	mov	r1, r3
 800939c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939e:	2200      	movs	r2, #0
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	61fa      	str	r2, [r7, #28]
 80093a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093a8:	f7f7 fbf2 	bl	8000b90 <__aeabi_uldivmod>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4613      	mov	r3, r2
 80093b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093b4:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	3301      	adds	r3, #1
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80093c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093ce:	e002      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80093d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3750      	adds	r7, #80	; 0x50
 80093dc:	46bd      	mov	sp, r7
 80093de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093e2:	bf00      	nop
 80093e4:	40023800 	.word	0x40023800
 80093e8:	00f42400 	.word	0x00f42400
 80093ec:	007a1200 	.word	0x007a1200

080093f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <HAL_RCC_GetHCLKFreq+0x14>)
 80093f6:	681b      	ldr	r3, [r3, #0]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	200000e0 	.word	0x200000e0

08009408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800940c:	f7ff fff0 	bl	80093f0 <HAL_RCC_GetHCLKFreq>
 8009410:	4602      	mov	r2, r0
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	0a9b      	lsrs	r3, r3, #10
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	4903      	ldr	r1, [pc, #12]	; (800942c <HAL_RCC_GetPCLK1Freq+0x24>)
 800941e:	5ccb      	ldrb	r3, [r1, r3]
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009424:	4618      	mov	r0, r3
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40023800 	.word	0x40023800
 800942c:	0800d050 	.word	0x0800d050

08009430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009434:	f7ff ffdc 	bl	80093f0 <HAL_RCC_GetHCLKFreq>
 8009438:	4602      	mov	r2, r0
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	0b5b      	lsrs	r3, r3, #13
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	4903      	ldr	r1, [pc, #12]	; (8009454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009446:	5ccb      	ldrb	r3, [r1, r3]
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40023800 	.word	0x40023800
 8009454:	0800d050 	.word	0x0800d050

08009458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e041      	b.n	80094ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d106      	bne.n	8009484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fb fe66 	bl	8005150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f000 fde2 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d001      	beq.n	8009510 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e03c      	b.n	800958a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <HAL_TIM_Base_Start+0xa0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d018      	beq.n	8009554 <HAL_TIM_Base_Start+0x5c>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952a:	d013      	beq.n	8009554 <HAL_TIM_Base_Start+0x5c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1a      	ldr	r2, [pc, #104]	; (800959c <HAL_TIM_Base_Start+0xa4>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00e      	beq.n	8009554 <HAL_TIM_Base_Start+0x5c>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <HAL_TIM_Base_Start+0xa8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d009      	beq.n	8009554 <HAL_TIM_Base_Start+0x5c>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <HAL_TIM_Base_Start+0xac>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d004      	beq.n	8009554 <HAL_TIM_Base_Start+0x5c>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <HAL_TIM_Base_Start+0xb0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d111      	bne.n	8009578 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b06      	cmp	r3, #6
 8009564:	d010      	beq.n	8009588 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0201 	orr.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009576:	e007      	b.n	8009588 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40010000 	.word	0x40010000
 800959c:	40000400 	.word	0x40000400
 80095a0:	40000800 	.word	0x40000800
 80095a4:	40000c00 	.word	0x40000c00
 80095a8:	40014000 	.word	0x40014000

080095ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d001      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e044      	b.n	800964e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0201 	orr.w	r2, r2, #1
 80095da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1e      	ldr	r2, [pc, #120]	; (800965c <HAL_TIM_Base_Start_IT+0xb0>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d018      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x6c>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ee:	d013      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x6c>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1a      	ldr	r2, [pc, #104]	; (8009660 <HAL_TIM_Base_Start_IT+0xb4>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00e      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x6c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a19      	ldr	r2, [pc, #100]	; (8009664 <HAL_TIM_Base_Start_IT+0xb8>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d009      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x6c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a17      	ldr	r2, [pc, #92]	; (8009668 <HAL_TIM_Base_Start_IT+0xbc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x6c>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a16      	ldr	r2, [pc, #88]	; (800966c <HAL_TIM_Base_Start_IT+0xc0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d111      	bne.n	800963c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b06      	cmp	r3, #6
 8009628:	d010      	beq.n	800964c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0201 	orr.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963a:	e007      	b.n	800964c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40010000 	.word	0x40010000
 8009660:	40000400 	.word	0x40000400
 8009664:	40000800 	.word	0x40000800
 8009668:	40000c00 	.word	0x40000c00
 800966c:	40014000 	.word	0x40014000

08009670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e041      	b.n	8009706 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f839 	bl	800970e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3304      	adds	r3, #4
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	f000 fcd6 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <HAL_TIM_PWM_Start+0x24>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b01      	cmp	r3, #1
 800973e:	bf14      	ite	ne
 8009740:	2301      	movne	r3, #1
 8009742:	2300      	moveq	r3, #0
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e022      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d109      	bne.n	8009762 <HAL_TIM_PWM_Start+0x3e>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b01      	cmp	r3, #1
 8009758:	bf14      	ite	ne
 800975a:	2301      	movne	r3, #1
 800975c:	2300      	moveq	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	e015      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b08      	cmp	r3, #8
 8009766:	d109      	bne.n	800977c <HAL_TIM_PWM_Start+0x58>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b01      	cmp	r3, #1
 8009772:	bf14      	ite	ne
 8009774:	2301      	movne	r3, #1
 8009776:	2300      	moveq	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	e008      	b.n	800978e <HAL_TIM_PWM_Start+0x6a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	bf14      	ite	ne
 8009788:	2301      	movne	r3, #1
 800978a:	2300      	moveq	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e068      	b.n	8009868 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Start+0x82>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a4:	e013      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d104      	bne.n	80097b6 <HAL_TIM_PWM_Start+0x92>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b4:	e00b      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d104      	bne.n	80097c6 <HAL_TIM_PWM_Start+0xa2>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c4:	e003      	b.n	80097ce <HAL_TIM_PWM_Start+0xaa>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fee8 	bl	800a5ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a23      	ldr	r2, [pc, #140]	; (8009870 <HAL_TIM_PWM_Start+0x14c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d107      	bne.n	80097f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1d      	ldr	r2, [pc, #116]	; (8009870 <HAL_TIM_PWM_Start+0x14c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d018      	beq.n	8009832 <HAL_TIM_PWM_Start+0x10e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009808:	d013      	beq.n	8009832 <HAL_TIM_PWM_Start+0x10e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a19      	ldr	r2, [pc, #100]	; (8009874 <HAL_TIM_PWM_Start+0x150>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00e      	beq.n	8009832 <HAL_TIM_PWM_Start+0x10e>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a17      	ldr	r2, [pc, #92]	; (8009878 <HAL_TIM_PWM_Start+0x154>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d009      	beq.n	8009832 <HAL_TIM_PWM_Start+0x10e>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a16      	ldr	r2, [pc, #88]	; (800987c <HAL_TIM_PWM_Start+0x158>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d004      	beq.n	8009832 <HAL_TIM_PWM_Start+0x10e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a14      	ldr	r2, [pc, #80]	; (8009880 <HAL_TIM_PWM_Start+0x15c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d111      	bne.n	8009856 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b06      	cmp	r3, #6
 8009842:	d010      	beq.n	8009866 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0201 	orr.w	r2, r2, #1
 8009852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009854:	e007      	b.n	8009866 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40010000 	.word	0x40010000
 8009874:	40000400 	.word	0x40000400
 8009878:	40000800 	.word	0x40000800
 800987c:	40000c00 	.word	0x40000c00
 8009880:	40014000 	.word	0x40014000

08009884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e097      	b.n	80099c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fb fcb3 	bl	8005218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6812      	ldr	r2, [r2, #0]
 80098c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098c8:	f023 0307 	bic.w	r3, r3, #7
 80098cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f000 fbc1 	bl	800a060 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009906:	f023 0303 	bic.w	r3, r3, #3
 800990a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	021b      	lsls	r3, r3, #8
 8009916:	4313      	orrs	r3, r2
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009924:	f023 030c 	bic.w	r3, r3, #12
 8009928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	4313      	orrs	r3, r2
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	011a      	lsls	r2, r3, #4
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	031b      	lsls	r3, r3, #12
 8009954:	4313      	orrs	r3, r2
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4313      	orrs	r3, r2
 800995a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800996a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	4313      	orrs	r3, r2
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d110      	bne.n	8009a22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d102      	bne.n	8009a0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a06:	7b7b      	ldrb	r3, [r7, #13]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d001      	beq.n	8009a10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e069      	b.n	8009ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a20:	e031      	b.n	8009a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d110      	bne.n	8009a4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d102      	bne.n	8009a34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a2e:	7b3b      	ldrb	r3, [r7, #12]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d001      	beq.n	8009a38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e055      	b.n	8009ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a48:	e01d      	b.n	8009a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d108      	bne.n	8009a62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d105      	bne.n	8009a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a56:	7b7b      	ldrb	r3, [r7, #13]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d102      	bne.n	8009a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a5c:	7b3b      	ldrb	r3, [r7, #12]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d001      	beq.n	8009a66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e03e      	b.n	8009ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2202      	movs	r2, #2
 8009a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2202      	movs	r2, #2
 8009a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_TIM_Encoder_Start+0xc4>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d008      	beq.n	8009aa4 <HAL_TIM_Encoder_Start+0xd4>
 8009a92:	e00f      	b.n	8009ab4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fd85 	bl	800a5ac <TIM_CCxChannelCmd>
      break;
 8009aa2:	e016      	b.n	8009ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	2104      	movs	r1, #4
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fd7d 	bl	800a5ac <TIM_CCxChannelCmd>
      break;
 8009ab2:	e00e      	b.n	8009ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fd75 	bl	800a5ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2104      	movs	r1, #4
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fd6e 	bl	800a5ac <TIM_CCxChannelCmd>
      break;
 8009ad0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0201 	orr.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d122      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d11b      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0202 	mvn.w	r2, #2
 8009b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa77 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009b34:	e005      	b.n	8009b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa69 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa7a 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d122      	bne.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d11b      	bne.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0204 	mvn.w	r2, #4
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa4d 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa3f 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fa50 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d122      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d11b      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f06f 0208 	mvn.w	r2, #8
 8009bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa23 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009bdc:	e005      	b.n	8009bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa15 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa26 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0310 	and.w	r3, r3, #16
 8009bfa:	2b10      	cmp	r3, #16
 8009bfc:	d122      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0310 	and.w	r3, r3, #16
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d11b      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f06f 0210 	mvn.w	r2, #16
 8009c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9f9 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009c30:	e005      	b.n	8009c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f9eb 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f9fc 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d10e      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d107      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0201 	mvn.w	r2, #1
 8009c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7f7 ff64 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7a:	2b80      	cmp	r3, #128	; 0x80
 8009c7c:	d10e      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c88:	2b80      	cmp	r3, #128	; 0x80
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fd78 	bl	800a78c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb4:	2b40      	cmp	r3, #64	; 0x40
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9c1 	bl	800a04a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d107      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0220 	mvn.w	r2, #32
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fd42 	bl	800a778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d16:	2302      	movs	r3, #2
 8009d18:	e0ae      	b.n	8009e78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	f200 809f 	bhi.w	8009e68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d2a:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d65 	.word	0x08009d65
 8009d34:	08009e69 	.word	0x08009e69
 8009d38:	08009e69 	.word	0x08009e69
 8009d3c:	08009e69 	.word	0x08009e69
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009e69 	.word	0x08009e69
 8009d48:	08009e69 	.word	0x08009e69
 8009d4c:	08009e69 	.word	0x08009e69
 8009d50:	08009de7 	.word	0x08009de7
 8009d54:	08009e69 	.word	0x08009e69
 8009d58:	08009e69 	.word	0x08009e69
 8009d5c:	08009e69 	.word	0x08009e69
 8009d60:	08009e27 	.word	0x08009e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f9f8 	bl	800a160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0208 	orr.w	r2, r2, #8
 8009d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0204 	bic.w	r2, r2, #4
 8009d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6999      	ldr	r1, [r3, #24]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	619a      	str	r2, [r3, #24]
      break;
 8009da2:	e064      	b.n	8009e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fa3e 	bl	800a22c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6999      	ldr	r1, [r3, #24]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	021a      	lsls	r2, r3, #8
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	619a      	str	r2, [r3, #24]
      break;
 8009de4:	e043      	b.n	8009e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fa89 	bl	800a304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69da      	ldr	r2, [r3, #28]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0208 	orr.w	r2, r2, #8
 8009e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0204 	bic.w	r2, r2, #4
 8009e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69d9      	ldr	r1, [r3, #28]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	61da      	str	r2, [r3, #28]
      break;
 8009e24:	e023      	b.n	8009e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fad3 	bl	800a3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	021a      	lsls	r2, r3, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	61da      	str	r2, [r3, #28]
      break;
 8009e66:	e002      	b.n	8009e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e0b4      	b.n	800a006 <HAL_TIM_ConfigClockSource+0x186>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ed4:	d03e      	beq.n	8009f54 <HAL_TIM_ConfigClockSource+0xd4>
 8009ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eda:	f200 8087 	bhi.w	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee2:	f000 8086 	beq.w	8009ff2 <HAL_TIM_ConfigClockSource+0x172>
 8009ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eea:	d87f      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009eec:	2b70      	cmp	r3, #112	; 0x70
 8009eee:	d01a      	beq.n	8009f26 <HAL_TIM_ConfigClockSource+0xa6>
 8009ef0:	2b70      	cmp	r3, #112	; 0x70
 8009ef2:	d87b      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009ef4:	2b60      	cmp	r3, #96	; 0x60
 8009ef6:	d050      	beq.n	8009f9a <HAL_TIM_ConfigClockSource+0x11a>
 8009ef8:	2b60      	cmp	r3, #96	; 0x60
 8009efa:	d877      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009efc:	2b50      	cmp	r3, #80	; 0x50
 8009efe:	d03c      	beq.n	8009f7a <HAL_TIM_ConfigClockSource+0xfa>
 8009f00:	2b50      	cmp	r3, #80	; 0x50
 8009f02:	d873      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009f04:	2b40      	cmp	r3, #64	; 0x40
 8009f06:	d058      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x13a>
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	d86f      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009f0c:	2b30      	cmp	r3, #48	; 0x30
 8009f0e:	d064      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0x15a>
 8009f10:	2b30      	cmp	r3, #48	; 0x30
 8009f12:	d86b      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d060      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0x15a>
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	d867      	bhi.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d05c      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0x15a>
 8009f20:	2b10      	cmp	r3, #16
 8009f22:	d05a      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0x15a>
 8009f24:	e062      	b.n	8009fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6899      	ldr	r1, [r3, #8]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f000 fb19 	bl	800a56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	609a      	str	r2, [r3, #8]
      break;
 8009f52:	e04f      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	6899      	ldr	r1, [r3, #8]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f000 fb02 	bl	800a56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f76:	609a      	str	r2, [r3, #8]
      break;
 8009f78:	e03c      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6859      	ldr	r1, [r3, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f000 fa76 	bl	800a478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2150      	movs	r1, #80	; 0x50
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 facf 	bl	800a536 <TIM_ITRx_SetConfig>
      break;
 8009f98:	e02c      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	6859      	ldr	r1, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f000 fa95 	bl	800a4d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2160      	movs	r1, #96	; 0x60
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fabf 	bl	800a536 <TIM_ITRx_SetConfig>
      break;
 8009fb8:	e01c      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	6859      	ldr	r1, [r3, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f000 fa56 	bl	800a478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2140      	movs	r1, #64	; 0x40
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 faaf 	bl	800a536 <TIM_ITRx_SetConfig>
      break;
 8009fd8:	e00c      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f000 faa6 	bl	800a536 <TIM_ITRx_SetConfig>
      break;
 8009fea:	e003      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff0:	e000      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a004:	7bfb      	ldrb	r3, [r7, #15]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a34      	ldr	r2, [pc, #208]	; (800a144 <TIM_Base_SetConfig+0xe4>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00f      	beq.n	800a098 <TIM_Base_SetConfig+0x38>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07e:	d00b      	beq.n	800a098 <TIM_Base_SetConfig+0x38>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a31      	ldr	r2, [pc, #196]	; (800a148 <TIM_Base_SetConfig+0xe8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d007      	beq.n	800a098 <TIM_Base_SetConfig+0x38>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a30      	ldr	r2, [pc, #192]	; (800a14c <TIM_Base_SetConfig+0xec>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_Base_SetConfig+0x38>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a2f      	ldr	r2, [pc, #188]	; (800a150 <TIM_Base_SetConfig+0xf0>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d108      	bne.n	800a0aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a25      	ldr	r2, [pc, #148]	; (800a144 <TIM_Base_SetConfig+0xe4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d01b      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b8:	d017      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a22      	ldr	r2, [pc, #136]	; (800a148 <TIM_Base_SetConfig+0xe8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d013      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a21      	ldr	r2, [pc, #132]	; (800a14c <TIM_Base_SetConfig+0xec>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d00f      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a20      	ldr	r2, [pc, #128]	; (800a150 <TIM_Base_SetConfig+0xf0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d00b      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a1f      	ldr	r2, [pc, #124]	; (800a154 <TIM_Base_SetConfig+0xf4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d007      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a1e      	ldr	r2, [pc, #120]	; (800a158 <TIM_Base_SetConfig+0xf8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <TIM_Base_SetConfig+0x8a>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <TIM_Base_SetConfig+0xfc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d108      	bne.n	800a0fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a08      	ldr	r2, [pc, #32]	; (800a144 <TIM_Base_SetConfig+0xe4>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d103      	bne.n	800a130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	615a      	str	r2, [r3, #20]
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40010000 	.word	0x40010000
 800a148:	40000400 	.word	0x40000400
 800a14c:	40000800 	.word	0x40000800
 800a150:	40000c00 	.word	0x40000c00
 800a154:	40014000 	.word	0x40014000
 800a158:	40014400 	.word	0x40014400
 800a15c:	40014800 	.word	0x40014800

0800a160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	f023 0201 	bic.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0302 	bic.w	r3, r3, #2
 800a1a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	; (800a228 <TIM_OC1_SetConfig+0xc8>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d10c      	bne.n	800a1d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f023 0308 	bic.w	r3, r3, #8
 800a1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f023 0304 	bic.w	r3, r3, #4
 800a1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a13      	ldr	r2, [pc, #76]	; (800a228 <TIM_OC1_SetConfig+0xc8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d111      	bne.n	800a202 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	621a      	str	r2, [r3, #32]
}
 800a21c:	bf00      	nop
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	40010000 	.word	0x40010000

0800a22c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0210 	bic.w	r2, r3, #16
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f023 0320 	bic.w	r3, r3, #32
 800a276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	011b      	lsls	r3, r3, #4
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a1e      	ldr	r2, [pc, #120]	; (800a300 <TIM_OC2_SetConfig+0xd4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d10d      	bne.n	800a2a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <TIM_OC2_SetConfig+0xd4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d113      	bne.n	800a2d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	621a      	str	r2, [r3, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40010000 	.word	0x40010000

0800a304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <TIM_OC3_SetConfig+0xd0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d10d      	bne.n	800a37e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a37c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a14      	ldr	r2, [pc, #80]	; (800a3d4 <TIM_OC3_SetConfig+0xd0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d113      	bne.n	800a3ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a38c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	621a      	str	r2, [r3, #32]
}
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	40010000 	.word	0x40010000

0800a3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	021b      	lsls	r3, r3, #8
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	031b      	lsls	r3, r3, #12
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a10      	ldr	r2, [pc, #64]	; (800a474 <TIM_OC4_SetConfig+0x9c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d109      	bne.n	800a44c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	019b      	lsls	r3, r3, #6
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40010000 	.word	0x40010000

0800a478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	f023 0201 	bic.w	r2, r3, #1
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f023 030a 	bic.w	r3, r3, #10
 800a4b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	621a      	str	r2, [r3, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b087      	sub	sp, #28
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	f023 0210 	bic.w	r2, r3, #16
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	031b      	lsls	r3, r3, #12
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	4313      	orrs	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	621a      	str	r2, [r3, #32]
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	f043 0307 	orr.w	r3, r3, #7
 800a558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	609a      	str	r2, [r3, #8]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	021a      	lsls	r2, r3, #8
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	431a      	orrs	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4313      	orrs	r3, r2
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	4313      	orrs	r3, r2
 800a598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	609a      	str	r2, [r3, #8]
}
 800a5a0:	bf00      	nop
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f003 031f 	and.w	r3, r3, #31
 800a5be:	2201      	movs	r2, #1
 800a5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	43db      	mvns	r3, r3
 800a5ce:	401a      	ands	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6a1a      	ldr	r2, [r3, #32]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 031f 	and.w	r3, r3, #31
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	621a      	str	r2, [r3, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d101      	bne.n	800a610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a60c:	2302      	movs	r3, #2
 800a60e:	e050      	b.n	800a6b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a1c      	ldr	r2, [pc, #112]	; (800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d018      	beq.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a65c:	d013      	beq.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a18      	ldr	r2, [pc, #96]	; (800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d00e      	beq.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a16      	ldr	r2, [pc, #88]	; (800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d009      	beq.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a15      	ldr	r2, [pc, #84]	; (800a6cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d004      	beq.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d10c      	bne.n	800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a68c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	4313      	orrs	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	40010000 	.word	0x40010000
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40000c00 	.word	0x40000c00
 800a6d0:	40014000 	.word	0x40014000

0800a6d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d101      	bne.n	800a6f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e03d      	b.n	800a76c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e03f      	b.n	800a832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7fa fda8 	bl	800531c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2224      	movs	r2, #36	; 0x24
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 ffd7 	bl	800b798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695a      	ldr	r2, [r3, #20]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68da      	ldr	r2, [r3, #12]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b20      	cmp	r3, #32
 800a854:	d165      	bne.n	800a922 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <HAL_UART_Transmit_DMA+0x26>
 800a85c:	88fb      	ldrh	r3, [r7, #6]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e05e      	b.n	800a924 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_UART_Transmit_DMA+0x38>
 800a870:	2302      	movs	r3, #2
 800a872:	e057      	b.n	800a924 <HAL_UART_Transmit_DMA+0xe8>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	88fa      	ldrh	r2, [r7, #6]
 800a886:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	88fa      	ldrh	r2, [r7, #6]
 800a88c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2221      	movs	r2, #33	; 0x21
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a0:	4a22      	ldr	r2, [pc, #136]	; (800a92c <HAL_UART_Transmit_DMA+0xf0>)
 800a8a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a8:	4a21      	ldr	r2, [pc, #132]	; (800a930 <HAL_UART_Transmit_DMA+0xf4>)
 800a8aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b0:	4a20      	ldr	r2, [pc, #128]	; (800a934 <HAL_UART_Transmit_DMA+0xf8>)
 800a8b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a8bc:	f107 0308 	add.w	r3, r7, #8
 800a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	6819      	ldr	r1, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	88fb      	ldrh	r3, [r7, #6]
 800a8d4:	f7fb f8f4 	bl	8005ac0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3314      	adds	r3, #20
 800a8f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	e853 3f00 	ldrex	r3, [r3]
 800a8f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	62bb      	str	r3, [r7, #40]	; 0x28
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3314      	adds	r3, #20
 800a908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a90a:	627a      	str	r2, [r7, #36]	; 0x24
 800a90c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90e:	6a39      	ldr	r1, [r7, #32]
 800a910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a912:	e841 2300 	strex	r3, r2, [r1]
 800a916:	61fb      	str	r3, [r7, #28]
   return(result);
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e5      	bne.n	800a8ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	e000      	b.n	800a924 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a922:	2302      	movs	r3, #2
  }
}
 800a924:	4618      	mov	r0, r3
 800a926:	3730      	adds	r7, #48	; 0x30
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	0800b031 	.word	0x0800b031
 800a930:	0800b0cb 	.word	0x0800b0cb
 800a934:	0800b243 	.word	0x0800b243

0800a938 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d11d      	bne.n	800a98e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <HAL_UART_Receive_DMA+0x26>
 800a958:	88fb      	ldrh	r3, [r7, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e016      	b.n	800a990 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_UART_Receive_DMA+0x38>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e00f      	b.n	800a990 <HAL_UART_Receive_DMA+0x58>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	461a      	mov	r2, r3
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 fca7 	bl	800b2d8 <UART_Start_Receive_DMA>
 800a98a:	4603      	mov	r3, r0
 800a98c:	e000      	b.n	800a990 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a98e:	2302      	movs	r3, #2
  }
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b090      	sub	sp, #64	; 0x40
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ae:	2b80      	cmp	r3, #128	; 0x80
 800a9b0:	bf0c      	ite	eq
 800a9b2:	2301      	moveq	r3, #1
 800a9b4:	2300      	movne	r3, #0
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b21      	cmp	r3, #33	; 0x21
 800a9c4:	d128      	bne.n	800aa18 <HAL_UART_DMAStop+0x80>
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d025      	beq.n	800aa18 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	623b      	str	r3, [r7, #32]
   return(result);
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3314      	adds	r3, #20
 800a9ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9ec:	633a      	str	r2, [r7, #48]	; 0x30
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e5      	bne.n	800a9cc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d004      	beq.n	800aa12 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fb f8af 	bl	8005b70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fcfe 	bl	800b414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	bf0c      	ite	eq
 800aa26:	2301      	moveq	r3, #1
 800aa28:	2300      	movne	r3, #0
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b22      	cmp	r3, #34	; 0x22
 800aa38:	d128      	bne.n	800aa8c <HAL_UART_DMAStop+0xf4>
 800aa3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d025      	beq.n	800aa8c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3314      	adds	r3, #20
 800aa46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3314      	adds	r3, #20
 800aa5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa60:	61fa      	str	r2, [r7, #28]
 800aa62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	69b9      	ldr	r1, [r7, #24]
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e5      	bne.n	800aa40 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fb f875 	bl	8005b70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fcec 	bl	800b464 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3740      	adds	r7, #64	; 0x40
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b0ba      	sub	sp, #232	; 0xe8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aaca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aace:	f003 030f 	and.w	r3, r3, #15
 800aad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10f      	bne.n	800aafe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae2:	f003 0320 	and.w	r3, r3, #32
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d009      	beq.n	800aafe <HAL_UART_IRQHandler+0x66>
 800aaea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fd93 	bl	800b622 <UART_Receive_IT>
      return;
 800aafc:	e256      	b.n	800afac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aafe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 80de 	beq.w	800acc4 <HAL_UART_IRQHandler+0x22c>
 800ab08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d106      	bne.n	800ab22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 80d1 	beq.w	800acc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00b      	beq.n	800ab46 <HAL_UART_IRQHandler+0xae>
 800ab2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	f043 0201 	orr.w	r2, r3, #1
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <HAL_UART_IRQHandler+0xd2>
 800ab52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	f043 0202 	orr.w	r2, r3, #2
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <HAL_UART_IRQHandler+0xf6>
 800ab76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab86:	f043 0204 	orr.w	r2, r3, #4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ab8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab92:	f003 0308 	and.w	r3, r3, #8
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d011      	beq.n	800abbe <HAL_UART_IRQHandler+0x126>
 800ab9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d105      	bne.n	800abb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	f043 0208 	orr.w	r2, r3, #8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 81ed 	beq.w	800afa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <HAL_UART_IRQHandler+0x14e>
 800abd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fd1e 	bl	800b622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b40      	cmp	r3, #64	; 0x40
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	f003 0308 	and.w	r3, r3, #8
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d103      	bne.n	800ac12 <HAL_UART_IRQHandler+0x17a>
 800ac0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d04f      	beq.n	800acb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fc26 	bl	800b464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d141      	bne.n	800acaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3314      	adds	r3, #20
 800ac2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3314      	adds	r3, #20
 800ac4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1d9      	bne.n	800ac26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d013      	beq.n	800aca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7e:	4a7d      	ldr	r2, [pc, #500]	; (800ae74 <HAL_UART_IRQHandler+0x3dc>)
 800ac80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fa ffe2 	bl	8005c50 <HAL_DMA_Abort_IT>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d016      	beq.n	800acc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca0:	e00e      	b.n	800acc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f9ae 	bl	800b004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca8:	e00a      	b.n	800acc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f9aa 	bl	800b004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb0:	e006      	b.n	800acc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f9a6 	bl	800b004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800acbe:	e170      	b.n	800afa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc0:	bf00      	nop
    return;
 800acc2:	e16e      	b.n	800afa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f040 814a 	bne.w	800af62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800acce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8143 	beq.w	800af62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800acdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 813c 	beq.w	800af62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800acea:	2300      	movs	r3, #0
 800acec:	60bb      	str	r3, [r7, #8]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60bb      	str	r3, [r7, #8]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	60bb      	str	r3, [r7, #8]
 800acfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0a:	2b40      	cmp	r3, #64	; 0x40
 800ad0c:	f040 80b4 	bne.w	800ae78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 8140 	beq.w	800afa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	f080 8139 	bcs.w	800afa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad46:	f000 8088 	beq.w	800ae5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	330c      	adds	r3, #12
 800ad50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	330c      	adds	r3, #12
 800ad72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1d9      	bne.n	800ad4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3314      	adds	r3, #20
 800ad9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ada6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3314      	adds	r3, #20
 800adb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800adba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800adbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800adcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e1      	bne.n	800ad96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3314      	adds	r3, #20
 800add8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ade2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3314      	adds	r3, #20
 800adf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e3      	bne.n	800add2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	330c      	adds	r3, #12
 800ae1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae2a:	f023 0310 	bic.w	r3, r3, #16
 800ae2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	330c      	adds	r3, #12
 800ae38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae3c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e3      	bne.n	800ae18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa fe8b 	bl	8005b70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f8d4 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae70:	e099      	b.n	800afa6 <HAL_UART_IRQHandler+0x50e>
 800ae72:	bf00      	nop
 800ae74:	0800b52b 	.word	0x0800b52b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 808b 	beq.w	800afaa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ae94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 8086 	beq.w	800afaa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	330c      	adds	r3, #12
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	330c      	adds	r3, #12
 800aebe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aec2:	647a      	str	r2, [r7, #68]	; 0x44
 800aec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e3      	bne.n	800ae9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3314      	adds	r3, #20
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	623b      	str	r3, [r7, #32]
   return(result);
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	f023 0301 	bic.w	r3, r3, #1
 800aeec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3314      	adds	r3, #20
 800aef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aefa:	633a      	str	r2, [r7, #48]	; 0x30
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e3      	bne.n	800aed6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2220      	movs	r2, #32
 800af12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	330c      	adds	r3, #12
 800af22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0310 	bic.w	r3, r3, #16
 800af32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	330c      	adds	r3, #12
 800af3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af40:	61fa      	str	r2, [r7, #28]
 800af42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af44:	69b9      	ldr	r1, [r7, #24]
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	e841 2300 	strex	r3, r2, [r1]
 800af4c:	617b      	str	r3, [r7, #20]
   return(result);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1e3      	bne.n	800af1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f85c 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af60:	e023      	b.n	800afaa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d009      	beq.n	800af82 <HAL_UART_IRQHandler+0x4ea>
 800af6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fae9 	bl	800b552 <UART_Transmit_IT>
    return;
 800af80:	e014      	b.n	800afac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00e      	beq.n	800afac <HAL_UART_IRQHandler+0x514>
 800af8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb29 	bl	800b5f2 <UART_EndTransmit_IT>
    return;
 800afa0:	e004      	b.n	800afac <HAL_UART_IRQHandler+0x514>
    return;
 800afa2:	bf00      	nop
 800afa4:	e002      	b.n	800afac <HAL_UART_IRQHandler+0x514>
      return;
 800afa6:	bf00      	nop
 800afa8:	e000      	b.n	800afac <HAL_UART_IRQHandler+0x514>
      return;
 800afaa:	bf00      	nop
  }
}
 800afac:	37e8      	adds	r7, #232	; 0xe8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop

0800afb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b090      	sub	sp, #64	; 0x40
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d137      	bne.n	800b0bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04e:	2200      	movs	r2, #0
 800b050:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3314      	adds	r3, #20
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	623b      	str	r3, [r7, #32]
   return(result);
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b068:	63bb      	str	r3, [r7, #56]	; 0x38
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3314      	adds	r3, #20
 800b070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b072:	633a      	str	r2, [r7, #48]	; 0x30
 800b074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e5      	bne.n	800b052 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	330c      	adds	r3, #12
 800b08c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	60fb      	str	r3, [r7, #12]
   return(result);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	330c      	adds	r3, #12
 800b0a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0a6:	61fa      	str	r2, [r7, #28]
 800b0a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	69b9      	ldr	r1, [r7, #24]
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e5      	bne.n	800b086 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0ba:	e002      	b.n	800b0c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b0bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0be:	f7ff ff79 	bl	800afb4 <HAL_UART_TxCpltCallback>
}
 800b0c2:	bf00      	nop
 800b0c4:	3740      	adds	r7, #64	; 0x40
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff ff75 	bl	800afc8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0de:	bf00      	nop
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b09c      	sub	sp, #112	; 0x70
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d172      	bne.n	800b1e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b104:	2200      	movs	r2, #0
 800b106:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	330c      	adds	r3, #12
 800b10e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b112:	e853 3f00 	ldrex	r3, [r3]
 800b116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b11a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b11e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	330c      	adds	r3, #12
 800b126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b128:	65ba      	str	r2, [r7, #88]	; 0x58
 800b12a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b12e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b130:	e841 2300 	strex	r3, r2, [r1]
 800b134:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e5      	bne.n	800b108 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3314      	adds	r3, #20
 800b142:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	e853 3f00 	ldrex	r3, [r3]
 800b14a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14e:	f023 0301 	bic.w	r3, r3, #1
 800b152:	667b      	str	r3, [r7, #100]	; 0x64
 800b154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3314      	adds	r3, #20
 800b15a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b15c:	647a      	str	r2, [r7, #68]	; 0x44
 800b15e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b164:	e841 2300 	strex	r3, r2, [r1]
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e5      	bne.n	800b13c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3314      	adds	r3, #20
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	623b      	str	r3, [r7, #32]
   return(result);
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b186:	663b      	str	r3, [r7, #96]	; 0x60
 800b188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3314      	adds	r3, #20
 800b18e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b190:	633a      	str	r2, [r7, #48]	; 0x30
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b198:	e841 2300 	strex	r3, r2, [r1]
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e5      	bne.n	800b170 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1a6:	2220      	movs	r2, #32
 800b1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d119      	bne.n	800b1e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	e853 3f00 	ldrex	r3, [r3]
 800b1c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0310 	bic.w	r3, r3, #16
 800b1ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	330c      	adds	r3, #12
 800b1d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1d4:	61fa      	str	r2, [r7, #28]
 800b1d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	69b9      	ldr	r1, [r7, #24]
 800b1da:	69fa      	ldr	r2, [r7, #28]
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e5      	bne.n	800b1b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d106      	bne.n	800b1fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1f8:	f7ff ff0e 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1fc:	e002      	b.n	800b204 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b1fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b200:	f7ff feec 	bl	800afdc <HAL_UART_RxCpltCallback>
}
 800b204:	bf00      	nop
 800b206:	3770      	adds	r7, #112	; 0x70
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d108      	bne.n	800b234 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b226:	085b      	lsrs	r3, r3, #1
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4619      	mov	r1, r3
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff fef3 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b232:	e002      	b.n	800b23a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff fedb 	bl	800aff0 <HAL_UART_RxHalfCpltCallback>
}
 800b23a:	bf00      	nop
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b252:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25e:	2b80      	cmp	r3, #128	; 0x80
 800b260:	bf0c      	ite	eq
 800b262:	2301      	moveq	r3, #1
 800b264:	2300      	movne	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b21      	cmp	r3, #33	; 0x21
 800b274:	d108      	bne.n	800b288 <UART_DMAError+0x46>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2200      	movs	r2, #0
 800b280:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b282:	68b8      	ldr	r0, [r7, #8]
 800b284:	f000 f8c6 	bl	800b414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b40      	cmp	r3, #64	; 0x40
 800b294:	bf0c      	ite	eq
 800b296:	2301      	moveq	r3, #1
 800b298:	2300      	movne	r3, #0
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b22      	cmp	r3, #34	; 0x22
 800b2a8:	d108      	bne.n	800b2bc <UART_DMAError+0x7a>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b2b6:	68b8      	ldr	r0, [r7, #8]
 800b2b8:	f000 f8d4 	bl	800b464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	f043 0210 	orr.w	r2, r3, #16
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2c8:	68b8      	ldr	r0, [r7, #8]
 800b2ca:	f7ff fe9b 	bl	800b004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b098      	sub	sp, #96	; 0x60
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	88fa      	ldrh	r2, [r7, #6]
 800b2f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2222      	movs	r2, #34	; 0x22
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	4a40      	ldr	r2, [pc, #256]	; (800b408 <UART_Start_Receive_DMA+0x130>)
 800b306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	4a3f      	ldr	r2, [pc, #252]	; (800b40c <UART_Start_Receive_DMA+0x134>)
 800b30e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b314:	4a3e      	ldr	r2, [pc, #248]	; (800b410 <UART_Start_Receive_DMA+0x138>)
 800b316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31c:	2200      	movs	r2, #0
 800b31e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	88fb      	ldrh	r3, [r7, #6]
 800b338:	f7fa fbc2 	bl	8005ac0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	613b      	str	r3, [r7, #16]
 800b350:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d019      	beq.n	800b396 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	330c      	adds	r3, #12
 800b368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b378:	65bb      	str	r3, [r7, #88]	; 0x58
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	330c      	adds	r3, #12
 800b380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b382:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e5      	bne.n	800b362 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3314      	adds	r3, #20
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	f043 0301 	orr.w	r3, r3, #1
 800b3ac:	657b      	str	r3, [r7, #84]	; 0x54
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3314      	adds	r3, #20
 800b3b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3b6:	63ba      	str	r2, [r7, #56]	; 0x38
 800b3b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e5      	bne.n	800b396 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3314      	adds	r3, #20
 800b3d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e0:	653b      	str	r3, [r7, #80]	; 0x50
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3ea:	627a      	str	r2, [r7, #36]	; 0x24
 800b3ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6a39      	ldr	r1, [r7, #32]
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e5      	bne.n	800b3ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3760      	adds	r7, #96	; 0x60
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0800b0e7 	.word	0x0800b0e7
 800b40c:	0800b20d 	.word	0x0800b20d
 800b410:	0800b243 	.word	0x0800b243

0800b414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b089      	sub	sp, #36	; 0x24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	330c      	adds	r3, #12
 800b422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	e853 3f00 	ldrex	r3, [r3]
 800b42a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	330c      	adds	r3, #12
 800b43a:	69fa      	ldr	r2, [r7, #28]
 800b43c:	61ba      	str	r2, [r7, #24]
 800b43e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b440:	6979      	ldr	r1, [r7, #20]
 800b442:	69ba      	ldr	r2, [r7, #24]
 800b444:	e841 2300 	strex	r3, r2, [r1]
 800b448:	613b      	str	r3, [r7, #16]
   return(result);
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1e5      	bne.n	800b41c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2220      	movs	r2, #32
 800b454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b458:	bf00      	nop
 800b45a:	3724      	adds	r7, #36	; 0x24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b464:	b480      	push	{r7}
 800b466:	b095      	sub	sp, #84	; 0x54
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	330c      	adds	r3, #12
 800b472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	330c      	adds	r3, #12
 800b48a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b48c:	643a      	str	r2, [r7, #64]	; 0x40
 800b48e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e5      	bne.n	800b46c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3314      	adds	r3, #20
 800b4a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3314      	adds	r3, #20
 800b4be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e5      	bne.n	800b4a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d119      	bne.n	800b510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	330c      	adds	r3, #12
 800b4e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f023 0310 	bic.w	r3, r3, #16
 800b4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	330c      	adds	r3, #12
 800b4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4fc:	61ba      	str	r2, [r7, #24]
 800b4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	6979      	ldr	r1, [r7, #20]
 800b502:	69ba      	ldr	r2, [r7, #24]
 800b504:	e841 2300 	strex	r3, r2, [r1]
 800b508:	613b      	str	r3, [r7, #16]
   return(result);
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e5      	bne.n	800b4dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b51e:	bf00      	nop
 800b520:	3754      	adds	r7, #84	; 0x54
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff fd5d 	bl	800b004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b54a:	bf00      	nop
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b552:	b480      	push	{r7}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b21      	cmp	r3, #33	; 0x21
 800b564:	d13e      	bne.n	800b5e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b56e:	d114      	bne.n	800b59a <UART_Transmit_IT+0x48>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d110      	bne.n	800b59a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a1b      	ldr	r3, [r3, #32]
 800b57c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b58c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	1c9a      	adds	r2, r3, #2
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	621a      	str	r2, [r3, #32]
 800b598:	e008      	b.n	800b5ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	1c59      	adds	r1, r3, #1
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	6211      	str	r1, [r2, #32]
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10f      	bne.n	800b5e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68da      	ldr	r2, [r3, #12]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	e000      	b.n	800b5e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5e4:	2302      	movs	r3, #2
  }
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff fcce 	bl	800afb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b08c      	sub	sp, #48	; 0x30
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b22      	cmp	r3, #34	; 0x22
 800b634:	f040 80ab 	bne.w	800b78e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b640:	d117      	bne.n	800b672 <UART_Receive_IT+0x50>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d113      	bne.n	800b672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b660:	b29a      	uxth	r2, r3
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66a:	1c9a      	adds	r2, r3, #2
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	629a      	str	r2, [r3, #40]	; 0x28
 800b670:	e026      	b.n	800b6c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b678:	2300      	movs	r3, #0
 800b67a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b684:	d007      	beq.n	800b696 <UART_Receive_IT+0x74>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <UART_Receive_IT+0x82>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	e008      	b.n	800b6b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d15a      	bne.n	800b78a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68da      	ldr	r2, [r3, #12]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0220 	bic.w	r2, r2, #32
 800b6e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	695a      	ldr	r2, [r3, #20]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2220      	movs	r2, #32
 800b708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	2b01      	cmp	r3, #1
 800b712:	d135      	bne.n	800b780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	330c      	adds	r3, #12
 800b720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	613b      	str	r3, [r7, #16]
   return(result);
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f023 0310 	bic.w	r3, r3, #16
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b73a:	623a      	str	r2, [r7, #32]
 800b73c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	69f9      	ldr	r1, [r7, #28]
 800b740:	6a3a      	ldr	r2, [r7, #32]
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	61bb      	str	r3, [r7, #24]
   return(result);
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e5      	bne.n	800b71a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	2b10      	cmp	r3, #16
 800b75a:	d10a      	bne.n	800b772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fc4d 	bl	800b018 <HAL_UARTEx_RxEventCallback>
 800b77e:	e002      	b.n	800b786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fc2b 	bl	800afdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	e002      	b.n	800b790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	e000      	b.n	800b790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b78e:	2302      	movs	r3, #2
  }
}
 800b790:	4618      	mov	r0, r3
 800b792:	3730      	adds	r7, #48	; 0x30
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b79c:	b0c0      	sub	sp, #256	; 0x100
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b4:	68d9      	ldr	r1, [r3, #12]
 800b7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	ea40 0301 	orr.w	r3, r0, r1
 800b7c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7f0:	f021 010c 	bic.w	r1, r1, #12
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7fe:	430b      	orrs	r3, r1
 800b800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b812:	6999      	ldr	r1, [r3, #24]
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	ea40 0301 	orr.w	r3, r0, r1
 800b81e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	4b8f      	ldr	r3, [pc, #572]	; (800ba64 <UART_SetConfig+0x2cc>)
 800b828:	429a      	cmp	r2, r3
 800b82a:	d005      	beq.n	800b838 <UART_SetConfig+0xa0>
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b8d      	ldr	r3, [pc, #564]	; (800ba68 <UART_SetConfig+0x2d0>)
 800b834:	429a      	cmp	r2, r3
 800b836:	d104      	bne.n	800b842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fd fdfa 	bl	8009430 <HAL_RCC_GetPCLK2Freq>
 800b83c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b840:	e003      	b.n	800b84a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b842:	f7fd fde1 	bl	8009408 <HAL_RCC_GetPCLK1Freq>
 800b846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b854:	f040 810c 	bne.w	800ba70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b85c:	2200      	movs	r2, #0
 800b85e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	1891      	adds	r1, r2, r2
 800b870:	65b9      	str	r1, [r7, #88]	; 0x58
 800b872:	415b      	adcs	r3, r3
 800b874:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b87a:	4621      	mov	r1, r4
 800b87c:	eb12 0801 	adds.w	r8, r2, r1
 800b880:	4629      	mov	r1, r5
 800b882:	eb43 0901 	adc.w	r9, r3, r1
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b89a:	4690      	mov	r8, r2
 800b89c:	4699      	mov	r9, r3
 800b89e:	4623      	mov	r3, r4
 800b8a0:	eb18 0303 	adds.w	r3, r8, r3
 800b8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	eb49 0303 	adc.w	r3, r9, r3
 800b8ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b8c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	18db      	adds	r3, r3, r3
 800b8ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	eb42 0303 	adc.w	r3, r2, r3
 800b8d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b8d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b8dc:	f7f5 f958 	bl	8000b90 <__aeabi_uldivmod>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4b61      	ldr	r3, [pc, #388]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b8e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b8ea:	095b      	lsrs	r3, r3, #5
 800b8ec:	011c      	lsls	r4, r3, #4
 800b8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b900:	4642      	mov	r2, r8
 800b902:	464b      	mov	r3, r9
 800b904:	1891      	adds	r1, r2, r2
 800b906:	64b9      	str	r1, [r7, #72]	; 0x48
 800b908:	415b      	adcs	r3, r3
 800b90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b910:	4641      	mov	r1, r8
 800b912:	eb12 0a01 	adds.w	sl, r2, r1
 800b916:	4649      	mov	r1, r9
 800b918:	eb43 0b01 	adc.w	fp, r3, r1
 800b91c:	f04f 0200 	mov.w	r2, #0
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b930:	4692      	mov	sl, r2
 800b932:	469b      	mov	fp, r3
 800b934:	4643      	mov	r3, r8
 800b936:	eb1a 0303 	adds.w	r3, sl, r3
 800b93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b93e:	464b      	mov	r3, r9
 800b940:	eb4b 0303 	adc.w	r3, fp, r3
 800b944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b95c:	460b      	mov	r3, r1
 800b95e:	18db      	adds	r3, r3, r3
 800b960:	643b      	str	r3, [r7, #64]	; 0x40
 800b962:	4613      	mov	r3, r2
 800b964:	eb42 0303 	adc.w	r3, r2, r3
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
 800b96a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b96e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b972:	f7f5 f90d 	bl	8000b90 <__aeabi_uldivmod>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4611      	mov	r1, r2
 800b97c:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b97e:	fba3 2301 	umull	r2, r3, r3, r1
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	2264      	movs	r2, #100	; 0x64
 800b986:	fb02 f303 	mul.w	r3, r2, r3
 800b98a:	1acb      	subs	r3, r1, r3
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b992:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b994:	fba3 2302 	umull	r2, r3, r3, r2
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9a0:	441c      	add	r4, r3
 800b9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b9b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	1891      	adds	r1, r2, r2
 800b9ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9bc:	415b      	adcs	r3, r3
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	1851      	adds	r1, r2, r1
 800b9c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	414b      	adcs	r3, r1
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b9dc:	4659      	mov	r1, fp
 800b9de:	00cb      	lsls	r3, r1, #3
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9e6:	4651      	mov	r1, sl
 800b9e8:	00ca      	lsls	r2, r1, #3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	189b      	adds	r3, r3, r2
 800b9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	460a      	mov	r2, r1
 800b9fc:	eb42 0303 	adc.w	r3, r2, r3
 800ba00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba18:	460b      	mov	r3, r1
 800ba1a:	18db      	adds	r3, r3, r3
 800ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba1e:	4613      	mov	r3, r2
 800ba20:	eb42 0303 	adc.w	r3, r2, r3
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba2e:	f7f5 f8af 	bl	8000b90 <__aeabi_uldivmod>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba38:	fba3 1302 	umull	r1, r3, r3, r2
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	2164      	movs	r1, #100	; 0x64
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	3332      	adds	r3, #50	; 0x32
 800ba4a:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	095b      	lsrs	r3, r3, #5
 800ba52:	f003 0207 	and.w	r2, r3, #7
 800ba56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4422      	add	r2, r4
 800ba5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba60:	e105      	b.n	800bc6e <UART_SetConfig+0x4d6>
 800ba62:	bf00      	nop
 800ba64:	40011000 	.word	0x40011000
 800ba68:	40011400 	.word	0x40011400
 800ba6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba82:	4642      	mov	r2, r8
 800ba84:	464b      	mov	r3, r9
 800ba86:	1891      	adds	r1, r2, r2
 800ba88:	6239      	str	r1, [r7, #32]
 800ba8a:	415b      	adcs	r3, r3
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba92:	4641      	mov	r1, r8
 800ba94:	1854      	adds	r4, r2, r1
 800ba96:	4649      	mov	r1, r9
 800ba98:	eb43 0501 	adc.w	r5, r3, r1
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	00eb      	lsls	r3, r5, #3
 800baa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baaa:	00e2      	lsls	r2, r4, #3
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	4643      	mov	r3, r8
 800bab2:	18e3      	adds	r3, r4, r3
 800bab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bab8:	464b      	mov	r3, r9
 800baba:	eb45 0303 	adc.w	r3, r5, r3
 800babe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bad2:	f04f 0200 	mov.w	r2, #0
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bade:	4629      	mov	r1, r5
 800bae0:	008b      	lsls	r3, r1, #2
 800bae2:	4621      	mov	r1, r4
 800bae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bae8:	4621      	mov	r1, r4
 800baea:	008a      	lsls	r2, r1, #2
 800baec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800baf0:	f7f5 f84e 	bl	8000b90 <__aeabi_uldivmod>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4b60      	ldr	r3, [pc, #384]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bafa:	fba3 2302 	umull	r2, r3, r3, r2
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	011c      	lsls	r4, r3, #4
 800bb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	1891      	adds	r1, r2, r2
 800bb1a:	61b9      	str	r1, [r7, #24]
 800bb1c:	415b      	adcs	r3, r3
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb24:	4641      	mov	r1, r8
 800bb26:	1851      	adds	r1, r2, r1
 800bb28:	6139      	str	r1, [r7, #16]
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	414b      	adcs	r3, r1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 0300 	mov.w	r3, #0
 800bb38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	00cb      	lsls	r3, r1, #3
 800bb40:	4651      	mov	r1, sl
 800bb42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb46:	4651      	mov	r1, sl
 800bb48:	00ca      	lsls	r2, r1, #3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4642      	mov	r2, r8
 800bb52:	189b      	adds	r3, r3, r2
 800bb54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb58:	464b      	mov	r3, r9
 800bb5a:	460a      	mov	r2, r1
 800bb5c:	eb42 0303 	adc.w	r3, r2, r3
 800bb60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	008b      	lsls	r3, r1, #2
 800bb80:	4641      	mov	r1, r8
 800bb82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb86:	4641      	mov	r1, r8
 800bb88:	008a      	lsls	r2, r1, #2
 800bb8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb8e:	f7f4 ffff 	bl	8000b90 <__aeabi_uldivmod>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4b39      	ldr	r3, [pc, #228]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bb98:	fba3 1302 	umull	r1, r3, r3, r2
 800bb9c:	095b      	lsrs	r3, r3, #5
 800bb9e:	2164      	movs	r1, #100	; 0x64
 800bba0:	fb01 f303 	mul.w	r3, r1, r3
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	3332      	adds	r3, #50	; 0x32
 800bbaa:	4a34      	ldr	r2, [pc, #208]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bbac:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbb6:	441c      	add	r4, r3
 800bbb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	673b      	str	r3, [r7, #112]	; 0x70
 800bbc0:	677a      	str	r2, [r7, #116]	; 0x74
 800bbc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	1891      	adds	r1, r2, r2
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	415b      	adcs	r3, r3
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbd6:	4641      	mov	r1, r8
 800bbd8:	1851      	adds	r1, r2, r1
 800bbda:	6039      	str	r1, [r7, #0]
 800bbdc:	4649      	mov	r1, r9
 800bbde:	414b      	adcs	r3, r1
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	f04f 0300 	mov.w	r3, #0
 800bbea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbee:	4659      	mov	r1, fp
 800bbf0:	00cb      	lsls	r3, r1, #3
 800bbf2:	4651      	mov	r1, sl
 800bbf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbf8:	4651      	mov	r1, sl
 800bbfa:	00ca      	lsls	r2, r1, #3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4603      	mov	r3, r0
 800bc02:	4642      	mov	r2, r8
 800bc04:	189b      	adds	r3, r3, r2
 800bc06:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc08:	464b      	mov	r3, r9
 800bc0a:	460a      	mov	r2, r1
 800bc0c:	eb42 0303 	adc.w	r3, r2, r3
 800bc10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	663b      	str	r3, [r7, #96]	; 0x60
 800bc1c:	667a      	str	r2, [r7, #100]	; 0x64
 800bc1e:	f04f 0200 	mov.w	r2, #0
 800bc22:	f04f 0300 	mov.w	r3, #0
 800bc26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	008b      	lsls	r3, r1, #2
 800bc2e:	4641      	mov	r1, r8
 800bc30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc34:	4641      	mov	r1, r8
 800bc36:	008a      	lsls	r2, r1, #2
 800bc38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc3c:	f7f4 ffa8 	bl	8000b90 <__aeabi_uldivmod>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc46:	fba3 1302 	umull	r1, r3, r3, r2
 800bc4a:	095b      	lsrs	r3, r3, #5
 800bc4c:	2164      	movs	r1, #100	; 0x64
 800bc4e:	fb01 f303 	mul.w	r3, r1, r3
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	011b      	lsls	r3, r3, #4
 800bc56:	3332      	adds	r3, #50	; 0x32
 800bc58:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	f003 020f 	and.w	r2, r3, #15
 800bc64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4422      	add	r2, r4
 800bc6c:	609a      	str	r2, [r3, #8]
}
 800bc6e:	bf00      	nop
 800bc70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc74:	46bd      	mov	sp, r7
 800bc76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc7a:	bf00      	nop
 800bc7c:	51eb851f 	.word	0x51eb851f

0800bc80 <arm_mat_trans_f32>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	8802      	ldrh	r2, [r0, #0]
 800bc86:	884b      	ldrh	r3, [r1, #2]
 800bc88:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bc8c:	684f      	ldr	r7, [r1, #4]
 800bc8e:	8840      	ldrh	r0, [r0, #2]
 800bc90:	4293      	cmp	r3, r2
 800bc92:	b083      	sub	sp, #12
 800bc94:	d14c      	bne.n	800bd30 <arm_mat_trans_f32+0xb0>
 800bc96:	f8b1 e000 	ldrh.w	lr, [r1]
 800bc9a:	4586      	cmp	lr, r0
 800bc9c:	d148      	bne.n	800bd30 <arm_mat_trans_f32+0xb0>
 800bc9e:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800bca2:	009c      	lsls	r4, r3, #2
 800bca4:	f00e 0e03 	and.w	lr, lr, #3
 800bca8:	fb08 f904 	mul.w	r9, r8, r4
 800bcac:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800bcb0:	011d      	lsls	r5, r3, #4
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bcb8:	eb07 0a04 	add.w	sl, r7, r4
 800bcbc:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800bcc0:	9201      	str	r2, [sp, #4]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	f1b8 0f00 	cmp.w	r8, #0
 800bcca:	d01d      	beq.n	800bd08 <arm_mat_trans_f32+0x88>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	f10c 0210 	add.w	r2, ip, #16
 800bcd2:	4439      	add	r1, r7
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800bcda:	601e      	str	r6, [r3, #0]
 800bcdc:	ed52 7a03 	vldr	s15, [r2, #-12]
 800bce0:	191e      	adds	r6, r3, r4
 800bce2:	edc6 7a00 	vstr	s15, [r6]
 800bce6:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800bcea:	600e      	str	r6, [r1, #0]
 800bcec:	ed52 7a01 	vldr	s15, [r2, #-4]
 800bcf0:	190e      	adds	r6, r1, r4
 800bcf2:	3801      	subs	r0, #1
 800bcf4:	442b      	add	r3, r5
 800bcf6:	f102 0210 	add.w	r2, r2, #16
 800bcfa:	edc6 7a00 	vstr	s15, [r6]
 800bcfe:	4429      	add	r1, r5
 800bd00:	d1e9      	bne.n	800bcd6 <arm_mat_trans_f32+0x56>
 800bd02:	44dc      	add	ip, fp
 800bd04:	eb09 0307 	add.w	r3, r9, r7
 800bd08:	f1be 0f00 	cmp.w	lr, #0
 800bd0c:	d009      	beq.n	800bd22 <arm_mat_trans_f32+0xa2>
 800bd0e:	4672      	mov	r2, lr
 800bd10:	4661      	mov	r1, ip
 800bd12:	f851 0b04 	ldr.w	r0, [r1], #4
 800bd16:	6018      	str	r0, [r3, #0]
 800bd18:	3a01      	subs	r2, #1
 800bd1a:	4423      	add	r3, r4
 800bd1c:	d1f9      	bne.n	800bd12 <arm_mat_trans_f32+0x92>
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	449c      	add	ip, r3
 800bd22:	3704      	adds	r7, #4
 800bd24:	4557      	cmp	r7, sl
 800bd26:	d1cd      	bne.n	800bcc4 <arm_mat_trans_f32+0x44>
 800bd28:	2000      	movs	r0, #0
 800bd2a:	b003      	add	sp, #12
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd30:	f06f 0002 	mvn.w	r0, #2
 800bd34:	e7f9      	b.n	800bd2a <arm_mat_trans_f32+0xaa>
 800bd36:	bf00      	nop

0800bd38 <arm_mat_sub_f32>:
 800bd38:	b4f0      	push	{r4, r5, r6, r7}
 800bd3a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800bd3e:	6803      	ldr	r3, [r0, #0]
 800bd40:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bd44:	6856      	ldr	r6, [r2, #4]
 800bd46:	42a3      	cmp	r3, r4
 800bd48:	d15d      	bne.n	800be06 <arm_mat_sub_f32+0xce>
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d15a      	bne.n	800be06 <arm_mat_sub_f32+0xce>
 800bd50:	8803      	ldrh	r3, [r0, #0]
 800bd52:	8844      	ldrh	r4, [r0, #2]
 800bd54:	fb04 f403 	mul.w	r4, r4, r3
 800bd58:	08a5      	lsrs	r5, r4, #2
 800bd5a:	d032      	beq.n	800bdc2 <arm_mat_sub_f32+0x8a>
 800bd5c:	f10c 0110 	add.w	r1, ip, #16
 800bd60:	f107 0210 	add.w	r2, r7, #16
 800bd64:	f106 0310 	add.w	r3, r6, #16
 800bd68:	4628      	mov	r0, r5
 800bd6a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800bd6e:	ed51 7a04 	vldr	s15, [r1, #-16]
 800bd72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd76:	3801      	subs	r0, #1
 800bd78:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bd7c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800bd80:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bd84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd88:	f101 0110 	add.w	r1, r1, #16
 800bd8c:	ed43 7a03 	vstr	s15, [r3, #-12]
 800bd90:	ed12 7a02 	vldr	s14, [r2, #-8]
 800bd94:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800bd98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd9c:	f102 0210 	add.w	r2, r2, #16
 800bda0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bda4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800bda8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800bdac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb0:	f103 0310 	add.w	r3, r3, #16
 800bdb4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800bdb8:	d1d7      	bne.n	800bd6a <arm_mat_sub_f32+0x32>
 800bdba:	012b      	lsls	r3, r5, #4
 800bdbc:	449c      	add	ip, r3
 800bdbe:	441f      	add	r7, r3
 800bdc0:	441e      	add	r6, r3
 800bdc2:	f014 0403 	ands.w	r4, r4, #3
 800bdc6:	d01b      	beq.n	800be00 <arm_mat_sub_f32+0xc8>
 800bdc8:	eddc 7a00 	vldr	s15, [ip]
 800bdcc:	ed97 7a00 	vldr	s14, [r7]
 800bdd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd4:	3c01      	subs	r4, #1
 800bdd6:	edc6 7a00 	vstr	s15, [r6]
 800bdda:	d011      	beq.n	800be00 <arm_mat_sub_f32+0xc8>
 800bddc:	eddc 7a01 	vldr	s15, [ip, #4]
 800bde0:	ed97 7a01 	vldr	s14, [r7, #4]
 800bde4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bde8:	2c01      	cmp	r4, #1
 800bdea:	edc6 7a01 	vstr	s15, [r6, #4]
 800bdee:	d007      	beq.n	800be00 <arm_mat_sub_f32+0xc8>
 800bdf0:	eddc 7a02 	vldr	s15, [ip, #8]
 800bdf4:	ed97 7a02 	vldr	s14, [r7, #8]
 800bdf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdfc:	edc6 7a02 	vstr	s15, [r6, #8]
 800be00:	2000      	movs	r0, #0
 800be02:	bcf0      	pop	{r4, r5, r6, r7}
 800be04:	4770      	bx	lr
 800be06:	f06f 0002 	mvn.w	r0, #2
 800be0a:	e7fa      	b.n	800be02 <arm_mat_sub_f32+0xca>

0800be0c <arm_mat_mult_f32>:
 800be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	8845      	ldrh	r5, [r0, #2]
 800be12:	880b      	ldrh	r3, [r1, #0]
 800be14:	8806      	ldrh	r6, [r0, #0]
 800be16:	6847      	ldr	r7, [r0, #4]
 800be18:	6854      	ldr	r4, [r2, #4]
 800be1a:	6848      	ldr	r0, [r1, #4]
 800be1c:	b08b      	sub	sp, #44	; 0x2c
 800be1e:	42ab      	cmp	r3, r5
 800be20:	9109      	str	r1, [sp, #36]	; 0x24
 800be22:	9604      	str	r6, [sp, #16]
 800be24:	8849      	ldrh	r1, [r1, #2]
 800be26:	f040 808a 	bne.w	800bf3e <arm_mat_mult_f32+0x132>
 800be2a:	8815      	ldrh	r5, [r2, #0]
 800be2c:	42b5      	cmp	r5, r6
 800be2e:	f040 8086 	bne.w	800bf3e <arm_mat_mult_f32+0x132>
 800be32:	8852      	ldrh	r2, [r2, #2]
 800be34:	428a      	cmp	r2, r1
 800be36:	f040 8082 	bne.w	800bf3e <arm_mat_mult_f32+0x132>
 800be3a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800be3e:	1d01      	adds	r1, r0, #4
 800be40:	0116      	lsls	r6, r2, #4
 800be42:	9108      	str	r1, [sp, #32]
 800be44:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800be48:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800be4c:	9101      	str	r1, [sp, #4]
 800be4e:	fb06 f108 	mul.w	r1, r6, r8
 800be52:	0095      	lsls	r5, r2, #2
 800be54:	9103      	str	r1, [sp, #12]
 800be56:	00d2      	lsls	r2, r2, #3
 800be58:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800be5c:	f003 0903 	and.w	r9, r3, #3
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	f107 0b10 	add.w	fp, r7, #16
 800be66:	eb04 0a05 	add.w	sl, r4, r5
 800be6a:	9107      	str	r1, [sp, #28]
 800be6c:	9202      	str	r2, [sp, #8]
 800be6e:	9306      	str	r3, [sp, #24]
 800be70:	f1ab 0310 	sub.w	r3, fp, #16
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	f8dd e020 	ldr.w	lr, [sp, #32]
 800be7c:	eb03 0c0a 	add.w	ip, r3, sl
 800be80:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bf48 <arm_mat_mult_f32+0x13c>
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	d053      	beq.n	800bf32 <arm_mat_mult_f32+0x126>
 800be8a:	9b02      	ldr	r3, [sp, #8]
 800be8c:	4644      	mov	r4, r8
 800be8e:	18c1      	adds	r1, r0, r3
 800be90:	4602      	mov	r2, r0
 800be92:	465b      	mov	r3, fp
 800be94:	ed92 6a00 	vldr	s12, [r2]
 800be98:	ed13 7a04 	vldr	s14, [r3, #-16]
 800be9c:	ed53 4a03 	vldr	s9, [r3, #-12]
 800bea0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800bea4:	ed91 5a00 	vldr	s10, [r1]
 800bea8:	ed53 5a01 	vldr	s11, [r3, #-4]
 800beac:	1957      	adds	r7, r2, r5
 800beae:	ee27 7a06 	vmul.f32	s14, s14, s12
 800beb2:	ed97 6a00 	vldr	s12, [r7]
 800beb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beba:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bebe:	194f      	adds	r7, r1, r5
 800bec0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bec4:	ee26 7a85 	vmul.f32	s14, s13, s10
 800bec8:	edd7 7a00 	vldr	s15, [r7]
 800becc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bed0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bed4:	3c01      	subs	r4, #1
 800bed6:	4432      	add	r2, r6
 800bed8:	4431      	add	r1, r6
 800beda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bede:	f103 0310 	add.w	r3, r3, #16
 800bee2:	d1d7      	bne.n	800be94 <arm_mat_mult_f32+0x88>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	9a01      	ldr	r2, [sp, #4]
 800bee8:	4418      	add	r0, r3
 800beea:	f1b9 0f00 	cmp.w	r9, #0
 800beee:	d00b      	beq.n	800bf08 <arm_mat_mult_f32+0xfc>
 800bef0:	464b      	mov	r3, r9
 800bef2:	edd0 6a00 	vldr	s13, [r0]
 800bef6:	ecb2 7a01 	vldmia	r2!, {s14}
 800befa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800befe:	3b01      	subs	r3, #1
 800bf00:	4428      	add	r0, r5
 800bf02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf06:	d1f4      	bne.n	800bef2 <arm_mat_mult_f32+0xe6>
 800bf08:	ecec 7a01 	vstmia	ip!, {s15}
 800bf0c:	45d4      	cmp	ip, sl
 800bf0e:	4670      	mov	r0, lr
 800bf10:	f10e 0e04 	add.w	lr, lr, #4
 800bf14:	d1b4      	bne.n	800be80 <arm_mat_mult_f32+0x74>
 800bf16:	9a01      	ldr	r2, [sp, #4]
 800bf18:	9b06      	ldr	r3, [sp, #24]
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	4419      	add	r1, r3
 800bf1e:	449b      	add	fp, r3
 800bf20:	9b04      	ldr	r3, [sp, #16]
 800bf22:	9101      	str	r1, [sp, #4]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	44aa      	add	sl, r5
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	d004      	beq.n	800bf36 <arm_mat_mult_f32+0x12a>
 800bf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2e:	6858      	ldr	r0, [r3, #4]
 800bf30:	e79e      	b.n	800be70 <arm_mat_mult_f32+0x64>
 800bf32:	9a05      	ldr	r2, [sp, #20]
 800bf34:	e7d9      	b.n	800beea <arm_mat_mult_f32+0xde>
 800bf36:	4618      	mov	r0, r3
 800bf38:	b00b      	add	sp, #44	; 0x2c
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	f06f 0002 	mvn.w	r0, #2
 800bf42:	b00b      	add	sp, #44	; 0x2c
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	00000000 	.word	0x00000000

0800bf4c <arm_mat_init_f32>:
 800bf4c:	8001      	strh	r1, [r0, #0]
 800bf4e:	8042      	strh	r2, [r0, #2]
 800bf50:	6043      	str	r3, [r0, #4]
 800bf52:	4770      	bx	lr

0800bf54 <arm_mat_add_f32>:
 800bf54:	b4f0      	push	{r4, r5, r6, r7}
 800bf56:	e9d1 4700 	ldrd	r4, r7, [r1]
 800bf5a:	6803      	ldr	r3, [r0, #0]
 800bf5c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bf60:	6856      	ldr	r6, [r2, #4]
 800bf62:	42a3      	cmp	r3, r4
 800bf64:	d15d      	bne.n	800c022 <arm_mat_add_f32+0xce>
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d15a      	bne.n	800c022 <arm_mat_add_f32+0xce>
 800bf6c:	8803      	ldrh	r3, [r0, #0]
 800bf6e:	8844      	ldrh	r4, [r0, #2]
 800bf70:	fb04 f403 	mul.w	r4, r4, r3
 800bf74:	08a5      	lsrs	r5, r4, #2
 800bf76:	d032      	beq.n	800bfde <arm_mat_add_f32+0x8a>
 800bf78:	f10c 0110 	add.w	r1, ip, #16
 800bf7c:	f107 0210 	add.w	r2, r7, #16
 800bf80:	f106 0310 	add.w	r3, r6, #16
 800bf84:	4628      	mov	r0, r5
 800bf86:	ed12 7a04 	vldr	s14, [r2, #-16]
 800bf8a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800bf8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf92:	3801      	subs	r0, #1
 800bf94:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bf98:	ed12 7a03 	vldr	s14, [r2, #-12]
 800bf9c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bfa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfa4:	f101 0110 	add.w	r1, r1, #16
 800bfa8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800bfac:	ed12 7a02 	vldr	s14, [r2, #-8]
 800bfb0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800bfb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfb8:	f102 0210 	add.w	r2, r2, #16
 800bfbc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bfc0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800bfc4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800bfc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfcc:	f103 0310 	add.w	r3, r3, #16
 800bfd0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800bfd4:	d1d7      	bne.n	800bf86 <arm_mat_add_f32+0x32>
 800bfd6:	012b      	lsls	r3, r5, #4
 800bfd8:	449c      	add	ip, r3
 800bfda:	441f      	add	r7, r3
 800bfdc:	441e      	add	r6, r3
 800bfde:	f014 0403 	ands.w	r4, r4, #3
 800bfe2:	d01b      	beq.n	800c01c <arm_mat_add_f32+0xc8>
 800bfe4:	edd7 7a00 	vldr	s15, [r7]
 800bfe8:	ed9c 7a00 	vldr	s14, [ip]
 800bfec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bff0:	3c01      	subs	r4, #1
 800bff2:	edc6 7a00 	vstr	s15, [r6]
 800bff6:	d011      	beq.n	800c01c <arm_mat_add_f32+0xc8>
 800bff8:	eddc 7a01 	vldr	s15, [ip, #4]
 800bffc:	ed97 7a01 	vldr	s14, [r7, #4]
 800c000:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c004:	2c01      	cmp	r4, #1
 800c006:	edc6 7a01 	vstr	s15, [r6, #4]
 800c00a:	d007      	beq.n	800c01c <arm_mat_add_f32+0xc8>
 800c00c:	eddc 7a02 	vldr	s15, [ip, #8]
 800c010:	ed97 7a02 	vldr	s14, [r7, #8]
 800c014:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c018:	edc6 7a02 	vstr	s15, [r6, #8]
 800c01c:	2000      	movs	r0, #0
 800c01e:	bcf0      	pop	{r4, r5, r6, r7}
 800c020:	4770      	bx	lr
 800c022:	f06f 0002 	mvn.w	r0, #2
 800c026:	e7fa      	b.n	800c01e <arm_mat_add_f32+0xca>

0800c028 <__errno>:
 800c028:	4b01      	ldr	r3, [pc, #4]	; (800c030 <__errno+0x8>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	200000ec 	.word	0x200000ec

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4d0d      	ldr	r5, [pc, #52]	; (800c06c <__libc_init_array+0x38>)
 800c038:	4c0d      	ldr	r4, [pc, #52]	; (800c070 <__libc_init_array+0x3c>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	2600      	movs	r6, #0
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	4d0b      	ldr	r5, [pc, #44]	; (800c074 <__libc_init_array+0x40>)
 800c046:	4c0c      	ldr	r4, [pc, #48]	; (800c078 <__libc_init_array+0x44>)
 800c048:	f000 ffec 	bl	800d024 <_init>
 800c04c:	1b64      	subs	r4, r4, r5
 800c04e:	10a4      	asrs	r4, r4, #2
 800c050:	2600      	movs	r6, #0
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	0800d098 	.word	0x0800d098
 800c070:	0800d098 	.word	0x0800d098
 800c074:	0800d098 	.word	0x0800d098
 800c078:	0800d09c 	.word	0x0800d09c

0800c07c <memset>:
 800c07c:	4402      	add	r2, r0
 800c07e:	4603      	mov	r3, r0
 800c080:	4293      	cmp	r3, r2
 800c082:	d100      	bne.n	800c086 <memset+0xa>
 800c084:	4770      	bx	lr
 800c086:	f803 1b01 	strb.w	r1, [r3], #1
 800c08a:	e7f9      	b.n	800c080 <memset+0x4>
 800c08c:	0000      	movs	r0, r0
	...

0800c090 <ceil>:
 800c090:	ec51 0b10 	vmov	r0, r1, d0
 800c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c098:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c09c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c0a0:	2e13      	cmp	r6, #19
 800c0a2:	ee10 5a10 	vmov	r5, s0
 800c0a6:	ee10 8a10 	vmov	r8, s0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	dc30      	bgt.n	800c110 <ceil+0x80>
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	da12      	bge.n	800c0d8 <ceil+0x48>
 800c0b2:	a335      	add	r3, pc, #212	; (adr r3, 800c188 <ceil+0xf8>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f894 	bl	80001e4 <__adddf3>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f7f4 fcd6 	bl	8000a70 <__aeabi_dcmpgt>
 800c0c4:	b128      	cbz	r0, 800c0d2 <ceil+0x42>
 800c0c6:	2c00      	cmp	r4, #0
 800c0c8:	db55      	blt.n	800c176 <ceil+0xe6>
 800c0ca:	432c      	orrs	r4, r5
 800c0cc:	d057      	beq.n	800c17e <ceil+0xee>
 800c0ce:	4c30      	ldr	r4, [pc, #192]	; (800c190 <ceil+0x100>)
 800c0d0:	2500      	movs	r5, #0
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	e025      	b.n	800c124 <ceil+0x94>
 800c0d8:	4f2e      	ldr	r7, [pc, #184]	; (800c194 <ceil+0x104>)
 800c0da:	4137      	asrs	r7, r6
 800c0dc:	ea01 0307 	and.w	r3, r1, r7
 800c0e0:	4303      	orrs	r3, r0
 800c0e2:	d01f      	beq.n	800c124 <ceil+0x94>
 800c0e4:	a328      	add	r3, pc, #160	; (adr r3, 800c188 <ceil+0xf8>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f7f4 f87b 	bl	80001e4 <__adddf3>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f7f4 fcbd 	bl	8000a70 <__aeabi_dcmpgt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d0eb      	beq.n	800c0d2 <ceil+0x42>
 800c0fa:	2c00      	cmp	r4, #0
 800c0fc:	bfc2      	ittt	gt
 800c0fe:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800c102:	fa43 f606 	asrgt.w	r6, r3, r6
 800c106:	19a4      	addgt	r4, r4, r6
 800c108:	ea24 0407 	bic.w	r4, r4, r7
 800c10c:	2500      	movs	r5, #0
 800c10e:	e7e0      	b.n	800c0d2 <ceil+0x42>
 800c110:	2e33      	cmp	r6, #51	; 0x33
 800c112:	dd0b      	ble.n	800c12c <ceil+0x9c>
 800c114:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c118:	d104      	bne.n	800c124 <ceil+0x94>
 800c11a:	ee10 2a10 	vmov	r2, s0
 800c11e:	460b      	mov	r3, r1
 800c120:	f7f4 f860 	bl	80001e4 <__adddf3>
 800c124:	ec41 0b10 	vmov	d0, r0, r1
 800c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
 800c134:	fa23 f707 	lsr.w	r7, r3, r7
 800c138:	4207      	tst	r7, r0
 800c13a:	d0f3      	beq.n	800c124 <ceil+0x94>
 800c13c:	a312      	add	r3, pc, #72	; (adr r3, 800c188 <ceil+0xf8>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f7f4 f84f 	bl	80001e4 <__adddf3>
 800c146:	2200      	movs	r2, #0
 800c148:	2300      	movs	r3, #0
 800c14a:	f7f4 fc91 	bl	8000a70 <__aeabi_dcmpgt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d0bf      	beq.n	800c0d2 <ceil+0x42>
 800c152:	2c00      	cmp	r4, #0
 800c154:	dd02      	ble.n	800c15c <ceil+0xcc>
 800c156:	2e14      	cmp	r6, #20
 800c158:	d103      	bne.n	800c162 <ceil+0xd2>
 800c15a:	3401      	adds	r4, #1
 800c15c:	ea25 0507 	bic.w	r5, r5, r7
 800c160:	e7b7      	b.n	800c0d2 <ceil+0x42>
 800c162:	2301      	movs	r3, #1
 800c164:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c168:	fa03 f606 	lsl.w	r6, r3, r6
 800c16c:	4435      	add	r5, r6
 800c16e:	4545      	cmp	r5, r8
 800c170:	bf38      	it	cc
 800c172:	18e4      	addcc	r4, r4, r3
 800c174:	e7f2      	b.n	800c15c <ceil+0xcc>
 800c176:	2500      	movs	r5, #0
 800c178:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c17c:	e7a9      	b.n	800c0d2 <ceil+0x42>
 800c17e:	4625      	mov	r5, r4
 800c180:	e7a7      	b.n	800c0d2 <ceil+0x42>
 800c182:	bf00      	nop
 800c184:	f3af 8000 	nop.w
 800c188:	8800759c 	.word	0x8800759c
 800c18c:	7e37e43c 	.word	0x7e37e43c
 800c190:	3ff00000 	.word	0x3ff00000
 800c194:	000fffff 	.word	0x000fffff

0800c198 <pow>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	ed2d 8b02 	vpush	{d8}
 800c19e:	eeb0 8a40 	vmov.f32	s16, s0
 800c1a2:	eef0 8a60 	vmov.f32	s17, s1
 800c1a6:	ec55 4b11 	vmov	r4, r5, d1
 800c1aa:	f000 f891 	bl	800c2d0 <__ieee754_pow>
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	ec57 6b10 	vmov	r6, r7, d0
 800c1ba:	f7f4 fc63 	bl	8000a84 <__aeabi_dcmpun>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d13b      	bne.n	800c23a <pow+0xa2>
 800c1c2:	ec51 0b18 	vmov	r0, r1, d8
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f7f4 fc29 	bl	8000a20 <__aeabi_dcmpeq>
 800c1ce:	b1b8      	cbz	r0, 800c200 <pow+0x68>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f4 fc22 	bl	8000a20 <__aeabi_dcmpeq>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d146      	bne.n	800c26e <pow+0xd6>
 800c1e0:	ec45 4b10 	vmov	d0, r4, r5
 800c1e4:	f000 fe8d 	bl	800cf02 <finite>
 800c1e8:	b338      	cbz	r0, 800c23a <pow+0xa2>
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7f4 fc1f 	bl	8000a34 <__aeabi_dcmplt>
 800c1f6:	b300      	cbz	r0, 800c23a <pow+0xa2>
 800c1f8:	f7ff ff16 	bl	800c028 <__errno>
 800c1fc:	2322      	movs	r3, #34	; 0x22
 800c1fe:	e01b      	b.n	800c238 <pow+0xa0>
 800c200:	ec47 6b10 	vmov	d0, r6, r7
 800c204:	f000 fe7d 	bl	800cf02 <finite>
 800c208:	b9e0      	cbnz	r0, 800c244 <pow+0xac>
 800c20a:	eeb0 0a48 	vmov.f32	s0, s16
 800c20e:	eef0 0a68 	vmov.f32	s1, s17
 800c212:	f000 fe76 	bl	800cf02 <finite>
 800c216:	b1a8      	cbz	r0, 800c244 <pow+0xac>
 800c218:	ec45 4b10 	vmov	d0, r4, r5
 800c21c:	f000 fe71 	bl	800cf02 <finite>
 800c220:	b180      	cbz	r0, 800c244 <pow+0xac>
 800c222:	4632      	mov	r2, r6
 800c224:	463b      	mov	r3, r7
 800c226:	4630      	mov	r0, r6
 800c228:	4639      	mov	r1, r7
 800c22a:	f7f4 fc2b 	bl	8000a84 <__aeabi_dcmpun>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0e2      	beq.n	800c1f8 <pow+0x60>
 800c232:	f7ff fef9 	bl	800c028 <__errno>
 800c236:	2321      	movs	r3, #33	; 0x21
 800c238:	6003      	str	r3, [r0, #0]
 800c23a:	ecbd 8b02 	vpop	{d8}
 800c23e:	ec47 6b10 	vmov	d0, r6, r7
 800c242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c244:	2200      	movs	r2, #0
 800c246:	2300      	movs	r3, #0
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 fbe8 	bl	8000a20 <__aeabi_dcmpeq>
 800c250:	2800      	cmp	r0, #0
 800c252:	d0f2      	beq.n	800c23a <pow+0xa2>
 800c254:	eeb0 0a48 	vmov.f32	s0, s16
 800c258:	eef0 0a68 	vmov.f32	s1, s17
 800c25c:	f000 fe51 	bl	800cf02 <finite>
 800c260:	2800      	cmp	r0, #0
 800c262:	d0ea      	beq.n	800c23a <pow+0xa2>
 800c264:	ec45 4b10 	vmov	d0, r4, r5
 800c268:	f000 fe4b 	bl	800cf02 <finite>
 800c26c:	e7c3      	b.n	800c1f6 <pow+0x5e>
 800c26e:	4f01      	ldr	r7, [pc, #4]	; (800c274 <pow+0xdc>)
 800c270:	2600      	movs	r6, #0
 800c272:	e7e2      	b.n	800c23a <pow+0xa2>
 800c274:	3ff00000 	.word	0x3ff00000

0800c278 <sqrt>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	ed2d 8b02 	vpush	{d8}
 800c27e:	ec55 4b10 	vmov	r4, r5, d0
 800c282:	f000 fd53 	bl	800cd2c <__ieee754_sqrt>
 800c286:	4622      	mov	r2, r4
 800c288:	462b      	mov	r3, r5
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	eeb0 8a40 	vmov.f32	s16, s0
 800c292:	eef0 8a60 	vmov.f32	s17, s1
 800c296:	f7f4 fbf5 	bl	8000a84 <__aeabi_dcmpun>
 800c29a:	b990      	cbnz	r0, 800c2c2 <sqrt+0x4a>
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f7f4 fbc6 	bl	8000a34 <__aeabi_dcmplt>
 800c2a8:	b158      	cbz	r0, 800c2c2 <sqrt+0x4a>
 800c2aa:	f7ff febd 	bl	800c028 <__errno>
 800c2ae:	2321      	movs	r3, #33	; 0x21
 800c2b0:	6003      	str	r3, [r0, #0]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7f4 fa73 	bl	80007a4 <__aeabi_ddiv>
 800c2be:	ec41 0b18 	vmov	d8, r0, r1
 800c2c2:	eeb0 0a48 	vmov.f32	s0, s16
 800c2c6:	eef0 0a68 	vmov.f32	s1, s17
 800c2ca:	ecbd 8b02 	vpop	{d8}
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}

0800c2d0 <__ieee754_pow>:
 800c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	ed2d 8b06 	vpush	{d8-d10}
 800c2d8:	b089      	sub	sp, #36	; 0x24
 800c2da:	ed8d 1b00 	vstr	d1, [sp]
 800c2de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c2e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c2e6:	ea58 0102 	orrs.w	r1, r8, r2
 800c2ea:	ec57 6b10 	vmov	r6, r7, d0
 800c2ee:	d115      	bne.n	800c31c <__ieee754_pow+0x4c>
 800c2f0:	19b3      	adds	r3, r6, r6
 800c2f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c2f6:	4152      	adcs	r2, r2
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	4b89      	ldr	r3, [pc, #548]	; (800c520 <__ieee754_pow+0x250>)
 800c2fc:	4193      	sbcs	r3, r2
 800c2fe:	f080 84d2 	bcs.w	800cca6 <__ieee754_pow+0x9d6>
 800c302:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c306:	4630      	mov	r0, r6
 800c308:	4639      	mov	r1, r7
 800c30a:	f7f3 ff6b 	bl	80001e4 <__adddf3>
 800c30e:	ec41 0b10 	vmov	d0, r0, r1
 800c312:	b009      	add	sp, #36	; 0x24
 800c314:	ecbd 8b06 	vpop	{d8-d10}
 800c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31c:	4b81      	ldr	r3, [pc, #516]	; (800c524 <__ieee754_pow+0x254>)
 800c31e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c322:	429c      	cmp	r4, r3
 800c324:	ee10 aa10 	vmov	sl, s0
 800c328:	463d      	mov	r5, r7
 800c32a:	dc06      	bgt.n	800c33a <__ieee754_pow+0x6a>
 800c32c:	d101      	bne.n	800c332 <__ieee754_pow+0x62>
 800c32e:	2e00      	cmp	r6, #0
 800c330:	d1e7      	bne.n	800c302 <__ieee754_pow+0x32>
 800c332:	4598      	cmp	r8, r3
 800c334:	dc01      	bgt.n	800c33a <__ieee754_pow+0x6a>
 800c336:	d10f      	bne.n	800c358 <__ieee754_pow+0x88>
 800c338:	b172      	cbz	r2, 800c358 <__ieee754_pow+0x88>
 800c33a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c33e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c342:	ea55 050a 	orrs.w	r5, r5, sl
 800c346:	d1dc      	bne.n	800c302 <__ieee754_pow+0x32>
 800c348:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c34c:	18db      	adds	r3, r3, r3
 800c34e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c352:	4152      	adcs	r2, r2
 800c354:	429d      	cmp	r5, r3
 800c356:	e7d0      	b.n	800c2fa <__ieee754_pow+0x2a>
 800c358:	2d00      	cmp	r5, #0
 800c35a:	da3b      	bge.n	800c3d4 <__ieee754_pow+0x104>
 800c35c:	4b72      	ldr	r3, [pc, #456]	; (800c528 <__ieee754_pow+0x258>)
 800c35e:	4598      	cmp	r8, r3
 800c360:	dc51      	bgt.n	800c406 <__ieee754_pow+0x136>
 800c362:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c366:	4598      	cmp	r8, r3
 800c368:	f340 84ac 	ble.w	800ccc4 <__ieee754_pow+0x9f4>
 800c36c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c374:	2b14      	cmp	r3, #20
 800c376:	dd0f      	ble.n	800c398 <__ieee754_pow+0xc8>
 800c378:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c37c:	fa22 f103 	lsr.w	r1, r2, r3
 800c380:	fa01 f303 	lsl.w	r3, r1, r3
 800c384:	4293      	cmp	r3, r2
 800c386:	f040 849d 	bne.w	800ccc4 <__ieee754_pow+0x9f4>
 800c38a:	f001 0101 	and.w	r1, r1, #1
 800c38e:	f1c1 0302 	rsb	r3, r1, #2
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	b182      	cbz	r2, 800c3b8 <__ieee754_pow+0xe8>
 800c396:	e05f      	b.n	800c458 <__ieee754_pow+0x188>
 800c398:	2a00      	cmp	r2, #0
 800c39a:	d15b      	bne.n	800c454 <__ieee754_pow+0x184>
 800c39c:	f1c3 0314 	rsb	r3, r3, #20
 800c3a0:	fa48 f103 	asr.w	r1, r8, r3
 800c3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a8:	4543      	cmp	r3, r8
 800c3aa:	f040 8488 	bne.w	800ccbe <__ieee754_pow+0x9ee>
 800c3ae:	f001 0101 	and.w	r1, r1, #1
 800c3b2:	f1c1 0302 	rsb	r3, r1, #2
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	4b5c      	ldr	r3, [pc, #368]	; (800c52c <__ieee754_pow+0x25c>)
 800c3ba:	4598      	cmp	r8, r3
 800c3bc:	d132      	bne.n	800c424 <__ieee754_pow+0x154>
 800c3be:	f1b9 0f00 	cmp.w	r9, #0
 800c3c2:	f280 8478 	bge.w	800ccb6 <__ieee754_pow+0x9e6>
 800c3c6:	4959      	ldr	r1, [pc, #356]	; (800c52c <__ieee754_pow+0x25c>)
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	f7f4 f9e9 	bl	80007a4 <__aeabi_ddiv>
 800c3d2:	e79c      	b.n	800c30e <__ieee754_pow+0x3e>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9304      	str	r3, [sp, #16]
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	d13d      	bne.n	800c458 <__ieee754_pow+0x188>
 800c3dc:	4b51      	ldr	r3, [pc, #324]	; (800c524 <__ieee754_pow+0x254>)
 800c3de:	4598      	cmp	r8, r3
 800c3e0:	d1ea      	bne.n	800c3b8 <__ieee754_pow+0xe8>
 800c3e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c3e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c3ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c3ee:	f000 845a 	beq.w	800cca6 <__ieee754_pow+0x9d6>
 800c3f2:	4b4f      	ldr	r3, [pc, #316]	; (800c530 <__ieee754_pow+0x260>)
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	dd08      	ble.n	800c40a <__ieee754_pow+0x13a>
 800c3f8:	f1b9 0f00 	cmp.w	r9, #0
 800c3fc:	f2c0 8457 	blt.w	800ccae <__ieee754_pow+0x9de>
 800c400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c404:	e783      	b.n	800c30e <__ieee754_pow+0x3e>
 800c406:	2302      	movs	r3, #2
 800c408:	e7e5      	b.n	800c3d6 <__ieee754_pow+0x106>
 800c40a:	f1b9 0f00 	cmp.w	r9, #0
 800c40e:	f04f 0000 	mov.w	r0, #0
 800c412:	f04f 0100 	mov.w	r1, #0
 800c416:	f6bf af7a 	bge.w	800c30e <__ieee754_pow+0x3e>
 800c41a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c41e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c422:	e774      	b.n	800c30e <__ieee754_pow+0x3e>
 800c424:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c428:	d106      	bne.n	800c438 <__ieee754_pow+0x168>
 800c42a:	4632      	mov	r2, r6
 800c42c:	463b      	mov	r3, r7
 800c42e:	4630      	mov	r0, r6
 800c430:	4639      	mov	r1, r7
 800c432:	f7f4 f88d 	bl	8000550 <__aeabi_dmul>
 800c436:	e76a      	b.n	800c30e <__ieee754_pow+0x3e>
 800c438:	4b3e      	ldr	r3, [pc, #248]	; (800c534 <__ieee754_pow+0x264>)
 800c43a:	4599      	cmp	r9, r3
 800c43c:	d10c      	bne.n	800c458 <__ieee754_pow+0x188>
 800c43e:	2d00      	cmp	r5, #0
 800c440:	db0a      	blt.n	800c458 <__ieee754_pow+0x188>
 800c442:	ec47 6b10 	vmov	d0, r6, r7
 800c446:	b009      	add	sp, #36	; 0x24
 800c448:	ecbd 8b06 	vpop	{d8-d10}
 800c44c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	f000 bc6c 	b.w	800cd2c <__ieee754_sqrt>
 800c454:	2300      	movs	r3, #0
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	ec47 6b10 	vmov	d0, r6, r7
 800c45c:	f000 fd48 	bl	800cef0 <fabs>
 800c460:	ec51 0b10 	vmov	r0, r1, d0
 800c464:	f1ba 0f00 	cmp.w	sl, #0
 800c468:	d129      	bne.n	800c4be <__ieee754_pow+0x1ee>
 800c46a:	b124      	cbz	r4, 800c476 <__ieee754_pow+0x1a6>
 800c46c:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <__ieee754_pow+0x25c>)
 800c46e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c472:	429a      	cmp	r2, r3
 800c474:	d123      	bne.n	800c4be <__ieee754_pow+0x1ee>
 800c476:	f1b9 0f00 	cmp.w	r9, #0
 800c47a:	da05      	bge.n	800c488 <__ieee754_pow+0x1b8>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	2000      	movs	r0, #0
 800c482:	492a      	ldr	r1, [pc, #168]	; (800c52c <__ieee754_pow+0x25c>)
 800c484:	f7f4 f98e 	bl	80007a4 <__aeabi_ddiv>
 800c488:	2d00      	cmp	r5, #0
 800c48a:	f6bf af40 	bge.w	800c30e <__ieee754_pow+0x3e>
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c494:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c498:	4323      	orrs	r3, r4
 800c49a:	d108      	bne.n	800c4ae <__ieee754_pow+0x1de>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	f7f3 fe9c 	bl	80001e0 <__aeabi_dsub>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	e78f      	b.n	800c3ce <__ieee754_pow+0xfe>
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	f47f af2c 	bne.w	800c30e <__ieee754_pow+0x3e>
 800c4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	e727      	b.n	800c30e <__ieee754_pow+0x3e>
 800c4be:	0feb      	lsrs	r3, r5, #31
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	9306      	str	r3, [sp, #24]
 800c4c4:	9a06      	ldr	r2, [sp, #24]
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	d102      	bne.n	800c4d2 <__ieee754_pow+0x202>
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	e7e6      	b.n	800c4a0 <__ieee754_pow+0x1d0>
 800c4d2:	4b19      	ldr	r3, [pc, #100]	; (800c538 <__ieee754_pow+0x268>)
 800c4d4:	4598      	cmp	r8, r3
 800c4d6:	f340 80fb 	ble.w	800c6d0 <__ieee754_pow+0x400>
 800c4da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c4de:	4598      	cmp	r8, r3
 800c4e0:	4b13      	ldr	r3, [pc, #76]	; (800c530 <__ieee754_pow+0x260>)
 800c4e2:	dd0c      	ble.n	800c4fe <__ieee754_pow+0x22e>
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	dc0f      	bgt.n	800c508 <__ieee754_pow+0x238>
 800c4e8:	f1b9 0f00 	cmp.w	r9, #0
 800c4ec:	da0f      	bge.n	800c50e <__ieee754_pow+0x23e>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	b009      	add	sp, #36	; 0x24
 800c4f2:	ecbd 8b06 	vpop	{d8-d10}
 800c4f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fa:	f000 bcf0 	b.w	800cede <__math_oflow>
 800c4fe:	429c      	cmp	r4, r3
 800c500:	dbf2      	blt.n	800c4e8 <__ieee754_pow+0x218>
 800c502:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <__ieee754_pow+0x25c>)
 800c504:	429c      	cmp	r4, r3
 800c506:	dd19      	ble.n	800c53c <__ieee754_pow+0x26c>
 800c508:	f1b9 0f00 	cmp.w	r9, #0
 800c50c:	dcef      	bgt.n	800c4ee <__ieee754_pow+0x21e>
 800c50e:	2000      	movs	r0, #0
 800c510:	b009      	add	sp, #36	; 0x24
 800c512:	ecbd 8b06 	vpop	{d8-d10}
 800c516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	f000 bcd7 	b.w	800cecc <__math_uflow>
 800c51e:	bf00      	nop
 800c520:	fff00000 	.word	0xfff00000
 800c524:	7ff00000 	.word	0x7ff00000
 800c528:	433fffff 	.word	0x433fffff
 800c52c:	3ff00000 	.word	0x3ff00000
 800c530:	3fefffff 	.word	0x3fefffff
 800c534:	3fe00000 	.word	0x3fe00000
 800c538:	41e00000 	.word	0x41e00000
 800c53c:	4b60      	ldr	r3, [pc, #384]	; (800c6c0 <__ieee754_pow+0x3f0>)
 800c53e:	2200      	movs	r2, #0
 800c540:	f7f3 fe4e 	bl	80001e0 <__aeabi_dsub>
 800c544:	a354      	add	r3, pc, #336	; (adr r3, 800c698 <__ieee754_pow+0x3c8>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	4604      	mov	r4, r0
 800c54c:	460d      	mov	r5, r1
 800c54e:	f7f3 ffff 	bl	8000550 <__aeabi_dmul>
 800c552:	a353      	add	r3, pc, #332	; (adr r3, 800c6a0 <__ieee754_pow+0x3d0>)
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	4620      	mov	r0, r4
 800c55e:	4629      	mov	r1, r5
 800c560:	f7f3 fff6 	bl	8000550 <__aeabi_dmul>
 800c564:	4b57      	ldr	r3, [pc, #348]	; (800c6c4 <__ieee754_pow+0x3f4>)
 800c566:	4682      	mov	sl, r0
 800c568:	468b      	mov	fp, r1
 800c56a:	2200      	movs	r2, #0
 800c56c:	4620      	mov	r0, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	f7f3 ffee 	bl	8000550 <__aeabi_dmul>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	a14b      	add	r1, pc, #300	; (adr r1, 800c6a8 <__ieee754_pow+0x3d8>)
 800c57a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c57e:	f7f3 fe2f 	bl	80001e0 <__aeabi_dsub>
 800c582:	4622      	mov	r2, r4
 800c584:	462b      	mov	r3, r5
 800c586:	f7f3 ffe3 	bl	8000550 <__aeabi_dmul>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	2000      	movs	r0, #0
 800c590:	494d      	ldr	r1, [pc, #308]	; (800c6c8 <__ieee754_pow+0x3f8>)
 800c592:	f7f3 fe25 	bl	80001e0 <__aeabi_dsub>
 800c596:	4622      	mov	r2, r4
 800c598:	4680      	mov	r8, r0
 800c59a:	4689      	mov	r9, r1
 800c59c:	462b      	mov	r3, r5
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f3 ffd5 	bl	8000550 <__aeabi_dmul>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4640      	mov	r0, r8
 800c5ac:	4649      	mov	r1, r9
 800c5ae:	f7f3 ffcf 	bl	8000550 <__aeabi_dmul>
 800c5b2:	a33f      	add	r3, pc, #252	; (adr r3, 800c6b0 <__ieee754_pow+0x3e0>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 ffca 	bl	8000550 <__aeabi_dmul>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	4659      	mov	r1, fp
 800c5c4:	f7f3 fe0c 	bl	80001e0 <__aeabi_dsub>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	4639      	mov	r1, r7
 800c5d4:	f7f3 fe06 	bl	80001e4 <__adddf3>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4632      	mov	r2, r6
 800c5dc:	463b      	mov	r3, r7
 800c5de:	4604      	mov	r4, r0
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	f7f3 fdfd 	bl	80001e0 <__aeabi_dsub>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f7f3 fdf7 	bl	80001e0 <__aeabi_dsub>
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	9a06      	ldr	r2, [sp, #24]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	4682      	mov	sl, r0
 800c5fc:	468b      	mov	fp, r1
 800c5fe:	f040 81e7 	bne.w	800c9d0 <__ieee754_pow+0x700>
 800c602:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c6b8 <__ieee754_pow+0x3e8>
 800c606:	eeb0 8a47 	vmov.f32	s16, s14
 800c60a:	eef0 8a67 	vmov.f32	s17, s15
 800c60e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c612:	2600      	movs	r6, #0
 800c614:	4632      	mov	r2, r6
 800c616:	463b      	mov	r3, r7
 800c618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c61c:	f7f3 fde0 	bl	80001e0 <__aeabi_dsub>
 800c620:	4622      	mov	r2, r4
 800c622:	462b      	mov	r3, r5
 800c624:	f7f3 ff94 	bl	8000550 <__aeabi_dmul>
 800c628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c62c:	4680      	mov	r8, r0
 800c62e:	4689      	mov	r9, r1
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	f7f3 ff8c 	bl	8000550 <__aeabi_dmul>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4640      	mov	r0, r8
 800c63e:	4649      	mov	r1, r9
 800c640:	f7f3 fdd0 	bl	80001e4 <__adddf3>
 800c644:	4632      	mov	r2, r6
 800c646:	463b      	mov	r3, r7
 800c648:	4680      	mov	r8, r0
 800c64a:	4689      	mov	r9, r1
 800c64c:	4620      	mov	r0, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	f7f3 ff7e 	bl	8000550 <__aeabi_dmul>
 800c654:	460b      	mov	r3, r1
 800c656:	4604      	mov	r4, r0
 800c658:	460d      	mov	r5, r1
 800c65a:	4602      	mov	r2, r0
 800c65c:	4649      	mov	r1, r9
 800c65e:	4640      	mov	r0, r8
 800c660:	f7f3 fdc0 	bl	80001e4 <__adddf3>
 800c664:	4b19      	ldr	r3, [pc, #100]	; (800c6cc <__ieee754_pow+0x3fc>)
 800c666:	4299      	cmp	r1, r3
 800c668:	ec45 4b19 	vmov	d9, r4, r5
 800c66c:	4606      	mov	r6, r0
 800c66e:	460f      	mov	r7, r1
 800c670:	468b      	mov	fp, r1
 800c672:	f340 82f1 	ble.w	800cc58 <__ieee754_pow+0x988>
 800c676:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c67a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c67e:	4303      	orrs	r3, r0
 800c680:	f000 81e4 	beq.w	800ca4c <__ieee754_pow+0x77c>
 800c684:	ec51 0b18 	vmov	r0, r1, d8
 800c688:	2200      	movs	r2, #0
 800c68a:	2300      	movs	r3, #0
 800c68c:	f7f4 f9d2 	bl	8000a34 <__aeabi_dcmplt>
 800c690:	3800      	subs	r0, #0
 800c692:	bf18      	it	ne
 800c694:	2001      	movne	r0, #1
 800c696:	e72b      	b.n	800c4f0 <__ieee754_pow+0x220>
 800c698:	60000000 	.word	0x60000000
 800c69c:	3ff71547 	.word	0x3ff71547
 800c6a0:	f85ddf44 	.word	0xf85ddf44
 800c6a4:	3e54ae0b 	.word	0x3e54ae0b
 800c6a8:	55555555 	.word	0x55555555
 800c6ac:	3fd55555 	.word	0x3fd55555
 800c6b0:	652b82fe 	.word	0x652b82fe
 800c6b4:	3ff71547 	.word	0x3ff71547
 800c6b8:	00000000 	.word	0x00000000
 800c6bc:	bff00000 	.word	0xbff00000
 800c6c0:	3ff00000 	.word	0x3ff00000
 800c6c4:	3fd00000 	.word	0x3fd00000
 800c6c8:	3fe00000 	.word	0x3fe00000
 800c6cc:	408fffff 	.word	0x408fffff
 800c6d0:	4bd5      	ldr	r3, [pc, #852]	; (800ca28 <__ieee754_pow+0x758>)
 800c6d2:	402b      	ands	r3, r5
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	b92b      	cbnz	r3, 800c6e4 <__ieee754_pow+0x414>
 800c6d8:	4bd4      	ldr	r3, [pc, #848]	; (800ca2c <__ieee754_pow+0x75c>)
 800c6da:	f7f3 ff39 	bl	8000550 <__aeabi_dmul>
 800c6de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	1523      	asrs	r3, r4, #20
 800c6e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6ea:	4413      	add	r3, r2
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	4bd0      	ldr	r3, [pc, #832]	; (800ca30 <__ieee754_pow+0x760>)
 800c6f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c6f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c6f8:	429c      	cmp	r4, r3
 800c6fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c6fe:	dd08      	ble.n	800c712 <__ieee754_pow+0x442>
 800c700:	4bcc      	ldr	r3, [pc, #816]	; (800ca34 <__ieee754_pow+0x764>)
 800c702:	429c      	cmp	r4, r3
 800c704:	f340 8162 	ble.w	800c9cc <__ieee754_pow+0x6fc>
 800c708:	9b05      	ldr	r3, [sp, #20]
 800c70a:	3301      	adds	r3, #1
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c712:	2400      	movs	r4, #0
 800c714:	00e3      	lsls	r3, r4, #3
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	4bc7      	ldr	r3, [pc, #796]	; (800ca38 <__ieee754_pow+0x768>)
 800c71a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c71e:	ed93 7b00 	vldr	d7, [r3]
 800c722:	4629      	mov	r1, r5
 800c724:	ec53 2b17 	vmov	r2, r3, d7
 800c728:	eeb0 9a47 	vmov.f32	s18, s14
 800c72c:	eef0 9a67 	vmov.f32	s19, s15
 800c730:	4682      	mov	sl, r0
 800c732:	f7f3 fd55 	bl	80001e0 <__aeabi_dsub>
 800c736:	4652      	mov	r2, sl
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	462b      	mov	r3, r5
 800c73e:	ec51 0b19 	vmov	r0, r1, d9
 800c742:	f7f3 fd4f 	bl	80001e4 <__adddf3>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	2000      	movs	r0, #0
 800c74c:	49bb      	ldr	r1, [pc, #748]	; (800ca3c <__ieee754_pow+0x76c>)
 800c74e:	f7f4 f829 	bl	80007a4 <__aeabi_ddiv>
 800c752:	ec41 0b1a 	vmov	d10, r0, r1
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f3 fef7 	bl	8000550 <__aeabi_dmul>
 800c762:	2300      	movs	r3, #0
 800c764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c768:	9302      	str	r3, [sp, #8]
 800c76a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c76e:	46ab      	mov	fp, r5
 800c770:	106d      	asrs	r5, r5, #1
 800c772:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c776:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c77a:	ec41 0b18 	vmov	d8, r0, r1
 800c77e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c782:	2200      	movs	r2, #0
 800c784:	4640      	mov	r0, r8
 800c786:	4649      	mov	r1, r9
 800c788:	4614      	mov	r4, r2
 800c78a:	461d      	mov	r5, r3
 800c78c:	f7f3 fee0 	bl	8000550 <__aeabi_dmul>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f3 fd22 	bl	80001e0 <__aeabi_dsub>
 800c79c:	ec53 2b19 	vmov	r2, r3, d9
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f3 fd1a 	bl	80001e0 <__aeabi_dsub>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	4659      	mov	r1, fp
 800c7b4:	f7f3 fd14 	bl	80001e0 <__aeabi_dsub>
 800c7b8:	4642      	mov	r2, r8
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	f7f3 fec8 	bl	8000550 <__aeabi_dmul>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	f7f3 fd0a 	bl	80001e0 <__aeabi_dsub>
 800c7cc:	ec53 2b1a 	vmov	r2, r3, d10
 800c7d0:	f7f3 febe 	bl	8000550 <__aeabi_dmul>
 800c7d4:	ec53 2b18 	vmov	r2, r3, d8
 800c7d8:	ec41 0b19 	vmov	d9, r0, r1
 800c7dc:	ec51 0b18 	vmov	r0, r1, d8
 800c7e0:	f7f3 feb6 	bl	8000550 <__aeabi_dmul>
 800c7e4:	a37c      	add	r3, pc, #496	; (adr r3, 800c9d8 <__ieee754_pow+0x708>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	460d      	mov	r5, r1
 800c7ee:	f7f3 feaf 	bl	8000550 <__aeabi_dmul>
 800c7f2:	a37b      	add	r3, pc, #492	; (adr r3, 800c9e0 <__ieee754_pow+0x710>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	f7f3 fcf4 	bl	80001e4 <__adddf3>
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	462b      	mov	r3, r5
 800c800:	f7f3 fea6 	bl	8000550 <__aeabi_dmul>
 800c804:	a378      	add	r3, pc, #480	; (adr r3, 800c9e8 <__ieee754_pow+0x718>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	f7f3 fceb 	bl	80001e4 <__adddf3>
 800c80e:	4622      	mov	r2, r4
 800c810:	462b      	mov	r3, r5
 800c812:	f7f3 fe9d 	bl	8000550 <__aeabi_dmul>
 800c816:	a376      	add	r3, pc, #472	; (adr r3, 800c9f0 <__ieee754_pow+0x720>)
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f7f3 fce2 	bl	80001e4 <__adddf3>
 800c820:	4622      	mov	r2, r4
 800c822:	462b      	mov	r3, r5
 800c824:	f7f3 fe94 	bl	8000550 <__aeabi_dmul>
 800c828:	a373      	add	r3, pc, #460	; (adr r3, 800c9f8 <__ieee754_pow+0x728>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f3 fcd9 	bl	80001e4 <__adddf3>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	f7f3 fe8b 	bl	8000550 <__aeabi_dmul>
 800c83a:	a371      	add	r3, pc, #452	; (adr r3, 800ca00 <__ieee754_pow+0x730>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 fcd0 	bl	80001e4 <__adddf3>
 800c844:	4622      	mov	r2, r4
 800c846:	4606      	mov	r6, r0
 800c848:	460f      	mov	r7, r1
 800c84a:	462b      	mov	r3, r5
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	f7f3 fe7e 	bl	8000550 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f3 fe78 	bl	8000550 <__aeabi_dmul>
 800c860:	4642      	mov	r2, r8
 800c862:	4604      	mov	r4, r0
 800c864:	460d      	mov	r5, r1
 800c866:	464b      	mov	r3, r9
 800c868:	ec51 0b18 	vmov	r0, r1, d8
 800c86c:	f7f3 fcba 	bl	80001e4 <__adddf3>
 800c870:	ec53 2b19 	vmov	r2, r3, d9
 800c874:	f7f3 fe6c 	bl	8000550 <__aeabi_dmul>
 800c878:	4622      	mov	r2, r4
 800c87a:	462b      	mov	r3, r5
 800c87c:	f7f3 fcb2 	bl	80001e4 <__adddf3>
 800c880:	4642      	mov	r2, r8
 800c882:	4682      	mov	sl, r0
 800c884:	468b      	mov	fp, r1
 800c886:	464b      	mov	r3, r9
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f3 fe60 	bl	8000550 <__aeabi_dmul>
 800c890:	4b6b      	ldr	r3, [pc, #428]	; (800ca40 <__ieee754_pow+0x770>)
 800c892:	2200      	movs	r2, #0
 800c894:	4606      	mov	r6, r0
 800c896:	460f      	mov	r7, r1
 800c898:	f7f3 fca4 	bl	80001e4 <__adddf3>
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	f7f3 fca0 	bl	80001e4 <__adddf3>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	f7f3 fe4d 	bl	8000550 <__aeabi_dmul>
 800c8b6:	4b62      	ldr	r3, [pc, #392]	; (800ca40 <__ieee754_pow+0x770>)
 800c8b8:	4680      	mov	r8, r0
 800c8ba:	4689      	mov	r9, r1
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7f3 fc8d 	bl	80001e0 <__aeabi_dsub>
 800c8c6:	4632      	mov	r2, r6
 800c8c8:	463b      	mov	r3, r7
 800c8ca:	f7f3 fc89 	bl	80001e0 <__aeabi_dsub>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	f7f3 fc83 	bl	80001e0 <__aeabi_dsub>
 800c8da:	ec53 2b18 	vmov	r2, r3, d8
 800c8de:	f7f3 fe37 	bl	8000550 <__aeabi_dmul>
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	460f      	mov	r7, r1
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	ec51 0b19 	vmov	r0, r1, d9
 800c8ee:	f7f3 fe2f 	bl	8000550 <__aeabi_dmul>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	4639      	mov	r1, r7
 800c8fa:	f7f3 fc73 	bl	80001e4 <__adddf3>
 800c8fe:	4606      	mov	r6, r0
 800c900:	460f      	mov	r7, r1
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f3 fc6b 	bl	80001e4 <__adddf3>
 800c90e:	a33e      	add	r3, pc, #248	; (adr r3, 800ca08 <__ieee754_pow+0x738>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	2000      	movs	r0, #0
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7f3 fe19 	bl	8000550 <__aeabi_dmul>
 800c91e:	4642      	mov	r2, r8
 800c920:	ec41 0b18 	vmov	d8, r0, r1
 800c924:	464b      	mov	r3, r9
 800c926:	4620      	mov	r0, r4
 800c928:	4629      	mov	r1, r5
 800c92a:	f7f3 fc59 	bl	80001e0 <__aeabi_dsub>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fc53 	bl	80001e0 <__aeabi_dsub>
 800c93a:	a335      	add	r3, pc, #212	; (adr r3, 800ca10 <__ieee754_pow+0x740>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fe06 	bl	8000550 <__aeabi_dmul>
 800c944:	a334      	add	r3, pc, #208	; (adr r3, 800ca18 <__ieee754_pow+0x748>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4606      	mov	r6, r0
 800c94c:	460f      	mov	r7, r1
 800c94e:	4620      	mov	r0, r4
 800c950:	4629      	mov	r1, r5
 800c952:	f7f3 fdfd 	bl	8000550 <__aeabi_dmul>
 800c956:	4602      	mov	r2, r0
 800c958:	460b      	mov	r3, r1
 800c95a:	4630      	mov	r0, r6
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 fc41 	bl	80001e4 <__adddf3>
 800c962:	9a07      	ldr	r2, [sp, #28]
 800c964:	4b37      	ldr	r3, [pc, #220]	; (800ca44 <__ieee754_pow+0x774>)
 800c966:	4413      	add	r3, r2
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc3a 	bl	80001e4 <__adddf3>
 800c970:	4682      	mov	sl, r0
 800c972:	9805      	ldr	r0, [sp, #20]
 800c974:	468b      	mov	fp, r1
 800c976:	f7f3 fd81 	bl	800047c <__aeabi_i2d>
 800c97a:	9a07      	ldr	r2, [sp, #28]
 800c97c:	4b32      	ldr	r3, [pc, #200]	; (800ca48 <__ieee754_pow+0x778>)
 800c97e:	4413      	add	r3, r2
 800c980:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c984:	4606      	mov	r6, r0
 800c986:	460f      	mov	r7, r1
 800c988:	4652      	mov	r2, sl
 800c98a:	465b      	mov	r3, fp
 800c98c:	ec51 0b18 	vmov	r0, r1, d8
 800c990:	f7f3 fc28 	bl	80001e4 <__adddf3>
 800c994:	4642      	mov	r2, r8
 800c996:	464b      	mov	r3, r9
 800c998:	f7f3 fc24 	bl	80001e4 <__adddf3>
 800c99c:	4632      	mov	r2, r6
 800c99e:	463b      	mov	r3, r7
 800c9a0:	f7f3 fc20 	bl	80001e4 <__adddf3>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	f7f3 fc17 	bl	80001e0 <__aeabi_dsub>
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	f7f3 fc13 	bl	80001e0 <__aeabi_dsub>
 800c9ba:	ec53 2b18 	vmov	r2, r3, d8
 800c9be:	f7f3 fc0f 	bl	80001e0 <__aeabi_dsub>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4650      	mov	r0, sl
 800c9c8:	4659      	mov	r1, fp
 800c9ca:	e610      	b.n	800c5ee <__ieee754_pow+0x31e>
 800c9cc:	2401      	movs	r4, #1
 800c9ce:	e6a1      	b.n	800c714 <__ieee754_pow+0x444>
 800c9d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ca20 <__ieee754_pow+0x750>
 800c9d4:	e617      	b.n	800c606 <__ieee754_pow+0x336>
 800c9d6:	bf00      	nop
 800c9d8:	4a454eef 	.word	0x4a454eef
 800c9dc:	3fca7e28 	.word	0x3fca7e28
 800c9e0:	93c9db65 	.word	0x93c9db65
 800c9e4:	3fcd864a 	.word	0x3fcd864a
 800c9e8:	a91d4101 	.word	0xa91d4101
 800c9ec:	3fd17460 	.word	0x3fd17460
 800c9f0:	518f264d 	.word	0x518f264d
 800c9f4:	3fd55555 	.word	0x3fd55555
 800c9f8:	db6fabff 	.word	0xdb6fabff
 800c9fc:	3fdb6db6 	.word	0x3fdb6db6
 800ca00:	33333303 	.word	0x33333303
 800ca04:	3fe33333 	.word	0x3fe33333
 800ca08:	e0000000 	.word	0xe0000000
 800ca0c:	3feec709 	.word	0x3feec709
 800ca10:	dc3a03fd 	.word	0xdc3a03fd
 800ca14:	3feec709 	.word	0x3feec709
 800ca18:	145b01f5 	.word	0x145b01f5
 800ca1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ca20:	00000000 	.word	0x00000000
 800ca24:	3ff00000 	.word	0x3ff00000
 800ca28:	7ff00000 	.word	0x7ff00000
 800ca2c:	43400000 	.word	0x43400000
 800ca30:	0003988e 	.word	0x0003988e
 800ca34:	000bb679 	.word	0x000bb679
 800ca38:	0800d060 	.word	0x0800d060
 800ca3c:	3ff00000 	.word	0x3ff00000
 800ca40:	40080000 	.word	0x40080000
 800ca44:	0800d080 	.word	0x0800d080
 800ca48:	0800d070 	.word	0x0800d070
 800ca4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cd24 <__ieee754_pow+0xa54>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	4640      	mov	r0, r8
 800ca54:	4649      	mov	r1, r9
 800ca56:	f7f3 fbc5 	bl	80001e4 <__adddf3>
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	ec41 0b1a 	vmov	d10, r0, r1
 800ca60:	462b      	mov	r3, r5
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fbbb 	bl	80001e0 <__aeabi_dsub>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	ec51 0b1a 	vmov	r0, r1, d10
 800ca72:	f7f3 fffd 	bl	8000a70 <__aeabi_dcmpgt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f47f ae04 	bne.w	800c684 <__ieee754_pow+0x3b4>
 800ca7c:	4aa4      	ldr	r2, [pc, #656]	; (800cd10 <__ieee754_pow+0xa40>)
 800ca7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca82:	4293      	cmp	r3, r2
 800ca84:	f340 8108 	ble.w	800cc98 <__ieee754_pow+0x9c8>
 800ca88:	151b      	asrs	r3, r3, #20
 800ca8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ca8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ca92:	fa4a f303 	asr.w	r3, sl, r3
 800ca96:	445b      	add	r3, fp
 800ca98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca9c:	4e9d      	ldr	r6, [pc, #628]	; (800cd14 <__ieee754_pow+0xa44>)
 800ca9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800caa2:	4116      	asrs	r6, r2
 800caa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800caa8:	2000      	movs	r0, #0
 800caaa:	ea23 0106 	bic.w	r1, r3, r6
 800caae:	f1c2 0214 	rsb	r2, r2, #20
 800cab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cab6:	fa4a fa02 	asr.w	sl, sl, r2
 800caba:	f1bb 0f00 	cmp.w	fp, #0
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4620      	mov	r0, r4
 800cac4:	4629      	mov	r1, r5
 800cac6:	bfb8      	it	lt
 800cac8:	f1ca 0a00 	rsblt	sl, sl, #0
 800cacc:	f7f3 fb88 	bl	80001e0 <__aeabi_dsub>
 800cad0:	ec41 0b19 	vmov	d9, r0, r1
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	ec51 0b19 	vmov	r0, r1, d9
 800cadc:	f7f3 fb82 	bl	80001e4 <__adddf3>
 800cae0:	a37b      	add	r3, pc, #492	; (adr r3, 800ccd0 <__ieee754_pow+0xa00>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	2000      	movs	r0, #0
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	f7f3 fd30 	bl	8000550 <__aeabi_dmul>
 800caf0:	ec53 2b19 	vmov	r2, r3, d9
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7f3 fb70 	bl	80001e0 <__aeabi_dsub>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f3 fb6a 	bl	80001e0 <__aeabi_dsub>
 800cb0c:	a372      	add	r3, pc, #456	; (adr r3, 800ccd8 <__ieee754_pow+0xa08>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fd1d 	bl	8000550 <__aeabi_dmul>
 800cb16:	a372      	add	r3, pc, #456	; (adr r3, 800cce0 <__ieee754_pow+0xa10>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	4689      	mov	r9, r1
 800cb20:	4620      	mov	r0, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 fd14 	bl	8000550 <__aeabi_dmul>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	4649      	mov	r1, r9
 800cb30:	f7f3 fb58 	bl	80001e4 <__adddf3>
 800cb34:	4604      	mov	r4, r0
 800cb36:	460d      	mov	r5, r1
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f3 fb50 	bl	80001e4 <__adddf3>
 800cb44:	4632      	mov	r2, r6
 800cb46:	463b      	mov	r3, r7
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4689      	mov	r9, r1
 800cb4c:	f7f3 fb48 	bl	80001e0 <__aeabi_dsub>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fb42 	bl	80001e0 <__aeabi_dsub>
 800cb5c:	4642      	mov	r2, r8
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	464b      	mov	r3, r9
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 fcf2 	bl	8000550 <__aeabi_dmul>
 800cb6c:	a35e      	add	r3, pc, #376	; (adr r3, 800cce8 <__ieee754_pow+0xa18>)
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	4604      	mov	r4, r0
 800cb74:	460d      	mov	r5, r1
 800cb76:	f7f3 fceb 	bl	8000550 <__aeabi_dmul>
 800cb7a:	a35d      	add	r3, pc, #372	; (adr r3, 800ccf0 <__ieee754_pow+0xa20>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	f7f3 fb2e 	bl	80001e0 <__aeabi_dsub>
 800cb84:	4622      	mov	r2, r4
 800cb86:	462b      	mov	r3, r5
 800cb88:	f7f3 fce2 	bl	8000550 <__aeabi_dmul>
 800cb8c:	a35a      	add	r3, pc, #360	; (adr r3, 800ccf8 <__ieee754_pow+0xa28>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f7f3 fb27 	bl	80001e4 <__adddf3>
 800cb96:	4622      	mov	r2, r4
 800cb98:	462b      	mov	r3, r5
 800cb9a:	f7f3 fcd9 	bl	8000550 <__aeabi_dmul>
 800cb9e:	a358      	add	r3, pc, #352	; (adr r3, 800cd00 <__ieee754_pow+0xa30>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7f3 fb1c 	bl	80001e0 <__aeabi_dsub>
 800cba8:	4622      	mov	r2, r4
 800cbaa:	462b      	mov	r3, r5
 800cbac:	f7f3 fcd0 	bl	8000550 <__aeabi_dmul>
 800cbb0:	a355      	add	r3, pc, #340	; (adr r3, 800cd08 <__ieee754_pow+0xa38>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fb15 	bl	80001e4 <__adddf3>
 800cbba:	4622      	mov	r2, r4
 800cbbc:	462b      	mov	r3, r5
 800cbbe:	f7f3 fcc7 	bl	8000550 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f7f3 fb09 	bl	80001e0 <__aeabi_dsub>
 800cbce:	4604      	mov	r4, r0
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	f7f3 fcb9 	bl	8000550 <__aeabi_dmul>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	ec41 0b19 	vmov	d9, r0, r1
 800cbe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 faf8 	bl	80001e0 <__aeabi_dsub>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	ec51 0b19 	vmov	r0, r1, d9
 800cbf8:	f7f3 fdd4 	bl	80007a4 <__aeabi_ddiv>
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	463b      	mov	r3, r7
 800cc04:	4640      	mov	r0, r8
 800cc06:	4649      	mov	r1, r9
 800cc08:	f7f3 fca2 	bl	8000550 <__aeabi_dmul>
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	f7f3 fae8 	bl	80001e4 <__adddf3>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 fae0 	bl	80001e0 <__aeabi_dsub>
 800cc20:	4642      	mov	r2, r8
 800cc22:	464b      	mov	r3, r9
 800cc24:	f7f3 fadc 	bl	80001e0 <__aeabi_dsub>
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	493a      	ldr	r1, [pc, #232]	; (800cd18 <__ieee754_pow+0xa48>)
 800cc2e:	2000      	movs	r0, #0
 800cc30:	f7f3 fad6 	bl	80001e0 <__aeabi_dsub>
 800cc34:	ec41 0b10 	vmov	d0, r0, r1
 800cc38:	ee10 3a90 	vmov	r3, s1
 800cc3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cc40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc44:	da2b      	bge.n	800cc9e <__ieee754_pow+0x9ce>
 800cc46:	4650      	mov	r0, sl
 800cc48:	f000 f966 	bl	800cf18 <scalbn>
 800cc4c:	ec51 0b10 	vmov	r0, r1, d0
 800cc50:	ec53 2b18 	vmov	r2, r3, d8
 800cc54:	f7ff bbed 	b.w	800c432 <__ieee754_pow+0x162>
 800cc58:	4b30      	ldr	r3, [pc, #192]	; (800cd1c <__ieee754_pow+0xa4c>)
 800cc5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cc5e:	429e      	cmp	r6, r3
 800cc60:	f77f af0c 	ble.w	800ca7c <__ieee754_pow+0x7ac>
 800cc64:	4b2e      	ldr	r3, [pc, #184]	; (800cd20 <__ieee754_pow+0xa50>)
 800cc66:	440b      	add	r3, r1
 800cc68:	4303      	orrs	r3, r0
 800cc6a:	d009      	beq.n	800cc80 <__ieee754_pow+0x9b0>
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	2200      	movs	r2, #0
 800cc72:	2300      	movs	r3, #0
 800cc74:	f7f3 fede 	bl	8000a34 <__aeabi_dcmplt>
 800cc78:	3800      	subs	r0, #0
 800cc7a:	bf18      	it	ne
 800cc7c:	2001      	movne	r0, #1
 800cc7e:	e447      	b.n	800c510 <__ieee754_pow+0x240>
 800cc80:	4622      	mov	r2, r4
 800cc82:	462b      	mov	r3, r5
 800cc84:	f7f3 faac 	bl	80001e0 <__aeabi_dsub>
 800cc88:	4642      	mov	r2, r8
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	f7f3 fee6 	bl	8000a5c <__aeabi_dcmpge>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f43f aef3 	beq.w	800ca7c <__ieee754_pow+0x7ac>
 800cc96:	e7e9      	b.n	800cc6c <__ieee754_pow+0x99c>
 800cc98:	f04f 0a00 	mov.w	sl, #0
 800cc9c:	e71a      	b.n	800cad4 <__ieee754_pow+0x804>
 800cc9e:	ec51 0b10 	vmov	r0, r1, d0
 800cca2:	4619      	mov	r1, r3
 800cca4:	e7d4      	b.n	800cc50 <__ieee754_pow+0x980>
 800cca6:	491c      	ldr	r1, [pc, #112]	; (800cd18 <__ieee754_pow+0xa48>)
 800cca8:	2000      	movs	r0, #0
 800ccaa:	f7ff bb30 	b.w	800c30e <__ieee754_pow+0x3e>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	f7ff bb2c 	b.w	800c30e <__ieee754_pow+0x3e>
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	4639      	mov	r1, r7
 800ccba:	f7ff bb28 	b.w	800c30e <__ieee754_pow+0x3e>
 800ccbe:	9204      	str	r2, [sp, #16]
 800ccc0:	f7ff bb7a 	b.w	800c3b8 <__ieee754_pow+0xe8>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	f7ff bb64 	b.w	800c392 <__ieee754_pow+0xc2>
 800ccca:	bf00      	nop
 800cccc:	f3af 8000 	nop.w
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	3fe62e43 	.word	0x3fe62e43
 800ccd8:	fefa39ef 	.word	0xfefa39ef
 800ccdc:	3fe62e42 	.word	0x3fe62e42
 800cce0:	0ca86c39 	.word	0x0ca86c39
 800cce4:	be205c61 	.word	0xbe205c61
 800cce8:	72bea4d0 	.word	0x72bea4d0
 800ccec:	3e663769 	.word	0x3e663769
 800ccf0:	c5d26bf1 	.word	0xc5d26bf1
 800ccf4:	3ebbbd41 	.word	0x3ebbbd41
 800ccf8:	af25de2c 	.word	0xaf25de2c
 800ccfc:	3f11566a 	.word	0x3f11566a
 800cd00:	16bebd93 	.word	0x16bebd93
 800cd04:	3f66c16c 	.word	0x3f66c16c
 800cd08:	5555553e 	.word	0x5555553e
 800cd0c:	3fc55555 	.word	0x3fc55555
 800cd10:	3fe00000 	.word	0x3fe00000
 800cd14:	000fffff 	.word	0x000fffff
 800cd18:	3ff00000 	.word	0x3ff00000
 800cd1c:	4090cbff 	.word	0x4090cbff
 800cd20:	3f6f3400 	.word	0x3f6f3400
 800cd24:	652b82fe 	.word	0x652b82fe
 800cd28:	3c971547 	.word	0x3c971547

0800cd2c <__ieee754_sqrt>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	ec55 4b10 	vmov	r4, r5, d0
 800cd34:	4e55      	ldr	r6, [pc, #340]	; (800ce8c <__ieee754_sqrt+0x160>)
 800cd36:	43ae      	bics	r6, r5
 800cd38:	ee10 0a10 	vmov	r0, s0
 800cd3c:	ee10 3a10 	vmov	r3, s0
 800cd40:	462a      	mov	r2, r5
 800cd42:	4629      	mov	r1, r5
 800cd44:	d110      	bne.n	800cd68 <__ieee754_sqrt+0x3c>
 800cd46:	ee10 2a10 	vmov	r2, s0
 800cd4a:	462b      	mov	r3, r5
 800cd4c:	f7f3 fc00 	bl	8000550 <__aeabi_dmul>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4620      	mov	r0, r4
 800cd56:	4629      	mov	r1, r5
 800cd58:	f7f3 fa44 	bl	80001e4 <__adddf3>
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	460d      	mov	r5, r1
 800cd60:	ec45 4b10 	vmov	d0, r4, r5
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	2d00      	cmp	r5, #0
 800cd6a:	dc10      	bgt.n	800cd8e <__ieee754_sqrt+0x62>
 800cd6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd70:	4330      	orrs	r0, r6
 800cd72:	d0f5      	beq.n	800cd60 <__ieee754_sqrt+0x34>
 800cd74:	b15d      	cbz	r5, 800cd8e <__ieee754_sqrt+0x62>
 800cd76:	ee10 2a10 	vmov	r2, s0
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	ee10 0a10 	vmov	r0, s0
 800cd80:	f7f3 fa2e 	bl	80001e0 <__aeabi_dsub>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	f7f3 fd0c 	bl	80007a4 <__aeabi_ddiv>
 800cd8c:	e7e6      	b.n	800cd5c <__ieee754_sqrt+0x30>
 800cd8e:	1512      	asrs	r2, r2, #20
 800cd90:	d074      	beq.n	800ce7c <__ieee754_sqrt+0x150>
 800cd92:	07d4      	lsls	r4, r2, #31
 800cd94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cd98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cd9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cda0:	bf5e      	ittt	pl
 800cda2:	0fda      	lsrpl	r2, r3, #31
 800cda4:	005b      	lslpl	r3, r3, #1
 800cda6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cdaa:	2400      	movs	r4, #0
 800cdac:	0fda      	lsrs	r2, r3, #31
 800cdae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cdb2:	107f      	asrs	r7, r7, #1
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	2516      	movs	r5, #22
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cdbe:	1886      	adds	r6, r0, r2
 800cdc0:	428e      	cmp	r6, r1
 800cdc2:	bfde      	ittt	le
 800cdc4:	1b89      	suble	r1, r1, r6
 800cdc6:	18b0      	addle	r0, r6, r2
 800cdc8:	18a4      	addle	r4, r4, r2
 800cdca:	0049      	lsls	r1, r1, #1
 800cdcc:	3d01      	subs	r5, #1
 800cdce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cdd2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cdd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdda:	d1f0      	bne.n	800cdbe <__ieee754_sqrt+0x92>
 800cddc:	462a      	mov	r2, r5
 800cdde:	f04f 0e20 	mov.w	lr, #32
 800cde2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cde6:	4281      	cmp	r1, r0
 800cde8:	eb06 0c05 	add.w	ip, r6, r5
 800cdec:	dc02      	bgt.n	800cdf4 <__ieee754_sqrt+0xc8>
 800cdee:	d113      	bne.n	800ce18 <__ieee754_sqrt+0xec>
 800cdf0:	459c      	cmp	ip, r3
 800cdf2:	d811      	bhi.n	800ce18 <__ieee754_sqrt+0xec>
 800cdf4:	f1bc 0f00 	cmp.w	ip, #0
 800cdf8:	eb0c 0506 	add.w	r5, ip, r6
 800cdfc:	da43      	bge.n	800ce86 <__ieee754_sqrt+0x15a>
 800cdfe:	2d00      	cmp	r5, #0
 800ce00:	db41      	blt.n	800ce86 <__ieee754_sqrt+0x15a>
 800ce02:	f100 0801 	add.w	r8, r0, #1
 800ce06:	1a09      	subs	r1, r1, r0
 800ce08:	459c      	cmp	ip, r3
 800ce0a:	bf88      	it	hi
 800ce0c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ce10:	eba3 030c 	sub.w	r3, r3, ip
 800ce14:	4432      	add	r2, r6
 800ce16:	4640      	mov	r0, r8
 800ce18:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ce1c:	f1be 0e01 	subs.w	lr, lr, #1
 800ce20:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ce24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce2c:	d1db      	bne.n	800cde6 <__ieee754_sqrt+0xba>
 800ce2e:	430b      	orrs	r3, r1
 800ce30:	d006      	beq.n	800ce40 <__ieee754_sqrt+0x114>
 800ce32:	1c50      	adds	r0, r2, #1
 800ce34:	bf13      	iteet	ne
 800ce36:	3201      	addne	r2, #1
 800ce38:	3401      	addeq	r4, #1
 800ce3a:	4672      	moveq	r2, lr
 800ce3c:	f022 0201 	bicne.w	r2, r2, #1
 800ce40:	1063      	asrs	r3, r4, #1
 800ce42:	0852      	lsrs	r2, r2, #1
 800ce44:	07e1      	lsls	r1, r4, #31
 800ce46:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce4e:	bf48      	it	mi
 800ce50:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ce54:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ce58:	4614      	mov	r4, r2
 800ce5a:	e781      	b.n	800cd60 <__ieee754_sqrt+0x34>
 800ce5c:	0ad9      	lsrs	r1, r3, #11
 800ce5e:	3815      	subs	r0, #21
 800ce60:	055b      	lsls	r3, r3, #21
 800ce62:	2900      	cmp	r1, #0
 800ce64:	d0fa      	beq.n	800ce5c <__ieee754_sqrt+0x130>
 800ce66:	02cd      	lsls	r5, r1, #11
 800ce68:	d50a      	bpl.n	800ce80 <__ieee754_sqrt+0x154>
 800ce6a:	f1c2 0420 	rsb	r4, r2, #32
 800ce6e:	fa23 f404 	lsr.w	r4, r3, r4
 800ce72:	1e55      	subs	r5, r2, #1
 800ce74:	4093      	lsls	r3, r2
 800ce76:	4321      	orrs	r1, r4
 800ce78:	1b42      	subs	r2, r0, r5
 800ce7a:	e78a      	b.n	800cd92 <__ieee754_sqrt+0x66>
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	e7f0      	b.n	800ce62 <__ieee754_sqrt+0x136>
 800ce80:	0049      	lsls	r1, r1, #1
 800ce82:	3201      	adds	r2, #1
 800ce84:	e7ef      	b.n	800ce66 <__ieee754_sqrt+0x13a>
 800ce86:	4680      	mov	r8, r0
 800ce88:	e7bd      	b.n	800ce06 <__ieee754_sqrt+0xda>
 800ce8a:	bf00      	nop
 800ce8c:	7ff00000 	.word	0x7ff00000

0800ce90 <with_errno>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	4604      	mov	r4, r0
 800ce94:	460d      	mov	r5, r1
 800ce96:	4616      	mov	r6, r2
 800ce98:	f7ff f8c6 	bl	800c028 <__errno>
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	6006      	str	r6, [r0, #0]
 800cea0:	4620      	mov	r0, r4
 800cea2:	bd70      	pop	{r4, r5, r6, pc}

0800cea4 <xflow>:
 800cea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cea6:	4614      	mov	r4, r2
 800cea8:	461d      	mov	r5, r3
 800ceaa:	b108      	cbz	r0, 800ceb0 <xflow+0xc>
 800ceac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ceb0:	e9cd 2300 	strd	r2, r3, [sp]
 800ceb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb8:	4620      	mov	r0, r4
 800ceba:	4629      	mov	r1, r5
 800cebc:	f7f3 fb48 	bl	8000550 <__aeabi_dmul>
 800cec0:	2222      	movs	r2, #34	; 0x22
 800cec2:	b003      	add	sp, #12
 800cec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cec8:	f7ff bfe2 	b.w	800ce90 <with_errno>

0800cecc <__math_uflow>:
 800cecc:	b508      	push	{r3, lr}
 800cece:	2200      	movs	r2, #0
 800ced0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ced4:	f7ff ffe6 	bl	800cea4 <xflow>
 800ced8:	ec41 0b10 	vmov	d0, r0, r1
 800cedc:	bd08      	pop	{r3, pc}

0800cede <__math_oflow>:
 800cede:	b508      	push	{r3, lr}
 800cee0:	2200      	movs	r2, #0
 800cee2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cee6:	f7ff ffdd 	bl	800cea4 <xflow>
 800ceea:	ec41 0b10 	vmov	d0, r0, r1
 800ceee:	bd08      	pop	{r3, pc}

0800cef0 <fabs>:
 800cef0:	ec51 0b10 	vmov	r0, r1, d0
 800cef4:	ee10 2a10 	vmov	r2, s0
 800cef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cefc:	ec43 2b10 	vmov	d0, r2, r3
 800cf00:	4770      	bx	lr

0800cf02 <finite>:
 800cf02:	b082      	sub	sp, #8
 800cf04:	ed8d 0b00 	vstr	d0, [sp]
 800cf08:	9801      	ldr	r0, [sp, #4]
 800cf0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cf0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cf12:	0fc0      	lsrs	r0, r0, #31
 800cf14:	b002      	add	sp, #8
 800cf16:	4770      	bx	lr

0800cf18 <scalbn>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	ec55 4b10 	vmov	r4, r5, d0
 800cf1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cf22:	4606      	mov	r6, r0
 800cf24:	462b      	mov	r3, r5
 800cf26:	b99a      	cbnz	r2, 800cf50 <scalbn+0x38>
 800cf28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf2c:	4323      	orrs	r3, r4
 800cf2e:	d036      	beq.n	800cf9e <scalbn+0x86>
 800cf30:	4b39      	ldr	r3, [pc, #228]	; (800d018 <scalbn+0x100>)
 800cf32:	4629      	mov	r1, r5
 800cf34:	ee10 0a10 	vmov	r0, s0
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f7f3 fb09 	bl	8000550 <__aeabi_dmul>
 800cf3e:	4b37      	ldr	r3, [pc, #220]	; (800d01c <scalbn+0x104>)
 800cf40:	429e      	cmp	r6, r3
 800cf42:	4604      	mov	r4, r0
 800cf44:	460d      	mov	r5, r1
 800cf46:	da10      	bge.n	800cf6a <scalbn+0x52>
 800cf48:	a32b      	add	r3, pc, #172	; (adr r3, 800cff8 <scalbn+0xe0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	e03a      	b.n	800cfc6 <scalbn+0xae>
 800cf50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf54:	428a      	cmp	r2, r1
 800cf56:	d10c      	bne.n	800cf72 <scalbn+0x5a>
 800cf58:	ee10 2a10 	vmov	r2, s0
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 f940 	bl	80001e4 <__adddf3>
 800cf64:	4604      	mov	r4, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	e019      	b.n	800cf9e <scalbn+0x86>
 800cf6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf6e:	460b      	mov	r3, r1
 800cf70:	3a36      	subs	r2, #54	; 0x36
 800cf72:	4432      	add	r2, r6
 800cf74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf78:	428a      	cmp	r2, r1
 800cf7a:	dd08      	ble.n	800cf8e <scalbn+0x76>
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	a120      	add	r1, pc, #128	; (adr r1, 800d000 <scalbn+0xe8>)
 800cf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf84:	da1c      	bge.n	800cfc0 <scalbn+0xa8>
 800cf86:	a120      	add	r1, pc, #128	; (adr r1, 800d008 <scalbn+0xf0>)
 800cf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8c:	e018      	b.n	800cfc0 <scalbn+0xa8>
 800cf8e:	2a00      	cmp	r2, #0
 800cf90:	dd08      	ble.n	800cfa4 <scalbn+0x8c>
 800cf92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf9e:	ec45 4b10 	vmov	d0, r4, r5
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cfa8:	da19      	bge.n	800cfde <scalbn+0xc6>
 800cfaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cfae:	429e      	cmp	r6, r3
 800cfb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cfb4:	dd0a      	ble.n	800cfcc <scalbn+0xb4>
 800cfb6:	a112      	add	r1, pc, #72	; (adr r1, 800d000 <scalbn+0xe8>)
 800cfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1e2      	bne.n	800cf86 <scalbn+0x6e>
 800cfc0:	a30f      	add	r3, pc, #60	; (adr r3, 800d000 <scalbn+0xe8>)
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	f7f3 fac3 	bl	8000550 <__aeabi_dmul>
 800cfca:	e7cb      	b.n	800cf64 <scalbn+0x4c>
 800cfcc:	a10a      	add	r1, pc, #40	; (adr r1, 800cff8 <scalbn+0xe0>)
 800cfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0b8      	beq.n	800cf48 <scalbn+0x30>
 800cfd6:	a10e      	add	r1, pc, #56	; (adr r1, 800d010 <scalbn+0xf8>)
 800cfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfdc:	e7b4      	b.n	800cf48 <scalbn+0x30>
 800cfde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfe2:	3236      	adds	r2, #54	; 0x36
 800cfe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfec:	4620      	mov	r0, r4
 800cfee:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <scalbn+0x108>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	e7e8      	b.n	800cfc6 <scalbn+0xae>
 800cff4:	f3af 8000 	nop.w
 800cff8:	c2f8f359 	.word	0xc2f8f359
 800cffc:	01a56e1f 	.word	0x01a56e1f
 800d000:	8800759c 	.word	0x8800759c
 800d004:	7e37e43c 	.word	0x7e37e43c
 800d008:	8800759c 	.word	0x8800759c
 800d00c:	fe37e43c 	.word	0xfe37e43c
 800d010:	c2f8f359 	.word	0xc2f8f359
 800d014:	81a56e1f 	.word	0x81a56e1f
 800d018:	43500000 	.word	0x43500000
 800d01c:	ffff3cb0 	.word	0xffff3cb0
 800d020:	3c900000 	.word	0x3c900000

0800d024 <_init>:
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d026:	bf00      	nop
 800d028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02a:	bc08      	pop	{r3}
 800d02c:	469e      	mov	lr, r3
 800d02e:	4770      	bx	lr

0800d030 <_fini>:
 800d030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d032:	bf00      	nop
 800d034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d036:	bc08      	pop	{r3}
 800d038:	469e      	mov	lr, r3
 800d03a:	4770      	bx	lr
