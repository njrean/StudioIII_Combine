
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da84  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800dc20  0800dc20  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc70  0800dc70  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc70  0800dc70  0001dc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc78  0800dc78  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc78  0800dc78  0001dc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800dc80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000270  0800def0  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  0800def0  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bce  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  00035e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00038820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000398b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8e  00000000  00000000  0003a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013835  00000000  00000000  000512ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a90  00000000  00000000  00064b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f65b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  000f6678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fb1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000270 	.word	0x20000270
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dc04 	.word	0x0800dc04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000274 	.word	0x20000274
 80001d4:	0800dc04 	.word	0x0800dc04

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f005 f9af 	bl	8006200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f9bd 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fc0b 	bl	80016c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fbe1 	bl	8001670 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 fa1f 	bl	80012f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 fa4b 	bl	800134c <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb8b 	bl	80015d0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fae7 	bl	800148c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fb39 	bl	8001534 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fba9 	bl	8001618 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f005 fa0c 	bl	80062e4 <HAL_Delay>
  setmatrix();
 8000ecc:	f000 fffa 	bl	8001ec4 <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	48b5      	ldr	r0, [pc, #724]	; (80011a8 <main+0x310>)
 8000ed2:	f009 f907 	bl	800a0e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	48b3      	ldr	r0, [pc, #716]	; (80011a8 <main+0x310>)
 8000eda:	f009 fa19 	bl	800a310 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	48b2      	ldr	r0, [pc, #712]	; (80011ac <main+0x314>)
 8000ee2:	f009 fb6b 	bl	800a5bc <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	48b2      	ldr	r0, [pc, #712]	; (80011b0 <main+0x318>)
 8000ee8:	f009 f956 	bl	800a198 <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	48b1      	ldr	r0, [pc, #708]	; (80011b4 <main+0x31c>)
 8000eee:	f009 f953 	bl	800a198 <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	48b0      	ldr	r0, [pc, #704]	; (80011b8 <main+0x320>)
 8000ef8:	f006 f8d6 	bl	80070a8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <main+0x324>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08001079 	.word	0x08001079
 8000f10:	08000fb3 	.word	0x08000fb3
 8000f14:	08001141 	.word	0x08001141
 8000f18:	08000fcf 	.word	0x08000fcf
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000ff1 	.word	0x08000ff1
 8000f24:	08001053 	.word	0x08001053
		case Main:
			UART();
 8000f28:	f003 fece 	bl	8004cc8 <UART>
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2120      	movs	r1, #32
 8000f30:	48a1      	ldr	r0, [pc, #644]	; (80011b8 <main+0x320>)
 8000f32:	f006 f8b9 	bl	80070a8 <HAL_GPIO_WritePin>
			error1 = positive(theta_now - theta_0 - 0.0872665);
 8000f36:	4ba2      	ldr	r3, [pc, #648]	; (80011c0 <main+0x328>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fab0 	bl	80004a0 <__aeabi_f2d>
 8000f40:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <main+0x32c>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff f94b 	bl	80001e0 <__aeabi_dsub>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	a393      	add	r3, pc, #588	; (adr r3, 80011a0 <main+0x308>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff f942 	bl	80001e0 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fdc4 	bl	8000af0 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	ee00 3a10 	vmov	s0, r3
 8000f6e:	f003 fe71 	bl	8004c54 <positive>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <main+0x330>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
			error2 = positive(theta_now - theta_f);
 8000f7c:	4b90      	ldr	r3, [pc, #576]	; (80011c0 <main+0x328>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa8d 	bl	80004a0 <__aeabi_f2d>
 8000f86:	4b91      	ldr	r3, [pc, #580]	; (80011cc <main+0x334>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff f928 	bl	80001e0 <__aeabi_dsub>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fdaa 	bl	8000af0 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	ee00 3a10 	vmov	s0, r3
 8000fa2:	f003 fe57 	bl	8004c54 <positive>
 8000fa6:	eef0 7a40 	vmov.f32	s15, s0
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <main+0x338>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000fb0:	e0f2      	b.n	8001198 <main+0x300>
		case Home:
			UART();
 8000fb2:	f003 fe89 	bl	8004cc8 <UART>
			ReadEncoder();
 8000fb6:	f000 fc8f 	bl	80018d8 <ReadEncoder>
			SetHome();
 8000fba:	f000 fd1f 	bl	80019fc <SetHome>
			kalmanfilter();
 8000fbe:	f001 f9d9 	bl	8002374 <kalmanfilter>
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	487c      	ldr	r0, [pc, #496]	; (80011b8 <main+0x320>)
 8000fc8:	f006 f86e 	bl	80070a8 <HAL_GPIO_WritePin>
			break;
 8000fcc:	e0e4      	b.n	8001198 <main+0x300>
		case Emergency:
			UART();
 8000fce:	f003 fe7b 	bl	8004cc8 <UART>
			if(Emergency_status == 1){
 8000fd2:	4b80      	ldr	r3, [pc, #512]	; (80011d4 <main+0x33c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d106      	bne.n	8000fe8 <main+0x150>
				Arm_State = Emergency;
 8000fda:	4b78      	ldr	r3, [pc, #480]	; (80011bc <main+0x324>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000fe0:	4b7d      	ldr	r3, [pc, #500]	; (80011d8 <main+0x340>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000fe6:	e0d7      	b.n	8001198 <main+0x300>
				Arm_State = Main;
 8000fe8:	4b74      	ldr	r3, [pc, #464]	; (80011bc <main+0x324>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	701a      	strb	r2, [r3, #0]
			break;
 8000fee:	e0d3      	b.n	8001198 <main+0x300>
		case Setzero:
			UART();
 8000ff0:	f003 fe6a 	bl	8004cc8 <UART>

			if(micros() - timestamp > 2000000){
 8000ff4:	f000 fe2a 	bl	8001c4c <micros>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4977      	ldr	r1, [pc, #476]	; (80011dc <main+0x344>)
 8000ffe:	6809      	ldr	r1, [r1, #0]
 8001000:	2000      	movs	r0, #0
 8001002:	4688      	mov	r8, r1
 8001004:	4681      	mov	r9, r0
 8001006:	ebb2 0408 	subs.w	r4, r2, r8
 800100a:	eb63 0509 	sbc.w	r5, r3, r9
 800100e:	4b74      	ldr	r3, [pc, #464]	; (80011e0 <main+0x348>)
 8001010:	429c      	cmp	r4, r3
 8001012:	f175 0300 	sbcs.w	r3, r5, #0
 8001016:	f0c0 80ba 	bcc.w	800118e <main+0x2f6>
				if (SetZeroState)
 800101a:	4b72      	ldr	r3, [pc, #456]	; (80011e4 <main+0x34c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <main+0x1a8>
				{
					TIM3->CNT = 0;
 8001022:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <main+0x350>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
					angle_base = 0;
 8001028:	4b70      	ldr	r3, [pc, #448]	; (80011ec <main+0x354>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
					angle = 0;
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <main+0x358>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
					theta_now = 0;
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <main+0x328>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	485c      	ldr	r0, [pc, #368]	; (80011b8 <main+0x320>)
 8001046:	f006 f82f 	bl	80070a8 <HAL_GPIO_WritePin>
				Arm_State = Main;
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <main+0x324>)
 800104c:	2204      	movs	r2, #4
 800104e:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8001050:	e09d      	b.n	800118e <main+0x2f6>
		case PrepareRun:
			Finish=0;
 8001052:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <main+0x340>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2120      	movs	r1, #32
 800105c:	4856      	ldr	r0, [pc, #344]	; (80011b8 <main+0x320>)
 800105e:	f006 f823 	bl	80070a8 <HAL_GPIO_WritePin>
			UART();
 8001062:	f003 fe31 	bl	8004cc8 <UART>
			TrajectoryGenerator_Flag=1;
 8001066:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <main+0x35c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 800106c:	f001 f9a4 	bl	80023b8 <TrajectoryGenerator>
			Arm_State = Run;
 8001070:	4b52      	ldr	r3, [pc, #328]	; (80011bc <main+0x324>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
			break;
 8001076:	e08f      	b.n	8001198 <main+0x300>
		case Run:
			UART();
 8001078:	f003 fe26 	bl	8004cc8 <UART>
			if(Go_Flag == 0){
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <main+0x360>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 8086 	bne.w	8001192 <main+0x2fa>
				if(ModeN==1){
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <main+0x364>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d14e      	bne.n	800112c <main+0x294>
					if(n_station >= n_station_max-1){
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <main+0x368>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <main+0x36c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	429a      	cmp	r2, r3
 800109c:	db0c      	blt.n	80010b8 <main+0x220>
						Arm_State = EndEffector;
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <main+0x324>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <main+0x370>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 80010aa:	4b54      	ldr	r3, [pc, #336]	; (80011fc <main+0x364>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <main+0x340>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e005      	b.n	80010c4 <main+0x22c>
					}
					else{
						n_station++;
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <main+0x368>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <main+0x368>)
 80010c2:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <main+0x324>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <main+0x370>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
//					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
					theta_f = rad_station[(uint8_t)floor(station[index_station[n_station]-1]/5)];
 80010d0:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <main+0x368>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <main+0x374>)
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	3b01      	subs	r3, #1
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <main+0x378>)
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80010ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ee:	ee16 0a90 	vmov	r0, s13
 80010f2:	f7ff f9d5 	bl	80004a0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	ec43 2b10 	vmov	d0, r2, r3
 80010fe:	f00b fdbb 	bl	800cc78 <floor>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fcd1 	bl	8000ab0 <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4a40      	ldr	r2, [pc, #256]	; (8001214 <main+0x37c>)
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9c0 	bl	80004a0 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4929      	ldr	r1, [pc, #164]	; (80011cc <main+0x334>)
 8001126:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 800112a:	e032      	b.n	8001192 <main+0x2fa>
					Arm_State = EndEffector;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <main+0x324>)
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <main+0x370>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
					Finish =1;
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <main+0x340>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
			break;
 800113e:	e028      	b.n	8001192 <main+0x2fa>
		case EndEffector:
			UART();
 8001140:	f003 fdc2 	bl	8004cc8 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 8001144:	4b34      	ldr	r3, [pc, #208]	; (8001218 <main+0x380>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d111      	bne.n	8001170 <main+0x2d8>
			{
				OpenEndEffector();
 800114c:	f004 fb96 	bl	800587c <OpenEndEffector>
				if(EndEffector_State == State_wait){
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <main+0x384>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d11e      	bne.n	8001196 <main+0x2fe>
					if(ModeN==1){
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <main+0x364>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d103      	bne.n	8001168 <main+0x2d0>
						Arm_State = PrepareRun;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <main+0x324>)
 8001162:	2206      	movs	r2, #6
 8001164:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001166:	e016      	b.n	8001196 <main+0x2fe>
						Arm_State = Main;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <main+0x324>)
 800116a:	2204      	movs	r2, #4
 800116c:	701a      	strb	r2, [r3, #0]
			break;
 800116e:	e012      	b.n	8001196 <main+0x2fe>
				FlagOpen_EndEffector =0;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <main+0x370>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <main+0x364>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <main+0x2ee>
					Arm_State = PrepareRun;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <main+0x324>)
 8001180:	2206      	movs	r2, #6
 8001182:	701a      	strb	r2, [r3, #0]
			break;
 8001184:	e007      	b.n	8001196 <main+0x2fe>
					Arm_State = Main;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <main+0x324>)
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
			break;
 800118c:	e003      	b.n	8001196 <main+0x2fe>
			break;
 800118e:	bf00      	nop
 8001190:	e6b4      	b.n	8000efc <main+0x64>
			break;
 8001192:	bf00      	nop
 8001194:	e6b2      	b.n	8000efc <main+0x64>
			break;
 8001196:	bf00      	nop
	  switch (Arm_State) {
 8001198:	e6b0      	b.n	8000efc <main+0x64>
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	eb895076 	.word	0xeb895076
 80011a4:	3fb65718 	.word	0x3fb65718
 80011a8:	200002e0 	.word	0x200002e0
 80011ac:	20000328 	.word	0x20000328
 80011b0:	20000370 	.word	0x20000370
 80011b4:	200003b8 	.word	0x200003b8
 80011b8:	40020400 	.word	0x40020400
 80011bc:	200001f7 	.word	0x200001f7
 80011c0:	20000524 	.word	0x20000524
 80011c4:	200006f8 	.word	0x200006f8
 80011c8:	20000800 	.word	0x20000800
 80011cc:	20000700 	.word	0x20000700
 80011d0:	20000804 	.word	0x20000804
 80011d4:	20000517 	.word	0x20000517
 80011d8:	200007d9 	.word	0x200007d9
 80011dc:	200007f4 	.word	0x200007f4
 80011e0:	001e8481 	.word	0x001e8481
 80011e4:	20000090 	.word	0x20000090
 80011e8:	40000400 	.word	0x40000400
 80011ec:	20000530 	.word	0x20000530
 80011f0:	2000051c 	.word	0x2000051c
 80011f4:	20000516 	.word	0x20000516
 80011f8:	20000515 	.word	0x20000515
 80011fc:	200007d8 	.word	0x200007d8
 8001200:	200001f6 	.word	0x200001f6
 8001204:	200001f5 	.word	0x200001f5
 8001208:	200007ec 	.word	0x200007ec
 800120c:	200007dc 	.word	0x200007dc
 8001210:	200000ac 	.word	0x200000ac
 8001214:	200000d4 	.word	0x200000d4
 8001218:	200007cf 	.word	0x200007cf
 800121c:	200001f8 	.word	0x200001f8

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00b fd1a 	bl	800cc68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <SystemClock_Config+0xc8>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <SystemClock_Config+0xc8>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <SystemClock_Config+0xc8>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <SystemClock_Config+0xcc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <SystemClock_Config+0xcc>)
 800126a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemClock_Config+0xcc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f008 fa35 	bl	8009714 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b0:	f004 fcbe 	bl	8005c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2103      	movs	r1, #3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 fc97 	bl	8009c04 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012dc:	f004 fca8 	bl	8005c30 <Error_Handler>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3750      	adds	r7, #80	; 0x50
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f005 ff07 	bl	8007140 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f004 fc7a 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000028c 	.word	0x2000028c
 8001344:	40005400 	.word	0x40005400
 8001348:	00061a80 	.word	0x00061a80

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f00b fc6f 	bl	800cc68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <MX_TIM1_Init+0x138>)
 800138c:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <MX_TIM1_Init+0x13c>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_TIM1_Init+0x138>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <MX_TIM1_Init+0x138>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <MX_TIM1_Init+0x138>)
 800139e:	f241 3287 	movw	r2, #4999	; 0x1387
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <MX_TIM1_Init+0x138>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <MX_TIM1_Init+0x138>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <MX_TIM1_Init+0x138>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b6:	4833      	ldr	r0, [pc, #204]	; (8001484 <MX_TIM1_Init+0x138>)
 80013b8:	f008 fe44 	bl	800a044 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013c2:	f004 fc35 	bl	8005c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d0:	4619      	mov	r1, r3
 80013d2:	482c      	ldr	r0, [pc, #176]	; (8001484 <MX_TIM1_Init+0x138>)
 80013d4:	f009 fb4a 	bl	800aa6c <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013de:	f004 fc27 	bl	8005c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e2:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_TIM1_Init+0x138>)
 80013e4:	f008 ff3a 	bl	800a25c <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ee:	f004 fc1f 	bl	8005c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fe:	4619      	mov	r1, r3
 8001400:	4820      	ldr	r0, [pc, #128]	; (8001484 <MX_TIM1_Init+0x138>)
 8001402:	f009 feef 	bl	800b1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800140c:	f004 fc10 	bl	8005c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <MX_TIM1_Init+0x138>)
 8001436:	f009 fa57 	bl	800a8e8 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001440:	f004 fbf6 	bl	8005c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM1_Init+0x138>)
 8001468:	f009 ff2a 	bl	800b2c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001472:	f004 fbdd 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM1_Init+0x138>)
 8001478:	f004 fd0c 	bl	8005e94 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3758      	adds	r7, #88	; 0x58
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002e0 	.word	0x200002e0
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2224      	movs	r2, #36	; 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f00b fbe4 	bl	800cc68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_TIM3_Init+0xa0>)
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <MX_TIM3_Init+0xa4>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_TIM3_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_TIM3_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_TIM3_Init+0xa0>)
 80014bc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_TIM3_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM3_Init+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ce:	2303      	movs	r3, #3
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM3_Init+0xa0>)
 80014fa:	f008 ffb9 	bl	800a470 <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001504:	f004 fb94 	bl	8005c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM3_Init+0xa0>)
 8001516:	f009 fe65 	bl	800b1e4 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001520:	f004 fb86 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000328 	.word	0x20000328
 8001530:	40000400 	.word	0x40000400

08001534 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_TIM4_Init+0x98>)
 8001554:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001558:	2209      	movs	r2, #9
 800155a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM4_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001564:	f242 720f 	movw	r2, #9999	; 0x270f
 8001568:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_TIM4_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001578:	f008 fd64 	bl	800a044 <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001582:	f004 fb55 	bl	8005c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_TIM4_Init+0x94>)
 8001594:	f009 fa6a 	bl	800aa6c <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800159e:	f004 fb47 	bl	8005c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_TIM4_Init+0x94>)
 80015b0:	f009 fe18 	bl	800b1e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015ba:	f004 fb39 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000370 	.word	0x20000370
 80015cc:	40000800 	.word	0x40000800

080015d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_TIM11_Init+0x40>)
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <MX_TIM11_Init+0x44>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <MX_TIM11_Init+0x40>)
 80015dc:	2263      	movs	r2, #99	; 0x63
 80015de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_TIM11_Init+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_TIM11_Init+0x40>)
 80015e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_TIM11_Init+0x40>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_TIM11_Init+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM11_Init+0x40>)
 80015fc:	f008 fd22 	bl	800a044 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001606:	f004 fb13 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003b8 	.word	0x200003b8
 8001614:	40014800 	.word	0x40014800

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <MX_USART2_UART_Init+0x54>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001624:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USART2_UART_Init+0x50>)
 800162c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001630:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x50>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001654:	f009 fe9a 	bl	800b38c <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800165e:	f004 fae7 	bl	8005c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000400 	.word	0x20000400
 800166c:	40004400 	.word	0x40004400

08001670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_DMA_Init+0x4c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <MX_DMA_Init+0x4c>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <MX_DMA_Init+0x4c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2010      	movs	r0, #16
 8001698:	f004 ff23 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800169c:	2010      	movs	r0, #16
 800169e:	f004 ff3c 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2011      	movs	r0, #17
 80016a8:	f004 ff1b 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016ac:	2011      	movs	r0, #17
 80016ae:	f004 ff34 	bl	800651a <HAL_NVIC_EnableIRQ>

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <MX_GPIO_Init+0x17c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a57      	ldr	r2, [pc, #348]	; (800183c <MX_GPIO_Init+0x17c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <MX_GPIO_Init+0x17c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <MX_GPIO_Init+0x17c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a50      	ldr	r2, [pc, #320]	; (800183c <MX_GPIO_Init+0x17c>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <MX_GPIO_Init+0x17c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b4a      	ldr	r3, [pc, #296]	; (800183c <MX_GPIO_Init+0x17c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <MX_GPIO_Init+0x17c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <MX_GPIO_Init+0x17c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <MX_GPIO_Init+0x17c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a42      	ldr	r2, [pc, #264]	; (800183c <MX_GPIO_Init+0x17c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b40      	ldr	r3, [pc, #256]	; (800183c <MX_GPIO_Init+0x17c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2120      	movs	r1, #32
 800174a:	483d      	ldr	r0, [pc, #244]	; (8001840 <MX_GPIO_Init+0x180>)
 800174c:	f005 fcac 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001756:	483b      	ldr	r0, [pc, #236]	; (8001844 <MX_GPIO_Init+0x184>)
 8001758:	f005 fca6 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4835      	ldr	r0, [pc, #212]	; (8001848 <MX_GPIO_Init+0x188>)
 8001774:	f005 fafc 	bl	8006d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001778:	2304      	movs	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800177c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001782:	2302      	movs	r3, #2
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	482e      	ldr	r0, [pc, #184]	; (8001848 <MX_GPIO_Init+0x188>)
 800178e:	f005 faef 	bl	8006d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001792:	2320      	movs	r3, #32
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4825      	ldr	r0, [pc, #148]	; (8001840 <MX_GPIO_Init+0x180>)
 80017aa:	f005 fae1 	bl	8006d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	481f      	ldr	r0, [pc, #124]	; (8001844 <MX_GPIO_Init+0x184>)
 80017c8:	f005 fad2 	bl	8006d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4818      	ldr	r0, [pc, #96]	; (8001844 <MX_GPIO_Init+0x184>)
 80017e2:	f005 fac5 	bl	8006d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 80017e6:	2320      	movs	r3, #32
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017ea:	2311      	movs	r3, #17
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <MX_GPIO_Init+0x184>)
 80017fe:	f005 fab7 	bl	8006d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2008      	movs	r0, #8
 8001808:	f004 fe6b 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800180c:	2008      	movs	r0, #8
 800180e:	f004 fe84 	bl	800651a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	200a      	movs	r0, #10
 8001818:	f004 fe63 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800181c:	200a      	movs	r0, #10
 800181e:	f004 fe7c 	bl	800651a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2028      	movs	r0, #40	; 0x28
 8001828:	f004 fe5b 	bl	80064e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800182c:	2028      	movs	r0, #40	; 0x28
 800182e:	f004 fe74 	bl	800651a <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400
 8001848:	40020800 	.word	0x40020800
 800184c:	00000000 	.word	0x00000000

08001850 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	ed87 0a01 	vstr	s0, [r7, #4]
 800185a:	4603      	mov	r3, r0
 800185c:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;
	PWMOut = (volt*5000.0)/24.0;
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fe1e 	bl	80004a0 <__aeabi_f2d>
 8001864:	a31a      	add	r3, pc, #104	; (adr r3, 80018d0 <RunMotor+0x80>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fe71 	bl	8000550 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <RunMotor+0x70>)
 800187c:	f7fe ff92 	bl	80007a4 <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f932 	bl	8000af0 <__aeabi_d2f>
 800188c:	4603      	mov	r3, r0
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <RunMotor+0x74>)
 8001890:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	461a      	mov	r2, r3
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <RunMotor+0x78>)
 800189c:	f005 fc04 	bl	80070a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <RunMotor+0x74>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <RunMotor+0x7c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ae:	ee17 2a90 	vmov	r2, s15
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	f3af 8000 	nop.w
 80018c0:	40380000 	.word	0x40380000
 80018c4:	20000834 	.word	0x20000834
 80018c8:	40020400 	.word	0x40020400
 80018cc:	200002e0 	.word	0x200002e0
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40b38800 	.word	0x40b38800

080018d8 <ReadEncoder>:

void ReadEncoder()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	angle_before = angle;
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <ReadEncoder+0x100>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3e      	ldr	r2, [pc, #248]	; (80019dc <ReadEncoder+0x104>)
 80018e2:	6013      	str	r3, [r2, #0]
	angle_sum_before = theta_now;
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <ReadEncoder+0x108>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3e      	ldr	r2, [pc, #248]	; (80019e4 <ReadEncoder+0x10c>)
 80018ea:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2.0*M_PI);
 80018ec:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <ReadEncoder+0x110>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fdb3 	bl	800045c <__aeabi_ui2d>
 80018f6:	a334      	add	r3, pc, #208	; (adr r3, 80019c8 <ReadEncoder+0xf0>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe ff52 	bl	80007a4 <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	a331      	add	r3, pc, #196	; (adr r3, 80019d0 <ReadEncoder+0xf8>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe1f 	bl	8000550 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f8e9 	bl	8000af0 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <ReadEncoder+0x100>)
 8001922:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <ReadEncoder+0x114>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <ReadEncoder+0x118>)
 800192a:	6013      	str	r3, [r2, #0]
	if ((angle - angle_before) <= -threshold)
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <ReadEncoder+0x100>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <ReadEncoder+0x104>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <ReadEncoder+0x11c>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	eef1 7a67 	vneg.f32	s15, s15
 8001946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d80b      	bhi.n	8001968 <ReadEncoder+0x90>
	{
		angle_base = angle_base_before + angle_max;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <ReadEncoder+0x118>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <ReadEncoder+0x120>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <ReadEncoder+0x114>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
 8001966:	e01f      	b.n	80019a8 <ReadEncoder+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <ReadEncoder+0x100>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <ReadEncoder+0x104>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <ReadEncoder+0x11c>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	db0b      	blt.n	80019a0 <ReadEncoder+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <ReadEncoder+0x118>)
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <ReadEncoder+0x120>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <ReadEncoder+0x114>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
 800199e:	e003      	b.n	80019a8 <ReadEncoder+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <ReadEncoder+0x118>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <ReadEncoder+0x114>)
 80019a6:	6013      	str	r3, [r2, #0]
	}

	theta_now = angle + angle_base;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <ReadEncoder+0x100>)
 80019aa:	ed93 7a00 	vldr	s14, [r3]
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <ReadEncoder+0x114>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <ReadEncoder+0x108>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40bfff00 	.word	0x40bfff00
 80019d0:	54442d18 	.word	0x54442d18
 80019d4:	401921fb 	.word	0x401921fb
 80019d8:	2000051c 	.word	0x2000051c
 80019dc:	20000520 	.word	0x20000520
 80019e0:	20000524 	.word	0x20000524
 80019e4:	20000528 	.word	0x20000528
 80019e8:	40000400 	.word	0x40000400
 80019ec:	20000530 	.word	0x20000530
 80019f0:	2000052c 	.word	0x2000052c
 80019f4:	20000004 	.word	0x20000004
 80019f8:	20000008 	.word	0x20000008

080019fc <SetHome>:
	alpha_tosensor = (omega_tosensor[0]-omega_tosensor[1])/dt;
	omega_tosensor[1] = omega_tosensor[0];
}

void SetHome()
{
 80019fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a00:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Proximity_GPIO_Port, Proximity_Pin) == GPIO_PIN_RESET && AlSet_Flag == 2)
 8001a02:	2104      	movs	r1, #4
 8001a04:	483f      	ldr	r0, [pc, #252]	; (8001b04 <SetHome+0x108>)
 8001a06:	f005 fb37 	bl	8007078 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d106      	bne.n	8001a1e <SetHome+0x22>
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <SetHome+0x10c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d102      	bne.n	8001a1e <SetHome+0x22>
	{
		SetHome_Flag = 2;
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <SetHome+0x110>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
	}

	if(SetHome_Flag == 1)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <SetHome+0x110>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d118      	bne.n	8001a58 <SetHome+0x5c>
	{
		volt = 6 - volt_mass;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <SetHome+0x114>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <SetHome+0x118>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
		RunMotor(volt, counterclockwise);
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <SetHome+0x118>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	2000      	movs	r0, #0
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	f7ff ff03 	bl	8001850 <RunMotor>
		AlSet_Flag = 1;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <SetHome+0x10c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <SetHome+0x110>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
			AlSet_Flag = 0;
			SetHome_Flag = 0;
		}

	}
}
 8001a56:	e051      	b.n	8001afc <SetHome+0x100>
	else if(SetHome_Flag == 2)
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <SetHome+0x110>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d14d      	bne.n	8001afc <SetHome+0x100>
		if(Mass_Flag == 1){
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <SetHome+0x11c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d138      	bne.n	8001ada <SetHome+0xde>
			if(micros() - HomeTimestamp >= HomeDelay){
 8001a68:	f000 f8f0 	bl	8001c4c <micros>
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <SetHome+0x120>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	1a84      	subs	r4, r0, r2
 8001a74:	eb61 0503 	sbc.w	r5, r1, r3
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <SetHome+0x124>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4698      	mov	r8, r3
 8001a80:	4691      	mov	r9, r2
 8001a82:	4544      	cmp	r4, r8
 8001a84:	eb75 0309 	sbcs.w	r3, r5, r9
 8001a88:	d31b      	bcc.n	8001ac2 <SetHome+0xc6>
				volt  =0;
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <SetHome+0x118>)
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
				RunMotor(volt, counterclockwise);
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <SetHome+0x118>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	2000      	movs	r0, #0
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff fed7 	bl	8001850 <RunMotor>
				SetHome_Flag = 0;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <SetHome+0x110>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
				AlSet_Flag = 2;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <SetHome+0x10c>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
				timestamp = micros();
 8001aae:	f000 f8cd 	bl	8001c4c <micros>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <SetHome+0x128>)
 8001ab8:	601a      	str	r2, [r3, #0]
				Arm_State = Setzero;
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <SetHome+0x12c>)
 8001abc:	2205      	movs	r2, #5
 8001abe:	701a      	strb	r2, [r3, #0]
}
 8001ac0:	e01c      	b.n	8001afc <SetHome+0x100>
				volt = 3.8;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <SetHome+0x118>)
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <SetHome+0x130>)
 8001ac6:	601a      	str	r2, [r3, #0]
				RunMotor(volt, counterclockwise);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <SetHome+0x118>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	2000      	movs	r0, #0
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f7ff febc 	bl	8001850 <RunMotor>
}
 8001ad8:	e010      	b.n	8001afc <SetHome+0x100>
			volt  = 3.8;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <SetHome+0x118>)
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <SetHome+0x130>)
 8001ade:	601a      	str	r2, [r3, #0]
			RunMotor(volt, counterclockwise);
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <SetHome+0x118>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f7ff feb0 	bl	8001850 <RunMotor>
			AlSet_Flag = 0;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SetHome+0x10c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
			SetHome_Flag = 0;
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SetHome+0x110>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b02:	bf00      	nop
 8001b04:	40020800 	.word	0x40020800
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000514 	.word	0x20000514
 8001b10:	200007bc 	.word	0x200007bc
 8001b14:	20000504 	.word	0x20000504
 8001b18:	20000518 	.word	0x20000518
 8001b1c:	200007f8 	.word	0x200007f8
 8001b20:	20000094 	.word	0x20000094
 8001b24:	200007f4 	.word	0x200007f4
 8001b28:	200001f7 	.word	0x200001f7
 8001b2c:	40733333 	.word	0x40733333

08001b30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 0)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d11e      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x4e>
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11a      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x4e>
	{
		volt = 0;
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	2001      	movs	r0, #1
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	f7ff fe78 	bl	8001850 <RunMotor>
		kalmanfilter();
 8001b60:	f000 fc08 	bl	8002374 <kalmanfilter>
		AlSet_Flag = 2;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 8001b6a:	f000 f86f 	bl	8001c4c <micros>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b74:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b78:	2205      	movs	r2, #5
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e010      	b.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x70>
	}

	else if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 1)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d10d      	bne.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x70>
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d109      	bne.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x70>
	{
		SetHome_Flag = 2;
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x100>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
		HomeTimestamp = micros();
 8001b92:	f000 f85b 	bl	8001c4c <micros>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4926      	ldr	r1, [pc, #152]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x104>)
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (GPIO_Pin == B1_Pin)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x96>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001ba8:	2120      	movs	r1, #32
 8001baa:	4823      	ldr	r0, [pc, #140]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x108>)
 8001bac:	f005 fa95 	bl	80070da <HAL_GPIO_TogglePin>
		SetZeroState = (SetZeroState+1)%2;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	bfb8      	it	lt
 8001bbe:	425b      	neglt	r3, r3
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001bc4:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d124      	bne.n	8001c16 <HAL_GPIO_EXTI_Callback+0xe6>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001bcc:	2110      	movs	r1, #16
 8001bce:	481c      	ldr	r0, [pc, #112]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x110>)
 8001bd0:	f005 fa52 	bl	8007078 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d11a      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0xe0>
		{
			Arm_State=Main;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x114>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x118>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x110>)
 8001bf2:	f005 fa59 	bl	80070a8 <HAL_GPIO_WritePin>
			volt = 0;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	2001      	movs	r0, #1
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	f7ff fe21 	bl	8001850 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_EXTI_Callback+0xe6>
			Emergency_status = 0;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000504 	.word	0x20000504
 8001c28:	200007f4 	.word	0x200007f4
 8001c2c:	200001f7 	.word	0x200001f7
 8001c30:	20000514 	.word	0x20000514
 8001c34:	200007f8 	.word	0x200007f8
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	20000090 	.word	0x20000090
 8001c40:	40020400 	.word	0x40020400
 8001c44:	200007d9 	.word	0x200007d9
 8001c48:	20000517 	.word	0x20000517

08001c4c <micros>:

inline uint64_t micros()
{
 8001c4c:	b4b0      	push	{r4, r5, r7}
 8001c4e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <micros+0x2c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <micros+0x30>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	1884      	adds	r4, r0, r2
 8001c64:	eb41 0503 	adc.w	r5, r1, r3
 8001c68:	4622      	mov	r2, r4
 8001c6a:	462b      	mov	r3, r5
}
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bcb0      	pop	{r4, r5, r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200003b8 	.word	0x200003b8
 8001c7c:	200007d0 	.word	0x200007d0

08001c80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c84:	ed2d 8b02 	vpush	{d8}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a78      	ldr	r2, [pc, #480]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 80b0 	bne.w	8001df8 <HAL_TIM_PeriodElapsedCallback+0x178>
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80ab 	beq.w	8001df8 <HAL_TIM_PeriodElapsedCallback+0x178>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80a6 	bne.w	8001df8 <HAL_TIM_PeriodElapsedCallback+0x178>
	{
		ReadEncoder();
 8001cac:	f7ff fe14 	bl	80018d8 <ReadEncoder>
		TrajectoryEvaluation();
 8001cb0:	f001 ffce 	bl	8003c50 <TrajectoryEvaluation>
		kalmanfilter();
 8001cb4:	f000 fb5e 	bl	8002374 <kalmanfilter>

		omega = LowpassFilter(omega_kalman);
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	f003 ff1d 	bl	8005b00 <LowpassFilter>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	4b6e      	ldr	r3, [pc, #440]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
		alpha = LowpassFilter2(alpha_kalman);
 8001cd0:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cda:	f003 ff5d 	bl	8005b98 <LowpassFilter2>
 8001cde:	eef0 7a40 	vmov.f32	s15, s0
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001ce4:	edc3 7a00 	vstr	s15, [r3]

		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001ce8:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe fefd 	bl	8000af0 <__aeabi_d2f>
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001cfa:	ed93 8a00 	vldr	s16, [r3]
 8001cfe:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe fef2 	bl	8000af0 <__aeabi_d2f>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eef0 1a67 	vmov.f32	s3, s15
 8001d18:	ee01 2a10 	vmov	s2, r2
 8001d1c:	eef0 0a48 	vmov.f32	s1, s16
 8001d20:	ee00 6a10 	vmov	s0, r6
 8001d24:	f002 fe34 	bl	8004990 <Cascade>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]

		t+=dt;
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d44:	edc3 7a00 	vstr	s15, [r3]

		if (theta_now >= (theta_f - upperbreak) && theta_now <= (theta_f + lowerbreak))
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fba7 	bl	80004a0 <__aeabi_f2d>
 8001d52:	4682      	mov	sl, r0
 8001d54:	468b      	mov	fp, r1
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001d5c:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fb9d 	bl	80004a0 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	f7fe fa37 	bl	80001e0 <__aeabi_dsub>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4650      	mov	r0, sl
 8001d78:	4659      	mov	r1, fp
 8001d7a:	f7fe fe6f 	bl	8000a5c <__aeabi_dcmpge>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02e      	beq.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x162>
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fb89 	bl	80004a0 <__aeabi_f2d>
 8001d8e:	4680      	mov	r8, r0
 8001d90:	4689      	mov	r9, r1
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb82 	bl	80004a0 <__aeabi_f2d>
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fa1f 	bl	80001e4 <__adddf3>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4640      	mov	r0, r8
 8001dac:	4649      	mov	r1, r9
 8001dae:	f7fe fe4b 	bl	8000a48 <__aeabi_dcmple>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d014      	beq.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x162>
		{
			volt = 0;
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
			RunMotor(volt, PID_dir);
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	f7ff fd3e 	bl	8001850 <RunMotor>
			Go_Flag = 0;
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
			t = 0;
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
		}

		RunMotor(volt, PID_dir);
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	f7ff fd2d 	bl	8001850 <RunMotor>
 8001df6:	e027      	b.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>
	}

	else if (htim == &htim4 && !Go_Flag && Arm_State != Home)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d123      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11f      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>
	{
		ReadEncoder();
 8001e10:	f7ff fd62 	bl	80018d8 <ReadEncoder>
		kalmanfilter();
 8001e14:	f000 faae 	bl	8002374 <kalmanfilter>

		omega = LowpassFilter(omega_kalman);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	f003 fe6d 	bl	8005b00 <LowpassFilter>
 8001e26:	eef0 7a40 	vmov.f32	s15, s0
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
		alpha = LowpassFilter2(alpha_kalman);
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	f003 fead 	bl	8005b98 <LowpassFilter2>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001e44:	edc3 7a00 	vstr	s15, [r3]
	}

	if (htim == &htim11)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10a      	bne.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x1e6>
	{
		_micro += 65535;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e5a:	1854      	adds	r4, r2, r1
 8001e5c:	f143 0500 	adc.w	r5, r3, #0
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001e62:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	ecbd 8b02 	vpop	{d8}
 8001e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e74:	20000370 	.word	0x20000370
 8001e78:	20000515 	.word	0x20000515
 8001e7c:	200001f7 	.word	0x200001f7
 8001e80:	20000538 	.word	0x20000538
 8001e84:	20000544 	.word	0x20000544
 8001e88:	2000053c 	.word	0x2000053c
 8001e8c:	20000548 	.word	0x20000548
 8001e90:	20000758 	.word	0x20000758
 8001e94:	20000534 	.word	0x20000534
 8001e98:	20000760 	.word	0x20000760
 8001e9c:	20000504 	.word	0x20000504
 8001ea0:	200006c8 	.word	0x200006c8
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000524 	.word	0x20000524
 8001eac:	20000700 	.word	0x20000700
 8001eb0:	20000088 	.word	0x20000088
 8001eb4:	2000008c 	.word	0x2000008c
 8001eb8:	200001fa 	.word	0x200001fa
 8001ebc:	200003b8 	.word	0x200003b8
 8001ec0:	200007d0 	.word	0x200007d0

08001ec4 <setmatrix>:

void setmatrix(){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001ec8:	4b73      	ldr	r3, [pc, #460]	; (8002098 <setmatrix+0x1d4>)
 8001eca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ece:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001ed0:	4b72      	ldr	r3, [pc, #456]	; (800209c <setmatrix+0x1d8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a70      	ldr	r2, [pc, #448]	; (8002098 <setmatrix+0x1d4>)
 8001ed6:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <setmatrix+0x1d8>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	4b6f      	ldr	r3, [pc, #444]	; (800209c <setmatrix+0x1d8>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	4b69      	ldr	r3, [pc, #420]	; (8002098 <setmatrix+0x1d4>)
 8001ef2:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001ef6:	4b69      	ldr	r3, [pc, #420]	; (800209c <setmatrix+0x1d8>)
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	4b67      	ldr	r3, [pc, #412]	; (800209c <setmatrix+0x1d8>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <setmatrix+0x1d8>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f18:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <setmatrix+0x1d4>)
 8001f1a:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001f1e:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <setmatrix+0x1d4>)
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <setmatrix+0x1d4>)
 8001f28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f2c:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	; (800209c <setmatrix+0x1d8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a59      	ldr	r2, [pc, #356]	; (8002098 <setmatrix+0x1d4>)
 8001f34:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <setmatrix+0x1d8>)
 8001f38:	ed93 7a00 	vldr	s14, [r3]
 8001f3c:	4b57      	ldr	r3, [pc, #348]	; (800209c <setmatrix+0x1d8>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <setmatrix+0x1d4>)
 8001f50:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <setmatrix+0x1d4>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <setmatrix+0x1d4>)
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <setmatrix+0x1d4>)
 8001f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <setmatrix+0x1d8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <setmatrix+0x1d4>)
 8001f72:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <setmatrix+0x1d4>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001f7c:	4b46      	ldr	r3, [pc, #280]	; (8002098 <setmatrix+0x1d4>)
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001f84:	4b44      	ldr	r3, [pc, #272]	; (8002098 <setmatrix+0x1d4>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <setmatrix+0x1d4>)
 8001f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001f94:	4b41      	ldr	r3, [pc, #260]	; (800209c <setmatrix+0x1d8>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	4b40      	ldr	r3, [pc, #256]	; (800209c <setmatrix+0x1d8>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <setmatrix+0x1d8>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <setmatrix+0x1dc>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <setmatrix+0x1d8>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <setmatrix+0x1d8>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <setmatrix+0x1dc>)
 8001fd6:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <setmatrix+0x1d8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <setmatrix+0x1dc>)
 8001fe0:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <setmatrix+0x1dc>)
 8001fe4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fe8:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <setmatrix+0x1e0>)
 8001fec:	2204      	movs	r2, #4
 8001fee:	2104      	movs	r1, #4
 8001ff0:	482d      	ldr	r0, [pc, #180]	; (80020a8 <setmatrix+0x1e4>)
 8001ff2:	f00a fda1 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <setmatrix+0x1d4>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	482b      	ldr	r0, [pc, #172]	; (80020ac <setmatrix+0x1e8>)
 8001ffe:	f00a fd9b 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <setmatrix+0x1dc>)
 8002004:	2201      	movs	r2, #1
 8002006:	2104      	movs	r1, #4
 8002008:	4829      	ldr	r0, [pc, #164]	; (80020b0 <setmatrix+0x1ec>)
 800200a:	f00a fd95 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <setmatrix+0x1f0>)
 8002010:	2204      	movs	r2, #4
 8002012:	2101      	movs	r1, #1
 8002014:	4828      	ldr	r0, [pc, #160]	; (80020b8 <setmatrix+0x1f4>)
 8002016:	f00a fd8f 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <setmatrix+0x1f8>)
 800201c:	2201      	movs	r2, #1
 800201e:	2101      	movs	r1, #1
 8002020:	4827      	ldr	r0, [pc, #156]	; (80020c0 <setmatrix+0x1fc>)
 8002022:	f00a fd89 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <setmatrix+0x200>)
 8002028:	2201      	movs	r2, #1
 800202a:	2101      	movs	r1, #1
 800202c:	4826      	ldr	r0, [pc, #152]	; (80020c8 <setmatrix+0x204>)
 800202e:	f00a fd83 	bl	800cb38 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <setmatrix+0x208>)
 8002034:	2201      	movs	r2, #1
 8002036:	2101      	movs	r1, #1
 8002038:	4825      	ldr	r0, [pc, #148]	; (80020d0 <setmatrix+0x20c>)
 800203a:	f00a fd7d 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <setmatrix+0x210>)
 8002040:	2201      	movs	r2, #1
 8002042:	2104      	movs	r1, #4
 8002044:	4824      	ldr	r0, [pc, #144]	; (80020d8 <setmatrix+0x214>)
 8002046:	f00a fd77 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <setmatrix+0x218>)
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	4823      	ldr	r0, [pc, #140]	; (80020e0 <setmatrix+0x21c>)
 8002052:	f00a fd71 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <setmatrix+0x220>)
 8002058:	2201      	movs	r2, #1
 800205a:	2104      	movs	r1, #4
 800205c:	4822      	ldr	r0, [pc, #136]	; (80020e8 <setmatrix+0x224>)
 800205e:	f00a fd6b 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <setmatrix+0x228>)
 8002064:	2204      	movs	r2, #4
 8002066:	2104      	movs	r1, #4
 8002068:	4821      	ldr	r0, [pc, #132]	; (80020f0 <setmatrix+0x22c>)
 800206a:	f00a fd65 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <setmatrix+0x230>)
 8002070:	2204      	movs	r2, #4
 8002072:	2104      	movs	r1, #4
 8002074:	4820      	ldr	r0, [pc, #128]	; (80020f8 <setmatrix+0x234>)
 8002076:	f00a fd5f 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <setmatrix+0x238>)
 800207c:	2201      	movs	r2, #1
 800207e:	2101      	movs	r1, #1
 8002080:	481f      	ldr	r0, [pc, #124]	; (8002100 <setmatrix+0x23c>)
 8002082:	f00a fd59 	bl	800cb38 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <setmatrix+0x240>)
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <setmatrix+0x244>)
 800208e:	f00a fd53 	bl	800cb38 <arm_mat_init_f32>
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200005bc 	.word	0x200005bc
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	200005fc 	.word	0x200005fc
 80020a4:	20000010 	.word	0x20000010
 80020a8:	2000054c 	.word	0x2000054c
 80020ac:	20000554 	.word	0x20000554
 80020b0:	2000055c 	.word	0x2000055c
 80020b4:	20000050 	.word	0x20000050
 80020b8:	20000574 	.word	0x20000574
 80020bc:	20000060 	.word	0x20000060
 80020c0:	2000057c 	.word	0x2000057c
 80020c4:	20000064 	.word	0x20000064
 80020c8:	20000564 	.word	0x20000564
 80020cc:	2000060c 	.word	0x2000060c
 80020d0:	20000584 	.word	0x20000584
 80020d4:	20000610 	.word	0x20000610
 80020d8:	2000056c 	.word	0x2000056c
 80020dc:	20000620 	.word	0x20000620
 80020e0:	2000059c 	.word	0x2000059c
 80020e4:	20000630 	.word	0x20000630
 80020e8:	200005a4 	.word	0x200005a4
 80020ec:	20000640 	.word	0x20000640
 80020f0:	200005ac 	.word	0x200005ac
 80020f4:	20000680 	.word	0x20000680
 80020f8:	200005b4 	.word	0x200005b4
 80020fc:	200006c0 	.word	0x200006c0
 8002100:	2000058c 	.word	0x2000058c
 8002104:	200006c4 	.word	0x200006c4
 8002108:	20000594 	.word	0x20000594

0800210c <prediction>:

void prediction(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b0c2      	sub	sp, #264	; 0x108
 8002110:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8002112:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <prediction+0xcc>)
 8002114:	4931      	ldr	r1, [pc, #196]	; (80021dc <prediction+0xd0>)
 8002116:	4832      	ldr	r0, [pc, #200]	; (80021e0 <prediction+0xd4>)
 8002118:	f00a fc6e 	bl	800c9f8 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 800211c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002120:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002124:	2204      	movs	r2, #4
 8002126:	2104      	movs	r1, #4
 8002128:	f00a fd06 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 800212c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002130:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8002134:	2201      	movs	r2, #1
 8002136:	2104      	movs	r1, #4
 8002138:	f00a fcfe 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 800213c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002140:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002144:	2204      	movs	r2, #4
 8002146:	2104      	movs	r1, #4
 8002148:	f00a fcf6 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	f107 0018 	add.w	r0, r7, #24
 8002154:	2204      	movs	r2, #4
 8002156:	2104      	movs	r1, #4
 8002158:	f00a fcee 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4638      	mov	r0, r7
 8002162:	2204      	movs	r2, #4
 8002164:	2101      	movs	r1, #1
 8002166:	f00a fce7 	bl	800cb38 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 800216a:	f107 0318 	add.w	r3, r7, #24
 800216e:	4619      	mov	r1, r3
 8002170:	481b      	ldr	r0, [pc, #108]	; (80021e0 <prediction+0xd4>)
 8002172:	f00a fb7b 	bl	800c86c <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <prediction+0xd8>)
 800217c:	f00a fb76 	bl	800c86c <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8002180:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002184:	461a      	mov	r2, r3
 8002186:	4918      	ldr	r1, [pc, #96]	; (80021e8 <prediction+0xdc>)
 8002188:	4815      	ldr	r0, [pc, #84]	; (80021e0 <prediction+0xd4>)
 800218a:	f00a fc35 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 800218e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002192:	461a      	mov	r2, r3
 8002194:	4915      	ldr	r1, [pc, #84]	; (80021ec <prediction+0xe0>)
 8002196:	4813      	ldr	r0, [pc, #76]	; (80021e4 <prediction+0xd8>)
 8002198:	f00a fc2e 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 800219c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80021a0:	f107 0118 	add.w	r1, r7, #24
 80021a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00a fc25 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 80021ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021b2:	4639      	mov	r1, r7
 80021b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00a fc1d 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 80021be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80021c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <prediction+0xe4>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f00a fcb9 	bl	800cb40 <arm_mat_add_f32>
}
 80021ce:	bf00      	nop
 80021d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200005a4 	.word	0x200005a4
 80021dc:	2000059c 	.word	0x2000059c
 80021e0:	20000554 	.word	0x20000554
 80021e4:	2000055c 	.word	0x2000055c
 80021e8:	200005ac 	.word	0x200005ac
 80021ec:	20000564 	.word	0x20000564
 80021f0:	200005b4 	.word	0x200005b4

080021f4 <update>:

void update(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0ae      	sub	sp, #184	; 0xb8
 80021f8:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 80021fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021fe:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002202:	2201      	movs	r2, #1
 8002204:	2101      	movs	r1, #1
 8002206:	f00a fc97 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 800220a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800220e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002212:	2204      	movs	r2, #4
 8002214:	2104      	movs	r1, #4
 8002216:	f00a fc8f 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 800221a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800221e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002222:	2201      	movs	r2, #1
 8002224:	2104      	movs	r1, #4
 8002226:	f00a fc87 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 800222a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800222e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002232:	2204      	movs	r2, #4
 8002234:	2101      	movs	r1, #1
 8002236:	f00a fc7f 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 800223a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800223e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002242:	2201      	movs	r2, #1
 8002244:	2101      	movs	r1, #1
 8002246:	f00a fc77 	bl	800cb38 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 800224a:	f107 0318 	add.w	r3, r7, #24
 800224e:	f107 0010 	add.w	r0, r7, #16
 8002252:	2201      	movs	r2, #1
 8002254:	2104      	movs	r1, #4
 8002256:	f00a fc6f 	bl	800cb38 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	4837      	ldr	r0, [pc, #220]	; (8002340 <update+0x14c>)
 8002262:	f00a fb03 	bl	800c86c <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 8002266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226a:	461a      	mov	r2, r3
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <update+0x150>)
 800226e:	4834      	ldr	r0, [pc, #208]	; (8002340 <update+0x14c>)
 8002270:	f00a fbc2 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8002274:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002278:	f107 0110 	add.w	r1, r7, #16
 800227c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002280:	4618      	mov	r0, r3
 8002282:	f00a fbb9 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 8002286:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800228a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228e:	4619      	mov	r1, r3
 8002290:	482d      	ldr	r0, [pc, #180]	; (8002348 <update+0x154>)
 8002292:	f00a fc55 	bl	800cb40 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 8002296:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800229a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800229e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a2:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	f107 0008 	add.w	r0, r7, #8
 80022ac:	2201      	movs	r2, #1
 80022ae:	2101      	movs	r1, #1
 80022b0:	f00a fc42 	bl	800cb38 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 80022b4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	4821      	ldr	r0, [pc, #132]	; (8002344 <update+0x150>)
 80022c0:	f00a fb9a 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 80022c4:	f107 0108 	add.w	r1, r7, #8
 80022c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <update+0x158>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00a fb92 	bl	800c9f8 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 80022d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022d8:	461a      	mov	r2, r3
 80022da:	4919      	ldr	r1, [pc, #100]	; (8002340 <update+0x14c>)
 80022dc:	481b      	ldr	r0, [pc, #108]	; (800234c <update+0x158>)
 80022de:	f00a fb8b 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 80022e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80022e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022ea:	4619      	mov	r1, r3
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <update+0x15c>)
 80022ee:	f00a fb19 	bl	800c924 <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 80022f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <update+0x160>)
 80022f8:	4912      	ldr	r1, [pc, #72]	; (8002344 <update+0x150>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00a fb7c 	bl	800c9f8 <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <update+0x164>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <update+0x168>)
 8002306:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <update+0x16c>)
 800230a:	4916      	ldr	r1, [pc, #88]	; (8002364 <update+0x170>)
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <update+0x14c>)
 800230e:	f00a fb73 	bl	800c9f8 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <update+0x174>)
 8002314:	4912      	ldr	r1, [pc, #72]	; (8002360 <update+0x16c>)
 8002316:	4815      	ldr	r0, [pc, #84]	; (800236c <update+0x178>)
 8002318:	f00a fb04 	bl	800c924 <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 800231c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002320:	461a      	mov	r2, r3
 8002322:	4911      	ldr	r1, [pc, #68]	; (8002368 <update+0x174>)
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <update+0x158>)
 8002326:	f00a fb67 	bl	800c9f8 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 800232a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <update+0x17c>)
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <update+0x170>)
 8002332:	4618      	mov	r0, r3
 8002334:	f00a fc04 	bl	800cb40 <arm_mat_add_f32>
}
 8002338:	bf00      	nop
 800233a:	37b8      	adds	r7, #184	; 0xb8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000574 	.word	0x20000574
 8002344:	200005b4 	.word	0x200005b4
 8002348:	2000057c 	.word	0x2000057c
 800234c:	2000056c 	.word	0x2000056c
 8002350:	2000054c 	.word	0x2000054c
 8002354:	200005ac 	.word	0x200005ac
 8002358:	20000524 	.word	0x20000524
 800235c:	2000060c 	.word	0x2000060c
 8002360:	20000594 	.word	0x20000594
 8002364:	200005a4 	.word	0x200005a4
 8002368:	2000058c 	.word	0x2000058c
 800236c:	20000584 	.word	0x20000584
 8002370:	2000059c 	.word	0x2000059c

08002374 <kalmanfilter>:

void kalmanfilter()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	prediction();
 8002378:	f7ff fec8 	bl	800210c <prediction>
	update();
 800237c:	f7ff ff3a 	bl	80021f4 <update>
	position_kalman = data_x_new[0];
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <kalmanfilter+0x30>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <kalmanfilter+0x34>)
 8002386:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <kalmanfilter+0x30>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <kalmanfilter+0x38>)
 800238e:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <kalmanfilter+0x30>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <kalmanfilter+0x3c>)
 8002396:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <kalmanfilter+0x30>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <kalmanfilter+0x40>)
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000630 	.word	0x20000630
 80023a8:	20000534 	.word	0x20000534
 80023ac:	20000538 	.word	0x20000538
 80023b0:	2000053c 	.word	0x2000053c
 80023b4:	20000540 	.word	0x20000540

080023b8 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4b99      	ldr	r3, [pc, #612]	; (8002628 <TrajectoryGenerator+0x270>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f001 8421 	beq.w	8003c0c <TrajectoryGenerator+0x1854>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 80023ca:	4b98      	ldr	r3, [pc, #608]	; (800262c <TrajectoryGenerator+0x274>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fb8c 	bl	8000af0 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	ee00 3a10 	vmov	s0, r3
 80023de:	f002 fc39 	bl	8004c54 <positive>
 80023e2:	ee10 3a10 	vmov	r3, s0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f85a 	bl	80004a0 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	498e      	ldr	r1, [pc, #568]	; (800262c <TrajectoryGenerator+0x274>)
 80023f2:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 80023f6:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <TrajectoryGenerator+0x278>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fb76 	bl	8000af0 <__aeabi_d2f>
 8002404:	4603      	mov	r3, r0
 8002406:	ee00 3a10 	vmov	s0, r3
 800240a:	f002 fc23 	bl	8004c54 <positive>
 800240e:	ee10 3a10 	vmov	r3, s0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f844 	bl	80004a0 <__aeabi_f2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4984      	ldr	r1, [pc, #528]	; (8002630 <TrajectoryGenerator+0x278>)
 800241e:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 8002422:	4b84      	ldr	r3, [pc, #528]	; (8002634 <TrajectoryGenerator+0x27c>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fb60 	bl	8000af0 <__aeabi_d2f>
 8002430:	4603      	mov	r3, r0
 8002432:	ee00 3a10 	vmov	s0, r3
 8002436:	f002 fc0d 	bl	8004c54 <positive>
 800243a:	ee10 3a10 	vmov	r3, s0
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	497a      	ldr	r1, [pc, #488]	; (8002634 <TrajectoryGenerator+0x27c>)
 800244a:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 800244e:	4b7a      	ldr	r3, [pc, #488]	; (8002638 <TrajectoryGenerator+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f824 	bl	80004a0 <__aeabi_f2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4977      	ldr	r1, [pc, #476]	; (800263c <TrajectoryGenerator+0x284>)
 800245e:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 8002462:	4b77      	ldr	r3, [pc, #476]	; (8002640 <TrajectoryGenerator+0x288>)
 8002464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002468:	4b74      	ldr	r3, [pc, #464]	; (800263c <TrajectoryGenerator+0x284>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fd feb7 	bl	80001e0 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4973      	ldr	r1, [pc, #460]	; (8002644 <TrajectoryGenerator+0x28c>)
 8002478:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 800247c:	4b71      	ldr	r3, [pc, #452]	; (8002644 <TrajectoryGenerator+0x28c>)
 800247e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f7fe fad3 	bl	8000a34 <__aeabi_dcmplt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00c      	beq.n	80024ae <TrajectoryGenerator+0xf6>
		{
			theta_dest = -(theta_dest);
 8002494:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <TrajectoryGenerator+0x28c>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4614      	mov	r4, r2
 800249c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <TrajectoryGenerator+0x28c>)
 80024a2:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 80024a6:	4b68      	ldr	r3, [pc, #416]	; (8002648 <TrajectoryGenerator+0x290>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e002      	b.n	80024b4 <TrajectoryGenerator+0xfc>
		}

		else
		{
			dir = 1;
 80024ae:	4b66      	ldr	r3, [pc, #408]	; (8002648 <TrajectoryGenerator+0x290>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
		}

		//add Mass 1 kg
		if(Mass_Flag){
 80024b4:	4b65      	ldr	r3, [pc, #404]	; (800264c <TrajectoryGenerator+0x294>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <TrajectoryGenerator+0x10e>
			volt_mass = 0.5;
 80024bc:	4b64      	ldr	r3, [pc, #400]	; (8002650 <TrajectoryGenerator+0x298>)
 80024be:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e003      	b.n	80024ce <TrajectoryGenerator+0x116>
		}
		else{
			volt_mass = 0;
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <TrajectoryGenerator+0x298>)
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

		}


		if(theta_f <= rad_station[1]){ //0-5 degree
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <TrajectoryGenerator+0x29c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ffe4 	bl	80004a0 <__aeabi_f2d>
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <TrajectoryGenerator+0x288>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe fabd 	bl	8000a5c <__aeabi_dcmpge>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d057      	beq.n	8002598 <TrajectoryGenerator+0x1e0>
			if (dir == 1){ //clockwise
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <TrajectoryGenerator+0x290>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d126      	bne.n	800253e <TrajectoryGenerator+0x186>
				volt_constant = 3.1+volt_mass;
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <TrajectoryGenerator+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ffd3 	bl	80004a0 <__aeabi_f2d>
 80024fa:	a345      	add	r3, pc, #276	; (adr r3, 8002610 <TrajectoryGenerator+0x258>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fd fe70 	bl	80001e4 <__adddf3>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe faf0 	bl	8000af0 <__aeabi_d2f>
 8002510:	4603      	mov	r3, r0
 8002512:	4a51      	ldr	r2, [pc, #324]	; (8002658 <TrajectoryGenerator+0x2a0>)
 8002514:	6013      	str	r3, [r2, #0]
				volt_statics = 3.6+volt_mass;
 8002516:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <TrajectoryGenerator+0x298>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd ffc0 	bl	80004a0 <__aeabi_f2d>
 8002520:	a33d      	add	r3, pc, #244	; (adr r3, 8002618 <TrajectoryGenerator+0x260>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fd fe5d 	bl	80001e4 <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fadd 	bl	8000af0 <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <TrajectoryGenerator+0x2a4>)
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e025      	b.n	800258a <TrajectoryGenerator+0x1d2>
			}

			else { //counterclockwise
				volt_constant = 3.3+volt_mass;
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <TrajectoryGenerator+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffac 	bl	80004a0 <__aeabi_f2d>
 8002548:	a335      	add	r3, pc, #212	; (adr r3, 8002620 <TrajectoryGenerator+0x268>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fd fe49 	bl	80001e4 <__adddf3>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fac9 	bl	8000af0 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	4a3d      	ldr	r2, [pc, #244]	; (8002658 <TrajectoryGenerator+0x2a0>)
 8002562:	6013      	str	r3, [r2, #0]
				volt_statics = 3.6+volt_mass;
 8002564:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <TrajectoryGenerator+0x298>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ff99 	bl	80004a0 <__aeabi_f2d>
 800256e:	a32a      	add	r3, pc, #168	; (adr r3, 8002618 <TrajectoryGenerator+0x260>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fd fe36 	bl	80001e4 <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fab6 	bl	8000af0 <__aeabi_d2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4a35      	ldr	r2, [pc, #212]	; (800265c <TrajectoryGenerator+0x2a4>)
 8002588:	6013      	str	r3, [r2, #0]
			}

			masslimit_CCW = 0.013;
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <TrajectoryGenerator+0x2a8>)
 800258c:	4a35      	ldr	r2, [pc, #212]	; (8002664 <TrajectoryGenerator+0x2ac>)
 800258e:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.01;
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <TrajectoryGenerator+0x2b0>)
 8002592:	4a36      	ldr	r2, [pc, #216]	; (800266c <TrajectoryGenerator+0x2b4>)
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e1ff      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}
		else if(theta_f <= rad_station[5]){ //5 - 25 degree
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <TrajectoryGenerator+0x29c>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff7f 	bl	80004a0 <__aeabi_f2d>
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <TrajectoryGenerator+0x288>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe fa58 	bl	8000a5c <__aeabi_dcmpge>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 808b 	beq.w	80026ca <TrajectoryGenerator+0x312>
			if (dir == 1){ //clockwise
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <TrajectoryGenerator+0x290>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d159      	bne.n	8002670 <TrajectoryGenerator+0x2b8>
				volt_constant = 3.1+volt_mass;
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <TrajectoryGenerator+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff6d 	bl	80004a0 <__aeabi_f2d>
 80025c6:	a312      	add	r3, pc, #72	; (adr r3, 8002610 <TrajectoryGenerator+0x258>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd fe0a 	bl	80001e4 <__adddf3>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fa8a 	bl	8000af0 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <TrajectoryGenerator+0x2a0>)
 80025e0:	6013      	str	r3, [r2, #0]
				volt_statics = 3.6+volt_mass;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <TrajectoryGenerator+0x298>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff5a 	bl	80004a0 <__aeabi_f2d>
 80025ec:	a30a      	add	r3, pc, #40	; (adr r3, 8002618 <TrajectoryGenerator+0x260>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd fdf7 	bl	80001e4 <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fa77 	bl	8000af0 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <TrajectoryGenerator+0x2a4>)
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e058      	b.n	80026bc <TrajectoryGenerator+0x304>
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	4008cccc 	.word	0x4008cccc
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	400ccccc 	.word	0x400ccccc
 8002620:	66666666 	.word	0x66666666
 8002624:	400a6666 	.word	0x400a6666
 8002628:	20000516 	.word	0x20000516
 800262c:	20000078 	.word	0x20000078
 8002630:	20000070 	.word	0x20000070
 8002634:	20000068 	.word	0x20000068
 8002638:	20000524 	.word	0x20000524
 800263c:	200006f8 	.word	0x200006f8
 8002640:	20000700 	.word	0x20000700
 8002644:	20000708 	.word	0x20000708
 8002648:	200001f9 	.word	0x200001f9
 800264c:	20000518 	.word	0x20000518
 8002650:	200007bc 	.word	0x200007bc
 8002654:	200000d4 	.word	0x200000d4
 8002658:	20000508 	.word	0x20000508
 800265c:	2000050c 	.word	0x2000050c
 8002660:	200007b4 	.word	0x200007b4
 8002664:	3c54fdf4 	.word	0x3c54fdf4
 8002668:	200007b8 	.word	0x200007b8
 800266c:	3c23d70a 	.word	0x3c23d70a
			}

			else { //counterclockwise
				volt_constant = 3.1+volt_mass; //35
 8002670:	4baf      	ldr	r3, [pc, #700]	; (8002930 <TrajectoryGenerator+0x578>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff13 	bl	80004a0 <__aeabi_f2d>
 800267a:	a3a5      	add	r3, pc, #660	; (adr r3, 8002910 <TrajectoryGenerator+0x558>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fd fdb0 	bl	80001e4 <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa30 	bl	8000af0 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	4aa8      	ldr	r2, [pc, #672]	; (8002934 <TrajectoryGenerator+0x57c>)
 8002694:	6013      	str	r3, [r2, #0]
				volt_statics = 3.6+volt_mass;
 8002696:	4ba6      	ldr	r3, [pc, #664]	; (8002930 <TrajectoryGenerator+0x578>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff00 	bl	80004a0 <__aeabi_f2d>
 80026a0:	a39d      	add	r3, pc, #628	; (adr r3, 8002918 <TrajectoryGenerator+0x560>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd fd9d 	bl	80001e4 <__adddf3>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fa1d 	bl	8000af0 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a9f      	ldr	r2, [pc, #636]	; (8002938 <TrajectoryGenerator+0x580>)
 80026ba:	6013      	str	r3, [r2, #0]
			}

			masslimit_CCW = 0.013;
 80026bc:	4b9f      	ldr	r3, [pc, #636]	; (800293c <TrajectoryGenerator+0x584>)
 80026be:	4aa0      	ldr	r2, [pc, #640]	; (8002940 <TrajectoryGenerator+0x588>)
 80026c0:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.01;
 80026c2:	4ba0      	ldr	r3, [pc, #640]	; (8002944 <TrajectoryGenerator+0x58c>)
 80026c4:	4aa0      	ldr	r2, [pc, #640]	; (8002948 <TrajectoryGenerator+0x590>)
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e166      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}
		else if(theta_f <= rad_station[12]){ //25-60 degree
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <TrajectoryGenerator+0x594>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fee6 	bl	80004a0 <__aeabi_f2d>
 80026d4:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <TrajectoryGenerator+0x598>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fe f9bf 	bl	8000a5c <__aeabi_dcmpge>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d045      	beq.n	8002770 <TrajectoryGenerator+0x3b8>
			if (dir == 1){ //clockwise
 80026e4:	4b9b      	ldr	r3, [pc, #620]	; (8002954 <TrajectoryGenerator+0x59c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d11d      	bne.n	8002728 <TrajectoryGenerator+0x370>
				volt_constant = 4.0+volt_mass;
 80026ec:	4b90      	ldr	r3, [pc, #576]	; (8002930 <TrajectoryGenerator+0x578>)
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026fa:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <TrajectoryGenerator+0x57c>)
 80026fc:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 4.3+volt_mass;
 8002700:	4b8b      	ldr	r3, [pc, #556]	; (8002930 <TrajectoryGenerator+0x578>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fecb 	bl	80004a0 <__aeabi_f2d>
 800270a:	a385      	add	r3, pc, #532	; (adr r3, 8002920 <TrajectoryGenerator+0x568>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fd68 	bl	80001e4 <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe f9e8 	bl	8000af0 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	4a85      	ldr	r2, [pc, #532]	; (8002938 <TrajectoryGenerator+0x580>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01c      	b.n	8002762 <TrajectoryGenerator+0x3aa>
			}

			else { //counterclockwise
				volt_constant = 4.0+volt_mass; //35
 8002728:	4b81      	ldr	r3, [pc, #516]	; (8002930 <TrajectoryGenerator+0x578>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002736:	4b7f      	ldr	r3, [pc, #508]	; (8002934 <TrajectoryGenerator+0x57c>)
 8002738:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 4.3+volt_mass;
 800273c:	4b7c      	ldr	r3, [pc, #496]	; (8002930 <TrajectoryGenerator+0x578>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fead 	bl	80004a0 <__aeabi_f2d>
 8002746:	a376      	add	r3, pc, #472	; (adr r3, 8002920 <TrajectoryGenerator+0x568>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd fd4a 	bl	80001e4 <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe f9ca 	bl	8000af0 <__aeabi_d2f>
 800275c:	4603      	mov	r3, r0
 800275e:	4a76      	ldr	r2, [pc, #472]	; (8002938 <TrajectoryGenerator+0x580>)
 8002760:	6013      	str	r3, [r2, #0]
			}

			masslimit_CCW = 0.013;
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <TrajectoryGenerator+0x584>)
 8002764:	4a76      	ldr	r2, [pc, #472]	; (8002940 <TrajectoryGenerator+0x588>)
 8002766:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.01;
 8002768:	4b76      	ldr	r3, [pc, #472]	; (8002944 <TrajectoryGenerator+0x58c>)
 800276a:	4a77      	ldr	r2, [pc, #476]	; (8002948 <TrajectoryGenerator+0x590>)
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e113      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}

		else if(theta_f <= rad_station[17]){ //60-85 degree
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <TrajectoryGenerator+0x594>)
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fe93 	bl	80004a0 <__aeabi_f2d>
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <TrajectoryGenerator+0x598>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f96c 	bl	8000a5c <__aeabi_dcmpge>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01a      	beq.n	80027c0 <TrajectoryGenerator+0x408>
			volt_constant = 5+volt_mass;
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <TrajectoryGenerator+0x578>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002798:	4b66      	ldr	r3, [pc, #408]	; (8002934 <TrajectoryGenerator+0x57c>)
 800279a:	edc3 7a00 	vstr	s15, [r3]
			volt_statics = 5.5+volt_mass;
 800279e:	4b64      	ldr	r3, [pc, #400]	; (8002930 <TrajectoryGenerator+0x578>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 80027a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <TrajectoryGenerator+0x580>)
 80027ae:	edc3 7a00 	vstr	s15, [r3]

			masslimit_CCW = 0.013;
 80027b2:	4b62      	ldr	r3, [pc, #392]	; (800293c <TrajectoryGenerator+0x584>)
 80027b4:	4a62      	ldr	r2, [pc, #392]	; (8002940 <TrajectoryGenerator+0x588>)
 80027b6:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.008;
 80027b8:	4b62      	ldr	r3, [pc, #392]	; (8002944 <TrajectoryGenerator+0x58c>)
 80027ba:	4a67      	ldr	r2, [pc, #412]	; (8002958 <TrajectoryGenerator+0x5a0>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e0eb      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}

		else if(theta_f <= rad_station[45]){ //85-225 degree
 80027c0:	4b62      	ldr	r3, [pc, #392]	; (800294c <TrajectoryGenerator+0x594>)
 80027c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe6a 	bl	80004a0 <__aeabi_f2d>
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <TrajectoryGenerator+0x598>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fe f943 	bl	8000a5c <__aeabi_dcmpge>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d033      	beq.n	8002844 <TrajectoryGenerator+0x48c>
			if (dir == 1){ //clockwise
 80027dc:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <TrajectoryGenerator+0x59c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d114      	bne.n	800280e <TrajectoryGenerator+0x456>
				volt_constant = 5.5+volt_mass;
 80027e4:	4b52      	ldr	r3, [pc, #328]	; (8002930 <TrajectoryGenerator+0x578>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 80027ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <TrajectoryGenerator+0x57c>)
 80027f4:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 6.0+volt_mass;
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <TrajectoryGenerator+0x578>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <TrajectoryGenerator+0x580>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
 800280c:	e013      	b.n	8002836 <TrajectoryGenerator+0x47e>
			}

			else { //counterclockwise
				volt_constant = 5+volt_mass;
 800280e:	4b48      	ldr	r3, [pc, #288]	; (8002930 <TrajectoryGenerator+0x578>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <TrajectoryGenerator+0x57c>)
 800281e:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 5.5+volt_mass;
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <TrajectoryGenerator+0x578>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 800282c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <TrajectoryGenerator+0x580>)
 8002832:	edc3 7a00 	vstr	s15, [r3]
			}

			masslimit_CCW = 0.012;
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <TrajectoryGenerator+0x584>)
 8002838:	4a48      	ldr	r2, [pc, #288]	; (800295c <TrajectoryGenerator+0x5a4>)
 800283a:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.018;
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <TrajectoryGenerator+0x58c>)
 800283e:	4a48      	ldr	r2, [pc, #288]	; (8002960 <TrajectoryGenerator+0x5a8>)
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e0a9      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}
		else if(theta_f <= rad_station[55]){ //230-275 degree
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <TrajectoryGenerator+0x594>)
 8002846:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe28 	bl	80004a0 <__aeabi_f2d>
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <TrajectoryGenerator+0x598>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fe f901 	bl	8000a5c <__aeabi_dcmpge>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03c      	beq.n	80028da <TrajectoryGenerator+0x522>
			if (dir == 1){ //clockwise
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <TrajectoryGenerator+0x59c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d114      	bne.n	8002892 <TrajectoryGenerator+0x4da>
				volt_constant = 5.5+volt_mass;
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <TrajectoryGenerator+0x578>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <TrajectoryGenerator+0x57c>)
 8002878:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 6.0+volt_mass;
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <TrajectoryGenerator+0x578>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <TrajectoryGenerator+0x580>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
 8002890:	e01c      	b.n	80028cc <TrajectoryGenerator+0x514>
			}

			else { //counterclockwise
				volt_constant = 5.6+volt_mass;
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <TrajectoryGenerator+0x578>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe02 	bl	80004a0 <__aeabi_f2d>
 800289c:	a322      	add	r3, pc, #136	; (adr r3, 8002928 <TrajectoryGenerator+0x570>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd fc9f 	bl	80001e4 <__adddf3>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f91f 	bl	8000af0 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <TrajectoryGenerator+0x57c>)
 80028b6:	6013      	str	r3, [r2, #0]
				volt_statics = 6+volt_mass;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <TrajectoryGenerator+0x578>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80028c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <TrajectoryGenerator+0x580>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
			}

			masslimit_CCW = 0.012;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <TrajectoryGenerator+0x584>)
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <TrajectoryGenerator+0x5a4>)
 80028d0:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.018;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <TrajectoryGenerator+0x58c>)
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <TrajectoryGenerator+0x5a8>)
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e05e      	b.n	8002998 <TrajectoryGenerator+0x5e0>
		}
		else { //280-355 degree
			if (dir == 1){ //clockwise
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <TrajectoryGenerator+0x59c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d140      	bne.n	8002964 <TrajectoryGenerator+0x5ac>
				volt_constant = 4.0+volt_mass;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <TrajectoryGenerator+0x578>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <TrajectoryGenerator+0x57c>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 4.5+volt_mass;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <TrajectoryGenerator+0x578>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8002900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <TrajectoryGenerator+0x580>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
 800290a:	e03f      	b.n	800298c <TrajectoryGenerator+0x5d4>
 800290c:	f3af 8000 	nop.w
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	4008cccc 	.word	0x4008cccc
 8002918:	cccccccd 	.word	0xcccccccd
 800291c:	400ccccc 	.word	0x400ccccc
 8002920:	33333333 	.word	0x33333333
 8002924:	40113333 	.word	0x40113333
 8002928:	66666666 	.word	0x66666666
 800292c:	40166666 	.word	0x40166666
 8002930:	200007bc 	.word	0x200007bc
 8002934:	20000508 	.word	0x20000508
 8002938:	2000050c 	.word	0x2000050c
 800293c:	200007b4 	.word	0x200007b4
 8002940:	3c54fdf4 	.word	0x3c54fdf4
 8002944:	200007b8 	.word	0x200007b8
 8002948:	3c23d70a 	.word	0x3c23d70a
 800294c:	200000d4 	.word	0x200000d4
 8002950:	20000700 	.word	0x20000700
 8002954:	200001f9 	.word	0x200001f9
 8002958:	3c03126f 	.word	0x3c03126f
 800295c:	3c449ba6 	.word	0x3c449ba6
 8002960:	3c9374bc 	.word	0x3c9374bc
			}

			else { //counterclockwise
				volt_constant = 4.0+volt_mass;
 8002964:	4bac      	ldr	r3, [pc, #688]	; (8002c18 <TrajectoryGenerator+0x860>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800296e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002972:	4baa      	ldr	r3, [pc, #680]	; (8002c1c <TrajectoryGenerator+0x864>)
 8002974:	edc3 7a00 	vstr	s15, [r3]
				volt_statics = 4.5+volt_mass;
 8002978:	4ba7      	ldr	r3, [pc, #668]	; (8002c18 <TrajectoryGenerator+0x860>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8002982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002986:	4ba6      	ldr	r3, [pc, #664]	; (8002c20 <TrajectoryGenerator+0x868>)
 8002988:	edc3 7a00 	vstr	s15, [r3]
			}

			masslimit_CCW = 0.012;
 800298c:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <TrajectoryGenerator+0x86c>)
 800298e:	4aa6      	ldr	r2, [pc, #664]	; (8002c28 <TrajectoryGenerator+0x870>)
 8002990:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0.01;
 8002992:	4ba6      	ldr	r3, [pc, #664]	; (8002c2c <TrajectoryGenerator+0x874>)
 8002994:	4aa6      	ldr	r2, [pc, #664]	; (8002c30 <TrajectoryGenerator+0x878>)
 8002996:	601a      	str	r2, [r3, #0]
		}
		if(!Mass_Flag){
 8002998:	4ba6      	ldr	r3, [pc, #664]	; (8002c34 <TrajectoryGenerator+0x87c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <TrajectoryGenerator+0x5f8>
			masslimit_CCW = 0;
 80029a0:	4ba0      	ldr	r3, [pc, #640]	; (8002c24 <TrajectoryGenerator+0x86c>)
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
			masslimit_CW = 0;
 80029a8:	4ba0      	ldr	r3, [pc, #640]	; (8002c2c <TrajectoryGenerator+0x874>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
		}


		//Change Cascade Gain
		if (theta_dest >= 6.0737) //more than 349 degree
 80029b0:	4ba1      	ldr	r3, [pc, #644]	; (8002c38 <TrajectoryGenerator+0x880>)
 80029b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b6:	a388      	add	r3, pc, #544	; (adr r3, 8002bd8 <TrajectoryGenerator+0x820>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fe f84e 	bl	8000a5c <__aeabi_dcmpge>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <TrajectoryGenerator+0x698>
		{
			kp_1 = 0;
 80029c6:	4b9d      	ldr	r3, [pc, #628]	; (8002c3c <TrajectoryGenerator+0x884>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
			ki_1 = 0;
 80029ce:	4b9c      	ldr	r3, [pc, #624]	; (8002c40 <TrajectoryGenerator+0x888>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
			kd_1 = 0;
 80029d6:	4b9b      	ldr	r3, [pc, #620]	; (8002c44 <TrajectoryGenerator+0x88c>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

			kp_2 = 0.001;
 80029de:	4b9a      	ldr	r3, [pc, #616]	; (8002c48 <TrajectoryGenerator+0x890>)
 80029e0:	4a9a      	ldr	r2, [pc, #616]	; (8002c4c <TrajectoryGenerator+0x894>)
 80029e2:	601a      	str	r2, [r3, #0]
			ki_2 = 0.04;
 80029e4:	4b9a      	ldr	r3, [pc, #616]	; (8002c50 <TrajectoryGenerator+0x898>)
 80029e6:	4a9b      	ldr	r2, [pc, #620]	; (8002c54 <TrajectoryGenerator+0x89c>)
 80029e8:	601a      	str	r2, [r3, #0]
			kd_2 = 0.0001;
 80029ea:	4b9b      	ldr	r3, [pc, #620]	; (8002c58 <TrajectoryGenerator+0x8a0>)
 80029ec:	4a9b      	ldr	r2, [pc, #620]	; (8002c5c <TrajectoryGenerator+0x8a4>)
 80029ee:	601a      	str	r2, [r3, #0]

			j_max = 0.6;
 80029f0:	499b      	ldr	r1, [pc, #620]	; (8002c60 <TrajectoryGenerator+0x8a8>)
 80029f2:	a37b      	add	r3, pc, #492	; (adr r3, 8002be0 <TrajectoryGenerator+0x828>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	e9c1 2300 	strd	r2, r3, [r1]

			upperbreak = 0.007 + masslimit_CW;
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <TrajectoryGenerator+0x874>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd4d 	bl	80004a0 <__aeabi_f2d>
 8002a06:	a378      	add	r3, pc, #480	; (adr r3, 8002be8 <TrajectoryGenerator+0x830>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fbea 	bl	80001e4 <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f86a 	bl	8000af0 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a91      	ldr	r2, [pc, #580]	; (8002c64 <TrajectoryGenerator+0x8ac>)
 8002a20:	6013      	str	r3, [r2, #0]
			lowerbreak = 0.007 + masslimit_CCW;
 8002a22:	4b80      	ldr	r3, [pc, #512]	; (8002c24 <TrajectoryGenerator+0x86c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd3a 	bl	80004a0 <__aeabi_f2d>
 8002a2c:	a36e      	add	r3, pc, #440	; (adr r3, 8002be8 <TrajectoryGenerator+0x830>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fbd7 	bl	80001e4 <__adddf3>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f857 	bl	8000af0 <__aeabi_d2f>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a88      	ldr	r2, [pc, #544]	; (8002c68 <TrajectoryGenerator+0x8b0>)
 8002a46:	6013      	str	r3, [r2, #0]

			TrajectoryEvaluationFlag =1;
 8002a48:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <TrajectoryGenerator+0x8b4>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e099      	b.n	8002b84 <TrajectoryGenerator+0x7cc>

		}

		else if(theta_dest <= 0.524){ // less than 30 degree
 8002a50:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <TrajectoryGenerator+0x880>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	a366      	add	r3, pc, #408	; (adr r3, 8002bf0 <TrajectoryGenerator+0x838>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fff4 	bl	8000a48 <__aeabi_dcmple>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d047      	beq.n	8002af6 <TrajectoryGenerator+0x73e>
			kp_1 = 0;
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <TrajectoryGenerator+0x884>)
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
			ki_1 = 0;
 8002a6e:	4b74      	ldr	r3, [pc, #464]	; (8002c40 <TrajectoryGenerator+0x888>)
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
			kd_1 = 0;
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <TrajectoryGenerator+0x88c>)
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

			kp_2 = 0;
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <TrajectoryGenerator+0x890>)
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
			ki_2 = 0;
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <TrajectoryGenerator+0x898>)
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
			kd_2 = 0;
 8002a8e:	4b72      	ldr	r3, [pc, #456]	; (8002c58 <TrajectoryGenerator+0x8a0>)
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

			j_max = 0.4;
 8002a96:	4972      	ldr	r1, [pc, #456]	; (8002c60 <TrajectoryGenerator+0x8a8>)
 8002a98:	a357      	add	r3, pc, #348	; (adr r3, 8002bf8 <TrajectoryGenerator+0x840>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	e9c1 2300 	strd	r2, r3, [r1]

			upperbreak = 0.008 + masslimit_CW;
 8002aa2:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <TrajectoryGenerator+0x874>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fcfa 	bl	80004a0 <__aeabi_f2d>
 8002aac:	a354      	add	r3, pc, #336	; (adr r3, 8002c00 <TrajectoryGenerator+0x848>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fb97 	bl	80001e4 <__adddf3>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7fe f817 	bl	8000af0 <__aeabi_d2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <TrajectoryGenerator+0x8ac>)
 8002ac6:	6013      	str	r3, [r2, #0]
			lowerbreak = 0.009 + masslimit_CCW;
 8002ac8:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <TrajectoryGenerator+0x86c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fce7 	bl	80004a0 <__aeabi_f2d>
 8002ad2:	a34d      	add	r3, pc, #308	; (adr r3, 8002c08 <TrajectoryGenerator+0x850>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fb84 	bl	80001e4 <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f804 	bl	8000af0 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <TrajectoryGenerator+0x8b0>)
 8002aec:	6013      	str	r3, [r2, #0]

			TrajectoryEvaluationFlag = 0;
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <TrajectoryGenerator+0x8b4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e046      	b.n	8002b84 <TrajectoryGenerator+0x7cc>
		}

		else{
			kp_1 = kp_1_m;
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <TrajectoryGenerator+0x8b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <TrajectoryGenerator+0x884>)
 8002afc:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_m;
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <TrajectoryGenerator+0x8bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4f      	ldr	r2, [pc, #316]	; (8002c40 <TrajectoryGenerator+0x888>)
 8002b04:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_m;
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <TrajectoryGenerator+0x8c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4e      	ldr	r2, [pc, #312]	; (8002c44 <TrajectoryGenerator+0x88c>)
 8002b0c:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_m;
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <TrajectoryGenerator+0x8c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <TrajectoryGenerator+0x890>)
 8002b14:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_m;
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <TrajectoryGenerator+0x8c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <TrajectoryGenerator+0x898>)
 8002b1c:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_m;
 8002b1e:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <TrajectoryGenerator+0x8cc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <TrajectoryGenerator+0x8a0>)
 8002b24:	6013      	str	r3, [r2, #0]

			j_max = 0.4;
 8002b26:	494e      	ldr	r1, [pc, #312]	; (8002c60 <TrajectoryGenerator+0x8a8>)
 8002b28:	a333      	add	r3, pc, #204	; (adr r3, 8002bf8 <TrajectoryGenerator+0x840>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	e9c1 2300 	strd	r2, r3, [r1]

			upperbreak = 0.007 + masslimit_CW;
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <TrajectoryGenerator+0x874>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcb2 	bl	80004a0 <__aeabi_f2d>
 8002b3c:	a32a      	add	r3, pc, #168	; (adr r3, 8002be8 <TrajectoryGenerator+0x830>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fb4f 	bl	80001e4 <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fd ffcf 	bl	8000af0 <__aeabi_d2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <TrajectoryGenerator+0x8ac>)
 8002b56:	6013      	str	r3, [r2, #0]
			lowerbreak = 0.007 + masslimit_CCW;
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <TrajectoryGenerator+0x86c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc9f 	bl	80004a0 <__aeabi_f2d>
 8002b62:	a321      	add	r3, pc, #132	; (adr r3, 8002be8 <TrajectoryGenerator+0x830>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fb3c 	bl	80001e4 <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fd ffbc 	bl	8000af0 <__aeabi_d2f>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <TrajectoryGenerator+0x8b0>)
 8002b7c:	6013      	str	r3, [r2, #0]

			TrajectoryEvaluationFlag = 1;
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <TrajectoryGenerator+0x8b4>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
		}



		if(w_max*j_max < pow(a_max,2.0)){
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <TrajectoryGenerator+0x8d0>)
 8002b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8a:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <TrajectoryGenerator+0x8a8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f7fd fcde 	bl	8000550 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <TrajectoryGenerator+0x8d4>)
 8002b9e:	ed93 7b00 	vldr	d7, [r3]
 8002ba2:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002c10 <TrajectoryGenerator+0x858>
 8002ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8002baa:	eef0 0a67 	vmov.f32	s1, s15
 8002bae:	f00a f8e3 	bl	800cd78 <pow>
 8002bb2:	ec53 2b10 	vmov	r2, r3, d0
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f7fd ff3b 	bl	8000a34 <__aeabi_dcmplt>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d069      	beq.n	8002c98 <TrajectoryGenerator+0x8e0>
			M=1.0;
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <TrajectoryGenerator+0x8d8>)
 8002bc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bca:	601a      	str	r2, [r3, #0]
			N=0.0;
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <TrajectoryGenerator+0x8dc>)
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e088      	b.n	8002ce8 <TrajectoryGenerator+0x930>
 8002bd6:	bf00      	nop
 8002bd8:	0346dc5d 	.word	0x0346dc5d
 8002bdc:	40184b78 	.word	0x40184b78
 8002be0:	33333333 	.word	0x33333333
 8002be4:	3fe33333 	.word	0x3fe33333
 8002be8:	3126e979 	.word	0x3126e979
 8002bec:	3f7cac08 	.word	0x3f7cac08
 8002bf0:	a5e353f8 	.word	0xa5e353f8
 8002bf4:	3fe0c49b 	.word	0x3fe0c49b
 8002bf8:	9999999a 	.word	0x9999999a
 8002bfc:	3fd99999 	.word	0x3fd99999
 8002c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c04:	3f80624d 	.word	0x3f80624d
 8002c08:	8d4fdf3b 	.word	0x8d4fdf3b
 8002c0c:	3f826e97 	.word	0x3f826e97
 8002c10:	00000000 	.word	0x00000000
 8002c14:	40000000 	.word	0x40000000
 8002c18:	200007bc 	.word	0x200007bc
 8002c1c:	20000508 	.word	0x20000508
 8002c20:	2000050c 	.word	0x2000050c
 8002c24:	200007b4 	.word	0x200007b4
 8002c28:	3c449ba6 	.word	0x3c449ba6
 8002c2c:	200007b8 	.word	0x200007b8
 8002c30:	3c23d70a 	.word	0x3c23d70a
 8002c34:	20000518 	.word	0x20000518
 8002c38:	20000708 	.word	0x20000708
 8002c3c:	2000078c 	.word	0x2000078c
 8002c40:	20000790 	.word	0x20000790
 8002c44:	20000794 	.word	0x20000794
 8002c48:	20000798 	.word	0x20000798
 8002c4c:	3a83126f 	.word	0x3a83126f
 8002c50:	2000079c 	.word	0x2000079c
 8002c54:	3d23d70a 	.word	0x3d23d70a
 8002c58:	200007a0 	.word	0x200007a0
 8002c5c:	38d1b717 	.word	0x38d1b717
 8002c60:	20000078 	.word	0x20000078
 8002c64:	20000088 	.word	0x20000088
 8002c68:	2000008c 	.word	0x2000008c
 8002c6c:	200006f4 	.word	0x200006f4
 8002c70:	200007a4 	.word	0x200007a4
 8002c74:	200007a8 	.word	0x200007a8
 8002c78:	200007ac 	.word	0x200007ac
 8002c7c:	20000080 	.word	0x20000080
 8002c80:	20000084 	.word	0x20000084
 8002c84:	200007b0 	.word	0x200007b0
 8002c88:	20000068 	.word	0x20000068
 8002c8c:	20000070 	.word	0x20000070
 8002c90:	20000838 	.word	0x20000838
 8002c94:	2000083c 	.word	0x2000083c
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 8002c98:	4b97      	ldr	r3, [pc, #604]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9e:	4b97      	ldr	r3, [pc, #604]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fc54 	bl	8000550 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4b93      	ldr	r3, [pc, #588]	; (8002f00 <TrajectoryGenerator+0xb48>)
 8002cb2:	ed93 7b00 	vldr	d7, [r3]
 8002cb6:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002ee8 <TrajectoryGenerator+0xb30>
 8002cba:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbe:	eef0 0a67 	vmov.f32	s1, s15
 8002cc2:	f00a f859 	bl	800cd78 <pow>
 8002cc6:	ec53 2b10 	vmov	r2, r3, d0
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fec5 	bl	8000a5c <__aeabi_dcmpge>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <TrajectoryGenerator+0x930>
			M=0.0;
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <TrajectoryGenerator+0xb4c>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
			N=1.0;
 8002ce0:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <TrajectoryGenerator+0xb50>)
 8002ce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ce6:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 8002ce8:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <TrajectoryGenerator+0xb48>)
 8002cea:	ed93 7b00 	vldr	d7, [r3]
 8002cee:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002ee8 <TrajectoryGenerator+0xb30>
 8002cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf6:	eef0 0a67 	vmov.f32	s1, s15
 8002cfa:	f00a f83d 	bl	800cd78 <pow>
 8002cfe:	ec51 0b10 	vmov	r0, r1, d0
 8002d02:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fd4c 	bl	80007a4 <__aeabi_ddiv>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd feec 	bl	8000af0 <__aeabi_d2f>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a7c      	ldr	r2, [pc, #496]	; (8002f0c <TrajectoryGenerator+0xb54>)
 8002d1c:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 8002d1e:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <TrajectoryGenerator+0xb48>)
 8002d20:	ed93 7b00 	vldr	d7, [r3]
 8002d24:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8002ef0 <TrajectoryGenerator+0xb38>
 8002d28:	eeb0 0a47 	vmov.f32	s0, s14
 8002d2c:	eef0 0a67 	vmov.f32	s1, s15
 8002d30:	f00a f822 	bl	800cd78 <pow>
 8002d34:	ec51 0b10 	vmov	r0, r1, d0
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	f7fd fa52 	bl	80001e4 <__adddf3>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002d4a:	ed93 7b00 	vldr	d7, [r3]
 8002d4e:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8002ee8 <TrajectoryGenerator+0xb30>
 8002d52:	eeb0 0a47 	vmov.f32	s0, s14
 8002d56:	eef0 0a67 	vmov.f32	s1, s15
 8002d5a:	f00a f80d 	bl	800cd78 <pow>
 8002d5e:	ec53 2b10 	vmov	r2, r3, d0
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fd1d 	bl	80007a4 <__aeabi_ddiv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd febd 	bl	8000af0 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <TrajectoryGenerator+0xb58>)
 8002d7a:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <TrajectoryGenerator+0xb4c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fb8d 	bl	80004a0 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fd05 	bl	80007a4 <__aeabi_ddiv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	ec43 2b17 	vmov	d7, r2, r3
 8002da2:	eeb0 0a47 	vmov.f32	s0, s14
 8002da6:	eef0 0a67 	vmov.f32	s1, s15
 8002daa:	f00a f855 	bl	800ce58 <sqrt>
 8002dae:	ec51 0b10 	vmov	r0, r1, d0
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	f7fd fa15 	bl	80001e4 <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fbc5 	bl	8000550 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4690      	mov	r8, r2
 8002dcc:	4699      	mov	r9, r3
 8002dce:	4b4e      	ldr	r3, [pc, #312]	; (8002f08 <TrajectoryGenerator+0xb50>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fb64 	bl	80004a0 <__aeabi_f2d>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	460d      	mov	r5, r1
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <TrajectoryGenerator+0xb48>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd fcdc 	bl	80007a4 <__aeabi_ddiv>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4692      	mov	sl, r2
 8002df2:	469b      	mov	fp, r3
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <TrajectoryGenerator+0xb48>)
 8002df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fcd0 	bl	80007a4 <__aeabi_ddiv>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4650      	mov	r0, sl
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	f7fd f9ea 	bl	80001e4 <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd fb9a 	bl	8000550 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4640      	mov	r0, r8
 8002e22:	4649      	mov	r1, r9
 8002e24:	f7fd f9de 	bl	80001e4 <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fb8b 	bl	8000550 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd fe55 	bl	8000af0 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <TrajectoryGenerator+0xb5c>)
 8002e4a:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <TrajectoryGenerator+0xb54>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb25 	bl	80004a0 <__aeabi_f2d>
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fe08 	bl	8000a70 <__aeabi_dcmpgt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80ec 	beq.w	8003040 <TrajectoryGenerator+0xc88>
			if(theta_dest > Sa){
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <TrajectoryGenerator+0xb58>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fb17 	bl	80004a0 <__aeabi_f2d>
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <TrajectoryGenerator+0xb60>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fddc 	bl	8000a34 <__aeabi_dcmplt>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d052      	beq.n	8002f28 <TrajectoryGenerator+0xb70>
				//caseI
				tj = sqrt((w_max/j_max));
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e88:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <TrajectoryGenerator+0xb44>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fc89 	bl	80007a4 <__aeabi_ddiv>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	ec43 2b17 	vmov	d7, r2, r3
 8002e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e9e:	eef0 0a67 	vmov.f32	s1, s15
 8002ea2:	f009 ffd9 	bl	800ce58 <sqrt>
 8002ea6:	ec53 2b10 	vmov	r2, r3, d0
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe1f 	bl	8000af0 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <TrajectoryGenerator+0xb64>)
 8002eb6:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <TrajectoryGenerator+0xb64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <TrajectoryGenerator+0xb68>)
 8002ebe:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <TrajectoryGenerator+0xb60>)
 8002ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <TrajectoryGenerator+0xb40>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd fc6a 	bl	80007a4 <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fe0a 	bl	8000af0 <__aeabi_d2f>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <TrajectoryGenerator+0xb6c>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e225      	b.n	8003330 <TrajectoryGenerator+0xf78>
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40000000 	.word	0x40000000
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40080000 	.word	0x40080000
 8002ef8:	20000068 	.word	0x20000068
 8002efc:	20000078 	.word	0x20000078
 8002f00:	20000070 	.word	0x20000070
 8002f04:	20000838 	.word	0x20000838
 8002f08:	2000083c 	.word	0x2000083c
 8002f0c:	20000840 	.word	0x20000840
 8002f10:	20000844 	.word	0x20000844
 8002f14:	20000848 	.word	0x20000848
 8002f18:	20000708 	.word	0x20000708
 8002f1c:	200006e8 	.word	0x200006e8
 8002f20:	200006ec 	.word	0x200006ec
 8002f24:	200006f0 	.word	0x200006f0
			}
			else if(theta_dest < Sa){
 8002f28:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <TrajectoryGenerator+0xd30>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fab7 	bl	80004a0 <__aeabi_f2d>
 8002f32:	4b6e      	ldr	r3, [pc, #440]	; (80030ec <TrajectoryGenerator+0xd34>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fd9a 	bl	8000a70 <__aeabi_dcmpgt>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 81f6 	beq.w	8003330 <TrajectoryGenerator+0xf78>
				if(theta_dest < Sv){
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <TrajectoryGenerator+0xd38>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd faa9 	bl	80004a0 <__aeabi_f2d>
 8002f4e:	4b67      	ldr	r3, [pc, #412]	; (80030ec <TrajectoryGenerator+0xd34>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fd8c 	bl	8000a70 <__aeabi_dcmpgt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d031      	beq.n	8002fc2 <TrajectoryGenerator+0xc0a>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <TrajectoryGenerator+0xd34>)
 8002f60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002f64:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <TrajectoryGenerator+0xd3c>)
 8002f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	f7fd f939 	bl	80001e4 <__adddf3>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4620      	mov	r0, r4
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7fd fc13 	bl	80007a4 <__aeabi_ddiv>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	ec43 2b17 	vmov	d7, r2, r3
 8002f86:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80030e0 <TrajectoryGenerator+0xd28>
 8002f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8e:	eef0 0a67 	vmov.f32	s1, s15
 8002f92:	f009 fef1 	bl	800cd78 <pow>
 8002f96:	ec53 2b10 	vmov	r2, r3, d0
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7fd fda7 	bl	8000af0 <__aeabi_d2f>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a54      	ldr	r2, [pc, #336]	; (80030f8 <TrajectoryGenerator+0xd40>)
 8002fa6:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <TrajectoryGenerator+0xd40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a53      	ldr	r2, [pc, #332]	; (80030fc <TrajectoryGenerator+0xd44>)
 8002fae:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 8002fb0:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <TrajectoryGenerator+0xd40>)
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <TrajectoryGenerator+0xd48>)
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
 8002fc0:	e1b6      	b.n	8003330 <TrajectoryGenerator+0xf78>
				}
				else if(theta_dest > Sv){
 8002fc2:	4b4b      	ldr	r3, [pc, #300]	; (80030f0 <TrajectoryGenerator+0xd38>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fa6a 	bl	80004a0 <__aeabi_f2d>
 8002fcc:	4b47      	ldr	r3, [pc, #284]	; (80030ec <TrajectoryGenerator+0xd34>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fd2f 	bl	8000a34 <__aeabi_dcmplt>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 81a9 	beq.w	8003330 <TrajectoryGenerator+0xf78>
					//caseIII
					tj = sqrt((w_max/j_max));
 8002fde:	4b49      	ldr	r3, [pc, #292]	; (8003104 <TrajectoryGenerator+0xd4c>)
 8002fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fe4:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <TrajectoryGenerator+0xd3c>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fbdb 	bl	80007a4 <__aeabi_ddiv>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	ec43 2b17 	vmov	d7, r2, r3
 8002ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8002ffa:	eef0 0a67 	vmov.f32	s1, s15
 8002ffe:	f009 ff2b 	bl	800ce58 <sqrt>
 8003002:	ec53 2b10 	vmov	r2, r3, d0
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fd71 	bl	8000af0 <__aeabi_d2f>
 800300e:	4603      	mov	r3, r0
 8003010:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <TrajectoryGenerator+0xd40>)
 8003012:	6013      	str	r3, [r2, #0]
					ta = tj;
 8003014:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <TrajectoryGenerator+0xd40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <TrajectoryGenerator+0xd44>)
 800301a:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 800301c:	4b33      	ldr	r3, [pc, #204]	; (80030ec <TrajectoryGenerator+0xd34>)
 800301e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <TrajectoryGenerator+0xd4c>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fbbc 	bl	80007a4 <__aeabi_ddiv>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd5c 	bl	8000af0 <__aeabi_d2f>
 8003038:	4603      	mov	r3, r0
 800303a:	4a31      	ldr	r2, [pc, #196]	; (8003100 <TrajectoryGenerator+0xd48>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e177      	b.n	8003330 <TrajectoryGenerator+0xf78>
				}
			}
		}
		else if(w_max >= Va){
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <TrajectoryGenerator+0xd50>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa2b 	bl	80004a0 <__aeabi_f2d>
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <TrajectoryGenerator+0xd4c>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd fcfa 	bl	8000a48 <__aeabi_dcmple>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 816a 	beq.w	8003330 <TrajectoryGenerator+0xf78>
			if(theta_dest < Sa){
 800305c:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <TrajectoryGenerator+0xd30>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa1d 	bl	80004a0 <__aeabi_f2d>
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <TrajectoryGenerator+0xd34>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd fd00 	bl	8000a70 <__aeabi_dcmpgt>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04a      	beq.n	800310c <TrajectoryGenerator+0xd54>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <TrajectoryGenerator+0xd34>)
 8003078:	e9d3 4500 	ldrd	r4, r5, [r3]
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <TrajectoryGenerator+0xd3c>)
 800307e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	f7fd f8ad 	bl	80001e4 <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd fb87 	bl	80007a4 <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ec43 2b17 	vmov	d7, r2, r3
 800309e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80030e0 <TrajectoryGenerator+0xd28>
 80030a2:	eeb0 0a47 	vmov.f32	s0, s14
 80030a6:	eef0 0a67 	vmov.f32	s1, s15
 80030aa:	f009 fe65 	bl	800cd78 <pow>
 80030ae:	ec53 2b10 	vmov	r2, r3, d0
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd1b 	bl	8000af0 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <TrajectoryGenerator+0xd40>)
 80030be:	6013      	str	r3, [r2, #0]
				ta = tj;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <TrajectoryGenerator+0xd40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <TrajectoryGenerator+0xd44>)
 80030c6:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <TrajectoryGenerator+0xd40>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <TrajectoryGenerator+0xd48>)
 80030d4:	edc3 7a00 	vstr	s15, [r3]
 80030d8:	e12a      	b.n	8003330 <TrajectoryGenerator+0xf78>
 80030da:	bf00      	nop
 80030dc:	f3af 8000 	nop.w
 80030e0:	85f06f69 	.word	0x85f06f69
 80030e4:	3fd554c9 	.word	0x3fd554c9
 80030e8:	20000844 	.word	0x20000844
 80030ec:	20000708 	.word	0x20000708
 80030f0:	20000848 	.word	0x20000848
 80030f4:	20000078 	.word	0x20000078
 80030f8:	200006e8 	.word	0x200006e8
 80030fc:	200006ec 	.word	0x200006ec
 8003100:	200006f0 	.word	0x200006f0
 8003104:	20000068 	.word	0x20000068
 8003108:	20000840 	.word	0x20000840
			}
			else if(theta_dest >= Sa){
 800310c:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <TrajectoryGenerator+0xed0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f9c5 	bl	80004a0 <__aeabi_f2d>
 8003116:	4b5d      	ldr	r3, [pc, #372]	; (800328c <TrajectoryGenerator+0xed4>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fc94 	bl	8000a48 <__aeabi_dcmple>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8104 	beq.w	8003330 <TrajectoryGenerator+0xf78>
				if(theta_dest < Sv){
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <TrajectoryGenerator+0xed8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd f9b7 	bl	80004a0 <__aeabi_f2d>
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <TrajectoryGenerator+0xed4>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd fc9a 	bl	8000a70 <__aeabi_dcmpgt>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80b6 	beq.w	80032b0 <TrajectoryGenerator+0xef8>
					//caseVI
					tj = a_max/j_max;
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <TrajectoryGenerator+0xedc>)
 8003146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <TrajectoryGenerator+0xee0>)
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd fb28 	bl	80007a4 <__aeabi_ddiv>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fcc8 	bl	8000af0 <__aeabi_d2f>
 8003160:	4603      	mov	r3, r0
 8003162:	4a4e      	ldr	r2, [pc, #312]	; (800329c <TrajectoryGenerator+0xee4>)
 8003164:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <TrajectoryGenerator+0xed4>)
 8003168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <TrajectoryGenerator+0xee8>)
 8003172:	f7fd f9ed 	bl	8000550 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4614      	mov	r4, r2
 800317c:	461d      	mov	r5, r3
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <TrajectoryGenerator+0xee0>)
 8003180:	ed93 7b00 	vldr	d7, [r3]
 8003184:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8003278 <TrajectoryGenerator+0xec0>
 8003188:	eeb0 0a47 	vmov.f32	s0, s14
 800318c:	eef0 0a67 	vmov.f32	s1, s15
 8003190:	f009 fdf2 	bl	800cd78 <pow>
 8003194:	ec53 2b10 	vmov	r2, r3, d0
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f9d8 	bl	8000550 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <TrajectoryGenerator+0xedc>)
 80031aa:	ed93 7b00 	vldr	d7, [r3]
 80031ae:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8003280 <TrajectoryGenerator+0xec8>
 80031b2:	eeb0 0a47 	vmov.f32	s0, s14
 80031b6:	eef0 0a67 	vmov.f32	s1, s15
 80031ba:	f009 fddd 	bl	800cd78 <pow>
 80031be:	ec53 2b10 	vmov	r2, r3, d0
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f80d 	bl	80001e4 <__adddf3>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <TrajectoryGenerator+0xee0>)
 80031d4:	ed93 7b00 	vldr	d7, [r3]
 80031d8:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8003278 <TrajectoryGenerator+0xec0>
 80031dc:	eeb0 0a47 	vmov.f32	s0, s14
 80031e0:	eef0 0a67 	vmov.f32	s1, s15
 80031e4:	f009 fdc8 	bl	800cd78 <pow>
 80031e8:	ec51 0b10 	vmov	r0, r1, d0
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <TrajectoryGenerator+0xedc>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd f9ad 	bl	8000550 <__aeabi_dmul>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd fad1 	bl	80007a4 <__aeabi_ddiv>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	ec43 2b17 	vmov	d7, r2, r3
 800320a:	eeb0 0a47 	vmov.f32	s0, s14
 800320e:	eef0 0a67 	vmov.f32	s1, s15
 8003212:	f009 fe21 	bl	800ce58 <sqrt>
 8003216:	ec55 4b10 	vmov	r4, r5, d0
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <TrajectoryGenerator+0xedc>)
 800321c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <TrajectoryGenerator+0xee0>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd fabd 	bl	80007a4 <__aeabi_ddiv>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4620      	mov	r0, r4
 8003230:	4629      	mov	r1, r5
 8003232:	f7fc ffd5 	bl	80001e0 <__aeabi_dsub>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <TrajectoryGenerator+0xeec>)
 8003244:	f7fd f984 	bl	8000550 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fc4e 	bl	8000af0 <__aeabi_d2f>
 8003254:	4603      	mov	r3, r0
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <TrajectoryGenerator+0xef0>)
 8003258:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <TrajectoryGenerator+0xef0>)
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <TrajectoryGenerator+0xee4>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <TrajectoryGenerator+0xef4>)
 800326c:	edc3 7a00 	vstr	s15, [r3]
 8003270:	e05e      	b.n	8003330 <TrajectoryGenerator+0xf78>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	00000000 	.word	0x00000000
 800327c:	40000000 	.word	0x40000000
 8003280:	00000000 	.word	0x00000000
 8003284:	40080000 	.word	0x40080000
 8003288:	20000844 	.word	0x20000844
 800328c:	20000708 	.word	0x20000708
 8003290:	20000848 	.word	0x20000848
 8003294:	20000070 	.word	0x20000070
 8003298:	20000078 	.word	0x20000078
 800329c:	200006e8 	.word	0x200006e8
 80032a0:	40100000 	.word	0x40100000
 80032a4:	3fe00000 	.word	0x3fe00000
 80032a8:	200006ec 	.word	0x200006ec
 80032ac:	200006f0 	.word	0x200006f0
				}
				else if(theta_dest >= Sv){
 80032b0:	4b6a      	ldr	r3, [pc, #424]	; (800345c <TrajectoryGenerator+0x10a4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f8f3 	bl	80004a0 <__aeabi_f2d>
 80032ba:	4b69      	ldr	r3, [pc, #420]	; (8003460 <TrajectoryGenerator+0x10a8>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd fbc2 	bl	8000a48 <__aeabi_dcmple>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d032      	beq.n	8003330 <TrajectoryGenerator+0xf78>
					//caseV
					tj = a_max/j_max;
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <TrajectoryGenerator+0x10ac>)
 80032cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d0:	4b65      	ldr	r3, [pc, #404]	; (8003468 <TrajectoryGenerator+0x10b0>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd fa65 	bl	80007a4 <__aeabi_ddiv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7fd fc05 	bl	8000af0 <__aeabi_d2f>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4a60      	ldr	r2, [pc, #384]	; (800346c <TrajectoryGenerator+0x10b4>)
 80032ea:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <TrajectoryGenerator+0x10b8>)
 80032ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <TrajectoryGenerator+0x10ac>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd fa54 	bl	80007a4 <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	f7fd fbf4 	bl	8000af0 <__aeabi_d2f>
 8003308:	4603      	mov	r3, r0
 800330a:	4a5a      	ldr	r2, [pc, #360]	; (8003474 <TrajectoryGenerator+0x10bc>)
 800330c:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 800330e:	4b54      	ldr	r3, [pc, #336]	; (8003460 <TrajectoryGenerator+0x10a8>)
 8003310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003314:	4b56      	ldr	r3, [pc, #344]	; (8003470 <TrajectoryGenerator+0x10b8>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd fa43 	bl	80007a4 <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fbe3 	bl	8000af0 <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <TrajectoryGenerator+0x10c0>)
 800332e:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 8003330:	4b4e      	ldr	r3, [pc, #312]	; (800346c <TrajectoryGenerator+0x10b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <TrajectoryGenerator+0x10c4>)
 8003336:	6013      	str	r3, [r2, #0]
		t2 = ta;
 8003338:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <TrajectoryGenerator+0x10bc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a50      	ldr	r2, [pc, #320]	; (8003480 <TrajectoryGenerator+0x10c8>)
 800333e:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <TrajectoryGenerator+0x10bc>)
 8003342:	ed93 7a00 	vldr	s14, [r3]
 8003346:	4b49      	ldr	r3, [pc, #292]	; (800346c <TrajectoryGenerator+0x10b4>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <TrajectoryGenerator+0x10cc>)
 8003352:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 8003356:	4b48      	ldr	r3, [pc, #288]	; (8003478 <TrajectoryGenerator+0x10c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <TrajectoryGenerator+0x10d0>)
 800335c:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 800335e:	4b46      	ldr	r3, [pc, #280]	; (8003478 <TrajectoryGenerator+0x10c0>)
 8003360:	ed93 7a00 	vldr	s14, [r3]
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <TrajectoryGenerator+0x10b4>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <TrajectoryGenerator+0x10d4>)
 8003370:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 8003374:	4b40      	ldr	r3, [pc, #256]	; (8003478 <TrajectoryGenerator+0x10c0>)
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <TrajectoryGenerator+0x10bc>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003384:	4b42      	ldr	r3, [pc, #264]	; (8003490 <TrajectoryGenerator+0x10d8>)
 8003386:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <TrajectoryGenerator+0x10c0>)
 800338c:	ed93 7a00 	vldr	s14, [r3]
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <TrajectoryGenerator+0x10b4>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <TrajectoryGenerator+0x10bc>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <TrajectoryGenerator+0x10dc>)
 80033a6:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <TrajectoryGenerator+0x10e0>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	493a      	ldr	r1, [pc, #232]	; (800349c <TrajectoryGenerator+0x10e4>)
 80033b2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 80033b6:	493a      	ldr	r1, [pc, #232]	; (80034a0 <TrajectoryGenerator+0x10e8>)
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 80033c4:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <TrajectoryGenerator+0x10ec>)
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <TrajectoryGenerator+0x10f0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d16b      	bne.n	80034ac <TrajectoryGenerator+0x10f4>
		{
			j_max = negative(j_max);
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <TrajectoryGenerator+0x10b0>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7fd fb87 	bl	8000af0 <__aeabi_d2f>
 80033e2:	4603      	mov	r3, r0
 80033e4:	ee00 3a10 	vmov	s0, r3
 80033e8:	f001 fc18 	bl	8004c1c <negative>
 80033ec:	ee10 3a10 	vmov	r3, s0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f855 	bl	80004a0 <__aeabi_f2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	491b      	ldr	r1, [pc, #108]	; (8003468 <TrajectoryGenerator+0x10b0>)
 80033fc:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <TrajectoryGenerator+0x10ac>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fb71 	bl	8000af0 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	ee00 3a10 	vmov	s0, r3
 8003414:	f001 fc02 	bl	8004c1c <negative>
 8003418:	ee10 3a10 	vmov	r3, s0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f83f 	bl	80004a0 <__aeabi_f2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	490f      	ldr	r1, [pc, #60]	; (8003464 <TrajectoryGenerator+0x10ac>)
 8003428:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <TrajectoryGenerator+0x10b8>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f7fd fb5b 	bl	8000af0 <__aeabi_d2f>
 800343a:	4603      	mov	r3, r0
 800343c:	ee00 3a10 	vmov	s0, r3
 8003440:	f001 fbec 	bl	8004c1c <negative>
 8003444:	ee10 3a10 	vmov	r3, s0
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f829 	bl	80004a0 <__aeabi_f2d>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4907      	ldr	r1, [pc, #28]	; (8003470 <TrajectoryGenerator+0x10b8>)
 8003454:	e9c1 2300 	strd	r2, r3, [r1]
 8003458:	e06a      	b.n	8003530 <TrajectoryGenerator+0x1178>
 800345a:	bf00      	nop
 800345c:	20000848 	.word	0x20000848
 8003460:	20000708 	.word	0x20000708
 8003464:	20000070 	.word	0x20000070
 8003468:	20000078 	.word	0x20000078
 800346c:	200006e8 	.word	0x200006e8
 8003470:	20000068 	.word	0x20000068
 8003474:	200006ec 	.word	0x200006ec
 8003478:	200006f0 	.word	0x200006f0
 800347c:	200006cc 	.word	0x200006cc
 8003480:	200006d0 	.word	0x200006d0
 8003484:	200006d4 	.word	0x200006d4
 8003488:	200006d8 	.word	0x200006d8
 800348c:	200006dc 	.word	0x200006dc
 8003490:	200006e0 	.word	0x200006e0
 8003494:	200006e4 	.word	0x200006e4
 8003498:	200006f8 	.word	0x200006f8
 800349c:	20000758 	.word	0x20000758
 80034a0:	20000760 	.word	0x20000760
 80034a4:	20000768 	.word	0x20000768
 80034a8:	200001f9 	.word	0x200001f9
		}

		else
		{
			j_max = positive(j_max);
 80034ac:	4bcc      	ldr	r3, [pc, #816]	; (80037e0 <TrajectoryGenerator+0x1428>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7fd fb1b 	bl	8000af0 <__aeabi_d2f>
 80034ba:	4603      	mov	r3, r0
 80034bc:	ee00 3a10 	vmov	s0, r3
 80034c0:	f001 fbc8 	bl	8004c54 <positive>
 80034c4:	ee10 3a10 	vmov	r3, s0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fc ffe9 	bl	80004a0 <__aeabi_f2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	49c3      	ldr	r1, [pc, #780]	; (80037e0 <TrajectoryGenerator+0x1428>)
 80034d4:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 80034d8:	4bc2      	ldr	r3, [pc, #776]	; (80037e4 <TrajectoryGenerator+0x142c>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7fd fb05 	bl	8000af0 <__aeabi_d2f>
 80034e6:	4603      	mov	r3, r0
 80034e8:	ee00 3a10 	vmov	s0, r3
 80034ec:	f001 fbb2 	bl	8004c54 <positive>
 80034f0:	ee10 3a10 	vmov	r3, s0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc ffd3 	bl	80004a0 <__aeabi_f2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	49b9      	ldr	r1, [pc, #740]	; (80037e4 <TrajectoryGenerator+0x142c>)
 8003500:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 8003504:	4bb8      	ldr	r3, [pc, #736]	; (80037e8 <TrajectoryGenerator+0x1430>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd faef 	bl	8000af0 <__aeabi_d2f>
 8003512:	4603      	mov	r3, r0
 8003514:	ee00 3a10 	vmov	s0, r3
 8003518:	f001 fb9c 	bl	8004c54 <positive>
 800351c:	ee10 3a10 	vmov	r3, s0
 8003520:	4618      	mov	r0, r3
 8003522:	f7fc ffbd 	bl	80004a0 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	49af      	ldr	r1, [pc, #700]	; (80037e8 <TrajectoryGenerator+0x1430>)
 800352c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 8003530:	4bab      	ldr	r3, [pc, #684]	; (80037e0 <TrajectoryGenerator+0x1428>)
 8003532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003536:	a3a4      	add	r3, pc, #656	; (adr r3, 80037c8 <TrajectoryGenerator+0x1410>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fd f808 	bl	8000550 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	4ba8      	ldr	r3, [pc, #672]	; (80037ec <TrajectoryGenerator+0x1434>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc ffa7 	bl	80004a0 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 80037d0 <TrajectoryGenerator+0x1418>
 800355a:	ec43 2b10 	vmov	d0, r2, r3
 800355e:	f009 fc0b 	bl	800cd78 <pow>
 8003562:	ec53 2b10 	vmov	r2, r3, d0
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f7fc fff1 	bl	8000550 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd fabb 	bl	8000af0 <__aeabi_d2f>
 800357a:	4603      	mov	r3, r0
 800357c:	4a9c      	ldr	r2, [pc, #624]	; (80037f0 <TrajectoryGenerator+0x1438>)
 800357e:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8003580:	4b97      	ldr	r3, [pc, #604]	; (80037e0 <TrajectoryGenerator+0x1428>)
 8003582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b9a      	ldr	r3, [pc, #616]	; (80037f4 <TrajectoryGenerator+0x143c>)
 800358c:	f7fc ffe0 	bl	8000550 <__aeabi_dmul>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4b94      	ldr	r3, [pc, #592]	; (80037ec <TrajectoryGenerator+0x1434>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc ff7f 	bl	80004a0 <__aeabi_f2d>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80037d8 <TrajectoryGenerator+0x1420>
 80035aa:	ec43 2b10 	vmov	d0, r2, r3
 80035ae:	f009 fbe3 	bl	800cd78 <pow>
 80035b2:	ec53 2b10 	vmov	r2, r3, d0
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fc ffc9 	bl	8000550 <__aeabi_dmul>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd fa93 	bl	8000af0 <__aeabi_d2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a8a      	ldr	r2, [pc, #552]	; (80037f8 <TrajectoryGenerator+0x1440>)
 80035ce:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 80035d0:	4b86      	ldr	r3, [pc, #536]	; (80037ec <TrajectoryGenerator+0x1434>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff63 	bl	80004a0 <__aeabi_f2d>
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <TrajectoryGenerator+0x1428>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fc ffb6 	bl	8000550 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fd fa80 	bl	8000af0 <__aeabi_d2f>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4a82      	ldr	r2, [pc, #520]	; (80037fc <TrajectoryGenerator+0x1444>)
 80035f4:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 80035f6:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <TrajectoryGenerator+0x1438>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b7e      	ldr	r3, [pc, #504]	; (80037f8 <TrajectoryGenerator+0x1440>)
 80035fe:	edd3 6a00 	vldr	s13, [r3]
 8003602:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <TrajectoryGenerator+0x1448>)
 8003604:	ed93 6a00 	vldr	s12, [r3]
 8003608:	4b78      	ldr	r3, [pc, #480]	; (80037ec <TrajectoryGenerator+0x1434>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361a:	ee17 0a90 	vmov	r0, s15
 800361e:	f7fc ff3f 	bl	80004a0 <__aeabi_f2d>
 8003622:	4604      	mov	r4, r0
 8003624:	460d      	mov	r5, r1
 8003626:	4b75      	ldr	r3, [pc, #468]	; (80037fc <TrajectoryGenerator+0x1444>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff38 	bl	80004a0 <__aeabi_f2d>
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <TrajectoryGenerator+0x143c>)
 8003636:	f7fc ff8b 	bl	8000550 <__aeabi_dmul>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4690      	mov	r8, r2
 8003640:	4699      	mov	r9, r3
 8003642:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <TrajectoryGenerator+0x1448>)
 8003644:	ed93 7a00 	vldr	s14, [r3]
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <TrajectoryGenerator+0x1434>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	ee17 0a90 	vmov	r0, s15
 8003656:	f7fc ff23 	bl	80004a0 <__aeabi_f2d>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 80037d8 <TrajectoryGenerator+0x1420>
 8003662:	ec43 2b10 	vmov	d0, r2, r3
 8003666:	f009 fb87 	bl	800cd78 <pow>
 800366a:	ec53 2b10 	vmov	r2, r3, d0
 800366e:	4640      	mov	r0, r8
 8003670:	4649      	mov	r1, r9
 8003672:	f7fc ff6d 	bl	8000550 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f7fc fdb1 	bl	80001e4 <__adddf3>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd fa31 	bl	8000af0 <__aeabi_d2f>
 800368e:	4603      	mov	r3, r0
 8003690:	4a57      	ldr	r2, [pc, #348]	; (80037f0 <TrajectoryGenerator+0x1438>)
 8003692:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8003694:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <TrajectoryGenerator+0x1440>)
 8003696:	ed93 7a00 	vldr	s14, [r3]
 800369a:	4b58      	ldr	r3, [pc, #352]	; (80037fc <TrajectoryGenerator+0x1444>)
 800369c:	edd3 6a00 	vldr	s13, [r3]
 80036a0:	4b57      	ldr	r3, [pc, #348]	; (8003800 <TrajectoryGenerator+0x1448>)
 80036a2:	ed93 6a00 	vldr	s12, [r3]
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <TrajectoryGenerator+0x1434>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <TrajectoryGenerator+0x1440>)
 80036ba:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <TrajectoryGenerator+0x1444>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <TrajectoryGenerator+0x1444>)
 80036c4:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <TrajectoryGenerator+0x1438>)
 80036c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <TrajectoryGenerator+0x1440>)
 80036ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80036d2:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <TrajectoryGenerator+0x144c>)
 80036d4:	ed93 6a00 	vldr	s12, [r3]
 80036d8:	4b49      	ldr	r3, [pc, #292]	; (8003800 <TrajectoryGenerator+0x1448>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ea:	ee17 0a90 	vmov	r0, s15
 80036ee:	f7fc fed7 	bl	80004a0 <__aeabi_f2d>
 80036f2:	4604      	mov	r4, r0
 80036f4:	460d      	mov	r5, r1
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <TrajectoryGenerator+0x1444>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc fed0 	bl	80004a0 <__aeabi_f2d>
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <TrajectoryGenerator+0x143c>)
 8003706:	f7fc ff23 	bl	8000550 <__aeabi_dmul>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4690      	mov	r8, r2
 8003710:	4699      	mov	r9, r3
 8003712:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <TrajectoryGenerator+0x144c>)
 8003714:	ed93 7a00 	vldr	s14, [r3]
 8003718:	4b39      	ldr	r3, [pc, #228]	; (8003800 <TrajectoryGenerator+0x1448>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003722:	ee17 0a90 	vmov	r0, s15
 8003726:	f7fc febb 	bl	80004a0 <__aeabi_f2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 80037d8 <TrajectoryGenerator+0x1420>
 8003732:	ec43 2b10 	vmov	d0, r2, r3
 8003736:	f009 fb1f 	bl	800cd78 <pow>
 800373a:	ec53 2b10 	vmov	r2, r3, d0
 800373e:	4640      	mov	r0, r8
 8003740:	4649      	mov	r1, r9
 8003742:	f7fc ff05 	bl	8000550 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f7fc fd49 	bl	80001e4 <__adddf3>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4614      	mov	r4, r2
 8003758:	461d      	mov	r5, r3
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <TrajectoryGenerator+0x144c>)
 800375c:	ed93 7a00 	vldr	s14, [r3]
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <TrajectoryGenerator+0x1448>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376a:	ee17 0a90 	vmov	r0, s15
 800376e:	f7fc fe97 	bl	80004a0 <__aeabi_f2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80037d0 <TrajectoryGenerator+0x1418>
 800377a:	ec43 2b10 	vmov	d0, r2, r3
 800377e:	f009 fafb 	bl	800cd78 <pow>
 8003782:	ec51 0b10 	vmov	r0, r1, d0
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <TrajectoryGenerator+0x1428>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc fee0 	bl	8000550 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <TrajectoryGenerator+0x1450>)
 800379e:	f7fd f801 	bl	80007a4 <__aeabi_ddiv>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd19 	bl	80001e0 <__aeabi_dsub>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd f99b 	bl	8000af0 <__aeabi_d2f>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <TrajectoryGenerator+0x1438>)
 80037be:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <TrajectoryGenerator+0x1440>)
 80037c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80037c6:	e021      	b.n	800380c <TrajectoryGenerator+0x1454>
 80037c8:	55555555 	.word	0x55555555
 80037cc:	3fc55555 	.word	0x3fc55555
 80037d0:	00000000 	.word	0x00000000
 80037d4:	40080000 	.word	0x40080000
 80037d8:	00000000 	.word	0x00000000
 80037dc:	40000000 	.word	0x40000000
 80037e0:	20000078 	.word	0x20000078
 80037e4:	20000070 	.word	0x20000070
 80037e8:	20000068 	.word	0x20000068
 80037ec:	200006cc 	.word	0x200006cc
 80037f0:	20000740 	.word	0x20000740
 80037f4:	3fe00000 	.word	0x3fe00000
 80037f8:	20000728 	.word	0x20000728
 80037fc:	20000710 	.word	0x20000710
 8003800:	200006d0 	.word	0x200006d0
 8003804:	200006d4 	.word	0x200006d4
 8003808:	40180000 	.word	0x40180000
 800380c:	4bd0      	ldr	r3, [pc, #832]	; (8003b50 <TrajectoryGenerator+0x1798>)
 800380e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003812:	4bd0      	ldr	r3, [pc, #832]	; (8003b54 <TrajectoryGenerator+0x179c>)
 8003814:	ed93 6a00 	vldr	s12, [r3]
 8003818:	4bcf      	ldr	r3, [pc, #828]	; (8003b58 <TrajectoryGenerator+0x17a0>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	ee17 0a90 	vmov	r0, s15
 800382e:	f7fc fe37 	bl	80004a0 <__aeabi_f2d>
 8003832:	4604      	mov	r4, r0
 8003834:	460d      	mov	r5, r1
 8003836:	4bc9      	ldr	r3, [pc, #804]	; (8003b5c <TrajectoryGenerator+0x17a4>)
 8003838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	4bc7      	ldr	r3, [pc, #796]	; (8003b60 <TrajectoryGenerator+0x17a8>)
 8003842:	f7fc fe85 	bl	8000550 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4690      	mov	r8, r2
 800384c:	4699      	mov	r9, r3
 800384e:	4bc1      	ldr	r3, [pc, #772]	; (8003b54 <TrajectoryGenerator+0x179c>)
 8003850:	ed93 7a00 	vldr	s14, [r3]
 8003854:	4bc0      	ldr	r3, [pc, #768]	; (8003b58 <TrajectoryGenerator+0x17a0>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800385e:	ee17 0a90 	vmov	r0, s15
 8003862:	f7fc fe1d 	bl	80004a0 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003b40 <TrajectoryGenerator+0x1788>
 800386e:	ec43 2b10 	vmov	d0, r2, r3
 8003872:	f009 fa81 	bl	800cd78 <pow>
 8003876:	ec53 2b10 	vmov	r2, r3, d0
 800387a:	4640      	mov	r0, r8
 800387c:	4649      	mov	r1, r9
 800387e:	f7fc fe67 	bl	8000550 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fc fca9 	bl	80001e0 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f92b 	bl	8000af0 <__aeabi_d2f>
 800389a:	4603      	mov	r3, r0
 800389c:	4ab1      	ldr	r2, [pc, #708]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 800389e:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 80038a0:	4bab      	ldr	r3, [pc, #684]	; (8003b50 <TrajectoryGenerator+0x1798>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fdfb 	bl	80004a0 <__aeabi_f2d>
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
 80038ae:	4ba9      	ldr	r3, [pc, #676]	; (8003b54 <TrajectoryGenerator+0x179c>)
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	4ba8      	ldr	r3, [pc, #672]	; (8003b58 <TrajectoryGenerator+0x17a0>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	ee17 0a90 	vmov	r0, s15
 80038c2:	f7fc fded 	bl	80004a0 <__aeabi_f2d>
 80038c6:	4ba5      	ldr	r3, [pc, #660]	; (8003b5c <TrajectoryGenerator+0x17a4>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fe40 	bl	8000550 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fc82 	bl	80001e0 <__aeabi_dsub>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f904 	bl	8000af0 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a99      	ldr	r2, [pc, #612]	; (8003b50 <TrajectoryGenerator+0x1798>)
 80038ec:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 80038ee:	4b9e      	ldr	r3, [pc, #632]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 80038f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80038f4:	4b9b      	ldr	r3, [pc, #620]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 80038f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80038fa:	4b9c      	ldr	r3, [pc, #624]	; (8003b6c <TrajectoryGenerator+0x17b4>)
 80038fc:	ed93 6a00 	vldr	s12, [r3]
 8003900:	4b94      	ldr	r3, [pc, #592]	; (8003b54 <TrajectoryGenerator+0x179c>)
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800390a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800390e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003912:	4b95      	ldr	r3, [pc, #596]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 8003914:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8003918:	4b92      	ldr	r3, [pc, #584]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a91      	ldr	r2, [pc, #580]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 800391e:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8003920:	4b8b      	ldr	r3, [pc, #556]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a8a      	ldr	r2, [pc, #552]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003926:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8003928:	4b8f      	ldr	r3, [pc, #572]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 800392a:	ed93 7a03 	vldr	s14, [r3, #12]
 800392e:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 8003930:	edd3 6a03 	vldr	s13, [r3, #12]
 8003934:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 8003936:	ed93 6a00 	vldr	s12, [r3]
 800393a:	4b8c      	ldr	r3, [pc, #560]	; (8003b6c <TrajectoryGenerator+0x17b4>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394c:	ee17 0a90 	vmov	r0, s15
 8003950:	f7fc fda6 	bl	80004a0 <__aeabi_f2d>
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 800395a:	ed93 7a00 	vldr	s14, [r3]
 800395e:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <TrajectoryGenerator+0x17b4>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003968:	ee17 0a90 	vmov	r0, s15
 800396c:	f7fc fd98 	bl	80004a0 <__aeabi_f2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003b48 <TrajectoryGenerator+0x1790>
 8003978:	ec43 2b10 	vmov	d0, r2, r3
 800397c:	f009 f9fc 	bl	800cd78 <pow>
 8003980:	ec51 0b10 	vmov	r0, r1, d0
 8003984:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <TrajectoryGenerator+0x17a4>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fde1 	bl	8000550 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	4b76      	ldr	r3, [pc, #472]	; (8003b74 <TrajectoryGenerator+0x17bc>)
 800399c:	f7fc ff02 	bl	80007a4 <__aeabi_ddiv>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fc1a 	bl	80001e0 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fd f89c 	bl	8000af0 <__aeabi_d2f>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 80039bc:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 80039be:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fd6c 	bl	80004a0 <__aeabi_f2d>
 80039c8:	4604      	mov	r4, r0
 80039ca:	460d      	mov	r5, r1
 80039cc:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <TrajectoryGenerator+0x17a4>)
 80039ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <TrajectoryGenerator+0x17a8>)
 80039d8:	f7fc fdba 	bl	8000550 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4690      	mov	r8, r2
 80039e2:	4699      	mov	r9, r3
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 80039e6:	ed93 7a00 	vldr	s14, [r3]
 80039ea:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <TrajectoryGenerator+0x17b4>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f4:	ee17 0a90 	vmov	r0, s15
 80039f8:	f7fc fd52 	bl	80004a0 <__aeabi_f2d>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8003b40 <TrajectoryGenerator+0x1788>
 8003a04:	ec43 2b10 	vmov	d0, r2, r3
 8003a08:	f009 f9b6 	bl	800cd78 <pow>
 8003a0c:	ec53 2b10 	vmov	r2, r3, d0
 8003a10:	4640      	mov	r0, r8
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fd9c 	bl	8000550 <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f7fc fbde 	bl	80001e0 <__aeabi_dsub>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fd f860 	bl	8000af0 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a4c      	ldr	r2, [pc, #304]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 8003a34:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fd30 	bl	80004a0 <__aeabi_f2d>
 8003a40:	4604      	mov	r4, r0
 8003a42:	460d      	mov	r5, r1
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 8003a46:	ed93 7a00 	vldr	s14, [r3]
 8003a4a:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <TrajectoryGenerator+0x17b4>)
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a54:	ee17 0a90 	vmov	r0, s15
 8003a58:	f7fc fd22 	bl	80004a0 <__aeabi_f2d>
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <TrajectoryGenerator+0x17a4>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f7fc fd75 	bl	8000550 <__aeabi_dmul>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f7fc fbb7 	bl	80001e0 <__aeabi_dsub>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f7fd f839 	bl	8000af0 <__aeabi_d2f>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003a82:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 8003a84:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 8003a86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 8003a8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003a90:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <TrajectoryGenerator+0x17c0>)
 8003a92:	ed93 6a00 	vldr	s12, [r3]
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fcf8 	bl	80004a0 <__aeabi_f2d>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fcf1 	bl	80004a0 <__aeabi_f2d>
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <TrajectoryGenerator+0x17a8>)
 8003ac4:	f7fc fd44 	bl	8000550 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4690      	mov	r8, r2
 8003ace:	4699      	mov	r9, r3
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <TrajectoryGenerator+0x17c0>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae0:	ee17 0a90 	vmov	r0, s15
 8003ae4:	f7fc fcdc 	bl	80004a0 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003b40 <TrajectoryGenerator+0x1788>
 8003af0:	ec43 2b10 	vmov	d0, r2, r3
 8003af4:	f009 f940 	bl	800cd78 <pow>
 8003af8:	ec53 2b10 	vmov	r2, r3, d0
 8003afc:	4640      	mov	r0, r8
 8003afe:	4649      	mov	r1, r9
 8003b00:	f7fc fd26 	bl	8000550 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7fc fb6a 	bl	80001e4 <__adddf3>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fc ffea 	bl	8000af0 <__aeabi_d2f>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <TrajectoryGenerator+0x17b0>)
 8003b20:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <TrajectoryGenerator+0x17ac>)
 8003b24:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <TrajectoryGenerator+0x1798>)
 8003b2a:	edd3 6a04 	vldr	s13, [r3, #16]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <TrajectoryGenerator+0x17c0>)
 8003b30:	ed93 6a00 	vldr	s12, [r3]
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <TrajectoryGenerator+0x17b8>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b3e:	e01d      	b.n	8003b7c <TrajectoryGenerator+0x17c4>
 8003b40:	00000000 	.word	0x00000000
 8003b44:	40000000 	.word	0x40000000
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	40080000 	.word	0x40080000
 8003b50:	20000710 	.word	0x20000710
 8003b54:	200006d4 	.word	0x200006d4
 8003b58:	200006d0 	.word	0x200006d0
 8003b5c:	20000078 	.word	0x20000078
 8003b60:	3fe00000 	.word	0x3fe00000
 8003b64:	20000728 	.word	0x20000728
 8003b68:	20000740 	.word	0x20000740
 8003b6c:	200006d8 	.word	0x200006d8
 8003b70:	200006dc 	.word	0x200006dc
 8003b74:	40180000 	.word	0x40180000
 8003b78:	200006e0 	.word	0x200006e0
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <TrajectoryGenerator+0x1860>)
 8003b86:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <TrajectoryGenerator+0x1864>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <TrajectoryGenerator+0x1864>)
 8003b90:	6153      	str	r3, [r2, #20]




		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <TrajectoryGenerator+0x1868>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <TrajectoryGenerator+0x186c>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]


		//Reset Cascade PID
		e1 = 0;
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <TrajectoryGenerator+0x1870>)
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
		s1 = 0;
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <TrajectoryGenerator+0x1874>)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
		p1 = 0;
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <TrajectoryGenerator+0x1878>)
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
		u1 = 0;
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <TrajectoryGenerator+0x187c>)
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
		e2 = 0;
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <TrajectoryGenerator+0x1880>)
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
		s2 = 0;
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <TrajectoryGenerator+0x1884>)
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
		p2 = 0;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <TrajectoryGenerator+0x1888>)
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
		u2 = 0;
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <TrajectoryGenerator+0x188c>)
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

		//Reset TransferFunction
		for(int i=0;i<4;i++){
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	e010      	b.n	8003c06 <TrajectoryGenerator+0x184e>
			u_i[i]=0;
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <TrajectoryGenerator+0x1890>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			y_i[i]=0;
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TrajectoryGenerator+0x1894>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	ddeb      	ble.n	8003be4 <TrajectoryGenerator+0x182c>
		}
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c16:	bf00      	nop
 8003c18:	20000728 	.word	0x20000728
 8003c1c:	20000710 	.word	0x20000710
 8003c20:	20000516 	.word	0x20000516
 8003c24:	20000515 	.word	0x20000515
 8003c28:	2000076c 	.word	0x2000076c
 8003c2c:	20000770 	.word	0x20000770
 8003c30:	20000774 	.word	0x20000774
 8003c34:	20000778 	.word	0x20000778
 8003c38:	2000077c 	.word	0x2000077c
 8003c3c:	20000780 	.word	0x20000780
 8003c40:	20000784 	.word	0x20000784
 8003c44:	20000788 	.word	0x20000788
 8003c48:	20000810 	.word	0x20000810
 8003c4c:	20000820 	.word	0x20000820

08003c50 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	af00      	add	r7, sp, #0
	if( 0 <= t && t < t1){
 8003c56:	4b8e      	ldr	r3, [pc, #568]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	db70      	blt.n	8003d48 <TrajectoryEvaluation+0xf8>
 8003c66:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003c68:	ed93 7a00 	vldr	s14, [r3]
 8003c6c:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <TrajectoryEvaluation+0x244>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d565      	bpl.n	8003d48 <TrajectoryEvaluation+0xf8>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 8003c7c:	4b86      	ldr	r3, [pc, #536]	; (8003e98 <TrajectoryEvaluation+0x248>)
 8003c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c82:	a37d      	add	r3, pc, #500	; (adr r3, 8003e78 <TrajectoryEvaluation+0x228>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fc62 	bl	8000550 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc01 	bl	80004a0 <__aeabi_f2d>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003e80 <TrajectoryEvaluation+0x230>
 8003ca6:	ec43 2b10 	vmov	d0, r2, r3
 8003caa:	f009 f865 	bl	800cd78 <pow>
 8003cae:	ec53 2b10 	vmov	r2, r3, d0
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	f7fc fc4b 	bl	8000550 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <TrajectoryEvaluation+0x24c>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fa8c 	bl	80001e4 <__adddf3>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4973      	ldr	r1, [pc, #460]	; (8003ea0 <TrajectoryEvaluation+0x250>)
 8003cd2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 8003cd6:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <TrajectoryEvaluation+0x248>)
 8003cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <TrajectoryEvaluation+0x254>)
 8003ce2:	f7fc fc35 	bl	8000550 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4614      	mov	r4, r2
 8003cec:	461d      	mov	r5, r3
 8003cee:	4b68      	ldr	r3, [pc, #416]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fbd4 	bl	80004a0 <__aeabi_f2d>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8003e88 <TrajectoryEvaluation+0x238>
 8003d00:	ec43 2b10 	vmov	d0, r2, r3
 8003d04:	f009 f838 	bl	800cd78 <pow>
 8003d08:	ec53 2b10 	vmov	r2, r3, d0
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc fc1e 	bl	8000550 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4963      	ldr	r1, [pc, #396]	; (8003ea8 <TrajectoryEvaluation+0x258>)
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fbbc 	bl	80004a0 <__aeabi_f2d>
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <TrajectoryEvaluation+0x248>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc fc0f 	bl	8000550 <__aeabi_dmul>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc fed9 	bl	8000af0 <__aeabi_d2f>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <TrajectoryEvaluation+0x25c>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	f000 bcfb 	b.w	800473e <TrajectoryEvaluation+0xaee>
	}
	else if (t1 <= t && t< t2){
 8003d48:	4b52      	ldr	r3, [pc, #328]	; (8003e94 <TrajectoryEvaluation+0x244>)
 8003d4a:	ed93 7a00 	vldr	s14, [r3]
 8003d4e:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	f200 80b0 	bhi.w	8003ec0 <TrajectoryEvaluation+0x270>
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003d62:	ed93 7a00 	vldr	s14, [r3]
 8003d66:	4b52      	ldr	r3, [pc, #328]	; (8003eb0 <TrajectoryEvaluation+0x260>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	f140 80a4 	bpl.w	8003ec0 <TrajectoryEvaluation+0x270>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 8003d78:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <TrajectoryEvaluation+0x264>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb8f 	bl	80004a0 <__aeabi_f2d>
 8003d82:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <TrajectoryEvaluation+0x24c>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fa2c 	bl	80001e4 <__adddf3>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4614      	mov	r4, r2
 8003d92:	461d      	mov	r5, r3
 8003d94:	4b48      	ldr	r3, [pc, #288]	; (8003eb8 <TrajectoryEvaluation+0x268>)
 8003d96:	ed93 7a00 	vldr	s14, [r3]
 8003d9a:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003d9c:	edd3 6a00 	vldr	s13, [r3]
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <TrajectoryEvaluation+0x244>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	ee17 0a90 	vmov	r0, s15
 8003db2:	f7fc fb75 	bl	80004a0 <__aeabi_f2d>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc fa11 	bl	80001e4 <__adddf3>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	461d      	mov	r5, r3
 8003dca:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <TrajectoryEvaluation+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fb66 	bl	80004a0 <__aeabi_f2d>
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <TrajectoryEvaluation+0x254>)
 8003dda:	f7fc fbb9 	bl	8000550 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4690      	mov	r8, r2
 8003de4:	4699      	mov	r9, r3
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003de8:	ed93 7a00 	vldr	s14, [r3]
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <TrajectoryEvaluation+0x244>)
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df6:	ee17 0a90 	vmov	r0, s15
 8003dfa:	f7fc fb51 	bl	80004a0 <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003e88 <TrajectoryEvaluation+0x238>
 8003e06:	ec43 2b10 	vmov	d0, r2, r3
 8003e0a:	f008 ffb5 	bl	800cd78 <pow>
 8003e0e:	ec53 2b10 	vmov	r2, r3, d0
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f7fc fb9b 	bl	8000550 <__aeabi_dmul>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc f9df 	bl	80001e4 <__adddf3>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	491d      	ldr	r1, [pc, #116]	; (8003ea0 <TrajectoryEvaluation+0x250>)
 8003e2c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <TrajectoryEvaluation+0x268>)
 8003e32:	ed93 7a00 	vldr	s14, [r3]
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <TrajectoryEvaluation+0x26c>)
 8003e38:	edd3 6a00 	vldr	s13, [r3]
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <TrajectoryEvaluation+0x240>)
 8003e3e:	ed93 6a00 	vldr	s12, [r3]
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <TrajectoryEvaluation+0x244>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e54:	ee17 0a90 	vmov	r0, s15
 8003e58:	f7fc fb22 	bl	80004a0 <__aeabi_f2d>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4911      	ldr	r1, [pc, #68]	; (8003ea8 <TrajectoryEvaluation+0x258>)
 8003e62:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <TrajectoryEvaluation+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <TrajectoryEvaluation+0x25c>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	f000 bc66 	b.w	800473e <TrajectoryEvaluation+0xaee>
 8003e72:	bf00      	nop
 8003e74:	f3af 8000 	nop.w
 8003e78:	55555555 	.word	0x55555555
 8003e7c:	3fc55555 	.word	0x3fc55555
 8003e80:	00000000 	.word	0x00000000
 8003e84:	40080000 	.word	0x40080000
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	40000000 	.word	0x40000000
 8003e90:	200006c8 	.word	0x200006c8
 8003e94:	200006cc 	.word	0x200006cc
 8003e98:	20000078 	.word	0x20000078
 8003e9c:	200006f8 	.word	0x200006f8
 8003ea0:	20000758 	.word	0x20000758
 8003ea4:	3fe00000 	.word	0x3fe00000
 8003ea8:	20000760 	.word	0x20000760
 8003eac:	20000768 	.word	0x20000768
 8003eb0:	200006d0 	.word	0x200006d0
 8003eb4:	20000740 	.word	0x20000740
 8003eb8:	20000728 	.word	0x20000728
 8003ebc:	20000710 	.word	0x20000710
	}
	else if (t2 <= t && t < t3){
 8003ec0:	4bb5      	ldr	r3, [pc, #724]	; (8004198 <TrajectoryEvaluation+0x548>)
 8003ec2:	ed93 7a00 	vldr	s14, [r3]
 8003ec6:	4bb5      	ldr	r3, [pc, #724]	; (800419c <TrajectoryEvaluation+0x54c>)
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	f200 8107 	bhi.w	80040e6 <TrajectoryEvaluation+0x496>
 8003ed8:	4bb0      	ldr	r3, [pc, #704]	; (800419c <TrajectoryEvaluation+0x54c>)
 8003eda:	ed93 7a00 	vldr	s14, [r3]
 8003ede:	4bb0      	ldr	r3, [pc, #704]	; (80041a0 <TrajectoryEvaluation+0x550>)
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	f140 80fb 	bpl.w	80040e6 <TrajectoryEvaluation+0x496>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 8003ef0:	4bac      	ldr	r3, [pc, #688]	; (80041a4 <TrajectoryEvaluation+0x554>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fad3 	bl	80004a0 <__aeabi_f2d>
 8003efa:	4bab      	ldr	r3, [pc, #684]	; (80041a8 <TrajectoryEvaluation+0x558>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f7fc f970 	bl	80001e4 <__adddf3>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4ba7      	ldr	r3, [pc, #668]	; (80041ac <TrajectoryEvaluation+0x55c>)
 8003f0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f12:	4ba2      	ldr	r3, [pc, #648]	; (800419c <TrajectoryEvaluation+0x54c>)
 8003f14:	edd3 6a00 	vldr	s13, [r3]
 8003f18:	4b9f      	ldr	r3, [pc, #636]	; (8004198 <TrajectoryEvaluation+0x548>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fab9 	bl	80004a0 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7fc f955 	bl	80001e4 <__adddf3>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	461d      	mov	r5, r3
 8003f42:	4b9b      	ldr	r3, [pc, #620]	; (80041b0 <TrajectoryEvaluation+0x560>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc faaa 	bl	80004a0 <__aeabi_f2d>
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	4b98      	ldr	r3, [pc, #608]	; (80041b4 <TrajectoryEvaluation+0x564>)
 8003f52:	f7fc fafd 	bl	8000550 <__aeabi_dmul>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4690      	mov	r8, r2
 8003f5c:	4699      	mov	r9, r3
 8003f5e:	4b8f      	ldr	r3, [pc, #572]	; (800419c <TrajectoryEvaluation+0x54c>)
 8003f60:	ed93 7a00 	vldr	s14, [r3]
 8003f64:	4b8c      	ldr	r3, [pc, #560]	; (8004198 <TrajectoryEvaluation+0x548>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f6e:	ee17 0a90 	vmov	r0, s15
 8003f72:	f7fc fa95 	bl	80004a0 <__aeabi_f2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8004188 <TrajectoryEvaluation+0x538>
 8003f7e:	ec43 2b10 	vmov	d0, r2, r3
 8003f82:	f008 fef9 	bl	800cd78 <pow>
 8003f86:	ec53 2b10 	vmov	r2, r3, d0
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f7fc fadf 	bl	8000550 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc f923 	bl	80001e4 <__adddf3>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4614      	mov	r4, r2
 8003fa4:	461d      	mov	r5, r3
 8003fa6:	4b7d      	ldr	r3, [pc, #500]	; (800419c <TrajectoryEvaluation+0x54c>)
 8003fa8:	ed93 7a00 	vldr	s14, [r3]
 8003fac:	4b7a      	ldr	r3, [pc, #488]	; (8004198 <TrajectoryEvaluation+0x548>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb6:	ee17 0a90 	vmov	r0, s15
 8003fba:	f7fc fa71 	bl	80004a0 <__aeabi_f2d>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8004190 <TrajectoryEvaluation+0x540>
 8003fc6:	ec43 2b10 	vmov	d0, r2, r3
 8003fca:	f008 fed5 	bl	800cd78 <pow>
 8003fce:	ec51 0b10 	vmov	r0, r1, d0
 8003fd2:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <TrajectoryEvaluation+0x568>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc faba 	bl	8000550 <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	4b74      	ldr	r3, [pc, #464]	; (80041bc <TrajectoryEvaluation+0x56c>)
 8003fea:	f7fc fbdb 	bl	80007a4 <__aeabi_ddiv>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc f8f3 	bl	80001e0 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4970      	ldr	r1, [pc, #448]	; (80041c0 <TrajectoryEvaluation+0x570>)
 8004000:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 8004004:	4b69      	ldr	r3, [pc, #420]	; (80041ac <TrajectoryEvaluation+0x55c>)
 8004006:	ed93 7a01 	vldr	s14, [r3, #4]
 800400a:	4b69      	ldr	r3, [pc, #420]	; (80041b0 <TrajectoryEvaluation+0x560>)
 800400c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004010:	4b62      	ldr	r3, [pc, #392]	; (800419c <TrajectoryEvaluation+0x54c>)
 8004012:	ed93 6a00 	vldr	s12, [r3]
 8004016:	4b60      	ldr	r3, [pc, #384]	; (8004198 <TrajectoryEvaluation+0x548>)
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004028:	ee17 0a90 	vmov	r0, s15
 800402c:	f7fc fa38 	bl	80004a0 <__aeabi_f2d>
 8004030:	4604      	mov	r4, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4b60      	ldr	r3, [pc, #384]	; (80041b8 <TrajectoryEvaluation+0x568>)
 8004036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <TrajectoryEvaluation+0x564>)
 8004040:	f7fc fa86 	bl	8000550 <__aeabi_dmul>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4690      	mov	r8, r2
 800404a:	4699      	mov	r9, r3
 800404c:	4b53      	ldr	r3, [pc, #332]	; (800419c <TrajectoryEvaluation+0x54c>)
 800404e:	ed93 7a00 	vldr	s14, [r3]
 8004052:	4b51      	ldr	r3, [pc, #324]	; (8004198 <TrajectoryEvaluation+0x548>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800405c:	ee17 0a90 	vmov	r0, s15
 8004060:	f7fc fa1e 	bl	80004a0 <__aeabi_f2d>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8004188 <TrajectoryEvaluation+0x538>
 800406c:	ec43 2b10 	vmov	d0, r2, r3
 8004070:	f008 fe82 	bl	800cd78 <pow>
 8004074:	ec53 2b10 	vmov	r2, r3, d0
 8004078:	4640      	mov	r0, r8
 800407a:	4649      	mov	r1, r9
 800407c:	f7fc fa68 	bl	8000550 <__aeabi_dmul>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	f7fc f8aa 	bl	80001e0 <__aeabi_dsub>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	494c      	ldr	r1, [pc, #304]	; (80041c4 <TrajectoryEvaluation+0x574>)
 8004092:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 8004096:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <TrajectoryEvaluation+0x560>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa00 	bl	80004a0 <__aeabi_f2d>
 80040a0:	4604      	mov	r4, r0
 80040a2:	460d      	mov	r5, r1
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <TrajectoryEvaluation+0x54c>)
 80040a6:	ed93 7a00 	vldr	s14, [r3]
 80040aa:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <TrajectoryEvaluation+0x548>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b4:	ee17 0a90 	vmov	r0, s15
 80040b8:	f7fc f9f2 	bl	80004a0 <__aeabi_f2d>
 80040bc:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <TrajectoryEvaluation+0x568>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc fa45 	bl	8000550 <__aeabi_dmul>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc f887 	bl	80001e0 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fc fd09 	bl	8000af0 <__aeabi_d2f>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <TrajectoryEvaluation+0x578>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e32b      	b.n	800473e <TrajectoryEvaluation+0xaee>
	}
	else if (t3 <= t && t < t4 ){
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <TrajectoryEvaluation+0x550>)
 80040e8:	ed93 7a00 	vldr	s14, [r3]
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <TrajectoryEvaluation+0x54c>)
 80040ee:	edd3 7a00 	vldr	s15, [r3]
 80040f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fa:	d869      	bhi.n	80041d0 <TrajectoryEvaluation+0x580>
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <TrajectoryEvaluation+0x54c>)
 80040fe:	ed93 7a00 	vldr	s14, [r3]
 8004102:	4b32      	ldr	r3, [pc, #200]	; (80041cc <TrajectoryEvaluation+0x57c>)
 8004104:	edd3 7a00 	vldr	s15, [r3]
 8004108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	d55e      	bpl.n	80041d0 <TrajectoryEvaluation+0x580>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <TrajectoryEvaluation+0x554>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc f9c2 	bl	80004a0 <__aeabi_f2d>
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <TrajectoryEvaluation+0x558>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc f85f 	bl	80001e4 <__adddf3>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <TrajectoryEvaluation+0x55c>)
 8004130:	ed93 7a02 	vldr	s14, [r3, #8]
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <TrajectoryEvaluation+0x54c>)
 8004136:	edd3 6a00 	vldr	s13, [r3]
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <TrajectoryEvaluation+0x550>)
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004148:	ee17 0a90 	vmov	r0, s15
 800414c:	f7fc f9a8 	bl	80004a0 <__aeabi_f2d>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4620      	mov	r0, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7fc f844 	bl	80001e4 <__adddf3>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4917      	ldr	r1, [pc, #92]	; (80041c0 <TrajectoryEvaluation+0x570>)
 8004162:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <TrajectoryEvaluation+0x55c>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f998 	bl	80004a0 <__aeabi_f2d>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4913      	ldr	r1, [pc, #76]	; (80041c4 <TrajectoryEvaluation+0x574>)
 8004176:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <TrajectoryEvaluation+0x578>)
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e2dc      	b.n	800473e <TrajectoryEvaluation+0xaee>
 8004184:	f3af 8000 	nop.w
 8004188:	00000000 	.word	0x00000000
 800418c:	40000000 	.word	0x40000000
 8004190:	00000000 	.word	0x00000000
 8004194:	40080000 	.word	0x40080000
 8004198:	200006d0 	.word	0x200006d0
 800419c:	200006c8 	.word	0x200006c8
 80041a0:	200006d4 	.word	0x200006d4
 80041a4:	20000740 	.word	0x20000740
 80041a8:	200006f8 	.word	0x200006f8
 80041ac:	20000728 	.word	0x20000728
 80041b0:	20000710 	.word	0x20000710
 80041b4:	3fe00000 	.word	0x3fe00000
 80041b8:	20000078 	.word	0x20000078
 80041bc:	40180000 	.word	0x40180000
 80041c0:	20000758 	.word	0x20000758
 80041c4:	20000760 	.word	0x20000760
 80041c8:	20000768 	.word	0x20000768
 80041cc:	200006d8 	.word	0x200006d8
	}
	else if (t4 <= t && t < t5 ){
 80041d0:	4bb3      	ldr	r3, [pc, #716]	; (80044a0 <TrajectoryEvaluation+0x850>)
 80041d2:	ed93 7a00 	vldr	s14, [r3]
 80041d6:	4bb3      	ldr	r3, [pc, #716]	; (80044a4 <TrajectoryEvaluation+0x854>)
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	f200 80be 	bhi.w	8004364 <TrajectoryEvaluation+0x714>
 80041e8:	4bae      	ldr	r3, [pc, #696]	; (80044a4 <TrajectoryEvaluation+0x854>)
 80041ea:	ed93 7a00 	vldr	s14, [r3]
 80041ee:	4bae      	ldr	r3, [pc, #696]	; (80044a8 <TrajectoryEvaluation+0x858>)
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	f140 80b2 	bpl.w	8004364 <TrajectoryEvaluation+0x714>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 8004200:	4baa      	ldr	r3, [pc, #680]	; (80044ac <TrajectoryEvaluation+0x85c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f94b 	bl	80004a0 <__aeabi_f2d>
 800420a:	4ba9      	ldr	r3, [pc, #676]	; (80044b0 <TrajectoryEvaluation+0x860>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fb ffe8 	bl	80001e4 <__adddf3>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4690      	mov	r8, r2
 800421a:	4699      	mov	r9, r3
 800421c:	4ba5      	ldr	r3, [pc, #660]	; (80044b4 <TrajectoryEvaluation+0x864>)
 800421e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004222:	4ba0      	ldr	r3, [pc, #640]	; (80044a4 <TrajectoryEvaluation+0x854>)
 8004224:	edd3 6a00 	vldr	s13, [r3]
 8004228:	4b9d      	ldr	r3, [pc, #628]	; (80044a0 <TrajectoryEvaluation+0x850>)
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004236:	ee17 0a90 	vmov	r0, s15
 800423a:	f7fc f931 	bl	80004a0 <__aeabi_f2d>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fb ffcd 	bl	80001e4 <__adddf3>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4690      	mov	r8, r2
 8004250:	4699      	mov	r9, r3
 8004252:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <TrajectoryEvaluation+0x854>)
 8004254:	ed93 7a00 	vldr	s14, [r3]
 8004258:	4b91      	ldr	r3, [pc, #580]	; (80044a0 <TrajectoryEvaluation+0x850>)
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004262:	ee17 0a90 	vmov	r0, s15
 8004266:	f7fc f91b 	bl	80004a0 <__aeabi_f2d>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8004490 <TrajectoryEvaluation+0x840>
 8004272:	ec43 2b10 	vmov	d0, r2, r3
 8004276:	f008 fd7f 	bl	800cd78 <pow>
 800427a:	ec51 0b10 	vmov	r0, r1, d0
 800427e:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <TrajectoryEvaluation+0x868>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f7fc f964 	bl	8000550 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	4b89      	ldr	r3, [pc, #548]	; (80044bc <TrajectoryEvaluation+0x86c>)
 8004296:	f7fc fa85 	bl	80007a4 <__aeabi_ddiv>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4640      	mov	r0, r8
 80042a0:	4649      	mov	r1, r9
 80042a2:	f7fb ff9d 	bl	80001e0 <__aeabi_dsub>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4985      	ldr	r1, [pc, #532]	; (80044c0 <TrajectoryEvaluation+0x870>)
 80042ac:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 80042b0:	4b80      	ldr	r3, [pc, #512]	; (80044b4 <TrajectoryEvaluation+0x864>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc f8f3 	bl	80004a0 <__aeabi_f2d>
 80042ba:	4680      	mov	r8, r0
 80042bc:	4689      	mov	r9, r1
 80042be:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <TrajectoryEvaluation+0x868>)
 80042c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <TrajectoryEvaluation+0x874>)
 80042ca:	f7fc f941 	bl	8000550 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4692      	mov	sl, r2
 80042d4:	469b      	mov	fp, r3
 80042d6:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <TrajectoryEvaluation+0x854>)
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	4b70      	ldr	r3, [pc, #448]	; (80044a0 <TrajectoryEvaluation+0x850>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042e6:	ee17 0a90 	vmov	r0, s15
 80042ea:	f7fc f8d9 	bl	80004a0 <__aeabi_f2d>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8004498 <TrajectoryEvaluation+0x848>
 80042f6:	ec43 2b10 	vmov	d0, r2, r3
 80042fa:	f008 fd3d 	bl	800cd78 <pow>
 80042fe:	ec53 2b10 	vmov	r2, r3, d0
 8004302:	4650      	mov	r0, sl
 8004304:	4659      	mov	r1, fp
 8004306:	f7fc f923 	bl	8000550 <__aeabi_dmul>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4640      	mov	r0, r8
 8004310:	4649      	mov	r1, r9
 8004312:	f7fb ff65 	bl	80001e0 <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	496b      	ldr	r1, [pc, #428]	; (80044c8 <TrajectoryEvaluation+0x878>)
 800431c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 8004320:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <TrajectoryEvaluation+0x868>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	4614      	mov	r4, r2
 8004328:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800432c:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <TrajectoryEvaluation+0x854>)
 800432e:	ed93 7a00 	vldr	s14, [r3]
 8004332:	4b5b      	ldr	r3, [pc, #364]	; (80044a0 <TrajectoryEvaluation+0x850>)
 8004334:	edd3 7a00 	vldr	s15, [r3]
 8004338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433c:	ee17 0a90 	vmov	r0, s15
 8004340:	f7fc f8ae 	bl	80004a0 <__aeabi_f2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4620      	mov	r0, r4
 800434a:	4629      	mov	r1, r5
 800434c:	f7fc f900 	bl	8000550 <__aeabi_dmul>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	f7fc fbca 	bl	8000af0 <__aeabi_d2f>
 800435c:	4603      	mov	r3, r0
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <TrajectoryEvaluation+0x87c>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e1ec      	b.n	800473e <TrajectoryEvaluation+0xaee>
	}
	else if (t5 <= t && t < t6 ){
 8004364:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <TrajectoryEvaluation+0x858>)
 8004366:	ed93 7a00 	vldr	s14, [r3]
 800436a:	4b4e      	ldr	r3, [pc, #312]	; (80044a4 <TrajectoryEvaluation+0x854>)
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	f200 80ae 	bhi.w	80044d8 <TrajectoryEvaluation+0x888>
 800437c:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <TrajectoryEvaluation+0x854>)
 800437e:	ed93 7a00 	vldr	s14, [r3]
 8004382:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <TrajectoryEvaluation+0x880>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	f140 80a2 	bpl.w	80044d8 <TrajectoryEvaluation+0x888>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 8004394:	4b45      	ldr	r3, [pc, #276]	; (80044ac <TrajectoryEvaluation+0x85c>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f881 	bl	80004a0 <__aeabi_f2d>
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <TrajectoryEvaluation+0x860>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f7fb ff1e 	bl	80001e4 <__adddf3>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <TrajectoryEvaluation+0x864>)
 80043b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <TrajectoryEvaluation+0x854>)
 80043b8:	edd3 6a00 	vldr	s13, [r3]
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <TrajectoryEvaluation+0x858>)
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	ee17 0a90 	vmov	r0, s15
 80043ce:	f7fc f867 	bl	80004a0 <__aeabi_f2d>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fb ff03 	bl	80001e4 <__adddf3>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <TrajectoryEvaluation+0x884>)
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f858 	bl	80004a0 <__aeabi_f2d>
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <TrajectoryEvaluation+0x874>)
 80043f6:	f7fc f8ab 	bl	8000550 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <TrajectoryEvaluation+0x854>)
 8004404:	ed93 7a00 	vldr	s14, [r3]
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <TrajectoryEvaluation+0x858>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	ee17 0a90 	vmov	r0, s15
 8004416:	f7fc f843 	bl	80004a0 <__aeabi_f2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8004498 <TrajectoryEvaluation+0x848>
 8004422:	ec43 2b10 	vmov	d0, r2, r3
 8004426:	f008 fca7 	bl	800cd78 <pow>
 800442a:	ec53 2b10 	vmov	r2, r3, d0
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	f7fc f88d 	bl	8000550 <__aeabi_dmul>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4620      	mov	r0, r4
 800443c:	4629      	mov	r1, r5
 800443e:	f7fb fed1 	bl	80001e4 <__adddf3>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	491e      	ldr	r1, [pc, #120]	; (80044c0 <TrajectoryEvaluation+0x870>)
 8004448:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <TrajectoryEvaluation+0x864>)
 800444e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <TrajectoryEvaluation+0x884>)
 8004454:	edd3 6a04 	vldr	s13, [r3, #16]
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <TrajectoryEvaluation+0x854>)
 800445a:	ed93 6a00 	vldr	s12, [r3]
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <TrajectoryEvaluation+0x858>)
 8004460:	edd3 7a00 	vldr	s15, [r3]
 8004464:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004470:	ee17 0a90 	vmov	r0, s15
 8004474:	f7fc f814 	bl	80004a0 <__aeabi_f2d>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4912      	ldr	r1, [pc, #72]	; (80044c8 <TrajectoryEvaluation+0x878>)
 800447e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <TrajectoryEvaluation+0x884>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <TrajectoryEvaluation+0x87c>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e158      	b.n	800473e <TrajectoryEvaluation+0xaee>
 800448c:	f3af 8000 	nop.w
 8004490:	00000000 	.word	0x00000000
 8004494:	40080000 	.word	0x40080000
 8004498:	00000000 	.word	0x00000000
 800449c:	40000000 	.word	0x40000000
 80044a0:	200006d8 	.word	0x200006d8
 80044a4:	200006c8 	.word	0x200006c8
 80044a8:	200006dc 	.word	0x200006dc
 80044ac:	20000740 	.word	0x20000740
 80044b0:	200006f8 	.word	0x200006f8
 80044b4:	20000728 	.word	0x20000728
 80044b8:	20000078 	.word	0x20000078
 80044bc:	40180000 	.word	0x40180000
 80044c0:	20000758 	.word	0x20000758
 80044c4:	3fe00000 	.word	0x3fe00000
 80044c8:	20000760 	.word	0x20000760
 80044cc:	20000768 	.word	0x20000768
 80044d0:	200006e0 	.word	0x200006e0
 80044d4:	20000710 	.word	0x20000710
	}
	else if (t6 <= t && t < t7 ){
 80044d8:	4b9f      	ldr	r3, [pc, #636]	; (8004758 <TrajectoryEvaluation+0xb08>)
 80044da:	ed93 7a00 	vldr	s14, [r3]
 80044de:	4b9f      	ldr	r3, [pc, #636]	; (800475c <TrajectoryEvaluation+0xb0c>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	f200 8107 	bhi.w	80046fe <TrajectoryEvaluation+0xaae>
 80044f0:	4b9a      	ldr	r3, [pc, #616]	; (800475c <TrajectoryEvaluation+0xb0c>)
 80044f2:	ed93 7a00 	vldr	s14, [r3]
 80044f6:	4b9a      	ldr	r3, [pc, #616]	; (8004760 <TrajectoryEvaluation+0xb10>)
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	f140 80fb 	bpl.w	80046fe <TrajectoryEvaluation+0xaae>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8004508:	4b96      	ldr	r3, [pc, #600]	; (8004764 <TrajectoryEvaluation+0xb14>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffc7 	bl	80004a0 <__aeabi_f2d>
 8004512:	4b95      	ldr	r3, [pc, #596]	; (8004768 <TrajectoryEvaluation+0xb18>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fb fe64 	bl	80001e4 <__adddf3>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4b91      	ldr	r3, [pc, #580]	; (800476c <TrajectoryEvaluation+0xb1c>)
 8004526:	ed93 7a05 	vldr	s14, [r3, #20]
 800452a:	4b8c      	ldr	r3, [pc, #560]	; (800475c <TrajectoryEvaluation+0xb0c>)
 800452c:	edd3 6a00 	vldr	s13, [r3]
 8004530:	4b89      	ldr	r3, [pc, #548]	; (8004758 <TrajectoryEvaluation+0xb08>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	ee17 0a90 	vmov	r0, s15
 8004542:	f7fb ffad 	bl	80004a0 <__aeabi_f2d>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fb fe49 	bl	80001e4 <__adddf3>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4614      	mov	r4, r2
 8004558:	461d      	mov	r5, r3
 800455a:	4b85      	ldr	r3, [pc, #532]	; (8004770 <TrajectoryEvaluation+0xb20>)
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb ff9e 	bl	80004a0 <__aeabi_f2d>
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	4b82      	ldr	r3, [pc, #520]	; (8004774 <TrajectoryEvaluation+0xb24>)
 800456a:	f7fb fff1 	bl	8000550 <__aeabi_dmul>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4690      	mov	r8, r2
 8004574:	4699      	mov	r9, r3
 8004576:	4b79      	ldr	r3, [pc, #484]	; (800475c <TrajectoryEvaluation+0xb0c>)
 8004578:	ed93 7a00 	vldr	s14, [r3]
 800457c:	4b76      	ldr	r3, [pc, #472]	; (8004758 <TrajectoryEvaluation+0xb08>)
 800457e:	edd3 7a00 	vldr	s15, [r3]
 8004582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004586:	ee17 0a90 	vmov	r0, s15
 800458a:	f7fb ff89 	bl	80004a0 <__aeabi_f2d>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8004748 <TrajectoryEvaluation+0xaf8>
 8004596:	ec43 2b10 	vmov	d0, r2, r3
 800459a:	f008 fbed 	bl	800cd78 <pow>
 800459e:	ec53 2b10 	vmov	r2, r3, d0
 80045a2:	4640      	mov	r0, r8
 80045a4:	4649      	mov	r1, r9
 80045a6:	f7fb ffd3 	bl	8000550 <__aeabi_dmul>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4620      	mov	r0, r4
 80045b0:	4629      	mov	r1, r5
 80045b2:	f7fb fe17 	bl	80001e4 <__adddf3>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4614      	mov	r4, r2
 80045bc:	461d      	mov	r5, r3
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <TrajectoryEvaluation+0xb0c>)
 80045c0:	ed93 7a00 	vldr	s14, [r3]
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <TrajectoryEvaluation+0xb08>)
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ce:	ee17 0a90 	vmov	r0, s15
 80045d2:	f7fb ff65 	bl	80004a0 <__aeabi_f2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8004750 <TrajectoryEvaluation+0xb00>
 80045de:	ec43 2b10 	vmov	d0, r2, r3
 80045e2:	f008 fbc9 	bl	800cd78 <pow>
 80045e6:	ec51 0b10 	vmov	r0, r1, d0
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <TrajectoryEvaluation+0xb28>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fb ffae 	bl	8000550 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	4b5e      	ldr	r3, [pc, #376]	; (800477c <TrajectoryEvaluation+0xb2c>)
 8004602:	f7fc f8cf 	bl	80007a4 <__aeabi_ddiv>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4620      	mov	r0, r4
 800460c:	4629      	mov	r1, r5
 800460e:	f7fb fde9 	bl	80001e4 <__adddf3>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	495a      	ldr	r1, [pc, #360]	; (8004780 <TrajectoryEvaluation+0xb30>)
 8004618:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <TrajectoryEvaluation+0xb1c>)
 800461e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <TrajectoryEvaluation+0xb20>)
 8004624:	edd3 6a05 	vldr	s13, [r3, #20]
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <TrajectoryEvaluation+0xb0c>)
 800462a:	ed93 6a00 	vldr	s12, [r3]
 800462e:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <TrajectoryEvaluation+0xb08>)
 8004630:	edd3 7a00 	vldr	s15, [r3]
 8004634:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800463c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004640:	ee17 0a90 	vmov	r0, s15
 8004644:	f7fb ff2c 	bl	80004a0 <__aeabi_f2d>
 8004648:	4604      	mov	r4, r0
 800464a:	460d      	mov	r5, r1
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <TrajectoryEvaluation+0xb28>)
 800464e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <TrajectoryEvaluation+0xb24>)
 8004658:	f7fb ff7a 	bl	8000550 <__aeabi_dmul>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4690      	mov	r8, r2
 8004662:	4699      	mov	r9, r3
 8004664:	4b3d      	ldr	r3, [pc, #244]	; (800475c <TrajectoryEvaluation+0xb0c>)
 8004666:	ed93 7a00 	vldr	s14, [r3]
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <TrajectoryEvaluation+0xb08>)
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004674:	ee17 0a90 	vmov	r0, s15
 8004678:	f7fb ff12 	bl	80004a0 <__aeabi_f2d>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8004748 <TrajectoryEvaluation+0xaf8>
 8004684:	ec43 2b10 	vmov	d0, r2, r3
 8004688:	f008 fb76 	bl	800cd78 <pow>
 800468c:	ec53 2b10 	vmov	r2, r3, d0
 8004690:	4640      	mov	r0, r8
 8004692:	4649      	mov	r1, r9
 8004694:	f7fb ff5c 	bl	8000550 <__aeabi_dmul>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4620      	mov	r0, r4
 800469e:	4629      	mov	r1, r5
 80046a0:	f7fb fda0 	bl	80001e4 <__adddf3>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4936      	ldr	r1, [pc, #216]	; (8004784 <TrajectoryEvaluation+0xb34>)
 80046aa:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <TrajectoryEvaluation+0xb20>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fef4 	bl	80004a0 <__aeabi_f2d>
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <TrajectoryEvaluation+0xb0c>)
 80046be:	ed93 7a00 	vldr	s14, [r3]
 80046c2:	4b25      	ldr	r3, [pc, #148]	; (8004758 <TrajectoryEvaluation+0xb08>)
 80046c4:	edd3 7a00 	vldr	s15, [r3]
 80046c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046cc:	ee17 0a90 	vmov	r0, s15
 80046d0:	f7fb fee6 	bl	80004a0 <__aeabi_f2d>
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <TrajectoryEvaluation+0xb28>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f7fb ff39 	bl	8000550 <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fb fd7d 	bl	80001e4 <__adddf3>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	f7fc f9fd 	bl	8000af0 <__aeabi_d2f>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <TrajectoryEvaluation+0xb38>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e01f      	b.n	800473e <TrajectoryEvaluation+0xaee>
	}
	else if (t7 <= t ){
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <TrajectoryEvaluation+0xb10>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <TrajectoryEvaluation+0xb0c>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d900      	bls.n	8004716 <TrajectoryEvaluation+0xac6>
//			volt = 0;
//			RunMotor(volt, PID_dir);
//			Go_Flag = 0;
//		}

}
 8004714:	e013      	b.n	800473e <TrajectoryEvaluation+0xaee>
		theta_ref = theta_f;
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <TrajectoryEvaluation+0xb3c>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	4918      	ldr	r1, [pc, #96]	; (8004780 <TrajectoryEvaluation+0xb30>)
 800471e:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <TrajectoryEvaluation+0xb34>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	4916      	ldr	r1, [pc, #88]	; (8004784 <TrajectoryEvaluation+0xb34>)
 800472a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <TrajectoryEvaluation+0xb38>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <TrajectoryEvaluation+0xb38>)
 8004734:	6013      	str	r3, [r2, #0]
		TrajectoryEvaluationFlag =0;
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <TrajectoryEvaluation+0xb40>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
}
 800473c:	e7ff      	b.n	800473e <TrajectoryEvaluation+0xaee>
 800473e:	bf00      	nop
 8004740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004744:	f3af 8000 	nop.w
 8004748:	00000000 	.word	0x00000000
 800474c:	40000000 	.word	0x40000000
 8004750:	00000000 	.word	0x00000000
 8004754:	40080000 	.word	0x40080000
 8004758:	200006e0 	.word	0x200006e0
 800475c:	200006c8 	.word	0x200006c8
 8004760:	200006e4 	.word	0x200006e4
 8004764:	20000740 	.word	0x20000740
 8004768:	200006f8 	.word	0x200006f8
 800476c:	20000728 	.word	0x20000728
 8004770:	20000710 	.word	0x20000710
 8004774:	3fe00000 	.word	0x3fe00000
 8004778:	20000078 	.word	0x20000078
 800477c:	40180000 	.word	0x40180000
 8004780:	20000758 	.word	0x20000758
 8004784:	20000760 	.word	0x20000760
 8004788:	20000768 	.word	0x20000768
 800478c:	20000700 	.word	0x20000700
 8004790:	200006f4 	.word	0x200006f4

08004794 <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	ed87 0a01 	vstr	s0, [r7, #4]
 800479e:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 80047a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <PositionController+0x9c>)
 80047b0:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <PositionController+0xa0>)
 80047b6:	ed93 7a00 	vldr	s14, [r3]
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <PositionController+0x9c>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <PositionController+0xa0>)
 80047c6:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <PositionController+0xa4>)
 80047cc:	ed93 7a00 	vldr	s14, [r3]
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <PositionController+0x9c>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047da:	4b18      	ldr	r3, [pc, #96]	; (800483c <PositionController+0xa8>)
 80047dc:	edd3 6a00 	vldr	s13, [r3]
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <PositionController+0xa0>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <PositionController+0x9c>)
 80047f0:	edd3 6a00 	vldr	s13, [r3]
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <PositionController+0xac>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <PositionController+0xb0>)
 8004800:	edd3 7a00 	vldr	s15, [r3]
 8004804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <PositionController+0xb4>)
 800480e:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <PositionController+0x9c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <PositionController+0xac>)
 8004818:	6013      	str	r3, [r2, #0]
	return u1;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <PositionController+0xb4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	ee07 3a90 	vmov	s15, r3
}
 8004822:	eeb0 0a67 	vmov.f32	s0, s15
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	2000076c 	.word	0x2000076c
 8004834:	20000770 	.word	0x20000770
 8004838:	2000078c 	.word	0x2000078c
 800483c:	20000790 	.word	0x20000790
 8004840:	20000774 	.word	0x20000774
 8004844:	20000794 	.word	0x20000794
 8004848:	20000778 	.word	0x20000778

0800484c <VelocityController>:

float VelocityController(float r,float y,float uP) //r == trajectory, y==feedback
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	ed87 0a03 	vstr	s0, [r7, #12]
 8004856:	edc7 0a02 	vstr	s1, [r7, #8]
 800485a:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 800485e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004862:	edd7 7a03 	vldr	s15, [r7, #12]
 8004866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486a:	4b40      	ldr	r3, [pc, #256]	; (800496c <VelocityController+0x120>)
 800486c:	edc3 7a00 	vstr	s15, [r3]

	if (dir == 0 && e2 <= w_max)
 8004870:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <VelocityController+0x124>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d117      	bne.n	80048a8 <VelocityController+0x5c>
 8004878:	4b3c      	ldr	r3, [pc, #240]	; (800496c <VelocityController+0x120>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe0f 	bl	80004a0 <__aeabi_f2d>
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <VelocityController+0x128>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fc f8de 	bl	8000a48 <__aeabi_dcmple>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <VelocityController+0x5c>
	{
		e2 = w_max;
 8004892:	4b38      	ldr	r3, [pc, #224]	; (8004974 <VelocityController+0x128>)
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	f7fc f928 	bl	8000af0 <__aeabi_d2f>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4a32      	ldr	r2, [pc, #200]	; (800496c <VelocityController+0x120>)
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e01a      	b.n	80048de <VelocityController+0x92>
	}

	else if (dir == 1 && e2 >= w_max)
 80048a8:	4b31      	ldr	r3, [pc, #196]	; (8004970 <VelocityController+0x124>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d116      	bne.n	80048de <VelocityController+0x92>
 80048b0:	4b2e      	ldr	r3, [pc, #184]	; (800496c <VelocityController+0x120>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fb fdf3 	bl	80004a0 <__aeabi_f2d>
 80048ba:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <VelocityController+0x128>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fc f8cc 	bl	8000a5c <__aeabi_dcmpge>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <VelocityController+0x92>
	{
		e2 = w_max;
 80048ca:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <VelocityController+0x128>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	f7fc f90c 	bl	8000af0 <__aeabi_d2f>
 80048d8:	4603      	mov	r3, r0
 80048da:	4a24      	ldr	r2, [pc, #144]	; (800496c <VelocityController+0x120>)
 80048dc:	6013      	str	r3, [r2, #0]
	}

	e2 = e2 - y;
 80048de:	4b23      	ldr	r3, [pc, #140]	; (800496c <VelocityController+0x120>)
 80048e0:	ed93 7a00 	vldr	s14, [r3]
 80048e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80048e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ec:	4b1f      	ldr	r3, [pc, #124]	; (800496c <VelocityController+0x120>)
 80048ee:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <VelocityController+0x12c>)
 80048f4:	ed93 7a00 	vldr	s14, [r3]
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <VelocityController+0x120>)
 80048fa:	edd3 7a00 	vldr	s15, [r3]
 80048fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <VelocityController+0x12c>)
 8004904:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2) + (kd_2*(e2-p2));
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <VelocityController+0x130>)
 800490a:	ed93 7a00 	vldr	s14, [r3]
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <VelocityController+0x120>)
 8004910:	edd3 7a00 	vldr	s15, [r3]
 8004914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <VelocityController+0x134>)
 800491a:	edd3 6a00 	vldr	s13, [r3]
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <VelocityController+0x12c>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <VelocityController+0x120>)
 800492e:	edd3 6a00 	vldr	s13, [r3]
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <VelocityController+0x138>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <VelocityController+0x13c>)
 800493e:	edd3 7a00 	vldr	s15, [r3]
 8004942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <VelocityController+0x140>)
 800494c:	edc3 7a00 	vstr	s15, [r3]
	p2 = e2;
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <VelocityController+0x120>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <VelocityController+0x138>)
 8004956:	6013      	str	r3, [r2, #0]
	return u2;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <VelocityController+0x140>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	ee07 3a90 	vmov	s15, r3
}
 8004960:	eeb0 0a67 	vmov.f32	s0, s15
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000077c 	.word	0x2000077c
 8004970:	200001f9 	.word	0x200001f9
 8004974:	20000068 	.word	0x20000068
 8004978:	20000780 	.word	0x20000780
 800497c:	20000798 	.word	0x20000798
 8004980:	2000079c 	.word	0x2000079c
 8004984:	20000784 	.word	0x20000784
 8004988:	200007a0 	.word	0x200007a0
 800498c:	20000788 	.word	0x20000788

08004990 <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	ed87 0a03 	vstr	s0, [r7, #12]
 800499a:	edc7 0a02 	vstr	s1, [r7, #8]
 800499e:	ed87 1a01 	vstr	s2, [r7, #4]
 80049a2:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	if(TrajectoryEvaluationFlag == 1)
 80049a6:	4b8c      	ldr	r3, [pc, #560]	; (8004bd8 <Cascade+0x248>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d179      	bne.n	8004aa2 <Cascade+0x112>
	{
		u = PositionController(Pd, P);
 80049ae:	edd7 0a02 	vldr	s1, [r7, #8]
 80049b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80049b6:	f7ff feed 	bl	8004794 <PositionController>
 80049ba:	eef0 7a40 	vmov.f32	s15, s0
 80049be:	4b87      	ldr	r3, [pc, #540]	; (8004bdc <Cascade+0x24c>)
 80049c0:	edc3 7a00 	vstr	s15, [r3]
		u = VelocityController(Vd, V, u);
 80049c4:	4b85      	ldr	r3, [pc, #532]	; (8004bdc <Cascade+0x24c>)
 80049c6:	edd3 7a00 	vldr	s15, [r3]
 80049ca:	eeb0 1a67 	vmov.f32	s2, s15
 80049ce:	edd7 0a00 	vldr	s1, [r7]
 80049d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80049d6:	f7ff ff39 	bl	800484c <VelocityController>
 80049da:	eef0 7a40 	vmov.f32	s15, s0
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <Cascade+0x24c>)
 80049e0:	edc3 7a00 	vstr	s15, [r3]
		if (u >= 0)
 80049e4:	4b7d      	ldr	r3, [pc, #500]	; (8004bdc <Cascade+0x24c>)
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	db04      	blt.n	80049fe <Cascade+0x6e>
		{
			PID_dir = dir;
 80049f4:	4b7a      	ldr	r3, [pc, #488]	; (8004be0 <Cascade+0x250>)
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <Cascade+0x254>)
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e00b      	b.n	8004a16 <Cascade+0x86>
		}

		else
		{
			u = -u;
 80049fe:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <Cascade+0x24c>)
 8004a00:	edd3 7a00 	vldr	s15, [r3]
 8004a04:	eef1 7a67 	vneg.f32	s15, s15
 8004a08:	4b74      	ldr	r3, [pc, #464]	; (8004bdc <Cascade+0x24c>)
 8004a0a:	edc3 7a00 	vstr	s15, [r3]
			PID_dir = dir;
 8004a0e:	4b74      	ldr	r3, [pc, #464]	; (8004be0 <Cascade+0x250>)
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	4b74      	ldr	r3, [pc, #464]	; (8004be4 <Cascade+0x254>)
 8004a14:	701a      	strb	r2, [r3, #0]
		}
		volt_buff = TransferFunction(omega_ref);
 8004a16:	4b74      	ldr	r3, [pc, #464]	; (8004be8 <Cascade+0x258>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7fc f866 	bl	8000af0 <__aeabi_d2f>
 8004a24:	4603      	mov	r3, r0
 8004a26:	ee00 3a10 	vmov	s0, r3
 8004a2a:	f000 ffd1 	bl	80059d0 <TransferFunction>
 8004a2e:	eef0 7a40 	vmov.f32	s15, s0
 8004a32:	4b6e      	ldr	r3, [pc, #440]	; (8004bec <Cascade+0x25c>)
 8004a34:	edc3 7a00 	vstr	s15, [r3]
		u = u+volt_buff;
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <Cascade+0x24c>)
 8004a3a:	ed93 7a00 	vldr	s14, [r3]
 8004a3e:	4b6b      	ldr	r3, [pc, #428]	; (8004bec <Cascade+0x25c>)
 8004a40:	edd3 7a00 	vldr	s15, [r3]
 8004a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a48:	4b64      	ldr	r3, [pc, #400]	; (8004bdc <Cascade+0x24c>)
 8004a4a:	edc3 7a00 	vstr	s15, [r3]

		if ((t > t4 && u <= volt_constant) || t >= t7)
 8004a4e:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <Cascade+0x260>)
 8004a50:	ed93 7a00 	vldr	s14, [r3]
 8004a54:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <Cascade+0x264>)
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	dd0a      	ble.n	8004a7a <Cascade+0xea>
 8004a64:	4b5d      	ldr	r3, [pc, #372]	; (8004bdc <Cascade+0x24c>)
 8004a66:	ed93 7a00 	vldr	s14, [r3]
 8004a6a:	4b63      	ldr	r3, [pc, #396]	; (8004bf8 <Cascade+0x268>)
 8004a6c:	edd3 7a00 	vldr	s15, [r3]
 8004a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d90b      	bls.n	8004a92 <Cascade+0x102>
 8004a7a:	4b5d      	ldr	r3, [pc, #372]	; (8004bf0 <Cascade+0x260>)
 8004a7c:	ed93 7a00 	vldr	s14, [r3]
 8004a80:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <Cascade+0x26c>)
 8004a82:	edd3 7a00 	vldr	s15, [r3]
 8004a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	f2c0 8088 	blt.w	8004ba2 <Cascade+0x212>
			{
				u = volt_constant;
 8004a92:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <Cascade+0x268>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a51      	ldr	r2, [pc, #324]	; (8004bdc <Cascade+0x24c>)
 8004a98:	6013      	str	r3, [r2, #0]
				TrajectoryEvaluationFlag = 0;
 8004a9a:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <Cascade+0x248>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e07f      	b.n	8004ba2 <Cascade+0x212>
			}
	}
	else
	{
		PID_dir = dir;
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <Cascade+0x250>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <Cascade+0x254>)
 8004aa8:	701a      	strb	r2, [r3, #0]
		if(theta_now == theta_0){
 8004aaa:	4b55      	ldr	r3, [pc, #340]	; (8004c00 <Cascade+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fcf6 	bl	80004a0 <__aeabi_f2d>
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <Cascade+0x274>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb ffb1 	bl	8000a20 <__aeabi_dcmpeq>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <Cascade+0x164>
//			RunMotor(0.0, PID_dir);
			u = volt_statics;
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <Cascade+0x278>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a44      	ldr	r2, [pc, #272]	; (8004bdc <Cascade+0x24c>)
 8004aca:	6013      	str	r3, [r2, #0]
			volt_statics += 0.0005;
 8004acc:	4b4e      	ldr	r3, [pc, #312]	; (8004c08 <Cascade+0x278>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb fce5 	bl	80004a0 <__aeabi_f2d>
 8004ad6:	a33c      	add	r3, pc, #240	; (adr r3, 8004bc8 <Cascade+0x238>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fb82 	bl	80001e4 <__adddf3>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f7fc f802 	bl	8000af0 <__aeabi_d2f>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4a46      	ldr	r2, [pc, #280]	; (8004c08 <Cascade+0x278>)
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e056      	b.n	8004ba2 <Cascade+0x212>
//			else{
//
//			}
		}
		else{
			if(theta_count>= 1500){
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <Cascade+0x27c>)
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	f240 52db 	movw	r2, #1499	; 0x5db
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d937      	bls.n	8004b70 <Cascade+0x1e0>
				if(MotorTimestamp < 400){
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <Cascade+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004b08:	d205      	bcs.n	8004b16 <Cascade+0x186>
					MotorTimestamp++;
 8004b0a:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <Cascade+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <Cascade+0x280>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e030      	b.n	8004b78 <Cascade+0x1e8>
				}
				else if(Motor0_Flag){
 8004b16:	4b3f      	ldr	r3, [pc, #252]	; (8004c14 <Cascade+0x284>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01d      	beq.n	8004b5a <Cascade+0x1ca>
					u = volt_constant;
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <Cascade+0x268>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <Cascade+0x24c>)
 8004b24:	6013      	str	r3, [r2, #0]
					volt_constant += 0.2;
 8004b26:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <Cascade+0x268>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fb fcb8 	bl	80004a0 <__aeabi_f2d>
 8004b30:	a327      	add	r3, pc, #156	; (adr r3, 8004bd0 <Cascade+0x240>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fb55 	bl	80001e4 <__adddf3>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7fb ffd5 	bl	8000af0 <__aeabi_d2f>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <Cascade+0x268>)
 8004b4a:	6013      	str	r3, [r2, #0]
					Motor0_Flag =0;
 8004b4c:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <Cascade+0x284>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
					MotorTimestamp = 0;
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <Cascade+0x280>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e00e      	b.n	8004b78 <Cascade+0x1e8>
				}
				else{
					Motor0_Flag =1;
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <Cascade+0x284>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
					u = 0;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <Cascade+0x24c>)
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
					MotorTimestamp = 0;
 8004b68:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <Cascade+0x280>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e003      	b.n	8004b78 <Cascade+0x1e8>
				}

			}
			else{
				u = volt_constant;
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <Cascade+0x268>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <Cascade+0x24c>)
 8004b76:	6013      	str	r3, [r2, #0]
			}
			if(theta_now == theta_Stamp){
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <Cascade+0x270>)
 8004b7a:	ed93 7a00 	vldr	s14, [r3]
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <Cascade+0x288>)
 8004b80:	edd3 7a00 	vldr	s15, [r3]
 8004b84:	eeb4 7a67 	vcmp.f32	s14, s15
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	d106      	bne.n	8004b9c <Cascade+0x20c>
				theta_count +=1;
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <Cascade+0x27c>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <Cascade+0x27c>)
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	e002      	b.n	8004ba2 <Cascade+0x212>
			}
			else{
				theta_count =0;
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <Cascade+0x27c>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	801a      	strh	r2, [r3, #0]
			}

		}

	}
	theta_Stamp = theta_now;
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <Cascade+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <Cascade+0x288>)
 8004ba8:	6013      	str	r3, [r2, #0]
	return limit(u);
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <Cascade+0x24c>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb4:	f000 f86a 	bl	8004c8c <limit>
 8004bb8:	eef0 7a40 	vmov.f32	s15, s0
}
 8004bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004bcc:	3f40624d 	.word	0x3f40624d
 8004bd0:	9999999a 	.word	0x9999999a
 8004bd4:	3fc99999 	.word	0x3fc99999
 8004bd8:	200006f4 	.word	0x200006f4
 8004bdc:	2000084c 	.word	0x2000084c
 8004be0:	200001f9 	.word	0x200001f9
 8004be4:	200001fa 	.word	0x200001fa
 8004be8:	20000760 	.word	0x20000760
 8004bec:	20000830 	.word	0x20000830
 8004bf0:	200006c8 	.word	0x200006c8
 8004bf4:	200006d8 	.word	0x200006d8
 8004bf8:	20000508 	.word	0x20000508
 8004bfc:	200006e4 	.word	0x200006e4
 8004c00:	20000524 	.word	0x20000524
 8004c04:	200006f8 	.word	0x200006f8
 8004c08:	2000050c 	.word	0x2000050c
 8004c0c:	2000080c 	.word	0x2000080c
 8004c10:	20000510 	.word	0x20000510
 8004c14:	2000080e 	.word	0x2000080e
 8004c18:	20000808 	.word	0x20000808

08004c1c <negative>:

float negative(float var)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 8004c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c32:	dd05      	ble.n	8004c40 <negative+0x24>
		var = -var;
 8004c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c38:	eef1 7a67 	vneg.f32	s15, s15
 8004c3c:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ee07 3a90 	vmov	s15, r3
}
 8004c46:	eeb0 0a67 	vmov.f32	s0, s15
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <positive>:

float positive(float var)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 8004c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d505      	bpl.n	8004c78 <positive+0x24>
			var = -var;
 8004c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c70:	eef1 7a67 	vneg.f32	s15, s15
 8004c74:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	ee07 3a90 	vmov	s15, r3
}
 8004c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <limit>:

float limit(float var1)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	ed87 0a01 	vstr	s0, [r7, #4]
	return (var1 > 24.0) ? 24.0 : var1;
 8004c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c9a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8004c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	dd01      	ble.n	8004cac <limit+0x20>
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <limit+0x34>)
 8004caa:	e000      	b.n	8004cae <limit+0x22>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	ee07 3a90 	vmov	s15, r3
}
 8004cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	41c00000 	.word	0x41c00000
 8004cc4:	00000000 	.word	0x00000000

08004cc8 <UART>:

void UART(){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8004cce:	4b98      	ldr	r3, [pc, #608]	; (8004f30 <UART+0x268>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8575 	beq.w	80057c2 <UART+0xafa>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f2c0 859d 	blt.w	8005818 <UART+0xb50>
 8004cde:	2b9e      	cmp	r3, #158	; 0x9e
 8004ce0:	f300 859a 	bgt.w	8005818 <UART+0xb50>
 8004ce4:	2b58      	cmp	r3, #88	; 0x58
 8004ce6:	f2c0 8597 	blt.w	8005818 <UART+0xb50>
 8004cea:	3b58      	subs	r3, #88	; 0x58
 8004cec:	2b46      	cmp	r3, #70	; 0x46
 8004cee:	f200 8593 	bhi.w	8005818 <UART+0xb50>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART+0x30>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	080057cf 	.word	0x080057cf
 8004cfc:	08005819 	.word	0x08005819
 8004d00:	08005819 	.word	0x08005819
 8004d04:	08005819 	.word	0x08005819
 8004d08:	08005819 	.word	0x08005819
 8004d0c:	08005819 	.word	0x08005819
 8004d10:	08005819 	.word	0x08005819
 8004d14:	08005819 	.word	0x08005819
 8004d18:	08005819 	.word	0x08005819
 8004d1c:	08005819 	.word	0x08005819
 8004d20:	08005819 	.word	0x08005819
 8004d24:	08005819 	.word	0x08005819
 8004d28:	08005819 	.word	0x08005819
 8004d2c:	08005819 	.word	0x08005819
 8004d30:	08005819 	.word	0x08005819
 8004d34:	08005819 	.word	0x08005819
 8004d38:	08005819 	.word	0x08005819
 8004d3c:	08005819 	.word	0x08005819
 8004d40:	08005819 	.word	0x08005819
 8004d44:	08005819 	.word	0x08005819
 8004d48:	08005819 	.word	0x08005819
 8004d4c:	08005819 	.word	0x08005819
 8004d50:	08005819 	.word	0x08005819
 8004d54:	08005819 	.word	0x08005819
 8004d58:	08005819 	.word	0x08005819
 8004d5c:	08005819 	.word	0x08005819
 8004d60:	08005819 	.word	0x08005819
 8004d64:	08005819 	.word	0x08005819
 8004d68:	08005819 	.word	0x08005819
 8004d6c:	08005819 	.word	0x08005819
 8004d70:	08005819 	.word	0x08005819
 8004d74:	08005819 	.word	0x08005819
 8004d78:	08005819 	.word	0x08005819
 8004d7c:	08005819 	.word	0x08005819
 8004d80:	08005819 	.word	0x08005819
 8004d84:	08005819 	.word	0x08005819
 8004d88:	08005819 	.word	0x08005819
 8004d8c:	08005819 	.word	0x08005819
 8004d90:	08005819 	.word	0x08005819
 8004d94:	08005819 	.word	0x08005819
 8004d98:	08005819 	.word	0x08005819
 8004d9c:	08005819 	.word	0x08005819
 8004da0:	08005819 	.word	0x08005819
 8004da4:	08005819 	.word	0x08005819
 8004da8:	08005819 	.word	0x08005819
 8004dac:	08005819 	.word	0x08005819
 8004db0:	08005819 	.word	0x08005819
 8004db4:	08005819 	.word	0x08005819
 8004db8:	08005819 	.word	0x08005819
 8004dbc:	08005819 	.word	0x08005819
 8004dc0:	08005819 	.word	0x08005819
 8004dc4:	08005819 	.word	0x08005819
 8004dc8:	08005819 	.word	0x08005819
 8004dcc:	08005819 	.word	0x08005819
 8004dd0:	08005819 	.word	0x08005819
 8004dd4:	08005819 	.word	0x08005819
 8004dd8:	08005819 	.word	0x08005819
 8004ddc:	08005827 	.word	0x08005827
 8004de0:	08004e15 	.word	0x08004e15
 8004de4:	08004e49 	.word	0x08004e49
 8004de8:	08004e7d 	.word	0x08004e7d
 8004dec:	08004f4d 	.word	0x08004f4d
 8004df0:	0800502d 	.word	0x0800502d
 8004df4:	080050fd 	.word	0x080050fd
 8004df8:	08005257 	.word	0x08005257
 8004dfc:	0800528f 	.word	0x0800528f
 8004e00:	080053af 	.word	0x080053af
 8004e04:	08005561 	.word	0x08005561
 8004e08:	080056a1 	.word	0x080056a1
 8004e0c:	080056d9 	.word	0x080056d9
 8004e10:	08005761 	.word	0x08005761
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 8004e14:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <UART+0x268>)
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b6d      	cmp	r3, #109	; 0x6d
 8004e1a:	f040 8506 	bne.w	800582a <UART+0xb62>
			//connect MCU
			HAL_UART_DMAStop(&huart2);
 8004e1e:	4845      	ldr	r0, [pc, #276]	; (8004f34 <UART+0x26c>)
 8004e20:	f006 fbb0 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004e24:	220c      	movs	r2, #12
 8004e26:	4942      	ldr	r1, [pc, #264]	; (8004f30 <UART+0x268>)
 8004e28:	4842      	ldr	r0, [pc, #264]	; (8004f34 <UART+0x26c>)
 8004e2a:	f006 fb7b 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004e2e:	2202      	movs	r2, #2
 8004e30:	4941      	ldr	r1, [pc, #260]	; (8004f38 <UART+0x270>)
 8004e32:	4840      	ldr	r0, [pc, #256]	; (8004f34 <UART+0x26c>)
 8004e34:	f006 faf8 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004e38:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <UART+0x268>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004e3e:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <UART+0x268>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[1]=0;
//			RxData[0]=0;
//		}
		break;
 8004e44:	f000 bcf1 	b.w	800582a <UART+0xb62>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 8004e48:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <UART+0x268>)
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b6c      	cmp	r3, #108	; 0x6c
 8004e4e:	f040 84ee 	bne.w	800582e <UART+0xb66>
			//disconnect MCU
			HAL_UART_DMAStop(&huart2);
 8004e52:	4838      	ldr	r0, [pc, #224]	; (8004f34 <UART+0x26c>)
 8004e54:	f006 fb96 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004e58:	220c      	movs	r2, #12
 8004e5a:	4935      	ldr	r1, [pc, #212]	; (8004f30 <UART+0x268>)
 8004e5c:	4835      	ldr	r0, [pc, #212]	; (8004f34 <UART+0x26c>)
 8004e5e:	f006 fb61 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004e62:	2202      	movs	r2, #2
 8004e64:	4934      	ldr	r1, [pc, #208]	; (8004f38 <UART+0x270>)
 8004e66:	4833      	ldr	r0, [pc, #204]	; (8004f34 <UART+0x26c>)
 8004e68:	f006 fade 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[1]=0;
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <UART+0x268>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	705a      	strb	r2, [r3, #1]
			RxData[0] = 0;
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <UART+0x268>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[1]=0;
//			RxData[0]=0;
//		}
		break;
 8004e78:	f000 bcd9 	b.w	800582e <UART+0xb66>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <UART+0x268>)
 8004e7e:	785a      	ldrb	r2, [r3, #1]
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <UART+0x274>)
 8004e82:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <UART+0x268>)
 8004e86:	789a      	ldrb	r2, [r3, #2]
 8004e88:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <UART+0x278>)
 8004e8a:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <UART+0x274>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <UART+0x278>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <UART+0x27c>)
 8004ea2:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <UART+0x268>)
 8004ea6:	78da      	ldrb	r2, [r3, #3]
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <UART+0x274>)
 8004eaa:	7819      	ldrb	r1, [r3, #0]
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <UART+0x278>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	440b      	add	r3, r1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3b6c      	subs	r3, #108	; 0x6c
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	f040 84b8 	bne.w	8005832 <UART+0xb6a>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <UART+0x27c>)
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fb fac8 	bl	800045c <__aeabi_ui2d>
 8004ecc:	a314      	add	r3, pc, #80	; (adr r3, 8004f20 <UART+0x258>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f7fb fb3d 	bl	8000550 <__aeabi_dmul>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	a312      	add	r3, pc, #72	; (adr r3, 8004f28 <UART+0x260>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fb34 	bl	8000550 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4916      	ldr	r1, [pc, #88]	; (8004f48 <UART+0x280>)
 8004eee:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 8004ef2:	4810      	ldr	r0, [pc, #64]	; (8004f34 <UART+0x26c>)
 8004ef4:	f006 fb46 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004ef8:	220c      	movs	r2, #12
 8004efa:	490d      	ldr	r1, [pc, #52]	; (8004f30 <UART+0x268>)
 8004efc:	480d      	ldr	r0, [pc, #52]	; (8004f34 <UART+0x26c>)
 8004efe:	f006 fb11 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004f02:	2202      	movs	r2, #2
 8004f04:	490c      	ldr	r1, [pc, #48]	; (8004f38 <UART+0x270>)
 8004f06:	480b      	ldr	r0, [pc, #44]	; (8004f34 <UART+0x26c>)
 8004f08:	f006 fa8e 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[3]=0;
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <UART+0x268>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	70da      	strb	r2, [r3, #3]
			RxData[0] = 0;
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <UART+0x268>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[3]=0;
//			RxData[0]=0;
//		}
		break;
 8004f18:	f000 bc8b 	b.w	8005832 <UART+0xb6a>
 8004f1c:	f3af 8000 	nop.w
 8004f20:	14141414 	.word	0x14141414
 8004f24:	3fa41414 	.word	0x3fa41414
 8004f28:	f37bebd5 	.word	0xf37bebd5
 8004f2c:	3fbacee9 	.word	0x3fbacee9
 8004f30:	200007c0 	.word	0x200007c0
 8004f34:	20000400 	.word	0x20000400
 8004f38:	200000a8 	.word	0x200000a8
 8004f3c:	20000850 	.word	0x20000850
 8004f40:	20000851 	.word	0x20000851
 8004f44:	20000852 	.word	0x20000852
 8004f48:	20000068 	.word	0x20000068
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004f4c:	4b86      	ldr	r3, [pc, #536]	; (8005168 <UART+0x4a0>)
 8004f4e:	785a      	ldrb	r2, [r3, #1]
 8004f50:	4b86      	ldr	r3, [pc, #536]	; (800516c <UART+0x4a4>)
 8004f52:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004f54:	4b84      	ldr	r3, [pc, #528]	; (8005168 <UART+0x4a0>)
 8004f56:	789a      	ldrb	r2, [r3, #2]
 8004f58:	4b85      	ldr	r3, [pc, #532]	; (8005170 <UART+0x4a8>)
 8004f5a:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004f5c:	4b83      	ldr	r3, [pc, #524]	; (800516c <UART+0x4a4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	4b82      	ldr	r3, [pc, #520]	; (8005170 <UART+0x4a8>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <UART+0x4ac>)
 8004f72:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 8004f74:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <UART+0x4a0>)
 8004f76:	78da      	ldrb	r2, [r3, #3]
 8004f78:	4b7c      	ldr	r3, [pc, #496]	; (800516c <UART+0x4a4>)
 8004f7a:	7819      	ldrb	r1, [r3, #0]
 8004f7c:	4b7c      	ldr	r3, [pc, #496]	; (8005170 <UART+0x4a8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	440b      	add	r3, r1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3b6b      	subs	r3, #107	; 0x6b
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	f040 8452 	bne.w	8005836 <UART+0xb6e>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 8004f92:	4b78      	ldr	r3, [pc, #480]	; (8005174 <UART+0x4ac>)
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fa60 	bl	800045c <__aeabi_ui2d>
 8004f9c:	a36e      	add	r3, pc, #440	; (adr r3, 8005158 <UART+0x490>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fbff 	bl	80007a4 <__aeabi_ddiv>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4973      	ldr	r1, [pc, #460]	; (8005178 <UART+0x4b0>)
 8004fac:	e9c1 2300 	strd	r2, r3, [r1]
			theta_f = rad_station[(uint8_t)floor(theta_f/0.087)];
 8004fb0:	4b71      	ldr	r3, [pc, #452]	; (8005178 <UART+0x4b0>)
 8004fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb6:	a36a      	add	r3, pc, #424	; (adr r3, 8005160 <UART+0x498>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fbf2 	bl	80007a4 <__aeabi_ddiv>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	ec43 2b17 	vmov	d7, r2, r3
 8004fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8004fcc:	eef0 0a67 	vmov.f32	s1, s15
 8004fd0:	f007 fe52 	bl	800cc78 <floor>
 8004fd4:	ec53 2b10 	vmov	r2, r3, d0
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7fb fd68 	bl	8000ab0 <__aeabi_d2uiz>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4a65      	ldr	r2, [pc, #404]	; (800517c <UART+0x4b4>)
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fa57 	bl	80004a0 <__aeabi_f2d>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4960      	ldr	r1, [pc, #384]	; (8005178 <UART+0x4b0>)
 8004ff8:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 8004ffc:	4860      	ldr	r0, [pc, #384]	; (8005180 <UART+0x4b8>)
 8004ffe:	f006 fac1 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005002:	220c      	movs	r2, #12
 8005004:	4958      	ldr	r1, [pc, #352]	; (8005168 <UART+0x4a0>)
 8005006:	485e      	ldr	r0, [pc, #376]	; (8005180 <UART+0x4b8>)
 8005008:	f006 fa8c 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800500c:	2202      	movs	r2, #2
 800500e:	495d      	ldr	r1, [pc, #372]	; (8005184 <UART+0x4bc>)
 8005010:	485b      	ldr	r0, [pc, #364]	; (8005180 <UART+0x4b8>)
 8005012:	f006 fa09 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8005016:	4b54      	ldr	r3, [pc, #336]	; (8005168 <UART+0x4a0>)
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
			RxData[3]=0;
 800501c:	4b52      	ldr	r3, [pc, #328]	; (8005168 <UART+0x4a0>)
 800501e:	2200      	movs	r2, #0
 8005020:	70da      	strb	r2, [r3, #3]
			ModeN =0;
 8005022:	4b59      	ldr	r3, [pc, #356]	; (8005188 <UART+0x4c0>)
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[3]=0;
//			RxData[0]=0;
//		}
		break;
 8005028:	f000 bc05 	b.w	8005836 <UART+0xb6e>
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 800502c:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <UART+0x4a0>)
 800502e:	785a      	ldrb	r2, [r3, #1]
 8005030:	4b4e      	ldr	r3, [pc, #312]	; (800516c <UART+0x4a4>)
 8005032:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8005034:	4b4c      	ldr	r3, [pc, #304]	; (8005168 <UART+0x4a0>)
 8005036:	789a      	ldrb	r2, [r3, #2]
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <UART+0x4a8>)
 800503a:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 800503c:	4b4b      	ldr	r3, [pc, #300]	; (800516c <UART+0x4a4>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	b29a      	uxth	r2, r3
 8005046:	4b4a      	ldr	r3, [pc, #296]	; (8005170 <UART+0x4a8>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	4413      	add	r3, r2
 800504e:	b29a      	uxth	r2, r3
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <UART+0x4ac>)
 8005052:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 8005054:	4b44      	ldr	r3, [pc, #272]	; (8005168 <UART+0x4a0>)
 8005056:	78da      	ldrb	r2, [r3, #3]
 8005058:	4b44      	ldr	r3, [pc, #272]	; (800516c <UART+0x4a4>)
 800505a:	7819      	ldrb	r1, [r3, #0]
 800505c:	4b44      	ldr	r3, [pc, #272]	; (8005170 <UART+0x4a8>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	440b      	add	r3, r1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	3b6a      	subs	r3, #106	; 0x6a
 8005066:	b2db      	uxtb	r3, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	b2db      	uxtb	r3, r3
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 83e4 	bne.w	800583a <UART+0xb72>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 8005072:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <UART+0x4a8>)
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	4b45      	ldr	r3, [pc, #276]	; (800518c <UART+0x4c4>)
 8005078:	701a      	strb	r2, [r3, #0]
			theta_f = rad_station[(uint8_t)floor(station[index_station[0]-1]/5)];
 800507a:	4b44      	ldr	r3, [pc, #272]	; (800518c <UART+0x4c4>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	3b01      	subs	r3, #1
 8005080:	4a43      	ldr	r2, [pc, #268]	; (8005190 <UART+0x4c8>)
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	edd3 7a00 	vldr	s15, [r3]
 800508a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800508e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005092:	ee16 0a90 	vmov	r0, s13
 8005096:	f7fb fa03 	bl	80004a0 <__aeabi_f2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	ec43 2b10 	vmov	d0, r2, r3
 80050a2:	f007 fde9 	bl	800cc78 <floor>
 80050a6:	ec53 2b10 	vmov	r2, r3, d0
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fb fcff 	bl	8000ab0 <__aeabi_d2uiz>
 80050b2:	4603      	mov	r3, r0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	4a31      	ldr	r2, [pc, #196]	; (800517c <UART+0x4b4>)
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb f9ee 	bl	80004a0 <__aeabi_f2d>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	492b      	ldr	r1, [pc, #172]	; (8005178 <UART+0x4b0>)
 80050ca:	e9c1 2300 	strd	r2, r3, [r1]
//			theta_f = station[index_station[0]-1]*(M_PI/180.0);
			ModeN =0;
 80050ce:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <UART+0x4c0>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80050d4:	482a      	ldr	r0, [pc, #168]	; (8005180 <UART+0x4b8>)
 80050d6:	f006 fa55 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80050da:	220c      	movs	r2, #12
 80050dc:	4922      	ldr	r1, [pc, #136]	; (8005168 <UART+0x4a0>)
 80050de:	4828      	ldr	r0, [pc, #160]	; (8005180 <UART+0x4b8>)
 80050e0:	f006 fa20 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80050e4:	2202      	movs	r2, #2
 80050e6:	4927      	ldr	r1, [pc, #156]	; (8005184 <UART+0x4bc>)
 80050e8:	4825      	ldr	r0, [pc, #148]	; (8005180 <UART+0x4b8>)
 80050ea:	f006 f99d 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <UART+0x4a0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
			RxData[3]=0;
 80050f4:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <UART+0x4a0>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	70da      	strb	r2, [r3, #3]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[3]=0;
//		}
		break;
 80050fa:	e39e      	b.n	800583a <UART+0xb72>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 80050fc:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <UART+0x4a0>)
 80050fe:	785a      	ldrb	r2, [r3, #1]
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <UART+0x4cc>)
 8005102:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
		uint8_t k=2;
 8005108:	2302      	movs	r3, #2
 800510a:	73bb      	strb	r3, [r7, #14]
		for(int j = 0;j<n_station_max;j+=2){
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e019      	b.n	8005146 <UART+0x47e>
			index_station[j] = RxData[k]%16;
 8005112:	7bbb      	ldrb	r3, [r7, #14]
 8005114:	4a14      	ldr	r2, [pc, #80]	; (8005168 <UART+0x4a0>)
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b2d9      	uxtb	r1, r3
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <UART+0x4c4>)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4413      	add	r3, r2
 8005124:	460a      	mov	r2, r1
 8005126:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 8005128:	7bbb      	ldrb	r3, [r7, #14]
 800512a:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <UART+0x4a0>)
 800512c:	5cd2      	ldrb	r2, [r2, r3]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3301      	adds	r3, #1
 8005132:	0912      	lsrs	r2, r2, #4
 8005134:	b2d1      	uxtb	r1, r2
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <UART+0x4c4>)
 8005138:	54d1      	strb	r1, [r2, r3]
			k+=1;
 800513a:	7bbb      	ldrb	r3, [r7, #14]
 800513c:	3301      	adds	r3, #1
 800513e:	73bb      	strb	r3, [r7, #14]
		for(int j = 0;j<n_station_max;j+=2){
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3302      	adds	r3, #2
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <UART+0x4cc>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4293      	cmp	r3, r2
 8005150:	dbdf      	blt.n	8005112 <UART+0x44a>
		}
		for(int f = 0; f<k;f++){
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	e029      	b.n	80051ac <UART+0x4e4>
 8005158:	00000000 	.word	0x00000000
 800515c:	40c38800 	.word	0x40c38800
 8005160:	cac08312 	.word	0xcac08312
 8005164:	3fb645a1 	.word	0x3fb645a1
 8005168:	200007c0 	.word	0x200007c0
 800516c:	20000850 	.word	0x20000850
 8005170:	20000851 	.word	0x20000851
 8005174:	20000852 	.word	0x20000852
 8005178:	20000700 	.word	0x20000700
 800517c:	200000d4 	.word	0x200000d4
 8005180:	20000400 	.word	0x20000400
 8005184:	200000a8 	.word	0x200000a8
 8005188:	200007d8 	.word	0x200007d8
 800518c:	200007dc 	.word	0x200007dc
 8005190:	200000ac 	.word	0x200000ac
 8005194:	200001f5 	.word	0x200001f5
			Check += RxData[f];
 8005198:	4aab      	ldr	r2, [pc, #684]	; (8005448 <UART+0x780>)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	4413      	add	r3, r2
 80051a4:	73fb      	strb	r3, [r7, #15]
		for(int f = 0; f<k;f++){
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3301      	adds	r3, #1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	dbf1      	blt.n	8005198 <UART+0x4d0>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	4aa4      	ldr	r2, [pc, #656]	; (8005448 <UART+0x780>)
 80051b8:	5cd2      	ldrb	r2, [r2, r3]
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	43db      	mvns	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f040 833c 	bne.w	800583e <UART+0xb76>

			ModeN=1;
 80051c6:	4ba1      	ldr	r3, [pc, #644]	; (800544c <UART+0x784>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	701a      	strb	r2, [r3, #0]
			n_station=0;
 80051cc:	4ba0      	ldr	r3, [pc, #640]	; (8005450 <UART+0x788>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
//			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
			theta_f = rad_station[(uint8_t)floor(station[index_station[n_station]-1]/5)];
 80051d2:	4b9f      	ldr	r3, [pc, #636]	; (8005450 <UART+0x788>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b9e      	ldr	r3, [pc, #632]	; (8005454 <UART+0x78c>)
 80051da:	5c9b      	ldrb	r3, [r3, r2]
 80051dc:	3b01      	subs	r3, #1
 80051de:	4a9e      	ldr	r2, [pc, #632]	; (8005458 <UART+0x790>)
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	edd3 7a00 	vldr	s15, [r3]
 80051e8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80051ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051f0:	ee16 0a90 	vmov	r0, s13
 80051f4:	f7fb f954 	bl	80004a0 <__aeabi_f2d>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	ec43 2b10 	vmov	d0, r2, r3
 8005200:	f007 fd3a 	bl	800cc78 <floor>
 8005204:	ec53 2b10 	vmov	r2, r3, d0
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	f7fb fc50 	bl	8000ab0 <__aeabi_d2uiz>
 8005210:	4603      	mov	r3, r0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4a91      	ldr	r2, [pc, #580]	; (800545c <UART+0x794>)
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f93f 	bl	80004a0 <__aeabi_f2d>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	498e      	ldr	r1, [pc, #568]	; (8005460 <UART+0x798>)
 8005228:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 800522c:	488d      	ldr	r0, [pc, #564]	; (8005464 <UART+0x79c>)
 800522e:	f006 f9a9 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005232:	220c      	movs	r2, #12
 8005234:	4984      	ldr	r1, [pc, #528]	; (8005448 <UART+0x780>)
 8005236:	488b      	ldr	r0, [pc, #556]	; (8005464 <UART+0x79c>)
 8005238:	f006 f974 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800523c:	2202      	movs	r2, #2
 800523e:	498a      	ldr	r1, [pc, #552]	; (8005468 <UART+0x7a0>)
 8005240:	4888      	ldr	r0, [pc, #544]	; (8005464 <UART+0x79c>)
 8005242:	f006 f8f1 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8005246:	4b80      	ldr	r3, [pc, #512]	; (8005448 <UART+0x780>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
			RxData[k]=0;
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	4a7e      	ldr	r2, [pc, #504]	; (8005448 <UART+0x780>)
 8005250:	2100      	movs	r1, #0
 8005252:	54d1      	strb	r1, [r2, r3]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[k]=0;
//		}
		break;
 8005254:	e2f3      	b.n	800583e <UART+0xb76>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 8005256:	4b7c      	ldr	r3, [pc, #496]	; (8005448 <UART+0x780>)
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b67      	cmp	r3, #103	; 0x67
 800525c:	f040 82f1 	bne.w	8005842 <UART+0xb7a>
			//Go to Station / Goal Position
			HAL_UART_DMAStop(&huart2);
 8005260:	4880      	ldr	r0, [pc, #512]	; (8005464 <UART+0x79c>)
 8005262:	f006 f98f 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005266:	220c      	movs	r2, #12
 8005268:	4977      	ldr	r1, [pc, #476]	; (8005448 <UART+0x780>)
 800526a:	487e      	ldr	r0, [pc, #504]	; (8005464 <UART+0x79c>)
 800526c:	f006 f95a 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8005270:	2202      	movs	r2, #2
 8005272:	497d      	ldr	r1, [pc, #500]	; (8005468 <UART+0x7a0>)
 8005274:	487b      	ldr	r0, [pc, #492]	; (8005464 <UART+0x79c>)
 8005276:	f006 f8d7 	bl	800b428 <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 800527a:	4b7c      	ldr	r3, [pc, #496]	; (800546c <UART+0x7a4>)
 800527c:	2206      	movs	r2, #6
 800527e:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8005280:	4b71      	ldr	r3, [pc, #452]	; (8005448 <UART+0x780>)
 8005282:	2200      	movs	r2, #0
 8005284:	705a      	strb	r2, [r3, #1]
			RxData[0] = 0;
 8005286:	4b70      	ldr	r3, [pc, #448]	; (8005448 <UART+0x780>)
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 800528c:	e2d9      	b.n	8005842 <UART+0xb7a>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 800528e:	4b6e      	ldr	r3, [pc, #440]	; (8005448 <UART+0x780>)
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b66      	cmp	r3, #102	; 0x66
 8005294:	f040 82d7 	bne.w	8005846 <UART+0xb7e>
			//Request Current Station
			if(Finish){
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <UART+0x7a8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d031      	beq.n	8005304 <UART+0x63c>
				if(CheckTrasmit){
 80052a0:	4b74      	ldr	r3, [pc, #464]	; (8005474 <UART+0x7ac>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 82ce 	beq.w	8005846 <UART+0xb7e>
					TxData2[4]=TxData[2];
 80052aa:	4b73      	ldr	r3, [pc, #460]	; (8005478 <UART+0x7b0>)
 80052ac:	789a      	ldrb	r2, [r3, #2]
 80052ae:	4b73      	ldr	r3, [pc, #460]	; (800547c <UART+0x7b4>)
 80052b0:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 80052b2:	4b71      	ldr	r3, [pc, #452]	; (8005478 <UART+0x7b0>)
 80052b4:	78da      	ldrb	r2, [r3, #3]
 80052b6:	4b71      	ldr	r3, [pc, #452]	; (800547c <UART+0x7b4>)
 80052b8:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 80052ba:	4b6f      	ldr	r3, [pc, #444]	; (8005478 <UART+0x7b0>)
 80052bc:	791a      	ldrb	r2, [r3, #4]
 80052be:	4b6f      	ldr	r3, [pc, #444]	; (800547c <UART+0x7b4>)
 80052c0:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 80052c2:	4b6d      	ldr	r3, [pc, #436]	; (8005478 <UART+0x7b0>)
 80052c4:	795a      	ldrb	r2, [r3, #5]
 80052c6:	4b6d      	ldr	r3, [pc, #436]	; (800547c <UART+0x7b4>)
 80052c8:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 80052ca:	4b6a      	ldr	r3, [pc, #424]	; (8005474 <UART+0x7ac>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2); //
 80052d0:	4864      	ldr	r0, [pc, #400]	; (8005464 <UART+0x79c>)
 80052d2:	f006 f957 	bl	800b584 <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80052d6:	220c      	movs	r2, #12
 80052d8:	495b      	ldr	r1, [pc, #364]	; (8005448 <UART+0x780>)
 80052da:	4862      	ldr	r0, [pc, #392]	; (8005464 <UART+0x79c>)
 80052dc:	f006 f922 	bl	800b524 <HAL_UART_Receive_DMA>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 80052e0:	2208      	movs	r2, #8
 80052e2:	4966      	ldr	r1, [pc, #408]	; (800547c <UART+0x7b4>)
 80052e4:	485f      	ldr	r0, [pc, #380]	; (8005464 <UART+0x79c>)
 80052e6:	f006 f89f 	bl	800b428 <HAL_UART_Transmit_DMA>
//					Timestamp_UI=micros();
					RxData[0] = 0;
 80052ea:	4b57      	ldr	r3, [pc, #348]	; (8005448 <UART+0x780>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
					RxData[1]=0;
 80052f0:	4b55      	ldr	r3, [pc, #340]	; (8005448 <UART+0x780>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	705a      	strb	r2, [r3, #1]
					CheckTrasmit=1;
 80052f6:	4b5f      	ldr	r3, [pc, #380]	; (8005474 <UART+0x7ac>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
					Finish =0;
 80052fc:	4b5c      	ldr	r3, [pc, #368]	; (8005470 <UART+0x7a8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8005302:	e2a0      	b.n	8005846 <UART+0xb7e>
			else if(CheckTrasmit){
 8005304:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <UART+0x7ac>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 829c 	beq.w	8005846 <UART+0xb7e>
				TxData[2] = 0b10011001;
 800530e:	4b5a      	ldr	r3, [pc, #360]	; (8005478 <UART+0x7b0>)
 8005310:	2299      	movs	r2, #153	; 0x99
 8005312:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 8005314:	4b58      	ldr	r3, [pc, #352]	; (8005478 <UART+0x7b0>)
 8005316:	2200      	movs	r2, #0
 8005318:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)floor(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 800531a:	4b59      	ldr	r3, [pc, #356]	; (8005480 <UART+0x7b8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb f8be 	bl	80004a0 <__aeabi_f2d>
 8005324:	a346      	add	r3, pc, #280	; (adr r3, 8005440 <UART+0x778>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fb fa3b 	bl	80007a4 <__aeabi_ddiv>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	ec43 2b17 	vmov	d7, r2, r3
 8005336:	eeb0 0a47 	vmov.f32	s0, s14
 800533a:	eef0 0a67 	vmov.f32	s1, s15
 800533e:	f007 fc9b 	bl	800cc78 <floor>
 8005342:	ec53 2b10 	vmov	r2, r3, d0
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fbb1 	bl	8000ab0 <__aeabi_d2uiz>
 800534e:	4603      	mov	r3, r0
 8005350:	b2da      	uxtb	r2, r3
 8005352:	4b4c      	ldr	r3, [pc, #304]	; (8005484 <UART+0x7bc>)
 8005354:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 8005356:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <UART+0x7bc>)
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <UART+0x7b0>)
 800535c:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 800535e:	4b46      	ldr	r3, [pc, #280]	; (8005478 <UART+0x7b0>)
 8005360:	789a      	ldrb	r2, [r3, #2]
 8005362:	4b45      	ldr	r3, [pc, #276]	; (8005478 <UART+0x7b0>)
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	4413      	add	r3, r2
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b43      	ldr	r3, [pc, #268]	; (8005478 <UART+0x7b0>)
 800536c:	791b      	ldrb	r3, [r3, #4]
 800536e:	4413      	add	r3, r2
 8005370:	b2db      	uxtb	r3, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <UART+0x7b0>)
 8005378:	715a      	strb	r2, [r3, #5]
				HAL_UART_DMAStop(&huart2); //
 800537a:	483a      	ldr	r0, [pc, #232]	; (8005464 <UART+0x79c>)
 800537c:	f006 f902 	bl	800b584 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005380:	220c      	movs	r2, #12
 8005382:	4931      	ldr	r1, [pc, #196]	; (8005448 <UART+0x780>)
 8005384:	4837      	ldr	r0, [pc, #220]	; (8005464 <UART+0x79c>)
 8005386:	f006 f8cd 	bl	800b524 <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 800538a:	2206      	movs	r2, #6
 800538c:	493a      	ldr	r1, [pc, #232]	; (8005478 <UART+0x7b0>)
 800538e:	4835      	ldr	r0, [pc, #212]	; (8005464 <UART+0x79c>)
 8005390:	f006 f84a 	bl	800b428 <HAL_UART_Transmit_DMA>
				CheckTrasmit=0;
 8005394:	4b37      	ldr	r3, [pc, #220]	; (8005474 <UART+0x7ac>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
				RxData[0] = 0;
 800539a:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <UART+0x780>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 80053a0:	4b29      	ldr	r3, [pc, #164]	; (8005448 <UART+0x780>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <UART+0x7ac>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
		break;
 80053ac:	e24b      	b.n	8005846 <UART+0xb7e>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <UART+0x780>)
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b65      	cmp	r3, #101	; 0x65
 80053b4:	f040 8249 	bne.w	800584a <UART+0xb82>
			//Request Angular Position
		if(Finish){
 80053b8:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <UART+0x7a8>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d063      	beq.n	8005488 <UART+0x7c0>

			if(CheckTrasmit){
 80053c0:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <UART+0x7ac>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8240 	beq.w	800584a <UART+0xb82>
				if(Arm_State == Setzero || Arm_State == Home){
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <UART+0x7a4>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d003      	beq.n	80053da <UART+0x712>
 80053d2:	4b26      	ldr	r3, [pc, #152]	; (800546c <UART+0x7a4>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d105      	bne.n	80053e6 <UART+0x71e>
					TxData[4] = 0;
 80053da:	4b27      	ldr	r3, [pc, #156]	; (8005478 <UART+0x7b0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	711a      	strb	r2, [r3, #4]
					TxData[3] =0;
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <UART+0x7b0>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	70da      	strb	r2, [r3, #3]
				}
				TxData2[4]=TxData[2];
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <UART+0x7b0>)
 80053e8:	789a      	ldrb	r2, [r3, #2]
 80053ea:	4b24      	ldr	r3, [pc, #144]	; (800547c <UART+0x7b4>)
 80053ec:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <UART+0x7b0>)
 80053f0:	78da      	ldrb	r2, [r3, #3]
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <UART+0x7b4>)
 80053f4:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <UART+0x7b0>)
 80053f8:	791a      	ldrb	r2, [r3, #4]
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <UART+0x7b4>)
 80053fc:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <UART+0x7b0>)
 8005400:	795a      	ldrb	r2, [r3, #5]
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <UART+0x7b4>)
 8005404:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8005406:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <UART+0x7ac>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 800540c:	4815      	ldr	r0, [pc, #84]	; (8005464 <UART+0x79c>)
 800540e:	f006 f8b9 	bl	800b584 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005412:	220c      	movs	r2, #12
 8005414:	490c      	ldr	r1, [pc, #48]	; (8005448 <UART+0x780>)
 8005416:	4813      	ldr	r0, [pc, #76]	; (8005464 <UART+0x79c>)
 8005418:	f006 f884 	bl	800b524 <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 800541c:	2208      	movs	r2, #8
 800541e:	4917      	ldr	r1, [pc, #92]	; (800547c <UART+0x7b4>)
 8005420:	4810      	ldr	r0, [pc, #64]	; (8005464 <UART+0x79c>)
 8005422:	f006 f801 	bl	800b428 <HAL_UART_Transmit_DMA>
//				Timestamp_UI=micros();
				RxData[0] = 0;
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <UART+0x780>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <UART+0x780>)
 800542e:	2200      	movs	r2, #0
 8005430:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <UART+0x7ac>)
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
				Finish =0;
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <UART+0x7a8>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 800543e:	e204      	b.n	800584a <UART+0xb82>
 8005440:	cac08312 	.word	0xcac08312
 8005444:	3fb645a1 	.word	0x3fb645a1
 8005448:	200007c0 	.word	0x200007c0
 800544c:	200007d8 	.word	0x200007d8
 8005450:	200001f6 	.word	0x200001f6
 8005454:	200007dc 	.word	0x200007dc
 8005458:	200000ac 	.word	0x200000ac
 800545c:	200000d4 	.word	0x200000d4
 8005460:	20000700 	.word	0x20000700
 8005464:	20000400 	.word	0x20000400
 8005468:	200000a8 	.word	0x200000a8
 800546c:	200001f7 	.word	0x200001f7
 8005470:	200007d9 	.word	0x200007d9
 8005474:	200001fb 	.word	0x200001fb
 8005478:	20000098 	.word	0x20000098
 800547c:	200000a0 	.word	0x200000a0
 8005480:	20000524 	.word	0x20000524
 8005484:	200001f4 	.word	0x200001f4
		else if(CheckTrasmit){
 8005488:	4ba7      	ldr	r3, [pc, #668]	; (8005728 <UART+0xa60>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 81dc 	beq.w	800584a <UART+0xb82>
			TxData[2] = 0b10011010;
 8005492:	4ba6      	ldr	r3, [pc, #664]	; (800572c <UART+0xa64>)
 8005494:	229a      	movs	r2, #154	; 0x9a
 8005496:	709a      	strb	r2, [r3, #2]
			if(Arm_State == Setzero){
 8005498:	4ba5      	ldr	r3, [pc, #660]	; (8005730 <UART+0xa68>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b05      	cmp	r3, #5
 800549e:	d106      	bne.n	80054ae <UART+0x7e6>
				TxData[3] = 0;
 80054a0:	4ba2      	ldr	r3, [pc, #648]	; (800572c <UART+0xa64>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0;
 80054a6:	4ba1      	ldr	r3, [pc, #644]	; (800572c <UART+0xa64>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	711a      	strb	r2, [r3, #4]
 80054ac:	e030      	b.n	8005510 <UART+0x848>
				TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 80054ae:	4ba1      	ldr	r3, [pc, #644]	; (8005734 <UART+0xa6c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fa fff4 	bl	80004a0 <__aeabi_f2d>
 80054b8:	a395      	add	r3, pc, #596	; (adr r3, 8005710 <UART+0xa48>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fb f847 	bl	8000550 <__aeabi_dmul>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4610      	mov	r0, r2
 80054c8:	4619      	mov	r1, r3
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	4b9a      	ldr	r3, [pc, #616]	; (8005738 <UART+0xa70>)
 80054d0:	f7fb f968 	bl	80007a4 <__aeabi_ddiv>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fb fae8 	bl	8000ab0 <__aeabi_d2uiz>
 80054e0:	4603      	mov	r3, r0
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	4b91      	ldr	r3, [pc, #580]	; (800572c <UART+0xa64>)
 80054e6:	70da      	strb	r2, [r3, #3]
				TxData[4] = (uint8_t)(theta_now*10000.0)%256;
 80054e8:	4b92      	ldr	r3, [pc, #584]	; (8005734 <UART+0xa6c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fa ffd7 	bl	80004a0 <__aeabi_f2d>
 80054f2:	a387      	add	r3, pc, #540	; (adr r3, 8005710 <UART+0xa48>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f82a 	bl	8000550 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f7fb fad4 	bl	8000ab0 <__aeabi_d2uiz>
 8005508:	4603      	mov	r3, r0
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b87      	ldr	r3, [pc, #540]	; (800572c <UART+0xa64>)
 800550e:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8005510:	4b86      	ldr	r3, [pc, #536]	; (800572c <UART+0xa64>)
 8005512:	789a      	ldrb	r2, [r3, #2]
 8005514:	4b85      	ldr	r3, [pc, #532]	; (800572c <UART+0xa64>)
 8005516:	78db      	ldrb	r3, [r3, #3]
 8005518:	4413      	add	r3, r2
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b83      	ldr	r3, [pc, #524]	; (800572c <UART+0xa64>)
 800551e:	791b      	ldrb	r3, [r3, #4]
 8005520:	4413      	add	r3, r2
 8005522:	b2db      	uxtb	r3, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	b2da      	uxtb	r2, r3
 8005528:	4b80      	ldr	r3, [pc, #512]	; (800572c <UART+0xa64>)
 800552a:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2);
 800552c:	4883      	ldr	r0, [pc, #524]	; (800573c <UART+0xa74>)
 800552e:	f006 f829 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005532:	220c      	movs	r2, #12
 8005534:	4982      	ldr	r1, [pc, #520]	; (8005740 <UART+0xa78>)
 8005536:	4881      	ldr	r0, [pc, #516]	; (800573c <UART+0xa74>)
 8005538:	f005 fff4 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 800553c:	2206      	movs	r2, #6
 800553e:	497b      	ldr	r1, [pc, #492]	; (800572c <UART+0xa64>)
 8005540:	487e      	ldr	r0, [pc, #504]	; (800573c <UART+0xa74>)
 8005542:	f005 ff71 	bl	800b428 <HAL_UART_Transmit_DMA>
			CheckTrasmit=0;
 8005546:	4b78      	ldr	r3, [pc, #480]	; (8005728 <UART+0xa60>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 800554c:	4b7c      	ldr	r3, [pc, #496]	; (8005740 <UART+0xa78>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8005552:	4b7b      	ldr	r3, [pc, #492]	; (8005740 <UART+0xa78>)
 8005554:	2200      	movs	r2, #0
 8005556:	705a      	strb	r2, [r3, #1]
			CheckTrasmit=1;
 8005558:	4b73      	ldr	r3, [pc, #460]	; (8005728 <UART+0xa60>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
		break;
 800555e:	e174      	b.n	800584a <UART+0xb82>
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 8005560:	4b77      	ldr	r3, [pc, #476]	; (8005740 <UART+0xa78>)
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b64      	cmp	r3, #100	; 0x64
 8005566:	f040 8172 	bne.w	800584e <UART+0xb86>
			//Request Angular Velocity
		if(Finish){
 800556a:	4b76      	ldr	r3, [pc, #472]	; (8005744 <UART+0xa7c>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d031      	beq.n	80055d6 <UART+0x90e>
			if(CheckTrasmit){
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <UART+0xa60>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8169 	beq.w	800584e <UART+0xb86>
				TxData2[4]=TxData[2];
 800557c:	4b6b      	ldr	r3, [pc, #428]	; (800572c <UART+0xa64>)
 800557e:	789a      	ldrb	r2, [r3, #2]
 8005580:	4b71      	ldr	r3, [pc, #452]	; (8005748 <UART+0xa80>)
 8005582:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8005584:	4b69      	ldr	r3, [pc, #420]	; (800572c <UART+0xa64>)
 8005586:	78da      	ldrb	r2, [r3, #3]
 8005588:	4b6f      	ldr	r3, [pc, #444]	; (8005748 <UART+0xa80>)
 800558a:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 800558c:	4b67      	ldr	r3, [pc, #412]	; (800572c <UART+0xa64>)
 800558e:	791a      	ldrb	r2, [r3, #4]
 8005590:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <UART+0xa80>)
 8005592:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8005594:	4b65      	ldr	r3, [pc, #404]	; (800572c <UART+0xa64>)
 8005596:	795a      	ldrb	r2, [r3, #5]
 8005598:	4b6b      	ldr	r3, [pc, #428]	; (8005748 <UART+0xa80>)
 800559a:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 800559c:	4b62      	ldr	r3, [pc, #392]	; (8005728 <UART+0xa60>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2); //
 80055a2:	4866      	ldr	r0, [pc, #408]	; (800573c <UART+0xa74>)
 80055a4:	f005 ffee 	bl	800b584 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80055a8:	220c      	movs	r2, #12
 80055aa:	4965      	ldr	r1, [pc, #404]	; (8005740 <UART+0xa78>)
 80055ac:	4863      	ldr	r0, [pc, #396]	; (800573c <UART+0xa74>)
 80055ae:	f005 ffb9 	bl	800b524 <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 80055b2:	2208      	movs	r2, #8
 80055b4:	4964      	ldr	r1, [pc, #400]	; (8005748 <UART+0xa80>)
 80055b6:	4861      	ldr	r0, [pc, #388]	; (800573c <UART+0xa74>)
 80055b8:	f005 ff36 	bl	800b428 <HAL_UART_Transmit_DMA>
//				Timestamp_UI=micros();
				RxData[0] = 0;
 80055bc:	4b60      	ldr	r3, [pc, #384]	; (8005740 <UART+0xa78>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 80055c2:	4b5f      	ldr	r3, [pc, #380]	; (8005740 <UART+0xa78>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 80055c8:	4b57      	ldr	r3, [pc, #348]	; (8005728 <UART+0xa60>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
				Finish =0;
 80055ce:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <UART+0xa7c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 80055d4:	e13b      	b.n	800584e <UART+0xb86>
		else if (CheckTrasmit){
 80055d6:	4b54      	ldr	r3, [pc, #336]	; (8005728 <UART+0xa60>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8137 	beq.w	800584e <UART+0xb86>
			TxData[2] = 0b10011011;
 80055e0:	4b52      	ldr	r3, [pc, #328]	; (800572c <UART+0xa64>)
 80055e2:	229b      	movs	r2, #155	; 0x9b
 80055e4:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 80055e6:	4b51      	ldr	r3, [pc, #324]	; (800572c <UART+0xa64>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((positive(omega_kalman)*60/(2*M_PI))*255/10);
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <UART+0xa84>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	eeb0 0a67 	vmov.f32	s0, s15
 80055f6:	f7ff fb2d 	bl	8004c54 <positive>
 80055fa:	eef0 7a40 	vmov.f32	s15, s0
 80055fe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8005750 <UART+0xa88>
 8005602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005606:	ee17 0a90 	vmov	r0, s15
 800560a:	f7fa ff49 	bl	80004a0 <__aeabi_f2d>
 800560e:	a342      	add	r3, pc, #264	; (adr r3, 8005718 <UART+0xa50>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fb f8c6 	bl	80007a4 <__aeabi_ddiv>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	a33f      	add	r3, pc, #252	; (adr r3, 8005720 <UART+0xa58>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa ff93 	bl	8000550 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4610      	mov	r0, r2
 8005630:	4619      	mov	r1, r3
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <UART+0xa8c>)
 8005638:	f7fb f8b4 	bl	80007a4 <__aeabi_ddiv>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	f7fb fa34 	bl	8000ab0 <__aeabi_d2uiz>
 8005648:	4603      	mov	r3, r0
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b37      	ldr	r3, [pc, #220]	; (800572c <UART+0xa64>)
 800564e:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8005650:	4b36      	ldr	r3, [pc, #216]	; (800572c <UART+0xa64>)
 8005652:	789a      	ldrb	r2, [r3, #2]
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <UART+0xa64>)
 8005656:	78db      	ldrb	r3, [r3, #3]
 8005658:	4413      	add	r3, r2
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b33      	ldr	r3, [pc, #204]	; (800572c <UART+0xa64>)
 800565e:	791b      	ldrb	r3, [r3, #4]
 8005660:	4413      	add	r3, r2
 8005662:	b2db      	uxtb	r3, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b30      	ldr	r3, [pc, #192]	; (800572c <UART+0xa64>)
 800566a:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2); //
 800566c:	4833      	ldr	r0, [pc, #204]	; (800573c <UART+0xa74>)
 800566e:	f005 ff89 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8005672:	220c      	movs	r2, #12
 8005674:	4932      	ldr	r1, [pc, #200]	; (8005740 <UART+0xa78>)
 8005676:	4831      	ldr	r0, [pc, #196]	; (800573c <UART+0xa74>)
 8005678:	f005 ff54 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 800567c:	2206      	movs	r2, #6
 800567e:	492b      	ldr	r1, [pc, #172]	; (800572c <UART+0xa64>)
 8005680:	482e      	ldr	r0, [pc, #184]	; (800573c <UART+0xa74>)
 8005682:	f005 fed1 	bl	800b428 <HAL_UART_Transmit_DMA>
			CheckTrasmit=0;
 8005686:	4b28      	ldr	r3, [pc, #160]	; (8005728 <UART+0xa60>)
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <UART+0xa78>)
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8005692:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <UART+0xa78>)
 8005694:	2200      	movs	r2, #0
 8005696:	705a      	strb	r2, [r3, #1]
			CheckTrasmit=1;
 8005698:	4b23      	ldr	r3, [pc, #140]	; (8005728 <UART+0xa60>)
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
		break;
 800569e:	e0d6      	b.n	800584e <UART+0xb86>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <UART+0xa78>)
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b63      	cmp	r3, #99	; 0x63
 80056a6:	f040 80d4 	bne.w	8005852 <UART+0xb8a>
			//enable gripple
			Enable_EndEffector = 1;
 80056aa:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <UART+0xa90>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80056b0:	4822      	ldr	r0, [pc, #136]	; (800573c <UART+0xa74>)
 80056b2:	f005 ff67 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80056b6:	220c      	movs	r2, #12
 80056b8:	4921      	ldr	r1, [pc, #132]	; (8005740 <UART+0xa78>)
 80056ba:	4820      	ldr	r0, [pc, #128]	; (800573c <UART+0xa74>)
 80056bc:	f005 ff32 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80056c0:	2202      	movs	r2, #2
 80056c2:	4926      	ldr	r1, [pc, #152]	; (800575c <UART+0xa94>)
 80056c4:	481d      	ldr	r0, [pc, #116]	; (800573c <UART+0xa74>)
 80056c6:	f005 feaf 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <UART+0xa78>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <UART+0xa78>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 80056d6:	e0bc      	b.n	8005852 <UART+0xb8a>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <UART+0xa78>)
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b62      	cmp	r3, #98	; 0x62
 80056de:	f040 80ba 	bne.w	8005856 <UART+0xb8e>
			//disable gripple
			Enable_EndEffector = 0;
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <UART+0xa90>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80056e8:	4814      	ldr	r0, [pc, #80]	; (800573c <UART+0xa74>)
 80056ea:	f005 ff4b 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80056ee:	220c      	movs	r2, #12
 80056f0:	4913      	ldr	r1, [pc, #76]	; (8005740 <UART+0xa78>)
 80056f2:	4812      	ldr	r0, [pc, #72]	; (800573c <UART+0xa74>)
 80056f4:	f005 ff16 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80056f8:	2202      	movs	r2, #2
 80056fa:	4918      	ldr	r1, [pc, #96]	; (800575c <UART+0xa94>)
 80056fc:	480f      	ldr	r0, [pc, #60]	; (800573c <UART+0xa74>)
 80056fe:	f005 fe93 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <UART+0xa78>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <UART+0xa78>)
 800570a:	2200      	movs	r2, #0
 800570c:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 800570e:	e0a2      	b.n	8005856 <UART+0xb8e>
 8005710:	00000000 	.word	0x00000000
 8005714:	40c38800 	.word	0x40c38800
 8005718:	54442d18 	.word	0x54442d18
 800571c:	401921fb 	.word	0x401921fb
 8005720:	00000000 	.word	0x00000000
 8005724:	406fe000 	.word	0x406fe000
 8005728:	200001fb 	.word	0x200001fb
 800572c:	20000098 	.word	0x20000098
 8005730:	200001f7 	.word	0x200001f7
 8005734:	20000524 	.word	0x20000524
 8005738:	40700000 	.word	0x40700000
 800573c:	20000400 	.word	0x20000400
 8005740:	200007c0 	.word	0x200007c0
 8005744:	200007d9 	.word	0x200007d9
 8005748:	200000a0 	.word	0x200000a0
 800574c:	20000538 	.word	0x20000538
 8005750:	42700000 	.word	0x42700000
 8005754:	40240000 	.word	0x40240000
 8005758:	200007cf 	.word	0x200007cf
 800575c:	200000a8 	.word	0x200000a8
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <UART+0xba0>)
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b61      	cmp	r3, #97	; 0x61
 8005766:	d119      	bne.n	800579c <UART+0xad4>
			//Set HOME
			Arm_State = Home;
 8005768:	4b40      	ldr	r3, [pc, #256]	; (800586c <UART+0xba4>)
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
			SetHome_Flag=1;
 800576e:	4b40      	ldr	r3, [pc, #256]	; (8005870 <UART+0xba8>)
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8005774:	483f      	ldr	r0, [pc, #252]	; (8005874 <UART+0xbac>)
 8005776:	f005 ff05 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 800577a:	220c      	movs	r2, #12
 800577c:	493a      	ldr	r1, [pc, #232]	; (8005868 <UART+0xba0>)
 800577e:	483d      	ldr	r0, [pc, #244]	; (8005874 <UART+0xbac>)
 8005780:	f005 fed0 	bl	800b524 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8005784:	2202      	movs	r2, #2
 8005786:	493c      	ldr	r1, [pc, #240]	; (8005878 <UART+0xbb0>)
 8005788:	483a      	ldr	r0, [pc, #232]	; (8005874 <UART+0xbac>)
 800578a:	f005 fe4d 	bl	800b428 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <UART+0xba0>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8005794:	4b34      	ldr	r3, [pc, #208]	; (8005868 <UART+0xba0>)
 8005796:	2200      	movs	r2, #0
 8005798:	705a      	strb	r2, [r3, #1]
			HAL_UART_DMAStop(&huart2);
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
			RxData[0]=0;
			RxData[1]=0;
		}
		break;
 800579a:	e05e      	b.n	800585a <UART+0xb92>
		else if (RxData[1] != 0){
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <UART+0xba0>)
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05a      	beq.n	800585a <UART+0xb92>
			HAL_UART_DMAStop(&huart2);
 80057a4:	4833      	ldr	r0, [pc, #204]	; (8005874 <UART+0xbac>)
 80057a6:	f005 feed 	bl	800b584 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80057aa:	220c      	movs	r2, #12
 80057ac:	492e      	ldr	r1, [pc, #184]	; (8005868 <UART+0xba0>)
 80057ae:	4831      	ldr	r0, [pc, #196]	; (8005874 <UART+0xbac>)
 80057b0:	f005 feb8 	bl	800b524 <HAL_UART_Receive_DMA>
			RxData[0]=0;
 80057b4:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <UART+0xba0>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <UART+0xba0>)
 80057bc:	2200      	movs	r2, #0
 80057be:	705a      	strb	r2, [r3, #1]
		break;
 80057c0:	e04b      	b.n	800585a <UART+0xb92>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80057c2:	220c      	movs	r2, #12
 80057c4:	4928      	ldr	r1, [pc, #160]	; (8005868 <UART+0xba0>)
 80057c6:	482b      	ldr	r0, [pc, #172]	; (8005874 <UART+0xbac>)
 80057c8:	f005 feac 	bl	800b524 <HAL_UART_Receive_DMA>
		break;
 80057cc:	e048      	b.n	8005860 <UART+0xb98>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <UART+0xba0>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b58      	cmp	r3, #88	; 0x58
 80057d4:	d143      	bne.n	800585e <UART+0xb96>
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <UART+0xba0>)
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b75      	cmp	r3, #117	; 0x75
 80057dc:	d13f      	bne.n	800585e <UART+0xb96>
			if(RxData[2] !=0 && RxData[3] != 0){
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <UART+0xba0>)
 80057e0:	789b      	ldrb	r3, [r3, #2]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d03b      	beq.n	800585e <UART+0xb96>
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <UART+0xba0>)
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d037      	beq.n	800585e <UART+0xb96>
				RxData[0]=RxData[2];
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <UART+0xba0>)
 80057f0:	789a      	ldrb	r2, [r3, #2]
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <UART+0xba0>)
 80057f4:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <UART+0xba0>)
 80057f8:	78da      	ldrb	r2, [r3, #3]
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <UART+0xba0>)
 80057fc:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <UART+0xba0>)
 8005800:	2200      	movs	r2, #0
 8005802:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <UART+0xba0>)
 8005806:	2200      	movs	r2, #0
 8005808:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <UART+0xba0>)
 800580c:	2200      	movs	r2, #0
 800580e:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 8005810:	4b15      	ldr	r3, [pc, #84]	; (8005868 <UART+0xba0>)
 8005812:	2200      	movs	r2, #0
 8005814:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8005816:	e022      	b.n	800585e <UART+0xb96>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <UART+0xba0>)
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 800581e:	4815      	ldr	r0, [pc, #84]	; (8005874 <UART+0xbac>)
 8005820:	f005 feb0 	bl	800b584 <HAL_UART_DMAStop>
		break;
 8005824:	e01c      	b.n	8005860 <UART+0xb98>
		break;
 8005826:	bf00      	nop
 8005828:	e01a      	b.n	8005860 <UART+0xb98>
		break;
 800582a:	bf00      	nop
 800582c:	e018      	b.n	8005860 <UART+0xb98>
		break;
 800582e:	bf00      	nop
 8005830:	e016      	b.n	8005860 <UART+0xb98>
		break;
 8005832:	bf00      	nop
 8005834:	e014      	b.n	8005860 <UART+0xb98>
		break;
 8005836:	bf00      	nop
 8005838:	e012      	b.n	8005860 <UART+0xb98>
		break;
 800583a:	bf00      	nop
 800583c:	e010      	b.n	8005860 <UART+0xb98>
		break;
 800583e:	bf00      	nop
 8005840:	e00e      	b.n	8005860 <UART+0xb98>
		break;
 8005842:	bf00      	nop
 8005844:	e00c      	b.n	8005860 <UART+0xb98>
		break;
 8005846:	bf00      	nop
 8005848:	e00a      	b.n	8005860 <UART+0xb98>
		break;
 800584a:	bf00      	nop
 800584c:	e008      	b.n	8005860 <UART+0xb98>
		break;
 800584e:	bf00      	nop
 8005850:	e006      	b.n	8005860 <UART+0xb98>
		break;
 8005852:	bf00      	nop
 8005854:	e004      	b.n	8005860 <UART+0xb98>
		break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <UART+0xb98>
		break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <UART+0xb98>
		break;
 800585e:	bf00      	nop
	}
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200007c0 	.word	0x200007c0
 800586c:	200001f7 	.word	0x200001f7
 8005870:	20000514 	.word	0x20000514
 8005874:	20000400 	.word	0x20000400
 8005878:	200000a8 	.word	0x200000a8

0800587c <OpenEndEffector>:

void OpenEndEffector() {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8005882:	4b3a      	ldr	r3, [pc, #232]	; (800596c <OpenEndEffector+0xf0>)
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b20      	cmp	r3, #32
 800588c:	d119      	bne.n	80058c2 <OpenEndEffector+0x46>
 800588e:	4b38      	ldr	r3, [pc, #224]	; (8005970 <OpenEndEffector+0xf4>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d115      	bne.n	80058c2 <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8005896:	2364      	movs	r3, #100	; 0x64
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2301      	movs	r3, #1
 800589c:	4a35      	ldr	r2, [pc, #212]	; (8005974 <OpenEndEffector+0xf8>)
 800589e:	2146      	movs	r1, #70	; 0x46
 80058a0:	4832      	ldr	r0, [pc, #200]	; (800596c <OpenEndEffector+0xf0>)
 80058a2:	f001 fd91 	bl	80073c8 <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 80058a6:	4b32      	ldr	r3, [pc, #200]	; (8005970 <OpenEndEffector+0xf4>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 80058ac:	4b32      	ldr	r3, [pc, #200]	; (8005978 <OpenEndEffector+0xfc>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 80058b2:	4b32      	ldr	r3, [pc, #200]	; (800597c <OpenEndEffector+0x100>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 80058b8:	f000 fd08 	bl	80062cc <HAL_GetTick>
 80058bc:	4603      	mov	r3, r0
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <OpenEndEffector+0x104>)
 80058c0:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 80058c2:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <OpenEndEffector+0xfc>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d144      	bne.n	8005954 <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 80058ca:	f000 fcff 	bl	80062cc <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <OpenEndEffector+0x104>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2bfa      	cmp	r3, #250	; 0xfa
 80058d8:	d906      	bls.n	80058e8 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 80058da:	f000 fcf7 	bl	80062cc <HAL_GetTick>
 80058de:	4603      	mov	r3, r0
 80058e0:	4a27      	ldr	r2, [pc, #156]	; (8005980 <OpenEndEffector+0x104>)
 80058e2:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 80058e4:	f000 f850 	bl	8005988 <CheckEndEffector>
		}

		switch(EndEffector_State)
 80058e8:	4b24      	ldr	r3, [pc, #144]	; (800597c <OpenEndEffector+0x100>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d83a      	bhi.n	8005966 <OpenEndEffector+0xea>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <OpenEndEffector+0x7c>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800590d 	.word	0x0800590d
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	0800592d 	.word	0x0800592d
 8005904:	0800593d 	.word	0x0800593d
 8005908:	0800594d 	.word	0x0800594d
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <OpenEndEffector+0x108>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2b12      	cmp	r3, #18
 8005912:	d121      	bne.n	8005958 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <OpenEndEffector+0x100>)
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
			}
			break;
 800591a:	e01d      	b.n	8005958 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <OpenEndEffector+0x108>)
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	2b34      	cmp	r3, #52	; 0x34
 8005922:	d11b      	bne.n	800595c <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <OpenEndEffector+0x100>)
 8005926:	2202      	movs	r2, #2
 8005928:	701a      	strb	r2, [r3, #0]
			}
			break;
 800592a:	e017      	b.n	800595c <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 800592c:	4b15      	ldr	r3, [pc, #84]	; (8005984 <OpenEndEffector+0x108>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	2b56      	cmp	r3, #86	; 0x56
 8005932:	d115      	bne.n	8005960 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <OpenEndEffector+0x100>)
 8005936:	2203      	movs	r2, #3
 8005938:	701a      	strb	r2, [r3, #0]
			}
			break;
 800593a:	e011      	b.n	8005960 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <OpenEndEffector+0x108>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	2b78      	cmp	r3, #120	; 0x78
 8005942:	d10f      	bne.n	8005964 <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8005944:	4b0d      	ldr	r3, [pc, #52]	; (800597c <OpenEndEffector+0x100>)
 8005946:	2204      	movs	r2, #4
 8005948:	701a      	strb	r2, [r3, #0]
			}
			break;
 800594a:	e00b      	b.n	8005964 <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <OpenEndEffector+0xfc>)
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
			break;
 8005952:	e008      	b.n	8005966 <OpenEndEffector+0xea>
		}
	}
 8005954:	bf00      	nop
 8005956:	e006      	b.n	8005966 <OpenEndEffector+0xea>
			break;
 8005958:	bf00      	nop
 800595a:	e004      	b.n	8005966 <OpenEndEffector+0xea>
			break;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <OpenEndEffector+0xea>
			break;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <OpenEndEffector+0xea>
			break;
 8005964:	bf00      	nop
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	2000028c 	.word	0x2000028c
 8005970:	200007ec 	.word	0x200007ec
 8005974:	200001fc 	.word	0x200001fc
 8005978:	200007ed 	.word	0x200007ed
 800597c:	200001f8 	.word	0x200001f8
 8005980:	200007f0 	.word	0x200007f0
 8005984:	200007ee 	.word	0x200007ee

08005988 <CheckEndEffector>:

void CheckEndEffector()
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 800598e:	2301      	movs	r3, #1
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	2301      	movs	r3, #1
 8005994:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <CheckEndEffector+0x38>)
 8005996:	2146      	movs	r1, #70	; 0x46
 8005998:	480a      	ldr	r0, [pc, #40]	; (80059c4 <CheckEndEffector+0x3c>)
 800599a:	f001 fe13 	bl	80075c4 <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <CheckEndEffector+0x3c>)
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d107      	bne.n	80059ba <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 80059aa:	2320      	movs	r3, #32
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2301      	movs	r3, #1
 80059b0:	4a05      	ldr	r2, [pc, #20]	; (80059c8 <CheckEndEffector+0x40>)
 80059b2:	2146      	movs	r1, #70	; 0x46
 80059b4:	4803      	ldr	r0, [pc, #12]	; (80059c4 <CheckEndEffector+0x3c>)
 80059b6:	f001 fecb 	bl	8007750 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200001fd 	.word	0x200001fd
 80059c4:	2000028c 	.word	0x2000028c
 80059c8:	200007ee 	.word	0x200007ee
 80059cc:	00000000 	.word	0x00000000

080059d0 <TransferFunction>:

float TransferFunction(float u_tf){
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	ed87 0a01 	vstr	s0, [r7, #4]
	u_i[0] = u_tf;
 80059da:	4a47      	ldr	r2, [pc, #284]	; (8005af8 <TransferFunction+0x128>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6013      	str	r3, [r2, #0]
	y_i[0] = 0.6524*y_i[1] + 157.5*u_i[1] - 306.8*u_i[2] + 151.9*u_i[3];
 80059e0:	4b46      	ldr	r3, [pc, #280]	; (8005afc <TransferFunction+0x12c>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fa fd5b 	bl	80004a0 <__aeabi_f2d>
 80059ea:	a33b      	add	r3, pc, #236	; (adr r3, 8005ad8 <TransferFunction+0x108>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fdae 	bl	8000550 <__aeabi_dmul>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	4b3e      	ldr	r3, [pc, #248]	; (8005af8 <TransferFunction+0x128>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fa fd4d 	bl	80004a0 <__aeabi_f2d>
 8005a06:	a336      	add	r3, pc, #216	; (adr r3, 8005ae0 <TransferFunction+0x110>)
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f7fa fda0 	bl	8000550 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4620      	mov	r0, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	f7fa fbe4 	bl	80001e4 <__adddf3>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4614      	mov	r4, r2
 8005a22:	461d      	mov	r5, r3
 8005a24:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <TransferFunction+0x128>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fa fd39 	bl	80004a0 <__aeabi_f2d>
 8005a2e:	a32e      	add	r3, pc, #184	; (adr r3, 8005ae8 <TransferFunction+0x118>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fd8c 	bl	8000550 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa fbce 	bl	80001e0 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <TransferFunction+0x128>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fa fd25 	bl	80004a0 <__aeabi_f2d>
 8005a56:	a326      	add	r3, pc, #152	; (adr r3, 8005af0 <TransferFunction+0x120>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fd78 	bl	8000550 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4620      	mov	r0, r4
 8005a66:	4629      	mov	r1, r5
 8005a68:	f7fa fbbc 	bl	80001e4 <__adddf3>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fb f83c 	bl	8000af0 <__aeabi_d2f>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4a20      	ldr	r2, [pc, #128]	; (8005afc <TransferFunction+0x12c>)
 8005a7c:	6013      	str	r3, [r2, #0]
	for(int i=2;i>=0;i--){
 8005a7e:	2302      	movs	r3, #2
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e018      	b.n	8005ab6 <TransferFunction+0xe6>
		u_i[i+1]=u_i[i];
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	491b      	ldr	r1, [pc, #108]	; (8005af8 <TransferFunction+0x128>)
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	0092      	lsls	r2, r2, #2
 8005a8e:	440a      	add	r2, r1
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4919      	ldr	r1, [pc, #100]	; (8005af8 <TransferFunction+0x128>)
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	601a      	str	r2, [r3, #0]
		y_i[i+i]=y_i[i];
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4917      	ldr	r1, [pc, #92]	; (8005afc <TransferFunction+0x12c>)
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	440a      	add	r2, r1
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	4914      	ldr	r1, [pc, #80]	; (8005afc <TransferFunction+0x12c>)
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	601a      	str	r2, [r3, #0]
	for(int i=2;i>=0;i--){
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dae3      	bge.n	8005a84 <TransferFunction+0xb4>
	}
	return positive(y_i[0]);
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <TransferFunction+0x12c>)
 8005abe:	edd3 7a00 	vldr	s15, [r3]
 8005ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac6:	f7ff f8c5 	bl	8004c54 <positive>
 8005aca:	eef0 7a40 	vmov.f32	s15, s0
}
 8005ace:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad8:	f6fd21ff 	.word	0xf6fd21ff
 8005adc:	3fe4e075 	.word	0x3fe4e075
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	4063b000 	.word	0x4063b000
 8005ae8:	cccccccd 	.word	0xcccccccd
 8005aec:	40732ccc 	.word	0x40732ccc
 8005af0:	cccccccd 	.word	0xcccccccd
 8005af4:	4062fccc 	.word	0x4062fccc
 8005af8:	20000810 	.word	0x20000810
 8005afc:	20000820 	.word	0x20000820

08005b00 <LowpassFilter>:

float LowpassFilter(float Vin){
 8005b00:	b5b0      	push	{r4, r5, r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	ed87 0a01 	vstr	s0, [r7, #4]
	static float V_out[2] = {0,0};
	static float V_in[2] = {0,0};
	V_in[0]=Vin;
 8005b0a:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <LowpassFilter+0x90>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6013      	str	r3, [r2, #0]
	V_out[0]=0.9993*V_out[1] + 0.0006664*V_in[1];
 8005b10:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <LowpassFilter+0x94>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fa fcc3 	bl	80004a0 <__aeabi_f2d>
 8005b1a:	a319      	add	r3, pc, #100	; (adr r3, 8005b80 <LowpassFilter+0x80>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fd16 	bl	8000550 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <LowpassFilter+0x90>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa fcb5 	bl	80004a0 <__aeabi_f2d>
 8005b36:	a314      	add	r3, pc, #80	; (adr r3, 8005b88 <LowpassFilter+0x88>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fd08 	bl	8000550 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7fa fb4c 	bl	80001e4 <__adddf3>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f7fa ffcc 	bl	8000af0 <__aeabi_d2f>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <LowpassFilter+0x94>)
 8005b5c:	6013      	str	r3, [r2, #0]
	V_out[1]=V_out[0];
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <LowpassFilter+0x94>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <LowpassFilter+0x94>)
 8005b64:	6053      	str	r3, [r2, #4]
	V_in[1] = V_in[0];
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <LowpassFilter+0x90>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <LowpassFilter+0x90>)
 8005b6c:	6053      	str	r3, [r2, #4]
	return V_out[0];
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <LowpassFilter+0x94>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	ee07 3a90 	vmov	s15, r3
}
 8005b76:	eeb0 0a67 	vmov.f32	s0, s15
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b80:	fe5c91d1 	.word	0xfe5c91d1
 8005b84:	3feffa43 	.word	0x3feffa43
 8005b88:	1a5ffd97 	.word	0x1a5ffd97
 8005b8c:	3f45d62b 	.word	0x3f45d62b
 8005b90:	20000854 	.word	0x20000854
 8005b94:	2000085c 	.word	0x2000085c

08005b98 <LowpassFilter2>:

float LowpassFilter2(float Vin){
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float V_out[2] = {0,0};
	static float V_in[2] = {0,0};
	V_in[0]=Vin;
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <LowpassFilter2+0x90>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6013      	str	r3, [r2, #0]
	V_out[0]=0.9993*V_out[1] + 0.0006664*V_in[1];
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <LowpassFilter2+0x94>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fc77 	bl	80004a0 <__aeabi_f2d>
 8005bb2:	a319      	add	r3, pc, #100	; (adr r3, 8005c18 <LowpassFilter2+0x80>)
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f7fa fcca 	bl	8000550 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <LowpassFilter2+0x90>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fa fc69 	bl	80004a0 <__aeabi_f2d>
 8005bce:	a314      	add	r3, pc, #80	; (adr r3, 8005c20 <LowpassFilter2+0x88>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fcbc 	bl	8000550 <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4629      	mov	r1, r5
 8005be0:	f7fa fb00 	bl	80001e4 <__adddf3>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7fa ff80 	bl	8000af0 <__aeabi_d2f>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <LowpassFilter2+0x94>)
 8005bf4:	6013      	str	r3, [r2, #0]
	V_out[1]=V_out[0];
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <LowpassFilter2+0x94>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <LowpassFilter2+0x94>)
 8005bfc:	6053      	str	r3, [r2, #4]
	V_in[1] = V_in[0];
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <LowpassFilter2+0x90>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <LowpassFilter2+0x90>)
 8005c04:	6053      	str	r3, [r2, #4]
	return V_out[0];
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <LowpassFilter2+0x94>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	ee07 3a90 	vmov	s15, r3
}
 8005c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bdb0      	pop	{r4, r5, r7, pc}
 8005c18:	fe5c91d1 	.word	0xfe5c91d1
 8005c1c:	3feffa43 	.word	0x3feffa43
 8005c20:	1a5ffd97 	.word	0x1a5ffd97
 8005c24:	3f45d62b 	.word	0x3f45d62b
 8005c28:	20000864 	.word	0x20000864
 8005c2c:	2000086c 	.word	0x2000086c

08005c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c34:	b672      	cpsid	i
}
 8005c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c38:	e7fe      	b.n	8005c38 <Error_Handler+0x8>
	...

08005c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	4a0f      	ldr	r2, [pc, #60]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c50:	6453      	str	r3, [r2, #68]	; 0x44
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	2300      	movs	r3, #0
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_MspInit+0x4c>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005c7a:	2007      	movs	r0, #7
 8005c7c:	f000 fc26 	bl	80064cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800

08005c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	f107 0314 	add.w	r3, r7, #20
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <HAL_I2C_MspInit+0xa4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d13c      	bne.n	8005d28 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8005cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cd0:	2312      	movs	r3, #18
 8005cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005cdc:	2304      	movs	r3, #4
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4814      	ldr	r0, [pc, #80]	; (8005d38 <HAL_I2C_MspInit+0xac>)
 8005ce8:	f001 f842 	bl	8006d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <HAL_I2C_MspInit+0xa8>)
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	201f      	movs	r0, #31
 8005d0e:	f000 fbe8 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005d12:	201f      	movs	r0, #31
 8005d14:	f000 fc01 	bl	800651a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	2020      	movs	r0, #32
 8005d1e:	f000 fbe0 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005d22:	2020      	movs	r0, #32
 8005d24:	f000 fbf9 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005d28:	bf00      	nop
 8005d2a:	3728      	adds	r7, #40	; 0x28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40005400 	.word	0x40005400
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40020400 	.word	0x40020400

08005d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <HAL_TIM_Base_MspInit+0xb8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d116      	bne.n	8005d7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5e:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	201a      	movs	r0, #26
 8005d70:	f000 fbb7 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005d74:	201a      	movs	r0, #26
 8005d76:	f000 fbd0 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005d7a:	e036      	b.n	8005dea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1e      	ldr	r2, [pc, #120]	; (8005dfc <HAL_TIM_Base_MspInit+0xc0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d116      	bne.n	8005db4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005da2:	2200      	movs	r2, #0
 8005da4:	2100      	movs	r1, #0
 8005da6:	201e      	movs	r0, #30
 8005da8:	f000 fb9b 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005dac:	201e      	movs	r0, #30
 8005dae:	f000 fbb4 	bl	800651a <HAL_NVIC_EnableIRQ>
}
 8005db2:	e01a      	b.n	8005dea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_TIM_Base_MspInit+0xc4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d115      	bne.n	8005dea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	4a0c      	ldr	r2, [pc, #48]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_TIM_Base_MspInit+0xbc>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	201a      	movs	r0, #26
 8005de0:	f000 fb7f 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005de4:	201a      	movs	r0, #26
 8005de6:	f000 fb98 	bl	800651a <HAL_NVIC_EnableIRQ>
}
 8005dea:	bf00      	nop
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40014800 	.word	0x40014800

08005e04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_TIM_Encoder_MspInit+0x84>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d12b      	bne.n	8005e7e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	6413      	str	r3, [r2, #64]	; 0x40
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	6313      	str	r3, [r2, #48]	; 0x30
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005e5e:	23c0      	movs	r3, #192	; 0xc0
 8005e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e62:	2302      	movs	r3, #2
 8005e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	4619      	mov	r1, r3
 8005e78:	4805      	ldr	r0, [pc, #20]	; (8005e90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005e7a:	f000 ff79 	bl	8006d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005e7e:	bf00      	nop
 8005e80:	3728      	adds	r7, #40	; 0x28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40020000 	.word	0x40020000

08005e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a12      	ldr	r2, [pc, #72]	; (8005efc <HAL_TIM_MspPostInit+0x68>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d11e      	bne.n	8005ef4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <HAL_TIM_MspPostInit+0x6c>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <HAL_TIM_MspPostInit+0x6c>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <HAL_TIM_MspPostInit+0x6c>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8005ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8005ee8:	f107 030c 	add.w	r3, r7, #12
 8005eec:	4619      	mov	r1, r3
 8005eee:	4805      	ldr	r0, [pc, #20]	; (8005f04 <HAL_TIM_MspPostInit+0x70>)
 8005ef0:	f000 ff3e 	bl	8006d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005ef4:	bf00      	nop
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40023800 	.word	0x40023800
 8005f04:	40020000 	.word	0x40020000

08005f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a4c      	ldr	r2, [pc, #304]	; (8006058 <HAL_UART_MspInit+0x150>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f040 8091 	bne.w	800604e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	4b4a      	ldr	r3, [pc, #296]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	4a49      	ldr	r2, [pc, #292]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3c:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	4a42      	ldr	r2, [pc, #264]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6313      	str	r3, [r2, #48]	; 0x30
 8005f58:	4b40      	ldr	r3, [pc, #256]	; (800605c <HAL_UART_MspInit+0x154>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005f64:	230c      	movs	r3, #12
 8005f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f70:	2303      	movs	r3, #3
 8005f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f74:	2307      	movs	r3, #7
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4838      	ldr	r0, [pc, #224]	; (8006060 <HAL_UART_MspInit+0x158>)
 8005f80:	f000 fef6 	bl	8006d70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005f84:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005f86:	4a38      	ldr	r2, [pc, #224]	; (8006068 <HAL_UART_MspInit+0x160>)
 8005f88:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005f8a:	4b36      	ldr	r3, [pc, #216]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f92:	4b34      	ldr	r3, [pc, #208]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f98:	4b32      	ldr	r3, [pc, #200]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f9e:	4b31      	ldr	r3, [pc, #196]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fa4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fc0:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005fc6:	4827      	ldr	r0, [pc, #156]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fc8:	f000 fac2 	bl	8006550 <HAL_DMA_Init>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005fd2:	f7ff fe2d 	bl	8005c30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
 8005fdc:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_UART_MspInit+0x15c>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <HAL_UART_MspInit+0x164>)
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_UART_MspInit+0x168>)
 8005fe6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <HAL_UART_MspInit+0x164>)
 8005fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005fee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ff0:	4b1e      	ldr	r3, [pc, #120]	; (800606c <HAL_UART_MspInit+0x164>)
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <HAL_UART_MspInit+0x164>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_UART_MspInit+0x164>)
 8005ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006002:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <HAL_UART_MspInit+0x164>)
 8006006:	2200      	movs	r2, #0
 8006008:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <HAL_UART_MspInit+0x164>)
 800600c:	2200      	movs	r2, #0
 800600e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <HAL_UART_MspInit+0x164>)
 8006012:	2200      	movs	r2, #0
 8006014:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <HAL_UART_MspInit+0x164>)
 8006018:	2200      	movs	r2, #0
 800601a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <HAL_UART_MspInit+0x164>)
 800601e:	2200      	movs	r2, #0
 8006020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006022:	4812      	ldr	r0, [pc, #72]	; (800606c <HAL_UART_MspInit+0x164>)
 8006024:	f000 fa94 	bl	8006550 <HAL_DMA_Init>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800602e:	f7ff fdff 	bl	8005c30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <HAL_UART_MspInit+0x164>)
 8006036:	635a      	str	r2, [r3, #52]	; 0x34
 8006038:	4a0c      	ldr	r2, [pc, #48]	; (800606c <HAL_UART_MspInit+0x164>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	2026      	movs	r0, #38	; 0x26
 8006044:	f000 fa4d 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006048:	2026      	movs	r0, #38	; 0x26
 800604a:	f000 fa66 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800604e:	bf00      	nop
 8006050:	3728      	adds	r7, #40	; 0x28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40004400 	.word	0x40004400
 800605c:	40023800 	.word	0x40023800
 8006060:	40020000 	.word	0x40020000
 8006064:	20000444 	.word	0x20000444
 8006068:	40026088 	.word	0x40026088
 800606c:	200004a4 	.word	0x200004a4
 8006070:	400260a0 	.word	0x400260a0

08006074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006078:	e7fe      	b.n	8006078 <NMI_Handler+0x4>

0800607a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800607a:	b480      	push	{r7}
 800607c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800607e:	e7fe      	b.n	800607e <HardFault_Handler+0x4>

08006080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006084:	e7fe      	b.n	8006084 <MemManage_Handler+0x4>

08006086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800608a:	e7fe      	b.n	800608a <BusFault_Handler+0x4>

0800608c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006090:	e7fe      	b.n	8006090 <UsageFault_Handler+0x4>

08006092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006092:	b480      	push	{r7}
 8006094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060ae:	b480      	push	{r7}
 80060b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060c0:	f000 f8f0 	bl	80062a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 80060cc:	2004      	movs	r0, #4
 80060ce:	f001 f81f 	bl	8007110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80060da:	2010      	movs	r0, #16
 80060dc:	f001 f818 	bl	8007110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80060e0:	bf00      	nop
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80060e8:	4802      	ldr	r0, [pc, #8]	; (80060f4 <DMA1_Stream5_IRQHandler+0x10>)
 80060ea:	f000 fbc9 	bl	8006880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000444 	.word	0x20000444

080060f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <DMA1_Stream6_IRQHandler+0x10>)
 80060fe:	f000 fbbf 	bl	8006880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200004a4 	.word	0x200004a4

0800610c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006110:	4803      	ldr	r0, [pc, #12]	; (8006120 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006112:	f004 fae1 	bl	800a6d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006116:	4803      	ldr	r0, [pc, #12]	; (8006124 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8006118:	f004 fade 	bl	800a6d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800611c:	bf00      	nop
 800611e:	bd80      	pop	{r7, pc}
 8006120:	200002e0 	.word	0x200002e0
 8006124:	200003b8 	.word	0x200003b8

08006128 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800612c:	4802      	ldr	r0, [pc, #8]	; (8006138 <TIM4_IRQHandler+0x10>)
 800612e:	f004 fad3 	bl	800a6d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006132:	bf00      	nop
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000370 	.word	0x20000370

0800613c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006140:	4802      	ldr	r0, [pc, #8]	; (800614c <I2C1_EV_IRQHandler+0x10>)
 8006142:	f001 fc03 	bl	800794c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	2000028c 	.word	0x2000028c

08006150 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006154:	4802      	ldr	r0, [pc, #8]	; (8006160 <I2C1_ER_IRQHandler+0x10>)
 8006156:	f001 fd6a 	bl	8007c2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	2000028c 	.word	0x2000028c

08006164 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006168:	4802      	ldr	r0, [pc, #8]	; (8006174 <USART2_IRQHandler+0x10>)
 800616a:	f005 fa8b 	bl	800b684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800616e:	bf00      	nop
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000400 	.word	0x20000400

08006178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800617c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006180:	f000 ffc6 	bl	8007110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006184:	bf00      	nop
 8006186:	bd80      	pop	{r7, pc}

08006188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <SystemInit+0x20>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <SystemInit+0x20>)
 8006194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800619c:	bf00      	nop
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	e000ed00 	.word	0xe000ed00

080061ac <Reset_Handler>:
 80061ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061e4 <LoopFillZerobss+0x12>
 80061b0:	480d      	ldr	r0, [pc, #52]	; (80061e8 <LoopFillZerobss+0x16>)
 80061b2:	490e      	ldr	r1, [pc, #56]	; (80061ec <LoopFillZerobss+0x1a>)
 80061b4:	4a0e      	ldr	r2, [pc, #56]	; (80061f0 <LoopFillZerobss+0x1e>)
 80061b6:	2300      	movs	r3, #0
 80061b8:	e002      	b.n	80061c0 <LoopCopyDataInit>

080061ba <CopyDataInit>:
 80061ba:	58d4      	ldr	r4, [r2, r3]
 80061bc:	50c4      	str	r4, [r0, r3]
 80061be:	3304      	adds	r3, #4

080061c0 <LoopCopyDataInit>:
 80061c0:	18c4      	adds	r4, r0, r3
 80061c2:	428c      	cmp	r4, r1
 80061c4:	d3f9      	bcc.n	80061ba <CopyDataInit>
 80061c6:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <LoopFillZerobss+0x22>)
 80061c8:	4c0b      	ldr	r4, [pc, #44]	; (80061f8 <LoopFillZerobss+0x26>)
 80061ca:	2300      	movs	r3, #0
 80061cc:	e001      	b.n	80061d2 <LoopFillZerobss>

080061ce <FillZerobss>:
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	3204      	adds	r2, #4

080061d2 <LoopFillZerobss>:
 80061d2:	42a2      	cmp	r2, r4
 80061d4:	d3fb      	bcc.n	80061ce <FillZerobss>
 80061d6:	f7ff ffd7 	bl	8006188 <SystemInit>
 80061da:	f006 fd21 	bl	800cc20 <__libc_init_array>
 80061de:	f7fa fe5b 	bl	8000e98 <main>
 80061e2:	4770      	bx	lr
 80061e4:	20020000 	.word	0x20020000
 80061e8:	20000000 	.word	0x20000000
 80061ec:	20000270 	.word	0x20000270
 80061f0:	0800dc80 	.word	0x0800dc80
 80061f4:	20000270 	.word	0x20000270
 80061f8:	20000878 	.word	0x20000878

080061fc <ADC_IRQHandler>:
 80061fc:	e7fe      	b.n	80061fc <ADC_IRQHandler>
	...

08006200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006204:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <HAL_Init+0x40>)
 800620a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800620e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_Init+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <HAL_Init+0x40>)
 8006216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800621a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <HAL_Init+0x40>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <HAL_Init+0x40>)
 8006222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006228:	2003      	movs	r0, #3
 800622a:	f000 f94f 	bl	80064cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800622e:	2000      	movs	r0, #0
 8006230:	f000 f808 	bl	8006244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006234:	f7ff fd02 	bl	8005c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023c00 	.word	0x40023c00

08006244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <HAL_InitTick+0x54>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <HAL_InitTick+0x58>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	4619      	mov	r1, r3
 8006256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800625a:	fbb3 f3f1 	udiv	r3, r3, r1
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f967 	bl	8006536 <HAL_SYSTICK_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e00e      	b.n	8006290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b0f      	cmp	r3, #15
 8006276:	d80a      	bhi.n	800628e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006278:	2200      	movs	r2, #0
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	f000 f92f 	bl	80064e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006284:	4a06      	ldr	r2, [pc, #24]	; (80062a0 <HAL_InitTick+0x5c>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000200 	.word	0x20000200
 800629c:	20000208 	.word	0x20000208
 80062a0:	20000204 	.word	0x20000204

080062a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_IncTick+0x20>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_IncTick+0x24>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4413      	add	r3, r2
 80062b4:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <HAL_IncTick+0x24>)
 80062b6:	6013      	str	r3, [r2, #0]
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000208 	.word	0x20000208
 80062c8:	20000874 	.word	0x20000874

080062cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return uwTick;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_GetTick+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000874 	.word	0x20000874

080062e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062ec:	f7ff ffee 	bl	80062cc <HAL_GetTick>
 80062f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d005      	beq.n	800630a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <HAL_Delay+0x44>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800630a:	bf00      	nop
 800630c:	f7ff ffde 	bl	80062cc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d8f7      	bhi.n	800630c <HAL_Delay+0x28>
  {
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000208 	.word	0x20000208

0800632c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006348:	4013      	ands	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800635e:	4a04      	ldr	r2, [pc, #16]	; (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	60d3      	str	r3, [r2, #12]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <__NVIC_GetPriorityGrouping+0x18>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 0307 	and.w	r3, r3, #7
}
 8006382:	4618      	mov	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000ed00 	.word	0xe000ed00

08006390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db0b      	blt.n	80063ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	f003 021f 	and.w	r2, r3, #31
 80063a8:	4907      	ldr	r1, [pc, #28]	; (80063c8 <__NVIC_EnableIRQ+0x38>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2001      	movs	r0, #1
 80063b2:	fa00 f202 	lsl.w	r2, r0, r2
 80063b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000e100 	.word	0xe000e100

080063cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	6039      	str	r1, [r7, #0]
 80063d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db0a      	blt.n	80063f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	490c      	ldr	r1, [pc, #48]	; (8006418 <__NVIC_SetPriority+0x4c>)
 80063e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ea:	0112      	lsls	r2, r2, #4
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	440b      	add	r3, r1
 80063f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f4:	e00a      	b.n	800640c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4908      	ldr	r1, [pc, #32]	; (800641c <__NVIC_SetPriority+0x50>)
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	3b04      	subs	r3, #4
 8006404:	0112      	lsls	r2, r2, #4
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	440b      	add	r3, r1
 800640a:	761a      	strb	r2, [r3, #24]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	e000e100 	.word	0xe000e100
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f1c3 0307 	rsb	r3, r3, #7
 800643a:	2b04      	cmp	r3, #4
 800643c:	bf28      	it	cs
 800643e:	2304      	movcs	r3, #4
 8006440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3304      	adds	r3, #4
 8006446:	2b06      	cmp	r3, #6
 8006448:	d902      	bls.n	8006450 <NVIC_EncodePriority+0x30>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3b03      	subs	r3, #3
 800644e:	e000      	b.n	8006452 <NVIC_EncodePriority+0x32>
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43da      	mvns	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	401a      	ands	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006468:	f04f 31ff 	mov.w	r1, #4294967295
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43d9      	mvns	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006478:	4313      	orrs	r3, r2
         );
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	; 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006498:	d301      	bcc.n	800649e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800649a:	2301      	movs	r3, #1
 800649c:	e00f      	b.n	80064be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <SysTick_Config+0x40>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064a6:	210f      	movs	r1, #15
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	f7ff ff8e 	bl	80063cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <SysTick_Config+0x40>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <SysTick_Config+0x40>)
 80064b8:	2207      	movs	r2, #7
 80064ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	e000e010 	.word	0xe000e010

080064cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff29 	bl	800632c <__NVIC_SetPriorityGrouping>
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4603      	mov	r3, r0
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064f4:	f7ff ff3e 	bl	8006374 <__NVIC_GetPriorityGrouping>
 80064f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7ff ff8e 	bl	8006420 <NVIC_EncodePriority>
 8006504:	4602      	mov	r2, r0
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff5d 	bl	80063cc <__NVIC_SetPriority>
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ff31 	bl	8006390 <__NVIC_EnableIRQ>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ffa2 	bl	8006488 <SysTick_Config>
 8006544:	4603      	mov	r3, r0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800655c:	f7ff feb6 	bl	80062cc <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e099      	b.n	80066a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800658c:	e00f      	b.n	80065ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800658e:	f7ff fe9d 	bl	80062cc <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b05      	cmp	r3, #5
 800659a:	d908      	bls.n	80065ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2203      	movs	r2, #3
 80065a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e078      	b.n	80066a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e8      	bne.n	800658e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4b38      	ldr	r3, [pc, #224]	; (80066a8 <HAL_DMA_Init+0x158>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b04      	cmp	r3, #4
 8006606:	d107      	bne.n	8006618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	4313      	orrs	r3, r2
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b04      	cmp	r3, #4
 8006640:	d117      	bne.n	8006672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb0f 	bl	8006c78 <DMA_CheckFifoParam>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800666e:	2301      	movs	r3, #1
 8006670:	e016      	b.n	80066a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fac6 	bl	8006c0c <DMA_CalcBaseAndBitshift>
 8006680:	4603      	mov	r3, r0
 8006682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	223f      	movs	r2, #63	; 0x3f
 800668a:	409a      	lsls	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	f010803f 	.word	0xf010803f

080066ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_DMA_Start_IT+0x26>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e040      	b.n	8006754 <HAL_DMA_Start_IT+0xa8>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d12f      	bne.n	8006746 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fa58 	bl	8006bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	223f      	movs	r2, #63	; 0x3f
 8006706:	409a      	lsls	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0216 	orr.w	r2, r2, #22
 800671a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0208 	orr.w	r2, r2, #8
 8006732:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e005      	b.n	8006752 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800674e:	2302      	movs	r3, #2
 8006750:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006768:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800676a:	f7ff fdaf 	bl	80062cc <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d008      	beq.n	800678e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e052      	b.n	8006834 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0216 	bic.w	r2, r2, #22
 800679c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <HAL_DMA_Abort+0x62>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0208 	bic.w	r2, r2, #8
 80067cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067de:	e013      	b.n	8006808 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067e0:	f7ff fd74 	bl	80062cc <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	d90c      	bls.n	8006808 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2203      	movs	r2, #3
 80067f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e015      	b.n	8006834 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e4      	bne.n	80067e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	223f      	movs	r2, #63	; 0x3f
 800681c:	409a      	lsls	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d004      	beq.n	800685a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2280      	movs	r2, #128	; 0x80
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e00c      	b.n	8006874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2205      	movs	r2, #5
 800685e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0201 	bic.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800688c:	4b8e      	ldr	r3, [pc, #568]	; (8006ac8 <HAL_DMA_IRQHandler+0x248>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a8e      	ldr	r2, [pc, #568]	; (8006acc <HAL_DMA_IRQHandler+0x24c>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	0a9b      	lsrs	r3, r3, #10
 8006898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068aa:	2208      	movs	r2, #8
 80068ac:	409a      	lsls	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d013      	beq.n	80068ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d8:	2208      	movs	r2, #8
 80068da:	409a      	lsls	r2, r3
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f043 0201 	orr.w	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d012      	beq.n	8006922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	2201      	movs	r2, #1
 8006910:	409a      	lsls	r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	f043 0202 	orr.w	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	2204      	movs	r2, #4
 8006928:	409a      	lsls	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4013      	ands	r3, r2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d012      	beq.n	8006958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	2204      	movs	r2, #4
 8006946:	409a      	lsls	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	f043 0204 	orr.w	r2, r3, #4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	2210      	movs	r2, #16
 800695e:	409a      	lsls	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4013      	ands	r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d043      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d03c      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	2210      	movs	r2, #16
 800697c:	409a      	lsls	r2, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d018      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d024      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
 80069ae:	e01f      	b.n	80069f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
 80069c0:	e016      	b.n	80069f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d107      	bne.n	80069e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0208 	bic.w	r2, r2, #8
 80069de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f4:	2220      	movs	r2, #32
 80069f6:	409a      	lsls	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 808f 	beq.w	8006b20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8087 	beq.w	8006b20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	2220      	movs	r2, #32
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d136      	bne.n	8006a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0216 	bic.w	r2, r2, #22
 8006a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_DMA_IRQHandler+0x1da>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0208 	bic.w	r2, r2, #8
 8006a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6e:	223f      	movs	r2, #63	; 0x3f
 8006a70:	409a      	lsls	r2, r3
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d07e      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
        }
        return;
 8006a96:	e079      	b.n	8006b8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d031      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	e02c      	b.n	8006b20 <HAL_DMA_IRQHandler+0x2a0>
 8006ac6:	bf00      	nop
 8006ac8:	20000200 	.word	0x20000200
 8006acc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d023      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	e01e      	b.n	8006b20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10f      	bne.n	8006b10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0210 	bic.w	r2, r2, #16
 8006afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d032      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2205      	movs	r2, #5
 8006b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0201 	bic.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d307      	bcc.n	8006b68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f2      	bne.n	8006b4c <HAL_DMA_IRQHandler+0x2cc>
 8006b66:	e000      	b.n	8006b6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006b8c:	bf00      	nop
    }
  }
}
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ba2:	b2db      	uxtb	r3, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d108      	bne.n	8006bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006bee:	e007      	b.n	8006c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	3b10      	subs	r3, #16
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <DMA_CalcBaseAndBitshift+0x64>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c26:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <DMA_CalcBaseAndBitshift+0x68>)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d909      	bls.n	8006c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c4c:	e007      	b.n	8006c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	aaaaaaab 	.word	0xaaaaaaab
 8006c74:	0800dc38 	.word	0x0800dc38

08006c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11f      	bne.n	8006cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d856      	bhi.n	8006d46 <DMA_CheckFifoParam+0xce>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <DMA_CheckFifoParam+0x28>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc3 	.word	0x08006cc3
 8006ca8:	08006cb1 	.word	0x08006cb1
 8006cac:	08006d47 	.word	0x08006d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d046      	beq.n	8006d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc0:	e043      	b.n	8006d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cca:	d140      	bne.n	8006d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd0:	e03d      	b.n	8006d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cda:	d121      	bne.n	8006d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d837      	bhi.n	8006d52 <DMA_CheckFifoParam+0xda>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <DMA_CheckFifoParam+0x70>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006cff 	.word	0x08006cff
 8006cf0:	08006cf9 	.word	0x08006cf9
 8006cf4:	08006d11 	.word	0x08006d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e030      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d025      	beq.n	8006d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d0e:	e022      	b.n	8006d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d18:	d11f      	bne.n	8006d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d1e:	e01c      	b.n	8006d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d903      	bls.n	8006d2e <DMA_CheckFifoParam+0xb6>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d003      	beq.n	8006d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d2c:	e018      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	73fb      	strb	r3, [r7, #15]
      break;
 8006d32:	e015      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e00b      	b.n	8006d5e <DMA_CheckFifoParam+0xe6>
      break;
 8006d46:	bf00      	nop
 8006d48:	e00a      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e008      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4e:	bf00      	nop
 8006d50:	e006      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;
 8006d52:	bf00      	nop
 8006d54:	e004      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <DMA_CheckFifoParam+0xe8>
      break;
 8006d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	; 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e159      	b.n	8007040 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	f040 8148 	bne.w	800703a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d005      	beq.n	8006dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d130      	bne.n	8006e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	2203      	movs	r2, #3
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006df8:	2201      	movs	r2, #1
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	43db      	mvns	r3, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 0201 	and.w	r2, r3, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d017      	beq.n	8006e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	43db      	mvns	r3, r3
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4013      	ands	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d123      	bne.n	8006eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	08da      	lsrs	r2, r3, #3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3208      	adds	r2, #8
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	220f      	movs	r2, #15
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	08da      	lsrs	r2, r3, #3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3208      	adds	r2, #8
 8006eae:	69b9      	ldr	r1, [r7, #24]
 8006eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 0203 	and.w	r2, r3, #3
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80a2 	beq.w	800703a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b57      	ldr	r3, [pc, #348]	; (8007058 <HAL_GPIO_Init+0x2e8>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	4a56      	ldr	r2, [pc, #344]	; (8007058 <HAL_GPIO_Init+0x2e8>)
 8006f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f04:	6453      	str	r3, [r2, #68]	; 0x44
 8006f06:	4b54      	ldr	r3, [pc, #336]	; (8007058 <HAL_GPIO_Init+0x2e8>)
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f12:	4a52      	ldr	r2, [pc, #328]	; (800705c <HAL_GPIO_Init+0x2ec>)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	089b      	lsrs	r3, r3, #2
 8006f18:	3302      	adds	r3, #2
 8006f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	220f      	movs	r2, #15
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4013      	ands	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a49      	ldr	r2, [pc, #292]	; (8007060 <HAL_GPIO_Init+0x2f0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d019      	beq.n	8006f72 <HAL_GPIO_Init+0x202>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a48      	ldr	r2, [pc, #288]	; (8007064 <HAL_GPIO_Init+0x2f4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <HAL_GPIO_Init+0x1fe>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a47      	ldr	r2, [pc, #284]	; (8007068 <HAL_GPIO_Init+0x2f8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00d      	beq.n	8006f6a <HAL_GPIO_Init+0x1fa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a46      	ldr	r2, [pc, #280]	; (800706c <HAL_GPIO_Init+0x2fc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <HAL_GPIO_Init+0x1f6>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a45      	ldr	r2, [pc, #276]	; (8007070 <HAL_GPIO_Init+0x300>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d101      	bne.n	8006f62 <HAL_GPIO_Init+0x1f2>
 8006f5e:	2304      	movs	r3, #4
 8006f60:	e008      	b.n	8006f74 <HAL_GPIO_Init+0x204>
 8006f62:	2307      	movs	r3, #7
 8006f64:	e006      	b.n	8006f74 <HAL_GPIO_Init+0x204>
 8006f66:	2303      	movs	r3, #3
 8006f68:	e004      	b.n	8006f74 <HAL_GPIO_Init+0x204>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e002      	b.n	8006f74 <HAL_GPIO_Init+0x204>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <HAL_GPIO_Init+0x204>
 8006f72:	2300      	movs	r3, #0
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	f002 0203 	and.w	r2, r2, #3
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	4093      	lsls	r3, r2
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f84:	4935      	ldr	r1, [pc, #212]	; (800705c <HAL_GPIO_Init+0x2ec>)
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	3302      	adds	r3, #2
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f92:	4b38      	ldr	r3, [pc, #224]	; (8007074 <HAL_GPIO_Init+0x304>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fb6:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <HAL_GPIO_Init+0x304>)
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_GPIO_Init+0x304>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <HAL_GPIO_Init+0x304>)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006fe6:	4b23      	ldr	r3, [pc, #140]	; (8007074 <HAL_GPIO_Init+0x304>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	43db      	mvns	r3, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_GPIO_Init+0x304>)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <HAL_GPIO_Init+0x304>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	43db      	mvns	r3, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4013      	ands	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007034:	4a0f      	ldr	r2, [pc, #60]	; (8007074 <HAL_GPIO_Init+0x304>)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	3301      	adds	r3, #1
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	f67f aea2 	bls.w	8006d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	3724      	adds	r7, #36	; 0x24
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800
 800705c:	40013800 	.word	0x40013800
 8007060:	40020000 	.word	0x40020000
 8007064:	40020400 	.word	0x40020400
 8007068:	40020800 	.word	0x40020800
 800706c:	40020c00 	.word	0x40020c00
 8007070:	40021000 	.word	0x40021000
 8007074:	40013c00 	.word	0x40013c00

08007078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	887b      	ldrh	r3, [r7, #2]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	e001      	b.n	800709a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	807b      	strh	r3, [r7, #2]
 80070b4:	4613      	mov	r3, r2
 80070b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070b8:	787b      	ldrb	r3, [r7, #1]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070c4:	e003      	b.n	80070ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070c6:	887b      	ldrh	r3, [r7, #2]
 80070c8:	041a      	lsls	r2, r3, #16
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	619a      	str	r2, [r3, #24]
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070ec:	887a      	ldrh	r2, [r7, #2]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4013      	ands	r3, r2
 80070f2:	041a      	lsls	r2, r3, #16
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	43d9      	mvns	r1, r3
 80070f8:	887b      	ldrh	r3, [r7, #2]
 80070fa:	400b      	ands	r3, r1
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	619a      	str	r2, [r3, #24]
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800711a:	4b08      	ldr	r3, [pc, #32]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800711c:	695a      	ldr	r2, [r3, #20]
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	4013      	ands	r3, r2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d006      	beq.n	8007134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007126:	4a05      	ldr	r2, [pc, #20]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa fcfe 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40013c00 	.word	0x40013c00

08007140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e12b      	b.n	80073aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fe fd90 	bl	8005c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	; 0x24
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071a4:	f002 ff26 	bl	8009ff4 <HAL_RCC_GetPCLK1Freq>
 80071a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4a81      	ldr	r2, [pc, #516]	; (80073b4 <HAL_I2C_Init+0x274>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d807      	bhi.n	80071c4 <HAL_I2C_Init+0x84>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a80      	ldr	r2, [pc, #512]	; (80073b8 <HAL_I2C_Init+0x278>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e006      	b.n	80071d2 <HAL_I2C_Init+0x92>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a7d      	ldr	r2, [pc, #500]	; (80073bc <HAL_I2C_Init+0x27c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf94      	ite	ls
 80071cc:	2301      	movls	r3, #1
 80071ce:	2300      	movhi	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e0e7      	b.n	80073aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a78      	ldr	r2, [pc, #480]	; (80073c0 <HAL_I2C_Init+0x280>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	0c9b      	lsrs	r3, r3, #18
 80071e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a6a      	ldr	r2, [pc, #424]	; (80073b4 <HAL_I2C_Init+0x274>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d802      	bhi.n	8007214 <HAL_I2C_Init+0xd4>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3301      	adds	r3, #1
 8007212:	e009      	b.n	8007228 <HAL_I2C_Init+0xe8>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	4a69      	ldr	r2, [pc, #420]	; (80073c4 <HAL_I2C_Init+0x284>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	099b      	lsrs	r3, r3, #6
 8007226:	3301      	adds	r3, #1
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	430b      	orrs	r3, r1
 800722e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800723a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	495c      	ldr	r1, [pc, #368]	; (80073b4 <HAL_I2C_Init+0x274>)
 8007244:	428b      	cmp	r3, r1
 8007246:	d819      	bhi.n	800727c <HAL_I2C_Init+0x13c>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1e59      	subs	r1, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	fbb1 f3f3 	udiv	r3, r1, r3
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800725c:	400b      	ands	r3, r1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_I2C_Init+0x138>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1e59      	subs	r1, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007270:	3301      	adds	r3, #1
 8007272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007276:	e051      	b.n	800731c <HAL_I2C_Init+0x1dc>
 8007278:	2304      	movs	r3, #4
 800727a:	e04f      	b.n	800731c <HAL_I2C_Init+0x1dc>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d111      	bne.n	80072a8 <HAL_I2C_Init+0x168>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1e58      	subs	r0, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6859      	ldr	r1, [r3, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	440b      	add	r3, r1
 8007292:	fbb0 f3f3 	udiv	r3, r0, r3
 8007296:	3301      	adds	r3, #1
 8007298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e012      	b.n	80072ce <HAL_I2C_Init+0x18e>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1e58      	subs	r0, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6859      	ldr	r1, [r3, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	0099      	lsls	r1, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80072be:	3301      	adds	r3, #1
 80072c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_Init+0x196>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e022      	b.n	800731c <HAL_I2C_Init+0x1dc>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10e      	bne.n	80072fc <HAL_I2C_Init+0x1bc>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1e58      	subs	r0, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	440b      	add	r3, r1
 80072ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fa:	e00f      	b.n	800731c <HAL_I2C_Init+0x1dc>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	1e58      	subs	r0, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6859      	ldr	r1, [r3, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	0099      	lsls	r1, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007312:	3301      	adds	r3, #1
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	6809      	ldr	r1, [r1, #0]
 8007320:	4313      	orrs	r3, r2
 8007322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69da      	ldr	r2, [r3, #28]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800734a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6911      	ldr	r1, [r2, #16]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68d2      	ldr	r2, [r2, #12]
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	430b      	orrs	r3, r1
 800735e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	000186a0 	.word	0x000186a0
 80073b8:	001e847f 	.word	0x001e847f
 80073bc:	003d08ff 	.word	0x003d08ff
 80073c0:	431bde83 	.word	0x431bde83
 80073c4:	10624dd3 	.word	0x10624dd3

080073c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	461a      	mov	r2, r3
 80073d4:	460b      	mov	r3, r1
 80073d6:	817b      	strh	r3, [r7, #10]
 80073d8:	4613      	mov	r3, r2
 80073da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073dc:	f7fe ff76 	bl	80062cc <HAL_GetTick>
 80073e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	f040 80e0 	bne.w	80075b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2319      	movs	r3, #25
 80073f6:	2201      	movs	r2, #1
 80073f8:	4970      	ldr	r1, [pc, #448]	; (80075bc <HAL_I2C_Master_Transmit+0x1f4>)
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f001 ffb6 	bl	800936c <I2C_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
 8007408:	e0d3      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_I2C_Master_Transmit+0x50>
 8007414:	2302      	movs	r3, #2
 8007416:	e0cc      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d007      	beq.n	800743e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800744c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2210      	movs	r2, #16
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	893a      	ldrh	r2, [r7, #8]
 800746e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a50      	ldr	r2, [pc, #320]	; (80075c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007480:	8979      	ldrh	r1, [r7, #10]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 fe46 	bl	8009118 <I2C_MasterRequestWrite>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e08d      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074ac:	e066      	b.n	800757c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	6a39      	ldr	r1, [r7, #32]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f002 f830 	bl	8009518 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d107      	bne.n	80074d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e06b      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b04      	cmp	r3, #4
 8007516:	d11b      	bne.n	8007550 <HAL_I2C_Master_Transmit+0x188>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	6a39      	ldr	r1, [r7, #32]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f002 f820 	bl	800959a <I2C_WaitOnBTFFlagUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00d      	beq.n	800757c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2b04      	cmp	r3, #4
 8007566:	d107      	bne.n	8007578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e01a      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d194      	bne.n	80074ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e000      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	00100002 	.word	0x00100002
 80075c0:	ffff0000 	.word	0xffff0000

080075c4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	461a      	mov	r2, r3
 80075d0:	460b      	mov	r3, r1
 80075d2:	817b      	strh	r3, [r7, #10]
 80075d4:	4613      	mov	r3, r2
 80075d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	f040 80a6 	bne.w	800773a <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fc:	d005      	beq.n	800760a <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d002      	beq.n	800760a <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d130      	bne.n	800766c <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800760a:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	08db      	lsrs	r3, r3, #3
 8007610:	4a4e      	ldr	r2, [pc, #312]	; (800774c <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	0a1a      	lsrs	r2, r3, #8
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009a      	lsls	r2, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d116      	bne.n	800765e <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f043 0220 	orr.w	r2, r3, #32
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e06e      	b.n	800773c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d0db      	beq.n	8007624 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8007676:	2302      	movs	r3, #2
 8007678:	e060      	b.n	800773c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d007      	beq.n	80076a0 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2221      	movs	r2, #33	; 0x21
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2210      	movs	r2, #16
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	893a      	ldrh	r2, [r7, #8]
 80076d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80076e2:	897a      	ldrh	r2, [r7, #10]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b11      	cmp	r3, #17
 80076f2:	d10c      	bne.n	800770e <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076fa:	d003      	beq.n	8007704 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007702:	d101      	bne.n	8007708 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8007708:	2300      	movs	r3, #0
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800771c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007734:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	e000      	b.n	800773c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800773a:	2302      	movs	r3, #2
  }
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000200 	.word	0x20000200
 800774c:	14f8b589 	.word	0x14f8b589

08007750 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007750:	b480      	push	{r7}
 8007752:	b089      	sub	sp, #36	; 0x24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	461a      	mov	r2, r3
 800775c:	460b      	mov	r3, r1
 800775e:	817b      	strh	r3, [r7, #10]
 8007760:	4613      	mov	r3, r2
 8007762:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800776c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007770:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b20      	cmp	r3, #32
 800777c:	f040 80da 	bne.w	8007934 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800778a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778e:	d005      	beq.n	800779c <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b08      	cmp	r3, #8
 8007794:	d002      	beq.n	800779c <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	2b01      	cmp	r3, #1
 800779a:	d130      	bne.n	80077fe <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800779c:	4b69      	ldr	r3, [pc, #420]	; (8007944 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	08db      	lsrs	r3, r3, #3
 80077a2:	4a69      	ldr	r2, [pc, #420]	; (8007948 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	0a1a      	lsrs	r2, r3, #8
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009a      	lsls	r2, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d116      	bne.n	80077f0 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	f043 0220 	orr.w	r2, r3, #32
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0a2      	b.n	8007936 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d0db      	beq.n	80077b6 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8007808:	2302      	movs	r3, #2
 800780a:	e094      	b.n	8007936 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d007      	beq.n	8007832 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007840:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2222      	movs	r2, #34	; 0x22
 8007846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2210      	movs	r2, #16
 800784e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	893a      	ldrh	r2, [r7, #8]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007874:	897a      	ldrh	r2, [r7, #10]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d126      	bne.n	80078d8 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2b20      	cmp	r3, #32
 800788e:	d002      	beq.n	8007896 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	2b10      	cmp	r3, #16
 8007894:	d120      	bne.n	80078d8 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b12      	cmp	r3, #18
 800789a:	d114      	bne.n	80078c6 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078aa:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ba:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078c2:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80078c4:	e010      	b.n	80078e8 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d4:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80078d6:	e007      	b.n	80078e8 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078e6:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b12      	cmp	r3, #18
 80078ec:	d10c      	bne.n	8007908 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80078f4:	d003      	beq.n	80078fe <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80078fc:	d101      	bne.n	8007902 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8007902:	2300      	movs	r3, #0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d107      	bne.n	8007918 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007916:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6859      	ldr	r1, [r3, #4]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3724      	adds	r7, #36	; 0x24
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000200 	.word	0x20000200
 8007948:	14f8b589 	.word	0x14f8b589

0800794c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b10      	cmp	r3, #16
 800797a:	d003      	beq.n	8007984 <HAL_I2C_EV_IRQHandler+0x38>
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b40      	cmp	r3, #64	; 0x40
 8007980:	f040 80c1 	bne.w	8007b06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10d      	bne.n	80079ba <HAL_I2C_EV_IRQHandler+0x6e>
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079a4:	d003      	beq.n	80079ae <HAL_I2C_EV_IRQHandler+0x62>
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079ac:	d101      	bne.n	80079b2 <HAL_I2C_EV_IRQHandler+0x66>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x68>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	f000 8132 	beq.w	8007c1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00c      	beq.n	80079de <HAL_I2C_EV_IRQHandler+0x92>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	0a5b      	lsrs	r3, r3, #9
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d006      	beq.n	80079de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 fe84 	bl	80096de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fd83 	bl	80084e2 <I2C_Master_SB>
 80079dc:	e092      	b.n	8007b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	08db      	lsrs	r3, r3, #3
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <HAL_I2C_EV_IRQHandler+0xb2>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fdf9 	bl	80085ee <I2C_Master_ADD10>
 80079fc:	e082      	b.n	8007b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <HAL_I2C_EV_IRQHandler+0xd2>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	0a5b      	lsrs	r3, r3, #9
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fe13 	bl	8008642 <I2C_Master_ADDR>
 8007a1c:	e072      	b.n	8007b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03b      	beq.n	8007aa2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a38:	f000 80f3 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	09db      	lsrs	r3, r3, #7
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00f      	beq.n	8007a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	0a9b      	lsrs	r3, r3, #10
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d009      	beq.n	8007a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	089b      	lsrs	r3, r3, #2
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f9f3 	bl	8007e4c <I2C_MasterTransmit_TXE>
 8007a66:	e04d      	b.n	8007b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80d6 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	0a5b      	lsrs	r3, r3, #9
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80cf 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b21      	cmp	r3, #33	; 0x21
 8007a88:	d103      	bne.n	8007a92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa7a 	bl	8007f84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a90:	e0c7      	b.n	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	f040 80c4 	bne.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fae8 	bl	8008070 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007aa0:	e0bf      	b.n	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab0:	f000 80b7 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00f      	beq.n	8007ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	0a9b      	lsrs	r3, r3, #10
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb5d 	bl	8008198 <I2C_MasterReceive_RXNE>
 8007ade:	e011      	b.n	8007b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 809a 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	0a5b      	lsrs	r3, r3, #9
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8093 	beq.w	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc06 	bl	800830e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b02:	e08e      	b.n	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007b04:	e08d      	b.n	8007c22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	e007      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d012      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x20e>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	0a5b      	lsrs	r3, r3, #9
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007b50:	69b9      	ldr	r1, [r7, #24]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 ffc4 	bl	8008ae0 <I2C_Slave_ADDR>
 8007b58:	e066      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_I2C_EV_IRQHandler+0x22e>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fffe 	bl	8008b74 <I2C_Slave_STOPF>
 8007b78:	e056      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b21      	cmp	r3, #33	; 0x21
 8007b7e:	d002      	beq.n	8007b86 <HAL_I2C_EV_IRQHandler+0x23a>
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b29      	cmp	r3, #41	; 0x29
 8007b84:	d125      	bne.n	8007bd2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	09db      	lsrs	r3, r3, #7
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00f      	beq.n	8007bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	0a9b      	lsrs	r3, r3, #10
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	089b      	lsrs	r3, r3, #2
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 feda 	bl	8008964 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bb0:	e039      	b.n	8007c26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	089b      	lsrs	r3, r3, #2
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d033      	beq.n	8007c26 <HAL_I2C_EV_IRQHandler+0x2da>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02d      	beq.n	8007c26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 ff07 	bl	80089de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bd0:	e029      	b.n	8007c26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	099b      	lsrs	r3, r3, #6
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00f      	beq.n	8007bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	0a9b      	lsrs	r3, r3, #10
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	089b      	lsrs	r3, r3, #2
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 ff12 	bl	8008a20 <I2C_SlaveReceive_RXNE>
 8007bfc:	e014      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	089b      	lsrs	r3, r3, #2
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 ff40 	bl	8008a9c <I2C_SlaveReceive_BTF>
 8007c1c:	e004      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007c1e:	bf00      	nop
 8007c20:	e002      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b08a      	sub	sp, #40	; 0x28
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	0a1b      	lsrs	r3, r3, #8
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <HAL_I2C_ER_IRQHandler+0x4e>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	0a1b      	lsrs	r3, r3, #8
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	0a5b      	lsrs	r3, r3, #9
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <HAL_I2C_ER_IRQHandler+0x78>
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007ca4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	0a9b      	lsrs	r3, r3, #10
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d03f      	beq.n	8007d32 <HAL_I2C_ER_IRQHandler+0x104>
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d039      	beq.n	8007d32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007cbe:	7efb      	ldrb	r3, [r7, #27]
 8007cc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007cd8:	7ebb      	ldrb	r3, [r7, #26]
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d112      	bne.n	8007d04 <HAL_I2C_ER_IRQHandler+0xd6>
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <HAL_I2C_ER_IRQHandler+0xd6>
 8007ce4:	7cfb      	ldrb	r3, [r7, #19]
 8007ce6:	2b21      	cmp	r3, #33	; 0x21
 8007ce8:	d008      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	2b29      	cmp	r3, #41	; 0x29
 8007cee:	d005      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0xce>
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
 8007cf2:	2b28      	cmp	r3, #40	; 0x28
 8007cf4:	d106      	bne.n	8007d04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b21      	cmp	r3, #33	; 0x21
 8007cfa:	d103      	bne.n	8007d04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f869 	bl	8008dd4 <I2C_Slave_AF>
 8007d02:	e016      	b.n	8007d32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	f043 0304 	orr.w	r3, r3, #4
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007d16:	7efb      	ldrb	r3, [r7, #27]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d002      	beq.n	8007d22 <HAL_I2C_ER_IRQHandler+0xf4>
 8007d1c:	7efb      	ldrb	r3, [r7, #27]
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d107      	bne.n	8007d32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	0adb      	lsrs	r3, r3, #11
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <HAL_I2C_ER_IRQHandler+0x12e>
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	0a1b      	lsrs	r3, r3, #8
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007d5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 f8a0 	bl	8008eb4 <I2C_ITError>
  }
}
 8007d74:	bf00      	nop
 8007d76:	3728      	adds	r7, #40	; 0x28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d150      	bne.n	8007f14 <I2C_MasterTransmit_TXE+0xc8>
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	2b21      	cmp	r3, #33	; 0x21
 8007e76:	d14d      	bne.n	8007f14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d01d      	beq.n	8007eba <I2C_MasterTransmit_TXE+0x6e>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d01a      	beq.n	8007eba <I2C_MasterTransmit_TXE+0x6e>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e8a:	d016      	beq.n	8007eba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2211      	movs	r2, #17
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff ff62 	bl	8007d7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007eb8:	e060      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ec8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d107      	bne.n	8007f04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff ff7d 	bl	8007dfc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f02:	e03b      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff35 	bl	8007d7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f12:	e033      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b21      	cmp	r3, #33	; 0x21
 8007f18:	d005      	beq.n	8007f26 <I2C_MasterTransmit_TXE+0xda>
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b40      	cmp	r3, #64	; 0x40
 8007f1e:	d12d      	bne.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b22      	cmp	r3, #34	; 0x22
 8007f24:	d12a      	bne.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d108      	bne.n	8007f42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007f40:	e01c      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d103      	bne.n	8007f56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f88e 	bl	8008070 <I2C_MemoryTransmit_TXE_BTF>
}
 8007f54:	e012      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f7a:	e7ff      	b.n	8007f7c <I2C_MasterTransmit_TXE+0x130>
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b21      	cmp	r3, #33	; 0x21
 8007f9c:	d164      	bne.n	8008068 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d012      	beq.n	8007fce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007fcc:	e04c      	b.n	8008068 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d01d      	beq.n	8008010 <I2C_MasterTransmit_BTF+0x8c>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d01a      	beq.n	8008010 <I2C_MasterTransmit_BTF+0x8c>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fe0:	d016      	beq.n	8008010 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ff0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2211      	movs	r2, #17
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff feb7 	bl	8007d7c <HAL_I2C_MasterTxCpltCallback>
}
 800800e:	e02b      	b.n	8008068 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800801e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d107      	bne.n	800805a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff fed2 	bl	8007dfc <HAL_I2C_MemTxCpltCallback>
}
 8008058:	e006      	b.n	8008068 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fe8a 	bl	8007d7c <HAL_I2C_MasterTxCpltCallback>
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11d      	bne.n	80080c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10b      	bne.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008094:	b2da      	uxtb	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a0:	1c9a      	adds	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80080a6:	e073      	b.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	121b      	asrs	r3, r3, #8
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080c2:	e065      	b.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10b      	bne.n	80080e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080e2:	e055      	b.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d151      	bne.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b22      	cmp	r3, #34	; 0x22
 80080f0:	d10d      	bne.n	800810e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008100:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800810c:	e040      	b.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d015      	beq.n	8008144 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b21      	cmp	r3, #33	; 0x21
 800811c:	d112      	bne.n	8008144 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008142:	e025      	b.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d120      	bne.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	2b21      	cmp	r3, #33	; 0x21
 8008152:	d11d      	bne.n	8008190 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008162:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fe36 	bl	8007dfc <HAL_I2C_MemTxCpltCallback>
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b22      	cmp	r3, #34	; 0x22
 80081aa:	f040 80ac 	bne.w	8008306 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d921      	bls.n	8008200 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	b29a      	uxth	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	f040 808c 	bne.w	8008306 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80081fe:	e082      	b.n	8008306 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	2b02      	cmp	r3, #2
 8008206:	d075      	beq.n	80082f4 <I2C_MasterReceive_RXNE+0x15c>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d002      	beq.n	8008214 <I2C_MasterReceive_RXNE+0x7c>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d16f      	bne.n	80082f4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa01 	bl	800961c <I2C_WaitOnSTOPRequestThroughIT>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d142      	bne.n	80082a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800823e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d10a      	bne.n	8008290 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fdc1 	bl	8007e10 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800828e:	e03a      	b.n	8008306 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2212      	movs	r2, #18
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fd76 	bl	8007d90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80082a4:	e02f      	b.n	8008306 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fd99 	bl	8007e24 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80082f2:	e008      	b.n	8008306 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008302:	605a      	str	r2, [r3, #4]
}
 8008304:	e7ff      	b.n	8008306 <I2C_MasterReceive_RXNE+0x16e>
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b04      	cmp	r3, #4
 8008324:	d11b      	bne.n	800835e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008334:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	b2d2      	uxtb	r2, r2
 8008342:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800835c:	e0bd      	b.n	80084da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d129      	bne.n	80083bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008376:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d00a      	beq.n	8008394 <I2C_MasterReceive_BTF+0x86>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d007      	beq.n	8008394 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008392:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80083ba:	e08e      	b.n	80084da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d176      	bne.n	80084b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d002      	beq.n	80083d2 <I2C_MasterReceive_BTF+0xc4>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d108      	bne.n	80083e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	e019      	b.n	8008418 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d002      	beq.n	80083f0 <I2C_MasterReceive_BTF+0xe2>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d108      	bne.n	8008402 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e00a      	b.n	8008418 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b10      	cmp	r3, #16
 8008406:	d007      	beq.n	8008418 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008416:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008472:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d10a      	bne.n	800849e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fcba 	bl	8007e10 <HAL_I2C_MemRxCpltCallback>
}
 800849c:	e01d      	b.n	80084da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2212      	movs	r2, #18
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fc6f 	bl	8007d90 <HAL_I2C_MasterRxCpltCallback>
}
 80084b2:	e012      	b.n	80084da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d117      	bne.n	8008526 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800850e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008510:	e067      	b.n	80085e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	611a      	str	r2, [r3, #16]
}
 8008524:	e05d      	b.n	80085e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800852e:	d133      	bne.n	8008598 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b21      	cmp	r3, #33	; 0x21
 800853a:	d109      	bne.n	8008550 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800854c:	611a      	str	r2, [r3, #16]
 800854e:	e008      	b.n	8008562 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <I2C_Master_SB+0x92>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d108      	bne.n	8008586 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	2b00      	cmp	r3, #0
 800857a:	d032      	beq.n	80085e2 <I2C_Master_SB+0x100>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d02d      	beq.n	80085e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008594:	605a      	str	r2, [r3, #4]
}
 8008596:	e024      	b.n	80085e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10e      	bne.n	80085be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	11db      	asrs	r3, r3, #7
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0306 	and.w	r3, r3, #6
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f063 030f 	orn	r3, r3, #15
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	611a      	str	r2, [r3, #16]
}
 80085bc:	e011      	b.n	80085e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d10d      	bne.n	80085e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	11db      	asrs	r3, r3, #7
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0306 	and.w	r3, r3, #6
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f063 030e 	orn	r3, r3, #14
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	611a      	str	r2, [r3, #16]
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <I2C_Master_ADD10+0x26>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d108      	bne.n	8008626 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00c      	beq.n	8008636 <I2C_Master_ADD10+0x48>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008634:	605a      	str	r2, [r3, #4]
  }
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008642:	b480      	push	{r7}
 8008644:	b091      	sub	sp, #68	; 0x44
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b22      	cmp	r3, #34	; 0x22
 800866a:	f040 8169 	bne.w	8008940 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10f      	bne.n	8008696 <I2C_Master_ADDR+0x54>
 8008676:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d10b      	bne.n	8008696 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800867e:	2300      	movs	r3, #0
 8008680:	633b      	str	r3, [r7, #48]	; 0x30
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	633b      	str	r3, [r7, #48]	; 0x30
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	633b      	str	r3, [r7, #48]	; 0x30
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	e160      	b.n	8008958 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d11d      	bne.n	80086da <I2C_Master_ADDR+0x98>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086a6:	d118      	bne.n	80086da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a8:	2300      	movs	r3, #0
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	651a      	str	r2, [r3, #80]	; 0x50
 80086d8:	e13e      	b.n	8008958 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d113      	bne.n	800870c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e4:	2300      	movs	r3, #0
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e115      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b01      	cmp	r3, #1
 8008714:	f040 808a 	bne.w	800882c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800871e:	d137      	bne.n	8008790 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800873a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873e:	d113      	bne.n	8008768 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008750:	2300      	movs	r3, #0
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	e0e7      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008768:	2300      	movs	r3, #0
 800876a:	623b      	str	r3, [r7, #32]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	623b      	str	r3, [r7, #32]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e0d3      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	2b08      	cmp	r3, #8
 8008794:	d02e      	beq.n	80087f4 <I2C_Master_ADDR+0x1b2>
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b20      	cmp	r3, #32
 800879a:	d02b      	beq.n	80087f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	2b12      	cmp	r3, #18
 80087a0:	d102      	bne.n	80087a8 <I2C_Master_ADDR+0x166>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d125      	bne.n	80087f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d00e      	beq.n	80087cc <I2C_Master_ADDR+0x18a>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d00b      	beq.n	80087cc <I2C_Master_ADDR+0x18a>
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	2b10      	cmp	r3, #16
 80087b8:	d008      	beq.n	80087cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	e007      	b.n	80087dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087dc:	2300      	movs	r3, #0
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	e0a1      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008802:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e085      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d14d      	bne.n	80088d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	2b04      	cmp	r3, #4
 800883a:	d016      	beq.n	800886a <I2C_Master_ADDR+0x228>
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	2b02      	cmp	r3, #2
 8008840:	d013      	beq.n	800886a <I2C_Master_ADDR+0x228>
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b10      	cmp	r3, #16
 8008846:	d010      	beq.n	800886a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008856:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e007      	b.n	800887a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008878:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008888:	d117      	bne.n	80088ba <I2C_Master_ADDR+0x278>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008890:	d00b      	beq.n	80088aa <I2C_Master_ADDR+0x268>
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	2b01      	cmp	r3, #1
 8008896:	d008      	beq.n	80088aa <I2C_Master_ADDR+0x268>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	2b08      	cmp	r3, #8
 800889c:	d005      	beq.n	80088aa <I2C_Master_ADDR+0x268>
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d002      	beq.n	80088aa <I2C_Master_ADDR+0x268>
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d107      	bne.n	80088ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	e032      	b.n	8008938 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f0:	d117      	bne.n	8008922 <I2C_Master_ADDR+0x2e0>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088f8:	d00b      	beq.n	8008912 <I2C_Master_ADDR+0x2d0>
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d008      	beq.n	8008912 <I2C_Master_ADDR+0x2d0>
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b08      	cmp	r3, #8
 8008904:	d005      	beq.n	8008912 <I2C_Master_ADDR+0x2d0>
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	2b10      	cmp	r3, #16
 800890a:	d002      	beq.n	8008912 <I2C_Master_ADDR+0x2d0>
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	2b20      	cmp	r3, #32
 8008910:	d107      	bne.n	8008922 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008920:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800893e:	e00b      	b.n	8008958 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	e7ff      	b.n	8008958 <I2C_Master_ADDR+0x316>
 8008958:	bf00      	nop
 800895a:	3744      	adds	r7, #68	; 0x44
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008972:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d02b      	beq.n	80089d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d114      	bne.n	80089d6 <I2C_SlaveTransmit_TXE+0x72>
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	2b29      	cmp	r3, #41	; 0x29
 80089b0:	d111      	bne.n	80089d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2221      	movs	r2, #33	; 0x21
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2228      	movs	r2, #40	; 0x28
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff f9e7 	bl	8007da4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d02c      	beq.n	8008a94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d114      	bne.n	8008a94 <I2C_SlaveReceive_RXNE+0x74>
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6e:	d111      	bne.n	8008a94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2222      	movs	r2, #34	; 0x22
 8008a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2228      	movs	r2, #40	; 0x28
 8008a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff f992 	bl	8007db8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d012      	beq.n	8008ad4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008afa:	2b28      	cmp	r3, #40	; 0x28
 8008afc:	d127      	bne.n	8008b4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	089b      	lsrs	r3, r3, #2
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	09db      	lsrs	r3, r3, #7
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	81bb      	strh	r3, [r7, #12]
 8008b30:	e002      	b.n	8008b38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008b40:	89ba      	ldrh	r2, [r7, #12]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff f940 	bl	8007dcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008b4c:	e00e      	b.n	8008b6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	60bb      	str	r3, [r7, #8]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008b94:	2300      	movs	r3, #0
 8008b96:	60bb      	str	r3, [r7, #8]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	60bb      	str	r3, [r7, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd0:	d172      	bne.n	8008cb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b22      	cmp	r3, #34	; 0x22
 8008bd6:	d002      	beq.n	8008bde <I2C_Slave_STOPF+0x6a>
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b2a      	cmp	r3, #42	; 0x2a
 8008bdc:	d135      	bne.n	8008c4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f043 0204 	orr.w	r2, r3, #4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fd ffbc 	bl	8006b94 <HAL_DMA_GetState>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d049      	beq.n	8008cb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	4a69      	ldr	r2, [pc, #420]	; (8008dcc <I2C_Slave_STOPF+0x258>)
 8008c28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fd fe04 	bl	800683c <HAL_DMA_Abort_IT>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d03d      	beq.n	8008cb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c48:	e035      	b.n	8008cb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f043 0204 	orr.w	r2, r3, #4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd ff86 	bl	8006b94 <HAL_DMA_GetState>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d014      	beq.n	8008cb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	4a4e      	ldr	r2, [pc, #312]	; (8008dcc <I2C_Slave_STOPF+0x258>)
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fd fdce 	bl	800683c <HAL_DMA_Abort_IT>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d008      	beq.n	8008cb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	e000      	b.n	8008cb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d03e      	beq.n	8008d40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d112      	bne.n	8008cf6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b40      	cmp	r3, #64	; 0x40
 8008d02:	d112      	bne.n	8008d2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	f043 0204 	orr.w	r2, r3, #4
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8b3 	bl	8008eb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008d4e:	e039      	b.n	8008dc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b2a      	cmp	r3, #42	; 0x2a
 8008d54:	d109      	bne.n	8008d6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2228      	movs	r2, #40	; 0x28
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff f827 	bl	8007db8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b28      	cmp	r3, #40	; 0x28
 8008d74:	d111      	bne.n	8008d9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <I2C_Slave_STOPF+0x25c>)
 8008d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff f828 	bl	8007de8 <HAL_I2C_ListenCpltCallback>
}
 8008d98:	e014      	b.n	8008dc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	2b22      	cmp	r3, #34	; 0x22
 8008da0:	d002      	beq.n	8008da8 <I2C_Slave_STOPF+0x234>
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b22      	cmp	r3, #34	; 0x22
 8008da6:	d10d      	bne.n	8008dc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fe fffa 	bl	8007db8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	0800921d 	.word	0x0800921d
 8008dd0:	ffff0000 	.word	0xffff0000

08008dd4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d002      	beq.n	8008df6 <I2C_Slave_AF+0x22>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d129      	bne.n	8008e4a <I2C_Slave_AF+0x76>
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b28      	cmp	r3, #40	; 0x28
 8008dfa:	d126      	bne.n	8008e4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a2c      	ldr	r2, [pc, #176]	; (8008eb0 <I2C_Slave_AF+0xdc>)
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe ffd0 	bl	8007de8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008e48:	e02e      	b.n	8008ea8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b21      	cmp	r3, #33	; 0x21
 8008e4e:	d126      	bne.n	8008e9e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a17      	ldr	r2, [pc, #92]	; (8008eb0 <I2C_Slave_AF+0xdc>)
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2221      	movs	r2, #33	; 0x21
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fe ff84 	bl	8007da4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008e9c:	e004      	b.n	8008ea8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ea6:	615a      	str	r2, [r3, #20]
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	ffff0000 	.word	0xffff0000

08008eb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d002      	beq.n	8008ed8 <I2C_ITError+0x24>
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d10a      	bne.n	8008eee <I2C_ITError+0x3a>
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b22      	cmp	r3, #34	; 0x22
 8008edc:	d107      	bne.n	8008eee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ef4:	2b28      	cmp	r3, #40	; 0x28
 8008ef6:	d107      	bne.n	8008f08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2228      	movs	r2, #40	; 0x28
 8008f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f06:	e015      	b.n	8008f34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f16:	d00a      	beq.n	8008f2e <I2C_ITError+0x7a>
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	2b60      	cmp	r3, #96	; 0x60
 8008f1c:	d007      	beq.n	8008f2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f42:	d162      	bne.n	800900a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d020      	beq.n	8008fa4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	4a6a      	ldr	r2, [pc, #424]	; (8009110 <I2C_ITError+0x25c>)
 8008f68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd fc64 	bl	800683c <HAL_DMA_Abort_IT>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8089 	beq.w	800908e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4798      	blx	r3
 8008fa2:	e074      	b.n	800908e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	4a59      	ldr	r2, [pc, #356]	; (8009110 <I2C_ITError+0x25c>)
 8008faa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fd fc43 	bl	800683c <HAL_DMA_Abort_IT>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d068      	beq.n	800908e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	d10b      	bne.n	8008fe2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	e041      	b.n	800908e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b60      	cmp	r3, #96	; 0x60
 8009014:	d125      	bne.n	8009062 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b40      	cmp	r3, #64	; 0x40
 8009030:	d10b      	bne.n	800904a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0201 	bic.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fe feec 	bl	8007e38 <HAL_I2C_AbortCpltCallback>
 8009060:	e015      	b.n	800908e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d10b      	bne.n	8009088 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691a      	ldr	r2, [r3, #16]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe fecb 	bl	8007e24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10e      	bne.n	80090bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d007      	beq.n	80090cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d113      	bne.n	8009108 <I2C_ITError+0x254>
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b28      	cmp	r3, #40	; 0x28
 80090e4:	d110      	bne.n	8009108 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <I2C_ITError+0x260>)
 80090ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fe fe70 	bl	8007de8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0800921d 	.word	0x0800921d
 8009114:	ffff0000 	.word	0xffff0000

08009118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	460b      	mov	r3, r1
 8009126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b08      	cmp	r3, #8
 8009132:	d006      	beq.n	8009142 <I2C_MasterRequestWrite+0x2a>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d003      	beq.n	8009142 <I2C_MasterRequestWrite+0x2a>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009140:	d108      	bne.n	8009154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e00b      	b.n	800916c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	2b12      	cmp	r3, #18
 800915a:	d107      	bne.n	800916c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800916a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f8f7 	bl	800936c <I2C_WaitOnFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009192:	d103      	bne.n	800919c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e035      	b.n	800920c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a8:	d108      	bne.n	80091bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091aa:	897b      	ldrh	r3, [r7, #10]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	461a      	mov	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80091b8:	611a      	str	r2, [r3, #16]
 80091ba:	e01b      	b.n	80091f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091bc:	897b      	ldrh	r3, [r7, #10]
 80091be:	11db      	asrs	r3, r3, #7
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	f003 0306 	and.w	r3, r3, #6
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f063 030f 	orn	r3, r3, #15
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	490e      	ldr	r1, [pc, #56]	; (8009214 <I2C_MasterRequestWrite+0xfc>)
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f91d 	bl	800941a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e010      	b.n	800920c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091ea:	897b      	ldrh	r3, [r7, #10]
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	4907      	ldr	r1, [pc, #28]	; (8009218 <I2C_MasterRequestWrite+0x100>)
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 f90d 	bl	800941a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e000      	b.n	800920c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	00010008 	.word	0x00010008
 8009218:	00010002 	.word	0x00010002

0800921c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009236:	4b4b      	ldr	r3, [pc, #300]	; (8009364 <I2C_DMAAbort+0x148>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	08db      	lsrs	r3, r3, #3
 800923c:	4a4a      	ldr	r2, [pc, #296]	; (8009368 <I2C_DMAAbort+0x14c>)
 800923e:	fba2 2303 	umull	r2, r3, r2, r3
 8009242:	0a1a      	lsrs	r2, r3, #8
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	00da      	lsls	r2, r3, #3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f043 0220 	orr.w	r2, r3, #32
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009262:	e00a      	b.n	800927a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3b01      	subs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009278:	d0ea      	beq.n	8009250 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	2200      	movs	r2, #0
 8009288:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	2200      	movs	r2, #0
 8009298:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2200      	movs	r2, #0
 80092ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	2200      	movs	r2, #0
 80092be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	2200      	movs	r2, #0
 80092ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0201 	bic.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b60      	cmp	r3, #96	; 0x60
 80092ea:	d10e      	bne.n	800930a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2200      	movs	r2, #0
 8009300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009302:	6978      	ldr	r0, [r7, #20]
 8009304:	f7fe fd98 	bl	8007e38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009308:	e027      	b.n	800935a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800930a:	7cfb      	ldrb	r3, [r7, #19]
 800930c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009310:	2b28      	cmp	r3, #40	; 0x28
 8009312:	d117      	bne.n	8009344 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009332:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2228      	movs	r2, #40	; 0x28
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009342:	e007      	b.n	8009354 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009354:	6978      	ldr	r0, [r7, #20]
 8009356:	f7fe fd65 	bl	8007e24 <HAL_I2C_ErrorCallback>
}
 800935a:	bf00      	nop
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000200 	.word	0x20000200
 8009368:	14f8b589 	.word	0x14f8b589

0800936c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	4613      	mov	r3, r2
 800937a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800937c:	e025      	b.n	80093ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d021      	beq.n	80093ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009386:	f7fc ffa1 	bl	80062cc <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d116      	bne.n	80093ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e023      	b.n	8009412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d10d      	bne.n	80093f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	43da      	mvns	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf0c      	ite	eq
 80093e6:	2301      	moveq	r3, #1
 80093e8:	2300      	movne	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	e00c      	b.n	800940a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	43da      	mvns	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4013      	ands	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf0c      	ite	eq
 8009402:	2301      	moveq	r3, #1
 8009404:	2300      	movne	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	429a      	cmp	r2, r3
 800940e:	d0b6      	beq.n	800937e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009428:	e051      	b.n	80094ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009438:	d123      	bne.n	8009482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e046      	b.n	8009510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d021      	beq.n	80094ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948a:	f7fc ff1f 	bl	80062cc <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d302      	bcc.n	80094a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d116      	bne.n	80094ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	f043 0220 	orr.w	r2, r3, #32
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e020      	b.n	8009510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10c      	bne.n	80094f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	43da      	mvns	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bf14      	ite	ne
 80094ea:	2301      	movne	r3, #1
 80094ec:	2300      	moveq	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	e00b      	b.n	800950a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	43da      	mvns	r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf14      	ite	ne
 8009504:	2301      	movne	r3, #1
 8009506:	2300      	moveq	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d18d      	bne.n	800942a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009524:	e02d      	b.n	8009582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f8aa 	bl	8009680 <I2C_IsAcknowledgeFailed>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e02d      	b.n	8009592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d021      	beq.n	8009582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953e:	f7fc fec5 	bl	80062cc <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	429a      	cmp	r2, r3
 800954c:	d302      	bcc.n	8009554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d116      	bne.n	8009582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	f043 0220 	orr.w	r2, r3, #32
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e007      	b.n	8009592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958c:	2b80      	cmp	r3, #128	; 0x80
 800958e:	d1ca      	bne.n	8009526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095a6:	e02d      	b.n	8009604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 f869 	bl	8009680 <I2C_IsAcknowledgeFailed>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e02d      	b.n	8009614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095be:	d021      	beq.n	8009604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c0:	f7fc fe84 	bl	80062cc <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d302      	bcc.n	80095d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d116      	bne.n	8009604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f043 0220 	orr.w	r2, r3, #32
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e007      	b.n	8009614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f003 0304 	and.w	r3, r3, #4
 800960e:	2b04      	cmp	r3, #4
 8009610:	d1ca      	bne.n	80095a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009628:	4b13      	ldr	r3, [pc, #76]	; (8009678 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	08db      	lsrs	r3, r3, #3
 800962e:	4a13      	ldr	r2, [pc, #76]	; (800967c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009630:	fba2 2303 	umull	r2, r3, r2, r3
 8009634:	0a1a      	lsrs	r2, r3, #8
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3b01      	subs	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d107      	bne.n	800965a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f043 0220 	orr.w	r2, r3, #32
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e008      	b.n	800966c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009668:	d0e9      	beq.n	800963e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	20000200 	.word	0x20000200
 800967c:	14f8b589 	.word	0x14f8b589

08009680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009696:	d11b      	bne.n	80096d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	f043 0204 	orr.w	r2, r3, #4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80096ee:	d103      	bne.n	80096f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80096f6:	e007      	b.n	8009708 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009700:	d102      	bne.n	8009708 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2208      	movs	r2, #8
 8009706:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e267      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d075      	beq.n	800981e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009732:	4b88      	ldr	r3, [pc, #544]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 030c 	and.w	r3, r3, #12
 800973a:	2b04      	cmp	r3, #4
 800973c:	d00c      	beq.n	8009758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800973e:	4b85      	ldr	r3, [pc, #532]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009746:	2b08      	cmp	r3, #8
 8009748:	d112      	bne.n	8009770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974a:	4b82      	ldr	r3, [pc, #520]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009756:	d10b      	bne.n	8009770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009758:	4b7e      	ldr	r3, [pc, #504]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d05b      	beq.n	800981c <HAL_RCC_OscConfig+0x108>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d157      	bne.n	800981c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e242      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009778:	d106      	bne.n	8009788 <HAL_RCC_OscConfig+0x74>
 800977a:	4b76      	ldr	r3, [pc, #472]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a75      	ldr	r2, [pc, #468]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	e01d      	b.n	80097c4 <HAL_RCC_OscConfig+0xb0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009790:	d10c      	bne.n	80097ac <HAL_RCC_OscConfig+0x98>
 8009792:	4b70      	ldr	r3, [pc, #448]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a6f      	ldr	r2, [pc, #444]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	4b6d      	ldr	r3, [pc, #436]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a6c      	ldr	r2, [pc, #432]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e00b      	b.n	80097c4 <HAL_RCC_OscConfig+0xb0>
 80097ac:	4b69      	ldr	r3, [pc, #420]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a68      	ldr	r2, [pc, #416]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	4b66      	ldr	r3, [pc, #408]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a65      	ldr	r2, [pc, #404]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d013      	beq.n	80097f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097cc:	f7fc fd7e 	bl	80062cc <HAL_GetTick>
 80097d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d2:	e008      	b.n	80097e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d4:	f7fc fd7a 	bl	80062cc <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	2b64      	cmp	r3, #100	; 0x64
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e207      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097e6:	4b5b      	ldr	r3, [pc, #364]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0f0      	beq.n	80097d4 <HAL_RCC_OscConfig+0xc0>
 80097f2:	e014      	b.n	800981e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097f4:	f7fc fd6a 	bl	80062cc <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fa:	e008      	b.n	800980e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097fc:	f7fc fd66 	bl	80062cc <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b64      	cmp	r3, #100	; 0x64
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e1f3      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800980e:	4b51      	ldr	r3, [pc, #324]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1f0      	bne.n	80097fc <HAL_RCC_OscConfig+0xe8>
 800981a:	e000      	b.n	800981e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800981c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d063      	beq.n	80098f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800982a:	4b4a      	ldr	r3, [pc, #296]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 030c 	and.w	r3, r3, #12
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009836:	4b47      	ldr	r3, [pc, #284]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800983e:	2b08      	cmp	r3, #8
 8009840:	d11c      	bne.n	800987c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009842:	4b44      	ldr	r3, [pc, #272]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d116      	bne.n	800987c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800984e:	4b41      	ldr	r3, [pc, #260]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <HAL_RCC_OscConfig+0x152>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d001      	beq.n	8009866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e1c7      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009866:	4b3b      	ldr	r3, [pc, #236]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4937      	ldr	r1, [pc, #220]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009876:	4313      	orrs	r3, r2
 8009878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800987a:	e03a      	b.n	80098f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d020      	beq.n	80098c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009884:	4b34      	ldr	r3, [pc, #208]	; (8009958 <HAL_RCC_OscConfig+0x244>)
 8009886:	2201      	movs	r2, #1
 8009888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988a:	f7fc fd1f 	bl	80062cc <HAL_GetTick>
 800988e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009890:	e008      	b.n	80098a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009892:	f7fc fd1b 	bl	80062cc <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d901      	bls.n	80098a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e1a8      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098a4:	4b2b      	ldr	r3, [pc, #172]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0f0      	beq.n	8009892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b0:	4b28      	ldr	r3, [pc, #160]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4925      	ldr	r1, [pc, #148]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	600b      	str	r3, [r1, #0]
 80098c4:	e015      	b.n	80098f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098c6:	4b24      	ldr	r3, [pc, #144]	; (8009958 <HAL_RCC_OscConfig+0x244>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098cc:	f7fc fcfe 	bl	80062cc <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098d4:	f7fc fcfa 	bl	80062cc <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e187      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098e6:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f0      	bne.n	80098d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d036      	beq.n	800996c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d016      	beq.n	8009934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009906:	4b15      	ldr	r3, [pc, #84]	; (800995c <HAL_RCC_OscConfig+0x248>)
 8009908:	2201      	movs	r2, #1
 800990a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990c:	f7fc fcde 	bl	80062cc <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009914:	f7fc fcda 	bl	80062cc <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e167      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009926:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <HAL_RCC_OscConfig+0x240>)
 8009928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0f0      	beq.n	8009914 <HAL_RCC_OscConfig+0x200>
 8009932:	e01b      	b.n	800996c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <HAL_RCC_OscConfig+0x248>)
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800993a:	f7fc fcc7 	bl	80062cc <HAL_GetTick>
 800993e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009940:	e00e      	b.n	8009960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009942:	f7fc fcc3 	bl	80062cc <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d907      	bls.n	8009960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e150      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
 8009954:	40023800 	.word	0x40023800
 8009958:	42470000 	.word	0x42470000
 800995c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009960:	4b88      	ldr	r3, [pc, #544]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ea      	bne.n	8009942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8097 	beq.w	8009aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800997e:	4b81      	ldr	r3, [pc, #516]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10f      	bne.n	80099aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	4b7d      	ldr	r3, [pc, #500]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	4a7c      	ldr	r2, [pc, #496]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009998:	6413      	str	r3, [r2, #64]	; 0x40
 800999a:	4b7a      	ldr	r3, [pc, #488]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a2:	60bb      	str	r3, [r7, #8]
 80099a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099aa:	4b77      	ldr	r3, [pc, #476]	; (8009b88 <HAL_RCC_OscConfig+0x474>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d118      	bne.n	80099e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099b6:	4b74      	ldr	r3, [pc, #464]	; (8009b88 <HAL_RCC_OscConfig+0x474>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a73      	ldr	r2, [pc, #460]	; (8009b88 <HAL_RCC_OscConfig+0x474>)
 80099bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099c2:	f7fc fc83 	bl	80062cc <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c8:	e008      	b.n	80099dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099ca:	f7fc fc7f 	bl	80062cc <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e10c      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099dc:	4b6a      	ldr	r3, [pc, #424]	; (8009b88 <HAL_RCC_OscConfig+0x474>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d0f0      	beq.n	80099ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d106      	bne.n	80099fe <HAL_RCC_OscConfig+0x2ea>
 80099f0:	4b64      	ldr	r3, [pc, #400]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 80099f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f4:	4a63      	ldr	r2, [pc, #396]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	6713      	str	r3, [r2, #112]	; 0x70
 80099fc:	e01c      	b.n	8009a38 <HAL_RCC_OscConfig+0x324>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d10c      	bne.n	8009a20 <HAL_RCC_OscConfig+0x30c>
 8009a06:	4b5f      	ldr	r3, [pc, #380]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0a:	4a5e      	ldr	r2, [pc, #376]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a0c:	f043 0304 	orr.w	r3, r3, #4
 8009a10:	6713      	str	r3, [r2, #112]	; 0x70
 8009a12:	4b5c      	ldr	r3, [pc, #368]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a16:	4a5b      	ldr	r2, [pc, #364]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a1e:	e00b      	b.n	8009a38 <HAL_RCC_OscConfig+0x324>
 8009a20:	4b58      	ldr	r3, [pc, #352]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a24:	4a57      	ldr	r2, [pc, #348]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2c:	4b55      	ldr	r3, [pc, #340]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a30:	4a54      	ldr	r2, [pc, #336]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a32:	f023 0304 	bic.w	r3, r3, #4
 8009a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d015      	beq.n	8009a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a40:	f7fc fc44 	bl	80062cc <HAL_GetTick>
 8009a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a46:	e00a      	b.n	8009a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a48:	f7fc fc40 	bl	80062cc <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d901      	bls.n	8009a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e0cb      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a5e:	4b49      	ldr	r3, [pc, #292]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0ee      	beq.n	8009a48 <HAL_RCC_OscConfig+0x334>
 8009a6a:	e014      	b.n	8009a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a6c:	f7fc fc2e 	bl	80062cc <HAL_GetTick>
 8009a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a72:	e00a      	b.n	8009a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a74:	f7fc fc2a 	bl	80062cc <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e0b5      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a8a:	4b3e      	ldr	r3, [pc, #248]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1ee      	bne.n	8009a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d105      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a9c:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 80a1 	beq.w	8009bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ab2:	4b34      	ldr	r3, [pc, #208]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 030c 	and.w	r3, r3, #12
 8009aba:	2b08      	cmp	r3, #8
 8009abc:	d05c      	beq.n	8009b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d141      	bne.n	8009b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ac6:	4b31      	ldr	r3, [pc, #196]	; (8009b8c <HAL_RCC_OscConfig+0x478>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009acc:	f7fc fbfe 	bl	80062cc <HAL_GetTick>
 8009ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ad4:	f7fc fbfa 	bl	80062cc <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e087      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ae6:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f0      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69da      	ldr	r2, [r3, #28]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	019b      	lsls	r3, r3, #6
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b08:	085b      	lsrs	r3, r3, #1
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	041b      	lsls	r3, r3, #16
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	491b      	ldr	r1, [pc, #108]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b1c:	4b1b      	ldr	r3, [pc, #108]	; (8009b8c <HAL_RCC_OscConfig+0x478>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b22:	f7fc fbd3 	bl	80062cc <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b2a:	f7fc fbcf 	bl	80062cc <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e05c      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b3c:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0x416>
 8009b48:	e054      	b.n	8009bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b4a:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <HAL_RCC_OscConfig+0x478>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b50:	f7fc fbbc 	bl	80062cc <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b58:	f7fc fbb8 	bl	80062cc <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e045      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b6a:	4b06      	ldr	r3, [pc, #24]	; (8009b84 <HAL_RCC_OscConfig+0x470>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x444>
 8009b76:	e03d      	b.n	8009bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d107      	bne.n	8009b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e038      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
 8009b84:	40023800 	.word	0x40023800
 8009b88:	40007000 	.word	0x40007000
 8009b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b90:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <HAL_RCC_OscConfig+0x4ec>)
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d028      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d121      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d11a      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d111      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d107      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d001      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40023800 	.word	0x40023800

08009c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e0cc      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c18:	4b68      	ldr	r3, [pc, #416]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d90c      	bls.n	8009c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c26:	4b65      	ldr	r3, [pc, #404]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2e:	4b63      	ldr	r3, [pc, #396]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0b8      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d020      	beq.n	8009c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c58:	4b59      	ldr	r3, [pc, #356]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	4a58      	ldr	r2, [pc, #352]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c70:	4b53      	ldr	r3, [pc, #332]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	4a52      	ldr	r2, [pc, #328]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c7c:	4b50      	ldr	r3, [pc, #320]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	494d      	ldr	r1, [pc, #308]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d044      	beq.n	8009d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ca2:	4b47      	ldr	r3, [pc, #284]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d119      	bne.n	8009ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e07f      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d003      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d107      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cc2:	4b3f      	ldr	r3, [pc, #252]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e06f      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cd2:	4b3b      	ldr	r3, [pc, #236]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e067      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ce2:	4b37      	ldr	r3, [pc, #220]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f023 0203 	bic.w	r2, r3, #3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	4934      	ldr	r1, [pc, #208]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009cf4:	f7fc faea 	bl	80062cc <HAL_GetTick>
 8009cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cfa:	e00a      	b.n	8009d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cfc:	f7fc fae6 	bl	80062cc <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e04f      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d12:	4b2b      	ldr	r3, [pc, #172]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 020c 	and.w	r2, r3, #12
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d1eb      	bne.n	8009cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d24:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d20c      	bcs.n	8009d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d32:	4b22      	ldr	r3, [pc, #136]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3a:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <HAL_RCC_ClockConfig+0x1b8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d001      	beq.n	8009d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e032      	b.n	8009db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d58:	4b19      	ldr	r3, [pc, #100]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	4916      	ldr	r1, [pc, #88]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d76:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	490e      	ldr	r1, [pc, #56]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d8a:	f000 f821 	bl	8009dd0 <HAL_RCC_GetSysClockFreq>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	091b      	lsrs	r3, r3, #4
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	490a      	ldr	r1, [pc, #40]	; (8009dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8009d9c:	5ccb      	ldrb	r3, [r1, r3]
 8009d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009da2:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8009da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <HAL_RCC_ClockConfig+0x1c8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fc fa4a 	bl	8006244 <HAL_InitTick>

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40023c00 	.word	0x40023c00
 8009dc0:	40023800 	.word	0x40023800
 8009dc4:	0800dc20 	.word	0x0800dc20
 8009dc8:	20000200 	.word	0x20000200
 8009dcc:	20000204 	.word	0x20000204

08009dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd4:	b094      	sub	sp, #80	; 0x50
 8009dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	647b      	str	r3, [r7, #68]	; 0x44
 8009ddc:	2300      	movs	r3, #0
 8009dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009de0:	2300      	movs	r3, #0
 8009de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009de8:	4b79      	ldr	r3, [pc, #484]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 030c 	and.w	r3, r3, #12
 8009df0:	2b08      	cmp	r3, #8
 8009df2:	d00d      	beq.n	8009e10 <HAL_RCC_GetSysClockFreq+0x40>
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	f200 80e1 	bhi.w	8009fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <HAL_RCC_GetSysClockFreq+0x34>
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d003      	beq.n	8009e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8009e02:	e0db      	b.n	8009fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e04:	4b73      	ldr	r3, [pc, #460]	; (8009fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009e08:	e0db      	b.n	8009fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e0a:	4b73      	ldr	r3, [pc, #460]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8009e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e0e:	e0d8      	b.n	8009fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e10:	4b6f      	ldr	r3, [pc, #444]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e1a:	4b6d      	ldr	r3, [pc, #436]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d063      	beq.n	8009eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e26:	4b6a      	ldr	r3, [pc, #424]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	099b      	lsrs	r3, r3, #6
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e38:	633b      	str	r3, [r7, #48]	; 0x30
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e42:	4622      	mov	r2, r4
 8009e44:	462b      	mov	r3, r5
 8009e46:	f04f 0000 	mov.w	r0, #0
 8009e4a:	f04f 0100 	mov.w	r1, #0
 8009e4e:	0159      	lsls	r1, r3, #5
 8009e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e54:	0150      	lsls	r0, r2, #5
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	1a51      	subs	r1, r2, r1
 8009e5e:	6139      	str	r1, [r7, #16]
 8009e60:	4629      	mov	r1, r5
 8009e62:	eb63 0301 	sbc.w	r3, r3, r1
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e74:	4659      	mov	r1, fp
 8009e76:	018b      	lsls	r3, r1, #6
 8009e78:	4651      	mov	r1, sl
 8009e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e7e:	4651      	mov	r1, sl
 8009e80:	018a      	lsls	r2, r1, #6
 8009e82:	4651      	mov	r1, sl
 8009e84:	ebb2 0801 	subs.w	r8, r2, r1
 8009e88:	4659      	mov	r1, fp
 8009e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	f04f 0300 	mov.w	r3, #0
 8009e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ea2:	4690      	mov	r8, r2
 8009ea4:	4699      	mov	r9, r3
 8009ea6:	4623      	mov	r3, r4
 8009ea8:	eb18 0303 	adds.w	r3, r8, r3
 8009eac:	60bb      	str	r3, [r7, #8]
 8009eae:	462b      	mov	r3, r5
 8009eb0:	eb49 0303 	adc.w	r3, r9, r3
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	024b      	lsls	r3, r1, #9
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ecc:	4621      	mov	r1, r4
 8009ece:	024a      	lsls	r2, r1, #9
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ee0:	f7f6 fe56 	bl	8000b90 <__aeabi_uldivmod>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4613      	mov	r3, r2
 8009eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eec:	e058      	b.n	8009fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eee:	4b38      	ldr	r3, [pc, #224]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	099b      	lsrs	r3, r3, #6
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	4611      	mov	r1, r2
 8009efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009efe:	623b      	str	r3, [r7, #32]
 8009f00:	2300      	movs	r3, #0
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
 8009f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	f04f 0000 	mov.w	r0, #0
 8009f10:	f04f 0100 	mov.w	r1, #0
 8009f14:	0159      	lsls	r1, r3, #5
 8009f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f1a:	0150      	lsls	r0, r2, #5
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4641      	mov	r1, r8
 8009f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f26:	4649      	mov	r1, r9
 8009f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f40:	ebb2 040a 	subs.w	r4, r2, sl
 8009f44:	eb63 050b 	sbc.w	r5, r3, fp
 8009f48:	f04f 0200 	mov.w	r2, #0
 8009f4c:	f04f 0300 	mov.w	r3, #0
 8009f50:	00eb      	lsls	r3, r5, #3
 8009f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f56:	00e2      	lsls	r2, r4, #3
 8009f58:	4614      	mov	r4, r2
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	4643      	mov	r3, r8
 8009f5e:	18e3      	adds	r3, r4, r3
 8009f60:	603b      	str	r3, [r7, #0]
 8009f62:	464b      	mov	r3, r9
 8009f64:	eb45 0303 	adc.w	r3, r5, r3
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f76:	4629      	mov	r1, r5
 8009f78:	028b      	lsls	r3, r1, #10
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f80:	4621      	mov	r1, r4
 8009f82:	028a      	lsls	r2, r1, #10
 8009f84:	4610      	mov	r0, r2
 8009f86:	4619      	mov	r1, r3
 8009f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	61bb      	str	r3, [r7, #24]
 8009f8e:	61fa      	str	r2, [r7, #28]
 8009f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f94:	f7f6 fdfc 	bl	8000b90 <__aeabi_uldivmod>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	0c1b      	lsrs	r3, r3, #16
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	3301      	adds	r3, #1
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fba:	e002      	b.n	8009fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3750      	adds	r7, #80	; 0x50
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fce:	bf00      	nop
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	00f42400 	.word	0x00f42400
 8009fd8:	007a1200 	.word	0x007a1200

08009fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000200 	.word	0x20000200

08009ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ff8:	f7ff fff0 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	0a9b      	lsrs	r3, r3, #10
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	4903      	ldr	r1, [pc, #12]	; (800a018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a00a:	5ccb      	ldrb	r3, [r1, r3]
 800a00c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a010:	4618      	mov	r0, r3
 800a012:	bd80      	pop	{r7, pc}
 800a014:	40023800 	.word	0x40023800
 800a018:	0800dc30 	.word	0x0800dc30

0800a01c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a020:	f7ff ffdc 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 800a024:	4602      	mov	r2, r0
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	0b5b      	lsrs	r3, r3, #13
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	4903      	ldr	r1, [pc, #12]	; (800a040 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a032:	5ccb      	ldrb	r3, [r1, r3]
 800a034:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a038:	4618      	mov	r0, r3
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40023800 	.word	0x40023800
 800a040:	0800dc30 	.word	0x0800dc30

0800a044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e041      	b.n	800a0da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fb fe66 	bl	8005d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f000 fde2 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d001      	beq.n	800a0fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e03c      	b.n	800a176 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <HAL_TIM_Base_Start+0xa0>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d018      	beq.n	800a140 <HAL_TIM_Base_Start+0x5c>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a116:	d013      	beq.n	800a140 <HAL_TIM_Base_Start+0x5c>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1a      	ldr	r2, [pc, #104]	; (800a188 <HAL_TIM_Base_Start+0xa4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00e      	beq.n	800a140 <HAL_TIM_Base_Start+0x5c>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a19      	ldr	r2, [pc, #100]	; (800a18c <HAL_TIM_Base_Start+0xa8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d009      	beq.n	800a140 <HAL_TIM_Base_Start+0x5c>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a17      	ldr	r2, [pc, #92]	; (800a190 <HAL_TIM_Base_Start+0xac>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d004      	beq.n	800a140 <HAL_TIM_Base_Start+0x5c>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a16      	ldr	r2, [pc, #88]	; (800a194 <HAL_TIM_Base_Start+0xb0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d111      	bne.n	800a164 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b06      	cmp	r3, #6
 800a150:	d010      	beq.n	800a174 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 0201 	orr.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a162:	e007      	b.n	800a174 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	40010000 	.word	0x40010000
 800a188:	40000400 	.word	0x40000400
 800a18c:	40000800 	.word	0x40000800
 800a190:	40000c00 	.word	0x40000c00
 800a194:	40014000 	.word	0x40014000

0800a198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d001      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e044      	b.n	800a23a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0201 	orr.w	r2, r2, #1
 800a1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <HAL_TIM_Base_Start_IT+0xb0>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d018      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x6c>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1da:	d013      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x6c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1a      	ldr	r2, [pc, #104]	; (800a24c <HAL_TIM_Base_Start_IT+0xb4>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00e      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x6c>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a19      	ldr	r2, [pc, #100]	; (800a250 <HAL_TIM_Base_Start_IT+0xb8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d009      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x6c>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a17      	ldr	r2, [pc, #92]	; (800a254 <HAL_TIM_Base_Start_IT+0xbc>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x6c>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a16      	ldr	r2, [pc, #88]	; (800a258 <HAL_TIM_Base_Start_IT+0xc0>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d111      	bne.n	800a228 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b06      	cmp	r3, #6
 800a214:	d010      	beq.n	800a238 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0201 	orr.w	r2, r2, #1
 800a224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a226:	e007      	b.n	800a238 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0201 	orr.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	40010000 	.word	0x40010000
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40000c00 	.word	0x40000c00
 800a258:	40014000 	.word	0x40014000

0800a25c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e041      	b.n	800a2f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f839 	bl	800a2fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fcd6 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
	...

0800a310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_TIM_PWM_Start+0x24>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b01      	cmp	r3, #1
 800a32a:	bf14      	ite	ne
 800a32c:	2301      	movne	r3, #1
 800a32e:	2300      	moveq	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	e022      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d109      	bne.n	800a34e <HAL_TIM_PWM_Start+0x3e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	bf14      	ite	ne
 800a346:	2301      	movne	r3, #1
 800a348:	2300      	moveq	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	e015      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d109      	bne.n	800a368 <HAL_TIM_PWM_Start+0x58>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	bf14      	ite	ne
 800a360:	2301      	movne	r3, #1
 800a362:	2300      	moveq	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	e008      	b.n	800a37a <HAL_TIM_PWM_Start+0x6a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b01      	cmp	r3, #1
 800a372:	bf14      	ite	ne
 800a374:	2301      	movne	r3, #1
 800a376:	2300      	moveq	r3, #0
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e068      	b.n	800a454 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <HAL_TIM_PWM_Start+0x82>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a390:	e013      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b04      	cmp	r3, #4
 800a396:	d104      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0x92>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a0:	e00b      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d104      	bne.n	800a3b2 <HAL_TIM_PWM_Start+0xa2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b0:	e003      	b.n	800a3ba <HAL_TIM_PWM_Start+0xaa>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fee8 	bl	800b198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a23      	ldr	r2, [pc, #140]	; (800a45c <HAL_TIM_PWM_Start+0x14c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d107      	bne.n	800a3e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <HAL_TIM_PWM_Start+0x14c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d018      	beq.n	800a41e <HAL_TIM_PWM_Start+0x10e>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f4:	d013      	beq.n	800a41e <HAL_TIM_PWM_Start+0x10e>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a19      	ldr	r2, [pc, #100]	; (800a460 <HAL_TIM_PWM_Start+0x150>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00e      	beq.n	800a41e <HAL_TIM_PWM_Start+0x10e>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a17      	ldr	r2, [pc, #92]	; (800a464 <HAL_TIM_PWM_Start+0x154>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d009      	beq.n	800a41e <HAL_TIM_PWM_Start+0x10e>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a16      	ldr	r2, [pc, #88]	; (800a468 <HAL_TIM_PWM_Start+0x158>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d004      	beq.n	800a41e <HAL_TIM_PWM_Start+0x10e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a14      	ldr	r2, [pc, #80]	; (800a46c <HAL_TIM_PWM_Start+0x15c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d111      	bne.n	800a442 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f003 0307 	and.w	r3, r3, #7
 800a428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b06      	cmp	r3, #6
 800a42e:	d010      	beq.n	800a452 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a440:	e007      	b.n	800a452 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f042 0201 	orr.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	40010000 	.word	0x40010000
 800a460:	40000400 	.word	0x40000400
 800a464:	40000800 	.word	0x40000800
 800a468:	40000c00 	.word	0x40000c00
 800a46c:	40014000 	.word	0x40014000

0800a470 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e097      	b.n	800a5b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fb fcb3 	bl	8005e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6812      	ldr	r2, [r2, #0]
 800a4b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4b4:	f023 0307 	bic.w	r3, r3, #7
 800a4b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	f000 fbc1 	bl	800ac4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	4313      	orrs	r3, r2
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a510:	f023 030c 	bic.w	r3, r3, #12
 800a514:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a51c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	021b      	lsls	r3, r3, #8
 800a52c:	4313      	orrs	r3, r2
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	4313      	orrs	r3, r2
 800a532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	011a      	lsls	r2, r3, #4
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	031b      	lsls	r3, r3, #12
 800a540:	4313      	orrs	r3, r2
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a54e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a556:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	4313      	orrs	r3, r2
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d110      	bne.n	800a60e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d102      	bne.n	800a5f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5f2:	7b7b      	ldrb	r3, [r7, #13]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d001      	beq.n	800a5fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e069      	b.n	800a6d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a60c:	e031      	b.n	800a672 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b04      	cmp	r3, #4
 800a612:	d110      	bne.n	800a636 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d102      	bne.n	800a620 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a61a:	7b3b      	ldrb	r3, [r7, #12]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d001      	beq.n	800a624 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e055      	b.n	800a6d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a634:	e01d      	b.n	800a672 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d108      	bne.n	800a64e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d105      	bne.n	800a64e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a642:	7b7b      	ldrb	r3, [r7, #13]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d102      	bne.n	800a64e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a648:	7b3b      	ldrb	r3, [r7, #12]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d001      	beq.n	800a652 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e03e      	b.n	800a6d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2202      	movs	r2, #2
 800a656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2202      	movs	r2, #2
 800a666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2202      	movs	r2, #2
 800a66e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <HAL_TIM_Encoder_Start+0xc4>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	d008      	beq.n	800a690 <HAL_TIM_Encoder_Start+0xd4>
 800a67e:	e00f      	b.n	800a6a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2201      	movs	r2, #1
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fd85 	bl	800b198 <TIM_CCxChannelCmd>
      break;
 800a68e:	e016      	b.n	800a6be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2201      	movs	r2, #1
 800a696:	2104      	movs	r1, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fd7d 	bl	800b198 <TIM_CCxChannelCmd>
      break;
 800a69e:	e00e      	b.n	800a6be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fd75 	bl	800b198 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fd6e 	bl	800b198 <TIM_CCxChannelCmd>
      break;
 800a6bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f042 0201 	orr.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d122      	bne.n	800a734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d11b      	bne.n	800a734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f06f 0202 	mvn.w	r2, #2
 800a704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa77 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a720:	e005      	b.n	800a72e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa69 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fa7a 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f003 0304 	and.w	r3, r3, #4
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d122      	bne.n	800a788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d11b      	bne.n	800a788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0204 	mvn.w	r2, #4
 800a758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2202      	movs	r2, #2
 800a75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa4d 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a774:	e005      	b.n	800a782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa3f 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa50 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b08      	cmp	r3, #8
 800a794:	d122      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0308 	and.w	r3, r3, #8
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d11b      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0208 	mvn.w	r2, #8
 800a7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2204      	movs	r2, #4
 800a7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa23 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa15 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa26 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b10      	cmp	r3, #16
 800a7e8:	d122      	bne.n	800a830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d11b      	bne.n	800a830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0210 	mvn.w	r2, #16
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2208      	movs	r2, #8
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f9f9 	bl	800ac0e <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9eb 	bl	800abfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f9fc 	bl	800ac22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d10e      	bne.n	800a85c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d107      	bne.n	800a85c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0201 	mvn.w	r2, #1
 800a854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7f7 fa12 	bl	8001c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d10e      	bne.n	800a888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a874:	2b80      	cmp	r3, #128	; 0x80
 800a876:	d107      	bne.n	800a888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fd78 	bl	800b378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a892:	2b40      	cmp	r3, #64	; 0x40
 800a894:	d10e      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	2b40      	cmp	r3, #64	; 0x40
 800a8a2:	d107      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9c1 	bl	800ac36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b20      	cmp	r3, #32
 800a8c0:	d10e      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	d107      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f06f 0220 	mvn.w	r2, #32
 800a8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd42 	bl	800b364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a902:	2302      	movs	r3, #2
 800a904:	e0ae      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b0c      	cmp	r3, #12
 800a912:	f200 809f 	bhi.w	800aa54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a916:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a951 	.word	0x0800a951
 800a920:	0800aa55 	.word	0x0800aa55
 800a924:	0800aa55 	.word	0x0800aa55
 800a928:	0800aa55 	.word	0x0800aa55
 800a92c:	0800a991 	.word	0x0800a991
 800a930:	0800aa55 	.word	0x0800aa55
 800a934:	0800aa55 	.word	0x0800aa55
 800a938:	0800aa55 	.word	0x0800aa55
 800a93c:	0800a9d3 	.word	0x0800a9d3
 800a940:	0800aa55 	.word	0x0800aa55
 800a944:	0800aa55 	.word	0x0800aa55
 800a948:	0800aa55 	.word	0x0800aa55
 800a94c:	0800aa13 	.word	0x0800aa13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f9f8 	bl	800ad4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0208 	orr.w	r2, r2, #8
 800a96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0204 	bic.w	r2, r2, #4
 800a97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6999      	ldr	r1, [r3, #24]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	691a      	ldr	r2, [r3, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	619a      	str	r2, [r3, #24]
      break;
 800a98e:	e064      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fa3e 	bl	800ae18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699a      	ldr	r2, [r3, #24]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6999      	ldr	r1, [r3, #24]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	021a      	lsls	r2, r3, #8
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	619a      	str	r2, [r3, #24]
      break;
 800a9d0:	e043      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fa89 	bl	800aef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f042 0208 	orr.w	r2, r2, #8
 800a9ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69da      	ldr	r2, [r3, #28]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0204 	bic.w	r2, r2, #4
 800a9fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69d9      	ldr	r1, [r3, #28]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	61da      	str	r2, [r3, #28]
      break;
 800aa10:	e023      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fad3 	bl	800afc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69da      	ldr	r2, [r3, #28]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69d9      	ldr	r1, [r3, #28]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	021a      	lsls	r2, r3, #8
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	61da      	str	r2, [r3, #28]
      break;
 800aa52:	e002      	b.n	800aa5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	75fb      	strb	r3, [r7, #23]
      break;
 800aa58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_TIM_ConfigClockSource+0x1c>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e0b4      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x186>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aaa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac0:	d03e      	beq.n	800ab40 <HAL_TIM_ConfigClockSource+0xd4>
 800aac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac6:	f200 8087 	bhi.w	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aace:	f000 8086 	beq.w	800abde <HAL_TIM_ConfigClockSource+0x172>
 800aad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad6:	d87f      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aad8:	2b70      	cmp	r3, #112	; 0x70
 800aada:	d01a      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0xa6>
 800aadc:	2b70      	cmp	r3, #112	; 0x70
 800aade:	d87b      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aae0:	2b60      	cmp	r3, #96	; 0x60
 800aae2:	d050      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x11a>
 800aae4:	2b60      	cmp	r3, #96	; 0x60
 800aae6:	d877      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aae8:	2b50      	cmp	r3, #80	; 0x50
 800aaea:	d03c      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0xfa>
 800aaec:	2b50      	cmp	r3, #80	; 0x50
 800aaee:	d873      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf0:	2b40      	cmp	r3, #64	; 0x40
 800aaf2:	d058      	beq.n	800aba6 <HAL_TIM_ConfigClockSource+0x13a>
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d86f      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf8:	2b30      	cmp	r3, #48	; 0x30
 800aafa:	d064      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800aafc:	2b30      	cmp	r3, #48	; 0x30
 800aafe:	d86b      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d060      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d867      	bhi.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d05c      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab0c:	2b10      	cmp	r3, #16
 800ab0e:	d05a      	beq.n	800abc6 <HAL_TIM_ConfigClockSource+0x15a>
 800ab10:	e062      	b.n	800abd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6818      	ldr	r0, [r3, #0]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	6899      	ldr	r1, [r3, #8]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f000 fb19 	bl	800b158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	609a      	str	r2, [r3, #8]
      break;
 800ab3e:	e04f      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	6899      	ldr	r1, [r3, #8]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f000 fb02 	bl	800b158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab62:	609a      	str	r2, [r3, #8]
      break;
 800ab64:	e03c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6859      	ldr	r1, [r3, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	461a      	mov	r2, r3
 800ab74:	f000 fa76 	bl	800b064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2150      	movs	r1, #80	; 0x50
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 facf 	bl	800b122 <TIM_ITRx_SetConfig>
      break;
 800ab84:	e02c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	6859      	ldr	r1, [r3, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f000 fa95 	bl	800b0c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2160      	movs	r1, #96	; 0x60
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 fabf 	bl	800b122 <TIM_ITRx_SetConfig>
      break;
 800aba4:	e01c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6859      	ldr	r1, [r3, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f000 fa56 	bl	800b064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2140      	movs	r1, #64	; 0x40
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 faaf 	bl	800b122 <TIM_ITRx_SetConfig>
      break;
 800abc4:	e00c      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f000 faa6 	bl	800b122 <TIM_ITRx_SetConfig>
      break;
 800abd6:	e003      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	73fb      	strb	r3, [r7, #15]
      break;
 800abdc:	e000      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a34      	ldr	r2, [pc, #208]	; (800ad30 <TIM_Base_SetConfig+0xe4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00f      	beq.n	800ac84 <TIM_Base_SetConfig+0x38>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac6a:	d00b      	beq.n	800ac84 <TIM_Base_SetConfig+0x38>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a31      	ldr	r2, [pc, #196]	; (800ad34 <TIM_Base_SetConfig+0xe8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <TIM_Base_SetConfig+0x38>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a30      	ldr	r2, [pc, #192]	; (800ad38 <TIM_Base_SetConfig+0xec>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_Base_SetConfig+0x38>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a2f      	ldr	r2, [pc, #188]	; (800ad3c <TIM_Base_SetConfig+0xf0>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d108      	bne.n	800ac96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a25      	ldr	r2, [pc, #148]	; (800ad30 <TIM_Base_SetConfig+0xe4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d01b      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca4:	d017      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a22      	ldr	r2, [pc, #136]	; (800ad34 <TIM_Base_SetConfig+0xe8>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d013      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a21      	ldr	r2, [pc, #132]	; (800ad38 <TIM_Base_SetConfig+0xec>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00f      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a20      	ldr	r2, [pc, #128]	; (800ad3c <TIM_Base_SetConfig+0xf0>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00b      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a1f      	ldr	r2, [pc, #124]	; (800ad40 <TIM_Base_SetConfig+0xf4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d007      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a1e      	ldr	r2, [pc, #120]	; (800ad44 <TIM_Base_SetConfig+0xf8>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d003      	beq.n	800acd6 <TIM_Base_SetConfig+0x8a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a1d      	ldr	r2, [pc, #116]	; (800ad48 <TIM_Base_SetConfig+0xfc>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d108      	bne.n	800ace8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <TIM_Base_SetConfig+0xe4>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d103      	bne.n	800ad1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	615a      	str	r2, [r3, #20]
}
 800ad22:	bf00      	nop
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40010000 	.word	0x40010000
 800ad34:	40000400 	.word	0x40000400
 800ad38:	40000800 	.word	0x40000800
 800ad3c:	40000c00 	.word	0x40000c00
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40014400 	.word	0x40014400
 800ad48:	40014800 	.word	0x40014800

0800ad4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f023 0201 	bic.w	r2, r3, #1
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f023 0302 	bic.w	r3, r3, #2
 800ad94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a1c      	ldr	r2, [pc, #112]	; (800ae14 <TIM_OC1_SetConfig+0xc8>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d10c      	bne.n	800adc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 0308 	bic.w	r3, r3, #8
 800adae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f023 0304 	bic.w	r3, r3, #4
 800adc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a13      	ldr	r2, [pc, #76]	; (800ae14 <TIM_OC1_SetConfig+0xc8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d111      	bne.n	800adee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800add0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800add8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	621a      	str	r2, [r3, #32]
}
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	40010000 	.word	0x40010000

0800ae18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	f023 0210 	bic.w	r2, r3, #16
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f023 0320 	bic.w	r3, r3, #32
 800ae62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1e      	ldr	r2, [pc, #120]	; (800aeec <TIM_OC2_SetConfig+0xd4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d10d      	bne.n	800ae94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <TIM_OC2_SetConfig+0xd4>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d113      	bne.n	800aec4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40010000 	.word	0x40010000

0800aef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0303 	bic.w	r3, r3, #3
 800af26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a1d      	ldr	r2, [pc, #116]	; (800afc0 <TIM_OC3_SetConfig+0xd0>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10d      	bne.n	800af6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a14      	ldr	r2, [pc, #80]	; (800afc0 <TIM_OC3_SetConfig+0xd0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d113      	bne.n	800af9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	4313      	orrs	r3, r2
 800af98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	621a      	str	r2, [r3, #32]
}
 800afb4:	bf00      	nop
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	40010000 	.word	0x40010000

0800afc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	031b      	lsls	r3, r3, #12
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a10      	ldr	r2, [pc, #64]	; (800b060 <TIM_OC4_SetConfig+0x9c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d109      	bne.n	800b038 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b02a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	695b      	ldr	r3, [r3, #20]
 800b030:	019b      	lsls	r3, r3, #6
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	4313      	orrs	r3, r2
 800b036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	621a      	str	r2, [r3, #32]
}
 800b052:	bf00      	nop
 800b054:	371c      	adds	r7, #28
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	40010000 	.word	0x40010000

0800b064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f023 0201 	bic.w	r2, r3, #1
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b08e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4313      	orrs	r3, r2
 800b098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f023 030a 	bic.w	r3, r3, #10
 800b0a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	bf00      	nop
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b087      	sub	sp, #28
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	f023 0210 	bic.w	r2, r3, #16
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	031b      	lsls	r3, r3, #12
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	4313      	orrs	r3, r2
 800b108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	621a      	str	r2, [r3, #32]
}
 800b116:	bf00      	nop
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4313      	orrs	r3, r2
 800b140:	f043 0307 	orr.w	r3, r3, #7
 800b144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	609a      	str	r2, [r3, #8]
}
 800b14c:	bf00      	nop
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	021a      	lsls	r2, r3, #8
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	431a      	orrs	r2, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	4313      	orrs	r3, r2
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	609a      	str	r2, [r3, #8]
}
 800b18c:	bf00      	nop
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f003 031f 	and.w	r3, r3, #31
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a1a      	ldr	r2, [r3, #32]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6a1a      	ldr	r2, [r3, #32]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f003 031f 	and.w	r3, r3, #31
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	621a      	str	r2, [r3, #32]
}
 800b1d6:	bf00      	nop
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e050      	b.n	800b29e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2202      	movs	r2, #2
 800b208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a1c      	ldr	r2, [pc, #112]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d018      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b248:	d013      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a18      	ldr	r2, [pc, #96]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d00e      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a16      	ldr	r2, [pc, #88]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d009      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a15      	ldr	r2, [pc, #84]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d004      	beq.n	800b272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a13      	ldr	r2, [pc, #76]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d10c      	bne.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	4313      	orrs	r3, r2
 800b282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	40010000 	.word	0x40010000
 800b2b0:	40000400 	.word	0x40000400
 800b2b4:	40000800 	.word	0x40000800
 800b2b8:	40000c00 	.word	0x40000c00
 800b2bc:	40014000 	.word	0x40014000

0800b2c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d101      	bne.n	800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e03d      	b.n	800b358 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4313      	orrs	r3, r2
 800b31a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	4313      	orrs	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	4313      	orrs	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e03f      	b.n	800b41e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d106      	bne.n	800b3b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fa fda8 	bl	8005f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2224      	movs	r2, #36	; 0x24
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 ffd7 	bl	800c384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	695a      	ldr	r2, [r3, #20]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2220      	movs	r2, #32
 800b410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2220      	movs	r2, #32
 800b418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	; 0x30
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b20      	cmp	r3, #32
 800b440:	d165      	bne.n	800b50e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <HAL_UART_Transmit_DMA+0x26>
 800b448:	88fb      	ldrh	r3, [r7, #6]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e05e      	b.n	800b510 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d101      	bne.n	800b460 <HAL_UART_Transmit_DMA+0x38>
 800b45c:	2302      	movs	r3, #2
 800b45e:	e057      	b.n	800b510 <HAL_UART_Transmit_DMA+0xe8>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	88fa      	ldrh	r2, [r7, #6]
 800b472:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	88fa      	ldrh	r2, [r7, #6]
 800b478:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2221      	movs	r2, #33	; 0x21
 800b484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48c:	4a22      	ldr	r2, [pc, #136]	; (800b518 <HAL_UART_Transmit_DMA+0xf0>)
 800b48e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b494:	4a21      	ldr	r2, [pc, #132]	; (800b51c <HAL_UART_Transmit_DMA+0xf4>)
 800b496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49c:	4a20      	ldr	r2, [pc, #128]	; (800b520 <HAL_UART_Transmit_DMA+0xf8>)
 800b49e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b4:	6819      	ldr	r1, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	461a      	mov	r2, r3
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	f7fb f8f4 	bl	80066ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3314      	adds	r3, #20
 800b4dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3314      	adds	r3, #20
 800b4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f6:	627a      	str	r2, [r7, #36]	; 0x24
 800b4f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6a39      	ldr	r1, [r7, #32]
 800b4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	61fb      	str	r3, [r7, #28]
   return(result);
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e000      	b.n	800b510 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b50e:	2302      	movs	r3, #2
  }
}
 800b510:	4618      	mov	r0, r3
 800b512:	3730      	adds	r7, #48	; 0x30
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	0800bc1d 	.word	0x0800bc1d
 800b51c:	0800bcb7 	.word	0x0800bcb7
 800b520:	0800be2f 	.word	0x0800be2f

0800b524 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4613      	mov	r3, r2
 800b530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d11d      	bne.n	800b57a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <HAL_UART_Receive_DMA+0x26>
 800b544:	88fb      	ldrh	r3, [r7, #6]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e016      	b.n	800b57c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d101      	bne.n	800b55c <HAL_UART_Receive_DMA+0x38>
 800b558:	2302      	movs	r3, #2
 800b55a:	e00f      	b.n	800b57c <HAL_UART_Receive_DMA+0x58>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b56a:	88fb      	ldrh	r3, [r7, #6]
 800b56c:	461a      	mov	r2, r3
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fca7 	bl	800bec4 <UART_Start_Receive_DMA>
 800b576:	4603      	mov	r3, r0
 800b578:	e000      	b.n	800b57c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b57a:	2302      	movs	r3, #2
  }
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b090      	sub	sp, #64	; 0x40
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59a:	2b80      	cmp	r3, #128	; 0x80
 800b59c:	bf0c      	ite	eq
 800b59e:	2301      	moveq	r3, #1
 800b5a0:	2300      	movne	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b21      	cmp	r3, #33	; 0x21
 800b5b0:	d128      	bne.n	800b604 <HAL_UART_DMAStop+0x80>
 800b5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d025      	beq.n	800b604 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	623b      	str	r3, [r7, #32]
   return(result);
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3314      	adds	r3, #20
 800b5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5d8:	633a      	str	r2, [r7, #48]	; 0x30
 800b5da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e0:	e841 2300 	strex	r3, r2, [r1]
 800b5e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e5      	bne.n	800b5b8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fb f8af 	bl	800675c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fcfe 	bl	800c000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60e:	2b40      	cmp	r3, #64	; 0x40
 800b610:	bf0c      	ite	eq
 800b612:	2301      	moveq	r3, #1
 800b614:	2300      	movne	r3, #0
 800b616:	b2db      	uxtb	r3, r3
 800b618:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b22      	cmp	r3, #34	; 0x22
 800b624:	d128      	bne.n	800b678 <HAL_UART_DMAStop+0xf4>
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d025      	beq.n	800b678 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3314      	adds	r3, #20
 800b632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b642:	637b      	str	r3, [r7, #52]	; 0x34
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3314      	adds	r3, #20
 800b64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b64c:	61fa      	str	r2, [r7, #28]
 800b64e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	69b9      	ldr	r1, [r7, #24]
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	617b      	str	r3, [r7, #20]
   return(result);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e5      	bne.n	800b62c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fb f875 	bl	800675c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fcec 	bl	800c050 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3740      	adds	r7, #64	; 0x40
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b0ba      	sub	sp, #232	; 0xe8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b6c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10f      	bne.n	800b6ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d009      	beq.n	800b6ea <HAL_UART_IRQHandler+0x66>
 800b6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6da:	f003 0320 	and.w	r3, r3, #32
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fd93 	bl	800c20e <UART_Receive_IT>
      return;
 800b6e8:	e256      	b.n	800bb98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80de 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x22c>
 800b6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d106      	bne.n	800b70e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b704:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80d1 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00b      	beq.n	800b732 <HAL_UART_IRQHandler+0xae>
 800b71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f043 0201 	orr.w	r2, r3, #1
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b736:	f003 0304 	and.w	r3, r3, #4
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <HAL_UART_IRQHandler+0xd2>
 800b73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74e:	f043 0202 	orr.w	r2, r3, #2
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_UART_IRQHandler+0xf6>
 800b762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b772:	f043 0204 	orr.w	r2, r3, #4
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d011      	beq.n	800b7aa <HAL_UART_IRQHandler+0x126>
 800b786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d105      	bne.n	800b79e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d005      	beq.n	800b7aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	f043 0208 	orr.w	r2, r3, #8
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 81ed 	beq.w	800bb8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b8:	f003 0320 	and.w	r3, r3, #32
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d008      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x14e>
 800b7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c4:	f003 0320 	and.w	r3, r3, #32
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fd1e 	bl	800c20e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	695b      	ldr	r3, [r3, #20]
 800b7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7dc:	2b40      	cmp	r3, #64	; 0x40
 800b7de:	bf0c      	ite	eq
 800b7e0:	2301      	moveq	r3, #1
 800b7e2:	2300      	movne	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d103      	bne.n	800b7fe <HAL_UART_IRQHandler+0x17a>
 800b7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d04f      	beq.n	800b89e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fc26 	bl	800c050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80e:	2b40      	cmp	r3, #64	; 0x40
 800b810:	d141      	bne.n	800b896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3314      	adds	r3, #20
 800b818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3314      	adds	r3, #20
 800b83a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b83e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b84a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1d9      	bne.n	800b812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	2b00      	cmp	r3, #0
 800b864:	d013      	beq.n	800b88e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86a:	4a7d      	ldr	r2, [pc, #500]	; (800ba60 <HAL_UART_IRQHandler+0x3dc>)
 800b86c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b872:	4618      	mov	r0, r3
 800b874:	f7fa ffe2 	bl	800683c <HAL_DMA_Abort_IT>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d016      	beq.n	800b8ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b88c:	e00e      	b.n	800b8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f9ae 	bl	800bbf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b894:	e00a      	b.n	800b8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f9aa 	bl	800bbf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b89c:	e006      	b.n	800b8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f9a6 	bl	800bbf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b8aa:	e170      	b.n	800bb8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ac:	bf00      	nop
    return;
 800b8ae:	e16e      	b.n	800bb8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	f040 814a 	bne.w	800bb4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8be:	f003 0310 	and.w	r3, r3, #16
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 8143 	beq.w	800bb4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8cc:	f003 0310 	and.w	r3, r3, #16
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 813c 	beq.w	800bb4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60bb      	str	r3, [r7, #8]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60bb      	str	r3, [r7, #8]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	60bb      	str	r3, [r7, #8]
 800b8ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f6:	2b40      	cmp	r3, #64	; 0x40
 800b8f8:	f040 80b4 	bne.w	800ba64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8140 	beq.w	800bb92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b91a:	429a      	cmp	r2, r3
 800b91c:	f080 8139 	bcs.w	800bb92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b932:	f000 8088 	beq.w	800ba46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	330c      	adds	r3, #12
 800b93c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b94c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	330c      	adds	r3, #12
 800b95e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b96e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1d9      	bne.n	800b936 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3314      	adds	r3, #20
 800b988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b994:	f023 0301 	bic.w	r3, r3, #1
 800b998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3314      	adds	r3, #20
 800b9a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e1      	bne.n	800b982 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3314      	adds	r3, #20
 800b9c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3314      	adds	r3, #20
 800b9de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e3      	bne.n	800b9be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	330c      	adds	r3, #12
 800ba0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0e:	e853 3f00 	ldrex	r3, [r3]
 800ba12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba16:	f023 0310 	bic.w	r3, r3, #16
 800ba1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	330c      	adds	r3, #12
 800ba24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba28:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba30:	e841 2300 	strex	r3, r2, [r1]
 800ba34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e3      	bne.n	800ba04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fa fe8b 	bl	800675c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f8d4 	bl	800bc04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba5c:	e099      	b.n	800bb92 <HAL_UART_IRQHandler+0x50e>
 800ba5e:	bf00      	nop
 800ba60:	0800c117 	.word	0x0800c117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 808b 	beq.w	800bb96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ba80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8086 	beq.w	800bb96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	330c      	adds	r3, #12
 800ba90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	330c      	adds	r3, #12
 800baaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800baae:	647a      	str	r2, [r7, #68]	; 0x44
 800bab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1e3      	bne.n	800ba8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3314      	adds	r3, #20
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	623b      	str	r3, [r7, #32]
   return(result);
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	f023 0301 	bic.w	r3, r3, #1
 800bad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	3314      	adds	r3, #20
 800bae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bae6:	633a      	str	r2, [r7, #48]	; 0x30
 800bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800baec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e3      	bne.n	800bac2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2220      	movs	r2, #32
 800bafe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	330c      	adds	r3, #12
 800bb0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0310 	bic.w	r3, r3, #16
 800bb1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	330c      	adds	r3, #12
 800bb28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb2c:	61fa      	str	r2, [r7, #28]
 800bb2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb30:	69b9      	ldr	r1, [r7, #24]
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	e841 2300 	strex	r3, r2, [r1]
 800bb38:	617b      	str	r3, [r7, #20]
   return(result);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e3      	bne.n	800bb08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f85c 	bl	800bc04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb4c:	e023      	b.n	800bb96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d009      	beq.n	800bb6e <HAL_UART_IRQHandler+0x4ea>
 800bb5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fae9 	bl	800c13e <UART_Transmit_IT>
    return;
 800bb6c:	e014      	b.n	800bb98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00e      	beq.n	800bb98 <HAL_UART_IRQHandler+0x514>
 800bb7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fb29 	bl	800c1de <UART_EndTransmit_IT>
    return;
 800bb8c:	e004      	b.n	800bb98 <HAL_UART_IRQHandler+0x514>
    return;
 800bb8e:	bf00      	nop
 800bb90:	e002      	b.n	800bb98 <HAL_UART_IRQHandler+0x514>
      return;
 800bb92:	bf00      	nop
 800bb94:	e000      	b.n	800bb98 <HAL_UART_IRQHandler+0x514>
      return;
 800bb96:	bf00      	nop
  }
}
 800bb98:	37e8      	adds	r7, #232	; 0xe8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop

0800bba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b090      	sub	sp, #64	; 0x40
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d137      	bne.n	800bca8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3314      	adds	r3, #20
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc54:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc5e:	633a      	str	r2, [r7, #48]	; 0x30
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e5      	bne.n	800bc3e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	330c      	adds	r3, #12
 800bc78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
 800bc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	330c      	adds	r3, #12
 800bc90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc92:	61fa      	str	r2, [r7, #28]
 800bc94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	69b9      	ldr	r1, [r7, #24]
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	e841 2300 	strex	r3, r2, [r1]
 800bc9e:	617b      	str	r3, [r7, #20]
   return(result);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e5      	bne.n	800bc72 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bca6:	e002      	b.n	800bcae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcaa:	f7ff ff79 	bl	800bba0 <HAL_UART_TxCpltCallback>
}
 800bcae:	bf00      	nop
 800bcb0:	3740      	adds	r7, #64	; 0x40
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7ff ff75 	bl	800bbb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b09c      	sub	sp, #112	; 0x70
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d172      	bne.n	800bdd4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bcee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	330c      	adds	r3, #12
 800bcfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	330c      	adds	r3, #12
 800bd12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd14:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e5      	bne.n	800bcf4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3a:	f023 0301 	bic.w	r3, r3, #1
 800bd3e:	667b      	str	r3, [r7, #100]	; 0x64
 800bd40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3314      	adds	r3, #20
 800bd46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd48:	647a      	str	r2, [r7, #68]	; 0x44
 800bd4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e5      	bne.n	800bd28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3314      	adds	r3, #20
 800bd62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	e853 3f00 	ldrex	r3, [r3]
 800bd6a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd72:	663b      	str	r3, [r7, #96]	; 0x60
 800bd74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3314      	adds	r3, #20
 800bd7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd7c:	633a      	str	r2, [r7, #48]	; 0x30
 800bd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd84:	e841 2300 	strex	r3, r2, [r1]
 800bd88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e5      	bne.n	800bd5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd92:	2220      	movs	r2, #32
 800bd94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d119      	bne.n	800bdd4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	330c      	adds	r3, #12
 800bda6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0310 	bic.w	r3, r3, #16
 800bdb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bdc0:	61fa      	str	r2, [r7, #28]
 800bdc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	69b9      	ldr	r1, [r7, #24]
 800bdc6:	69fa      	ldr	r2, [r7, #28]
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e5      	bne.n	800bda0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d106      	bne.n	800bdea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bde0:	4619      	mov	r1, r3
 800bde2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bde4:	f7ff ff0e 	bl	800bc04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bde8:	e002      	b.n	800bdf0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bdea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bdec:	f7ff feec 	bl	800bbc8 <HAL_UART_RxCpltCallback>
}
 800bdf0:	bf00      	nop
 800bdf2:	3770      	adds	r7, #112	; 0x70
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d108      	bne.n	800be20 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	b29b      	uxth	r3, r3
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff fef3 	bl	800bc04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be1e:	e002      	b.n	800be26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fedb 	bl	800bbdc <HAL_UART_RxHalfCpltCallback>
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4a:	2b80      	cmp	r3, #128	; 0x80
 800be4c:	bf0c      	ite	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	2300      	movne	r3, #0
 800be52:	b2db      	uxtb	r3, r3
 800be54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b21      	cmp	r3, #33	; 0x21
 800be60:	d108      	bne.n	800be74 <UART_DMAError+0x46>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2200      	movs	r2, #0
 800be6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800be6e:	68b8      	ldr	r0, [r7, #8]
 800be70:	f000 f8c6 	bl	800c000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	bf0c      	ite	eq
 800be82:	2301      	moveq	r3, #1
 800be84:	2300      	movne	r3, #0
 800be86:	b2db      	uxtb	r3, r3
 800be88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b22      	cmp	r3, #34	; 0x22
 800be94:	d108      	bne.n	800bea8 <UART_DMAError+0x7a>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2200      	movs	r2, #0
 800bea0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f000 f8d4 	bl	800c050 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beac:	f043 0210 	orr.w	r2, r3, #16
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beb4:	68b8      	ldr	r0, [r7, #8]
 800beb6:	f7ff fe9b 	bl	800bbf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b098      	sub	sp, #96	; 0x60
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	4613      	mov	r3, r2
 800bed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	88fa      	ldrh	r2, [r7, #6]
 800bedc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2222      	movs	r2, #34	; 0x22
 800bee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	4a40      	ldr	r2, [pc, #256]	; (800bff4 <UART_Start_Receive_DMA+0x130>)
 800bef2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	4a3f      	ldr	r2, [pc, #252]	; (800bff8 <UART_Start_Receive_DMA+0x134>)
 800befa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf00:	4a3e      	ldr	r2, [pc, #248]	; (800bffc <UART_Start_Receive_DMA+0x138>)
 800bf02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf08:	2200      	movs	r2, #0
 800bf0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	88fb      	ldrh	r3, [r7, #6]
 800bf24:	f7fa fbc2 	bl	80066ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bf28:	2300      	movs	r3, #0
 800bf2a:	613b      	str	r3, [r7, #16]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d019      	beq.n	800bf82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	330c      	adds	r3, #12
 800bf54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf64:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	330c      	adds	r3, #12
 800bf6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e5      	bne.n	800bf4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3314      	adds	r3, #20
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	e853 3f00 	ldrex	r3, [r3]
 800bf90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	657b      	str	r3, [r7, #84]	; 0x54
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfa2:	63ba      	str	r2, [r7, #56]	; 0x38
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e5      	bne.n	800bf82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3314      	adds	r3, #20
 800bfbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfcc:	653b      	str	r3, [r7, #80]	; 0x50
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3314      	adds	r3, #20
 800bfd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfd6:	627a      	str	r2, [r7, #36]	; 0x24
 800bfd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfda:	6a39      	ldr	r1, [r7, #32]
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	e841 2300 	strex	r3, r2, [r1]
 800bfe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e5      	bne.n	800bfb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3760      	adds	r7, #96	; 0x60
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	0800bcd3 	.word	0x0800bcd3
 800bff8:	0800bdf9 	.word	0x0800bdf9
 800bffc:	0800be2f 	.word	0x0800be2f

0800c000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c000:	b480      	push	{r7}
 800c002:	b089      	sub	sp, #36	; 0x24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	330c      	adds	r3, #12
 800c00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	e853 3f00 	ldrex	r3, [r3]
 800c016:	60bb      	str	r3, [r7, #8]
   return(result);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	330c      	adds	r3, #12
 800c026:	69fa      	ldr	r2, [r7, #28]
 800c028:	61ba      	str	r2, [r7, #24]
 800c02a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02c:	6979      	ldr	r1, [r7, #20]
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	e841 2300 	strex	r3, r2, [r1]
 800c034:	613b      	str	r3, [r7, #16]
   return(result);
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e5      	bne.n	800c008 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2220      	movs	r2, #32
 800c040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c044:	bf00      	nop
 800c046:	3724      	adds	r7, #36	; 0x24
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b095      	sub	sp, #84	; 0x54
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	330c      	adds	r3, #12
 800c05e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	e853 3f00 	ldrex	r3, [r3]
 800c066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c06e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	330c      	adds	r3, #12
 800c076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c078:	643a      	str	r2, [r7, #64]	; 0x40
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c07e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c080:	e841 2300 	strex	r3, r2, [r1]
 800c084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1e5      	bne.n	800c058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3314      	adds	r3, #20
 800c092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f023 0301 	bic.w	r3, r3, #1
 800c0a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3314      	adds	r3, #20
 800c0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e5      	bne.n	800c08c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d119      	bne.n	800c0fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	330c      	adds	r3, #12
 800c0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f023 0310 	bic.w	r3, r3, #16
 800c0de:	647b      	str	r3, [r7, #68]	; 0x44
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	330c      	adds	r3, #12
 800c0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0e8:	61ba      	str	r2, [r7, #24]
 800c0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6979      	ldr	r1, [r7, #20]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e5      	bne.n	800c0c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c10a:	bf00      	nop
 800c10c:	3754      	adds	r7, #84	; 0x54
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f7ff fd5d 	bl	800bbf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b21      	cmp	r3, #33	; 0x21
 800c150:	d13e      	bne.n	800c1d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c15a:	d114      	bne.n	800c186 <UART_Transmit_IT+0x48>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d110      	bne.n	800c186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	1c9a      	adds	r2, r3, #2
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	621a      	str	r2, [r3, #32]
 800c184:	e008      	b.n	800c198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	1c59      	adds	r1, r3, #1
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	6211      	str	r1, [r2, #32]
 800c190:	781a      	ldrb	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10f      	bne.n	800c1cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68da      	ldr	r2, [r3, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e000      	b.n	800c1d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c1d0:	2302      	movs	r3, #2
  }
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68da      	ldr	r2, [r3, #12]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2220      	movs	r2, #32
 800c1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fcce 	bl	800bba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b08c      	sub	sp, #48	; 0x30
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b22      	cmp	r3, #34	; 0x22
 800c220:	f040 80ab 	bne.w	800c37a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22c:	d117      	bne.n	800c25e <UART_Receive_IT+0x50>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d113      	bne.n	800c25e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	b29b      	uxth	r3, r3
 800c248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c256:	1c9a      	adds	r2, r3, #2
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	629a      	str	r2, [r3, #40]	; 0x28
 800c25c:	e026      	b.n	800c2ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c270:	d007      	beq.n	800c282 <UART_Receive_IT+0x74>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10a      	bne.n	800c290 <UART_Receive_IT+0x82>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e008      	b.n	800c2a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d15a      	bne.n	800c376 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f022 0220 	bic.w	r2, r2, #32
 800c2ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68da      	ldr	r2, [r3, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	695a      	ldr	r2, [r3, #20]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f022 0201 	bic.w	r2, r2, #1
 800c2ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d135      	bne.n	800c36c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	330c      	adds	r3, #12
 800c30c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	613b      	str	r3, [r7, #16]
   return(result);
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f023 0310 	bic.w	r3, r3, #16
 800c31c:	627b      	str	r3, [r7, #36]	; 0x24
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	330c      	adds	r3, #12
 800c324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c326:	623a      	str	r2, [r7, #32]
 800c328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	69f9      	ldr	r1, [r7, #28]
 800c32c:	6a3a      	ldr	r2, [r7, #32]
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	61bb      	str	r3, [r7, #24]
   return(result);
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e5      	bne.n	800c306 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0310 	and.w	r3, r3, #16
 800c344:	2b10      	cmp	r3, #16
 800c346:	d10a      	bne.n	800c35e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c348:	2300      	movs	r3, #0
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff fc4d 	bl	800bc04 <HAL_UARTEx_RxEventCallback>
 800c36a:	e002      	b.n	800c372 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff fc2b 	bl	800bbc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	e002      	b.n	800c37c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	e000      	b.n	800c37c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c37a:	2302      	movs	r3, #2
  }
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3730      	adds	r7, #48	; 0x30
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c388:	b0c0      	sub	sp, #256	; 0x100
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3a0:	68d9      	ldr	r1, [r3, #12]
 800c3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	ea40 0301 	orr.w	r3, r0, r1
 800c3ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	431a      	orrs	r2, r3
 800c3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c3dc:	f021 010c 	bic.w	r1, r1, #12
 800c3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c3fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3fe:	6999      	ldr	r1, [r3, #24]
 800c400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	ea40 0301 	orr.w	r3, r0, r1
 800c40a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b8f      	ldr	r3, [pc, #572]	; (800c650 <UART_SetConfig+0x2cc>)
 800c414:	429a      	cmp	r2, r3
 800c416:	d005      	beq.n	800c424 <UART_SetConfig+0xa0>
 800c418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b8d      	ldr	r3, [pc, #564]	; (800c654 <UART_SetConfig+0x2d0>)
 800c420:	429a      	cmp	r2, r3
 800c422:	d104      	bne.n	800c42e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c424:	f7fd fdfa 	bl	800a01c <HAL_RCC_GetPCLK2Freq>
 800c428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c42c:	e003      	b.n	800c436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c42e:	f7fd fde1 	bl	8009ff4 <HAL_RCC_GetPCLK1Freq>
 800c432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c440:	f040 810c 	bne.w	800c65c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c448:	2200      	movs	r2, #0
 800c44a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c44e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c456:	4622      	mov	r2, r4
 800c458:	462b      	mov	r3, r5
 800c45a:	1891      	adds	r1, r2, r2
 800c45c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c45e:	415b      	adcs	r3, r3
 800c460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c466:	4621      	mov	r1, r4
 800c468:	eb12 0801 	adds.w	r8, r2, r1
 800c46c:	4629      	mov	r1, r5
 800c46e:	eb43 0901 	adc.w	r9, r3, r1
 800c472:	f04f 0200 	mov.w	r2, #0
 800c476:	f04f 0300 	mov.w	r3, #0
 800c47a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c47e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c486:	4690      	mov	r8, r2
 800c488:	4699      	mov	r9, r3
 800c48a:	4623      	mov	r3, r4
 800c48c:	eb18 0303 	adds.w	r3, r8, r3
 800c490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c494:	462b      	mov	r3, r5
 800c496:	eb49 0303 	adc.w	r3, r9, r3
 800c49a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c4ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	18db      	adds	r3, r3, r3
 800c4b6:	653b      	str	r3, [r7, #80]	; 0x50
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	eb42 0303 	adc.w	r3, r2, r3
 800c4be:	657b      	str	r3, [r7, #84]	; 0x54
 800c4c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c4c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c4c8:	f7f4 fb62 	bl	8000b90 <__aeabi_uldivmod>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4b61      	ldr	r3, [pc, #388]	; (800c658 <UART_SetConfig+0x2d4>)
 800c4d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c4d6:	095b      	lsrs	r3, r3, #5
 800c4d8:	011c      	lsls	r4, r3, #4
 800c4da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c4e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c4ec:	4642      	mov	r2, r8
 800c4ee:	464b      	mov	r3, r9
 800c4f0:	1891      	adds	r1, r2, r2
 800c4f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4f4:	415b      	adcs	r3, r3
 800c4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4fc:	4641      	mov	r1, r8
 800c4fe:	eb12 0a01 	adds.w	sl, r2, r1
 800c502:	4649      	mov	r1, r9
 800c504:	eb43 0b01 	adc.w	fp, r3, r1
 800c508:	f04f 0200 	mov.w	r2, #0
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c51c:	4692      	mov	sl, r2
 800c51e:	469b      	mov	fp, r3
 800c520:	4643      	mov	r3, r8
 800c522:	eb1a 0303 	adds.w	r3, sl, r3
 800c526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c52a:	464b      	mov	r3, r9
 800c52c:	eb4b 0303 	adc.w	r3, fp, r3
 800c530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c548:	460b      	mov	r3, r1
 800c54a:	18db      	adds	r3, r3, r3
 800c54c:	643b      	str	r3, [r7, #64]	; 0x40
 800c54e:	4613      	mov	r3, r2
 800c550:	eb42 0303 	adc.w	r3, r2, r3
 800c554:	647b      	str	r3, [r7, #68]	; 0x44
 800c556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c55a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c55e:	f7f4 fb17 	bl	8000b90 <__aeabi_uldivmod>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4611      	mov	r1, r2
 800c568:	4b3b      	ldr	r3, [pc, #236]	; (800c658 <UART_SetConfig+0x2d4>)
 800c56a:	fba3 2301 	umull	r2, r3, r3, r1
 800c56e:	095b      	lsrs	r3, r3, #5
 800c570:	2264      	movs	r2, #100	; 0x64
 800c572:	fb02 f303 	mul.w	r3, r2, r3
 800c576:	1acb      	subs	r3, r1, r3
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c57e:	4b36      	ldr	r3, [pc, #216]	; (800c658 <UART_SetConfig+0x2d4>)
 800c580:	fba3 2302 	umull	r2, r3, r3, r2
 800c584:	095b      	lsrs	r3, r3, #5
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c58c:	441c      	add	r4, r3
 800c58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c592:	2200      	movs	r2, #0
 800c594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c59c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	1891      	adds	r1, r2, r2
 800c5a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5a8:	415b      	adcs	r3, r3
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c5b0:	4641      	mov	r1, r8
 800c5b2:	1851      	adds	r1, r2, r1
 800c5b4:	6339      	str	r1, [r7, #48]	; 0x30
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	414b      	adcs	r3, r1
 800c5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c5bc:	f04f 0200 	mov.w	r2, #0
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c5c8:	4659      	mov	r1, fp
 800c5ca:	00cb      	lsls	r3, r1, #3
 800c5cc:	4651      	mov	r1, sl
 800c5ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5d2:	4651      	mov	r1, sl
 800c5d4:	00ca      	lsls	r2, r1, #3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4642      	mov	r2, r8
 800c5de:	189b      	adds	r3, r3, r2
 800c5e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5e4:	464b      	mov	r3, r9
 800c5e6:	460a      	mov	r2, r1
 800c5e8:	eb42 0303 	adc.w	r3, r2, r3
 800c5ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c5fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c604:	460b      	mov	r3, r1
 800c606:	18db      	adds	r3, r3, r3
 800c608:	62bb      	str	r3, [r7, #40]	; 0x28
 800c60a:	4613      	mov	r3, r2
 800c60c:	eb42 0303 	adc.w	r3, r2, r3
 800c610:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c61a:	f7f4 fab9 	bl	8000b90 <__aeabi_uldivmod>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	4b0d      	ldr	r3, [pc, #52]	; (800c658 <UART_SetConfig+0x2d4>)
 800c624:	fba3 1302 	umull	r1, r3, r3, r2
 800c628:	095b      	lsrs	r3, r3, #5
 800c62a:	2164      	movs	r1, #100	; 0x64
 800c62c:	fb01 f303 	mul.w	r3, r1, r3
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	3332      	adds	r3, #50	; 0x32
 800c636:	4a08      	ldr	r2, [pc, #32]	; (800c658 <UART_SetConfig+0x2d4>)
 800c638:	fba2 2303 	umull	r2, r3, r2, r3
 800c63c:	095b      	lsrs	r3, r3, #5
 800c63e:	f003 0207 	and.w	r2, r3, #7
 800c642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4422      	add	r2, r4
 800c64a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c64c:	e105      	b.n	800c85a <UART_SetConfig+0x4d6>
 800c64e:	bf00      	nop
 800c650:	40011000 	.word	0x40011000
 800c654:	40011400 	.word	0x40011400
 800c658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c65c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c660:	2200      	movs	r2, #0
 800c662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c66a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c66e:	4642      	mov	r2, r8
 800c670:	464b      	mov	r3, r9
 800c672:	1891      	adds	r1, r2, r2
 800c674:	6239      	str	r1, [r7, #32]
 800c676:	415b      	adcs	r3, r3
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
 800c67a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c67e:	4641      	mov	r1, r8
 800c680:	1854      	adds	r4, r2, r1
 800c682:	4649      	mov	r1, r9
 800c684:	eb43 0501 	adc.w	r5, r3, r1
 800c688:	f04f 0200 	mov.w	r2, #0
 800c68c:	f04f 0300 	mov.w	r3, #0
 800c690:	00eb      	lsls	r3, r5, #3
 800c692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c696:	00e2      	lsls	r2, r4, #3
 800c698:	4614      	mov	r4, r2
 800c69a:	461d      	mov	r5, r3
 800c69c:	4643      	mov	r3, r8
 800c69e:	18e3      	adds	r3, r4, r3
 800c6a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6a4:	464b      	mov	r3, r9
 800c6a6:	eb45 0303 	adc.w	r3, r5, r3
 800c6aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c6ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c6be:	f04f 0200 	mov.w	r2, #0
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	008b      	lsls	r3, r1, #2
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	008a      	lsls	r2, r1, #2
 800c6d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c6dc:	f7f4 fa58 	bl	8000b90 <__aeabi_uldivmod>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4b60      	ldr	r3, [pc, #384]	; (800c868 <UART_SetConfig+0x4e4>)
 800c6e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c6ea:	095b      	lsrs	r3, r3, #5
 800c6ec:	011c      	lsls	r4, r3, #4
 800c6ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c6f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c6fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c700:	4642      	mov	r2, r8
 800c702:	464b      	mov	r3, r9
 800c704:	1891      	adds	r1, r2, r2
 800c706:	61b9      	str	r1, [r7, #24]
 800c708:	415b      	adcs	r3, r3
 800c70a:	61fb      	str	r3, [r7, #28]
 800c70c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c710:	4641      	mov	r1, r8
 800c712:	1851      	adds	r1, r2, r1
 800c714:	6139      	str	r1, [r7, #16]
 800c716:	4649      	mov	r1, r9
 800c718:	414b      	adcs	r3, r1
 800c71a:	617b      	str	r3, [r7, #20]
 800c71c:	f04f 0200 	mov.w	r2, #0
 800c720:	f04f 0300 	mov.w	r3, #0
 800c724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c728:	4659      	mov	r1, fp
 800c72a:	00cb      	lsls	r3, r1, #3
 800c72c:	4651      	mov	r1, sl
 800c72e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c732:	4651      	mov	r1, sl
 800c734:	00ca      	lsls	r2, r1, #3
 800c736:	4610      	mov	r0, r2
 800c738:	4619      	mov	r1, r3
 800c73a:	4603      	mov	r3, r0
 800c73c:	4642      	mov	r2, r8
 800c73e:	189b      	adds	r3, r3, r2
 800c740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c744:	464b      	mov	r3, r9
 800c746:	460a      	mov	r2, r1
 800c748:	eb42 0303 	adc.w	r3, r2, r3
 800c74c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	67bb      	str	r3, [r7, #120]	; 0x78
 800c75a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c75c:	f04f 0200 	mov.w	r2, #0
 800c760:	f04f 0300 	mov.w	r3, #0
 800c764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c768:	4649      	mov	r1, r9
 800c76a:	008b      	lsls	r3, r1, #2
 800c76c:	4641      	mov	r1, r8
 800c76e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c772:	4641      	mov	r1, r8
 800c774:	008a      	lsls	r2, r1, #2
 800c776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c77a:	f7f4 fa09 	bl	8000b90 <__aeabi_uldivmod>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4b39      	ldr	r3, [pc, #228]	; (800c868 <UART_SetConfig+0x4e4>)
 800c784:	fba3 1302 	umull	r1, r3, r3, r2
 800c788:	095b      	lsrs	r3, r3, #5
 800c78a:	2164      	movs	r1, #100	; 0x64
 800c78c:	fb01 f303 	mul.w	r3, r1, r3
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	3332      	adds	r3, #50	; 0x32
 800c796:	4a34      	ldr	r2, [pc, #208]	; (800c868 <UART_SetConfig+0x4e4>)
 800c798:	fba2 2303 	umull	r2, r3, r2, r3
 800c79c:	095b      	lsrs	r3, r3, #5
 800c79e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7a2:	441c      	add	r4, r3
 800c7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	673b      	str	r3, [r7, #112]	; 0x70
 800c7ac:	677a      	str	r2, [r7, #116]	; 0x74
 800c7ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	1891      	adds	r1, r2, r2
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	415b      	adcs	r3, r3
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7c2:	4641      	mov	r1, r8
 800c7c4:	1851      	adds	r1, r2, r1
 800c7c6:	6039      	str	r1, [r7, #0]
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	414b      	adcs	r3, r1
 800c7cc:	607b      	str	r3, [r7, #4]
 800c7ce:	f04f 0200 	mov.w	r2, #0
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c7da:	4659      	mov	r1, fp
 800c7dc:	00cb      	lsls	r3, r1, #3
 800c7de:	4651      	mov	r1, sl
 800c7e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7e4:	4651      	mov	r1, sl
 800c7e6:	00ca      	lsls	r2, r1, #3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4642      	mov	r2, r8
 800c7f0:	189b      	adds	r3, r3, r2
 800c7f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7f4:	464b      	mov	r3, r9
 800c7f6:	460a      	mov	r2, r1
 800c7f8:	eb42 0303 	adc.w	r3, r2, r3
 800c7fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	663b      	str	r3, [r7, #96]	; 0x60
 800c808:	667a      	str	r2, [r7, #100]	; 0x64
 800c80a:	f04f 0200 	mov.w	r2, #0
 800c80e:	f04f 0300 	mov.w	r3, #0
 800c812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c816:	4649      	mov	r1, r9
 800c818:	008b      	lsls	r3, r1, #2
 800c81a:	4641      	mov	r1, r8
 800c81c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c820:	4641      	mov	r1, r8
 800c822:	008a      	lsls	r2, r1, #2
 800c824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c828:	f7f4 f9b2 	bl	8000b90 <__aeabi_uldivmod>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	4b0d      	ldr	r3, [pc, #52]	; (800c868 <UART_SetConfig+0x4e4>)
 800c832:	fba3 1302 	umull	r1, r3, r3, r2
 800c836:	095b      	lsrs	r3, r3, #5
 800c838:	2164      	movs	r1, #100	; 0x64
 800c83a:	fb01 f303 	mul.w	r3, r1, r3
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	011b      	lsls	r3, r3, #4
 800c842:	3332      	adds	r3, #50	; 0x32
 800c844:	4a08      	ldr	r2, [pc, #32]	; (800c868 <UART_SetConfig+0x4e4>)
 800c846:	fba2 2303 	umull	r2, r3, r2, r3
 800c84a:	095b      	lsrs	r3, r3, #5
 800c84c:	f003 020f 	and.w	r2, r3, #15
 800c850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4422      	add	r2, r4
 800c858:	609a      	str	r2, [r3, #8]
}
 800c85a:	bf00      	nop
 800c85c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c860:	46bd      	mov	sp, r7
 800c862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c866:	bf00      	nop
 800c868:	51eb851f 	.word	0x51eb851f

0800c86c <arm_mat_trans_f32>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	8802      	ldrh	r2, [r0, #0]
 800c872:	884b      	ldrh	r3, [r1, #2]
 800c874:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c878:	684f      	ldr	r7, [r1, #4]
 800c87a:	8840      	ldrh	r0, [r0, #2]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	b083      	sub	sp, #12
 800c880:	d14c      	bne.n	800c91c <arm_mat_trans_f32+0xb0>
 800c882:	f8b1 e000 	ldrh.w	lr, [r1]
 800c886:	4586      	cmp	lr, r0
 800c888:	d148      	bne.n	800c91c <arm_mat_trans_f32+0xb0>
 800c88a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800c88e:	009c      	lsls	r4, r3, #2
 800c890:	f00e 0e03 	and.w	lr, lr, #3
 800c894:	fb08 f904 	mul.w	r9, r8, r4
 800c898:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800c89c:	011d      	lsls	r5, r3, #4
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c8a4:	eb07 0a04 	add.w	sl, r7, r4
 800c8a8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800c8ac:	9201      	str	r2, [sp, #4]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	f1b8 0f00 	cmp.w	r8, #0
 800c8b6:	d01d      	beq.n	800c8f4 <arm_mat_trans_f32+0x88>
 800c8b8:	9900      	ldr	r1, [sp, #0]
 800c8ba:	f10c 0210 	add.w	r2, ip, #16
 800c8be:	4439      	add	r1, r7
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c8c6:	601e      	str	r6, [r3, #0]
 800c8c8:	ed52 7a03 	vldr	s15, [r2, #-12]
 800c8cc:	191e      	adds	r6, r3, r4
 800c8ce:	edc6 7a00 	vstr	s15, [r6]
 800c8d2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c8d6:	600e      	str	r6, [r1, #0]
 800c8d8:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c8dc:	190e      	adds	r6, r1, r4
 800c8de:	3801      	subs	r0, #1
 800c8e0:	442b      	add	r3, r5
 800c8e2:	f102 0210 	add.w	r2, r2, #16
 800c8e6:	edc6 7a00 	vstr	s15, [r6]
 800c8ea:	4429      	add	r1, r5
 800c8ec:	d1e9      	bne.n	800c8c2 <arm_mat_trans_f32+0x56>
 800c8ee:	44dc      	add	ip, fp
 800c8f0:	eb09 0307 	add.w	r3, r9, r7
 800c8f4:	f1be 0f00 	cmp.w	lr, #0
 800c8f8:	d009      	beq.n	800c90e <arm_mat_trans_f32+0xa2>
 800c8fa:	4672      	mov	r2, lr
 800c8fc:	4661      	mov	r1, ip
 800c8fe:	f851 0b04 	ldr.w	r0, [r1], #4
 800c902:	6018      	str	r0, [r3, #0]
 800c904:	3a01      	subs	r2, #1
 800c906:	4423      	add	r3, r4
 800c908:	d1f9      	bne.n	800c8fe <arm_mat_trans_f32+0x92>
 800c90a:	9b01      	ldr	r3, [sp, #4]
 800c90c:	449c      	add	ip, r3
 800c90e:	3704      	adds	r7, #4
 800c910:	4557      	cmp	r7, sl
 800c912:	d1cd      	bne.n	800c8b0 <arm_mat_trans_f32+0x44>
 800c914:	2000      	movs	r0, #0
 800c916:	b003      	add	sp, #12
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	f06f 0002 	mvn.w	r0, #2
 800c920:	e7f9      	b.n	800c916 <arm_mat_trans_f32+0xaa>
 800c922:	bf00      	nop

0800c924 <arm_mat_sub_f32>:
 800c924:	b4f0      	push	{r4, r5, r6, r7}
 800c926:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c92a:	6803      	ldr	r3, [r0, #0]
 800c92c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c930:	6856      	ldr	r6, [r2, #4]
 800c932:	42a3      	cmp	r3, r4
 800c934:	d15d      	bne.n	800c9f2 <arm_mat_sub_f32+0xce>
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	4293      	cmp	r3, r2
 800c93a:	d15a      	bne.n	800c9f2 <arm_mat_sub_f32+0xce>
 800c93c:	8803      	ldrh	r3, [r0, #0]
 800c93e:	8844      	ldrh	r4, [r0, #2]
 800c940:	fb04 f403 	mul.w	r4, r4, r3
 800c944:	08a5      	lsrs	r5, r4, #2
 800c946:	d032      	beq.n	800c9ae <arm_mat_sub_f32+0x8a>
 800c948:	f10c 0110 	add.w	r1, ip, #16
 800c94c:	f107 0210 	add.w	r2, r7, #16
 800c950:	f106 0310 	add.w	r3, r6, #16
 800c954:	4628      	mov	r0, r5
 800c956:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c95a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c95e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c962:	3801      	subs	r0, #1
 800c964:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c968:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c96c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c974:	f101 0110 	add.w	r1, r1, #16
 800c978:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c97c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c980:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c988:	f102 0210 	add.w	r2, r2, #16
 800c98c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c990:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c994:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c99c:	f103 0310 	add.w	r3, r3, #16
 800c9a0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c9a4:	d1d7      	bne.n	800c956 <arm_mat_sub_f32+0x32>
 800c9a6:	012b      	lsls	r3, r5, #4
 800c9a8:	449c      	add	ip, r3
 800c9aa:	441f      	add	r7, r3
 800c9ac:	441e      	add	r6, r3
 800c9ae:	f014 0403 	ands.w	r4, r4, #3
 800c9b2:	d01b      	beq.n	800c9ec <arm_mat_sub_f32+0xc8>
 800c9b4:	eddc 7a00 	vldr	s15, [ip]
 800c9b8:	ed97 7a00 	vldr	s14, [r7]
 800c9bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9c0:	3c01      	subs	r4, #1
 800c9c2:	edc6 7a00 	vstr	s15, [r6]
 800c9c6:	d011      	beq.n	800c9ec <arm_mat_sub_f32+0xc8>
 800c9c8:	eddc 7a01 	vldr	s15, [ip, #4]
 800c9cc:	ed97 7a01 	vldr	s14, [r7, #4]
 800c9d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9d4:	2c01      	cmp	r4, #1
 800c9d6:	edc6 7a01 	vstr	s15, [r6, #4]
 800c9da:	d007      	beq.n	800c9ec <arm_mat_sub_f32+0xc8>
 800c9dc:	eddc 7a02 	vldr	s15, [ip, #8]
 800c9e0:	ed97 7a02 	vldr	s14, [r7, #8]
 800c9e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9e8:	edc6 7a02 	vstr	s15, [r6, #8]
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	bcf0      	pop	{r4, r5, r6, r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	f06f 0002 	mvn.w	r0, #2
 800c9f6:	e7fa      	b.n	800c9ee <arm_mat_sub_f32+0xca>

0800c9f8 <arm_mat_mult_f32>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	8845      	ldrh	r5, [r0, #2]
 800c9fe:	880b      	ldrh	r3, [r1, #0]
 800ca00:	8806      	ldrh	r6, [r0, #0]
 800ca02:	6847      	ldr	r7, [r0, #4]
 800ca04:	6854      	ldr	r4, [r2, #4]
 800ca06:	6848      	ldr	r0, [r1, #4]
 800ca08:	b08b      	sub	sp, #44	; 0x2c
 800ca0a:	42ab      	cmp	r3, r5
 800ca0c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca0e:	9604      	str	r6, [sp, #16]
 800ca10:	8849      	ldrh	r1, [r1, #2]
 800ca12:	f040 808a 	bne.w	800cb2a <arm_mat_mult_f32+0x132>
 800ca16:	8815      	ldrh	r5, [r2, #0]
 800ca18:	42b5      	cmp	r5, r6
 800ca1a:	f040 8086 	bne.w	800cb2a <arm_mat_mult_f32+0x132>
 800ca1e:	8852      	ldrh	r2, [r2, #2]
 800ca20:	428a      	cmp	r2, r1
 800ca22:	f040 8082 	bne.w	800cb2a <arm_mat_mult_f32+0x132>
 800ca26:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ca2a:	1d01      	adds	r1, r0, #4
 800ca2c:	0116      	lsls	r6, r2, #4
 800ca2e:	9108      	str	r1, [sp, #32]
 800ca30:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800ca34:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800ca38:	9101      	str	r1, [sp, #4]
 800ca3a:	fb06 f108 	mul.w	r1, r6, r8
 800ca3e:	0095      	lsls	r5, r2, #2
 800ca40:	9103      	str	r1, [sp, #12]
 800ca42:	00d2      	lsls	r2, r2, #3
 800ca44:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800ca48:	f003 0903 	and.w	r9, r3, #3
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	f107 0b10 	add.w	fp, r7, #16
 800ca52:	eb04 0a05 	add.w	sl, r4, r5
 800ca56:	9107      	str	r1, [sp, #28]
 800ca58:	9202      	str	r2, [sp, #8]
 800ca5a:	9306      	str	r3, [sp, #24]
 800ca5c:	f1ab 0310 	sub.w	r3, fp, #16
 800ca60:	9305      	str	r3, [sp, #20]
 800ca62:	9b07      	ldr	r3, [sp, #28]
 800ca64:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ca68:	eb03 0c0a 	add.w	ip, r3, sl
 800ca6c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800cb34 <arm_mat_mult_f32+0x13c>
 800ca70:	f1b8 0f00 	cmp.w	r8, #0
 800ca74:	d053      	beq.n	800cb1e <arm_mat_mult_f32+0x126>
 800ca76:	9b02      	ldr	r3, [sp, #8]
 800ca78:	4644      	mov	r4, r8
 800ca7a:	18c1      	adds	r1, r0, r3
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	465b      	mov	r3, fp
 800ca80:	ed92 6a00 	vldr	s12, [r2]
 800ca84:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ca88:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ca8c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ca90:	ed91 5a00 	vldr	s10, [r1]
 800ca94:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ca98:	1957      	adds	r7, r2, r5
 800ca9a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca9e:	ed97 6a00 	vldr	s12, [r7]
 800caa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800caa6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800caaa:	194f      	adds	r7, r1, r5
 800caac:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cab0:	ee26 7a85 	vmul.f32	s14, s13, s10
 800cab4:	edd7 7a00 	vldr	s15, [r7]
 800cab8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cabc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cac0:	3c01      	subs	r4, #1
 800cac2:	4432      	add	r2, r6
 800cac4:	4431      	add	r1, r6
 800cac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caca:	f103 0310 	add.w	r3, r3, #16
 800cace:	d1d7      	bne.n	800ca80 <arm_mat_mult_f32+0x88>
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	9a01      	ldr	r2, [sp, #4]
 800cad4:	4418      	add	r0, r3
 800cad6:	f1b9 0f00 	cmp.w	r9, #0
 800cada:	d00b      	beq.n	800caf4 <arm_mat_mult_f32+0xfc>
 800cadc:	464b      	mov	r3, r9
 800cade:	edd0 6a00 	vldr	s13, [r0]
 800cae2:	ecb2 7a01 	vldmia	r2!, {s14}
 800cae6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800caea:	3b01      	subs	r3, #1
 800caec:	4428      	add	r0, r5
 800caee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caf2:	d1f4      	bne.n	800cade <arm_mat_mult_f32+0xe6>
 800caf4:	ecec 7a01 	vstmia	ip!, {s15}
 800caf8:	45d4      	cmp	ip, sl
 800cafa:	4670      	mov	r0, lr
 800cafc:	f10e 0e04 	add.w	lr, lr, #4
 800cb00:	d1b4      	bne.n	800ca6c <arm_mat_mult_f32+0x74>
 800cb02:	9a01      	ldr	r2, [sp, #4]
 800cb04:	9b06      	ldr	r3, [sp, #24]
 800cb06:	4611      	mov	r1, r2
 800cb08:	4419      	add	r1, r3
 800cb0a:	449b      	add	fp, r3
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	9101      	str	r1, [sp, #4]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	44aa      	add	sl, r5
 800cb14:	9304      	str	r3, [sp, #16]
 800cb16:	d004      	beq.n	800cb22 <arm_mat_mult_f32+0x12a>
 800cb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1a:	6858      	ldr	r0, [r3, #4]
 800cb1c:	e79e      	b.n	800ca5c <arm_mat_mult_f32+0x64>
 800cb1e:	9a05      	ldr	r2, [sp, #20]
 800cb20:	e7d9      	b.n	800cad6 <arm_mat_mult_f32+0xde>
 800cb22:	4618      	mov	r0, r3
 800cb24:	b00b      	add	sp, #44	; 0x2c
 800cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2a:	f06f 0002 	mvn.w	r0, #2
 800cb2e:	b00b      	add	sp, #44	; 0x2c
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb34:	00000000 	.word	0x00000000

0800cb38 <arm_mat_init_f32>:
 800cb38:	8001      	strh	r1, [r0, #0]
 800cb3a:	8042      	strh	r2, [r0, #2]
 800cb3c:	6043      	str	r3, [r0, #4]
 800cb3e:	4770      	bx	lr

0800cb40 <arm_mat_add_f32>:
 800cb40:	b4f0      	push	{r4, r5, r6, r7}
 800cb42:	e9d1 4700 	ldrd	r4, r7, [r1]
 800cb46:	6803      	ldr	r3, [r0, #0]
 800cb48:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800cb4c:	6856      	ldr	r6, [r2, #4]
 800cb4e:	42a3      	cmp	r3, r4
 800cb50:	d15d      	bne.n	800cc0e <arm_mat_add_f32+0xce>
 800cb52:	6812      	ldr	r2, [r2, #0]
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d15a      	bne.n	800cc0e <arm_mat_add_f32+0xce>
 800cb58:	8803      	ldrh	r3, [r0, #0]
 800cb5a:	8844      	ldrh	r4, [r0, #2]
 800cb5c:	fb04 f403 	mul.w	r4, r4, r3
 800cb60:	08a5      	lsrs	r5, r4, #2
 800cb62:	d032      	beq.n	800cbca <arm_mat_add_f32+0x8a>
 800cb64:	f10c 0110 	add.w	r1, ip, #16
 800cb68:	f107 0210 	add.w	r2, r7, #16
 800cb6c:	f106 0310 	add.w	r3, r6, #16
 800cb70:	4628      	mov	r0, r5
 800cb72:	ed12 7a04 	vldr	s14, [r2, #-16]
 800cb76:	ed51 7a04 	vldr	s15, [r1, #-16]
 800cb7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb7e:	3801      	subs	r0, #1
 800cb80:	ed43 7a04 	vstr	s15, [r3, #-16]
 800cb84:	ed12 7a03 	vldr	s14, [r2, #-12]
 800cb88:	ed51 7a03 	vldr	s15, [r1, #-12]
 800cb8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb90:	f101 0110 	add.w	r1, r1, #16
 800cb94:	ed43 7a03 	vstr	s15, [r3, #-12]
 800cb98:	ed12 7a02 	vldr	s14, [r2, #-8]
 800cb9c:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800cba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cba4:	f102 0210 	add.w	r2, r2, #16
 800cba8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cbac:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800cbb0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800cbb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbb8:	f103 0310 	add.w	r3, r3, #16
 800cbbc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800cbc0:	d1d7      	bne.n	800cb72 <arm_mat_add_f32+0x32>
 800cbc2:	012b      	lsls	r3, r5, #4
 800cbc4:	449c      	add	ip, r3
 800cbc6:	441f      	add	r7, r3
 800cbc8:	441e      	add	r6, r3
 800cbca:	f014 0403 	ands.w	r4, r4, #3
 800cbce:	d01b      	beq.n	800cc08 <arm_mat_add_f32+0xc8>
 800cbd0:	edd7 7a00 	vldr	s15, [r7]
 800cbd4:	ed9c 7a00 	vldr	s14, [ip]
 800cbd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbdc:	3c01      	subs	r4, #1
 800cbde:	edc6 7a00 	vstr	s15, [r6]
 800cbe2:	d011      	beq.n	800cc08 <arm_mat_add_f32+0xc8>
 800cbe4:	eddc 7a01 	vldr	s15, [ip, #4]
 800cbe8:	ed97 7a01 	vldr	s14, [r7, #4]
 800cbec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbf0:	2c01      	cmp	r4, #1
 800cbf2:	edc6 7a01 	vstr	s15, [r6, #4]
 800cbf6:	d007      	beq.n	800cc08 <arm_mat_add_f32+0xc8>
 800cbf8:	eddc 7a02 	vldr	s15, [ip, #8]
 800cbfc:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc04:	edc6 7a02 	vstr	s15, [r6, #8]
 800cc08:	2000      	movs	r0, #0
 800cc0a:	bcf0      	pop	{r4, r5, r6, r7}
 800cc0c:	4770      	bx	lr
 800cc0e:	f06f 0002 	mvn.w	r0, #2
 800cc12:	e7fa      	b.n	800cc0a <arm_mat_add_f32+0xca>

0800cc14 <__errno>:
 800cc14:	4b01      	ldr	r3, [pc, #4]	; (800cc1c <__errno+0x8>)
 800cc16:	6818      	ldr	r0, [r3, #0]
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	2000020c 	.word	0x2000020c

0800cc20 <__libc_init_array>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	4d0d      	ldr	r5, [pc, #52]	; (800cc58 <__libc_init_array+0x38>)
 800cc24:	4c0d      	ldr	r4, [pc, #52]	; (800cc5c <__libc_init_array+0x3c>)
 800cc26:	1b64      	subs	r4, r4, r5
 800cc28:	10a4      	asrs	r4, r4, #2
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	42a6      	cmp	r6, r4
 800cc2e:	d109      	bne.n	800cc44 <__libc_init_array+0x24>
 800cc30:	4d0b      	ldr	r5, [pc, #44]	; (800cc60 <__libc_init_array+0x40>)
 800cc32:	4c0c      	ldr	r4, [pc, #48]	; (800cc64 <__libc_init_array+0x44>)
 800cc34:	f000 ffe6 	bl	800dc04 <_init>
 800cc38:	1b64      	subs	r4, r4, r5
 800cc3a:	10a4      	asrs	r4, r4, #2
 800cc3c:	2600      	movs	r6, #0
 800cc3e:	42a6      	cmp	r6, r4
 800cc40:	d105      	bne.n	800cc4e <__libc_init_array+0x2e>
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
 800cc44:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc48:	4798      	blx	r3
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	e7ee      	b.n	800cc2c <__libc_init_array+0xc>
 800cc4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc52:	4798      	blx	r3
 800cc54:	3601      	adds	r6, #1
 800cc56:	e7f2      	b.n	800cc3e <__libc_init_array+0x1e>
 800cc58:	0800dc78 	.word	0x0800dc78
 800cc5c:	0800dc78 	.word	0x0800dc78
 800cc60:	0800dc78 	.word	0x0800dc78
 800cc64:	0800dc7c 	.word	0x0800dc7c

0800cc68 <memset>:
 800cc68:	4402      	add	r2, r0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d100      	bne.n	800cc72 <memset+0xa>
 800cc70:	4770      	bx	lr
 800cc72:	f803 1b01 	strb.w	r1, [r3], #1
 800cc76:	e7f9      	b.n	800cc6c <memset+0x4>

0800cc78 <floor>:
 800cc78:	ec51 0b10 	vmov	r0, r1, d0
 800cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cc84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cc88:	2e13      	cmp	r6, #19
 800cc8a:	ee10 5a10 	vmov	r5, s0
 800cc8e:	ee10 8a10 	vmov	r8, s0
 800cc92:	460c      	mov	r4, r1
 800cc94:	dc32      	bgt.n	800ccfc <floor+0x84>
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	da14      	bge.n	800ccc4 <floor+0x4c>
 800cc9a:	a333      	add	r3, pc, #204	; (adr r3, 800cd68 <floor+0xf0>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 faa0 	bl	80001e4 <__adddf3>
 800cca4:	2200      	movs	r2, #0
 800cca6:	2300      	movs	r3, #0
 800cca8:	f7f3 fee2 	bl	8000a70 <__aeabi_dcmpgt>
 800ccac:	b138      	cbz	r0, 800ccbe <floor+0x46>
 800ccae:	2c00      	cmp	r4, #0
 800ccb0:	da57      	bge.n	800cd62 <floor+0xea>
 800ccb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ccb6:	431d      	orrs	r5, r3
 800ccb8:	d001      	beq.n	800ccbe <floor+0x46>
 800ccba:	4c2d      	ldr	r4, [pc, #180]	; (800cd70 <floor+0xf8>)
 800ccbc:	2500      	movs	r5, #0
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	e025      	b.n	800cd10 <floor+0x98>
 800ccc4:	4f2b      	ldr	r7, [pc, #172]	; (800cd74 <floor+0xfc>)
 800ccc6:	4137      	asrs	r7, r6
 800ccc8:	ea01 0307 	and.w	r3, r1, r7
 800cccc:	4303      	orrs	r3, r0
 800ccce:	d01f      	beq.n	800cd10 <floor+0x98>
 800ccd0:	a325      	add	r3, pc, #148	; (adr r3, 800cd68 <floor+0xf0>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f7f3 fa85 	bl	80001e4 <__adddf3>
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f7f3 fec7 	bl	8000a70 <__aeabi_dcmpgt>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d0eb      	beq.n	800ccbe <floor+0x46>
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	bfbe      	ittt	lt
 800ccea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ccee:	fa43 f606 	asrlt.w	r6, r3, r6
 800ccf2:	19a4      	addlt	r4, r4, r6
 800ccf4:	ea24 0407 	bic.w	r4, r4, r7
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	e7e0      	b.n	800ccbe <floor+0x46>
 800ccfc:	2e33      	cmp	r6, #51	; 0x33
 800ccfe:	dd0b      	ble.n	800cd18 <floor+0xa0>
 800cd00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd04:	d104      	bne.n	800cd10 <floor+0x98>
 800cd06:	ee10 2a10 	vmov	r2, s0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	f7f3 fa6a 	bl	80001e4 <__adddf3>
 800cd10:	ec41 0b10 	vmov	d0, r0, r1
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	fa23 f707 	lsr.w	r7, r3, r7
 800cd24:	4207      	tst	r7, r0
 800cd26:	d0f3      	beq.n	800cd10 <floor+0x98>
 800cd28:	a30f      	add	r3, pc, #60	; (adr r3, 800cd68 <floor+0xf0>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fa59 	bl	80001e4 <__adddf3>
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	f7f3 fe9b 	bl	8000a70 <__aeabi_dcmpgt>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d0bf      	beq.n	800ccbe <floor+0x46>
 800cd3e:	2c00      	cmp	r4, #0
 800cd40:	da02      	bge.n	800cd48 <floor+0xd0>
 800cd42:	2e14      	cmp	r6, #20
 800cd44:	d103      	bne.n	800cd4e <floor+0xd6>
 800cd46:	3401      	adds	r4, #1
 800cd48:	ea25 0507 	bic.w	r5, r5, r7
 800cd4c:	e7b7      	b.n	800ccbe <floor+0x46>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd54:	fa03 f606 	lsl.w	r6, r3, r6
 800cd58:	4435      	add	r5, r6
 800cd5a:	4545      	cmp	r5, r8
 800cd5c:	bf38      	it	cc
 800cd5e:	18e4      	addcc	r4, r4, r3
 800cd60:	e7f2      	b.n	800cd48 <floor+0xd0>
 800cd62:	2500      	movs	r5, #0
 800cd64:	462c      	mov	r4, r5
 800cd66:	e7aa      	b.n	800ccbe <floor+0x46>
 800cd68:	8800759c 	.word	0x8800759c
 800cd6c:	7e37e43c 	.word	0x7e37e43c
 800cd70:	bff00000 	.word	0xbff00000
 800cd74:	000fffff 	.word	0x000fffff

0800cd78 <pow>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	ed2d 8b02 	vpush	{d8}
 800cd7e:	eeb0 8a40 	vmov.f32	s16, s0
 800cd82:	eef0 8a60 	vmov.f32	s17, s1
 800cd86:	ec55 4b11 	vmov	r4, r5, d1
 800cd8a:	f000 f891 	bl	800ceb0 <__ieee754_pow>
 800cd8e:	4622      	mov	r2, r4
 800cd90:	462b      	mov	r3, r5
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	ec57 6b10 	vmov	r6, r7, d0
 800cd9a:	f7f3 fe73 	bl	8000a84 <__aeabi_dcmpun>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d13b      	bne.n	800ce1a <pow+0xa2>
 800cda2:	ec51 0b18 	vmov	r0, r1, d8
 800cda6:	2200      	movs	r2, #0
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f7f3 fe39 	bl	8000a20 <__aeabi_dcmpeq>
 800cdae:	b1b8      	cbz	r0, 800cde0 <pow+0x68>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fe32 	bl	8000a20 <__aeabi_dcmpeq>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d146      	bne.n	800ce4e <pow+0xd6>
 800cdc0:	ec45 4b10 	vmov	d0, r4, r5
 800cdc4:	f000 fe8d 	bl	800dae2 <finite>
 800cdc8:	b338      	cbz	r0, 800ce1a <pow+0xa2>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4620      	mov	r0, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	f7f3 fe2f 	bl	8000a34 <__aeabi_dcmplt>
 800cdd6:	b300      	cbz	r0, 800ce1a <pow+0xa2>
 800cdd8:	f7ff ff1c 	bl	800cc14 <__errno>
 800cddc:	2322      	movs	r3, #34	; 0x22
 800cdde:	e01b      	b.n	800ce18 <pow+0xa0>
 800cde0:	ec47 6b10 	vmov	d0, r6, r7
 800cde4:	f000 fe7d 	bl	800dae2 <finite>
 800cde8:	b9e0      	cbnz	r0, 800ce24 <pow+0xac>
 800cdea:	eeb0 0a48 	vmov.f32	s0, s16
 800cdee:	eef0 0a68 	vmov.f32	s1, s17
 800cdf2:	f000 fe76 	bl	800dae2 <finite>
 800cdf6:	b1a8      	cbz	r0, 800ce24 <pow+0xac>
 800cdf8:	ec45 4b10 	vmov	d0, r4, r5
 800cdfc:	f000 fe71 	bl	800dae2 <finite>
 800ce00:	b180      	cbz	r0, 800ce24 <pow+0xac>
 800ce02:	4632      	mov	r2, r6
 800ce04:	463b      	mov	r3, r7
 800ce06:	4630      	mov	r0, r6
 800ce08:	4639      	mov	r1, r7
 800ce0a:	f7f3 fe3b 	bl	8000a84 <__aeabi_dcmpun>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0e2      	beq.n	800cdd8 <pow+0x60>
 800ce12:	f7ff feff 	bl	800cc14 <__errno>
 800ce16:	2321      	movs	r3, #33	; 0x21
 800ce18:	6003      	str	r3, [r0, #0]
 800ce1a:	ecbd 8b02 	vpop	{d8}
 800ce1e:	ec47 6b10 	vmov	d0, r6, r7
 800ce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce24:	2200      	movs	r2, #0
 800ce26:	2300      	movs	r3, #0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	f7f3 fdf8 	bl	8000a20 <__aeabi_dcmpeq>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d0f2      	beq.n	800ce1a <pow+0xa2>
 800ce34:	eeb0 0a48 	vmov.f32	s0, s16
 800ce38:	eef0 0a68 	vmov.f32	s1, s17
 800ce3c:	f000 fe51 	bl	800dae2 <finite>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d0ea      	beq.n	800ce1a <pow+0xa2>
 800ce44:	ec45 4b10 	vmov	d0, r4, r5
 800ce48:	f000 fe4b 	bl	800dae2 <finite>
 800ce4c:	e7c3      	b.n	800cdd6 <pow+0x5e>
 800ce4e:	4f01      	ldr	r7, [pc, #4]	; (800ce54 <pow+0xdc>)
 800ce50:	2600      	movs	r6, #0
 800ce52:	e7e2      	b.n	800ce1a <pow+0xa2>
 800ce54:	3ff00000 	.word	0x3ff00000

0800ce58 <sqrt>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	ed2d 8b02 	vpush	{d8}
 800ce5e:	ec55 4b10 	vmov	r4, r5, d0
 800ce62:	f000 fd53 	bl	800d90c <__ieee754_sqrt>
 800ce66:	4622      	mov	r2, r4
 800ce68:	462b      	mov	r3, r5
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce72:	eef0 8a60 	vmov.f32	s17, s1
 800ce76:	f7f3 fe05 	bl	8000a84 <__aeabi_dcmpun>
 800ce7a:	b990      	cbnz	r0, 800cea2 <sqrt+0x4a>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2300      	movs	r3, #0
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fdd6 	bl	8000a34 <__aeabi_dcmplt>
 800ce88:	b158      	cbz	r0, 800cea2 <sqrt+0x4a>
 800ce8a:	f7ff fec3 	bl	800cc14 <__errno>
 800ce8e:	2321      	movs	r3, #33	; 0x21
 800ce90:	6003      	str	r3, [r0, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	2300      	movs	r3, #0
 800ce96:	4610      	mov	r0, r2
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7f3 fc83 	bl	80007a4 <__aeabi_ddiv>
 800ce9e:	ec41 0b18 	vmov	d8, r0, r1
 800cea2:	eeb0 0a48 	vmov.f32	s0, s16
 800cea6:	eef0 0a68 	vmov.f32	s1, s17
 800ceaa:	ecbd 8b02 	vpop	{d8}
 800ceae:	bd38      	pop	{r3, r4, r5, pc}

0800ceb0 <__ieee754_pow>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	ed2d 8b06 	vpush	{d8-d10}
 800ceb8:	b089      	sub	sp, #36	; 0x24
 800ceba:	ed8d 1b00 	vstr	d1, [sp]
 800cebe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cec2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cec6:	ea58 0102 	orrs.w	r1, r8, r2
 800ceca:	ec57 6b10 	vmov	r6, r7, d0
 800cece:	d115      	bne.n	800cefc <__ieee754_pow+0x4c>
 800ced0:	19b3      	adds	r3, r6, r6
 800ced2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ced6:	4152      	adcs	r2, r2
 800ced8:	4299      	cmp	r1, r3
 800ceda:	4b89      	ldr	r3, [pc, #548]	; (800d100 <__ieee754_pow+0x250>)
 800cedc:	4193      	sbcs	r3, r2
 800cede:	f080 84d2 	bcs.w	800d886 <__ieee754_pow+0x9d6>
 800cee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	f7f3 f97b 	bl	80001e4 <__adddf3>
 800ceee:	ec41 0b10 	vmov	d0, r0, r1
 800cef2:	b009      	add	sp, #36	; 0x24
 800cef4:	ecbd 8b06 	vpop	{d8-d10}
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	4b81      	ldr	r3, [pc, #516]	; (800d104 <__ieee754_pow+0x254>)
 800cefe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cf02:	429c      	cmp	r4, r3
 800cf04:	ee10 aa10 	vmov	sl, s0
 800cf08:	463d      	mov	r5, r7
 800cf0a:	dc06      	bgt.n	800cf1a <__ieee754_pow+0x6a>
 800cf0c:	d101      	bne.n	800cf12 <__ieee754_pow+0x62>
 800cf0e:	2e00      	cmp	r6, #0
 800cf10:	d1e7      	bne.n	800cee2 <__ieee754_pow+0x32>
 800cf12:	4598      	cmp	r8, r3
 800cf14:	dc01      	bgt.n	800cf1a <__ieee754_pow+0x6a>
 800cf16:	d10f      	bne.n	800cf38 <__ieee754_pow+0x88>
 800cf18:	b172      	cbz	r2, 800cf38 <__ieee754_pow+0x88>
 800cf1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cf1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cf22:	ea55 050a 	orrs.w	r5, r5, sl
 800cf26:	d1dc      	bne.n	800cee2 <__ieee754_pow+0x32>
 800cf28:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf2c:	18db      	adds	r3, r3, r3
 800cf2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cf32:	4152      	adcs	r2, r2
 800cf34:	429d      	cmp	r5, r3
 800cf36:	e7d0      	b.n	800ceda <__ieee754_pow+0x2a>
 800cf38:	2d00      	cmp	r5, #0
 800cf3a:	da3b      	bge.n	800cfb4 <__ieee754_pow+0x104>
 800cf3c:	4b72      	ldr	r3, [pc, #456]	; (800d108 <__ieee754_pow+0x258>)
 800cf3e:	4598      	cmp	r8, r3
 800cf40:	dc51      	bgt.n	800cfe6 <__ieee754_pow+0x136>
 800cf42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cf46:	4598      	cmp	r8, r3
 800cf48:	f340 84ac 	ble.w	800d8a4 <__ieee754_pow+0x9f4>
 800cf4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf54:	2b14      	cmp	r3, #20
 800cf56:	dd0f      	ble.n	800cf78 <__ieee754_pow+0xc8>
 800cf58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf5c:	fa22 f103 	lsr.w	r1, r2, r3
 800cf60:	fa01 f303 	lsl.w	r3, r1, r3
 800cf64:	4293      	cmp	r3, r2
 800cf66:	f040 849d 	bne.w	800d8a4 <__ieee754_pow+0x9f4>
 800cf6a:	f001 0101 	and.w	r1, r1, #1
 800cf6e:	f1c1 0302 	rsb	r3, r1, #2
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	b182      	cbz	r2, 800cf98 <__ieee754_pow+0xe8>
 800cf76:	e05f      	b.n	800d038 <__ieee754_pow+0x188>
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d15b      	bne.n	800d034 <__ieee754_pow+0x184>
 800cf7c:	f1c3 0314 	rsb	r3, r3, #20
 800cf80:	fa48 f103 	asr.w	r1, r8, r3
 800cf84:	fa01 f303 	lsl.w	r3, r1, r3
 800cf88:	4543      	cmp	r3, r8
 800cf8a:	f040 8488 	bne.w	800d89e <__ieee754_pow+0x9ee>
 800cf8e:	f001 0101 	and.w	r1, r1, #1
 800cf92:	f1c1 0302 	rsb	r3, r1, #2
 800cf96:	9304      	str	r3, [sp, #16]
 800cf98:	4b5c      	ldr	r3, [pc, #368]	; (800d10c <__ieee754_pow+0x25c>)
 800cf9a:	4598      	cmp	r8, r3
 800cf9c:	d132      	bne.n	800d004 <__ieee754_pow+0x154>
 800cf9e:	f1b9 0f00 	cmp.w	r9, #0
 800cfa2:	f280 8478 	bge.w	800d896 <__ieee754_pow+0x9e6>
 800cfa6:	4959      	ldr	r1, [pc, #356]	; (800d10c <__ieee754_pow+0x25c>)
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	463b      	mov	r3, r7
 800cfac:	2000      	movs	r0, #0
 800cfae:	f7f3 fbf9 	bl	80007a4 <__aeabi_ddiv>
 800cfb2:	e79c      	b.n	800ceee <__ieee754_pow+0x3e>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	9304      	str	r3, [sp, #16]
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	d13d      	bne.n	800d038 <__ieee754_pow+0x188>
 800cfbc:	4b51      	ldr	r3, [pc, #324]	; (800d104 <__ieee754_pow+0x254>)
 800cfbe:	4598      	cmp	r8, r3
 800cfc0:	d1ea      	bne.n	800cf98 <__ieee754_pow+0xe8>
 800cfc2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cfc6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cfca:	ea53 030a 	orrs.w	r3, r3, sl
 800cfce:	f000 845a 	beq.w	800d886 <__ieee754_pow+0x9d6>
 800cfd2:	4b4f      	ldr	r3, [pc, #316]	; (800d110 <__ieee754_pow+0x260>)
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	dd08      	ble.n	800cfea <__ieee754_pow+0x13a>
 800cfd8:	f1b9 0f00 	cmp.w	r9, #0
 800cfdc:	f2c0 8457 	blt.w	800d88e <__ieee754_pow+0x9de>
 800cfe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfe4:	e783      	b.n	800ceee <__ieee754_pow+0x3e>
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	e7e5      	b.n	800cfb6 <__ieee754_pow+0x106>
 800cfea:	f1b9 0f00 	cmp.w	r9, #0
 800cfee:	f04f 0000 	mov.w	r0, #0
 800cff2:	f04f 0100 	mov.w	r1, #0
 800cff6:	f6bf af7a 	bge.w	800ceee <__ieee754_pow+0x3e>
 800cffa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cffe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d002:	e774      	b.n	800ceee <__ieee754_pow+0x3e>
 800d004:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d008:	d106      	bne.n	800d018 <__ieee754_pow+0x168>
 800d00a:	4632      	mov	r2, r6
 800d00c:	463b      	mov	r3, r7
 800d00e:	4630      	mov	r0, r6
 800d010:	4639      	mov	r1, r7
 800d012:	f7f3 fa9d 	bl	8000550 <__aeabi_dmul>
 800d016:	e76a      	b.n	800ceee <__ieee754_pow+0x3e>
 800d018:	4b3e      	ldr	r3, [pc, #248]	; (800d114 <__ieee754_pow+0x264>)
 800d01a:	4599      	cmp	r9, r3
 800d01c:	d10c      	bne.n	800d038 <__ieee754_pow+0x188>
 800d01e:	2d00      	cmp	r5, #0
 800d020:	db0a      	blt.n	800d038 <__ieee754_pow+0x188>
 800d022:	ec47 6b10 	vmov	d0, r6, r7
 800d026:	b009      	add	sp, #36	; 0x24
 800d028:	ecbd 8b06 	vpop	{d8-d10}
 800d02c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	f000 bc6c 	b.w	800d90c <__ieee754_sqrt>
 800d034:	2300      	movs	r3, #0
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	ec47 6b10 	vmov	d0, r6, r7
 800d03c:	f000 fd48 	bl	800dad0 <fabs>
 800d040:	ec51 0b10 	vmov	r0, r1, d0
 800d044:	f1ba 0f00 	cmp.w	sl, #0
 800d048:	d129      	bne.n	800d09e <__ieee754_pow+0x1ee>
 800d04a:	b124      	cbz	r4, 800d056 <__ieee754_pow+0x1a6>
 800d04c:	4b2f      	ldr	r3, [pc, #188]	; (800d10c <__ieee754_pow+0x25c>)
 800d04e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d052:	429a      	cmp	r2, r3
 800d054:	d123      	bne.n	800d09e <__ieee754_pow+0x1ee>
 800d056:	f1b9 0f00 	cmp.w	r9, #0
 800d05a:	da05      	bge.n	800d068 <__ieee754_pow+0x1b8>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	2000      	movs	r0, #0
 800d062:	492a      	ldr	r1, [pc, #168]	; (800d10c <__ieee754_pow+0x25c>)
 800d064:	f7f3 fb9e 	bl	80007a4 <__aeabi_ddiv>
 800d068:	2d00      	cmp	r5, #0
 800d06a:	f6bf af40 	bge.w	800ceee <__ieee754_pow+0x3e>
 800d06e:	9b04      	ldr	r3, [sp, #16]
 800d070:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d074:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d078:	4323      	orrs	r3, r4
 800d07a:	d108      	bne.n	800d08e <__ieee754_pow+0x1de>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4610      	mov	r0, r2
 800d082:	4619      	mov	r1, r3
 800d084:	f7f3 f8ac 	bl	80001e0 <__aeabi_dsub>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	e78f      	b.n	800cfae <__ieee754_pow+0xfe>
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	2b01      	cmp	r3, #1
 800d092:	f47f af2c 	bne.w	800ceee <__ieee754_pow+0x3e>
 800d096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d09a:	4619      	mov	r1, r3
 800d09c:	e727      	b.n	800ceee <__ieee754_pow+0x3e>
 800d09e:	0feb      	lsrs	r3, r5, #31
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	9306      	str	r3, [sp, #24]
 800d0a4:	9a06      	ldr	r2, [sp, #24]
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	d102      	bne.n	800d0b2 <__ieee754_pow+0x202>
 800d0ac:	4632      	mov	r2, r6
 800d0ae:	463b      	mov	r3, r7
 800d0b0:	e7e6      	b.n	800d080 <__ieee754_pow+0x1d0>
 800d0b2:	4b19      	ldr	r3, [pc, #100]	; (800d118 <__ieee754_pow+0x268>)
 800d0b4:	4598      	cmp	r8, r3
 800d0b6:	f340 80fb 	ble.w	800d2b0 <__ieee754_pow+0x400>
 800d0ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d0be:	4598      	cmp	r8, r3
 800d0c0:	4b13      	ldr	r3, [pc, #76]	; (800d110 <__ieee754_pow+0x260>)
 800d0c2:	dd0c      	ble.n	800d0de <__ieee754_pow+0x22e>
 800d0c4:	429c      	cmp	r4, r3
 800d0c6:	dc0f      	bgt.n	800d0e8 <__ieee754_pow+0x238>
 800d0c8:	f1b9 0f00 	cmp.w	r9, #0
 800d0cc:	da0f      	bge.n	800d0ee <__ieee754_pow+0x23e>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	b009      	add	sp, #36	; 0x24
 800d0d2:	ecbd 8b06 	vpop	{d8-d10}
 800d0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0da:	f000 bcf0 	b.w	800dabe <__math_oflow>
 800d0de:	429c      	cmp	r4, r3
 800d0e0:	dbf2      	blt.n	800d0c8 <__ieee754_pow+0x218>
 800d0e2:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <__ieee754_pow+0x25c>)
 800d0e4:	429c      	cmp	r4, r3
 800d0e6:	dd19      	ble.n	800d11c <__ieee754_pow+0x26c>
 800d0e8:	f1b9 0f00 	cmp.w	r9, #0
 800d0ec:	dcef      	bgt.n	800d0ce <__ieee754_pow+0x21e>
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	b009      	add	sp, #36	; 0x24
 800d0f2:	ecbd 8b06 	vpop	{d8-d10}
 800d0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fa:	f000 bcd7 	b.w	800daac <__math_uflow>
 800d0fe:	bf00      	nop
 800d100:	fff00000 	.word	0xfff00000
 800d104:	7ff00000 	.word	0x7ff00000
 800d108:	433fffff 	.word	0x433fffff
 800d10c:	3ff00000 	.word	0x3ff00000
 800d110:	3fefffff 	.word	0x3fefffff
 800d114:	3fe00000 	.word	0x3fe00000
 800d118:	41e00000 	.word	0x41e00000
 800d11c:	4b60      	ldr	r3, [pc, #384]	; (800d2a0 <__ieee754_pow+0x3f0>)
 800d11e:	2200      	movs	r2, #0
 800d120:	f7f3 f85e 	bl	80001e0 <__aeabi_dsub>
 800d124:	a354      	add	r3, pc, #336	; (adr r3, 800d278 <__ieee754_pow+0x3c8>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	f7f3 fa0f 	bl	8000550 <__aeabi_dmul>
 800d132:	a353      	add	r3, pc, #332	; (adr r3, 800d280 <__ieee754_pow+0x3d0>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	4606      	mov	r6, r0
 800d13a:	460f      	mov	r7, r1
 800d13c:	4620      	mov	r0, r4
 800d13e:	4629      	mov	r1, r5
 800d140:	f7f3 fa06 	bl	8000550 <__aeabi_dmul>
 800d144:	4b57      	ldr	r3, [pc, #348]	; (800d2a4 <__ieee754_pow+0x3f4>)
 800d146:	4682      	mov	sl, r0
 800d148:	468b      	mov	fp, r1
 800d14a:	2200      	movs	r2, #0
 800d14c:	4620      	mov	r0, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	f7f3 f9fe 	bl	8000550 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	a14b      	add	r1, pc, #300	; (adr r1, 800d288 <__ieee754_pow+0x3d8>)
 800d15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d15e:	f7f3 f83f 	bl	80001e0 <__aeabi_dsub>
 800d162:	4622      	mov	r2, r4
 800d164:	462b      	mov	r3, r5
 800d166:	f7f3 f9f3 	bl	8000550 <__aeabi_dmul>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	2000      	movs	r0, #0
 800d170:	494d      	ldr	r1, [pc, #308]	; (800d2a8 <__ieee754_pow+0x3f8>)
 800d172:	f7f3 f835 	bl	80001e0 <__aeabi_dsub>
 800d176:	4622      	mov	r2, r4
 800d178:	4680      	mov	r8, r0
 800d17a:	4689      	mov	r9, r1
 800d17c:	462b      	mov	r3, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	f7f3 f9e5 	bl	8000550 <__aeabi_dmul>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	4640      	mov	r0, r8
 800d18c:	4649      	mov	r1, r9
 800d18e:	f7f3 f9df 	bl	8000550 <__aeabi_dmul>
 800d192:	a33f      	add	r3, pc, #252	; (adr r3, 800d290 <__ieee754_pow+0x3e0>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 f9da 	bl	8000550 <__aeabi_dmul>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4650      	mov	r0, sl
 800d1a2:	4659      	mov	r1, fp
 800d1a4:	f7f3 f81c 	bl	80001e0 <__aeabi_dsub>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	4689      	mov	r9, r1
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 f816 	bl	80001e4 <__adddf3>
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	4632      	mov	r2, r6
 800d1bc:	463b      	mov	r3, r7
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 f80d 	bl	80001e0 <__aeabi_dsub>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 f807 	bl	80001e0 <__aeabi_dsub>
 800d1d2:	9b04      	ldr	r3, [sp, #16]
 800d1d4:	9a06      	ldr	r2, [sp, #24]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	4682      	mov	sl, r0
 800d1dc:	468b      	mov	fp, r1
 800d1de:	f040 81e7 	bne.w	800d5b0 <__ieee754_pow+0x700>
 800d1e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d298 <__ieee754_pow+0x3e8>
 800d1e6:	eeb0 8a47 	vmov.f32	s16, s14
 800d1ea:	eef0 8a67 	vmov.f32	s17, s15
 800d1ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1f2:	2600      	movs	r6, #0
 800d1f4:	4632      	mov	r2, r6
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1fc:	f7f2 fff0 	bl	80001e0 <__aeabi_dsub>
 800d200:	4622      	mov	r2, r4
 800d202:	462b      	mov	r3, r5
 800d204:	f7f3 f9a4 	bl	8000550 <__aeabi_dmul>
 800d208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d20c:	4680      	mov	r8, r0
 800d20e:	4689      	mov	r9, r1
 800d210:	4650      	mov	r0, sl
 800d212:	4659      	mov	r1, fp
 800d214:	f7f3 f99c 	bl	8000550 <__aeabi_dmul>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4640      	mov	r0, r8
 800d21e:	4649      	mov	r1, r9
 800d220:	f7f2 ffe0 	bl	80001e4 <__adddf3>
 800d224:	4632      	mov	r2, r6
 800d226:	463b      	mov	r3, r7
 800d228:	4680      	mov	r8, r0
 800d22a:	4689      	mov	r9, r1
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 f98e 	bl	8000550 <__aeabi_dmul>
 800d234:	460b      	mov	r3, r1
 800d236:	4604      	mov	r4, r0
 800d238:	460d      	mov	r5, r1
 800d23a:	4602      	mov	r2, r0
 800d23c:	4649      	mov	r1, r9
 800d23e:	4640      	mov	r0, r8
 800d240:	f7f2 ffd0 	bl	80001e4 <__adddf3>
 800d244:	4b19      	ldr	r3, [pc, #100]	; (800d2ac <__ieee754_pow+0x3fc>)
 800d246:	4299      	cmp	r1, r3
 800d248:	ec45 4b19 	vmov	d9, r4, r5
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	468b      	mov	fp, r1
 800d252:	f340 82f1 	ble.w	800d838 <__ieee754_pow+0x988>
 800d256:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d25a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d25e:	4303      	orrs	r3, r0
 800d260:	f000 81e4 	beq.w	800d62c <__ieee754_pow+0x77c>
 800d264:	ec51 0b18 	vmov	r0, r1, d8
 800d268:	2200      	movs	r2, #0
 800d26a:	2300      	movs	r3, #0
 800d26c:	f7f3 fbe2 	bl	8000a34 <__aeabi_dcmplt>
 800d270:	3800      	subs	r0, #0
 800d272:	bf18      	it	ne
 800d274:	2001      	movne	r0, #1
 800d276:	e72b      	b.n	800d0d0 <__ieee754_pow+0x220>
 800d278:	60000000 	.word	0x60000000
 800d27c:	3ff71547 	.word	0x3ff71547
 800d280:	f85ddf44 	.word	0xf85ddf44
 800d284:	3e54ae0b 	.word	0x3e54ae0b
 800d288:	55555555 	.word	0x55555555
 800d28c:	3fd55555 	.word	0x3fd55555
 800d290:	652b82fe 	.word	0x652b82fe
 800d294:	3ff71547 	.word	0x3ff71547
 800d298:	00000000 	.word	0x00000000
 800d29c:	bff00000 	.word	0xbff00000
 800d2a0:	3ff00000 	.word	0x3ff00000
 800d2a4:	3fd00000 	.word	0x3fd00000
 800d2a8:	3fe00000 	.word	0x3fe00000
 800d2ac:	408fffff 	.word	0x408fffff
 800d2b0:	4bd5      	ldr	r3, [pc, #852]	; (800d608 <__ieee754_pow+0x758>)
 800d2b2:	402b      	ands	r3, r5
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	b92b      	cbnz	r3, 800d2c4 <__ieee754_pow+0x414>
 800d2b8:	4bd4      	ldr	r3, [pc, #848]	; (800d60c <__ieee754_pow+0x75c>)
 800d2ba:	f7f3 f949 	bl	8000550 <__aeabi_dmul>
 800d2be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	1523      	asrs	r3, r4, #20
 800d2c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2ca:	4413      	add	r3, r2
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	4bd0      	ldr	r3, [pc, #832]	; (800d610 <__ieee754_pow+0x760>)
 800d2d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d2d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d2d8:	429c      	cmp	r4, r3
 800d2da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2de:	dd08      	ble.n	800d2f2 <__ieee754_pow+0x442>
 800d2e0:	4bcc      	ldr	r3, [pc, #816]	; (800d614 <__ieee754_pow+0x764>)
 800d2e2:	429c      	cmp	r4, r3
 800d2e4:	f340 8162 	ble.w	800d5ac <__ieee754_pow+0x6fc>
 800d2e8:	9b05      	ldr	r3, [sp, #20]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	9305      	str	r3, [sp, #20]
 800d2ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d2f2:	2400      	movs	r4, #0
 800d2f4:	00e3      	lsls	r3, r4, #3
 800d2f6:	9307      	str	r3, [sp, #28]
 800d2f8:	4bc7      	ldr	r3, [pc, #796]	; (800d618 <__ieee754_pow+0x768>)
 800d2fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2fe:	ed93 7b00 	vldr	d7, [r3]
 800d302:	4629      	mov	r1, r5
 800d304:	ec53 2b17 	vmov	r2, r3, d7
 800d308:	eeb0 9a47 	vmov.f32	s18, s14
 800d30c:	eef0 9a67 	vmov.f32	s19, s15
 800d310:	4682      	mov	sl, r0
 800d312:	f7f2 ff65 	bl	80001e0 <__aeabi_dsub>
 800d316:	4652      	mov	r2, sl
 800d318:	4606      	mov	r6, r0
 800d31a:	460f      	mov	r7, r1
 800d31c:	462b      	mov	r3, r5
 800d31e:	ec51 0b19 	vmov	r0, r1, d9
 800d322:	f7f2 ff5f 	bl	80001e4 <__adddf3>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	2000      	movs	r0, #0
 800d32c:	49bb      	ldr	r1, [pc, #748]	; (800d61c <__ieee754_pow+0x76c>)
 800d32e:	f7f3 fa39 	bl	80007a4 <__aeabi_ddiv>
 800d332:	ec41 0b1a 	vmov	d10, r0, r1
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4630      	mov	r0, r6
 800d33c:	4639      	mov	r1, r7
 800d33e:	f7f3 f907 	bl	8000550 <__aeabi_dmul>
 800d342:	2300      	movs	r3, #0
 800d344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d348:	9302      	str	r3, [sp, #8]
 800d34a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d34e:	46ab      	mov	fp, r5
 800d350:	106d      	asrs	r5, r5, #1
 800d352:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d356:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d35a:	ec41 0b18 	vmov	d8, r0, r1
 800d35e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d362:	2200      	movs	r2, #0
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	4614      	mov	r4, r2
 800d36a:	461d      	mov	r5, r3
 800d36c:	f7f3 f8f0 	bl	8000550 <__aeabi_dmul>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4630      	mov	r0, r6
 800d376:	4639      	mov	r1, r7
 800d378:	f7f2 ff32 	bl	80001e0 <__aeabi_dsub>
 800d37c:	ec53 2b19 	vmov	r2, r3, d9
 800d380:	4606      	mov	r6, r0
 800d382:	460f      	mov	r7, r1
 800d384:	4620      	mov	r0, r4
 800d386:	4629      	mov	r1, r5
 800d388:	f7f2 ff2a 	bl	80001e0 <__aeabi_dsub>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	4650      	mov	r0, sl
 800d392:	4659      	mov	r1, fp
 800d394:	f7f2 ff24 	bl	80001e0 <__aeabi_dsub>
 800d398:	4642      	mov	r2, r8
 800d39a:	464b      	mov	r3, r9
 800d39c:	f7f3 f8d8 	bl	8000550 <__aeabi_dmul>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	f7f2 ff1a 	bl	80001e0 <__aeabi_dsub>
 800d3ac:	ec53 2b1a 	vmov	r2, r3, d10
 800d3b0:	f7f3 f8ce 	bl	8000550 <__aeabi_dmul>
 800d3b4:	ec53 2b18 	vmov	r2, r3, d8
 800d3b8:	ec41 0b19 	vmov	d9, r0, r1
 800d3bc:	ec51 0b18 	vmov	r0, r1, d8
 800d3c0:	f7f3 f8c6 	bl	8000550 <__aeabi_dmul>
 800d3c4:	a37c      	add	r3, pc, #496	; (adr r3, 800d5b8 <__ieee754_pow+0x708>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	f7f3 f8bf 	bl	8000550 <__aeabi_dmul>
 800d3d2:	a37b      	add	r3, pc, #492	; (adr r3, 800d5c0 <__ieee754_pow+0x710>)
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f7f2 ff04 	bl	80001e4 <__adddf3>
 800d3dc:	4622      	mov	r2, r4
 800d3de:	462b      	mov	r3, r5
 800d3e0:	f7f3 f8b6 	bl	8000550 <__aeabi_dmul>
 800d3e4:	a378      	add	r3, pc, #480	; (adr r3, 800d5c8 <__ieee754_pow+0x718>)
 800d3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ea:	f7f2 fefb 	bl	80001e4 <__adddf3>
 800d3ee:	4622      	mov	r2, r4
 800d3f0:	462b      	mov	r3, r5
 800d3f2:	f7f3 f8ad 	bl	8000550 <__aeabi_dmul>
 800d3f6:	a376      	add	r3, pc, #472	; (adr r3, 800d5d0 <__ieee754_pow+0x720>)
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	f7f2 fef2 	bl	80001e4 <__adddf3>
 800d400:	4622      	mov	r2, r4
 800d402:	462b      	mov	r3, r5
 800d404:	f7f3 f8a4 	bl	8000550 <__aeabi_dmul>
 800d408:	a373      	add	r3, pc, #460	; (adr r3, 800d5d8 <__ieee754_pow+0x728>)
 800d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40e:	f7f2 fee9 	bl	80001e4 <__adddf3>
 800d412:	4622      	mov	r2, r4
 800d414:	462b      	mov	r3, r5
 800d416:	f7f3 f89b 	bl	8000550 <__aeabi_dmul>
 800d41a:	a371      	add	r3, pc, #452	; (adr r3, 800d5e0 <__ieee754_pow+0x730>)
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f7f2 fee0 	bl	80001e4 <__adddf3>
 800d424:	4622      	mov	r2, r4
 800d426:	4606      	mov	r6, r0
 800d428:	460f      	mov	r7, r1
 800d42a:	462b      	mov	r3, r5
 800d42c:	4620      	mov	r0, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	f7f3 f88e 	bl	8000550 <__aeabi_dmul>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4630      	mov	r0, r6
 800d43a:	4639      	mov	r1, r7
 800d43c:	f7f3 f888 	bl	8000550 <__aeabi_dmul>
 800d440:	4642      	mov	r2, r8
 800d442:	4604      	mov	r4, r0
 800d444:	460d      	mov	r5, r1
 800d446:	464b      	mov	r3, r9
 800d448:	ec51 0b18 	vmov	r0, r1, d8
 800d44c:	f7f2 feca 	bl	80001e4 <__adddf3>
 800d450:	ec53 2b19 	vmov	r2, r3, d9
 800d454:	f7f3 f87c 	bl	8000550 <__aeabi_dmul>
 800d458:	4622      	mov	r2, r4
 800d45a:	462b      	mov	r3, r5
 800d45c:	f7f2 fec2 	bl	80001e4 <__adddf3>
 800d460:	4642      	mov	r2, r8
 800d462:	4682      	mov	sl, r0
 800d464:	468b      	mov	fp, r1
 800d466:	464b      	mov	r3, r9
 800d468:	4640      	mov	r0, r8
 800d46a:	4649      	mov	r1, r9
 800d46c:	f7f3 f870 	bl	8000550 <__aeabi_dmul>
 800d470:	4b6b      	ldr	r3, [pc, #428]	; (800d620 <__ieee754_pow+0x770>)
 800d472:	2200      	movs	r2, #0
 800d474:	4606      	mov	r6, r0
 800d476:	460f      	mov	r7, r1
 800d478:	f7f2 feb4 	bl	80001e4 <__adddf3>
 800d47c:	4652      	mov	r2, sl
 800d47e:	465b      	mov	r3, fp
 800d480:	f7f2 feb0 	bl	80001e4 <__adddf3>
 800d484:	2000      	movs	r0, #0
 800d486:	4604      	mov	r4, r0
 800d488:	460d      	mov	r5, r1
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	4640      	mov	r0, r8
 800d490:	4649      	mov	r1, r9
 800d492:	f7f3 f85d 	bl	8000550 <__aeabi_dmul>
 800d496:	4b62      	ldr	r3, [pc, #392]	; (800d620 <__ieee754_pow+0x770>)
 800d498:	4680      	mov	r8, r0
 800d49a:	4689      	mov	r9, r1
 800d49c:	2200      	movs	r2, #0
 800d49e:	4620      	mov	r0, r4
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f7f2 fe9d 	bl	80001e0 <__aeabi_dsub>
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	463b      	mov	r3, r7
 800d4aa:	f7f2 fe99 	bl	80001e0 <__aeabi_dsub>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4650      	mov	r0, sl
 800d4b4:	4659      	mov	r1, fp
 800d4b6:	f7f2 fe93 	bl	80001e0 <__aeabi_dsub>
 800d4ba:	ec53 2b18 	vmov	r2, r3, d8
 800d4be:	f7f3 f847 	bl	8000550 <__aeabi_dmul>
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	4606      	mov	r6, r0
 800d4c6:	460f      	mov	r7, r1
 800d4c8:	462b      	mov	r3, r5
 800d4ca:	ec51 0b19 	vmov	r0, r1, d9
 800d4ce:	f7f3 f83f 	bl	8000550 <__aeabi_dmul>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4639      	mov	r1, r7
 800d4da:	f7f2 fe83 	bl	80001e4 <__adddf3>
 800d4de:	4606      	mov	r6, r0
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	f7f2 fe7b 	bl	80001e4 <__adddf3>
 800d4ee:	a33e      	add	r3, pc, #248	; (adr r3, 800d5e8 <__ieee754_pow+0x738>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	f7f3 f829 	bl	8000550 <__aeabi_dmul>
 800d4fe:	4642      	mov	r2, r8
 800d500:	ec41 0b18 	vmov	d8, r0, r1
 800d504:	464b      	mov	r3, r9
 800d506:	4620      	mov	r0, r4
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f2 fe69 	bl	80001e0 <__aeabi_dsub>
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	4630      	mov	r0, r6
 800d514:	4639      	mov	r1, r7
 800d516:	f7f2 fe63 	bl	80001e0 <__aeabi_dsub>
 800d51a:	a335      	add	r3, pc, #212	; (adr r3, 800d5f0 <__ieee754_pow+0x740>)
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f7f3 f816 	bl	8000550 <__aeabi_dmul>
 800d524:	a334      	add	r3, pc, #208	; (adr r3, 800d5f8 <__ieee754_pow+0x748>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	4606      	mov	r6, r0
 800d52c:	460f      	mov	r7, r1
 800d52e:	4620      	mov	r0, r4
 800d530:	4629      	mov	r1, r5
 800d532:	f7f3 f80d 	bl	8000550 <__aeabi_dmul>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f2 fe51 	bl	80001e4 <__adddf3>
 800d542:	9a07      	ldr	r2, [sp, #28]
 800d544:	4b37      	ldr	r3, [pc, #220]	; (800d624 <__ieee754_pow+0x774>)
 800d546:	4413      	add	r3, r2
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f2 fe4a 	bl	80001e4 <__adddf3>
 800d550:	4682      	mov	sl, r0
 800d552:	9805      	ldr	r0, [sp, #20]
 800d554:	468b      	mov	fp, r1
 800d556:	f7f2 ff91 	bl	800047c <__aeabi_i2d>
 800d55a:	9a07      	ldr	r2, [sp, #28]
 800d55c:	4b32      	ldr	r3, [pc, #200]	; (800d628 <__ieee754_pow+0x778>)
 800d55e:	4413      	add	r3, r2
 800d560:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d564:	4606      	mov	r6, r0
 800d566:	460f      	mov	r7, r1
 800d568:	4652      	mov	r2, sl
 800d56a:	465b      	mov	r3, fp
 800d56c:	ec51 0b18 	vmov	r0, r1, d8
 800d570:	f7f2 fe38 	bl	80001e4 <__adddf3>
 800d574:	4642      	mov	r2, r8
 800d576:	464b      	mov	r3, r9
 800d578:	f7f2 fe34 	bl	80001e4 <__adddf3>
 800d57c:	4632      	mov	r2, r6
 800d57e:	463b      	mov	r3, r7
 800d580:	f7f2 fe30 	bl	80001e4 <__adddf3>
 800d584:	2000      	movs	r0, #0
 800d586:	4632      	mov	r2, r6
 800d588:	463b      	mov	r3, r7
 800d58a:	4604      	mov	r4, r0
 800d58c:	460d      	mov	r5, r1
 800d58e:	f7f2 fe27 	bl	80001e0 <__aeabi_dsub>
 800d592:	4642      	mov	r2, r8
 800d594:	464b      	mov	r3, r9
 800d596:	f7f2 fe23 	bl	80001e0 <__aeabi_dsub>
 800d59a:	ec53 2b18 	vmov	r2, r3, d8
 800d59e:	f7f2 fe1f 	bl	80001e0 <__aeabi_dsub>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4650      	mov	r0, sl
 800d5a8:	4659      	mov	r1, fp
 800d5aa:	e610      	b.n	800d1ce <__ieee754_pow+0x31e>
 800d5ac:	2401      	movs	r4, #1
 800d5ae:	e6a1      	b.n	800d2f4 <__ieee754_pow+0x444>
 800d5b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d600 <__ieee754_pow+0x750>
 800d5b4:	e617      	b.n	800d1e6 <__ieee754_pow+0x336>
 800d5b6:	bf00      	nop
 800d5b8:	4a454eef 	.word	0x4a454eef
 800d5bc:	3fca7e28 	.word	0x3fca7e28
 800d5c0:	93c9db65 	.word	0x93c9db65
 800d5c4:	3fcd864a 	.word	0x3fcd864a
 800d5c8:	a91d4101 	.word	0xa91d4101
 800d5cc:	3fd17460 	.word	0x3fd17460
 800d5d0:	518f264d 	.word	0x518f264d
 800d5d4:	3fd55555 	.word	0x3fd55555
 800d5d8:	db6fabff 	.word	0xdb6fabff
 800d5dc:	3fdb6db6 	.word	0x3fdb6db6
 800d5e0:	33333303 	.word	0x33333303
 800d5e4:	3fe33333 	.word	0x3fe33333
 800d5e8:	e0000000 	.word	0xe0000000
 800d5ec:	3feec709 	.word	0x3feec709
 800d5f0:	dc3a03fd 	.word	0xdc3a03fd
 800d5f4:	3feec709 	.word	0x3feec709
 800d5f8:	145b01f5 	.word	0x145b01f5
 800d5fc:	be3e2fe0 	.word	0xbe3e2fe0
 800d600:	00000000 	.word	0x00000000
 800d604:	3ff00000 	.word	0x3ff00000
 800d608:	7ff00000 	.word	0x7ff00000
 800d60c:	43400000 	.word	0x43400000
 800d610:	0003988e 	.word	0x0003988e
 800d614:	000bb679 	.word	0x000bb679
 800d618:	0800dc40 	.word	0x0800dc40
 800d61c:	3ff00000 	.word	0x3ff00000
 800d620:	40080000 	.word	0x40080000
 800d624:	0800dc60 	.word	0x0800dc60
 800d628:	0800dc50 	.word	0x0800dc50
 800d62c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d904 <__ieee754_pow+0xa54>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	4640      	mov	r0, r8
 800d634:	4649      	mov	r1, r9
 800d636:	f7f2 fdd5 	bl	80001e4 <__adddf3>
 800d63a:	4622      	mov	r2, r4
 800d63c:	ec41 0b1a 	vmov	d10, r0, r1
 800d640:	462b      	mov	r3, r5
 800d642:	4630      	mov	r0, r6
 800d644:	4639      	mov	r1, r7
 800d646:	f7f2 fdcb 	bl	80001e0 <__aeabi_dsub>
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	ec51 0b1a 	vmov	r0, r1, d10
 800d652:	f7f3 fa0d 	bl	8000a70 <__aeabi_dcmpgt>
 800d656:	2800      	cmp	r0, #0
 800d658:	f47f ae04 	bne.w	800d264 <__ieee754_pow+0x3b4>
 800d65c:	4aa4      	ldr	r2, [pc, #656]	; (800d8f0 <__ieee754_pow+0xa40>)
 800d65e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d662:	4293      	cmp	r3, r2
 800d664:	f340 8108 	ble.w	800d878 <__ieee754_pow+0x9c8>
 800d668:	151b      	asrs	r3, r3, #20
 800d66a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d66e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d672:	fa4a f303 	asr.w	r3, sl, r3
 800d676:	445b      	add	r3, fp
 800d678:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d67c:	4e9d      	ldr	r6, [pc, #628]	; (800d8f4 <__ieee754_pow+0xa44>)
 800d67e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d682:	4116      	asrs	r6, r2
 800d684:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d688:	2000      	movs	r0, #0
 800d68a:	ea23 0106 	bic.w	r1, r3, r6
 800d68e:	f1c2 0214 	rsb	r2, r2, #20
 800d692:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d696:	fa4a fa02 	asr.w	sl, sl, r2
 800d69a:	f1bb 0f00 	cmp.w	fp, #0
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	bfb8      	it	lt
 800d6a8:	f1ca 0a00 	rsblt	sl, sl, #0
 800d6ac:	f7f2 fd98 	bl	80001e0 <__aeabi_dsub>
 800d6b0:	ec41 0b19 	vmov	d9, r0, r1
 800d6b4:	4642      	mov	r2, r8
 800d6b6:	464b      	mov	r3, r9
 800d6b8:	ec51 0b19 	vmov	r0, r1, d9
 800d6bc:	f7f2 fd92 	bl	80001e4 <__adddf3>
 800d6c0:	a37b      	add	r3, pc, #492	; (adr r3, 800d8b0 <__ieee754_pow+0xa00>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460d      	mov	r5, r1
 800d6cc:	f7f2 ff40 	bl	8000550 <__aeabi_dmul>
 800d6d0:	ec53 2b19 	vmov	r2, r3, d9
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	460f      	mov	r7, r1
 800d6d8:	4620      	mov	r0, r4
 800d6da:	4629      	mov	r1, r5
 800d6dc:	f7f2 fd80 	bl	80001e0 <__aeabi_dsub>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4640      	mov	r0, r8
 800d6e6:	4649      	mov	r1, r9
 800d6e8:	f7f2 fd7a 	bl	80001e0 <__aeabi_dsub>
 800d6ec:	a372      	add	r3, pc, #456	; (adr r3, 800d8b8 <__ieee754_pow+0xa08>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 ff2d 	bl	8000550 <__aeabi_dmul>
 800d6f6:	a372      	add	r3, pc, #456	; (adr r3, 800d8c0 <__ieee754_pow+0xa10>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	4680      	mov	r8, r0
 800d6fe:	4689      	mov	r9, r1
 800d700:	4620      	mov	r0, r4
 800d702:	4629      	mov	r1, r5
 800d704:	f7f2 ff24 	bl	8000550 <__aeabi_dmul>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4640      	mov	r0, r8
 800d70e:	4649      	mov	r1, r9
 800d710:	f7f2 fd68 	bl	80001e4 <__adddf3>
 800d714:	4604      	mov	r4, r0
 800d716:	460d      	mov	r5, r1
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	4630      	mov	r0, r6
 800d71e:	4639      	mov	r1, r7
 800d720:	f7f2 fd60 	bl	80001e4 <__adddf3>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	4680      	mov	r8, r0
 800d72a:	4689      	mov	r9, r1
 800d72c:	f7f2 fd58 	bl	80001e0 <__aeabi_dsub>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4620      	mov	r0, r4
 800d736:	4629      	mov	r1, r5
 800d738:	f7f2 fd52 	bl	80001e0 <__aeabi_dsub>
 800d73c:	4642      	mov	r2, r8
 800d73e:	4606      	mov	r6, r0
 800d740:	460f      	mov	r7, r1
 800d742:	464b      	mov	r3, r9
 800d744:	4640      	mov	r0, r8
 800d746:	4649      	mov	r1, r9
 800d748:	f7f2 ff02 	bl	8000550 <__aeabi_dmul>
 800d74c:	a35e      	add	r3, pc, #376	; (adr r3, 800d8c8 <__ieee754_pow+0xa18>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4604      	mov	r4, r0
 800d754:	460d      	mov	r5, r1
 800d756:	f7f2 fefb 	bl	8000550 <__aeabi_dmul>
 800d75a:	a35d      	add	r3, pc, #372	; (adr r3, 800d8d0 <__ieee754_pow+0xa20>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 fd3e 	bl	80001e0 <__aeabi_dsub>
 800d764:	4622      	mov	r2, r4
 800d766:	462b      	mov	r3, r5
 800d768:	f7f2 fef2 	bl	8000550 <__aeabi_dmul>
 800d76c:	a35a      	add	r3, pc, #360	; (adr r3, 800d8d8 <__ieee754_pow+0xa28>)
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	f7f2 fd37 	bl	80001e4 <__adddf3>
 800d776:	4622      	mov	r2, r4
 800d778:	462b      	mov	r3, r5
 800d77a:	f7f2 fee9 	bl	8000550 <__aeabi_dmul>
 800d77e:	a358      	add	r3, pc, #352	; (adr r3, 800d8e0 <__ieee754_pow+0xa30>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd2c 	bl	80001e0 <__aeabi_dsub>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	f7f2 fee0 	bl	8000550 <__aeabi_dmul>
 800d790:	a355      	add	r3, pc, #340	; (adr r3, 800d8e8 <__ieee754_pow+0xa38>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 fd25 	bl	80001e4 <__adddf3>
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 fed7 	bl	8000550 <__aeabi_dmul>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	f7f2 fd19 	bl	80001e0 <__aeabi_dsub>
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	460d      	mov	r5, r1
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f2 fec9 	bl	8000550 <__aeabi_dmul>
 800d7be:	2200      	movs	r2, #0
 800d7c0:	ec41 0b19 	vmov	d9, r0, r1
 800d7c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	f7f2 fd08 	bl	80001e0 <__aeabi_dsub>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	ec51 0b19 	vmov	r0, r1, d9
 800d7d8:	f7f2 ffe4 	bl	80007a4 <__aeabi_ddiv>
 800d7dc:	4632      	mov	r2, r6
 800d7de:	4604      	mov	r4, r0
 800d7e0:	460d      	mov	r5, r1
 800d7e2:	463b      	mov	r3, r7
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f2 feb2 	bl	8000550 <__aeabi_dmul>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	f7f2 fcf8 	bl	80001e4 <__adddf3>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	f7f2 fcf0 	bl	80001e0 <__aeabi_dsub>
 800d800:	4642      	mov	r2, r8
 800d802:	464b      	mov	r3, r9
 800d804:	f7f2 fcec 	bl	80001e0 <__aeabi_dsub>
 800d808:	460b      	mov	r3, r1
 800d80a:	4602      	mov	r2, r0
 800d80c:	493a      	ldr	r1, [pc, #232]	; (800d8f8 <__ieee754_pow+0xa48>)
 800d80e:	2000      	movs	r0, #0
 800d810:	f7f2 fce6 	bl	80001e0 <__aeabi_dsub>
 800d814:	ec41 0b10 	vmov	d0, r0, r1
 800d818:	ee10 3a90 	vmov	r3, s1
 800d81c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d824:	da2b      	bge.n	800d87e <__ieee754_pow+0x9ce>
 800d826:	4650      	mov	r0, sl
 800d828:	f000 f966 	bl	800daf8 <scalbn>
 800d82c:	ec51 0b10 	vmov	r0, r1, d0
 800d830:	ec53 2b18 	vmov	r2, r3, d8
 800d834:	f7ff bbed 	b.w	800d012 <__ieee754_pow+0x162>
 800d838:	4b30      	ldr	r3, [pc, #192]	; (800d8fc <__ieee754_pow+0xa4c>)
 800d83a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d83e:	429e      	cmp	r6, r3
 800d840:	f77f af0c 	ble.w	800d65c <__ieee754_pow+0x7ac>
 800d844:	4b2e      	ldr	r3, [pc, #184]	; (800d900 <__ieee754_pow+0xa50>)
 800d846:	440b      	add	r3, r1
 800d848:	4303      	orrs	r3, r0
 800d84a:	d009      	beq.n	800d860 <__ieee754_pow+0x9b0>
 800d84c:	ec51 0b18 	vmov	r0, r1, d8
 800d850:	2200      	movs	r2, #0
 800d852:	2300      	movs	r3, #0
 800d854:	f7f3 f8ee 	bl	8000a34 <__aeabi_dcmplt>
 800d858:	3800      	subs	r0, #0
 800d85a:	bf18      	it	ne
 800d85c:	2001      	movne	r0, #1
 800d85e:	e447      	b.n	800d0f0 <__ieee754_pow+0x240>
 800d860:	4622      	mov	r2, r4
 800d862:	462b      	mov	r3, r5
 800d864:	f7f2 fcbc 	bl	80001e0 <__aeabi_dsub>
 800d868:	4642      	mov	r2, r8
 800d86a:	464b      	mov	r3, r9
 800d86c:	f7f3 f8f6 	bl	8000a5c <__aeabi_dcmpge>
 800d870:	2800      	cmp	r0, #0
 800d872:	f43f aef3 	beq.w	800d65c <__ieee754_pow+0x7ac>
 800d876:	e7e9      	b.n	800d84c <__ieee754_pow+0x99c>
 800d878:	f04f 0a00 	mov.w	sl, #0
 800d87c:	e71a      	b.n	800d6b4 <__ieee754_pow+0x804>
 800d87e:	ec51 0b10 	vmov	r0, r1, d0
 800d882:	4619      	mov	r1, r3
 800d884:	e7d4      	b.n	800d830 <__ieee754_pow+0x980>
 800d886:	491c      	ldr	r1, [pc, #112]	; (800d8f8 <__ieee754_pow+0xa48>)
 800d888:	2000      	movs	r0, #0
 800d88a:	f7ff bb30 	b.w	800ceee <__ieee754_pow+0x3e>
 800d88e:	2000      	movs	r0, #0
 800d890:	2100      	movs	r1, #0
 800d892:	f7ff bb2c 	b.w	800ceee <__ieee754_pow+0x3e>
 800d896:	4630      	mov	r0, r6
 800d898:	4639      	mov	r1, r7
 800d89a:	f7ff bb28 	b.w	800ceee <__ieee754_pow+0x3e>
 800d89e:	9204      	str	r2, [sp, #16]
 800d8a0:	f7ff bb7a 	b.w	800cf98 <__ieee754_pow+0xe8>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f7ff bb64 	b.w	800cf72 <__ieee754_pow+0xc2>
 800d8aa:	bf00      	nop
 800d8ac:	f3af 8000 	nop.w
 800d8b0:	00000000 	.word	0x00000000
 800d8b4:	3fe62e43 	.word	0x3fe62e43
 800d8b8:	fefa39ef 	.word	0xfefa39ef
 800d8bc:	3fe62e42 	.word	0x3fe62e42
 800d8c0:	0ca86c39 	.word	0x0ca86c39
 800d8c4:	be205c61 	.word	0xbe205c61
 800d8c8:	72bea4d0 	.word	0x72bea4d0
 800d8cc:	3e663769 	.word	0x3e663769
 800d8d0:	c5d26bf1 	.word	0xc5d26bf1
 800d8d4:	3ebbbd41 	.word	0x3ebbbd41
 800d8d8:	af25de2c 	.word	0xaf25de2c
 800d8dc:	3f11566a 	.word	0x3f11566a
 800d8e0:	16bebd93 	.word	0x16bebd93
 800d8e4:	3f66c16c 	.word	0x3f66c16c
 800d8e8:	5555553e 	.word	0x5555553e
 800d8ec:	3fc55555 	.word	0x3fc55555
 800d8f0:	3fe00000 	.word	0x3fe00000
 800d8f4:	000fffff 	.word	0x000fffff
 800d8f8:	3ff00000 	.word	0x3ff00000
 800d8fc:	4090cbff 	.word	0x4090cbff
 800d900:	3f6f3400 	.word	0x3f6f3400
 800d904:	652b82fe 	.word	0x652b82fe
 800d908:	3c971547 	.word	0x3c971547

0800d90c <__ieee754_sqrt>:
 800d90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d910:	ec55 4b10 	vmov	r4, r5, d0
 800d914:	4e55      	ldr	r6, [pc, #340]	; (800da6c <__ieee754_sqrt+0x160>)
 800d916:	43ae      	bics	r6, r5
 800d918:	ee10 0a10 	vmov	r0, s0
 800d91c:	ee10 3a10 	vmov	r3, s0
 800d920:	462a      	mov	r2, r5
 800d922:	4629      	mov	r1, r5
 800d924:	d110      	bne.n	800d948 <__ieee754_sqrt+0x3c>
 800d926:	ee10 2a10 	vmov	r2, s0
 800d92a:	462b      	mov	r3, r5
 800d92c:	f7f2 fe10 	bl	8000550 <__aeabi_dmul>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4620      	mov	r0, r4
 800d936:	4629      	mov	r1, r5
 800d938:	f7f2 fc54 	bl	80001e4 <__adddf3>
 800d93c:	4604      	mov	r4, r0
 800d93e:	460d      	mov	r5, r1
 800d940:	ec45 4b10 	vmov	d0, r4, r5
 800d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d948:	2d00      	cmp	r5, #0
 800d94a:	dc10      	bgt.n	800d96e <__ieee754_sqrt+0x62>
 800d94c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d950:	4330      	orrs	r0, r6
 800d952:	d0f5      	beq.n	800d940 <__ieee754_sqrt+0x34>
 800d954:	b15d      	cbz	r5, 800d96e <__ieee754_sqrt+0x62>
 800d956:	ee10 2a10 	vmov	r2, s0
 800d95a:	462b      	mov	r3, r5
 800d95c:	ee10 0a10 	vmov	r0, s0
 800d960:	f7f2 fc3e 	bl	80001e0 <__aeabi_dsub>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	f7f2 ff1c 	bl	80007a4 <__aeabi_ddiv>
 800d96c:	e7e6      	b.n	800d93c <__ieee754_sqrt+0x30>
 800d96e:	1512      	asrs	r2, r2, #20
 800d970:	d074      	beq.n	800da5c <__ieee754_sqrt+0x150>
 800d972:	07d4      	lsls	r4, r2, #31
 800d974:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d978:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d97c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d980:	bf5e      	ittt	pl
 800d982:	0fda      	lsrpl	r2, r3, #31
 800d984:	005b      	lslpl	r3, r3, #1
 800d986:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d98a:	2400      	movs	r4, #0
 800d98c:	0fda      	lsrs	r2, r3, #31
 800d98e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d992:	107f      	asrs	r7, r7, #1
 800d994:	005b      	lsls	r3, r3, #1
 800d996:	2516      	movs	r5, #22
 800d998:	4620      	mov	r0, r4
 800d99a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d99e:	1886      	adds	r6, r0, r2
 800d9a0:	428e      	cmp	r6, r1
 800d9a2:	bfde      	ittt	le
 800d9a4:	1b89      	suble	r1, r1, r6
 800d9a6:	18b0      	addle	r0, r6, r2
 800d9a8:	18a4      	addle	r4, r4, r2
 800d9aa:	0049      	lsls	r1, r1, #1
 800d9ac:	3d01      	subs	r5, #1
 800d9ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d9b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d9b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9ba:	d1f0      	bne.n	800d99e <__ieee754_sqrt+0x92>
 800d9bc:	462a      	mov	r2, r5
 800d9be:	f04f 0e20 	mov.w	lr, #32
 800d9c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d9c6:	4281      	cmp	r1, r0
 800d9c8:	eb06 0c05 	add.w	ip, r6, r5
 800d9cc:	dc02      	bgt.n	800d9d4 <__ieee754_sqrt+0xc8>
 800d9ce:	d113      	bne.n	800d9f8 <__ieee754_sqrt+0xec>
 800d9d0:	459c      	cmp	ip, r3
 800d9d2:	d811      	bhi.n	800d9f8 <__ieee754_sqrt+0xec>
 800d9d4:	f1bc 0f00 	cmp.w	ip, #0
 800d9d8:	eb0c 0506 	add.w	r5, ip, r6
 800d9dc:	da43      	bge.n	800da66 <__ieee754_sqrt+0x15a>
 800d9de:	2d00      	cmp	r5, #0
 800d9e0:	db41      	blt.n	800da66 <__ieee754_sqrt+0x15a>
 800d9e2:	f100 0801 	add.w	r8, r0, #1
 800d9e6:	1a09      	subs	r1, r1, r0
 800d9e8:	459c      	cmp	ip, r3
 800d9ea:	bf88      	it	hi
 800d9ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d9f0:	eba3 030c 	sub.w	r3, r3, ip
 800d9f4:	4432      	add	r2, r6
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d9fc:	f1be 0e01 	subs.w	lr, lr, #1
 800da00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800da04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da0c:	d1db      	bne.n	800d9c6 <__ieee754_sqrt+0xba>
 800da0e:	430b      	orrs	r3, r1
 800da10:	d006      	beq.n	800da20 <__ieee754_sqrt+0x114>
 800da12:	1c50      	adds	r0, r2, #1
 800da14:	bf13      	iteet	ne
 800da16:	3201      	addne	r2, #1
 800da18:	3401      	addeq	r4, #1
 800da1a:	4672      	moveq	r2, lr
 800da1c:	f022 0201 	bicne.w	r2, r2, #1
 800da20:	1063      	asrs	r3, r4, #1
 800da22:	0852      	lsrs	r2, r2, #1
 800da24:	07e1      	lsls	r1, r4, #31
 800da26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800da2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800da2e:	bf48      	it	mi
 800da30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800da34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800da38:	4614      	mov	r4, r2
 800da3a:	e781      	b.n	800d940 <__ieee754_sqrt+0x34>
 800da3c:	0ad9      	lsrs	r1, r3, #11
 800da3e:	3815      	subs	r0, #21
 800da40:	055b      	lsls	r3, r3, #21
 800da42:	2900      	cmp	r1, #0
 800da44:	d0fa      	beq.n	800da3c <__ieee754_sqrt+0x130>
 800da46:	02cd      	lsls	r5, r1, #11
 800da48:	d50a      	bpl.n	800da60 <__ieee754_sqrt+0x154>
 800da4a:	f1c2 0420 	rsb	r4, r2, #32
 800da4e:	fa23 f404 	lsr.w	r4, r3, r4
 800da52:	1e55      	subs	r5, r2, #1
 800da54:	4093      	lsls	r3, r2
 800da56:	4321      	orrs	r1, r4
 800da58:	1b42      	subs	r2, r0, r5
 800da5a:	e78a      	b.n	800d972 <__ieee754_sqrt+0x66>
 800da5c:	4610      	mov	r0, r2
 800da5e:	e7f0      	b.n	800da42 <__ieee754_sqrt+0x136>
 800da60:	0049      	lsls	r1, r1, #1
 800da62:	3201      	adds	r2, #1
 800da64:	e7ef      	b.n	800da46 <__ieee754_sqrt+0x13a>
 800da66:	4680      	mov	r8, r0
 800da68:	e7bd      	b.n	800d9e6 <__ieee754_sqrt+0xda>
 800da6a:	bf00      	nop
 800da6c:	7ff00000 	.word	0x7ff00000

0800da70 <with_errno>:
 800da70:	b570      	push	{r4, r5, r6, lr}
 800da72:	4604      	mov	r4, r0
 800da74:	460d      	mov	r5, r1
 800da76:	4616      	mov	r6, r2
 800da78:	f7ff f8cc 	bl	800cc14 <__errno>
 800da7c:	4629      	mov	r1, r5
 800da7e:	6006      	str	r6, [r0, #0]
 800da80:	4620      	mov	r0, r4
 800da82:	bd70      	pop	{r4, r5, r6, pc}

0800da84 <xflow>:
 800da84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da86:	4614      	mov	r4, r2
 800da88:	461d      	mov	r5, r3
 800da8a:	b108      	cbz	r0, 800da90 <xflow+0xc>
 800da8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da90:	e9cd 2300 	strd	r2, r3, [sp]
 800da94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da98:	4620      	mov	r0, r4
 800da9a:	4629      	mov	r1, r5
 800da9c:	f7f2 fd58 	bl	8000550 <__aeabi_dmul>
 800daa0:	2222      	movs	r2, #34	; 0x22
 800daa2:	b003      	add	sp, #12
 800daa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daa8:	f7ff bfe2 	b.w	800da70 <with_errno>

0800daac <__math_uflow>:
 800daac:	b508      	push	{r3, lr}
 800daae:	2200      	movs	r2, #0
 800dab0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dab4:	f7ff ffe6 	bl	800da84 <xflow>
 800dab8:	ec41 0b10 	vmov	d0, r0, r1
 800dabc:	bd08      	pop	{r3, pc}

0800dabe <__math_oflow>:
 800dabe:	b508      	push	{r3, lr}
 800dac0:	2200      	movs	r2, #0
 800dac2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800dac6:	f7ff ffdd 	bl	800da84 <xflow>
 800daca:	ec41 0b10 	vmov	d0, r0, r1
 800dace:	bd08      	pop	{r3, pc}

0800dad0 <fabs>:
 800dad0:	ec51 0b10 	vmov	r0, r1, d0
 800dad4:	ee10 2a10 	vmov	r2, s0
 800dad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dadc:	ec43 2b10 	vmov	d0, r2, r3
 800dae0:	4770      	bx	lr

0800dae2 <finite>:
 800dae2:	b082      	sub	sp, #8
 800dae4:	ed8d 0b00 	vstr	d0, [sp]
 800dae8:	9801      	ldr	r0, [sp, #4]
 800daea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800daee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800daf2:	0fc0      	lsrs	r0, r0, #31
 800daf4:	b002      	add	sp, #8
 800daf6:	4770      	bx	lr

0800daf8 <scalbn>:
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	ec55 4b10 	vmov	r4, r5, d0
 800dafe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800db02:	4606      	mov	r6, r0
 800db04:	462b      	mov	r3, r5
 800db06:	b99a      	cbnz	r2, 800db30 <scalbn+0x38>
 800db08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db0c:	4323      	orrs	r3, r4
 800db0e:	d036      	beq.n	800db7e <scalbn+0x86>
 800db10:	4b39      	ldr	r3, [pc, #228]	; (800dbf8 <scalbn+0x100>)
 800db12:	4629      	mov	r1, r5
 800db14:	ee10 0a10 	vmov	r0, s0
 800db18:	2200      	movs	r2, #0
 800db1a:	f7f2 fd19 	bl	8000550 <__aeabi_dmul>
 800db1e:	4b37      	ldr	r3, [pc, #220]	; (800dbfc <scalbn+0x104>)
 800db20:	429e      	cmp	r6, r3
 800db22:	4604      	mov	r4, r0
 800db24:	460d      	mov	r5, r1
 800db26:	da10      	bge.n	800db4a <scalbn+0x52>
 800db28:	a32b      	add	r3, pc, #172	; (adr r3, 800dbd8 <scalbn+0xe0>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	e03a      	b.n	800dba6 <scalbn+0xae>
 800db30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db34:	428a      	cmp	r2, r1
 800db36:	d10c      	bne.n	800db52 <scalbn+0x5a>
 800db38:	ee10 2a10 	vmov	r2, s0
 800db3c:	4620      	mov	r0, r4
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f2 fb50 	bl	80001e4 <__adddf3>
 800db44:	4604      	mov	r4, r0
 800db46:	460d      	mov	r5, r1
 800db48:	e019      	b.n	800db7e <scalbn+0x86>
 800db4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db4e:	460b      	mov	r3, r1
 800db50:	3a36      	subs	r2, #54	; 0x36
 800db52:	4432      	add	r2, r6
 800db54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db58:	428a      	cmp	r2, r1
 800db5a:	dd08      	ble.n	800db6e <scalbn+0x76>
 800db5c:	2d00      	cmp	r5, #0
 800db5e:	a120      	add	r1, pc, #128	; (adr r1, 800dbe0 <scalbn+0xe8>)
 800db60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db64:	da1c      	bge.n	800dba0 <scalbn+0xa8>
 800db66:	a120      	add	r1, pc, #128	; (adr r1, 800dbe8 <scalbn+0xf0>)
 800db68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db6c:	e018      	b.n	800dba0 <scalbn+0xa8>
 800db6e:	2a00      	cmp	r2, #0
 800db70:	dd08      	ble.n	800db84 <scalbn+0x8c>
 800db72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db7e:	ec45 4b10 	vmov	d0, r4, r5
 800db82:	bd70      	pop	{r4, r5, r6, pc}
 800db84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db88:	da19      	bge.n	800dbbe <scalbn+0xc6>
 800db8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db8e:	429e      	cmp	r6, r3
 800db90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db94:	dd0a      	ble.n	800dbac <scalbn+0xb4>
 800db96:	a112      	add	r1, pc, #72	; (adr r1, 800dbe0 <scalbn+0xe8>)
 800db98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1e2      	bne.n	800db66 <scalbn+0x6e>
 800dba0:	a30f      	add	r3, pc, #60	; (adr r3, 800dbe0 <scalbn+0xe8>)
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	f7f2 fcd3 	bl	8000550 <__aeabi_dmul>
 800dbaa:	e7cb      	b.n	800db44 <scalbn+0x4c>
 800dbac:	a10a      	add	r1, pc, #40	; (adr r1, 800dbd8 <scalbn+0xe0>)
 800dbae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d0b8      	beq.n	800db28 <scalbn+0x30>
 800dbb6:	a10e      	add	r1, pc, #56	; (adr r1, 800dbf0 <scalbn+0xf8>)
 800dbb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbbc:	e7b4      	b.n	800db28 <scalbn+0x30>
 800dbbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbc2:	3236      	adds	r2, #54	; 0x36
 800dbc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dbc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4b0c      	ldr	r3, [pc, #48]	; (800dc00 <scalbn+0x108>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	e7e8      	b.n	800dba6 <scalbn+0xae>
 800dbd4:	f3af 8000 	nop.w
 800dbd8:	c2f8f359 	.word	0xc2f8f359
 800dbdc:	01a56e1f 	.word	0x01a56e1f
 800dbe0:	8800759c 	.word	0x8800759c
 800dbe4:	7e37e43c 	.word	0x7e37e43c
 800dbe8:	8800759c 	.word	0x8800759c
 800dbec:	fe37e43c 	.word	0xfe37e43c
 800dbf0:	c2f8f359 	.word	0xc2f8f359
 800dbf4:	81a56e1f 	.word	0x81a56e1f
 800dbf8:	43500000 	.word	0x43500000
 800dbfc:	ffff3cb0 	.word	0xffff3cb0
 800dc00:	3c900000 	.word	0x3c900000

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
