
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d184  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d320  0800d320  0001d320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d370  0800d370  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d370  0800d370  0001d370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d378  0800d378  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d378  0800d378  0001d378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800d380  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000148  0800d4c4  00020148  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800d4c4  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a31  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298a  00000000  00000000  00035ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8e  00000000  00000000  0003a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001362b  00000000  00000000  00050fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919c7  00000000  00000000  00064619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f5fe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  000f60a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fabe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000148 	.word	0x20000148
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d304 	.word	0x0800d304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000014c 	.word	0x2000014c
 80001d4:	0800d304 	.word	0x0800d304

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 fd2b 	bl	80058f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f949 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fb97 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fb6d 	bl	8001588 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f9ab 	bl	8001208 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9d7 	bl	8001264 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb17 	bl	80014e8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa73 	bl	80013a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fac5 	bl	800144c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fb35 	bl	8001530 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f004 fd88 	bl	80059dc <HAL_Delay>
  setmatrix();
 8000ecc:	f000 ff0e 	bl	8001cec <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	487f      	ldr	r0, [pc, #508]	; (80010d0 <main+0x238>)
 8000ed2:	f008 fc83 	bl	80097dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	487d      	ldr	r0, [pc, #500]	; (80010d0 <main+0x238>)
 8000eda:	f008 fd95 	bl	8009a08 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	487c      	ldr	r0, [pc, #496]	; (80010d4 <main+0x23c>)
 8000ee2:	f008 fee7 	bl	8009cb4 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	487c      	ldr	r0, [pc, #496]	; (80010d8 <main+0x240>)
 8000ee8:	f008 fcd2 	bl	8009890 <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	487b      	ldr	r0, [pc, #492]	; (80010dc <main+0x244>)
 8000eee:	f008 fccf 	bl	8009890 <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	487a      	ldr	r0, [pc, #488]	; (80010e0 <main+0x248>)
 8000ef8:	f005 fc52 	bl	80067a0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <main+0x24c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fd1 	.word	0x08000fd1
 8000f10:	08000f2f 	.word	0x08000f2f
 8000f14:	0800106b 	.word	0x0800106b
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f63 	.word	0x08000f63
 8000f24:	08000fbb 	.word	0x08000fbb
		case Main:
			UART();
 8000f28:	f003 faf2 	bl	8004510 <UART>
			break;
 8000f2c:	e0c9      	b.n	80010c2 <main+0x22a>
		case Home:
			UART();
 8000f2e:	f003 faef 	bl	8004510 <UART>
			ReadEncoder();
 8000f32:	f000 fc5d 	bl	80017f0 <ReadEncoder>
			SetHome();
 8000f36:	f000 fced 	bl	8001914 <SetHome>
			kalmanfilter();
 8000f3a:	f001 f92f 	bl	800219c <kalmanfilter>
			break;
 8000f3e:	e0c0      	b.n	80010c2 <main+0x22a>
		case Emergency:
			UART();
 8000f40:	f003 fae6 	bl	8004510 <UART>
			if(Emergency_status == 1){
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <main+0x250>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <main+0xc2>
				Arm_State = Emergency;
 8000f4c:	4b65      	ldr	r3, [pc, #404]	; (80010e4 <main+0x24c>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000f52:	4b66      	ldr	r3, [pc, #408]	; (80010ec <main+0x254>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000f58:	e0b3      	b.n	80010c2 <main+0x22a>
				Arm_State = Main;
 8000f5a:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <main+0x24c>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
			break;
 8000f60:	e0af      	b.n	80010c2 <main+0x22a>
		case Setzero:
			UART();
 8000f62:	f003 fad5 	bl	8004510 <UART>
			if(micros() - timestamp > 2000000){
 8000f66:	f000 fda3 	bl	8001ab0 <micros>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4960      	ldr	r1, [pc, #384]	; (80010f0 <main+0x258>)
 8000f70:	6809      	ldr	r1, [r1, #0]
 8000f72:	2000      	movs	r0, #0
 8000f74:	4688      	mov	r8, r1
 8000f76:	4681      	mov	r9, r0
 8000f78:	ebb2 0408 	subs.w	r4, r2, r8
 8000f7c:	eb63 0509 	sbc.w	r5, r3, r9
 8000f80:	4b5c      	ldr	r3, [pc, #368]	; (80010f4 <main+0x25c>)
 8000f82:	429c      	cmp	r4, r3
 8000f84:	f175 0300 	sbcs.w	r3, r5, #0
 8000f88:	f0c0 8096 	bcc.w	80010b8 <main+0x220>
				if (SetZeroState)
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <main+0x260>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00e      	beq.n	8000fb2 <main+0x11a>
				{
					TIM3->CNT = 0;
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <main+0x264>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
					angle_base = 0;
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <main+0x268>)
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
					angle = 0;
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <main+0x26c>)
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
					theta_now = 0;
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <main+0x270>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
				}
				Arm_State = Main;
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <main+0x24c>)
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8000fb8:	e07e      	b.n	80010b8 <main+0x220>
		case PrepareRun:
			UART();
 8000fba:	f003 faa9 	bl	8004510 <UART>
			TrajectoryGenerator_Flag=1;
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <main+0x274>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 8000fc4:	f001 f90c 	bl	80021e0 <TrajectoryGenerator>
			Arm_State = Run;
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <main+0x24c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			break;
 8000fce:	e078      	b.n	80010c2 <main+0x22a>
		case Run:
			UART();
 8000fd0:	f003 fa9e 	bl	8004510 <UART>
			if(Go_Flag == 0){
 8000fd4:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <main+0x278>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d16f      	bne.n	80010bc <main+0x224>
				if(ModeN==1){
 8000fdc:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <main+0x27c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d138      	bne.n	8001056 <main+0x1be>
					if(n_station >= n_station_max-1){
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <main+0x280>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b4c      	ldr	r3, [pc, #304]	; (800111c <main+0x284>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	db0c      	blt.n	800100e <main+0x176>
						Arm_State = EndEffector;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <main+0x24c>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 8000ffa:	4b49      	ldr	r3, [pc, #292]	; (8001120 <main+0x288>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <main+0x27c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <main+0x254>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e005      	b.n	800101a <main+0x182>
					}
					else{
						n_station++;
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <main+0x280>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b40      	ldr	r3, [pc, #256]	; (8001118 <main+0x280>)
 8001018:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <main+0x24c>)
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001020:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <main+0x288>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 8001026:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <main+0x280>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <main+0x28c>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	3b01      	subs	r3, #1
 8001032:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <main+0x290>)
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa30 	bl	80004a0 <__aeabi_f2d>
 8001040:	a321      	add	r3, pc, #132	; (adr r3, 80010c8 <main+0x230>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fa83 	bl	8000550 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <main+0x294>)
 8001050:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 8001054:	e032      	b.n	80010bc <main+0x224>
					Arm_State = EndEffector;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <main+0x24c>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0x288>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
					Finish =1;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <main+0x254>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	e028      	b.n	80010bc <main+0x224>
		case EndEffector:
			UART();
 800106a:	f003 fa51 	bl	8004510 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <main+0x298>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d111      	bne.n	800109a <main+0x202>
			{
				OpenEndEffector();
 8001076:	f003 ffc9 	bl	800500c <OpenEndEffector>
				if(EndEffector_State == State_wait){
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <main+0x29c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d11e      	bne.n	80010c0 <main+0x228>
					if(ModeN==1){
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <main+0x27c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d103      	bne.n	8001092 <main+0x1fa>
						Arm_State = PrepareRun;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <main+0x24c>)
 800108c:	2206      	movs	r2, #6
 800108e:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001090:	e016      	b.n	80010c0 <main+0x228>
						Arm_State = Main;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <main+0x24c>)
 8001094:	2204      	movs	r2, #4
 8001096:	701a      	strb	r2, [r3, #0]
			break;
 8001098:	e012      	b.n	80010c0 <main+0x228>
				FlagOpen_EndEffector =0;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <main+0x288>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <main+0x27c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d103      	bne.n	80010b0 <main+0x218>
					Arm_State = PrepareRun;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <main+0x24c>)
 80010aa:	2206      	movs	r2, #6
 80010ac:	701a      	strb	r2, [r3, #0]
			break;
 80010ae:	e007      	b.n	80010c0 <main+0x228>
					Arm_State = Main;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <main+0x24c>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	701a      	strb	r2, [r3, #0]
			break;
 80010b6:	e003      	b.n	80010c0 <main+0x228>
			break;
 80010b8:	bf00      	nop
 80010ba:	e71f      	b.n	8000efc <main+0x64>
			break;
 80010bc:	bf00      	nop
 80010be:	e71d      	b.n	8000efc <main+0x64>
			break;
 80010c0:	bf00      	nop
	  switch (Arm_State) {
 80010c2:	e71b      	b.n	8000efc <main+0x64>
 80010c4:	f3af 8000 	nop.w
 80010c8:	a2529d39 	.word	0xa2529d39
 80010cc:	3f91df46 	.word	0x3f91df46
 80010d0:	200001b8 	.word	0x200001b8
 80010d4:	20000200 	.word	0x20000200
 80010d8:	20000248 	.word	0x20000248
 80010dc:	20000290 	.word	0x20000290
 80010e0:	40020400 	.word	0x40020400
 80010e4:	200000cb 	.word	0x200000cb
 80010e8:	200003eb 	.word	0x200003eb
 80010ec:	200006a1 	.word	0x200006a1
 80010f0:	200006bc 	.word	0x200006bc
 80010f4:	001e8481 	.word	0x001e8481
 80010f8:	20000088 	.word	0x20000088
 80010fc:	40000400 	.word	0x40000400
 8001100:	20000400 	.word	0x20000400
 8001104:	200003ec 	.word	0x200003ec
 8001108:	200003f4 	.word	0x200003f4
 800110c:	200003ea 	.word	0x200003ea
 8001110:	200003e9 	.word	0x200003e9
 8001114:	200006a0 	.word	0x200006a0
 8001118:	200000ca 	.word	0x200000ca
 800111c:	200000c9 	.word	0x200000c9
 8001120:	200006b4 	.word	0x200006b4
 8001124:	200006a4 	.word	0x200006a4
 8001128:	200000a0 	.word	0x200000a0
 800112c:	200005d0 	.word	0x200005d0
 8001130:	20000693 	.word	0x20000693
 8001134:	200000cc 	.word	0x200000cc

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00b f90a 	bl	800c360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <SystemClock_Config+0xc8>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <SystemClock_Config+0xc8>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <SystemClock_Config+0xcc>)
 8001182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <SystemClock_Config+0xcc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119c:	2310      	movs	r3, #16
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fe25 	bl	8008e0c <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f004 f8ae 	bl	8005328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2103      	movs	r1, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 f887 	bl	80092fc <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f4:	f004 f898 	bl	8005328 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f005 faf7 	bl	8006838 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f004 f86a 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000164 	.word	0x20000164
 800125c:	40005400 	.word	0x40005400
 8001260:	00061a80 	.word	0x00061a80

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	; 0x58
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2220      	movs	r2, #32
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00b f85f 	bl	800c360 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <MX_TIM1_Init+0x138>)
 80012a4:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <MX_TIM1_Init+0x13c>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <MX_TIM1_Init+0x138>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_TIM1_Init+0x138>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <MX_TIM1_Init+0x138>)
 80012b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80012ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_TIM1_Init+0x138>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MX_TIM1_Init+0x138>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <MX_TIM1_Init+0x138>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ce:	4833      	ldr	r0, [pc, #204]	; (800139c <MX_TIM1_Init+0x138>)
 80012d0:	f008 fa34 	bl	800973c <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012da:	f004 f825 	bl	8005328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e8:	4619      	mov	r1, r3
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_TIM1_Init+0x138>)
 80012ec:	f008 ff3a 	bl	800a164 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f6:	f004 f817 	bl	8005328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012fa:	4828      	ldr	r0, [pc, #160]	; (800139c <MX_TIM1_Init+0x138>)
 80012fc:	f008 fb2a 	bl	8009954 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001306:	f004 f80f 	bl	8005328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001316:	4619      	mov	r1, r3
 8001318:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_TIM1_Init+0x138>)
 800131a:	f009 fadf 	bl	800a8dc <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001324:	f004 f800 	bl	8005328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	; 0x60
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM1_Init+0x138>)
 800134e:	f008 fe47 	bl	8009fe0 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001358:	f003 ffe6 	bl	8005328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM1_Init+0x138>)
 8001380:	f009 fb1a 	bl	800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800138a:	f003 ffcd 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM1_Init+0x138>)
 8001390:	f004 f8fc 	bl	800558c <HAL_TIM_MspPostInit>

}
 8001394:	bf00      	nop
 8001396:	3758      	adds	r7, #88	; 0x58
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001b8 	.word	0x200001b8
 80013a0:	40010000 	.word	0x40010000

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a ffd4 	bl	800c360 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM3_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013d4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013e6:	2303      	movs	r3, #3
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM3_Init+0xa0>)
 8001412:	f008 fba9 	bl	8009b68 <HAL_TIM_Encoder_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800141c:	f003 ff84 	bl	8005328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM3_Init+0xa0>)
 800142e:	f009 fa55 	bl	800a8dc <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001438:	f003 ff76 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000200 	.word	0x20000200
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM4_Init+0x94>)
 800146a:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <MX_TIM4_Init+0x98>)
 800146c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_TIM4_Init+0x94>)
 8001470:	2209      	movs	r2, #9
 8001472:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_TIM4_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_TIM4_Init+0x94>)
 800147c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001480:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_TIM4_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_TIM4_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_TIM4_Init+0x94>)
 8001490:	f008 f954 	bl	800973c <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800149a:	f003 ff45 	bl	8005328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_TIM4_Init+0x94>)
 80014ac:	f008 fe5a 	bl	800a164 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f003 ff37 	bl	8005328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_TIM4_Init+0x94>)
 80014c8:	f009 fa08 	bl	800a8dc <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014d2:	f003 ff29 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000248 	.word	0x20000248
 80014e4:	40000800 	.word	0x40000800

080014e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_TIM11_Init+0x40>)
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <MX_TIM11_Init+0x44>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_TIM11_Init+0x40>)
 80014f4:	2263      	movs	r2, #99	; 0x63
 80014f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_TIM11_Init+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_TIM11_Init+0x40>)
 8001500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001504:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_TIM11_Init+0x40>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_TIM11_Init+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM11_Init+0x40>)
 8001514:	f008 f912 	bl	800973c <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800151e:	f003 ff03 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000290 	.word	0x20000290
 800152c:	40014800 	.word	0x40014800

08001530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_USART2_UART_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x50>)
 800153c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001548:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <MX_USART2_UART_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x50>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x50>)
 800156c:	f009 fa8a 	bl	800aa84 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001576:	f003 fed7 	bl	8005328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200002d8 	.word	0x200002d8
 8001584:	40004400 	.word	0x40004400

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_DMA_Init+0x4c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <MX_DMA_Init+0x4c>)
 8001598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_DMA_Init+0x4c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2010      	movs	r0, #16
 80015b0:	f004 fb13 	bl	8005bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015b4:	2010      	movs	r0, #16
 80015b6:	f004 fb2c 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2011      	movs	r0, #17
 80015c0:	f004 fb0b 	bl	8005bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015c4:	2011      	movs	r0, #17
 80015c6:	f004 fb24 	bl	8005c12 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b58      	ldr	r3, [pc, #352]	; (8001754 <MX_GPIO_Init+0x17c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a57      	ldr	r2, [pc, #348]	; (8001754 <MX_GPIO_Init+0x17c>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b51      	ldr	r3, [pc, #324]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a50      	ldr	r2, [pc, #320]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <MX_GPIO_Init+0x17c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <MX_GPIO_Init+0x17c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a42      	ldr	r2, [pc, #264]	; (8001754 <MX_GPIO_Init+0x17c>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b40      	ldr	r3, [pc, #256]	; (8001754 <MX_GPIO_Init+0x17c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2120      	movs	r1, #32
 8001662:	483d      	ldr	r0, [pc, #244]	; (8001758 <MX_GPIO_Init+0x180>)
 8001664:	f005 f89c 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800166e:	483b      	ldr	r0, [pc, #236]	; (800175c <MX_GPIO_Init+0x184>)
 8001670:	f005 f896 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800167a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4835      	ldr	r0, [pc, #212]	; (8001760 <MX_GPIO_Init+0x188>)
 800168c:	f004 feec 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001690:	2304      	movs	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001694:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169a:	2302      	movs	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	482e      	ldr	r0, [pc, #184]	; (8001760 <MX_GPIO_Init+0x188>)
 80016a6:	f004 fedf 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016aa:	2320      	movs	r3, #32
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <MX_GPIO_Init+0x180>)
 80016c2:	f004 fed1 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80016c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	481f      	ldr	r0, [pc, #124]	; (800175c <MX_GPIO_Init+0x184>)
 80016e0:	f004 fec2 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80016e4:	2310      	movs	r3, #16
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_GPIO_Init+0x184>)
 80016fa:	f004 feb5 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 80016fe:	2320      	movs	r3, #32
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001702:	2311      	movs	r3, #17
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <MX_GPIO_Init+0x184>)
 8001716:	f004 fea7 	bl	8006468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2008      	movs	r0, #8
 8001720:	f004 fa5b 	bl	8005bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001724:	2008      	movs	r0, #8
 8001726:	f004 fa74 	bl	8005c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	200a      	movs	r0, #10
 8001730:	f004 fa53 	bl	8005bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001734:	200a      	movs	r0, #10
 8001736:	f004 fa6c 	bl	8005c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2028      	movs	r0, #40	; 0x28
 8001740:	f004 fa4b 	bl	8005bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001744:	2028      	movs	r0, #40	; 0x28
 8001746:	f004 fa64 	bl	8005c12 <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020800 	.word	0x40020800
 8001764:	00000000 	.word	0x00000000

08001768 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001772:	4603      	mov	r3, r0
 8001774:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;
	PWMOut = (volt*5000.0)/24.0;
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe fe92 	bl	80004a0 <__aeabi_f2d>
 800177c:	a31a      	add	r3, pc, #104	; (adr r3, 80017e8 <RunMotor+0x80>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe fee5 	bl	8000550 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <RunMotor+0x70>)
 8001794:	f7ff f806 	bl	80007a4 <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f9a6 	bl	8000af0 <__aeabi_d2f>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <RunMotor+0x74>)
 80017a8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <RunMotor+0x78>)
 80017b4:	f004 fff4 	bl	80067a0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <RunMotor+0x74>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <RunMotor+0x7c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c6:	ee17 2a90 	vmov	r2, s15
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	40380000 	.word	0x40380000
 80017dc:	200006e4 	.word	0x200006e4
 80017e0:	40020400 	.word	0x40020400
 80017e4:	200001b8 	.word	0x200001b8
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40b38800 	.word	0x40b38800

080017f0 <ReadEncoder>:

void ReadEncoder()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	angle_before = angle;
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <ReadEncoder+0x100>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <ReadEncoder+0x104>)
 80017fa:	6013      	str	r3, [r2, #0]
	angle_sum_before = theta_now;
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <ReadEncoder+0x108>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <ReadEncoder+0x10c>)
 8001802:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2.0*M_PI);
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <ReadEncoder+0x110>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe27 	bl	800045c <__aeabi_ui2d>
 800180e:	a334      	add	r3, pc, #208	; (adr r3, 80018e0 <ReadEncoder+0xf0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe ffc6 	bl	80007a4 <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a331      	add	r3, pc, #196	; (adr r3, 80018e8 <ReadEncoder+0xf8>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fe93 	bl	8000550 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f95d 	bl	8000af0 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <ReadEncoder+0x100>)
 800183a:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <ReadEncoder+0x114>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a31      	ldr	r2, [pc, #196]	; (8001908 <ReadEncoder+0x118>)
 8001842:	6013      	str	r3, [r2, #0]
	if ((angle - angle_before) <= -threshold)
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <ReadEncoder+0x100>)
 8001846:	ed93 7a00 	vldr	s14, [r3]
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <ReadEncoder+0x104>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <ReadEncoder+0x11c>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eef1 7a67 	vneg.f32	s15, s15
 800185e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d80b      	bhi.n	8001880 <ReadEncoder+0x90>
	{
		angle_base = angle_base_before + angle_max;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <ReadEncoder+0x118>)
 800186a:	ed93 7a00 	vldr	s14, [r3]
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <ReadEncoder+0x120>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <ReadEncoder+0x114>)
 800187a:	edc3 7a00 	vstr	s15, [r3]
 800187e:	e01f      	b.n	80018c0 <ReadEncoder+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <ReadEncoder+0x100>)
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <ReadEncoder+0x104>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <ReadEncoder+0x11c>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	db0b      	blt.n	80018b8 <ReadEncoder+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <ReadEncoder+0x118>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <ReadEncoder+0x120>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <ReadEncoder+0x114>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
 80018b6:	e003      	b.n	80018c0 <ReadEncoder+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <ReadEncoder+0x118>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <ReadEncoder+0x114>)
 80018be:	6013      	str	r3, [r2, #0]
	}

	theta_now = angle + angle_base;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <ReadEncoder+0x100>)
 80018c2:	ed93 7a00 	vldr	s14, [r3]
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <ReadEncoder+0x114>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <ReadEncoder+0x108>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40bfff00 	.word	0x40bfff00
 80018e8:	54442d18 	.word	0x54442d18
 80018ec:	401921fb 	.word	0x401921fb
 80018f0:	200003ec 	.word	0x200003ec
 80018f4:	200003f0 	.word	0x200003f0
 80018f8:	200003f4 	.word	0x200003f4
 80018fc:	200003f8 	.word	0x200003f8
 8001900:	40000400 	.word	0x40000400
 8001904:	20000400 	.word	0x20000400
 8001908:	200003fc 	.word	0x200003fc
 800190c:	20000004 	.word	0x20000004
 8001910:	20000008 	.word	0x20000008

08001914 <SetHome>:
	alpha_tosensor = (omega_tosensor[0]-omega_tosensor[1])/dt;
	omega_tosensor[1] = omega_tosensor[0];
}

void SetHome()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Proximity_GPIO_Port, Proximity_Pin) == GPIO_PIN_RESET && AlSet_Flag == 2)
 8001918:	2104      	movs	r1, #4
 800191a:	481d      	ldr	r0, [pc, #116]	; (8001990 <SetHome+0x7c>)
 800191c:	f004 ff28 	bl	8006770 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <SetHome+0x20>
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <SetHome+0x80>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d102      	bne.n	8001934 <SetHome+0x20>
	{
		SetHome_Flag = 2;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <SetHome+0x84>)
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
	}

	if(SetHome_Flag == 1)
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <SetHome+0x84>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d111      	bne.n	8001960 <SetHome+0x4c>
	{
		volt = 5;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <SetHome+0x88>)
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <SetHome+0x8c>)
 8001940:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <SetHome+0x88>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	2000      	movs	r0, #0
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f7ff ff0b 	bl	8001768 <RunMotor>
		AlSet_Flag = 1;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <SetHome+0x80>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <SetHome+0x84>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		volt = 3.7;
		RunMotor(volt, counterclockwise);
		AlSet_Flag = 0;
		SetHome_Flag = 0;
	}
}
 800195e:	e014      	b.n	800198a <SetHome+0x76>
	else if(SetHome_Flag == 2)
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <SetHome+0x84>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d110      	bne.n	800198a <SetHome+0x76>
		volt = 3.7;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <SetHome+0x88>)
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <SetHome+0x90>)
 800196c:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <SetHome+0x88>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	2000      	movs	r0, #0
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	f7ff fef5 	bl	8001768 <RunMotor>
		AlSet_Flag = 0;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SetHome+0x80>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SetHome+0x84>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40020800 	.word	0x40020800
 8001994:	20000000 	.word	0x20000000
 8001998:	200003e8 	.word	0x200003e8
 800199c:	200003dc 	.word	0x200003dc
 80019a0:	40a00000 	.word	0x40a00000
 80019a4:	406ccccd 	.word	0x406ccccd

080019a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 0)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d11e      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0x4e>
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11a      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		volt = 0;
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_GPIO_EXTI_Callback+0xe4>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_GPIO_EXTI_Callback+0xe4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	2001      	movs	r0, #1
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	f7ff fec8 	bl	8001768 <RunMotor>
		kalmanfilter();
 80019d8:	f000 fbe0 	bl	800219c <kalmanfilter>
		AlSet_Flag = 2;
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 80019e2:	f000 f865 	bl	8001ab0 <micros>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019ec:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xec>)
 80019f0:	2205      	movs	r2, #5
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e009      	b.n	8001a0a <HAL_GPIO_EXTI_Callback+0x62>
	}

	else if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 1)
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d106      	bne.n	8001a0a <HAL_GPIO_EXTI_Callback+0x62>
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_GPIO_EXTI_Callback+0x62>
	{
		SetHome_Flag = 2;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == B1_Pin)
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a10:	d10e      	bne.n	8001a30 <HAL_GPIO_EXTI_Callback+0x88>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a12:	2120      	movs	r1, #32
 8001a14:	4821      	ldr	r0, [pc, #132]	; (8001a9c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a16:	f004 fedc 	bl	80067d2 <HAL_GPIO_TogglePin>
		SetZeroState = (SetZeroState+1)%2;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	bfb8      	it	lt
 8001a28:	425b      	neglt	r3, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a2e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d124      	bne.n	8001a80 <HAL_GPIO_EXTI_Callback+0xd8>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001a36:	2110      	movs	r1, #16
 8001a38:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a3a:	f004 fe99 	bl	8006770 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d11a      	bne.n	8001a7a <HAL_GPIO_EXTI_Callback+0xd2>
		{
			Arm_State=Main;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_GPIO_EXTI_Callback+0x104>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2120      	movs	r1, #32
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a5c:	f004 fea0 	bl	80067a0 <HAL_GPIO_WritePin>
			volt = 0;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	2001      	movs	r0, #1
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	f7ff fe78 	bl	8001768 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_EXTI_Callback+0xd8>
			Emergency_status = 0;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_GPIO_EXTI_Callback+0x104>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	200003dc 	.word	0x200003dc
 8001a90:	200006bc 	.word	0x200006bc
 8001a94:	200000cb 	.word	0x200000cb
 8001a98:	200003e8 	.word	0x200003e8
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	20000088 	.word	0x20000088
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	200006a1 	.word	0x200006a1
 8001aac:	200003eb 	.word	0x200003eb

08001ab0 <micros>:

inline uint64_t micros()
{
 8001ab0:	b4b0      	push	{r4, r5, r7}
 8001ab2:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <micros+0x2c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	2200      	movs	r2, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <micros+0x30>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	1884      	adds	r4, r0, r2
 8001ac8:	eb41 0503 	adc.w	r5, r1, r3
 8001acc:	4622      	mov	r2, r4
 8001ace:	462b      	mov	r3, r5
}
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bcb0      	pop	{r4, r5, r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000290 	.word	0x20000290
 8001ae0:	20000698 	.word	0x20000698
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001aec:	ed2d 8b02 	vpush	{d8}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a6b      	ldr	r2, [pc, #428]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 809c 	bne.w	8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8097 	beq.w	8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>
 8001b0a:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8092 	bne.w	8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>
	{
		ReadEncoder();
 8001b14:	f7ff fe6c 	bl	80017f0 <ReadEncoder>
		TrajectoryEvaluation();
 8001b18:	f001 fd16 	bl	8003548 <TrajectoryEvaluation>
		kalmanfilter();
 8001b1c:	f000 fb3e 	bl	800219c <kalmanfilter>
		alpha = LowpassFilter(alpha_kalman);
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	f003 fbb1 	bl	8005290 <LowpassFilter>
 8001b2e:	eef0 7a40 	vmov.f32	s15, s0
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe ffd5 	bl	8000af0 <__aeabi_d2f>
 8001b46:	4606      	mov	r6, r0
 8001b48:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b4a:	ed93 8a00 	vldr	s16, [r3]
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7fe ffca 	bl	8000af0 <__aeabi_d2f>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eef0 1a67 	vmov.f32	s3, s15
 8001b68:	ee01 2a10 	vmov	s2, r2
 8001b6c:	eef0 0a48 	vmov.f32	s1, s16
 8001b70:	ee00 6a10 	vmov	s0, r6
 8001b74:	f002 fb8c 	bl	8004290 <Cascade>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]

		t+=dt;
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]

		if (theta_now >= (theta_f - 0.007) && theta_now <= (theta_f + 0.007))
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc7f 	bl	80004a0 <__aeabi_f2d>
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	4689      	mov	r9, r1
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bac:	a33c      	add	r3, pc, #240	; (adr r3, 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fb15 	bl	80001e0 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	f7fe ff4d 	bl	8000a5c <__aeabi_dcmpge>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d02c      	beq.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x13a>
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc67 	bl	80004a0 <__aeabi_f2d>
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	4689      	mov	r9, r1
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bdc:	a330      	add	r3, pc, #192	; (adr r3, 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe faff 	bl	80001e4 <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4640      	mov	r0, r8
 8001bec:	4649      	mov	r1, r9
 8001bee:	f7fe ff2b 	bl	8000a48 <__aeabi_dcmple>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d014      	beq.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x13a>
		{
			volt = 0;
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
			RunMotor(volt, PID_dir);
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	f7ff fdaa 	bl	8001768 <RunMotor>
			Go_Flag = 0;
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
			t = 0;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
		}

		RunMotor(volt, PID_dir);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	f7ff fd99 	bl	8001768 <RunMotor>
 8001c36:	e01b      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x188>
	}

	else if (htim == &htim4 && !Go_Flag && Arm_State != Home)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d117      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x188>
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d113      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x188>
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d00f      	beq.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x188>
	{
		ReadEncoder();
 8001c50:	f7ff fdce 	bl	80017f0 <ReadEncoder>
		kalmanfilter();
 8001c54:	f000 faa2 	bl	800219c <kalmanfilter>
		alpha = LowpassFilter(alpha_kalman);
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	f003 fb15 	bl	8005290 <LowpassFilter>
 8001c66:	eef0 7a40 	vmov.f32	s15, s0
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (htim == &htim11)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10a      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x1a6>
	{
		_micro += 65535;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c82:	1854      	adds	r4, r2, r1
 8001c84:	f143 0500 	adc.w	r5, r3, #0
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c8a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	ecbd 8b02 	vpop	{d8}
 8001c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	3126e979 	.word	0x3126e979
 8001ca4:	3f7cac08 	.word	0x3f7cac08
 8001ca8:	20000248 	.word	0x20000248
 8001cac:	200003e9 	.word	0x200003e9
 8001cb0:	200000cb 	.word	0x200000cb
 8001cb4:	2000040c 	.word	0x2000040c
 8001cb8:	20000414 	.word	0x20000414
 8001cbc:	20000628 	.word	0x20000628
 8001cc0:	20000404 	.word	0x20000404
 8001cc4:	20000630 	.word	0x20000630
 8001cc8:	20000408 	.word	0x20000408
 8001ccc:	200003dc 	.word	0x200003dc
 8001cd0:	20000594 	.word	0x20000594
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	200003f4 	.word	0x200003f4
 8001cdc:	200005d0 	.word	0x200005d0
 8001ce0:	200000ce 	.word	0x200000ce
 8001ce4:	20000290 	.word	0x20000290
 8001ce8:	20000698 	.word	0x20000698

08001cec <setmatrix>:

void setmatrix(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001cf0:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <setmatrix+0x1d4>)
 8001cf2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cf6:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001cf8:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <setmatrix+0x1d8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a70      	ldr	r2, [pc, #448]	; (8001ec0 <setmatrix+0x1d4>)
 8001cfe:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <setmatrix+0x1d8>)
 8001d02:	ed93 7a00 	vldr	s14, [r3]
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <setmatrix+0x1d8>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d18:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <setmatrix+0x1d4>)
 8001d1a:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001d1e:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <setmatrix+0x1d8>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <setmatrix+0x1d8>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2e:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <setmatrix+0x1d8>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d38:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d40:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <setmatrix+0x1d4>)
 8001d42:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001d46:	4b5e      	ldr	r3, [pc, #376]	; (8001ec0 <setmatrix+0x1d4>)
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <setmatrix+0x1d4>)
 8001d50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d54:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <setmatrix+0x1d8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <setmatrix+0x1d4>)
 8001d5c:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001d5e:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <setmatrix+0x1d8>)
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <setmatrix+0x1d8>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <setmatrix+0x1d4>)
 8001d78:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <setmatrix+0x1d4>)
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001d84:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <setmatrix+0x1d4>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <setmatrix+0x1d4>)
 8001d8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <setmatrix+0x1d8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a49      	ldr	r2, [pc, #292]	; (8001ec0 <setmatrix+0x1d4>)
 8001d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001d9c:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <setmatrix+0x1d4>)
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001da4:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <setmatrix+0x1d4>)
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <setmatrix+0x1d4>)
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <setmatrix+0x1d4>)
 8001db6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <setmatrix+0x1d8>)
 8001dbe:	ed93 7a00 	vldr	s14, [r3]
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <setmatrix+0x1d8>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <setmatrix+0x1d8>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <setmatrix+0x1dc>)
 8001de0:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <setmatrix+0x1d8>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <setmatrix+0x1d8>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <setmatrix+0x1dc>)
 8001dfe:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <setmatrix+0x1d8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <setmatrix+0x1dc>)
 8001e08:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <setmatrix+0x1dc>)
 8001e0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e10:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <setmatrix+0x1e0>)
 8001e14:	2204      	movs	r2, #4
 8001e16:	2104      	movs	r1, #4
 8001e18:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <setmatrix+0x1e4>)
 8001e1a:	f00a fa09 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <setmatrix+0x1d4>)
 8001e20:	2204      	movs	r2, #4
 8001e22:	2104      	movs	r1, #4
 8001e24:	482b      	ldr	r0, [pc, #172]	; (8001ed4 <setmatrix+0x1e8>)
 8001e26:	f00a fa03 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <setmatrix+0x1dc>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <setmatrix+0x1ec>)
 8001e32:	f00a f9fd 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <setmatrix+0x1f0>)
 8001e38:	2204      	movs	r2, #4
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4828      	ldr	r0, [pc, #160]	; (8001ee0 <setmatrix+0x1f4>)
 8001e3e:	f00a f9f7 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <setmatrix+0x1f8>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	2101      	movs	r1, #1
 8001e48:	4827      	ldr	r0, [pc, #156]	; (8001ee8 <setmatrix+0x1fc>)
 8001e4a:	f00a f9f1 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <setmatrix+0x200>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	2101      	movs	r1, #1
 8001e54:	4826      	ldr	r0, [pc, #152]	; (8001ef0 <setmatrix+0x204>)
 8001e56:	f00a f9eb 	bl	800c230 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <setmatrix+0x208>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4825      	ldr	r0, [pc, #148]	; (8001ef8 <setmatrix+0x20c>)
 8001e62:	f00a f9e5 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <setmatrix+0x210>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	4824      	ldr	r0, [pc, #144]	; (8001f00 <setmatrix+0x214>)
 8001e6e:	f00a f9df 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <setmatrix+0x218>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	2104      	movs	r1, #4
 8001e78:	4823      	ldr	r0, [pc, #140]	; (8001f08 <setmatrix+0x21c>)
 8001e7a:	f00a f9d9 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <setmatrix+0x220>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	2104      	movs	r1, #4
 8001e84:	4822      	ldr	r0, [pc, #136]	; (8001f10 <setmatrix+0x224>)
 8001e86:	f00a f9d3 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <setmatrix+0x228>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	2104      	movs	r1, #4
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <setmatrix+0x22c>)
 8001e92:	f00a f9cd 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <setmatrix+0x230>)
 8001e98:	2204      	movs	r2, #4
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4820      	ldr	r0, [pc, #128]	; (8001f20 <setmatrix+0x234>)
 8001e9e:	f00a f9c7 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <setmatrix+0x238>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	481f      	ldr	r0, [pc, #124]	; (8001f28 <setmatrix+0x23c>)
 8001eaa:	f00a f9c1 	bl	800c230 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <setmatrix+0x240>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	481e      	ldr	r0, [pc, #120]	; (8001f30 <setmatrix+0x244>)
 8001eb6:	f00a f9bb 	bl	800c230 <arm_mat_init_f32>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000488 	.word	0x20000488
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	200004c8 	.word	0x200004c8
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	20000418 	.word	0x20000418
 8001ed4:	20000420 	.word	0x20000420
 8001ed8:	20000428 	.word	0x20000428
 8001edc:	20000050 	.word	0x20000050
 8001ee0:	20000440 	.word	0x20000440
 8001ee4:	20000060 	.word	0x20000060
 8001ee8:	20000448 	.word	0x20000448
 8001eec:	20000064 	.word	0x20000064
 8001ef0:	20000430 	.word	0x20000430
 8001ef4:	200004d8 	.word	0x200004d8
 8001ef8:	20000450 	.word	0x20000450
 8001efc:	200004dc 	.word	0x200004dc
 8001f00:	20000438 	.word	0x20000438
 8001f04:	200004ec 	.word	0x200004ec
 8001f08:	20000468 	.word	0x20000468
 8001f0c:	200004fc 	.word	0x200004fc
 8001f10:	20000470 	.word	0x20000470
 8001f14:	2000050c 	.word	0x2000050c
 8001f18:	20000478 	.word	0x20000478
 8001f1c:	2000054c 	.word	0x2000054c
 8001f20:	20000480 	.word	0x20000480
 8001f24:	2000058c 	.word	0x2000058c
 8001f28:	20000458 	.word	0x20000458
 8001f2c:	20000590 	.word	0x20000590
 8001f30:	20000460 	.word	0x20000460

08001f34 <prediction>:

void prediction(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0c2      	sub	sp, #264	; 0x108
 8001f38:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <prediction+0xcc>)
 8001f3c:	4931      	ldr	r1, [pc, #196]	; (8002004 <prediction+0xd0>)
 8001f3e:	4832      	ldr	r0, [pc, #200]	; (8002008 <prediction+0xd4>)
 8001f40:	f00a f8d6 	bl	800c0f0 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001f44:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f48:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	2104      	movs	r1, #4
 8001f50:	f00a f96e 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001f54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f58:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2104      	movs	r1, #4
 8001f60:	f00a f966 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001f64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f68:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	2104      	movs	r1, #4
 8001f70:	f00a f95e 	bl	800c230 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	f107 0018 	add.w	r0, r7, #24
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	2104      	movs	r1, #4
 8001f80:	f00a f956 	bl	800c230 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	4638      	mov	r0, r7
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	f00a f94f 	bl	800c230 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	4619      	mov	r1, r3
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <prediction+0xd4>)
 8001f9a:	f009 ffe3 	bl	800bf64 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481a      	ldr	r0, [pc, #104]	; (800200c <prediction+0xd8>)
 8001fa4:	f009 ffde 	bl	800bf64 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001fa8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4918      	ldr	r1, [pc, #96]	; (8002010 <prediction+0xdc>)
 8001fb0:	4815      	ldr	r0, [pc, #84]	; (8002008 <prediction+0xd4>)
 8001fb2:	f00a f89d 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001fb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4915      	ldr	r1, [pc, #84]	; (8002014 <prediction+0xe0>)
 8001fbe:	4813      	ldr	r0, [pc, #76]	; (800200c <prediction+0xd8>)
 8001fc0:	f00a f896 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001fc4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001fc8:	f107 0118 	add.w	r1, r7, #24
 8001fcc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00a f88d 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001fd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fda:	4639      	mov	r1, r7
 8001fdc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00a f885 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001fe6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001fea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <prediction+0xe4>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00a f921 	bl	800c238 <arm_mat_add_f32>
}
 8001ff6:	bf00      	nop
 8001ff8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000470 	.word	0x20000470
 8002004:	20000468 	.word	0x20000468
 8002008:	20000420 	.word	0x20000420
 800200c:	20000428 	.word	0x20000428
 8002010:	20000478 	.word	0x20000478
 8002014:	20000430 	.word	0x20000430
 8002018:	20000480 	.word	0x20000480

0800201c <update>:

void update(){
 800201c:	b580      	push	{r7, lr}
 800201e:	b0ae      	sub	sp, #184	; 0xb8
 8002020:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8002022:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002026:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800202a:	2201      	movs	r2, #1
 800202c:	2101      	movs	r1, #1
 800202e:	f00a f8ff 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8002032:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002036:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800203a:	2204      	movs	r2, #4
 800203c:	2104      	movs	r1, #4
 800203e:	f00a f8f7 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8002042:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002046:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800204a:	2201      	movs	r2, #1
 800204c:	2104      	movs	r1, #4
 800204e:	f00a f8ef 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8002052:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002056:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800205a:	2204      	movs	r2, #4
 800205c:	2101      	movs	r1, #1
 800205e:	f00a f8e7 	bl	800c230 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8002062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800206a:	2201      	movs	r2, #1
 800206c:	2101      	movs	r1, #1
 800206e:	f00a f8df 	bl	800c230 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8002072:	f107 0318 	add.w	r3, r7, #24
 8002076:	f107 0010 	add.w	r0, r7, #16
 800207a:	2201      	movs	r2, #1
 800207c:	2104      	movs	r1, #4
 800207e:	f00a f8d7 	bl	800c230 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	4619      	mov	r1, r3
 8002088:	4837      	ldr	r0, [pc, #220]	; (8002168 <update+0x14c>)
 800208a:	f009 ff6b 	bl	800bf64 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 800208e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002092:	461a      	mov	r2, r3
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <update+0x150>)
 8002096:	4834      	ldr	r0, [pc, #208]	; (8002168 <update+0x14c>)
 8002098:	f00a f82a 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 800209c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a0:	f107 0110 	add.w	r1, r7, #16
 80020a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00a f821 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 80020ae:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	4619      	mov	r1, r3
 80020b8:	482d      	ldr	r0, [pc, #180]	; (8002170 <update+0x154>)
 80020ba:	f00a f8bd 	bl	800c238 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 80020be:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80020c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ca:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	f107 0008 	add.w	r0, r7, #8
 80020d4:	2201      	movs	r2, #1
 80020d6:	2101      	movs	r1, #1
 80020d8:	f00a f8aa 	bl	800c230 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 80020dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	4821      	ldr	r0, [pc, #132]	; (800216c <update+0x150>)
 80020e8:	f00a f802 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 80020ec:	f107 0108 	add.w	r1, r7, #8
 80020f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <update+0x158>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f009 fffa 	bl	800c0f0 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 80020fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002100:	461a      	mov	r2, r3
 8002102:	4919      	ldr	r1, [pc, #100]	; (8002168 <update+0x14c>)
 8002104:	481b      	ldr	r0, [pc, #108]	; (8002174 <update+0x158>)
 8002106:	f009 fff3 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 800210a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800210e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002112:	4619      	mov	r1, r3
 8002114:	4818      	ldr	r0, [pc, #96]	; (8002178 <update+0x15c>)
 8002116:	f009 ff81 	bl	800c01c <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 800211a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <update+0x160>)
 8002120:	4912      	ldr	r1, [pc, #72]	; (800216c <update+0x150>)
 8002122:	4618      	mov	r0, r3
 8002124:	f009 ffe4 	bl	800c0f0 <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <update+0x164>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <update+0x168>)
 800212e:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 8002130:	4a15      	ldr	r2, [pc, #84]	; (8002188 <update+0x16c>)
 8002132:	4916      	ldr	r1, [pc, #88]	; (800218c <update+0x170>)
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <update+0x14c>)
 8002136:	f009 ffdb 	bl	800c0f0 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <update+0x174>)
 800213c:	4912      	ldr	r1, [pc, #72]	; (8002188 <update+0x16c>)
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <update+0x178>)
 8002140:	f009 ff6c 	bl	800c01c <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 8002144:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002148:	461a      	mov	r2, r3
 800214a:	4911      	ldr	r1, [pc, #68]	; (8002190 <update+0x174>)
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <update+0x158>)
 800214e:	f009 ffcf 	bl	800c0f0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 8002152:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <update+0x17c>)
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <update+0x170>)
 800215a:	4618      	mov	r0, r3
 800215c:	f00a f86c 	bl	800c238 <arm_mat_add_f32>
}
 8002160:	bf00      	nop
 8002162:	37b8      	adds	r7, #184	; 0xb8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000440 	.word	0x20000440
 800216c:	20000480 	.word	0x20000480
 8002170:	20000448 	.word	0x20000448
 8002174:	20000438 	.word	0x20000438
 8002178:	20000418 	.word	0x20000418
 800217c:	20000478 	.word	0x20000478
 8002180:	200003f4 	.word	0x200003f4
 8002184:	200004d8 	.word	0x200004d8
 8002188:	20000460 	.word	0x20000460
 800218c:	20000470 	.word	0x20000470
 8002190:	20000458 	.word	0x20000458
 8002194:	20000450 	.word	0x20000450
 8002198:	20000468 	.word	0x20000468

0800219c <kalmanfilter>:

void kalmanfilter()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	prediction();
 80021a0:	f7ff fec8 	bl	8001f34 <prediction>
	update();
 80021a4:	f7ff ff3a 	bl	800201c <update>
	position_kalman = data_x_new[0];
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <kalmanfilter+0x30>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <kalmanfilter+0x34>)
 80021ae:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <kalmanfilter+0x30>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <kalmanfilter+0x38>)
 80021b6:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <kalmanfilter+0x30>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <kalmanfilter+0x3c>)
 80021be:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <kalmanfilter+0x30>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a05      	ldr	r2, [pc, #20]	; (80021dc <kalmanfilter+0x40>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200004fc 	.word	0x200004fc
 80021d0:	20000404 	.word	0x20000404
 80021d4:	20000408 	.word	0x20000408
 80021d8:	2000040c 	.word	0x2000040c
 80021dc:	20000410 	.word	0x20000410

080021e0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4b97      	ldr	r3, [pc, #604]	; (8002448 <TrajectoryGenerator+0x268>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f001 8169 	beq.w	80034c4 <TrajectoryGenerator+0x12e4>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 80021f2:	4b96      	ldr	r3, [pc, #600]	; (800244c <TrajectoryGenerator+0x26c>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fc78 	bl	8000af0 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	ee00 3a10 	vmov	s0, r3
 8002206:	f002 f94b 	bl	80044a0 <positive>
 800220a:	ee10 3a10 	vmov	r3, s0
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f946 	bl	80004a0 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	498c      	ldr	r1, [pc, #560]	; (800244c <TrajectoryGenerator+0x26c>)
 800221a:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 800221e:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <TrajectoryGenerator+0x270>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fc62 	bl	8000af0 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	ee00 3a10 	vmov	s0, r3
 8002232:	f002 f935 	bl	80044a0 <positive>
 8002236:	ee10 3a10 	vmov	r3, s0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f930 	bl	80004a0 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4982      	ldr	r1, [pc, #520]	; (8002450 <TrajectoryGenerator+0x270>)
 8002246:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 800224a:	4b82      	ldr	r3, [pc, #520]	; (8002454 <TrajectoryGenerator+0x274>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fc4c 	bl	8000af0 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	ee00 3a10 	vmov	s0, r3
 800225e:	f002 f91f 	bl	80044a0 <positive>
 8002262:	ee10 3a10 	vmov	r3, s0
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f91a 	bl	80004a0 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4978      	ldr	r1, [pc, #480]	; (8002454 <TrajectoryGenerator+0x274>)
 8002272:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 8002276:	4b78      	ldr	r3, [pc, #480]	; (8002458 <TrajectoryGenerator+0x278>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f910 	bl	80004a0 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4975      	ldr	r1, [pc, #468]	; (800245c <TrajectoryGenerator+0x27c>)
 8002286:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 800228a:	4b75      	ldr	r3, [pc, #468]	; (8002460 <TrajectoryGenerator+0x280>)
 800228c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002290:	4b72      	ldr	r3, [pc, #456]	; (800245c <TrajectoryGenerator+0x27c>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fd ffa3 	bl	80001e0 <__aeabi_dsub>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4971      	ldr	r1, [pc, #452]	; (8002464 <TrajectoryGenerator+0x284>)
 80022a0:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 80022a4:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <TrajectoryGenerator+0x284>)
 80022a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f7fe fbbf 	bl	8000a34 <__aeabi_dcmplt>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <TrajectoryGenerator+0xf6>
		{
			theta_dest = -(theta_dest);
 80022bc:	4b69      	ldr	r3, [pc, #420]	; (8002464 <TrajectoryGenerator+0x284>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	4614      	mov	r4, r2
 80022c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80022c8:	4b66      	ldr	r3, [pc, #408]	; (8002464 <TrajectoryGenerator+0x284>)
 80022ca:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <TrajectoryGenerator+0x288>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e002      	b.n	80022dc <TrajectoryGenerator+0xfc>
		}

		else
		{
			dir = 1;
 80022d6:	4b64      	ldr	r3, [pc, #400]	; (8002468 <TrajectoryGenerator+0x288>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
		}

		//Change Cascade Gain
		if (theta_dest >= 6.0737)
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <TrajectoryGenerator+0x284>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	a34f      	add	r3, pc, #316	; (adr r3, 8002420 <TrajectoryGenerator+0x240>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe fbb8 	bl	8000a5c <__aeabi_dcmpge>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01e      	beq.n	8002330 <TrajectoryGenerator+0x150>
		{
			kp_1 = 0;
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <TrajectoryGenerator+0x28c>)
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			ki_1 = 0;
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <TrajectoryGenerator+0x290>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
			kd_1 = 0;
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <TrajectoryGenerator+0x294>)
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

			kp_2 = 0.001;
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <TrajectoryGenerator+0x298>)
 800230c:	4a5b      	ldr	r2, [pc, #364]	; (800247c <TrajectoryGenerator+0x29c>)
 800230e:	601a      	str	r2, [r3, #0]
			ki_2 = 0.04;
 8002310:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <TrajectoryGenerator+0x2a0>)
 8002312:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <TrajectoryGenerator+0x2a4>)
 8002314:	601a      	str	r2, [r3, #0]
			kd_2 = 0.0001;
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <TrajectoryGenerator+0x2a8>)
 8002318:	4a5c      	ldr	r2, [pc, #368]	; (800248c <TrajectoryGenerator+0x2ac>)
 800231a:	601a      	str	r2, [r3, #0]

			j_max = 0.6;
 800231c:	494b      	ldr	r1, [pc, #300]	; (800244c <TrajectoryGenerator+0x26c>)
 800231e:	a342      	add	r3, pc, #264	; (adr r3, 8002428 <TrajectoryGenerator+0x248>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	e9c1 2300 	strd	r2, r3, [r1]

			TrajectoryEvaluationFlag =1;
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <TrajectoryGenerator+0x2b0>)
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e04d      	b.n	80023cc <TrajectoryGenerator+0x1ec>
		}

		else if(theta_dest <= 0.524){
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <TrajectoryGenerator+0x284>)
 8002332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002336:	a33e      	add	r3, pc, #248	; (adr r3, 8002430 <TrajectoryGenerator+0x250>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fe fb84 	bl	8000a48 <__aeabi_dcmple>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d021      	beq.n	800238a <TrajectoryGenerator+0x1aa>
			kp_1 = 0;
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <TrajectoryGenerator+0x28c>)
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
			ki_1 = 0;
 800234e:	4b48      	ldr	r3, [pc, #288]	; (8002470 <TrajectoryGenerator+0x290>)
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
			kd_1 = 0;
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <TrajectoryGenerator+0x294>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

			kp_2 = 0;
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <TrajectoryGenerator+0x298>)
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
			ki_2 = 0;
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <TrajectoryGenerator+0x2a0>)
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
			kd_2 = 0;
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <TrajectoryGenerator+0x2a8>)
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

			j_max = 0.4;
 8002376:	4935      	ldr	r1, [pc, #212]	; (800244c <TrajectoryGenerator+0x26c>)
 8002378:	a32f      	add	r3, pc, #188	; (adr r3, 8002438 <TrajectoryGenerator+0x258>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	e9c1 2300 	strd	r2, r3, [r1]

			TrajectoryEvaluationFlag = 0;
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <TrajectoryGenerator+0x2b0>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e020      	b.n	80023cc <TrajectoryGenerator+0x1ec>
		}

		else{
			kp_1 = kp_1_m;
 800238a:	4b42      	ldr	r3, [pc, #264]	; (8002494 <TrajectoryGenerator+0x2b4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a37      	ldr	r2, [pc, #220]	; (800246c <TrajectoryGenerator+0x28c>)
 8002390:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_m;
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <TrajectoryGenerator+0x2b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <TrajectoryGenerator+0x290>)
 8002398:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_m;
 800239a:	4b40      	ldr	r3, [pc, #256]	; (800249c <TrajectoryGenerator+0x2bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a35      	ldr	r2, [pc, #212]	; (8002474 <TrajectoryGenerator+0x294>)
 80023a0:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_m;
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <TrajectoryGenerator+0x2c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a34      	ldr	r2, [pc, #208]	; (8002478 <TrajectoryGenerator+0x298>)
 80023a8:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_m;
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <TrajectoryGenerator+0x2c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a34      	ldr	r2, [pc, #208]	; (8002480 <TrajectoryGenerator+0x2a0>)
 80023b0:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_m;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <TrajectoryGenerator+0x2c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a34      	ldr	r2, [pc, #208]	; (8002488 <TrajectoryGenerator+0x2a8>)
 80023b8:	6013      	str	r3, [r2, #0]

			j_max = 0.4;
 80023ba:	4924      	ldr	r1, [pc, #144]	; (800244c <TrajectoryGenerator+0x26c>)
 80023bc:	a31e      	add	r3, pc, #120	; (adr r3, 8002438 <TrajectoryGenerator+0x258>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	e9c1 2300 	strd	r2, r3, [r1]

			TrajectoryEvaluationFlag = 1;
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <TrajectoryGenerator+0x2b0>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
		}



		if(w_max*j_max < pow(a_max,2.0)){
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <TrajectoryGenerator+0x274>)
 80023ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <TrajectoryGenerator+0x26c>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f8ba 	bl	8000550 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4614      	mov	r4, r2
 80023e2:	461d      	mov	r5, r3
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <TrajectoryGenerator+0x270>)
 80023e6:	ed93 7b00 	vldr	d7, [r3]
 80023ea:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002440 <TrajectoryGenerator+0x260>
 80023ee:	eeb0 0a47 	vmov.f32	s0, s14
 80023f2:	eef0 0a67 	vmov.f32	s1, s15
 80023f6:	f00a f83f 	bl	800c478 <pow>
 80023fa:	ec53 2b10 	vmov	r2, r3, d0
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe fb17 	bl	8000a34 <__aeabi_dcmplt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d053      	beq.n	80024b4 <TrajectoryGenerator+0x2d4>
			M=1.0;
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <TrajectoryGenerator+0x2cc>)
 800240e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002412:	601a      	str	r2, [r3, #0]
			N=0.0;
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <TrajectoryGenerator+0x2d0>)
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e072      	b.n	8002504 <TrajectoryGenerator+0x324>
 800241e:	bf00      	nop
 8002420:	0346dc5d 	.word	0x0346dc5d
 8002424:	40184b78 	.word	0x40184b78
 8002428:	33333333 	.word	0x33333333
 800242c:	3fe33333 	.word	0x3fe33333
 8002430:	a5e353f8 	.word	0xa5e353f8
 8002434:	3fe0c49b 	.word	0x3fe0c49b
 8002438:	9999999a 	.word	0x9999999a
 800243c:	3fd99999 	.word	0x3fd99999
 8002440:	00000000 	.word	0x00000000
 8002444:	40000000 	.word	0x40000000
 8002448:	200003ea 	.word	0x200003ea
 800244c:	20000078 	.word	0x20000078
 8002450:	20000070 	.word	0x20000070
 8002454:	20000068 	.word	0x20000068
 8002458:	200003f4 	.word	0x200003f4
 800245c:	200005c8 	.word	0x200005c8
 8002460:	200005d0 	.word	0x200005d0
 8002464:	200005d8 	.word	0x200005d8
 8002468:	200000cd 	.word	0x200000cd
 800246c:	2000065c 	.word	0x2000065c
 8002470:	20000660 	.word	0x20000660
 8002474:	20000664 	.word	0x20000664
 8002478:	20000668 	.word	0x20000668
 800247c:	3a83126f 	.word	0x3a83126f
 8002480:	2000066c 	.word	0x2000066c
 8002484:	3d23d70a 	.word	0x3d23d70a
 8002488:	20000670 	.word	0x20000670
 800248c:	38d1b717 	.word	0x38d1b717
 8002490:	200005c0 	.word	0x200005c0
 8002494:	20000674 	.word	0x20000674
 8002498:	20000678 	.word	0x20000678
 800249c:	2000067c 	.word	0x2000067c
 80024a0:	20000080 	.word	0x20000080
 80024a4:	20000084 	.word	0x20000084
 80024a8:	20000680 	.word	0x20000680
 80024ac:	200006e8 	.word	0x200006e8
 80024b0:	200006ec 	.word	0x200006ec
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 80024b4:	4b96      	ldr	r3, [pc, #600]	; (8002710 <TrajectoryGenerator+0x530>)
 80024b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ba:	4b96      	ldr	r3, [pc, #600]	; (8002714 <TrajectoryGenerator+0x534>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fe f846 	bl	8000550 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4b92      	ldr	r3, [pc, #584]	; (8002718 <TrajectoryGenerator+0x538>)
 80024ce:	ed93 7b00 	vldr	d7, [r3]
 80024d2:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002700 <TrajectoryGenerator+0x520>
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	f009 ffcb 	bl	800c478 <pow>
 80024e2:	ec53 2b10 	vmov	r2, r3, d0
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fe fab7 	bl	8000a5c <__aeabi_dcmpge>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <TrajectoryGenerator+0x324>
			M=0.0;
 80024f4:	4b89      	ldr	r3, [pc, #548]	; (800271c <TrajectoryGenerator+0x53c>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
			N=1.0;
 80024fc:	4b88      	ldr	r3, [pc, #544]	; (8002720 <TrajectoryGenerator+0x540>)
 80024fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002502:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <TrajectoryGenerator+0x538>)
 8002506:	ed93 7b00 	vldr	d7, [r3]
 800250a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002700 <TrajectoryGenerator+0x520>
 800250e:	eeb0 0a47 	vmov.f32	s0, s14
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	f009 ffaf 	bl	800c478 <pow>
 800251a:	ec51 0b10 	vmov	r0, r1, d0
 800251e:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <TrajectoryGenerator+0x534>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f93e 	bl	80007a4 <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f7fe fade 	bl	8000af0 <__aeabi_d2f>
 8002534:	4603      	mov	r3, r0
 8002536:	4a7b      	ldr	r2, [pc, #492]	; (8002724 <TrajectoryGenerator+0x544>)
 8002538:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <TrajectoryGenerator+0x538>)
 800253c:	ed93 7b00 	vldr	d7, [r3]
 8002540:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002708 <TrajectoryGenerator+0x528>
 8002544:	eeb0 0a47 	vmov.f32	s0, s14
 8002548:	eef0 0a67 	vmov.f32	s1, s15
 800254c:	f009 ff94 	bl	800c478 <pow>
 8002550:	ec51 0b10 	vmov	r0, r1, d0
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	f7fd fe44 	bl	80001e4 <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4614      	mov	r4, r2
 8002562:	461d      	mov	r5, r3
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <TrajectoryGenerator+0x534>)
 8002566:	ed93 7b00 	vldr	d7, [r3]
 800256a:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002700 <TrajectoryGenerator+0x520>
 800256e:	eeb0 0a47 	vmov.f32	s0, s14
 8002572:	eef0 0a67 	vmov.f32	s1, s15
 8002576:	f009 ff7f 	bl	800c478 <pow>
 800257a:	ec53 2b10 	vmov	r2, r3, d0
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fe f90f 	bl	80007a4 <__aeabi_ddiv>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe faaf 	bl	8000af0 <__aeabi_d2f>
 8002592:	4603      	mov	r3, r0
 8002594:	4a64      	ldr	r2, [pc, #400]	; (8002728 <TrajectoryGenerator+0x548>)
 8002596:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 8002598:	4b60      	ldr	r3, [pc, #384]	; (800271c <TrajectoryGenerator+0x53c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff7f 	bl	80004a0 <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <TrajectoryGenerator+0x530>)
 80025a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <TrajectoryGenerator+0x534>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f8f7 	bl	80007a4 <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b17 	vmov	d7, r2, r3
 80025be:	eeb0 0a47 	vmov.f32	s0, s14
 80025c2:	eef0 0a67 	vmov.f32	s1, s15
 80025c6:	f009 ffc7 	bl	800c558 <sqrt>
 80025ca:	ec51 0b10 	vmov	r0, r1, d0
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	f7fd fe07 	bl	80001e4 <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f7fd ffb7 	bl	8000550 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4690      	mov	r8, r2
 80025e8:	4699      	mov	r9, r3
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <TrajectoryGenerator+0x540>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff56 	bl	80004a0 <__aeabi_f2d>
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	4b45      	ldr	r3, [pc, #276]	; (8002710 <TrajectoryGenerator+0x530>)
 80025fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <TrajectoryGenerator+0x538>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f8ce 	bl	80007a4 <__aeabi_ddiv>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4692      	mov	sl, r2
 800260e:	469b      	mov	fp, r3
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <TrajectoryGenerator+0x538>)
 8002612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <TrajectoryGenerator+0x534>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fe f8c2 	bl	80007a4 <__aeabi_ddiv>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4650      	mov	r0, sl
 8002626:	4659      	mov	r1, fp
 8002628:	f7fd fddc 	bl	80001e4 <__adddf3>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd ff8c 	bl	8000550 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4640      	mov	r0, r8
 800263e:	4649      	mov	r1, r9
 8002640:	f7fd fdd0 	bl	80001e4 <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <TrajectoryGenerator+0x530>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd ff7d 	bl	8000550 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa47 	bl	8000af0 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	4a31      	ldr	r2, [pc, #196]	; (800272c <TrajectoryGenerator+0x54c>)
 8002666:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <TrajectoryGenerator+0x544>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff17 	bl	80004a0 <__aeabi_f2d>
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <TrajectoryGenerator+0x530>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fe f9fa 	bl	8000a70 <__aeabi_dcmpgt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80ea 	beq.w	8002858 <TrajectoryGenerator+0x678>
			if(theta_dest > Sa){
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <TrajectoryGenerator+0x548>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff09 	bl	80004a0 <__aeabi_f2d>
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <TrajectoryGenerator+0x550>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f9ce 	bl	8000a34 <__aeabi_dcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d050      	beq.n	8002740 <TrajectoryGenerator+0x560>
				//caseI
				tj = sqrt((w_max/j_max));
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <TrajectoryGenerator+0x530>)
 80026a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <TrajectoryGenerator+0x534>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fe f87b 	bl	80007a4 <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ec43 2b17 	vmov	d7, r2, r3
 80026b6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ba:	eef0 0a67 	vmov.f32	s1, s15
 80026be:	f009 ff4b 	bl	800c558 <sqrt>
 80026c2:	ec53 2b10 	vmov	r2, r3, d0
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa11 	bl	8000af0 <__aeabi_d2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <TrajectoryGenerator+0x554>)
 80026d2:	6013      	str	r3, [r2, #0]
				ta = tj;
 80026d4:	4b17      	ldr	r3, [pc, #92]	; (8002734 <TrajectoryGenerator+0x554>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <TrajectoryGenerator+0x558>)
 80026da:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <TrajectoryGenerator+0x550>)
 80026de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <TrajectoryGenerator+0x530>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fe f85c 	bl	80007a4 <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe f9fc 	bl	8000af0 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <TrajectoryGenerator+0x55c>)
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e223      	b.n	8002b48 <TrajectoryGenerator+0x968>
 8002700:	00000000 	.word	0x00000000
 8002704:	40000000 	.word	0x40000000
 8002708:	00000000 	.word	0x00000000
 800270c:	40080000 	.word	0x40080000
 8002710:	20000068 	.word	0x20000068
 8002714:	20000078 	.word	0x20000078
 8002718:	20000070 	.word	0x20000070
 800271c:	200006e8 	.word	0x200006e8
 8002720:	200006ec 	.word	0x200006ec
 8002724:	200006f0 	.word	0x200006f0
 8002728:	200006f4 	.word	0x200006f4
 800272c:	200006f8 	.word	0x200006f8
 8002730:	200005d8 	.word	0x200005d8
 8002734:	200005b4 	.word	0x200005b4
 8002738:	200005b8 	.word	0x200005b8
 800273c:	200005bc 	.word	0x200005bc
			}
			else if(theta_dest < Sa){
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <TrajectoryGenerator+0x720>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd feab 	bl	80004a0 <__aeabi_f2d>
 800274a:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <TrajectoryGenerator+0x724>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fe f98e 	bl	8000a70 <__aeabi_dcmpgt>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 81f6 	beq.w	8002b48 <TrajectoryGenerator+0x968>
				if(theta_dest < Sv){
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <TrajectoryGenerator+0x728>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fe9d 	bl	80004a0 <__aeabi_f2d>
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <TrajectoryGenerator+0x724>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fe f980 	bl	8000a70 <__aeabi_dcmpgt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d031      	beq.n	80027da <TrajectoryGenerator+0x5fa>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <TrajectoryGenerator+0x724>)
 8002778:	e9d3 4500 	ldrd	r4, r5, [r3]
 800277c:	4b63      	ldr	r3, [pc, #396]	; (800290c <TrajectoryGenerator+0x72c>)
 800277e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	f7fd fd2d 	bl	80001e4 <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4620      	mov	r0, r4
 8002790:	4629      	mov	r1, r5
 8002792:	f7fe f807 	bl	80007a4 <__aeabi_ddiv>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	ec43 2b17 	vmov	d7, r2, r3
 800279e:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80028f8 <TrajectoryGenerator+0x718>
 80027a2:	eeb0 0a47 	vmov.f32	s0, s14
 80027a6:	eef0 0a67 	vmov.f32	s1, s15
 80027aa:	f009 fe65 	bl	800c478 <pow>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f99b 	bl	8000af0 <__aeabi_d2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <TrajectoryGenerator+0x730>)
 80027be:	6013      	str	r3, [r2, #0]
					ta = tj;
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <TrajectoryGenerator+0x730>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a53      	ldr	r2, [pc, #332]	; (8002914 <TrajectoryGenerator+0x734>)
 80027c6:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 80027c8:	4b51      	ldr	r3, [pc, #324]	; (8002910 <TrajectoryGenerator+0x730>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027d2:	4b51      	ldr	r3, [pc, #324]	; (8002918 <TrajectoryGenerator+0x738>)
 80027d4:	edc3 7a00 	vstr	s15, [r3]
 80027d8:	e1b6      	b.n	8002b48 <TrajectoryGenerator+0x968>
				}
				else if(theta_dest > Sv){
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <TrajectoryGenerator+0x728>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe5e 	bl	80004a0 <__aeabi_f2d>
 80027e4:	4b47      	ldr	r3, [pc, #284]	; (8002904 <TrajectoryGenerator+0x724>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fe f923 	bl	8000a34 <__aeabi_dcmplt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 81a9 	beq.w	8002b48 <TrajectoryGenerator+0x968>
					//caseIII
					tj = sqrt((w_max/j_max));
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <TrajectoryGenerator+0x73c>)
 80027f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fc:	4b43      	ldr	r3, [pc, #268]	; (800290c <TrajectoryGenerator+0x72c>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ffcf 	bl	80007a4 <__aeabi_ddiv>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	ec43 2b17 	vmov	d7, r2, r3
 800280e:	eeb0 0a47 	vmov.f32	s0, s14
 8002812:	eef0 0a67 	vmov.f32	s1, s15
 8002816:	f009 fe9f 	bl	800c558 <sqrt>
 800281a:	ec53 2b10 	vmov	r2, r3, d0
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f965 	bl	8000af0 <__aeabi_d2f>
 8002826:	4603      	mov	r3, r0
 8002828:	4a39      	ldr	r2, [pc, #228]	; (8002910 <TrajectoryGenerator+0x730>)
 800282a:	6013      	str	r3, [r2, #0]
					ta = tj;
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <TrajectoryGenerator+0x730>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <TrajectoryGenerator+0x734>)
 8002832:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002834:	4b33      	ldr	r3, [pc, #204]	; (8002904 <TrajectoryGenerator+0x724>)
 8002836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <TrajectoryGenerator+0x73c>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd ffb0 	bl	80007a4 <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f950 	bl	8000af0 <__aeabi_d2f>
 8002850:	4603      	mov	r3, r0
 8002852:	4a31      	ldr	r2, [pc, #196]	; (8002918 <TrajectoryGenerator+0x738>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e177      	b.n	8002b48 <TrajectoryGenerator+0x968>
				}
			}
		}
		else if(w_max >= Va){
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <TrajectoryGenerator+0x740>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe1f 	bl	80004a0 <__aeabi_f2d>
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <TrajectoryGenerator+0x73c>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fe f8ee 	bl	8000a48 <__aeabi_dcmple>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 816a 	beq.w	8002b48 <TrajectoryGenerator+0x968>
			if(theta_dest < Sa){
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <TrajectoryGenerator+0x720>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe11 	bl	80004a0 <__aeabi_f2d>
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <TrajectoryGenerator+0x724>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fe f8f4 	bl	8000a70 <__aeabi_dcmpgt>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04a      	beq.n	8002924 <TrajectoryGenerator+0x744>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <TrajectoryGenerator+0x724>)
 8002890:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <TrajectoryGenerator+0x72c>)
 8002896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	f7fd fca1 	bl	80001e4 <__adddf3>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd ff7b 	bl	80007a4 <__aeabi_ddiv>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	ec43 2b17 	vmov	d7, r2, r3
 80028b6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80028f8 <TrajectoryGenerator+0x718>
 80028ba:	eeb0 0a47 	vmov.f32	s0, s14
 80028be:	eef0 0a67 	vmov.f32	s1, s15
 80028c2:	f009 fdd9 	bl	800c478 <pow>
 80028c6:	ec53 2b10 	vmov	r2, r3, d0
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f90f 	bl	8000af0 <__aeabi_d2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <TrajectoryGenerator+0x730>)
 80028d6:	6013      	str	r3, [r2, #0]
				ta = tj;
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <TrajectoryGenerator+0x730>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <TrajectoryGenerator+0x734>)
 80028de:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <TrajectoryGenerator+0x730>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <TrajectoryGenerator+0x738>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
 80028f0:	e12a      	b.n	8002b48 <TrajectoryGenerator+0x968>
 80028f2:	bf00      	nop
 80028f4:	f3af 8000 	nop.w
 80028f8:	85f06f69 	.word	0x85f06f69
 80028fc:	3fd554c9 	.word	0x3fd554c9
 8002900:	200006f4 	.word	0x200006f4
 8002904:	200005d8 	.word	0x200005d8
 8002908:	200006f8 	.word	0x200006f8
 800290c:	20000078 	.word	0x20000078
 8002910:	200005b4 	.word	0x200005b4
 8002914:	200005b8 	.word	0x200005b8
 8002918:	200005bc 	.word	0x200005bc
 800291c:	20000068 	.word	0x20000068
 8002920:	200006f0 	.word	0x200006f0
			}
			else if(theta_dest >= Sa){
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <TrajectoryGenerator+0x8c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fdb9 	bl	80004a0 <__aeabi_f2d>
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <TrajectoryGenerator+0x8c4>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fe f888 	bl	8000a48 <__aeabi_dcmple>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8104 	beq.w	8002b48 <TrajectoryGenerator+0x968>
				if(theta_dest < Sv){
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <TrajectoryGenerator+0x8c8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdab 	bl	80004a0 <__aeabi_f2d>
 800294a:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <TrajectoryGenerator+0x8c4>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fe f88e 	bl	8000a70 <__aeabi_dcmpgt>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80b6 	beq.w	8002ac8 <TrajectoryGenerator+0x8e8>
					//caseVI
					tj = a_max/j_max;
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <TrajectoryGenerator+0x8cc>)
 800295e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002962:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <TrajectoryGenerator+0x8d0>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd ff1c 	bl	80007a4 <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f8bc 	bl	8000af0 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <TrajectoryGenerator+0x8d4>)
 800297c:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <TrajectoryGenerator+0x8c4>)
 8002980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <TrajectoryGenerator+0x8d8>)
 800298a:	f7fd fde1 	bl	8000550 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	461d      	mov	r5, r3
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <TrajectoryGenerator+0x8d0>)
 8002998:	ed93 7b00 	vldr	d7, [r3]
 800299c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002a90 <TrajectoryGenerator+0x8b0>
 80029a0:	eeb0 0a47 	vmov.f32	s0, s14
 80029a4:	eef0 0a67 	vmov.f32	s1, s15
 80029a8:	f009 fd66 	bl	800c478 <pow>
 80029ac:	ec53 2b10 	vmov	r2, r3, d0
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fdcc 	bl	8000550 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <TrajectoryGenerator+0x8cc>)
 80029c2:	ed93 7b00 	vldr	d7, [r3]
 80029c6:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002a98 <TrajectoryGenerator+0x8b8>
 80029ca:	eeb0 0a47 	vmov.f32	s0, s14
 80029ce:	eef0 0a67 	vmov.f32	s1, s15
 80029d2:	f009 fd51 	bl	800c478 <pow>
 80029d6:	ec53 2b10 	vmov	r2, r3, d0
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd fc01 	bl	80001e4 <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <TrajectoryGenerator+0x8d0>)
 80029ec:	ed93 7b00 	vldr	d7, [r3]
 80029f0:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8002a90 <TrajectoryGenerator+0x8b0>
 80029f4:	eeb0 0a47 	vmov.f32	s0, s14
 80029f8:	eef0 0a67 	vmov.f32	s1, s15
 80029fc:	f009 fd3c 	bl	800c478 <pow>
 8002a00:	ec51 0b10 	vmov	r0, r1, d0
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <TrajectoryGenerator+0x8cc>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fda1 	bl	8000550 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fec5 	bl	80007a4 <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	ec43 2b17 	vmov	d7, r2, r3
 8002a22:	eeb0 0a47 	vmov.f32	s0, s14
 8002a26:	eef0 0a67 	vmov.f32	s1, s15
 8002a2a:	f009 fd95 	bl	800c558 <sqrt>
 8002a2e:	ec55 4b10 	vmov	r4, r5, d0
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <TrajectoryGenerator+0x8cc>)
 8002a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <TrajectoryGenerator+0x8d0>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd feb1 	bl	80007a4 <__aeabi_ddiv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4620      	mov	r0, r4
 8002a48:	4629      	mov	r1, r5
 8002a4a:	f7fd fbc9 	bl	80001e0 <__aeabi_dsub>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <TrajectoryGenerator+0x8dc>)
 8002a5c:	f7fd fd78 	bl	8000550 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f842 	bl	8000af0 <__aeabi_d2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <TrajectoryGenerator+0x8e0>)
 8002a70:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <TrajectoryGenerator+0x8e0>)
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <TrajectoryGenerator+0x8d4>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <TrajectoryGenerator+0x8e4>)
 8002a84:	edc3 7a00 	vstr	s15, [r3]
 8002a88:	e05e      	b.n	8002b48 <TrajectoryGenerator+0x968>
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w
 8002a90:	00000000 	.word	0x00000000
 8002a94:	40000000 	.word	0x40000000
 8002a98:	00000000 	.word	0x00000000
 8002a9c:	40080000 	.word	0x40080000
 8002aa0:	200006f4 	.word	0x200006f4
 8002aa4:	200005d8 	.word	0x200005d8
 8002aa8:	200006f8 	.word	0x200006f8
 8002aac:	20000070 	.word	0x20000070
 8002ab0:	20000078 	.word	0x20000078
 8002ab4:	200005b4 	.word	0x200005b4
 8002ab8:	40100000 	.word	0x40100000
 8002abc:	3fe00000 	.word	0x3fe00000
 8002ac0:	200005b8 	.word	0x200005b8
 8002ac4:	200005bc 	.word	0x200005bc
				}
				else if(theta_dest >= Sv){
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <TrajectoryGenerator+0xa94>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fce7 	bl	80004a0 <__aeabi_f2d>
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <TrajectoryGenerator+0xa98>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd ffb6 	bl	8000a48 <__aeabi_dcmple>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d032      	beq.n	8002b48 <TrajectoryGenerator+0x968>
					//caseV
					tj = a_max/j_max;
 8002ae2:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <TrajectoryGenerator+0xa9c>)
 8002ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae8:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <TrajectoryGenerator+0xaa0>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fe59 	bl	80007a4 <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fd fff9 	bl	8000af0 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <TrajectoryGenerator+0xaa4>)
 8002b02:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 8002b04:	4b60      	ldr	r3, [pc, #384]	; (8002c88 <TrajectoryGenerator+0xaa8>)
 8002b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <TrajectoryGenerator+0xa9c>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fe48 	bl	80007a4 <__aeabi_ddiv>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fd ffe8 	bl	8000af0 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <TrajectoryGenerator+0xaac>)
 8002b24:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002b26:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <TrajectoryGenerator+0xa98>)
 8002b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2c:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <TrajectoryGenerator+0xaa8>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fe37 	bl	80007a4 <__aeabi_ddiv>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fd ffd7 	bl	8000af0 <__aeabi_d2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <TrajectoryGenerator+0xab0>)
 8002b46:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 8002b48:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <TrajectoryGenerator+0xaa4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <TrajectoryGenerator+0xab4>)
 8002b4e:	6013      	str	r3, [r2, #0]
		t2 = ta;
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <TrajectoryGenerator+0xaac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a50      	ldr	r2, [pc, #320]	; (8002c98 <TrajectoryGenerator+0xab8>)
 8002b56:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <TrajectoryGenerator+0xaac>)
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <TrajectoryGenerator+0xaa4>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <TrajectoryGenerator+0xabc>)
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 8002b6e:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <TrajectoryGenerator+0xab0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4b      	ldr	r2, [pc, #300]	; (8002ca0 <TrajectoryGenerator+0xac0>)
 8002b74:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <TrajectoryGenerator+0xab0>)
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <TrajectoryGenerator+0xaa4>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <TrajectoryGenerator+0xac4>)
 8002b88:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 8002b8c:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <TrajectoryGenerator+0xab0>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <TrajectoryGenerator+0xaac>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <TrajectoryGenerator+0xac8>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <TrajectoryGenerator+0xab0>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <TrajectoryGenerator+0xaa4>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <TrajectoryGenerator+0xaac>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <TrajectoryGenerator+0xacc>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <TrajectoryGenerator+0xad0>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	493a      	ldr	r1, [pc, #232]	; (8002cb4 <TrajectoryGenerator+0xad4>)
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 8002bce:	493a      	ldr	r1, [pc, #232]	; (8002cb8 <TrajectoryGenerator+0xad8>)
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <TrajectoryGenerator+0xadc>)
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <TrajectoryGenerator+0xae0>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d16b      	bne.n	8002cc4 <TrajectoryGenerator+0xae4>
		{
			j_max = negative(j_max);
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <TrajectoryGenerator+0xaa0>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7fd ff7b 	bl	8000af0 <__aeabi_d2f>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	ee00 3a10 	vmov	s0, r3
 8002c00:	f001 fc32 	bl	8004468 <negative>
 8002c04:	ee10 3a10 	vmov	r3, s0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc49 	bl	80004a0 <__aeabi_f2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	491b      	ldr	r1, [pc, #108]	; (8002c80 <TrajectoryGenerator+0xaa0>)
 8002c14:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <TrajectoryGenerator+0xa9c>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ff65 	bl	8000af0 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	ee00 3a10 	vmov	s0, r3
 8002c2c:	f001 fc1c 	bl	8004468 <negative>
 8002c30:	ee10 3a10 	vmov	r3, s0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc33 	bl	80004a0 <__aeabi_f2d>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	490f      	ldr	r1, [pc, #60]	; (8002c7c <TrajectoryGenerator+0xa9c>)
 8002c40:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <TrajectoryGenerator+0xaa8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fd ff4f 	bl	8000af0 <__aeabi_d2f>
 8002c52:	4603      	mov	r3, r0
 8002c54:	ee00 3a10 	vmov	s0, r3
 8002c58:	f001 fc06 	bl	8004468 <negative>
 8002c5c:	ee10 3a10 	vmov	r3, s0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc1d 	bl	80004a0 <__aeabi_f2d>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4907      	ldr	r1, [pc, #28]	; (8002c88 <TrajectoryGenerator+0xaa8>)
 8002c6c:	e9c1 2300 	strd	r2, r3, [r1]
 8002c70:	e06a      	b.n	8002d48 <TrajectoryGenerator+0xb68>
 8002c72:	bf00      	nop
 8002c74:	200006f8 	.word	0x200006f8
 8002c78:	200005d8 	.word	0x200005d8
 8002c7c:	20000070 	.word	0x20000070
 8002c80:	20000078 	.word	0x20000078
 8002c84:	200005b4 	.word	0x200005b4
 8002c88:	20000068 	.word	0x20000068
 8002c8c:	200005b8 	.word	0x200005b8
 8002c90:	200005bc 	.word	0x200005bc
 8002c94:	20000598 	.word	0x20000598
 8002c98:	2000059c 	.word	0x2000059c
 8002c9c:	200005a0 	.word	0x200005a0
 8002ca0:	200005a4 	.word	0x200005a4
 8002ca4:	200005a8 	.word	0x200005a8
 8002ca8:	200005ac 	.word	0x200005ac
 8002cac:	200005b0 	.word	0x200005b0
 8002cb0:	200005c8 	.word	0x200005c8
 8002cb4:	20000628 	.word	0x20000628
 8002cb8:	20000630 	.word	0x20000630
 8002cbc:	20000638 	.word	0x20000638
 8002cc0:	200000cd 	.word	0x200000cd
		}

		else
		{
			j_max = positive(j_max);
 8002cc4:	4bcc      	ldr	r3, [pc, #816]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fd ff0f 	bl	8000af0 <__aeabi_d2f>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	ee00 3a10 	vmov	s0, r3
 8002cd8:	f001 fbe2 	bl	80044a0 <positive>
 8002cdc:	ee10 3a10 	vmov	r3, s0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fbdd 	bl	80004a0 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	49c3      	ldr	r1, [pc, #780]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002cec:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 8002cf0:	4bc2      	ldr	r3, [pc, #776]	; (8002ffc <TrajectoryGenerator+0xe1c>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd fef9 	bl	8000af0 <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	ee00 3a10 	vmov	s0, r3
 8002d04:	f001 fbcc 	bl	80044a0 <positive>
 8002d08:	ee10 3a10 	vmov	r3, s0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fbc7 	bl	80004a0 <__aeabi_f2d>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	49b9      	ldr	r1, [pc, #740]	; (8002ffc <TrajectoryGenerator+0xe1c>)
 8002d18:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 8002d1c:	4bb8      	ldr	r3, [pc, #736]	; (8003000 <TrajectoryGenerator+0xe20>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd fee3 	bl	8000af0 <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	ee00 3a10 	vmov	s0, r3
 8002d30:	f001 fbb6 	bl	80044a0 <positive>
 8002d34:	ee10 3a10 	vmov	r3, s0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fbb1 	bl	80004a0 <__aeabi_f2d>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	49af      	ldr	r1, [pc, #700]	; (8003000 <TrajectoryGenerator+0xe20>)
 8002d44:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 8002d48:	4bab      	ldr	r3, [pc, #684]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d4e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002fe0 <TrajectoryGenerator+0xe00>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fbfc 	bl	8000550 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	461d      	mov	r5, r3
 8002d60:	4ba8      	ldr	r3, [pc, #672]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002fe8 <TrajectoryGenerator+0xe08>
 8002d72:	ec43 2b10 	vmov	d0, r2, r3
 8002d76:	f009 fb7f 	bl	800c478 <pow>
 8002d7a:	ec53 2b10 	vmov	r2, r3, d0
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fbe5 	bl	8000550 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd feaf 	bl	8000af0 <__aeabi_d2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a9c      	ldr	r2, [pc, #624]	; (8003008 <TrajectoryGenerator+0xe28>)
 8002d96:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8002d98:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	4b9a      	ldr	r3, [pc, #616]	; (800300c <TrajectoryGenerator+0xe2c>)
 8002da4:	f7fd fbd4 	bl	8000550 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4b94      	ldr	r3, [pc, #592]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fb73 	bl	80004a0 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002ff0 <TrajectoryGenerator+0xe10>
 8002dc2:	ec43 2b10 	vmov	d0, r2, r3
 8002dc6:	f009 fb57 	bl	800c478 <pow>
 8002dca:	ec53 2b10 	vmov	r2, r3, d0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	f7fd fbbd 	bl	8000550 <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd fe87 	bl	8000af0 <__aeabi_d2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a8a      	ldr	r2, [pc, #552]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002de6:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002de8:	4b86      	ldr	r3, [pc, #536]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb57 	bl	80004a0 <__aeabi_f2d>
 8002df2:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fbaa 	bl	8000550 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fd fe74 	bl	8000af0 <__aeabi_d2f>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a82      	ldr	r2, [pc, #520]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002e0c:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002e0e:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <TrajectoryGenerator+0xe28>)
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002e16:	edd3 6a00 	vldr	s13, [r3]
 8002e1a:	4b7f      	ldr	r3, [pc, #508]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002e1c:	ed93 6a00 	vldr	s12, [r3]
 8002e20:	4b78      	ldr	r3, [pc, #480]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	ee17 0a90 	vmov	r0, s15
 8002e36:	f7fd fb33 	bl	80004a0 <__aeabi_f2d>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb2c 	bl	80004a0 <__aeabi_f2d>
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <TrajectoryGenerator+0xe2c>)
 8002e4e:	f7fd fb7f 	bl	8000550 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6a:	ee17 0a90 	vmov	r0, s15
 8002e6e:	f7fd fb17 	bl	80004a0 <__aeabi_f2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002ff0 <TrajectoryGenerator+0xe10>
 8002e7a:	ec43 2b10 	vmov	d0, r2, r3
 8002e7e:	f009 fafb 	bl	800c478 <pow>
 8002e82:	ec53 2b10 	vmov	r2, r3, d0
 8002e86:	4640      	mov	r0, r8
 8002e88:	4649      	mov	r1, r9
 8002e8a:	f7fd fb61 	bl	8000550 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4620      	mov	r0, r4
 8002e94:	4629      	mov	r1, r5
 8002e96:	f7fd f9a5 	bl	80001e4 <__adddf3>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7fd fe25 	bl	8000af0 <__aeabi_d2f>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <TrajectoryGenerator+0xe28>)
 8002eaa:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002eac:	4b58      	ldr	r3, [pc, #352]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002eae:	ed93 7a00 	vldr	s14, [r3]
 8002eb2:	4b58      	ldr	r3, [pc, #352]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002eb4:	edd3 6a00 	vldr	s13, [r3]
 8002eb8:	4b57      	ldr	r3, [pc, #348]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002eba:	ed93 6a00 	vldr	s12, [r3]
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <TrajectoryGenerator+0xe24>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002ed2:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4e      	ldr	r2, [pc, #312]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002edc:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <TrajectoryGenerator+0xe28>)
 8002ee0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002ee6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002eea:	4b4c      	ldr	r3, [pc, #304]	; (800301c <TrajectoryGenerator+0xe3c>)
 8002eec:	ed93 6a00 	vldr	s12, [r3]
 8002ef0:	4b49      	ldr	r3, [pc, #292]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	ee17 0a90 	vmov	r0, s15
 8002f06:	f7fd facb 	bl	80004a0 <__aeabi_f2d>
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <TrajectoryGenerator+0xe34>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fac4 	bl	80004a0 <__aeabi_f2d>
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <TrajectoryGenerator+0xe2c>)
 8002f1e:	f7fd fb17 	bl	8000550 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <TrajectoryGenerator+0xe3c>)
 8002f2c:	ed93 7a00 	vldr	s14, [r3]
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3a:	ee17 0a90 	vmov	r0, s15
 8002f3e:	f7fd faaf 	bl	80004a0 <__aeabi_f2d>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8002ff0 <TrajectoryGenerator+0xe10>
 8002f4a:	ec43 2b10 	vmov	d0, r2, r3
 8002f4e:	f009 fa93 	bl	800c478 <pow>
 8002f52:	ec53 2b10 	vmov	r2, r3, d0
 8002f56:	4640      	mov	r0, r8
 8002f58:	4649      	mov	r1, r9
 8002f5a:	f7fd faf9 	bl	8000550 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	f7fd f93d 	bl	80001e4 <__adddf3>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4614      	mov	r4, r2
 8002f70:	461d      	mov	r5, r3
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <TrajectoryGenerator+0xe3c>)
 8002f74:	ed93 7a00 	vldr	s14, [r3]
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <TrajectoryGenerator+0xe38>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	ee17 0a90 	vmov	r0, s15
 8002f86:	f7fd fa8b 	bl	80004a0 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002fe8 <TrajectoryGenerator+0xe08>
 8002f92:	ec43 2b10 	vmov	d0, r2, r3
 8002f96:	f009 fa6f 	bl	800c478 <pow>
 8002f9a:	ec51 0b10 	vmov	r0, r1, d0
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <TrajectoryGenerator+0xe18>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fad4 	bl	8000550 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <TrajectoryGenerator+0xe40>)
 8002fb6:	f7fd fbf5 	bl	80007a4 <__aeabi_ddiv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd f90d 	bl	80001e0 <__aeabi_dsub>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fd8f 	bl	8000af0 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <TrajectoryGenerator+0xe28>)
 8002fd6:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <TrajectoryGenerator+0xe30>)
 8002fda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fde:	e021      	b.n	8003024 <TrajectoryGenerator+0xe44>
 8002fe0:	55555555 	.word	0x55555555
 8002fe4:	3fc55555 	.word	0x3fc55555
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	40080000 	.word	0x40080000
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	40000000 	.word	0x40000000
 8002ff8:	20000078 	.word	0x20000078
 8002ffc:	20000070 	.word	0x20000070
 8003000:	20000068 	.word	0x20000068
 8003004:	20000598 	.word	0x20000598
 8003008:	20000610 	.word	0x20000610
 800300c:	3fe00000 	.word	0x3fe00000
 8003010:	200005f8 	.word	0x200005f8
 8003014:	200005e0 	.word	0x200005e0
 8003018:	2000059c 	.word	0x2000059c
 800301c:	200005a0 	.word	0x200005a0
 8003020:	40180000 	.word	0x40180000
 8003024:	4bd0      	ldr	r3, [pc, #832]	; (8003368 <TrajectoryGenerator+0x1188>)
 8003026:	edd3 6a01 	vldr	s13, [r3, #4]
 800302a:	4bd0      	ldr	r3, [pc, #832]	; (800336c <TrajectoryGenerator+0x118c>)
 800302c:	ed93 6a00 	vldr	s12, [r3]
 8003030:	4bcf      	ldr	r3, [pc, #828]	; (8003370 <TrajectoryGenerator+0x1190>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ee76 7a67 	vsub.f32	s15, s12, s15
 800303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	ee17 0a90 	vmov	r0, s15
 8003046:	f7fd fa2b 	bl	80004a0 <__aeabi_f2d>
 800304a:	4604      	mov	r4, r0
 800304c:	460d      	mov	r5, r1
 800304e:	4bc9      	ldr	r3, [pc, #804]	; (8003374 <TrajectoryGenerator+0x1194>)
 8003050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	4bc7      	ldr	r3, [pc, #796]	; (8003378 <TrajectoryGenerator+0x1198>)
 800305a:	f7fd fa79 	bl	8000550 <__aeabi_dmul>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	4bc1      	ldr	r3, [pc, #772]	; (800336c <TrajectoryGenerator+0x118c>)
 8003068:	ed93 7a00 	vldr	s14, [r3]
 800306c:	4bc0      	ldr	r3, [pc, #768]	; (8003370 <TrajectoryGenerator+0x1190>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003076:	ee17 0a90 	vmov	r0, s15
 800307a:	f7fd fa11 	bl	80004a0 <__aeabi_f2d>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003358 <TrajectoryGenerator+0x1178>
 8003086:	ec43 2b10 	vmov	d0, r2, r3
 800308a:	f009 f9f5 	bl	800c478 <pow>
 800308e:	ec53 2b10 	vmov	r2, r3, d0
 8003092:	4640      	mov	r0, r8
 8003094:	4649      	mov	r1, r9
 8003096:	f7fd fa5b 	bl	8000550 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd f89d 	bl	80001e0 <__aeabi_dsub>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fd1f 	bl	8000af0 <__aeabi_d2f>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4ab1      	ldr	r2, [pc, #708]	; (800337c <TrajectoryGenerator+0x119c>)
 80030b6:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 80030b8:	4bab      	ldr	r3, [pc, #684]	; (8003368 <TrajectoryGenerator+0x1188>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd f9ef 	bl	80004a0 <__aeabi_f2d>
 80030c2:	4604      	mov	r4, r0
 80030c4:	460d      	mov	r5, r1
 80030c6:	4ba9      	ldr	r3, [pc, #676]	; (800336c <TrajectoryGenerator+0x118c>)
 80030c8:	ed93 7a00 	vldr	s14, [r3]
 80030cc:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <TrajectoryGenerator+0x1190>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	ee17 0a90 	vmov	r0, s15
 80030da:	f7fd f9e1 	bl	80004a0 <__aeabi_f2d>
 80030de:	4ba5      	ldr	r3, [pc, #660]	; (8003374 <TrajectoryGenerator+0x1194>)
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f7fd fa34 	bl	8000550 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd f876 	bl	80001e0 <__aeabi_dsub>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fcf8 	bl	8000af0 <__aeabi_d2f>
 8003100:	4603      	mov	r3, r0
 8003102:	4a99      	ldr	r2, [pc, #612]	; (8003368 <TrajectoryGenerator+0x1188>)
 8003104:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <TrajectoryGenerator+0x11a0>)
 8003108:	ed93 7a02 	vldr	s14, [r3, #8]
 800310c:	4b9b      	ldr	r3, [pc, #620]	; (800337c <TrajectoryGenerator+0x119c>)
 800310e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003112:	4b9c      	ldr	r3, [pc, #624]	; (8003384 <TrajectoryGenerator+0x11a4>)
 8003114:	ed93 6a00 	vldr	s12, [r3]
 8003118:	4b94      	ldr	r3, [pc, #592]	; (800336c <TrajectoryGenerator+0x118c>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	4b95      	ldr	r3, [pc, #596]	; (8003380 <TrajectoryGenerator+0x11a0>)
 800312c:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <TrajectoryGenerator+0x119c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a91      	ldr	r2, [pc, #580]	; (800337c <TrajectoryGenerator+0x119c>)
 8003136:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8003138:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <TrajectoryGenerator+0x1188>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a8a      	ldr	r2, [pc, #552]	; (8003368 <TrajectoryGenerator+0x1188>)
 800313e:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <TrajectoryGenerator+0x11a0>)
 8003142:	ed93 7a03 	vldr	s14, [r3, #12]
 8003146:	4b8d      	ldr	r3, [pc, #564]	; (800337c <TrajectoryGenerator+0x119c>)
 8003148:	edd3 6a03 	vldr	s13, [r3, #12]
 800314c:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <TrajectoryGenerator+0x11a8>)
 800314e:	ed93 6a00 	vldr	s12, [r3]
 8003152:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <TrajectoryGenerator+0x11a4>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	ee76 7a67 	vsub.f32	s15, s12, s15
 800315c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	ee17 0a90 	vmov	r0, s15
 8003168:	f7fd f99a 	bl	80004a0 <__aeabi_f2d>
 800316c:	4604      	mov	r4, r0
 800316e:	460d      	mov	r5, r1
 8003170:	4b85      	ldr	r3, [pc, #532]	; (8003388 <TrajectoryGenerator+0x11a8>)
 8003172:	ed93 7a00 	vldr	s14, [r3]
 8003176:	4b83      	ldr	r3, [pc, #524]	; (8003384 <TrajectoryGenerator+0x11a4>)
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	ee17 0a90 	vmov	r0, s15
 8003184:	f7fd f98c 	bl	80004a0 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003360 <TrajectoryGenerator+0x1180>
 8003190:	ec43 2b10 	vmov	d0, r2, r3
 8003194:	f009 f970 	bl	800c478 <pow>
 8003198:	ec51 0b10 	vmov	r0, r1, d0
 800319c:	4b75      	ldr	r3, [pc, #468]	; (8003374 <TrajectoryGenerator+0x1194>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd f9d5 	bl	8000550 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <TrajectoryGenerator+0x11ac>)
 80031b4:	f7fd faf6 	bl	80007a4 <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f80e 	bl	80001e0 <__aeabi_dsub>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f7fd fc90 	bl	8000af0 <__aeabi_d2f>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a6b      	ldr	r2, [pc, #428]	; (8003380 <TrajectoryGenerator+0x11a0>)
 80031d4:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 80031d6:	4b69      	ldr	r3, [pc, #420]	; (800337c <TrajectoryGenerator+0x119c>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f960 	bl	80004a0 <__aeabi_f2d>
 80031e0:	4604      	mov	r4, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4b63      	ldr	r3, [pc, #396]	; (8003374 <TrajectoryGenerator+0x1194>)
 80031e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	4b62      	ldr	r3, [pc, #392]	; (8003378 <TrajectoryGenerator+0x1198>)
 80031f0:	f7fd f9ae 	bl	8000550 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4690      	mov	r8, r2
 80031fa:	4699      	mov	r9, r3
 80031fc:	4b62      	ldr	r3, [pc, #392]	; (8003388 <TrajectoryGenerator+0x11a8>)
 80031fe:	ed93 7a00 	vldr	s14, [r3]
 8003202:	4b60      	ldr	r3, [pc, #384]	; (8003384 <TrajectoryGenerator+0x11a4>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320c:	ee17 0a90 	vmov	r0, s15
 8003210:	f7fd f946 	bl	80004a0 <__aeabi_f2d>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8003358 <TrajectoryGenerator+0x1178>
 800321c:	ec43 2b10 	vmov	d0, r2, r3
 8003220:	f009 f92a 	bl	800c478 <pow>
 8003224:	ec53 2b10 	vmov	r2, r3, d0
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd f990 	bl	8000550 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fc ffd2 	bl	80001e0 <__aeabi_dsub>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fc54 	bl	8000af0 <__aeabi_d2f>
 8003248:	4603      	mov	r3, r0
 800324a:	4a4c      	ldr	r2, [pc, #304]	; (800337c <TrajectoryGenerator+0x119c>)
 800324c:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <TrajectoryGenerator+0x1188>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f924 	bl	80004a0 <__aeabi_f2d>
 8003258:	4604      	mov	r4, r0
 800325a:	460d      	mov	r5, r1
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <TrajectoryGenerator+0x11a8>)
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	4b48      	ldr	r3, [pc, #288]	; (8003384 <TrajectoryGenerator+0x11a4>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	ee17 0a90 	vmov	r0, s15
 8003270:	f7fd f916 	bl	80004a0 <__aeabi_f2d>
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <TrajectoryGenerator+0x1194>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f969 	bl	8000550 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fc ffab 	bl	80001e0 <__aeabi_dsub>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fc2d 	bl	8000af0 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	4a33      	ldr	r2, [pc, #204]	; (8003368 <TrajectoryGenerator+0x1188>)
 800329a:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 800329c:	4b38      	ldr	r3, [pc, #224]	; (8003380 <TrajectoryGenerator+0x11a0>)
 800329e:	ed93 7a04 	vldr	s14, [r3, #16]
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <TrajectoryGenerator+0x119c>)
 80032a4:	edd3 6a04 	vldr	s13, [r3, #16]
 80032a8:	4b39      	ldr	r3, [pc, #228]	; (8003390 <TrajectoryGenerator+0x11b0>)
 80032aa:	ed93 6a00 	vldr	s12, [r3]
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <TrajectoryGenerator+0x11a8>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	ee17 0a90 	vmov	r0, s15
 80032c4:	f7fd f8ec 	bl	80004a0 <__aeabi_f2d>
 80032c8:	4604      	mov	r4, r0
 80032ca:	460d      	mov	r5, r1
 80032cc:	4b26      	ldr	r3, [pc, #152]	; (8003368 <TrajectoryGenerator+0x1188>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f8e5 	bl	80004a0 <__aeabi_f2d>
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <TrajectoryGenerator+0x1198>)
 80032dc:	f7fd f938 	bl	8000550 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4690      	mov	r8, r2
 80032e6:	4699      	mov	r9, r3
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <TrajectoryGenerator+0x11b0>)
 80032ea:	ed93 7a00 	vldr	s14, [r3]
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <TrajectoryGenerator+0x11a8>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f8:	ee17 0a90 	vmov	r0, s15
 80032fc:	f7fd f8d0 	bl	80004a0 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003358 <TrajectoryGenerator+0x1178>
 8003308:	ec43 2b10 	vmov	d0, r2, r3
 800330c:	f009 f8b4 	bl	800c478 <pow>
 8003310:	ec53 2b10 	vmov	r2, r3, d0
 8003314:	4640      	mov	r0, r8
 8003316:	4649      	mov	r1, r9
 8003318:	f7fd f91a 	bl	8000550 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fc ff5e 	bl	80001e4 <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fbde 	bl	8000af0 <__aeabi_d2f>
 8003334:	4603      	mov	r3, r0
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <TrajectoryGenerator+0x11a0>)
 8003338:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <TrajectoryGenerator+0x119c>)
 800333c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <TrajectoryGenerator+0x1188>)
 8003342:	edd3 6a04 	vldr	s13, [r3, #16]
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <TrajectoryGenerator+0x11b0>)
 8003348:	ed93 6a00 	vldr	s12, [r3]
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <TrajectoryGenerator+0x11a8>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003356:	e01d      	b.n	8003394 <TrajectoryGenerator+0x11b4>
 8003358:	00000000 	.word	0x00000000
 800335c:	40000000 	.word	0x40000000
 8003360:	00000000 	.word	0x00000000
 8003364:	40080000 	.word	0x40080000
 8003368:	200005e0 	.word	0x200005e0
 800336c:	200005a0 	.word	0x200005a0
 8003370:	2000059c 	.word	0x2000059c
 8003374:	20000078 	.word	0x20000078
 8003378:	3fe00000 	.word	0x3fe00000
 800337c:	200005f8 	.word	0x200005f8
 8003380:	20000610 	.word	0x20000610
 8003384:	200005a4 	.word	0x200005a4
 8003388:	200005a8 	.word	0x200005a8
 800338c:	40180000 	.word	0x40180000
 8003390:	200005ac 	.word	0x200005ac
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <TrajectoryGenerator+0x1310>)
 800339e:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <TrajectoryGenerator+0x1314>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4a53      	ldr	r2, [pc, #332]	; (80034f4 <TrajectoryGenerator+0x1314>)
 80033a8:	6153      	str	r3, [r2, #20]

		//Check Volt Constant
		if(theta_f <= 1.6){ //90 degree
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <TrajectoryGenerator+0x1318>)
 80033ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b0:	a347      	add	r3, pc, #284	; (adr r3, 80034d0 <TrajectoryGenerator+0x12f0>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fd fb47 	bl	8000a48 <__aeabi_dcmple>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <TrajectoryGenerator+0x11ee>
			volt_constant = 2.5; //2.9;
 80033c0:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <TrajectoryGenerator+0x131c>)
 80033c2:	4a4f      	ldr	r2, [pc, #316]	; (8003500 <TrajectoryGenerator+0x1320>)
 80033c4:	601a      	str	r2, [r3, #0]
			volt_statics = 3.5;
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <TrajectoryGenerator+0x1324>)
 80033c8:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <TrajectoryGenerator+0x1328>)
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e03d      	b.n	800344a <TrajectoryGenerator+0x126a>
		}
		else if(theta_f <= 3.13){ //180 degree
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <TrajectoryGenerator+0x1318>)
 80033d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d4:	a340      	add	r3, pc, #256	; (adr r3, 80034d8 <TrajectoryGenerator+0x12f8>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd fb35 	bl	8000a48 <__aeabi_dcmple>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <TrajectoryGenerator+0x1214>
			volt_constant = 3.5;//4.0;
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <TrajectoryGenerator+0x131c>)
 80033e6:	4a48      	ldr	r2, [pc, #288]	; (8003508 <TrajectoryGenerator+0x1328>)
 80033e8:	601a      	str	r2, [r3, #0]
			volt_statics = 4.0;
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <TrajectoryGenerator+0x1324>)
 80033ec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e02a      	b.n	800344a <TrajectoryGenerator+0x126a>
		}

		else if(theta_f <= 4.36){ //250 degree
 80033f4:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <TrajectoryGenerator+0x1318>)
 80033f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033fa:	a339      	add	r3, pc, #228	; (adr r3, 80034e0 <TrajectoryGenerator+0x1300>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fd fb22 	bl	8000a48 <__aeabi_dcmple>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <TrajectoryGenerator+0x1238>
			volt_constant = 3.4;//4.35;
 800340a:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <TrajectoryGenerator+0x131c>)
 800340c:	4a3f      	ldr	r2, [pc, #252]	; (800350c <TrajectoryGenerator+0x132c>)
 800340e:	601a      	str	r2, [r3, #0]
			volt_statics = 4.6;
 8003410:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <TrajectoryGenerator+0x1324>)
 8003412:	4a3f      	ldr	r2, [pc, #252]	; (8003510 <TrajectoryGenerator+0x1330>)
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e018      	b.n	800344a <TrajectoryGenerator+0x126a>
		}

		else if(theta_f <= 4.72){ //270 degree
 8003418:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <TrajectoryGenerator+0x1318>)
 800341a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800341e:	a332      	add	r3, pc, #200	; (adr r3, 80034e8 <TrajectoryGenerator+0x1308>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd fb10 	bl	8000a48 <__aeabi_dcmple>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <TrajectoryGenerator+0x125c>
			volt_constant = 3.8;//4.35;
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <TrajectoryGenerator+0x131c>)
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <TrajectoryGenerator+0x1334>)
 8003432:	601a      	str	r2, [r3, #0]
			volt_statics = 4.6;
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <TrajectoryGenerator+0x1324>)
 8003436:	4a36      	ldr	r2, [pc, #216]	; (8003510 <TrajectoryGenerator+0x1330>)
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e006      	b.n	800344a <TrajectoryGenerator+0x126a>
		}
		else{
			volt_constant = 3.4;//3.9;
 800343c:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <TrajectoryGenerator+0x131c>)
 800343e:	4a33      	ldr	r2, [pc, #204]	; (800350c <TrajectoryGenerator+0x132c>)
 8003440:	601a      	str	r2, [r3, #0]
			volt_statics = 4.0;
 8003442:	4b30      	ldr	r3, [pc, #192]	; (8003504 <TrajectoryGenerator+0x1324>)
 8003444:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003448:	601a      	str	r2, [r3, #0]
		}

		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <TrajectoryGenerator+0x1338>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <TrajectoryGenerator+0x133c>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]


		//Reset Cascade PID
		e1 = 0;
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <TrajectoryGenerator+0x1340>)
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
		s1 = 0;
 800345e:	4b31      	ldr	r3, [pc, #196]	; (8003524 <TrajectoryGenerator+0x1344>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
		p1 = 0;
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <TrajectoryGenerator+0x1348>)
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
		u1 = 0;
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <TrajectoryGenerator+0x134c>)
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
		e2 = 0;
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <TrajectoryGenerator+0x1350>)
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
		s2 = 0;
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <TrajectoryGenerator+0x1354>)
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
		p2 = 0;
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <TrajectoryGenerator+0x1358>)
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
		u2 = 0;
 800348e:	4b2b      	ldr	r3, [pc, #172]	; (800353c <TrajectoryGenerator+0x135c>)
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

		//Reset TransferFunction
		for(int i=0;i<4;i++){
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	e010      	b.n	80034be <TrajectoryGenerator+0x12de>
			u_i[i]=0;
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <TrajectoryGenerator+0x1360>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
			y_i[i]=0;
 80034aa:	4a26      	ldr	r2, [pc, #152]	; (8003544 <TrajectoryGenerator+0x1364>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3301      	adds	r3, #1
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	ddeb      	ble.n	800349c <TrajectoryGenerator+0x12bc>
		}
	}
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	9999999a 	.word	0x9999999a
 80034d4:	3ff99999 	.word	0x3ff99999
 80034d8:	70a3d70a 	.word	0x70a3d70a
 80034dc:	40090a3d 	.word	0x40090a3d
 80034e0:	d70a3d71 	.word	0xd70a3d71
 80034e4:	401170a3 	.word	0x401170a3
 80034e8:	ae147ae1 	.word	0xae147ae1
 80034ec:	4012e147 	.word	0x4012e147
 80034f0:	200005f8 	.word	0x200005f8
 80034f4:	200005e0 	.word	0x200005e0
 80034f8:	200005d0 	.word	0x200005d0
 80034fc:	200003e0 	.word	0x200003e0
 8003500:	40200000 	.word	0x40200000
 8003504:	200003e4 	.word	0x200003e4
 8003508:	40600000 	.word	0x40600000
 800350c:	4059999a 	.word	0x4059999a
 8003510:	40933333 	.word	0x40933333
 8003514:	40733333 	.word	0x40733333
 8003518:	200003ea 	.word	0x200003ea
 800351c:	200003e9 	.word	0x200003e9
 8003520:	2000063c 	.word	0x2000063c
 8003524:	20000640 	.word	0x20000640
 8003528:	20000644 	.word	0x20000644
 800352c:	20000648 	.word	0x20000648
 8003530:	2000064c 	.word	0x2000064c
 8003534:	20000650 	.word	0x20000650
 8003538:	20000654 	.word	0x20000654
 800353c:	20000658 	.word	0x20000658
 8003540:	200006c0 	.word	0x200006c0
 8003544:	200006d0 	.word	0x200006d0

08003548 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	af00      	add	r7, sp, #0
	if(TrajectoryEvaluationFlag == 1){
 800354e:	4b90      	ldr	r3, [pc, #576]	; (8003790 <TrajectoryEvaluation+0x248>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	f040 8573 	bne.w	800403e <TrajectoryEvaluation+0xaf6>

	if( 0 <= t && t < t1){
 8003558:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <TrajectoryEvaluation+0x24c>)
 800355a:	edd3 7a00 	vldr	s15, [r3]
 800355e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	db70      	blt.n	800364a <TrajectoryEvaluation+0x102>
 8003568:	4b8a      	ldr	r3, [pc, #552]	; (8003794 <TrajectoryEvaluation+0x24c>)
 800356a:	ed93 7a00 	vldr	s14, [r3]
 800356e:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <TrajectoryEvaluation+0x250>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	d565      	bpl.n	800364a <TrajectoryEvaluation+0x102>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 800357e:	4b87      	ldr	r3, [pc, #540]	; (800379c <TrajectoryEvaluation+0x254>)
 8003580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003584:	a37c      	add	r3, pc, #496	; (adr r3, 8003778 <TrajectoryEvaluation+0x230>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc ffe1 	bl	8000550 <__aeabi_dmul>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4614      	mov	r4, r2
 8003594:	461d      	mov	r5, r3
 8003596:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <TrajectoryEvaluation+0x24c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ff80 	bl	80004a0 <__aeabi_f2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8003780 <TrajectoryEvaluation+0x238>
 80035a8:	ec43 2b10 	vmov	d0, r2, r3
 80035ac:	f008 ff64 	bl	800c478 <pow>
 80035b0:	ec53 2b10 	vmov	r2, r3, d0
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc ffca 	bl	8000550 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <TrajectoryEvaluation+0x258>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fc fe0b 	bl	80001e4 <__adddf3>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4974      	ldr	r1, [pc, #464]	; (80037a4 <TrajectoryEvaluation+0x25c>)
 80035d4:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 80035d8:	4b70      	ldr	r3, [pc, #448]	; (800379c <TrajectoryEvaluation+0x254>)
 80035da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	4b71      	ldr	r3, [pc, #452]	; (80037a8 <TrajectoryEvaluation+0x260>)
 80035e4:	f7fc ffb4 	bl	8000550 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4614      	mov	r4, r2
 80035ee:	461d      	mov	r5, r3
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <TrajectoryEvaluation+0x24c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ff53 	bl	80004a0 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8003788 <TrajectoryEvaluation+0x240>
 8003602:	ec43 2b10 	vmov	d0, r2, r3
 8003606:	f008 ff37 	bl	800c478 <pow>
 800360a:	ec53 2b10 	vmov	r2, r3, d0
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc ff9d 	bl	8000550 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4964      	ldr	r1, [pc, #400]	; (80037ac <TrajectoryEvaluation+0x264>)
 800361c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 8003620:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <TrajectoryEvaluation+0x24c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff3b 	bl	80004a0 <__aeabi_f2d>
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <TrajectoryEvaluation+0x254>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc ff8e 	bl	8000550 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f7fd fa58 	bl	8000af0 <__aeabi_d2f>
 8003640:	4603      	mov	r3, r0
 8003642:	4a5b      	ldr	r2, [pc, #364]	; (80037b0 <TrajectoryEvaluation+0x268>)
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	f000 bcfa 	b.w	800403e <TrajectoryEvaluation+0xaf6>
	}
	else if (t1 <= t && t< t2){
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <TrajectoryEvaluation+0x250>)
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <TrajectoryEvaluation+0x24c>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	f200 80b1 	bhi.w	80037c4 <TrajectoryEvaluation+0x27c>
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <TrajectoryEvaluation+0x24c>)
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <TrajectoryEvaluation+0x26c>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	f140 80a5 	bpl.w	80037c4 <TrajectoryEvaluation+0x27c>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <TrajectoryEvaluation+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff0e 	bl	80004a0 <__aeabi_f2d>
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <TrajectoryEvaluation+0x258>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fc fdab 	bl	80001e4 <__adddf3>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4614      	mov	r4, r2
 8003694:	461d      	mov	r5, r3
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <TrajectoryEvaluation+0x274>)
 8003698:	ed93 7a00 	vldr	s14, [r3]
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <TrajectoryEvaluation+0x24c>)
 800369e:	edd3 6a00 	vldr	s13, [r3]
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <TrajectoryEvaluation+0x250>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	ee17 0a90 	vmov	r0, s15
 80036b4:	f7fc fef4 	bl	80004a0 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4620      	mov	r0, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fc fd90 	bl	80001e4 <__adddf3>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <TrajectoryEvaluation+0x278>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc fee5 	bl	80004a0 <__aeabi_f2d>
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <TrajectoryEvaluation+0x260>)
 80036dc:	f7fc ff38 	bl	8000550 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4690      	mov	r8, r2
 80036e6:	4699      	mov	r9, r3
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <TrajectoryEvaluation+0x24c>)
 80036ea:	ed93 7a00 	vldr	s14, [r3]
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <TrajectoryEvaluation+0x250>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f8:	ee17 0a90 	vmov	r0, s15
 80036fc:	f7fc fed0 	bl	80004a0 <__aeabi_f2d>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8003788 <TrajectoryEvaluation+0x240>
 8003708:	ec43 2b10 	vmov	d0, r2, r3
 800370c:	f008 feb4 	bl	800c478 <pow>
 8003710:	ec53 2b10 	vmov	r2, r3, d0
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fc ff1a 	bl	8000550 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fc fd5e 	bl	80001e4 <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	491d      	ldr	r1, [pc, #116]	; (80037a4 <TrajectoryEvaluation+0x25c>)
 800372e:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <TrajectoryEvaluation+0x274>)
 8003734:	ed93 7a00 	vldr	s14, [r3]
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <TrajectoryEvaluation+0x278>)
 800373a:	edd3 6a00 	vldr	s13, [r3]
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <TrajectoryEvaluation+0x24c>)
 8003740:	ed93 6a00 	vldr	s12, [r3]
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <TrajectoryEvaluation+0x250>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800374e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003756:	ee17 0a90 	vmov	r0, s15
 800375a:	f7fc fea1 	bl	80004a0 <__aeabi_f2d>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4912      	ldr	r1, [pc, #72]	; (80037ac <TrajectoryEvaluation+0x264>)
 8003764:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <TrajectoryEvaluation+0x278>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <TrajectoryEvaluation+0x268>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	f000 bc65 	b.w	800403e <TrajectoryEvaluation+0xaf6>
 8003774:	f3af 8000 	nop.w
 8003778:	55555555 	.word	0x55555555
 800377c:	3fc55555 	.word	0x3fc55555
 8003780:	00000000 	.word	0x00000000
 8003784:	40080000 	.word	0x40080000
 8003788:	00000000 	.word	0x00000000
 800378c:	40000000 	.word	0x40000000
 8003790:	200005c0 	.word	0x200005c0
 8003794:	20000594 	.word	0x20000594
 8003798:	20000598 	.word	0x20000598
 800379c:	20000078 	.word	0x20000078
 80037a0:	200005c8 	.word	0x200005c8
 80037a4:	20000628 	.word	0x20000628
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	20000630 	.word	0x20000630
 80037b0:	20000638 	.word	0x20000638
 80037b4:	2000059c 	.word	0x2000059c
 80037b8:	20000610 	.word	0x20000610
 80037bc:	200005f8 	.word	0x200005f8
 80037c0:	200005e0 	.word	0x200005e0
	}
	else if (t2 <= t && t < t3){
 80037c4:	4bb4      	ldr	r3, [pc, #720]	; (8003a98 <TrajectoryEvaluation+0x550>)
 80037c6:	ed93 7a00 	vldr	s14, [r3]
 80037ca:	4bb4      	ldr	r3, [pc, #720]	; (8003a9c <TrajectoryEvaluation+0x554>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	f200 8107 	bhi.w	80039ea <TrajectoryEvaluation+0x4a2>
 80037dc:	4baf      	ldr	r3, [pc, #700]	; (8003a9c <TrajectoryEvaluation+0x554>)
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	4baf      	ldr	r3, [pc, #700]	; (8003aa0 <TrajectoryEvaluation+0x558>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	f140 80fb 	bpl.w	80039ea <TrajectoryEvaluation+0x4a2>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 80037f4:	4bab      	ldr	r3, [pc, #684]	; (8003aa4 <TrajectoryEvaluation+0x55c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fe51 	bl	80004a0 <__aeabi_f2d>
 80037fe:	4baa      	ldr	r3, [pc, #680]	; (8003aa8 <TrajectoryEvaluation+0x560>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fcee 	bl	80001e4 <__adddf3>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	4ba6      	ldr	r3, [pc, #664]	; (8003aac <TrajectoryEvaluation+0x564>)
 8003812:	ed93 7a01 	vldr	s14, [r3, #4]
 8003816:	4ba1      	ldr	r3, [pc, #644]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003818:	edd3 6a00 	vldr	s13, [r3]
 800381c:	4b9e      	ldr	r3, [pc, #632]	; (8003a98 <TrajectoryEvaluation+0x550>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	ee17 0a90 	vmov	r0, s15
 800382e:	f7fc fe37 	bl	80004a0 <__aeabi_f2d>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fc fcd3 	bl	80001e4 <__adddf3>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4614      	mov	r4, r2
 8003844:	461d      	mov	r5, r3
 8003846:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <TrajectoryEvaluation+0x568>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fe28 	bl	80004a0 <__aeabi_f2d>
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b97      	ldr	r3, [pc, #604]	; (8003ab4 <TrajectoryEvaluation+0x56c>)
 8003856:	f7fc fe7b 	bl	8000550 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4b8e      	ldr	r3, [pc, #568]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003864:	ed93 7a00 	vldr	s14, [r3]
 8003868:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <TrajectoryEvaluation+0x550>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003872:	ee17 0a90 	vmov	r0, s15
 8003876:	f7fc fe13 	bl	80004a0 <__aeabi_f2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8003a88 <TrajectoryEvaluation+0x540>
 8003882:	ec43 2b10 	vmov	d0, r2, r3
 8003886:	f008 fdf7 	bl	800c478 <pow>
 800388a:	ec53 2b10 	vmov	r2, r3, d0
 800388e:	4640      	mov	r0, r8
 8003890:	4649      	mov	r1, r9
 8003892:	f7fc fe5d 	bl	8000550 <__aeabi_dmul>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fc fca1 	bl	80001e4 <__adddf3>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <TrajectoryEvaluation+0x554>)
 80038ac:	ed93 7a00 	vldr	s14, [r3]
 80038b0:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <TrajectoryEvaluation+0x550>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ba:	ee17 0a90 	vmov	r0, s15
 80038be:	f7fc fdef 	bl	80004a0 <__aeabi_f2d>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8003a90 <TrajectoryEvaluation+0x548>
 80038ca:	ec43 2b10 	vmov	d0, r2, r3
 80038ce:	f008 fdd3 	bl	800c478 <pow>
 80038d2:	ec51 0b10 	vmov	r0, r1, d0
 80038d6:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <TrajectoryEvaluation+0x570>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f7fc fe38 	bl	8000550 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <TrajectoryEvaluation+0x574>)
 80038ee:	f7fc ff59 	bl	80007a4 <__aeabi_ddiv>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4620      	mov	r0, r4
 80038f8:	4629      	mov	r1, r5
 80038fa:	f7fc fc71 	bl	80001e0 <__aeabi_dsub>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	496f      	ldr	r1, [pc, #444]	; (8003ac0 <TrajectoryEvaluation+0x578>)
 8003904:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <TrajectoryEvaluation+0x564>)
 800390a:	ed93 7a01 	vldr	s14, [r3, #4]
 800390e:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <TrajectoryEvaluation+0x568>)
 8003910:	edd3 6a01 	vldr	s13, [r3, #4]
 8003914:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003916:	ed93 6a00 	vldr	s12, [r3]
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <TrajectoryEvaluation+0x550>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392c:	ee17 0a90 	vmov	r0, s15
 8003930:	f7fc fdb6 	bl	80004a0 <__aeabi_f2d>
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <TrajectoryEvaluation+0x570>)
 800393a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b5c      	ldr	r3, [pc, #368]	; (8003ab4 <TrajectoryEvaluation+0x56c>)
 8003944:	f7fc fe04 	bl	8000550 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4690      	mov	r8, r2
 800394e:	4699      	mov	r9, r3
 8003950:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003952:	ed93 7a00 	vldr	s14, [r3]
 8003956:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <TrajectoryEvaluation+0x550>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003960:	ee17 0a90 	vmov	r0, s15
 8003964:	f7fc fd9c 	bl	80004a0 <__aeabi_f2d>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8003a88 <TrajectoryEvaluation+0x540>
 8003970:	ec43 2b10 	vmov	d0, r2, r3
 8003974:	f008 fd80 	bl	800c478 <pow>
 8003978:	ec53 2b10 	vmov	r2, r3, d0
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	f7fc fde6 	bl	8000550 <__aeabi_dmul>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4620      	mov	r0, r4
 800398a:	4629      	mov	r1, r5
 800398c:	f7fc fc28 	bl	80001e0 <__aeabi_dsub>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	494b      	ldr	r1, [pc, #300]	; (8003ac4 <TrajectoryEvaluation+0x57c>)
 8003996:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <TrajectoryEvaluation+0x568>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fd7e 	bl	80004a0 <__aeabi_f2d>
 80039a4:	4604      	mov	r4, r0
 80039a6:	460d      	mov	r5, r1
 80039a8:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <TrajectoryEvaluation+0x554>)
 80039aa:	ed93 7a00 	vldr	s14, [r3]
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <TrajectoryEvaluation+0x550>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b8:	ee17 0a90 	vmov	r0, s15
 80039bc:	f7fc fd70 	bl	80004a0 <__aeabi_f2d>
 80039c0:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <TrajectoryEvaluation+0x570>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fdc3 	bl	8000550 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7fc fc05 	bl	80001e0 <__aeabi_dsub>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f7fd f887 	bl	8000af0 <__aeabi_d2f>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4a38      	ldr	r2, [pc, #224]	; (8003ac8 <TrajectoryEvaluation+0x580>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e329      	b.n	800403e <TrajectoryEvaluation+0xaf6>
	}
	else if (t3 <= t && t < t4 ){
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <TrajectoryEvaluation+0x558>)
 80039ec:	ed93 7a00 	vldr	s14, [r3]
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <TrajectoryEvaluation+0x554>)
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	d867      	bhi.n	8003ad0 <TrajectoryEvaluation+0x588>
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003a02:	ed93 7a00 	vldr	s14, [r3]
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <TrajectoryEvaluation+0x584>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	d55c      	bpl.n	8003ad0 <TrajectoryEvaluation+0x588>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <TrajectoryEvaluation+0x55c>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fd40 	bl	80004a0 <__aeabi_f2d>
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <TrajectoryEvaluation+0x560>)
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f7fc fbdd 	bl	80001e4 <__adddf3>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4614      	mov	r4, r2
 8003a30:	461d      	mov	r5, r3
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <TrajectoryEvaluation+0x564>)
 8003a34:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <TrajectoryEvaluation+0x554>)
 8003a3a:	edd3 6a00 	vldr	s13, [r3]
 8003a3e:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <TrajectoryEvaluation+0x558>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4c:	ee17 0a90 	vmov	r0, s15
 8003a50:	f7fc fd26 	bl	80004a0 <__aeabi_f2d>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7fc fbc2 	bl	80001e4 <__adddf3>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4916      	ldr	r1, [pc, #88]	; (8003ac0 <TrajectoryEvaluation+0x578>)
 8003a66:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <TrajectoryEvaluation+0x564>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd16 	bl	80004a0 <__aeabi_f2d>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4912      	ldr	r1, [pc, #72]	; (8003ac4 <TrajectoryEvaluation+0x57c>)
 8003a7a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <TrajectoryEvaluation+0x580>)
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e2da      	b.n	800403e <TrajectoryEvaluation+0xaf6>
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	40000000 	.word	0x40000000
 8003a90:	00000000 	.word	0x00000000
 8003a94:	40080000 	.word	0x40080000
 8003a98:	2000059c 	.word	0x2000059c
 8003a9c:	20000594 	.word	0x20000594
 8003aa0:	200005a0 	.word	0x200005a0
 8003aa4:	20000610 	.word	0x20000610
 8003aa8:	200005c8 	.word	0x200005c8
 8003aac:	200005f8 	.word	0x200005f8
 8003ab0:	200005e0 	.word	0x200005e0
 8003ab4:	3fe00000 	.word	0x3fe00000
 8003ab8:	20000078 	.word	0x20000078
 8003abc:	40180000 	.word	0x40180000
 8003ac0:	20000628 	.word	0x20000628
 8003ac4:	20000630 	.word	0x20000630
 8003ac8:	20000638 	.word	0x20000638
 8003acc:	200005a4 	.word	0x200005a4
	}
	else if (t4 <= t && t < t5 ){
 8003ad0:	4bb3      	ldr	r3, [pc, #716]	; (8003da0 <TrajectoryEvaluation+0x858>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4bb3      	ldr	r3, [pc, #716]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	f200 80be 	bhi.w	8003c64 <TrajectoryEvaluation+0x71c>
 8003ae8:	4bae      	ldr	r3, [pc, #696]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003aea:	ed93 7a00 	vldr	s14, [r3]
 8003aee:	4bae      	ldr	r3, [pc, #696]	; (8003da8 <TrajectoryEvaluation+0x860>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afc:	f140 80b2 	bpl.w	8003c64 <TrajectoryEvaluation+0x71c>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 8003b00:	4baa      	ldr	r3, [pc, #680]	; (8003dac <TrajectoryEvaluation+0x864>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fccb 	bl	80004a0 <__aeabi_f2d>
 8003b0a:	4ba9      	ldr	r3, [pc, #676]	; (8003db0 <TrajectoryEvaluation+0x868>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fb68 	bl	80001e4 <__adddf3>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4690      	mov	r8, r2
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	4ba5      	ldr	r3, [pc, #660]	; (8003db4 <TrajectoryEvaluation+0x86c>)
 8003b1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b22:	4ba0      	ldr	r3, [pc, #640]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003b24:	edd3 6a00 	vldr	s13, [r3]
 8003b28:	4b9d      	ldr	r3, [pc, #628]	; (8003da0 <TrajectoryEvaluation+0x858>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	ee17 0a90 	vmov	r0, s15
 8003b3a:	f7fc fcb1 	bl	80004a0 <__aeabi_f2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4640      	mov	r0, r8
 8003b44:	4649      	mov	r1, r9
 8003b46:	f7fc fb4d 	bl	80001e4 <__adddf3>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4690      	mov	r8, r2
 8003b50:	4699      	mov	r9, r3
 8003b52:	4b94      	ldr	r3, [pc, #592]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	4b91      	ldr	r3, [pc, #580]	; (8003da0 <TrajectoryEvaluation+0x858>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b62:	ee17 0a90 	vmov	r0, s15
 8003b66:	f7fc fc9b 	bl	80004a0 <__aeabi_f2d>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003d90 <TrajectoryEvaluation+0x848>
 8003b72:	ec43 2b10 	vmov	d0, r2, r3
 8003b76:	f008 fc7f 	bl	800c478 <pow>
 8003b7a:	ec51 0b10 	vmov	r0, r1, d0
 8003b7e:	4b8e      	ldr	r3, [pc, #568]	; (8003db8 <TrajectoryEvaluation+0x870>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f7fc fce4 	bl	8000550 <__aeabi_dmul>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <TrajectoryEvaluation+0x874>)
 8003b96:	f7fc fe05 	bl	80007a4 <__aeabi_ddiv>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fb1d 	bl	80001e0 <__aeabi_dsub>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4985      	ldr	r1, [pc, #532]	; (8003dc0 <TrajectoryEvaluation+0x878>)
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 8003bb0:	4b80      	ldr	r3, [pc, #512]	; (8003db4 <TrajectoryEvaluation+0x86c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fc73 	bl	80004a0 <__aeabi_f2d>
 8003bba:	4680      	mov	r8, r0
 8003bbc:	4689      	mov	r9, r1
 8003bbe:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <TrajectoryEvaluation+0x870>)
 8003bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <TrajectoryEvaluation+0x87c>)
 8003bca:	f7fc fcc1 	bl	8000550 <__aeabi_dmul>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4692      	mov	sl, r2
 8003bd4:	469b      	mov	fp, r3
 8003bd6:	4b73      	ldr	r3, [pc, #460]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <TrajectoryEvaluation+0x858>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be6:	ee17 0a90 	vmov	r0, s15
 8003bea:	f7fc fc59 	bl	80004a0 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003d98 <TrajectoryEvaluation+0x850>
 8003bf6:	ec43 2b10 	vmov	d0, r2, r3
 8003bfa:	f008 fc3d 	bl	800c478 <pow>
 8003bfe:	ec53 2b10 	vmov	r2, r3, d0
 8003c02:	4650      	mov	r0, sl
 8003c04:	4659      	mov	r1, fp
 8003c06:	f7fc fca3 	bl	8000550 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4640      	mov	r0, r8
 8003c10:	4649      	mov	r1, r9
 8003c12:	f7fc fae5 	bl	80001e0 <__aeabi_dsub>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	496b      	ldr	r1, [pc, #428]	; (8003dc8 <TrajectoryEvaluation+0x880>)
 8003c1c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 8003c20:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <TrajectoryEvaluation+0x870>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	4614      	mov	r4, r2
 8003c28:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003c2c:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003c2e:	ed93 7a00 	vldr	s14, [r3]
 8003c32:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <TrajectoryEvaluation+0x858>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c3c:	ee17 0a90 	vmov	r0, s15
 8003c40:	f7fc fc2e 	bl	80004a0 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fc80 	bl	8000550 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7fc ff4a 	bl	8000af0 <__aeabi_d2f>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	; (8003dcc <TrajectoryEvaluation+0x884>)
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e1ec      	b.n	800403e <TrajectoryEvaluation+0xaf6>
	}
	else if (t5 <= t && t < t6 ){
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <TrajectoryEvaluation+0x860>)
 8003c66:	ed93 7a00 	vldr	s14, [r3]
 8003c6a:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	f200 80ae 	bhi.w	8003dd8 <TrajectoryEvaluation+0x890>
 8003c7c:	4b49      	ldr	r3, [pc, #292]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003c7e:	ed93 7a00 	vldr	s14, [r3]
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <TrajectoryEvaluation+0x888>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	f140 80a2 	bpl.w	8003dd8 <TrajectoryEvaluation+0x890>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 8003c94:	4b45      	ldr	r3, [pc, #276]	; (8003dac <TrajectoryEvaluation+0x864>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc01 	bl	80004a0 <__aeabi_f2d>
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <TrajectoryEvaluation+0x868>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fa9e 	bl	80001e4 <__adddf3>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <TrajectoryEvaluation+0x86c>)
 8003cb2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003cb8:	edd3 6a00 	vldr	s13, [r3]
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <TrajectoryEvaluation+0x860>)
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	ee17 0a90 	vmov	r0, s15
 8003cce:	f7fc fbe7 	bl	80004a0 <__aeabi_f2d>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fa83 	bl	80001e4 <__adddf3>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <TrajectoryEvaluation+0x88c>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fbd8 	bl	80004a0 <__aeabi_f2d>
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <TrajectoryEvaluation+0x87c>)
 8003cf6:	f7fc fc2b 	bl	8000550 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4690      	mov	r8, r2
 8003d00:	4699      	mov	r9, r3
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003d04:	ed93 7a00 	vldr	s14, [r3]
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <TrajectoryEvaluation+0x860>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d12:	ee17 0a90 	vmov	r0, s15
 8003d16:	f7fc fbc3 	bl	80004a0 <__aeabi_f2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8003d98 <TrajectoryEvaluation+0x850>
 8003d22:	ec43 2b10 	vmov	d0, r2, r3
 8003d26:	f008 fba7 	bl	800c478 <pow>
 8003d2a:	ec53 2b10 	vmov	r2, r3, d0
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	f7fc fc0d 	bl	8000550 <__aeabi_dmul>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7fc fa51 	bl	80001e4 <__adddf3>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <TrajectoryEvaluation+0x878>)
 8003d48:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <TrajectoryEvaluation+0x86c>)
 8003d4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <TrajectoryEvaluation+0x88c>)
 8003d54:	edd3 6a04 	vldr	s13, [r3, #16]
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <TrajectoryEvaluation+0x85c>)
 8003d5a:	ed93 6a00 	vldr	s12, [r3]
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <TrajectoryEvaluation+0x860>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d70:	ee17 0a90 	vmov	r0, s15
 8003d74:	f7fc fb94 	bl	80004a0 <__aeabi_f2d>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4912      	ldr	r1, [pc, #72]	; (8003dc8 <TrajectoryEvaluation+0x880>)
 8003d7e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <TrajectoryEvaluation+0x88c>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <TrajectoryEvaluation+0x884>)
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e158      	b.n	800403e <TrajectoryEvaluation+0xaf6>
 8003d8c:	f3af 8000 	nop.w
 8003d90:	00000000 	.word	0x00000000
 8003d94:	40080000 	.word	0x40080000
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40000000 	.word	0x40000000
 8003da0:	200005a4 	.word	0x200005a4
 8003da4:	20000594 	.word	0x20000594
 8003da8:	200005a8 	.word	0x200005a8
 8003dac:	20000610 	.word	0x20000610
 8003db0:	200005c8 	.word	0x200005c8
 8003db4:	200005f8 	.word	0x200005f8
 8003db8:	20000078 	.word	0x20000078
 8003dbc:	40180000 	.word	0x40180000
 8003dc0:	20000628 	.word	0x20000628
 8003dc4:	3fe00000 	.word	0x3fe00000
 8003dc8:	20000630 	.word	0x20000630
 8003dcc:	20000638 	.word	0x20000638
 8003dd0:	200005ac 	.word	0x200005ac
 8003dd4:	200005e0 	.word	0x200005e0
	}
	else if (t6 <= t && t < t7 ){
 8003dd8:	4b9f      	ldr	r3, [pc, #636]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	4b9f      	ldr	r3, [pc, #636]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	f200 8107 	bhi.w	8003ffe <TrajectoryEvaluation+0xab6>
 8003df0:	4b9a      	ldr	r3, [pc, #616]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003df2:	ed93 7a00 	vldr	s14, [r3]
 8003df6:	4b9a      	ldr	r3, [pc, #616]	; (8004060 <TrajectoryEvaluation+0xb18>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	f140 80fb 	bpl.w	8003ffe <TrajectoryEvaluation+0xab6>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8003e08:	4b96      	ldr	r3, [pc, #600]	; (8004064 <TrajectoryEvaluation+0xb1c>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fb47 	bl	80004a0 <__aeabi_f2d>
 8003e12:	4b95      	ldr	r3, [pc, #596]	; (8004068 <TrajectoryEvaluation+0xb20>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc f9e4 	bl	80001e4 <__adddf3>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	4b91      	ldr	r3, [pc, #580]	; (800406c <TrajectoryEvaluation+0xb24>)
 8003e26:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e2a:	4b8c      	ldr	r3, [pc, #560]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003e2c:	edd3 6a00 	vldr	s13, [r3]
 8003e30:	4b89      	ldr	r3, [pc, #548]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3e:	ee17 0a90 	vmov	r0, s15
 8003e42:	f7fc fb2d 	bl	80004a0 <__aeabi_f2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f7fc f9c9 	bl	80001e4 <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4614      	mov	r4, r2
 8003e58:	461d      	mov	r5, r3
 8003e5a:	4b85      	ldr	r3, [pc, #532]	; (8004070 <TrajectoryEvaluation+0xb28>)
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fb1e 	bl	80004a0 <__aeabi_f2d>
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	4b82      	ldr	r3, [pc, #520]	; (8004074 <TrajectoryEvaluation+0xb2c>)
 8003e6a:	f7fc fb71 	bl	8000550 <__aeabi_dmul>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4690      	mov	r8, r2
 8003e74:	4699      	mov	r9, r3
 8003e76:	4b79      	ldr	r3, [pc, #484]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003e78:	ed93 7a00 	vldr	s14, [r3]
 8003e7c:	4b76      	ldr	r3, [pc, #472]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	ee17 0a90 	vmov	r0, s15
 8003e8a:	f7fc fb09 	bl	80004a0 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8004048 <TrajectoryEvaluation+0xb00>
 8003e96:	ec43 2b10 	vmov	d0, r2, r3
 8003e9a:	f008 faed 	bl	800c478 <pow>
 8003e9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	f7fc fb53 	bl	8000550 <__aeabi_dmul>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f7fc f997 	bl	80001e4 <__adddf3>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	461d      	mov	r5, r3
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003ec0:	ed93 7a00 	vldr	s14, [r3]
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	ee17 0a90 	vmov	r0, s15
 8003ed2:	f7fc fae5 	bl	80004a0 <__aeabi_f2d>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8004050 <TrajectoryEvaluation+0xb08>
 8003ede:	ec43 2b10 	vmov	d0, r2, r3
 8003ee2:	f008 fac9 	bl	800c478 <pow>
 8003ee6:	ec51 0b10 	vmov	r0, r1, d0
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <TrajectoryEvaluation+0xb30>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f7fc fb2e 	bl	8000550 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	4b5e      	ldr	r3, [pc, #376]	; (800407c <TrajectoryEvaluation+0xb34>)
 8003f02:	f7fc fc4f 	bl	80007a4 <__aeabi_ddiv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f7fc f969 	bl	80001e4 <__adddf3>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	495a      	ldr	r1, [pc, #360]	; (8004080 <TrajectoryEvaluation+0xb38>)
 8003f18:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <TrajectoryEvaluation+0xb24>)
 8003f1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f22:	4b53      	ldr	r3, [pc, #332]	; (8004070 <TrajectoryEvaluation+0xb28>)
 8003f24:	edd3 6a05 	vldr	s13, [r3, #20]
 8003f28:	4b4c      	ldr	r3, [pc, #304]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003f2a:	ed93 6a00 	vldr	s12, [r3]
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f40:	ee17 0a90 	vmov	r0, s15
 8003f44:	f7fc faac 	bl	80004a0 <__aeabi_f2d>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <TrajectoryEvaluation+0xb30>)
 8003f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <TrajectoryEvaluation+0xb2c>)
 8003f58:	f7fc fafa 	bl	8000550 <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4690      	mov	r8, r2
 8003f62:	4699      	mov	r9, r3
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003f66:	ed93 7a00 	vldr	s14, [r3]
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	ee17 0a90 	vmov	r0, s15
 8003f78:	f7fc fa92 	bl	80004a0 <__aeabi_f2d>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8004048 <TrajectoryEvaluation+0xb00>
 8003f84:	ec43 2b10 	vmov	d0, r2, r3
 8003f88:	f008 fa76 	bl	800c478 <pow>
 8003f8c:	ec53 2b10 	vmov	r2, r3, d0
 8003f90:	4640      	mov	r0, r8
 8003f92:	4649      	mov	r1, r9
 8003f94:	f7fc fadc 	bl	8000550 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc f920 	bl	80001e4 <__adddf3>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4936      	ldr	r1, [pc, #216]	; (8004084 <TrajectoryEvaluation+0xb3c>)
 8003faa:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003fae:	4b30      	ldr	r3, [pc, #192]	; (8004070 <TrajectoryEvaluation+0xb28>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fa74 	bl	80004a0 <__aeabi_f2d>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <TrajectoryEvaluation+0xb14>)
 8003fbe:	ed93 7a00 	vldr	s14, [r3]
 8003fc2:	4b25      	ldr	r3, [pc, #148]	; (8004058 <TrajectoryEvaluation+0xb10>)
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fcc:	ee17 0a90 	vmov	r0, s15
 8003fd0:	f7fc fa66 	bl	80004a0 <__aeabi_f2d>
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <TrajectoryEvaluation+0xb30>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f7fc fab9 	bl	8000550 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc f8fd 	bl	80001e4 <__adddf3>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7fc fd7d 	bl	8000af0 <__aeabi_d2f>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <TrajectoryEvaluation+0xb40>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e01f      	b.n	800403e <TrajectoryEvaluation+0xaf6>
	}
	else if (t7 <= t ){
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <TrajectoryEvaluation+0xb18>)
 8004000:	ed93 7a00 	vldr	s14, [r3]
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <TrajectoryEvaluation+0xb14>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d900      	bls.n	8004016 <TrajectoryEvaluation+0xace>
//			volt = 0;
//			RunMotor(volt, PID_dir);
//			Go_Flag = 0;
//		}
	}
}
 8004014:	e013      	b.n	800403e <TrajectoryEvaluation+0xaf6>
		theta_ref = theta_f;
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <TrajectoryEvaluation+0xb44>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	4918      	ldr	r1, [pc, #96]	; (8004080 <TrajectoryEvaluation+0xb38>)
 800401e:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <TrajectoryEvaluation+0xb3c>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <TrajectoryEvaluation+0xb3c>)
 800402a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <TrajectoryEvaluation+0xb40>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <TrajectoryEvaluation+0xb40>)
 8004034:	6013      	str	r3, [r2, #0]
		TrajectoryEvaluationFlag =0;
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <TrajectoryEvaluation+0xb48>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
}
 800403c:	e7ff      	b.n	800403e <TrajectoryEvaluation+0xaf6>
 800403e:	bf00      	nop
 8004040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004044:	f3af 8000 	nop.w
 8004048:	00000000 	.word	0x00000000
 800404c:	40000000 	.word	0x40000000
 8004050:	00000000 	.word	0x00000000
 8004054:	40080000 	.word	0x40080000
 8004058:	200005ac 	.word	0x200005ac
 800405c:	20000594 	.word	0x20000594
 8004060:	200005b0 	.word	0x200005b0
 8004064:	20000610 	.word	0x20000610
 8004068:	200005c8 	.word	0x200005c8
 800406c:	200005f8 	.word	0x200005f8
 8004070:	200005e0 	.word	0x200005e0
 8004074:	3fe00000 	.word	0x3fe00000
 8004078:	20000078 	.word	0x20000078
 800407c:	40180000 	.word	0x40180000
 8004080:	20000628 	.word	0x20000628
 8004084:	20000630 	.word	0x20000630
 8004088:	20000638 	.word	0x20000638
 800408c:	200005d0 	.word	0x200005d0
 8004090:	200005c0 	.word	0x200005c0

08004094 <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	ed87 0a01 	vstr	s0, [r7, #4]
 800409e:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 80040a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80040a6:	edd7 7a00 	vldr	s15, [r7]
 80040aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <PositionController+0x9c>)
 80040b0:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 80040b4:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <PositionController+0xa0>)
 80040b6:	ed93 7a00 	vldr	s14, [r3]
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <PositionController+0x9c>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <PositionController+0xa0>)
 80040c6:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <PositionController+0xa4>)
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <PositionController+0x9c>)
 80040d2:	edd3 7a00 	vldr	s15, [r3]
 80040d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <PositionController+0xa8>)
 80040dc:	edd3 6a00 	vldr	s13, [r3]
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <PositionController+0xa0>)
 80040e2:	edd3 7a00 	vldr	s15, [r3]
 80040e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <PositionController+0x9c>)
 80040f0:	edd3 6a00 	vldr	s13, [r3]
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <PositionController+0xac>)
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <PositionController+0xb0>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <PositionController+0xb4>)
 800410e:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <PositionController+0x9c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <PositionController+0xac>)
 8004118:	6013      	str	r3, [r2, #0]
	return u1;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <PositionController+0xb4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	ee07 3a90 	vmov	s15, r3
}
 8004122:	eeb0 0a67 	vmov.f32	s0, s15
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	2000063c 	.word	0x2000063c
 8004134:	20000640 	.word	0x20000640
 8004138:	2000065c 	.word	0x2000065c
 800413c:	20000660 	.word	0x20000660
 8004140:	20000644 	.word	0x20000644
 8004144:	20000664 	.word	0x20000664
 8004148:	20000648 	.word	0x20000648

0800414c <VelocityController>:

float VelocityController(float r,float y,float uP) //r == trajectory, y==feedback
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	ed87 0a03 	vstr	s0, [r7, #12]
 8004156:	edc7 0a02 	vstr	s1, [r7, #8]
 800415a:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 800415e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004162:	edd7 7a03 	vldr	s15, [r7, #12]
 8004166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416a:	4b40      	ldr	r3, [pc, #256]	; (800426c <VelocityController+0x120>)
 800416c:	edc3 7a00 	vstr	s15, [r3]

	if (dir == 0 && e2 <= w_max)
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <VelocityController+0x124>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d117      	bne.n	80041a8 <VelocityController+0x5c>
 8004178:	4b3c      	ldr	r3, [pc, #240]	; (800426c <VelocityController+0x120>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f98f 	bl	80004a0 <__aeabi_f2d>
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <VelocityController+0x128>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc fc5e 	bl	8000a48 <__aeabi_dcmple>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <VelocityController+0x5c>
	{
		e2 = w_max;
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <VelocityController+0x128>)
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fca8 	bl	8000af0 <__aeabi_d2f>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4a32      	ldr	r2, [pc, #200]	; (800426c <VelocityController+0x120>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e01a      	b.n	80041de <VelocityController+0x92>
	}

	else if (dir == 1 && e2 >= w_max)
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <VelocityController+0x124>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d116      	bne.n	80041de <VelocityController+0x92>
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <VelocityController+0x120>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f973 	bl	80004a0 <__aeabi_f2d>
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <VelocityController+0x128>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fc4c 	bl	8000a5c <__aeabi_dcmpge>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <VelocityController+0x92>
	{
		e2 = w_max;
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <VelocityController+0x128>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	f7fc fc8c 	bl	8000af0 <__aeabi_d2f>
 80041d8:	4603      	mov	r3, r0
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <VelocityController+0x120>)
 80041dc:	6013      	str	r3, [r2, #0]
	}

	e2 = e2 - y;
 80041de:	4b23      	ldr	r3, [pc, #140]	; (800426c <VelocityController+0x120>)
 80041e0:	ed93 7a00 	vldr	s14, [r3]
 80041e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80041e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <VelocityController+0x120>)
 80041ee:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <VelocityController+0x12c>)
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	4b1c      	ldr	r3, [pc, #112]	; (800426c <VelocityController+0x120>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <VelocityController+0x12c>)
 8004204:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2) + (kd_2*(e2-p2));
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <VelocityController+0x130>)
 800420a:	ed93 7a00 	vldr	s14, [r3]
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <VelocityController+0x120>)
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <VelocityController+0x134>)
 800421a:	edd3 6a00 	vldr	s13, [r3]
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <VelocityController+0x12c>)
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <VelocityController+0x120>)
 800422e:	edd3 6a00 	vldr	s13, [r3]
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <VelocityController+0x138>)
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <VelocityController+0x13c>)
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <VelocityController+0x140>)
 800424c:	edc3 7a00 	vstr	s15, [r3]
	p2 = e2;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <VelocityController+0x120>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <VelocityController+0x138>)
 8004256:	6013      	str	r3, [r2, #0]
	return u2;
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <VelocityController+0x140>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	ee07 3a90 	vmov	s15, r3
}
 8004260:	eeb0 0a67 	vmov.f32	s0, s15
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000064c 	.word	0x2000064c
 8004270:	200000cd 	.word	0x200000cd
 8004274:	20000068 	.word	0x20000068
 8004278:	20000650 	.word	0x20000650
 800427c:	20000668 	.word	0x20000668
 8004280:	2000066c 	.word	0x2000066c
 8004284:	20000654 	.word	0x20000654
 8004288:	20000670 	.word	0x20000670
 800428c:	20000658 	.word	0x20000658

08004290 <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	ed87 0a03 	vstr	s0, [r7, #12]
 800429a:	edc7 0a02 	vstr	s1, [r7, #8]
 800429e:	ed87 1a01 	vstr	s2, [r7, #4]
 80042a2:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	if(TrajectoryEvaluationFlag == 1)
 80042a6:	4b62      	ldr	r3, [pc, #392]	; (8004430 <Cascade+0x1a0>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d178      	bne.n	80043a0 <Cascade+0x110>
	{
		u = PositionController(Pd, P);
 80042ae:	edd7 0a02 	vldr	s1, [r7, #8]
 80042b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80042b6:	f7ff feed 	bl	8004094 <PositionController>
 80042ba:	eef0 7a40 	vmov.f32	s15, s0
 80042be:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <Cascade+0x1a4>)
 80042c0:	edc3 7a00 	vstr	s15, [r3]
		u = VelocityController(Vd, V, u);
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <Cascade+0x1a4>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	eeb0 1a67 	vmov.f32	s2, s15
 80042ce:	edd7 0a00 	vldr	s1, [r7]
 80042d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042d6:	f7ff ff39 	bl	800414c <VelocityController>
 80042da:	eef0 7a40 	vmov.f32	s15, s0
 80042de:	4b55      	ldr	r3, [pc, #340]	; (8004434 <Cascade+0x1a4>)
 80042e0:	edc3 7a00 	vstr	s15, [r3]
		if (u >= 0)
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <Cascade+0x1a4>)
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	db04      	blt.n	80042fe <Cascade+0x6e>
		{
			PID_dir = dir;
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <Cascade+0x1a8>)
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	4b50      	ldr	r3, [pc, #320]	; (800443c <Cascade+0x1ac>)
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e00b      	b.n	8004316 <Cascade+0x86>
		}

		else
		{
			u = -u;
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <Cascade+0x1a4>)
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	eef1 7a67 	vneg.f32	s15, s15
 8004308:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <Cascade+0x1a4>)
 800430a:	edc3 7a00 	vstr	s15, [r3]
			PID_dir = dir;
 800430e:	4b4a      	ldr	r3, [pc, #296]	; (8004438 <Cascade+0x1a8>)
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	4b4a      	ldr	r3, [pc, #296]	; (800443c <Cascade+0x1ac>)
 8004314:	701a      	strb	r2, [r3, #0]
		}
		volt_buff = TransferFunction(omega_ref);
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <Cascade+0x1b0>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	f7fc fbe6 	bl	8000af0 <__aeabi_d2f>
 8004324:	4603      	mov	r3, r0
 8004326:	ee00 3a10 	vmov	s0, r3
 800432a:	f000 ff19 	bl	8005160 <TransferFunction>
 800432e:	eef0 7a40 	vmov.f32	s15, s0
 8004332:	4b44      	ldr	r3, [pc, #272]	; (8004444 <Cascade+0x1b4>)
 8004334:	edc3 7a00 	vstr	s15, [r3]
		u = u+volt_buff;
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <Cascade+0x1a4>)
 800433a:	ed93 7a00 	vldr	s14, [r3]
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <Cascade+0x1b4>)
 8004340:	edd3 7a00 	vldr	s15, [r3]
 8004344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004348:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <Cascade+0x1a4>)
 800434a:	edc3 7a00 	vstr	s15, [r3]

		if ((t > t4 && u <= volt_constant) || t >= t7)
 800434e:	4b3e      	ldr	r3, [pc, #248]	; (8004448 <Cascade+0x1b8>)
 8004350:	ed93 7a00 	vldr	s14, [r3]
 8004354:	4b3d      	ldr	r3, [pc, #244]	; (800444c <Cascade+0x1bc>)
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004362:	dd0a      	ble.n	800437a <Cascade+0xea>
 8004364:	4b33      	ldr	r3, [pc, #204]	; (8004434 <Cascade+0x1a4>)
 8004366:	ed93 7a00 	vldr	s14, [r3]
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <Cascade+0x1c0>)
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	d90a      	bls.n	8004390 <Cascade+0x100>
 800437a:	4b33      	ldr	r3, [pc, #204]	; (8004448 <Cascade+0x1b8>)
 800437c:	ed93 7a00 	vldr	s14, [r3]
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <Cascade+0x1c4>)
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	db3b      	blt.n	8004408 <Cascade+0x178>
			{
				u = volt_constant;
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <Cascade+0x1c0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <Cascade+0x1a4>)
 8004396:	6013      	str	r3, [r2, #0]
				TrajectoryEvaluationFlag = 0;
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <Cascade+0x1a0>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e033      	b.n	8004408 <Cascade+0x178>
			}
	}
	else
	{
		PID_dir = dir;
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <Cascade+0x1a8>)
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <Cascade+0x1ac>)
 80043a6:	701a      	strb	r2, [r3, #0]
		if(theta_now == theta_0){
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <Cascade+0x1c8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f877 	bl	80004a0 <__aeabi_f2d>
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <Cascade+0x1cc>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc fb32 	bl	8000a20 <__aeabi_dcmpeq>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <Cascade+0x170>
			RunMotor(0.0, PID_dir);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <Cascade+0x1ac>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8004460 <Cascade+0x1d0>
 80043cc:	f7fd f9cc 	bl	8001768 <RunMotor>
			u = volt_statics;
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <Cascade+0x1d4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <Cascade+0x1a4>)
 80043d6:	6013      	str	r3, [r2, #0]
			volt_statics += 0.0001;
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <Cascade+0x1d4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f85f 	bl	80004a0 <__aeabi_f2d>
 80043e2:	a311      	add	r3, pc, #68	; (adr r3, 8004428 <Cascade+0x198>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fb fefc 	bl	80001e4 <__adddf3>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	f7fc fb7c 	bl	8000af0 <__aeabi_d2f>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <Cascade+0x1d4>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e003      	b.n	8004408 <Cascade+0x178>
		}
		else{
			u = volt_constant;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <Cascade+0x1c0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <Cascade+0x1a4>)
 8004406:	6013      	str	r3, [r2, #0]

		}

	}

	return limit(u);
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <Cascade+0x1a4>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	eeb0 0a67 	vmov.f32	s0, s15
 8004412:	f000 f861 	bl	80044d8 <limit>
 8004416:	eef0 7a40 	vmov.f32	s15, s0
}
 800441a:	eeb0 0a67 	vmov.f32	s0, s15
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	f3af 8000 	nop.w
 8004428:	eb1c432d 	.word	0xeb1c432d
 800442c:	3f1a36e2 	.word	0x3f1a36e2
 8004430:	200005c0 	.word	0x200005c0
 8004434:	200006fc 	.word	0x200006fc
 8004438:	200000cd 	.word	0x200000cd
 800443c:	200000ce 	.word	0x200000ce
 8004440:	20000630 	.word	0x20000630
 8004444:	200006e0 	.word	0x200006e0
 8004448:	20000594 	.word	0x20000594
 800444c:	200005a4 	.word	0x200005a4
 8004450:	200003e0 	.word	0x200003e0
 8004454:	200005b0 	.word	0x200005b0
 8004458:	200003f4 	.word	0x200003f4
 800445c:	200005c8 	.word	0x200005c8
 8004460:	00000000 	.word	0x00000000
 8004464:	200003e4 	.word	0x200003e4

08004468 <negative>:

float negative(float var)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 8004472:	edd7 7a01 	vldr	s15, [r7, #4]
 8004476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	dd05      	ble.n	800448c <negative+0x24>
		var = -var;
 8004480:	edd7 7a01 	vldr	s15, [r7, #4]
 8004484:	eef1 7a67 	vneg.f32	s15, s15
 8004488:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	ee07 3a90 	vmov	s15, r3
}
 8004492:	eeb0 0a67 	vmov.f32	s0, s15
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <positive>:

float positive(float var)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 80044aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80044ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d505      	bpl.n	80044c4 <positive+0x24>
			var = -var;
 80044b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044bc:	eef1 7a67 	vneg.f32	s15, s15
 80044c0:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	ee07 3a90 	vmov	s15, r3
}
 80044ca:	eeb0 0a67 	vmov.f32	s0, s15
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <limit>:

float limit(float var1)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	ed87 0a01 	vstr	s0, [r7, #4]
	return (var1 > 24.0) ? 24.0 : var1;
 80044e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044e6:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80044ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f2:	dd01      	ble.n	80044f8 <limit+0x20>
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <limit+0x34>)
 80044f6:	e000      	b.n	80044fa <limit+0x22>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	ee07 3a90 	vmov	s15, r3
}
 80044fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	41c00000 	.word	0x41c00000

08004510 <UART>:

void UART(){
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8004516:	4bbe      	ldr	r3, [pc, #760]	; (8004810 <UART+0x300>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8502 	beq.w	8004f24 <UART+0xa14>
 8004520:	2b00      	cmp	r3, #0
 8004522:	f2c0 852a 	blt.w	8004f7a <UART+0xa6a>
 8004526:	2b9e      	cmp	r3, #158	; 0x9e
 8004528:	f300 8527 	bgt.w	8004f7a <UART+0xa6a>
 800452c:	2b58      	cmp	r3, #88	; 0x58
 800452e:	f2c0 8524 	blt.w	8004f7a <UART+0xa6a>
 8004532:	3b58      	subs	r3, #88	; 0x58
 8004534:	2b46      	cmp	r3, #70	; 0x46
 8004536:	f200 8520 	bhi.w	8004f7a <UART+0xa6a>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART+0x30>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004f31 	.word	0x08004f31
 8004544:	08004f7b 	.word	0x08004f7b
 8004548:	08004f7b 	.word	0x08004f7b
 800454c:	08004f7b 	.word	0x08004f7b
 8004550:	08004f7b 	.word	0x08004f7b
 8004554:	08004f7b 	.word	0x08004f7b
 8004558:	08004f7b 	.word	0x08004f7b
 800455c:	08004f7b 	.word	0x08004f7b
 8004560:	08004f7b 	.word	0x08004f7b
 8004564:	08004f7b 	.word	0x08004f7b
 8004568:	08004f7b 	.word	0x08004f7b
 800456c:	08004f7b 	.word	0x08004f7b
 8004570:	08004f7b 	.word	0x08004f7b
 8004574:	08004f7b 	.word	0x08004f7b
 8004578:	08004f7b 	.word	0x08004f7b
 800457c:	08004f7b 	.word	0x08004f7b
 8004580:	08004f7b 	.word	0x08004f7b
 8004584:	08004f7b 	.word	0x08004f7b
 8004588:	08004f7b 	.word	0x08004f7b
 800458c:	08004f7b 	.word	0x08004f7b
 8004590:	08004f7b 	.word	0x08004f7b
 8004594:	08004f7b 	.word	0x08004f7b
 8004598:	08004f7b 	.word	0x08004f7b
 800459c:	08004f7b 	.word	0x08004f7b
 80045a0:	08004f7b 	.word	0x08004f7b
 80045a4:	08004f7b 	.word	0x08004f7b
 80045a8:	08004f7b 	.word	0x08004f7b
 80045ac:	08004f7b 	.word	0x08004f7b
 80045b0:	08004f7b 	.word	0x08004f7b
 80045b4:	08004f7b 	.word	0x08004f7b
 80045b8:	08004f7b 	.word	0x08004f7b
 80045bc:	08004f7b 	.word	0x08004f7b
 80045c0:	08004f7b 	.word	0x08004f7b
 80045c4:	08004f7b 	.word	0x08004f7b
 80045c8:	08004f7b 	.word	0x08004f7b
 80045cc:	08004f7b 	.word	0x08004f7b
 80045d0:	08004f7b 	.word	0x08004f7b
 80045d4:	08004f7b 	.word	0x08004f7b
 80045d8:	08004f7b 	.word	0x08004f7b
 80045dc:	08004f7b 	.word	0x08004f7b
 80045e0:	08004f7b 	.word	0x08004f7b
 80045e4:	08004f7b 	.word	0x08004f7b
 80045e8:	08004f7b 	.word	0x08004f7b
 80045ec:	08004f7b 	.word	0x08004f7b
 80045f0:	08004f7b 	.word	0x08004f7b
 80045f4:	08004f7b 	.word	0x08004f7b
 80045f8:	08004f7b 	.word	0x08004f7b
 80045fc:	08004f7b 	.word	0x08004f7b
 8004600:	08004f7b 	.word	0x08004f7b
 8004604:	08004f7b 	.word	0x08004f7b
 8004608:	08004f7b 	.word	0x08004f7b
 800460c:	08004f7b 	.word	0x08004f7b
 8004610:	08004f7b 	.word	0x08004f7b
 8004614:	08004f7b 	.word	0x08004f7b
 8004618:	08004f7b 	.word	0x08004f7b
 800461c:	08004f7b 	.word	0x08004f7b
 8004620:	08004f7b 	.word	0x08004f7b
 8004624:	08004f89 	.word	0x08004f89
 8004628:	0800465d 	.word	0x0800465d
 800462c:	08004691 	.word	0x08004691
 8004630:	080046c5 	.word	0x080046c5
 8004634:	08004765 	.word	0x08004765
 8004638:	08004835 	.word	0x08004835
 800463c:	080048d9 	.word	0x080048d9
 8004640:	080049c7 	.word	0x080049c7
 8004644:	080049ff 	.word	0x080049ff
 8004648:	08004b6f 	.word	0x08004b6f
 800464c:	08004cd9 	.word	0x08004cd9
 8004650:	08004e53 	.word	0x08004e53
 8004654:	08004e8b 	.word	0x08004e8b
 8004658:	08004ec3 	.word	0x08004ec3
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 800465c:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <UART+0x300>)
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2b6d      	cmp	r3, #109	; 0x6d
 8004662:	f040 8493 	bne.w	8004f8c <UART+0xa7c>
			//connect MCU
			HAL_UART_DMAStop(&huart2);
 8004666:	486b      	ldr	r0, [pc, #428]	; (8004814 <UART+0x304>)
 8004668:	f006 fb08 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 800466c:	220c      	movs	r2, #12
 800466e:	4968      	ldr	r1, [pc, #416]	; (8004810 <UART+0x300>)
 8004670:	4868      	ldr	r0, [pc, #416]	; (8004814 <UART+0x304>)
 8004672:	f006 fad3 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004676:	2202      	movs	r2, #2
 8004678:	4967      	ldr	r1, [pc, #412]	; (8004818 <UART+0x308>)
 800467a:	4866      	ldr	r0, [pc, #408]	; (8004814 <UART+0x304>)
 800467c:	f006 fa50 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004680:	4b63      	ldr	r3, [pc, #396]	; (8004810 <UART+0x300>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <UART+0x300>)
 8004688:	2200      	movs	r2, #0
 800468a:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[1]=0;
//			RxData[0]=0;
//		}
		break;
 800468c:	f000 bc7e 	b.w	8004f8c <UART+0xa7c>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 8004690:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <UART+0x300>)
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b6c      	cmp	r3, #108	; 0x6c
 8004696:	f040 847b 	bne.w	8004f90 <UART+0xa80>
			//disconnect MCU
			HAL_UART_DMAStop(&huart2);
 800469a:	485e      	ldr	r0, [pc, #376]	; (8004814 <UART+0x304>)
 800469c:	f006 faee 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80046a0:	220c      	movs	r2, #12
 80046a2:	495b      	ldr	r1, [pc, #364]	; (8004810 <UART+0x300>)
 80046a4:	485b      	ldr	r0, [pc, #364]	; (8004814 <UART+0x304>)
 80046a6:	f006 fab9 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80046aa:	2202      	movs	r2, #2
 80046ac:	495a      	ldr	r1, [pc, #360]	; (8004818 <UART+0x308>)
 80046ae:	4859      	ldr	r0, [pc, #356]	; (8004814 <UART+0x304>)
 80046b0:	f006 fa36 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[1]=0;
 80046b4:	4b56      	ldr	r3, [pc, #344]	; (8004810 <UART+0x300>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	705a      	strb	r2, [r3, #1]
			RxData[0] = 0;
 80046ba:	4b55      	ldr	r3, [pc, #340]	; (8004810 <UART+0x300>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[1]=0;
//			RxData[0]=0;
//		}
		break;
 80046c0:	f000 bc66 	b.w	8004f90 <UART+0xa80>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 80046c4:	4b52      	ldr	r3, [pc, #328]	; (8004810 <UART+0x300>)
 80046c6:	785a      	ldrb	r2, [r3, #1]
 80046c8:	4b54      	ldr	r3, [pc, #336]	; (800481c <UART+0x30c>)
 80046ca:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <UART+0x300>)
 80046ce:	789a      	ldrb	r2, [r3, #2]
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <UART+0x310>)
 80046d2:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80046d4:	4b51      	ldr	r3, [pc, #324]	; (800481c <UART+0x30c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <UART+0x310>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <UART+0x314>)
 80046ea:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 80046ec:	4b48      	ldr	r3, [pc, #288]	; (8004810 <UART+0x300>)
 80046ee:	78da      	ldrb	r2, [r3, #3]
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <UART+0x30c>)
 80046f2:	7819      	ldrb	r1, [r3, #0]
 80046f4:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <UART+0x310>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	440b      	add	r3, r1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3b6c      	subs	r3, #108	; 0x6c
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	429a      	cmp	r2, r3
 8004706:	f040 8445 	bne.w	8004f94 <UART+0xa84>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 800470a:	4b46      	ldr	r3, [pc, #280]	; (8004824 <UART+0x314>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb fea4 	bl	800045c <__aeabi_ui2d>
 8004714:	a338      	add	r3, pc, #224	; (adr r3, 80047f8 <UART+0x2e8>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb ff19 	bl	8000550 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	a336      	add	r3, pc, #216	; (adr r3, 8004800 <UART+0x2f0>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb ff10 	bl	8000550 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	493c      	ldr	r1, [pc, #240]	; (8004828 <UART+0x318>)
 8004736:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 800473a:	4836      	ldr	r0, [pc, #216]	; (8004814 <UART+0x304>)
 800473c:	f006 fa9e 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004740:	220c      	movs	r2, #12
 8004742:	4933      	ldr	r1, [pc, #204]	; (8004810 <UART+0x300>)
 8004744:	4833      	ldr	r0, [pc, #204]	; (8004814 <UART+0x304>)
 8004746:	f006 fa69 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800474a:	2202      	movs	r2, #2
 800474c:	4932      	ldr	r1, [pc, #200]	; (8004818 <UART+0x308>)
 800474e:	4831      	ldr	r0, [pc, #196]	; (8004814 <UART+0x304>)
 8004750:	f006 f9e6 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[3]=0;
 8004754:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <UART+0x300>)
 8004756:	2200      	movs	r2, #0
 8004758:	70da      	strb	r2, [r3, #3]
			RxData[0] = 0;
 800475a:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <UART+0x300>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[3]=0;
//			RxData[0]=0;
//		}
		break;
 8004760:	f000 bc18 	b.w	8004f94 <UART+0xa84>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <UART+0x300>)
 8004766:	785a      	ldrb	r2, [r3, #1]
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <UART+0x30c>)
 800476a:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <UART+0x300>)
 800476e:	789a      	ldrb	r2, [r3, #2]
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <UART+0x310>)
 8004772:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <UART+0x30c>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	b29a      	uxth	r2, r3
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <UART+0x310>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	4413      	add	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <UART+0x314>)
 800478a:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 800478c:	4b20      	ldr	r3, [pc, #128]	; (8004810 <UART+0x300>)
 800478e:	78da      	ldrb	r2, [r3, #3]
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <UART+0x30c>)
 8004792:	7819      	ldrb	r1, [r3, #0]
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <UART+0x310>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	440b      	add	r3, r1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3b6b      	subs	r3, #107	; 0x6b
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f040 83f7 	bne.w	8004f98 <UART+0xa88>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <UART+0x314>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fe54 	bl	800045c <__aeabi_ui2d>
 80047b4:	a314      	add	r3, pc, #80	; (adr r3, 8004808 <UART+0x2f8>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fb fff3 	bl	80007a4 <__aeabi_ddiv>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	491a      	ldr	r1, [pc, #104]	; (800482c <UART+0x31c>)
 80047c4:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 80047c8:	4812      	ldr	r0, [pc, #72]	; (8004814 <UART+0x304>)
 80047ca:	f006 fa57 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80047ce:	220c      	movs	r2, #12
 80047d0:	490f      	ldr	r1, [pc, #60]	; (8004810 <UART+0x300>)
 80047d2:	4810      	ldr	r0, [pc, #64]	; (8004814 <UART+0x304>)
 80047d4:	f006 fa22 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80047d8:	2202      	movs	r2, #2
 80047da:	490f      	ldr	r1, [pc, #60]	; (8004818 <UART+0x308>)
 80047dc:	480d      	ldr	r0, [pc, #52]	; (8004814 <UART+0x304>)
 80047de:	f006 f99f 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <UART+0x300>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
			RxData[3]=0;
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <UART+0x300>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	70da      	strb	r2, [r3, #3]
			ModeN =0;
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <UART+0x320>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[3]=0;
//			RxData[0]=0;
//		}
		break;
 80047f4:	e3d0      	b.n	8004f98 <UART+0xa88>
 80047f6:	bf00      	nop
 80047f8:	14141414 	.word	0x14141414
 80047fc:	3fa41414 	.word	0x3fa41414
 8004800:	f37bebd5 	.word	0xf37bebd5
 8004804:	3fbacee9 	.word	0x3fbacee9
 8004808:	00000000 	.word	0x00000000
 800480c:	40c38800 	.word	0x40c38800
 8004810:	20000684 	.word	0x20000684
 8004814:	200002d8 	.word	0x200002d8
 8004818:	2000009c 	.word	0x2000009c
 800481c:	20000700 	.word	0x20000700
 8004820:	20000701 	.word	0x20000701
 8004824:	20000702 	.word	0x20000702
 8004828:	20000068 	.word	0x20000068
 800482c:	200005d0 	.word	0x200005d0
 8004830:	200006a0 	.word	0x200006a0
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 8004834:	4b92      	ldr	r3, [pc, #584]	; (8004a80 <UART+0x570>)
 8004836:	785a      	ldrb	r2, [r3, #1]
 8004838:	4b92      	ldr	r3, [pc, #584]	; (8004a84 <UART+0x574>)
 800483a:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 800483c:	4b90      	ldr	r3, [pc, #576]	; (8004a80 <UART+0x570>)
 800483e:	789a      	ldrb	r2, [r3, #2]
 8004840:	4b91      	ldr	r3, [pc, #580]	; (8004a88 <UART+0x578>)
 8004842:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004844:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <UART+0x574>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	b29a      	uxth	r2, r3
 800484e:	4b8e      	ldr	r3, [pc, #568]	; (8004a88 <UART+0x578>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b29a      	uxth	r2, r3
 8004858:	4b8c      	ldr	r3, [pc, #560]	; (8004a8c <UART+0x57c>)
 800485a:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 800485c:	4b88      	ldr	r3, [pc, #544]	; (8004a80 <UART+0x570>)
 800485e:	78da      	ldrb	r2, [r3, #3]
 8004860:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <UART+0x574>)
 8004862:	7819      	ldrb	r1, [r3, #0]
 8004864:	4b88      	ldr	r3, [pc, #544]	; (8004a88 <UART+0x578>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	440b      	add	r3, r1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3b6a      	subs	r3, #106	; 0x6a
 800486e:	b2db      	uxtb	r3, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	429a      	cmp	r2, r3
 8004876:	f040 8391 	bne.w	8004f9c <UART+0xa8c>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 800487a:	4b83      	ldr	r3, [pc, #524]	; (8004a88 <UART+0x578>)
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	4b84      	ldr	r3, [pc, #528]	; (8004a90 <UART+0x580>)
 8004880:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 8004882:	4b83      	ldr	r3, [pc, #524]	; (8004a90 <UART+0x580>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a82      	ldr	r2, [pc, #520]	; (8004a94 <UART+0x584>)
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fe05 	bl	80004a0 <__aeabi_f2d>
 8004896:	a378      	add	r3, pc, #480	; (adr r3, 8004a78 <UART+0x568>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f7fb fe58 	bl	8000550 <__aeabi_dmul>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	497c      	ldr	r1, [pc, #496]	; (8004a98 <UART+0x588>)
 80048a6:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 80048aa:	4b7c      	ldr	r3, [pc, #496]	; (8004a9c <UART+0x58c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80048b0:	487b      	ldr	r0, [pc, #492]	; (8004aa0 <UART+0x590>)
 80048b2:	f006 f9e3 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80048b6:	220c      	movs	r2, #12
 80048b8:	4971      	ldr	r1, [pc, #452]	; (8004a80 <UART+0x570>)
 80048ba:	4879      	ldr	r0, [pc, #484]	; (8004aa0 <UART+0x590>)
 80048bc:	f006 f9ae 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80048c0:	2202      	movs	r2, #2
 80048c2:	4978      	ldr	r1, [pc, #480]	; (8004aa4 <UART+0x594>)
 80048c4:	4876      	ldr	r0, [pc, #472]	; (8004aa0 <UART+0x590>)
 80048c6:	f006 f92b 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80048ca:	4b6d      	ldr	r3, [pc, #436]	; (8004a80 <UART+0x570>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
			RxData[3]=0;
 80048d0:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <UART+0x570>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	70da      	strb	r2, [r3, #3]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[3]=0;
//		}
		break;
 80048d6:	e361      	b.n	8004f9c <UART+0xa8c>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 80048d8:	4b69      	ldr	r3, [pc, #420]	; (8004a80 <UART+0x570>)
 80048da:	785a      	ldrb	r2, [r3, #1]
 80048dc:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <UART+0x598>)
 80048de:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
		uint8_t k=2;
 80048e4:	2302      	movs	r3, #2
 80048e6:	73bb      	strb	r3, [r7, #14]
		for(int j = 0;j<n_station_max;j+=2){
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	e019      	b.n	8004922 <UART+0x412>
			index_station[j] = RxData[k]%16;
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	4a63      	ldr	r2, [pc, #396]	; (8004a80 <UART+0x570>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	b2d9      	uxtb	r1, r3
 80048fa:	4a65      	ldr	r2, [pc, #404]	; (8004a90 <UART+0x580>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4413      	add	r3, r2
 8004900:	460a      	mov	r2, r1
 8004902:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	4a5e      	ldr	r2, [pc, #376]	; (8004a80 <UART+0x570>)
 8004908:	5cd2      	ldrb	r2, [r2, r3]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	0912      	lsrs	r2, r2, #4
 8004910:	b2d1      	uxtb	r1, r2
 8004912:	4a5f      	ldr	r2, [pc, #380]	; (8004a90 <UART+0x580>)
 8004914:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	3301      	adds	r3, #1
 800491a:	73bb      	strb	r3, [r7, #14]
		for(int j = 0;j<n_station_max;j+=2){
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3302      	adds	r3, #2
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <UART+0x598>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4293      	cmp	r3, r2
 800492c:	dbdf      	blt.n	80048ee <UART+0x3de>
		}
		for(int f = 0; f<k;f++){
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	e009      	b.n	8004948 <UART+0x438>
			Check += RxData[f];
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <UART+0x570>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	4413      	add	r3, r2
 8004940:	73fb      	strb	r3, [r7, #15]
		for(int f = 0; f<k;f++){
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3301      	adds	r3, #1
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	dbf1      	blt.n	8004934 <UART+0x424>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 8004950:	7bbb      	ldrb	r3, [r7, #14]
 8004952:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <UART+0x570>)
 8004954:	5cd2      	ldrb	r2, [r2, r3]
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	43db      	mvns	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	429a      	cmp	r2, r3
 800495e:	f040 831f 	bne.w	8004fa0 <UART+0xa90>

			ModeN=1;
 8004962:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <UART+0x58c>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
			n_station=0;
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <UART+0x59c>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 800496e:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <UART+0x59c>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <UART+0x580>)
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	3b01      	subs	r3, #1
 800497a:	4a46      	ldr	r2, [pc, #280]	; (8004a94 <UART+0x584>)
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fd8c 	bl	80004a0 <__aeabi_f2d>
 8004988:	a33b      	add	r3, pc, #236	; (adr r3, 8004a78 <UART+0x568>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fddf 	bl	8000550 <__aeabi_dmul>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4940      	ldr	r1, [pc, #256]	; (8004a98 <UART+0x588>)
 8004998:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 800499c:	4840      	ldr	r0, [pc, #256]	; (8004aa0 <UART+0x590>)
 800499e:	f006 f96d 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80049a2:	220c      	movs	r2, #12
 80049a4:	4936      	ldr	r1, [pc, #216]	; (8004a80 <UART+0x570>)
 80049a6:	483e      	ldr	r0, [pc, #248]	; (8004aa0 <UART+0x590>)
 80049a8:	f006 f938 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80049ac:	2202      	movs	r2, #2
 80049ae:	493d      	ldr	r1, [pc, #244]	; (8004aa4 <UART+0x594>)
 80049b0:	483b      	ldr	r0, [pc, #236]	; (8004aa0 <UART+0x590>)
 80049b2:	f006 f8b5 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80049b6:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <UART+0x570>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
			RxData[k]=0;
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <UART+0x570>)
 80049c0:	2100      	movs	r1, #0
 80049c2:	54d1      	strb	r1, [r2, r3]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[k]=0;
//		}
		break;
 80049c4:	e2ec      	b.n	8004fa0 <UART+0xa90>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <UART+0x570>)
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b67      	cmp	r3, #103	; 0x67
 80049cc:	f040 82ea 	bne.w	8004fa4 <UART+0xa94>
			//Go to Station / Goal Position
			HAL_UART_DMAStop(&huart2);
 80049d0:	4833      	ldr	r0, [pc, #204]	; (8004aa0 <UART+0x590>)
 80049d2:	f006 f953 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 80049d6:	220c      	movs	r2, #12
 80049d8:	4929      	ldr	r1, [pc, #164]	; (8004a80 <UART+0x570>)
 80049da:	4831      	ldr	r0, [pc, #196]	; (8004aa0 <UART+0x590>)
 80049dc:	f006 f91e 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80049e0:	2202      	movs	r2, #2
 80049e2:	4930      	ldr	r1, [pc, #192]	; (8004aa4 <UART+0x594>)
 80049e4:	482e      	ldr	r0, [pc, #184]	; (8004aa0 <UART+0x590>)
 80049e6:	f006 f89b 	bl	800ab20 <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <UART+0x5a0>)
 80049ec:	2206      	movs	r2, #6
 80049ee:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <UART+0x570>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	705a      	strb	r2, [r3, #1]
			RxData[0] = 0;
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <UART+0x570>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 80049fc:	e2d2      	b.n	8004fa4 <UART+0xa94>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 80049fe:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <UART+0x570>)
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b66      	cmp	r3, #102	; 0x66
 8004a04:	f040 82d0 	bne.w	8004fa8 <UART+0xa98>
			//Request Current Station
			if(Finish){
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <UART+0x5a4>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d059      	beq.n	8004ac4 <UART+0x5b4>
				if(CheckTrasmit){
 8004a10:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <UART+0x5a8>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <UART+0x54a>
					TxData2[4]=TxData[2];
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <UART+0x5ac>)
 8004a1a:	789a      	ldrb	r2, [r3, #2]
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <UART+0x5b0>)
 8004a1e:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 8004a20:	4b26      	ldr	r3, [pc, #152]	; (8004abc <UART+0x5ac>)
 8004a22:	78da      	ldrb	r2, [r3, #3]
 8004a24:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <UART+0x5b0>)
 8004a26:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <UART+0x5ac>)
 8004a2a:	791a      	ldrb	r2, [r3, #4]
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <UART+0x5b0>)
 8004a2e:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <UART+0x5ac>)
 8004a32:	795a      	ldrb	r2, [r3, #5]
 8004a34:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <UART+0x5b0>)
 8004a36:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 8004a38:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <UART+0x5a8>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2); //
 8004a3e:	4818      	ldr	r0, [pc, #96]	; (8004aa0 <UART+0x590>)
 8004a40:	f006 f91c 	bl	800ac7c <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004a44:	220c      	movs	r2, #12
 8004a46:	490e      	ldr	r1, [pc, #56]	; (8004a80 <UART+0x570>)
 8004a48:	4815      	ldr	r0, [pc, #84]	; (8004aa0 <UART+0x590>)
 8004a4a:	f006 f8e7 	bl	800ac1c <HAL_UART_Receive_DMA>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004a4e:	2208      	movs	r2, #8
 8004a50:	491b      	ldr	r1, [pc, #108]	; (8004ac0 <UART+0x5b0>)
 8004a52:	4813      	ldr	r0, [pc, #76]	; (8004aa0 <UART+0x590>)
 8004a54:	f006 f864 	bl	800ab20 <HAL_UART_Transmit_DMA>
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8004a58:	e2a6      	b.n	8004fa8 <UART+0xa98>
					RxData[0] = 0;
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <UART+0x570>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
					RxData[1]=0;
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <UART+0x570>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	705a      	strb	r2, [r3, #1]
					CheckTrasmit=1;
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <UART+0x5a8>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <UART+0x5a4>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
		break;
 8004a72:	e299      	b.n	8004fa8 <UART+0xa98>
 8004a74:	f3af 8000 	nop.w
 8004a78:	a2529d39 	.word	0xa2529d39
 8004a7c:	3f91df46 	.word	0x3f91df46
 8004a80:	20000684 	.word	0x20000684
 8004a84:	20000700 	.word	0x20000700
 8004a88:	20000701 	.word	0x20000701
 8004a8c:	20000702 	.word	0x20000702
 8004a90:	200006a4 	.word	0x200006a4
 8004a94:	200000a0 	.word	0x200000a0
 8004a98:	200005d0 	.word	0x200005d0
 8004a9c:	200006a0 	.word	0x200006a0
 8004aa0:	200002d8 	.word	0x200002d8
 8004aa4:	2000009c 	.word	0x2000009c
 8004aa8:	200000c9 	.word	0x200000c9
 8004aac:	200000ca 	.word	0x200000ca
 8004ab0:	200000cb 	.word	0x200000cb
 8004ab4:	200006a1 	.word	0x200006a1
 8004ab8:	200000cf 	.word	0x200000cf
 8004abc:	2000008c 	.word	0x2000008c
 8004ac0:	20000094 	.word	0x20000094
			else if(CheckTrasmit){
 8004ac4:	4ba6      	ldr	r3, [pc, #664]	; (8004d60 <UART+0x850>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d046      	beq.n	8004b5a <UART+0x64a>
				TxData[2] = 0b10011001;
 8004acc:	4ba5      	ldr	r3, [pc, #660]	; (8004d64 <UART+0x854>)
 8004ace:	2299      	movs	r2, #153	; 0x99
 8004ad0:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 8004ad2:	4ba4      	ldr	r3, [pc, #656]	; (8004d64 <UART+0x854>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 8004ad8:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <UART+0x858>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fb fcdf 	bl	80004a0 <__aeabi_f2d>
 8004ae2:	a39b      	add	r3, pc, #620	; (adr r3, 8004d50 <UART+0x840>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fe5c 	bl	80007a4 <__aeabi_ddiv>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	ec43 2b17 	vmov	d7, r2, r3
 8004af4:	eeb0 0a47 	vmov.f32	s0, s14
 8004af8:	eef0 0a67 	vmov.f32	s1, s15
 8004afc:	f007 fc38 	bl	800c370 <ceil>
 8004b00:	ec53 2b10 	vmov	r2, r3, d0
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7fb ffd2 	bl	8000ab0 <__aeabi_d2uiz>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <UART+0x85c>)
 8004b12:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 8004b14:	4b95      	ldr	r3, [pc, #596]	; (8004d6c <UART+0x85c>)
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	4b92      	ldr	r3, [pc, #584]	; (8004d64 <UART+0x854>)
 8004b1a:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004b1c:	4b91      	ldr	r3, [pc, #580]	; (8004d64 <UART+0x854>)
 8004b1e:	789a      	ldrb	r2, [r3, #2]
 8004b20:	4b90      	ldr	r3, [pc, #576]	; (8004d64 <UART+0x854>)
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	4413      	add	r3, r2
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	4b8e      	ldr	r3, [pc, #568]	; (8004d64 <UART+0x854>)
 8004b2a:	791b      	ldrb	r3, [r3, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	4b8b      	ldr	r3, [pc, #556]	; (8004d64 <UART+0x854>)
 8004b36:	715a      	strb	r2, [r3, #5]
				HAL_UART_DMAStop(&huart2); //
 8004b38:	488d      	ldr	r0, [pc, #564]	; (8004d70 <UART+0x860>)
 8004b3a:	f006 f89f 	bl	800ac7c <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004b3e:	220c      	movs	r2, #12
 8004b40:	498c      	ldr	r1, [pc, #560]	; (8004d74 <UART+0x864>)
 8004b42:	488b      	ldr	r0, [pc, #556]	; (8004d70 <UART+0x860>)
 8004b44:	f006 f86a 	bl	800ac1c <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004b48:	2206      	movs	r2, #6
 8004b4a:	4986      	ldr	r1, [pc, #536]	; (8004d64 <UART+0x854>)
 8004b4c:	4888      	ldr	r0, [pc, #544]	; (8004d70 <UART+0x860>)
 8004b4e:	f005 ffe7 	bl	800ab20 <HAL_UART_Transmit_DMA>
				CheckTrasmit=0;
 8004b52:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <UART+0x850>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
		break;
 8004b58:	e226      	b.n	8004fa8 <UART+0xa98>
				RxData[0] = 0;
 8004b5a:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <UART+0x864>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 8004b60:	4b84      	ldr	r3, [pc, #528]	; (8004d74 <UART+0x864>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 8004b66:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <UART+0x850>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
		break;
 8004b6c:	e21c      	b.n	8004fa8 <UART+0xa98>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 8004b6e:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <UART+0x864>)
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b65      	cmp	r3, #101	; 0x65
 8004b74:	f040 821a 	bne.w	8004fac <UART+0xa9c>
			//Request Angular Position
		if(Finish){
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <UART+0x868>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03f      	beq.n	8004c00 <UART+0x6f0>

			if(CheckTrasmit){
 8004b80:	4b77      	ldr	r3, [pc, #476]	; (8004d60 <UART+0x850>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02e      	beq.n	8004be6 <UART+0x6d6>
				if(Arm_State == Setzero || Arm_State == Home){
 8004b88:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <UART+0x86c>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d003      	beq.n	8004b98 <UART+0x688>
 8004b90:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <UART+0x86c>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <UART+0x694>
					TxData[4] = 0;
 8004b98:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <UART+0x854>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	711a      	strb	r2, [r3, #4]
					TxData[3] =0;
 8004b9e:	4b71      	ldr	r3, [pc, #452]	; (8004d64 <UART+0x854>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	70da      	strb	r2, [r3, #3]
				}
				TxData2[4]=TxData[2];
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <UART+0x854>)
 8004ba6:	789a      	ldrb	r2, [r3, #2]
 8004ba8:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <UART+0x870>)
 8004baa:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004bac:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <UART+0x854>)
 8004bae:	78da      	ldrb	r2, [r3, #3]
 8004bb0:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <UART+0x870>)
 8004bb2:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004bb4:	4b6b      	ldr	r3, [pc, #428]	; (8004d64 <UART+0x854>)
 8004bb6:	791a      	ldrb	r2, [r3, #4]
 8004bb8:	4b71      	ldr	r3, [pc, #452]	; (8004d80 <UART+0x870>)
 8004bba:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <UART+0x854>)
 8004bbe:	795a      	ldrb	r2, [r3, #5]
 8004bc0:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <UART+0x870>)
 8004bc2:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004bc4:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <UART+0x850>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004bca:	4869      	ldr	r0, [pc, #420]	; (8004d70 <UART+0x860>)
 8004bcc:	f006 f856 	bl	800ac7c <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004bd0:	220c      	movs	r2, #12
 8004bd2:	4968      	ldr	r1, [pc, #416]	; (8004d74 <UART+0x864>)
 8004bd4:	4866      	ldr	r0, [pc, #408]	; (8004d70 <UART+0x860>)
 8004bd6:	f006 f821 	bl	800ac1c <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004bda:	2208      	movs	r2, #8
 8004bdc:	4968      	ldr	r1, [pc, #416]	; (8004d80 <UART+0x870>)
 8004bde:	4864      	ldr	r0, [pc, #400]	; (8004d70 <UART+0x860>)
 8004be0:	f005 ff9e 	bl	800ab20 <HAL_UART_Transmit_DMA>
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8004be4:	e1e2      	b.n	8004fac <UART+0xa9c>
				RxData[0] = 0;
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <UART+0x864>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <UART+0x864>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <UART+0x850>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
				Finish =0;
 8004bf8:	4b5f      	ldr	r3, [pc, #380]	; (8004d78 <UART+0x868>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
		break;
 8004bfe:	e1d5      	b.n	8004fac <UART+0xa9c>
		else if(CheckTrasmit){
 8004c00:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <UART+0x850>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05d      	beq.n	8004cc4 <UART+0x7b4>
			TxData[2] = 0b10011010;
 8004c08:	4b56      	ldr	r3, [pc, #344]	; (8004d64 <UART+0x854>)
 8004c0a:	229a      	movs	r2, #154	; 0x9a
 8004c0c:	709a      	strb	r2, [r3, #2]
			if(Arm_State == Setzero){
 8004c0e:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <UART+0x86c>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d106      	bne.n	8004c24 <UART+0x714>
				TxData[3] = 0;
 8004c16:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <UART+0x854>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0;
 8004c1c:	4b51      	ldr	r3, [pc, #324]	; (8004d64 <UART+0x854>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	711a      	strb	r2, [r3, #4]
 8004c22:	e030      	b.n	8004c86 <UART+0x776>
				TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 8004c24:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <UART+0x858>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fb fc39 	bl	80004a0 <__aeabi_f2d>
 8004c2e:	a34a      	add	r3, pc, #296	; (adr r3, 8004d58 <UART+0x848>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb fc8c 	bl	8000550 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	4b4f      	ldr	r3, [pc, #316]	; (8004d84 <UART+0x874>)
 8004c46:	f7fb fdad 	bl	80007a4 <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fb ff2d 	bl	8000ab0 <__aeabi_d2uiz>
 8004c56:	4603      	mov	r3, r0
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <UART+0x854>)
 8004c5c:	70da      	strb	r2, [r3, #3]
				TxData[4] = (uint8_t)(theta_now*10000.0)%256;
 8004c5e:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <UART+0x858>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fc1c 	bl	80004a0 <__aeabi_f2d>
 8004c68:	a33b      	add	r3, pc, #236	; (adr r3, 8004d58 <UART+0x848>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb fc6f 	bl	8000550 <__aeabi_dmul>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f7fb ff19 	bl	8000ab0 <__aeabi_d2uiz>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <UART+0x854>)
 8004c84:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <UART+0x854>)
 8004c88:	789a      	ldrb	r2, [r3, #2]
 8004c8a:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <UART+0x854>)
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	4413      	add	r3, r2
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <UART+0x854>)
 8004c94:	791b      	ldrb	r3, [r3, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <UART+0x854>)
 8004ca0:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2);
 8004ca2:	4833      	ldr	r0, [pc, #204]	; (8004d70 <UART+0x860>)
 8004ca4:	f005 ffea 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004ca8:	220c      	movs	r2, #12
 8004caa:	4932      	ldr	r1, [pc, #200]	; (8004d74 <UART+0x864>)
 8004cac:	4830      	ldr	r0, [pc, #192]	; (8004d70 <UART+0x860>)
 8004cae:	f005 ffb5 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004cb2:	2206      	movs	r2, #6
 8004cb4:	492b      	ldr	r1, [pc, #172]	; (8004d64 <UART+0x854>)
 8004cb6:	482e      	ldr	r0, [pc, #184]	; (8004d70 <UART+0x860>)
 8004cb8:	f005 ff32 	bl	800ab20 <HAL_UART_Transmit_DMA>
			CheckTrasmit=0;
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <UART+0x850>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
		break;
 8004cc2:	e173      	b.n	8004fac <UART+0xa9c>
			RxData[0] = 0;
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <UART+0x864>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <UART+0x864>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	705a      	strb	r2, [r3, #1]
			CheckTrasmit=1;
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <UART+0x850>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
		break;
 8004cd6:	e169      	b.n	8004fac <UART+0xa9c>
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 8004cd8:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <UART+0x864>)
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b64      	cmp	r3, #100	; 0x64
 8004cde:	f040 8167 	bne.w	8004fb0 <UART+0xaa0>
			//Request Angular Velocity
		if(Finish){
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <UART+0x868>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d04e      	beq.n	8004d88 <UART+0x878>
			if(CheckTrasmit){
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <UART+0x850>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <UART+0x824>
				TxData2[4]=TxData[2];
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <UART+0x854>)
 8004cf4:	789a      	ldrb	r2, [r3, #2]
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <UART+0x870>)
 8004cf8:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <UART+0x854>)
 8004cfc:	78da      	ldrb	r2, [r3, #3]
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <UART+0x870>)
 8004d00:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <UART+0x854>)
 8004d04:	791a      	ldrb	r2, [r3, #4]
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <UART+0x870>)
 8004d08:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <UART+0x854>)
 8004d0c:	795a      	ldrb	r2, [r3, #5]
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <UART+0x870>)
 8004d10:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <UART+0x850>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2); //
 8004d18:	4815      	ldr	r0, [pc, #84]	; (8004d70 <UART+0x860>)
 8004d1a:	f005 ffaf 	bl	800ac7c <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004d1e:	220c      	movs	r2, #12
 8004d20:	4914      	ldr	r1, [pc, #80]	; (8004d74 <UART+0x864>)
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <UART+0x860>)
 8004d24:	f005 ff7a 	bl	800ac1c <HAL_UART_Receive_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004d28:	2208      	movs	r2, #8
 8004d2a:	4915      	ldr	r1, [pc, #84]	; (8004d80 <UART+0x870>)
 8004d2c:	4810      	ldr	r0, [pc, #64]	; (8004d70 <UART+0x860>)
 8004d2e:	f005 fef7 	bl	800ab20 <HAL_UART_Transmit_DMA>
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8004d32:	e13d      	b.n	8004fb0 <UART+0xaa0>
				RxData[0] = 0;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <UART+0x864>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
				RxData[1]=0;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <UART+0x864>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	705a      	strb	r2, [r3, #1]
				CheckTrasmit=1;
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <UART+0x850>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
				Finish =0;
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <UART+0x868>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
		break;
 8004d4c:	e130      	b.n	8004fb0 <UART+0xaa0>
 8004d4e:	bf00      	nop
 8004d50:	cac08312 	.word	0xcac08312
 8004d54:	3fb645a1 	.word	0x3fb645a1
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	40c38800 	.word	0x40c38800
 8004d60:	200000cf 	.word	0x200000cf
 8004d64:	2000008c 	.word	0x2000008c
 8004d68:	200003f4 	.word	0x200003f4
 8004d6c:	200000c8 	.word	0x200000c8
 8004d70:	200002d8 	.word	0x200002d8
 8004d74:	20000684 	.word	0x20000684
 8004d78:	200006a1 	.word	0x200006a1
 8004d7c:	200000cb 	.word	0x200000cb
 8004d80:	20000094 	.word	0x20000094
 8004d84:	40700000 	.word	0x40700000
		else if (CheckTrasmit){
 8004d88:	4b95      	ldr	r3, [pc, #596]	; (8004fe0 <UART+0xad0>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d056      	beq.n	8004e3e <UART+0x92e>
			TxData[2] = 0b10011011;
 8004d90:	4b94      	ldr	r3, [pc, #592]	; (8004fe4 <UART+0xad4>)
 8004d92:	229b      	movs	r2, #155	; 0x9b
 8004d94:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8004d96:	4b93      	ldr	r3, [pc, #588]	; (8004fe4 <UART+0xad4>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((positive(omega_kalman)*60/(2*M_PI))*255/10);
 8004d9c:	4b92      	ldr	r3, [pc, #584]	; (8004fe8 <UART+0xad8>)
 8004d9e:	edd3 7a00 	vldr	s15, [r3]
 8004da2:	eeb0 0a67 	vmov.f32	s0, s15
 8004da6:	f7ff fb7b 	bl	80044a0 <positive>
 8004daa:	eef0 7a40 	vmov.f32	s15, s0
 8004dae:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004fec <UART+0xadc>
 8004db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004db6:	ee17 0a90 	vmov	r0, s15
 8004dba:	f7fb fb71 	bl	80004a0 <__aeabi_f2d>
 8004dbe:	a384      	add	r3, pc, #528	; (adr r3, 8004fd0 <UART+0xac0>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fcee 	bl	80007a4 <__aeabi_ddiv>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	a381      	add	r3, pc, #516	; (adr r3, 8004fd8 <UART+0xac8>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fbbb 	bl	8000550 <__aeabi_dmul>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	4b82      	ldr	r3, [pc, #520]	; (8004ff0 <UART+0xae0>)
 8004de8:	f7fb fcdc 	bl	80007a4 <__aeabi_ddiv>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7fb fe5c 	bl	8000ab0 <__aeabi_d2uiz>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <UART+0xad4>)
 8004dfe:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004e00:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <UART+0xad4>)
 8004e02:	789a      	ldrb	r2, [r3, #2]
 8004e04:	4b77      	ldr	r3, [pc, #476]	; (8004fe4 <UART+0xad4>)
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	4413      	add	r3, r2
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <UART+0xad4>)
 8004e0e:	791b      	ldrb	r3, [r3, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b72      	ldr	r3, [pc, #456]	; (8004fe4 <UART+0xad4>)
 8004e1a:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2); //
 8004e1c:	4875      	ldr	r0, [pc, #468]	; (8004ff4 <UART+0xae4>)
 8004e1e:	f005 ff2d 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004e22:	220c      	movs	r2, #12
 8004e24:	4974      	ldr	r1, [pc, #464]	; (8004ff8 <UART+0xae8>)
 8004e26:	4873      	ldr	r0, [pc, #460]	; (8004ff4 <UART+0xae4>)
 8004e28:	f005 fef8 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004e2c:	2206      	movs	r2, #6
 8004e2e:	496d      	ldr	r1, [pc, #436]	; (8004fe4 <UART+0xad4>)
 8004e30:	4870      	ldr	r0, [pc, #448]	; (8004ff4 <UART+0xae4>)
 8004e32:	f005 fe75 	bl	800ab20 <HAL_UART_Transmit_DMA>
			CheckTrasmit=0;
 8004e36:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <UART+0xad0>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
		break;
 8004e3c:	e0b8      	b.n	8004fb0 <UART+0xaa0>
			RxData[0] = 0;
 8004e3e:	4b6e      	ldr	r3, [pc, #440]	; (8004ff8 <UART+0xae8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004e44:	4b6c      	ldr	r3, [pc, #432]	; (8004ff8 <UART+0xae8>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	705a      	strb	r2, [r3, #1]
			CheckTrasmit=1;
 8004e4a:	4b65      	ldr	r3, [pc, #404]	; (8004fe0 <UART+0xad0>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
		break;
 8004e50:	e0ae      	b.n	8004fb0 <UART+0xaa0>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 8004e52:	4b69      	ldr	r3, [pc, #420]	; (8004ff8 <UART+0xae8>)
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b63      	cmp	r3, #99	; 0x63
 8004e58:	f040 80ac 	bne.w	8004fb4 <UART+0xaa4>
			//enable gripple
			Enable_EndEffector = 1;
 8004e5c:	4b67      	ldr	r3, [pc, #412]	; (8004ffc <UART+0xaec>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004e62:	4864      	ldr	r0, [pc, #400]	; (8004ff4 <UART+0xae4>)
 8004e64:	f005 ff0a 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004e68:	220c      	movs	r2, #12
 8004e6a:	4963      	ldr	r1, [pc, #396]	; (8004ff8 <UART+0xae8>)
 8004e6c:	4861      	ldr	r0, [pc, #388]	; (8004ff4 <UART+0xae4>)
 8004e6e:	f005 fed5 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004e72:	2202      	movs	r2, #2
 8004e74:	4962      	ldr	r1, [pc, #392]	; (8005000 <UART+0xaf0>)
 8004e76:	485f      	ldr	r0, [pc, #380]	; (8004ff4 <UART+0xae4>)
 8004e78:	f005 fe52 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004e7c:	4b5e      	ldr	r3, [pc, #376]	; (8004ff8 <UART+0xae8>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004e82:	4b5d      	ldr	r3, [pc, #372]	; (8004ff8 <UART+0xae8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8004e88:	e094      	b.n	8004fb4 <UART+0xaa4>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 8004e8a:	4b5b      	ldr	r3, [pc, #364]	; (8004ff8 <UART+0xae8>)
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b62      	cmp	r3, #98	; 0x62
 8004e90:	f040 8092 	bne.w	8004fb8 <UART+0xaa8>
			//disable gripple
			Enable_EndEffector = 0;
 8004e94:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <UART+0xaec>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004e9a:	4856      	ldr	r0, [pc, #344]	; (8004ff4 <UART+0xae4>)
 8004e9c:	f005 feee 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4955      	ldr	r1, [pc, #340]	; (8004ff8 <UART+0xae8>)
 8004ea4:	4853      	ldr	r0, [pc, #332]	; (8004ff4 <UART+0xae4>)
 8004ea6:	f005 feb9 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4954      	ldr	r1, [pc, #336]	; (8005000 <UART+0xaf0>)
 8004eae:	4851      	ldr	r0, [pc, #324]	; (8004ff4 <UART+0xae4>)
 8004eb0:	f005 fe36 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004eb4:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <UART+0xae8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004eba:	4b4f      	ldr	r3, [pc, #316]	; (8004ff8 <UART+0xae8>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	705a      	strb	r2, [r3, #1]
//			HAL_UART_DMAStop(&huart2);
//			HAL_UART_Receive_DMA(&huart2, RxData, 12);
//			RxData[0]=0;
//			RxData[1]=0;
//		}
		break;
 8004ec0:	e07a      	b.n	8004fb8 <UART+0xaa8>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004ec2:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <UART+0xae8>)
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b61      	cmp	r3, #97	; 0x61
 8004ec8:	d119      	bne.n	8004efe <UART+0x9ee>
			//Set HOME
			Arm_State = Home;
 8004eca:	4b4e      	ldr	r3, [pc, #312]	; (8005004 <UART+0xaf4>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
			SetHome_Flag=1;
 8004ed0:	4b4d      	ldr	r3, [pc, #308]	; (8005008 <UART+0xaf8>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004ed6:	4847      	ldr	r0, [pc, #284]	; (8004ff4 <UART+0xae4>)
 8004ed8:	f005 fed0 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004edc:	220c      	movs	r2, #12
 8004ede:	4946      	ldr	r1, [pc, #280]	; (8004ff8 <UART+0xae8>)
 8004ee0:	4844      	ldr	r0, [pc, #272]	; (8004ff4 <UART+0xae4>)
 8004ee2:	f005 fe9b 	bl	800ac1c <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	4945      	ldr	r1, [pc, #276]	; (8005000 <UART+0xaf0>)
 8004eea:	4842      	ldr	r0, [pc, #264]	; (8004ff4 <UART+0xae4>)
 8004eec:	f005 fe18 	bl	800ab20 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004ef0:	4b41      	ldr	r3, [pc, #260]	; (8004ff8 <UART+0xae8>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004ef6:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <UART+0xae8>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	705a      	strb	r2, [r3, #1]
			HAL_UART_DMAStop(&huart2);
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
			RxData[0]=0;
			RxData[1]=0;
		}
		break;
 8004efc:	e05e      	b.n	8004fbc <UART+0xaac>
		else if (RxData[1] != 0){
 8004efe:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <UART+0xae8>)
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d05a      	beq.n	8004fbc <UART+0xaac>
			HAL_UART_DMAStop(&huart2);
 8004f06:	483b      	ldr	r0, [pc, #236]	; (8004ff4 <UART+0xae4>)
 8004f08:	f005 feb8 	bl	800ac7c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004f0c:	220c      	movs	r2, #12
 8004f0e:	493a      	ldr	r1, [pc, #232]	; (8004ff8 <UART+0xae8>)
 8004f10:	4838      	ldr	r0, [pc, #224]	; (8004ff4 <UART+0xae4>)
 8004f12:	f005 fe83 	bl	800ac1c <HAL_UART_Receive_DMA>
			RxData[0]=0;
 8004f16:	4b38      	ldr	r3, [pc, #224]	; (8004ff8 <UART+0xae8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
			RxData[1]=0;
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <UART+0xae8>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	705a      	strb	r2, [r3, #1]
		break;
 8004f22:	e04b      	b.n	8004fbc <UART+0xaac>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004f24:	220c      	movs	r2, #12
 8004f26:	4934      	ldr	r1, [pc, #208]	; (8004ff8 <UART+0xae8>)
 8004f28:	4832      	ldr	r0, [pc, #200]	; (8004ff4 <UART+0xae4>)
 8004f2a:	f005 fe77 	bl	800ac1c <HAL_UART_Receive_DMA>
		break;
 8004f2e:	e048      	b.n	8004fc2 <UART+0xab2>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 8004f30:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <UART+0xae8>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b58      	cmp	r3, #88	; 0x58
 8004f36:	d143      	bne.n	8004fc0 <UART+0xab0>
 8004f38:	4b2f      	ldr	r3, [pc, #188]	; (8004ff8 <UART+0xae8>)
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b75      	cmp	r3, #117	; 0x75
 8004f3e:	d13f      	bne.n	8004fc0 <UART+0xab0>
			if(RxData[2] !=0 && RxData[3] != 0){
 8004f40:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <UART+0xae8>)
 8004f42:	789b      	ldrb	r3, [r3, #2]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d03b      	beq.n	8004fc0 <UART+0xab0>
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <UART+0xae8>)
 8004f4a:	78db      	ldrb	r3, [r3, #3]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d037      	beq.n	8004fc0 <UART+0xab0>
				RxData[0]=RxData[2];
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <UART+0xae8>)
 8004f52:	789a      	ldrb	r2, [r3, #2]
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <UART+0xae8>)
 8004f56:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <UART+0xae8>)
 8004f5a:	78da      	ldrb	r2, [r3, #3]
 8004f5c:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <UART+0xae8>)
 8004f5e:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <UART+0xae8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <UART+0xae8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <UART+0xae8>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <UART+0xae8>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8004f78:	e022      	b.n	8004fc0 <UART+0xab0>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <UART+0xae8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 8004f80:	481c      	ldr	r0, [pc, #112]	; (8004ff4 <UART+0xae4>)
 8004f82:	f005 fe7b 	bl	800ac7c <HAL_UART_DMAStop>
		break;
 8004f86:	e01c      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f88:	bf00      	nop
 8004f8a:	e01a      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f8c:	bf00      	nop
 8004f8e:	e018      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f90:	bf00      	nop
 8004f92:	e016      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f94:	bf00      	nop
 8004f96:	e014      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f98:	bf00      	nop
 8004f9a:	e012      	b.n	8004fc2 <UART+0xab2>
		break;
 8004f9c:	bf00      	nop
 8004f9e:	e010      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fa0:	bf00      	nop
 8004fa2:	e00e      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fa4:	bf00      	nop
 8004fa6:	e00c      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fa8:	bf00      	nop
 8004faa:	e00a      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fac:	bf00      	nop
 8004fae:	e008      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fb0:	bf00      	nop
 8004fb2:	e006      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fb4:	bf00      	nop
 8004fb6:	e004      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fb8:	bf00      	nop
 8004fba:	e002      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <UART+0xab2>
		break;
 8004fc0:	bf00      	nop
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w
 8004fd0:	54442d18 	.word	0x54442d18
 8004fd4:	401921fb 	.word	0x401921fb
 8004fd8:	00000000 	.word	0x00000000
 8004fdc:	406fe000 	.word	0x406fe000
 8004fe0:	200000cf 	.word	0x200000cf
 8004fe4:	2000008c 	.word	0x2000008c
 8004fe8:	20000408 	.word	0x20000408
 8004fec:	42700000 	.word	0x42700000
 8004ff0:	40240000 	.word	0x40240000
 8004ff4:	200002d8 	.word	0x200002d8
 8004ff8:	20000684 	.word	0x20000684
 8004ffc:	20000693 	.word	0x20000693
 8005000:	2000009c 	.word	0x2000009c
 8005004:	200000cb 	.word	0x200000cb
 8005008:	200003e8 	.word	0x200003e8

0800500c <OpenEndEffector>:

void OpenEndEffector() {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8005012:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <OpenEndEffector+0xf0>)
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	d119      	bne.n	8005052 <OpenEndEffector+0x46>
 800501e:	4b38      	ldr	r3, [pc, #224]	; (8005100 <OpenEndEffector+0xf4>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d115      	bne.n	8005052 <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8005026:	2364      	movs	r3, #100	; 0x64
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2301      	movs	r3, #1
 800502c:	4a35      	ldr	r2, [pc, #212]	; (8005104 <OpenEndEffector+0xf8>)
 800502e:	2146      	movs	r1, #70	; 0x46
 8005030:	4832      	ldr	r0, [pc, #200]	; (80050fc <OpenEndEffector+0xf0>)
 8005032:	f001 fd45 	bl	8006ac0 <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 8005036:	4b32      	ldr	r3, [pc, #200]	; (8005100 <OpenEndEffector+0xf4>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 800503c:	4b32      	ldr	r3, [pc, #200]	; (8005108 <OpenEndEffector+0xfc>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 8005042:	4b32      	ldr	r3, [pc, #200]	; (800510c <OpenEndEffector+0x100>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 8005048:	f000 fcbc 	bl	80059c4 <HAL_GetTick>
 800504c:	4603      	mov	r3, r0
 800504e:	4a30      	ldr	r2, [pc, #192]	; (8005110 <OpenEndEffector+0x104>)
 8005050:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 8005052:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <OpenEndEffector+0xfc>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d144      	bne.n	80050e4 <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 800505a:	f000 fcb3 	bl	80059c4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <OpenEndEffector+0x104>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2bfa      	cmp	r3, #250	; 0xfa
 8005068:	d906      	bls.n	8005078 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 800506a:	f000 fcab 	bl	80059c4 <HAL_GetTick>
 800506e:	4603      	mov	r3, r0
 8005070:	4a27      	ldr	r2, [pc, #156]	; (8005110 <OpenEndEffector+0x104>)
 8005072:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 8005074:	f000 f850 	bl	8005118 <CheckEndEffector>
		}

		switch(EndEffector_State)
 8005078:	4b24      	ldr	r3, [pc, #144]	; (800510c <OpenEndEffector+0x100>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d83a      	bhi.n	80050f6 <OpenEndEffector+0xea>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <OpenEndEffector+0x7c>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050cd 	.word	0x080050cd
 8005098:	080050dd 	.word	0x080050dd
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 800509c:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <OpenEndEffector+0x108>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d121      	bne.n	80050e8 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <OpenEndEffector+0x100>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80050aa:	e01d      	b.n	80050e8 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <OpenEndEffector+0x108>)
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	2b34      	cmp	r3, #52	; 0x34
 80050b2:	d11b      	bne.n	80050ec <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <OpenEndEffector+0x100>)
 80050b6:	2202      	movs	r2, #2
 80050b8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80050ba:	e017      	b.n	80050ec <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 80050bc:	4b15      	ldr	r3, [pc, #84]	; (8005114 <OpenEndEffector+0x108>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	2b56      	cmp	r3, #86	; 0x56
 80050c2:	d115      	bne.n	80050f0 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <OpenEndEffector+0x100>)
 80050c6:	2203      	movs	r2, #3
 80050c8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80050ca:	e011      	b.n	80050f0 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <OpenEndEffector+0x108>)
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	2b78      	cmp	r3, #120	; 0x78
 80050d2:	d10f      	bne.n	80050f4 <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 80050d4:	4b0d      	ldr	r3, [pc, #52]	; (800510c <OpenEndEffector+0x100>)
 80050d6:	2204      	movs	r2, #4
 80050d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80050da:	e00b      	b.n	80050f4 <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <OpenEndEffector+0xfc>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
			break;
 80050e2:	e008      	b.n	80050f6 <OpenEndEffector+0xea>
		}
	}
 80050e4:	bf00      	nop
 80050e6:	e006      	b.n	80050f6 <OpenEndEffector+0xea>
			break;
 80050e8:	bf00      	nop
 80050ea:	e004      	b.n	80050f6 <OpenEndEffector+0xea>
			break;
 80050ec:	bf00      	nop
 80050ee:	e002      	b.n	80050f6 <OpenEndEffector+0xea>
			break;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <OpenEndEffector+0xea>
			break;
 80050f4:	bf00      	nop
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000164 	.word	0x20000164
 8005100:	200006b4 	.word	0x200006b4
 8005104:	200000d0 	.word	0x200000d0
 8005108:	200006b5 	.word	0x200006b5
 800510c:	200000cc 	.word	0x200000cc
 8005110:	200006b8 	.word	0x200006b8
 8005114:	200006b6 	.word	0x200006b6

08005118 <CheckEndEffector>:

void CheckEndEffector()
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 800511e:	2301      	movs	r3, #1
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2301      	movs	r3, #1
 8005124:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <CheckEndEffector+0x38>)
 8005126:	2146      	movs	r1, #70	; 0x46
 8005128:	480a      	ldr	r0, [pc, #40]	; (8005154 <CheckEndEffector+0x3c>)
 800512a:	f001 fdc7 	bl	8006cbc <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <CheckEndEffector+0x3c>)
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b20      	cmp	r3, #32
 8005138:	d107      	bne.n	800514a <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 800513a:	2320      	movs	r3, #32
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2301      	movs	r3, #1
 8005140:	4a05      	ldr	r2, [pc, #20]	; (8005158 <CheckEndEffector+0x40>)
 8005142:	2146      	movs	r1, #70	; 0x46
 8005144:	4803      	ldr	r0, [pc, #12]	; (8005154 <CheckEndEffector+0x3c>)
 8005146:	f001 fe7f 	bl	8006e48 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 800514a:	bf00      	nop
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200000d1 	.word	0x200000d1
 8005154:	20000164 	.word	0x20000164
 8005158:	200006b6 	.word	0x200006b6
 800515c:	00000000 	.word	0x00000000

08005160 <TransferFunction>:

float TransferFunction(float u_tf){
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	ed87 0a01 	vstr	s0, [r7, #4]
	u_i[0] = u_tf;
 800516a:	4a47      	ldr	r2, [pc, #284]	; (8005288 <TransferFunction+0x128>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6013      	str	r3, [r2, #0]
	y_i[0] = 0.6524*y_i[1] + 157.5*u_i[1] - 306.8*u_i[2] + 151.9*u_i[3];
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <TransferFunction+0x12c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f993 	bl	80004a0 <__aeabi_f2d>
 800517a:	a33b      	add	r3, pc, #236	; (adr r3, 8005268 <TransferFunction+0x108>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f7fb f9e6 	bl	8000550 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <TransferFunction+0x128>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f985 	bl	80004a0 <__aeabi_f2d>
 8005196:	a336      	add	r3, pc, #216	; (adr r3, 8005270 <TransferFunction+0x110>)
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb f9d8 	bl	8000550 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb f81c 	bl	80001e4 <__adddf3>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	461d      	mov	r5, r3
 80051b4:	4b34      	ldr	r3, [pc, #208]	; (8005288 <TransferFunction+0x128>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb f971 	bl	80004a0 <__aeabi_f2d>
 80051be:	a32e      	add	r3, pc, #184	; (adr r3, 8005278 <TransferFunction+0x118>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb f9c4 	bl	8000550 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fb f806 	bl	80001e0 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <TransferFunction+0x128>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f95d 	bl	80004a0 <__aeabi_f2d>
 80051e6:	a326      	add	r3, pc, #152	; (adr r3, 8005280 <TransferFunction+0x120>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f9b0 	bl	8000550 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fa fff4 	bl	80001e4 <__adddf3>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	f7fb fc74 	bl	8000af0 <__aeabi_d2f>
 8005208:	4603      	mov	r3, r0
 800520a:	4a20      	ldr	r2, [pc, #128]	; (800528c <TransferFunction+0x12c>)
 800520c:	6013      	str	r3, [r2, #0]
	for(int i=2;i>=0;i--){
 800520e:	2302      	movs	r3, #2
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e018      	b.n	8005246 <TransferFunction+0xe6>
		u_i[i+1]=u_i[i];
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	491b      	ldr	r1, [pc, #108]	; (8005288 <TransferFunction+0x128>)
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	0092      	lsls	r2, r2, #2
 800521e:	440a      	add	r2, r1
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	4919      	ldr	r1, [pc, #100]	; (8005288 <TransferFunction+0x128>)
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	601a      	str	r2, [r3, #0]
		y_i[i+i]=y_i[i];
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4917      	ldr	r1, [pc, #92]	; (800528c <TransferFunction+0x12c>)
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	440a      	add	r2, r1
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4914      	ldr	r1, [pc, #80]	; (800528c <TransferFunction+0x12c>)
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	601a      	str	r2, [r3, #0]
	for(int i=2;i>=0;i--){
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dae3      	bge.n	8005214 <TransferFunction+0xb4>
	}
	return positive(y_i[0]);
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <TransferFunction+0x12c>)
 800524e:	edd3 7a00 	vldr	s15, [r3]
 8005252:	eeb0 0a67 	vmov.f32	s0, s15
 8005256:	f7ff f923 	bl	80044a0 <positive>
 800525a:	eef0 7a40 	vmov.f32	s15, s0
}
 800525e:	eeb0 0a67 	vmov.f32	s0, s15
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bdb0      	pop	{r4, r5, r7, pc}
 8005268:	f6fd21ff 	.word	0xf6fd21ff
 800526c:	3fe4e075 	.word	0x3fe4e075
 8005270:	00000000 	.word	0x00000000
 8005274:	4063b000 	.word	0x4063b000
 8005278:	cccccccd 	.word	0xcccccccd
 800527c:	40732ccc 	.word	0x40732ccc
 8005280:	cccccccd 	.word	0xcccccccd
 8005284:	4062fccc 	.word	0x4062fccc
 8005288:	200006c0 	.word	0x200006c0
 800528c:	200006d0 	.word	0x200006d0

08005290 <LowpassFilter>:

float LowpassFilter(float Vin){
 8005290:	b5b0      	push	{r4, r5, r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	ed87 0a01 	vstr	s0, [r7, #4]
	static float V_out[2] = {0,0};
	static float V_in[2] = {0,0};
	V_in[0]=Vin;
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <LowpassFilter+0x90>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6013      	str	r3, [r2, #0]
	V_out[0]=0.9993*V_out[1] + 0.0006664*V_in[1];
 80052a0:	4b20      	ldr	r3, [pc, #128]	; (8005324 <LowpassFilter+0x94>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f8fb 	bl	80004a0 <__aeabi_f2d>
 80052aa:	a319      	add	r3, pc, #100	; (adr r3, 8005310 <LowpassFilter+0x80>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fb f94e 	bl	8000550 <__aeabi_dmul>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <LowpassFilter+0x90>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb f8ed 	bl	80004a0 <__aeabi_f2d>
 80052c6:	a314      	add	r3, pc, #80	; (adr r3, 8005318 <LowpassFilter+0x88>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f940 	bl	8000550 <__aeabi_dmul>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4620      	mov	r0, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	f7fa ff84 	bl	80001e4 <__adddf3>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7fb fc04 	bl	8000af0 <__aeabi_d2f>
 80052e8:	4603      	mov	r3, r0
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <LowpassFilter+0x94>)
 80052ec:	6013      	str	r3, [r2, #0]
	V_out[1]=V_out[0];
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <LowpassFilter+0x94>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <LowpassFilter+0x94>)
 80052f4:	6053      	str	r3, [r2, #4]
	V_in[1] = V_in[0];
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <LowpassFilter+0x90>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <LowpassFilter+0x90>)
 80052fc:	6053      	str	r3, [r2, #4]
	return V_out[0];
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <LowpassFilter+0x94>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	ee07 3a90 	vmov	s15, r3
}
 8005306:	eeb0 0a67 	vmov.f32	s0, s15
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bdb0      	pop	{r4, r5, r7, pc}
 8005310:	fe5c91d1 	.word	0xfe5c91d1
 8005314:	3feffa43 	.word	0x3feffa43
 8005318:	1a5ffd97 	.word	0x1a5ffd97
 800531c:	3f45d62b 	.word	0x3f45d62b
 8005320:	20000704 	.word	0x20000704
 8005324:	2000070c 	.word	0x2000070c

08005328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800532c:	b672      	cpsid	i
}
 800532e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005330:	e7fe      	b.n	8005330 <Error_Handler+0x8>
	...

08005334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <HAL_MspInit+0x4c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <HAL_MspInit+0x4c>)
 8005344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005348:	6453      	str	r3, [r2, #68]	; 0x44
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_MspInit+0x4c>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_MspInit+0x4c>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <HAL_MspInit+0x4c>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6413      	str	r3, [r2, #64]	; 0x40
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_MspInit+0x4c>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005372:	2007      	movs	r0, #7
 8005374:	f000 fc26 	bl	8005bc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800

08005384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a21      	ldr	r2, [pc, #132]	; (8005428 <HAL_I2C_MspInit+0xa4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d13c      	bne.n	8005420 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80053c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053c8:	2312      	movs	r3, #18
 80053ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d0:	2303      	movs	r3, #3
 80053d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053d4:	2304      	movs	r3, #4
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d8:	f107 0314 	add.w	r3, r7, #20
 80053dc:	4619      	mov	r1, r3
 80053de:	4814      	ldr	r0, [pc, #80]	; (8005430 <HAL_I2C_MspInit+0xac>)
 80053e0:	f001 f842 	bl	8006468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f2:	6413      	str	r3, [r2, #64]	; 0x40
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <HAL_I2C_MspInit+0xa8>)
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005400:	2200      	movs	r2, #0
 8005402:	2100      	movs	r1, #0
 8005404:	201f      	movs	r0, #31
 8005406:	f000 fbe8 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800540a:	201f      	movs	r0, #31
 800540c:	f000 fc01 	bl	8005c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005410:	2200      	movs	r2, #0
 8005412:	2100      	movs	r1, #0
 8005414:	2020      	movs	r0, #32
 8005416:	f000 fbe0 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800541a:	2020      	movs	r0, #32
 800541c:	f000 fbf9 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005420:	bf00      	nop
 8005422:	3728      	adds	r7, #40	; 0x28
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40005400 	.word	0x40005400
 800542c:	40023800 	.word	0x40023800
 8005430:	40020400 	.word	0x40020400

08005434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2a      	ldr	r2, [pc, #168]	; (80054ec <HAL_TIM_Base_MspInit+0xb8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d116      	bne.n	8005474 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6453      	str	r3, [r2, #68]	; 0x44
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	201a      	movs	r0, #26
 8005468:	f000 fbb7 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800546c:	201a      	movs	r0, #26
 800546e:	f000 fbd0 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005472:	e036      	b.n	80054e2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <HAL_TIM_Base_MspInit+0xc0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d116      	bne.n	80054ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	201e      	movs	r0, #30
 80054a0:	f000 fb9b 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054a4:	201e      	movs	r0, #30
 80054a6:	f000 fbb4 	bl	8005c12 <HAL_NVIC_EnableIRQ>
}
 80054aa:	e01a      	b.n	80054e2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <HAL_TIM_Base_MspInit+0xc4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d115      	bne.n	80054e2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6453      	str	r3, [r2, #68]	; 0x44
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_TIM_Base_MspInit+0xbc>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80054d2:	2200      	movs	r2, #0
 80054d4:	2100      	movs	r1, #0
 80054d6:	201a      	movs	r0, #26
 80054d8:	f000 fb7f 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80054dc:	201a      	movs	r0, #26
 80054de:	f000 fb98 	bl	8005c12 <HAL_NVIC_EnableIRQ>
}
 80054e2:	bf00      	nop
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40014800 	.word	0x40014800

080054fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a19      	ldr	r2, [pc, #100]	; (8005580 <HAL_TIM_Encoder_MspInit+0x84>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d12b      	bne.n	8005576 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	4b18      	ldr	r3, [pc, #96]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6413      	str	r3, [r2, #64]	; 0x40
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	4a10      	ldr	r2, [pc, #64]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6313      	str	r3, [r2, #48]	; 0x30
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <HAL_TIM_Encoder_MspInit+0x88>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005556:	23c0      	movs	r3, #192	; 0xc0
 8005558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555a:	2302      	movs	r3, #2
 800555c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005562:	2300      	movs	r3, #0
 8005564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005566:	2302      	movs	r3, #2
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800556a:	f107 0314 	add.w	r3, r7, #20
 800556e:	4619      	mov	r1, r3
 8005570:	4805      	ldr	r0, [pc, #20]	; (8005588 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005572:	f000 ff79 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005576:	bf00      	nop
 8005578:	3728      	adds	r7, #40	; 0x28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40000400 	.word	0x40000400
 8005584:	40023800 	.word	0x40023800
 8005588:	40020000 	.word	0x40020000

0800558c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	f107 030c 	add.w	r3, r7, #12
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <HAL_TIM_MspPostInit+0x68>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d11e      	bne.n	80055ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <HAL_TIM_MspPostInit+0x6c>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <HAL_TIM_MspPostInit+0x6c>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6313      	str	r3, [r2, #48]	; 0x30
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_TIM_MspPostInit+0x6c>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 80055ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055dc:	2301      	movs	r3, #1
 80055de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	4619      	mov	r1, r3
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <HAL_TIM_MspPostInit+0x70>)
 80055e8:	f000 ff3e 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80055ec:	bf00      	nop
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40020000 	.word	0x40020000

08005600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4c      	ldr	r2, [pc, #304]	; (8005750 <HAL_UART_MspInit+0x150>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 8091 	bne.w	8005746 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <HAL_UART_MspInit+0x154>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	4a49      	ldr	r2, [pc, #292]	; (8005754 <HAL_UART_MspInit+0x154>)
 800562e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005632:	6413      	str	r3, [r2, #64]	; 0x40
 8005634:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_UART_MspInit+0x154>)
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	4b43      	ldr	r3, [pc, #268]	; (8005754 <HAL_UART_MspInit+0x154>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	4a42      	ldr	r2, [pc, #264]	; (8005754 <HAL_UART_MspInit+0x154>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6313      	str	r3, [r2, #48]	; 0x30
 8005650:	4b40      	ldr	r3, [pc, #256]	; (8005754 <HAL_UART_MspInit+0x154>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800565c:	230c      	movs	r3, #12
 800565e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005668:	2303      	movs	r3, #3
 800566a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800566c:	2307      	movs	r3, #7
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4619      	mov	r1, r3
 8005676:	4838      	ldr	r0, [pc, #224]	; (8005758 <HAL_UART_MspInit+0x158>)
 8005678:	f000 fef6 	bl	8006468 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800567c:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_UART_MspInit+0x15c>)
 800567e:	4a38      	ldr	r2, [pc, #224]	; (8005760 <HAL_UART_MspInit+0x160>)
 8005680:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005682:	4b36      	ldr	r3, [pc, #216]	; (800575c <HAL_UART_MspInit+0x15c>)
 8005684:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005688:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800568a:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_UART_MspInit+0x15c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005690:	4b32      	ldr	r3, [pc, #200]	; (800575c <HAL_UART_MspInit+0x15c>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005696:	4b31      	ldr	r3, [pc, #196]	; (800575c <HAL_UART_MspInit+0x15c>)
 8005698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800569c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800569e:	4b2f      	ldr	r3, [pc, #188]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056a4:	4b2d      	ldr	r3, [pc, #180]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80056aa:	4b2c      	ldr	r3, [pc, #176]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056b2:	4b2a      	ldr	r3, [pc, #168]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056b8:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80056be:	4827      	ldr	r0, [pc, #156]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056c0:	f000 fac2 	bl	8005c48 <HAL_DMA_Init>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80056ca:	f7ff fe2d 	bl	8005328 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a22      	ldr	r2, [pc, #136]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
 80056d4:	4a21      	ldr	r2, [pc, #132]	; (800575c <HAL_UART_MspInit+0x15c>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80056da:	4b22      	ldr	r3, [pc, #136]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <HAL_UART_MspInit+0x168>)
 80056de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056e8:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_UART_MspInit+0x164>)
 80056fe:	2200      	movs	r2, #0
 8005700:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005702:	4b18      	ldr	r3, [pc, #96]	; (8005764 <HAL_UART_MspInit+0x164>)
 8005704:	2200      	movs	r2, #0
 8005706:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <HAL_UART_MspInit+0x164>)
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <HAL_UART_MspInit+0x164>)
 8005710:	2200      	movs	r2, #0
 8005712:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <HAL_UART_MspInit+0x164>)
 8005716:	2200      	movs	r2, #0
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800571a:	4812      	ldr	r0, [pc, #72]	; (8005764 <HAL_UART_MspInit+0x164>)
 800571c:	f000 fa94 	bl	8005c48 <HAL_DMA_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005726:	f7ff fdff 	bl	8005328 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <HAL_UART_MspInit+0x164>)
 800572e:	635a      	str	r2, [r3, #52]	; 0x34
 8005730:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <HAL_UART_MspInit+0x164>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005736:	2200      	movs	r2, #0
 8005738:	2100      	movs	r1, #0
 800573a:	2026      	movs	r0, #38	; 0x26
 800573c:	f000 fa4d 	bl	8005bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005740:	2026      	movs	r0, #38	; 0x26
 8005742:	f000 fa66 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005746:	bf00      	nop
 8005748:	3728      	adds	r7, #40	; 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40004400 	.word	0x40004400
 8005754:	40023800 	.word	0x40023800
 8005758:	40020000 	.word	0x40020000
 800575c:	2000031c 	.word	0x2000031c
 8005760:	40026088 	.word	0x40026088
 8005764:	2000037c 	.word	0x2000037c
 8005768:	400260a0 	.word	0x400260a0

0800576c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005770:	e7fe      	b.n	8005770 <NMI_Handler+0x4>

08005772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005772:	b480      	push	{r7}
 8005774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005776:	e7fe      	b.n	8005776 <HardFault_Handler+0x4>

08005778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800577c:	e7fe      	b.n	800577c <MemManage_Handler+0x4>

0800577e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005782:	e7fe      	b.n	8005782 <BusFault_Handler+0x4>

08005784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005788:	e7fe      	b.n	8005788 <UsageFault_Handler+0x4>

0800578a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057a6:	b480      	push	{r7}
 80057a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057b8:	f000 f8f0 	bl	800599c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}

080057c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 80057c4:	2004      	movs	r0, #4
 80057c6:	f001 f81f 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}

080057ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80057d2:	2010      	movs	r0, #16
 80057d4:	f001 f818 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}

080057dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057e0:	4802      	ldr	r0, [pc, #8]	; (80057ec <DMA1_Stream5_IRQHandler+0x10>)
 80057e2:	f000 fbc9 	bl	8005f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	2000031c 	.word	0x2000031c

080057f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80057f4:	4802      	ldr	r0, [pc, #8]	; (8005800 <DMA1_Stream6_IRQHandler+0x10>)
 80057f6:	f000 fbbf 	bl	8005f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000037c 	.word	0x2000037c

08005804 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005808:	4803      	ldr	r0, [pc, #12]	; (8005818 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800580a:	f004 fae1 	bl	8009dd0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800580e:	4803      	ldr	r0, [pc, #12]	; (800581c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005810:	f004 fade 	bl	8009dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200001b8 	.word	0x200001b8
 800581c:	20000290 	.word	0x20000290

08005820 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005824:	4802      	ldr	r0, [pc, #8]	; (8005830 <TIM4_IRQHandler+0x10>)
 8005826:	f004 fad3 	bl	8009dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000248 	.word	0x20000248

08005834 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005838:	4802      	ldr	r0, [pc, #8]	; (8005844 <I2C1_EV_IRQHandler+0x10>)
 800583a:	f001 fc03 	bl	8007044 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000164 	.word	0x20000164

08005848 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800584c:	4802      	ldr	r0, [pc, #8]	; (8005858 <I2C1_ER_IRQHandler+0x10>)
 800584e:	f001 fd6a 	bl	8007326 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000164 	.word	0x20000164

0800585c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <USART2_IRQHandler+0x10>)
 8005862:	f005 fa8b 	bl	800ad7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200002d8 	.word	0x200002d8

08005870 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005874:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005878:	f000 ffc6 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}

08005880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <SystemInit+0x20>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <SystemInit+0x20>)
 800588c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <Reset_Handler>:
 80058a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058dc <LoopFillZerobss+0x12>
 80058a8:	480d      	ldr	r0, [pc, #52]	; (80058e0 <LoopFillZerobss+0x16>)
 80058aa:	490e      	ldr	r1, [pc, #56]	; (80058e4 <LoopFillZerobss+0x1a>)
 80058ac:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <LoopFillZerobss+0x1e>)
 80058ae:	2300      	movs	r3, #0
 80058b0:	e002      	b.n	80058b8 <LoopCopyDataInit>

080058b2 <CopyDataInit>:
 80058b2:	58d4      	ldr	r4, [r2, r3]
 80058b4:	50c4      	str	r4, [r0, r3]
 80058b6:	3304      	adds	r3, #4

080058b8 <LoopCopyDataInit>:
 80058b8:	18c4      	adds	r4, r0, r3
 80058ba:	428c      	cmp	r4, r1
 80058bc:	d3f9      	bcc.n	80058b2 <CopyDataInit>
 80058be:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <LoopFillZerobss+0x22>)
 80058c0:	4c0b      	ldr	r4, [pc, #44]	; (80058f0 <LoopFillZerobss+0x26>)
 80058c2:	2300      	movs	r3, #0
 80058c4:	e001      	b.n	80058ca <LoopFillZerobss>

080058c6 <FillZerobss>:
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	3204      	adds	r2, #4

080058ca <LoopFillZerobss>:
 80058ca:	42a2      	cmp	r2, r4
 80058cc:	d3fb      	bcc.n	80058c6 <FillZerobss>
 80058ce:	f7ff ffd7 	bl	8005880 <SystemInit>
 80058d2:	f006 fd21 	bl	800c318 <__libc_init_array>
 80058d6:	f7fb fadf 	bl	8000e98 <main>
 80058da:	4770      	bx	lr
 80058dc:	20020000 	.word	0x20020000
 80058e0:	20000000 	.word	0x20000000
 80058e4:	20000144 	.word	0x20000144
 80058e8:	0800d380 	.word	0x0800d380
 80058ec:	20000148 	.word	0x20000148
 80058f0:	20000718 	.word	0x20000718

080058f4 <ADC_IRQHandler>:
 80058f4:	e7fe      	b.n	80058f4 <ADC_IRQHandler>
	...

080058f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <HAL_Init+0x40>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0d      	ldr	r2, [pc, #52]	; (8005938 <HAL_Init+0x40>)
 8005902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_Init+0x40>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <HAL_Init+0x40>)
 800590e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_Init+0x40>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a07      	ldr	r2, [pc, #28]	; (8005938 <HAL_Init+0x40>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005920:	2003      	movs	r0, #3
 8005922:	f000 f94f 	bl	8005bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005926:	2000      	movs	r0, #0
 8005928:	f000 f808 	bl	800593c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800592c:	f7ff fd02 	bl	8005334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023c00 	.word	0x40023c00

0800593c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005944:	4b12      	ldr	r3, [pc, #72]	; (8005990 <HAL_InitTick+0x54>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_InitTick+0x58>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005952:	fbb3 f3f1 	udiv	r3, r3, r1
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f967 	bl	8005c2e <HAL_SYSTICK_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00e      	b.n	8005988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d80a      	bhi.n	8005986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005970:	2200      	movs	r2, #0
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	f000 f92f 	bl	8005bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800597c:	4a06      	ldr	r2, [pc, #24]	; (8005998 <HAL_InitTick+0x5c>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	200000d4 	.word	0x200000d4
 8005994:	200000dc 	.word	0x200000dc
 8005998:	200000d8 	.word	0x200000d8

0800599c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_IncTick+0x20>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_IncTick+0x24>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <HAL_IncTick+0x24>)
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	200000dc 	.word	0x200000dc
 80059c0:	20000714 	.word	0x20000714

080059c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return uwTick;
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <HAL_GetTick+0x14>)
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000714 	.word	0x20000714

080059dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059e4:	f7ff ffee 	bl	80059c4 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d005      	beq.n	8005a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_Delay+0x44>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a02:	bf00      	nop
 8005a04:	f7ff ffde 	bl	80059c4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d8f7      	bhi.n	8005a04 <HAL_Delay+0x28>
  {
  }
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	200000dc 	.word	0x200000dc

08005a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <__NVIC_SetPriorityGrouping+0x44>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a40:	4013      	ands	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a56:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <__NVIC_SetPriorityGrouping+0x44>)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	60d3      	str	r3, [r2, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <__NVIC_GetPriorityGrouping+0x18>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 0307 	and.w	r3, r3, #7
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	db0b      	blt.n	8005ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	f003 021f 	and.w	r2, r3, #31
 8005aa0:	4907      	ldr	r1, [pc, #28]	; (8005ac0 <__NVIC_EnableIRQ+0x38>)
 8005aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8005aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	e000e100 	.word	0xe000e100

08005ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db0a      	blt.n	8005aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	490c      	ldr	r1, [pc, #48]	; (8005b10 <__NVIC_SetPriority+0x4c>)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	0112      	lsls	r2, r2, #4
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005aec:	e00a      	b.n	8005b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4908      	ldr	r1, [pc, #32]	; (8005b14 <__NVIC_SetPriority+0x50>)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	3b04      	subs	r3, #4
 8005afc:	0112      	lsls	r2, r2, #4
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	440b      	add	r3, r1
 8005b02:	761a      	strb	r2, [r3, #24]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	e000e100 	.word	0xe000e100
 8005b14:	e000ed00 	.word	0xe000ed00

08005b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b089      	sub	sp, #36	; 0x24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f1c3 0307 	rsb	r3, r3, #7
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	bf28      	it	cs
 8005b36:	2304      	movcs	r3, #4
 8005b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	2b06      	cmp	r3, #6
 8005b40:	d902      	bls.n	8005b48 <NVIC_EncodePriority+0x30>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3b03      	subs	r3, #3
 8005b46:	e000      	b.n	8005b4a <NVIC_EncodePriority+0x32>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43da      	mvns	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b60:	f04f 31ff 	mov.w	r1, #4294967295
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	43d9      	mvns	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b70:	4313      	orrs	r3, r2
         );
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3724      	adds	r7, #36	; 0x24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b90:	d301      	bcc.n	8005b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b92:	2301      	movs	r3, #1
 8005b94:	e00f      	b.n	8005bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b96:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <SysTick_Config+0x40>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b9e:	210f      	movs	r1, #15
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	f7ff ff8e 	bl	8005ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <SysTick_Config+0x40>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <SysTick_Config+0x40>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010

08005bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff29 	bl	8005a24 <__NVIC_SetPriorityGrouping>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	4603      	mov	r3, r0
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bec:	f7ff ff3e 	bl	8005a6c <__NVIC_GetPriorityGrouping>
 8005bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7ff ff8e 	bl	8005b18 <NVIC_EncodePriority>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff5d 	bl	8005ac4 <__NVIC_SetPriority>
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff31 	bl	8005a88 <__NVIC_EnableIRQ>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ffa2 	bl	8005b80 <SysTick_Config>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7ff feb6 	bl	80059c4 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e099      	b.n	8005d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c84:	e00f      	b.n	8005ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c86:	f7ff fe9d 	bl	80059c4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d908      	bls.n	8005ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e078      	b.n	8005d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e8      	bne.n	8005c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_DMA_Init+0x158>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d107      	bne.n	8005d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d117      	bne.n	8005d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb0f 	bl	8006370 <DMA_CheckFifoParam>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2240      	movs	r2, #64	; 0x40
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d66:	2301      	movs	r3, #1
 8005d68:	e016      	b.n	8005d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fac6 	bl	8006304 <DMA_CalcBaseAndBitshift>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	223f      	movs	r2, #63	; 0x3f
 8005d82:	409a      	lsls	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	f010803f 	.word	0xf010803f

08005da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_DMA_Start_IT+0x26>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e040      	b.n	8005e4c <HAL_DMA_Start_IT+0xa8>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d12f      	bne.n	8005e3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fa58 	bl	80062a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	223f      	movs	r2, #63	; 0x3f
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0216 	orr.w	r2, r2, #22
 8005e12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0208 	orr.w	r2, r2, #8
 8005e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e005      	b.n	8005e4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
 8005e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e62:	f7ff fdaf 	bl	80059c4 <HAL_GetTick>
 8005e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d008      	beq.n	8005e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2280      	movs	r2, #128	; 0x80
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e052      	b.n	8005f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0216 	bic.w	r2, r2, #22
 8005e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_DMA_Abort+0x62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0208 	bic.w	r2, r2, #8
 8005ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ed6:	e013      	b.n	8005f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ed8:	f7ff fd74 	bl	80059c4 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d90c      	bls.n	8005f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e015      	b.n	8005f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e4      	bne.n	8005ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	223f      	movs	r2, #63	; 0x3f
 8005f14:	409a      	lsls	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d004      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00c      	b.n	8005f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2205      	movs	r2, #5
 8005f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f84:	4b8e      	ldr	r3, [pc, #568]	; (80061c0 <HAL_DMA_IRQHandler+0x248>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a8e      	ldr	r2, [pc, #568]	; (80061c4 <HAL_DMA_IRQHandler+0x24c>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0a9b      	lsrs	r3, r3, #10
 8005f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01a      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0204 	bic.w	r2, r2, #4
 8005fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006006:	2201      	movs	r2, #1
 8006008:	409a      	lsls	r2, r3
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f043 0202 	orr.w	r2, r3, #2
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601e:	2204      	movs	r2, #4
 8006020:	409a      	lsls	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603c:	2204      	movs	r2, #4
 800603e:	409a      	lsls	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	f043 0204 	orr.w	r2, r3, #4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2210      	movs	r2, #16
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d043      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d03c      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	2210      	movs	r2, #16
 8006074:	409a      	lsls	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d018      	beq.n	80060ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d024      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
 80060a6:	e01f      	b.n	80060e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01b      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
 80060b8:	e016      	b.n	80060e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0208 	bic.w	r2, r2, #8
 80060d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	2220      	movs	r2, #32
 80060ee:	409a      	lsls	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 808f 	beq.w	8006218 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8087 	beq.w	8006218 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610e:	2220      	movs	r2, #32
 8006110:	409a      	lsls	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b05      	cmp	r3, #5
 8006120:	d136      	bne.n	8006190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0216 	bic.w	r2, r2, #22
 8006130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_DMA_IRQHandler+0x1da>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0208 	bic.w	r2, r2, #8
 8006160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006166:	223f      	movs	r2, #63	; 0x3f
 8006168:	409a      	lsls	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	2b00      	cmp	r3, #0
 8006184:	d07e      	beq.n	8006284 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
        }
        return;
 800618e:	e079      	b.n	8006284 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01d      	beq.n	80061da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d031      	beq.n	8006218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	e02c      	b.n	8006218 <HAL_DMA_IRQHandler+0x2a0>
 80061be:	bf00      	nop
 80061c0:	200000d4 	.word	0x200000d4
 80061c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d023      	beq.n	8006218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e01e      	b.n	8006218 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10f      	bne.n	8006208 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0210 	bic.w	r2, r2, #16
 80061f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	2b00      	cmp	r3, #0
 800621e:	d032      	beq.n	8006286 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d022      	beq.n	8006272 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2205      	movs	r2, #5
 8006230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d307      	bcc.n	8006260 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f2      	bne.n	8006244 <HAL_DMA_IRQHandler+0x2cc>
 800625e:	e000      	b.n	8006262 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006260:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
 8006282:	e000      	b.n	8006286 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006284:	bf00      	nop
    }
  }
}
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800629a:	b2db      	uxtb	r3, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d108      	bne.n	80062e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062e6:	e007      	b.n	80062f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	3b10      	subs	r3, #16
 8006314:	4a14      	ldr	r2, [pc, #80]	; (8006368 <DMA_CalcBaseAndBitshift+0x64>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	091b      	lsrs	r3, r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <DMA_CalcBaseAndBitshift+0x68>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d909      	bls.n	8006346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
 8006344:	e007      	b.n	8006356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	aaaaaaab 	.word	0xaaaaaaab
 800636c:	0800d338 	.word	0x0800d338

08006370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11f      	bne.n	80063ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d856      	bhi.n	800643e <DMA_CheckFifoParam+0xce>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <DMA_CheckFifoParam+0x28>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063bb 	.word	0x080063bb
 80063a0:	080063a9 	.word	0x080063a9
 80063a4:	0800643f 	.word	0x0800643f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d046      	beq.n	8006442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b8:	e043      	b.n	8006442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063c2:	d140      	bne.n	8006446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c8:	e03d      	b.n	8006446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d2:	d121      	bne.n	8006418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d837      	bhi.n	800644a <DMA_CheckFifoParam+0xda>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <DMA_CheckFifoParam+0x70>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	080063f7 	.word	0x080063f7
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006409 	.word	0x08006409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	e030      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d025      	beq.n	800644e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006406:	e022      	b.n	800644e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006410:	d11f      	bne.n	8006452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006416:	e01c      	b.n	8006452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d903      	bls.n	8006426 <DMA_CheckFifoParam+0xb6>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d003      	beq.n	800642c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006424:	e018      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
      break;
 800642a:	e015      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e00b      	b.n	8006456 <DMA_CheckFifoParam+0xe6>
      break;
 800643e:	bf00      	nop
 8006440:	e00a      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e008      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006446:	bf00      	nop
 8006448:	e006      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;   
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006456:	bf00      	nop
    }
  } 
  
  return status; 
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	e159      	b.n	8006738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006484:	2201      	movs	r2, #1
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4013      	ands	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	429a      	cmp	r2, r3
 800649e:	f040 8148 	bne.w	8006732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d005      	beq.n	80064ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d130      	bne.n	800651c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	2203      	movs	r2, #3
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f0:	2201      	movs	r2, #1
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 0201 	and.w	r2, r3, #1
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d017      	beq.n	8006558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	2203      	movs	r2, #3
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4313      	orrs	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d123      	bne.n	80065ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	08da      	lsrs	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3208      	adds	r2, #8
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	220f      	movs	r2, #15
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	08da      	lsrs	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3208      	adds	r2, #8
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	2203      	movs	r2, #3
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0203 	and.w	r2, r3, #3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a2 	beq.w	8006732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	4b57      	ldr	r3, [pc, #348]	; (8006750 <HAL_GPIO_Init+0x2e8>)
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	4a56      	ldr	r2, [pc, #344]	; (8006750 <HAL_GPIO_Init+0x2e8>)
 80065f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065fc:	6453      	str	r3, [r2, #68]	; 0x44
 80065fe:	4b54      	ldr	r3, [pc, #336]	; (8006750 <HAL_GPIO_Init+0x2e8>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800660a:	4a52      	ldr	r2, [pc, #328]	; (8006754 <HAL_GPIO_Init+0x2ec>)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	3302      	adds	r3, #2
 8006612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	220f      	movs	r2, #15
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a49      	ldr	r2, [pc, #292]	; (8006758 <HAL_GPIO_Init+0x2f0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d019      	beq.n	800666a <HAL_GPIO_Init+0x202>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a48      	ldr	r2, [pc, #288]	; (800675c <HAL_GPIO_Init+0x2f4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_GPIO_Init+0x1fe>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a47      	ldr	r2, [pc, #284]	; (8006760 <HAL_GPIO_Init+0x2f8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00d      	beq.n	8006662 <HAL_GPIO_Init+0x1fa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a46      	ldr	r2, [pc, #280]	; (8006764 <HAL_GPIO_Init+0x2fc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d007      	beq.n	800665e <HAL_GPIO_Init+0x1f6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a45      	ldr	r2, [pc, #276]	; (8006768 <HAL_GPIO_Init+0x300>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d101      	bne.n	800665a <HAL_GPIO_Init+0x1f2>
 8006656:	2304      	movs	r3, #4
 8006658:	e008      	b.n	800666c <HAL_GPIO_Init+0x204>
 800665a:	2307      	movs	r3, #7
 800665c:	e006      	b.n	800666c <HAL_GPIO_Init+0x204>
 800665e:	2303      	movs	r3, #3
 8006660:	e004      	b.n	800666c <HAL_GPIO_Init+0x204>
 8006662:	2302      	movs	r3, #2
 8006664:	e002      	b.n	800666c <HAL_GPIO_Init+0x204>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_GPIO_Init+0x204>
 800666a:	2300      	movs	r3, #0
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	f002 0203 	and.w	r2, r2, #3
 8006672:	0092      	lsls	r2, r2, #2
 8006674:	4093      	lsls	r3, r2
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4313      	orrs	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800667c:	4935      	ldr	r1, [pc, #212]	; (8006754 <HAL_GPIO_Init+0x2ec>)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	3302      	adds	r3, #2
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800668a:	4b38      	ldr	r3, [pc, #224]	; (800676c <HAL_GPIO_Init+0x304>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	43db      	mvns	r3, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4013      	ands	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066ae:	4a2f      	ldr	r2, [pc, #188]	; (800676c <HAL_GPIO_Init+0x304>)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <HAL_GPIO_Init+0x304>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066d8:	4a24      	ldr	r2, [pc, #144]	; (800676c <HAL_GPIO_Init+0x304>)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066de:	4b23      	ldr	r3, [pc, #140]	; (800676c <HAL_GPIO_Init+0x304>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	43db      	mvns	r3, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	4013      	ands	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <HAL_GPIO_Init+0x304>)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006708:	4b18      	ldr	r3, [pc, #96]	; (800676c <HAL_GPIO_Init+0x304>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	43db      	mvns	r3, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	4013      	ands	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800672c:	4a0f      	ldr	r2, [pc, #60]	; (800676c <HAL_GPIO_Init+0x304>)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	f67f aea2 	bls.w	8006484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	3724      	adds	r7, #36	; 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	40013800 	.word	0x40013800
 8006758:	40020000 	.word	0x40020000
 800675c:	40020400 	.word	0x40020400
 8006760:	40020800 	.word	0x40020800
 8006764:	40020c00 	.word	0x40020c00
 8006768:	40021000 	.word	0x40021000
 800676c:	40013c00 	.word	0x40013c00

08006770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	e001      	b.n	8006792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
 80067ac:	4613      	mov	r3, r2
 80067ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b0:	787b      	ldrb	r3, [r7, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067bc:	e003      	b.n	80067c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067be:	887b      	ldrh	r3, [r7, #2]
 80067c0:	041a      	lsls	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	619a      	str	r2, [r3, #24]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4013      	ands	r3, r2
 80067ea:	041a      	lsls	r2, r3, #16
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	43d9      	mvns	r1, r3
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	400b      	ands	r3, r1
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fb f8be 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40013c00 	.word	0x40013c00

08006838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e12b      	b.n	8006aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fe fd90 	bl	8005384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800688a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800689a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800689c:	f002 ff26 	bl	80096ec <HAL_RCC_GetPCLK1Freq>
 80068a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a81      	ldr	r2, [pc, #516]	; (8006aac <HAL_I2C_Init+0x274>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d807      	bhi.n	80068bc <HAL_I2C_Init+0x84>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a80      	ldr	r2, [pc, #512]	; (8006ab0 <HAL_I2C_Init+0x278>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bf94      	ite	ls
 80068b4:	2301      	movls	r3, #1
 80068b6:	2300      	movhi	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e006      	b.n	80068ca <HAL_I2C_Init+0x92>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a7d      	ldr	r2, [pc, #500]	; (8006ab4 <HAL_I2C_Init+0x27c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0e7      	b.n	8006aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a78      	ldr	r2, [pc, #480]	; (8006ab8 <HAL_I2C_Init+0x280>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	0c9b      	lsrs	r3, r3, #18
 80068dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a6a      	ldr	r2, [pc, #424]	; (8006aac <HAL_I2C_Init+0x274>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d802      	bhi.n	800690c <HAL_I2C_Init+0xd4>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3301      	adds	r3, #1
 800690a:	e009      	b.n	8006920 <HAL_I2C_Init+0xe8>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4a69      	ldr	r2, [pc, #420]	; (8006abc <HAL_I2C_Init+0x284>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	3301      	adds	r3, #1
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	430b      	orrs	r3, r1
 8006926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	495c      	ldr	r1, [pc, #368]	; (8006aac <HAL_I2C_Init+0x274>)
 800693c:	428b      	cmp	r3, r1
 800693e:	d819      	bhi.n	8006974 <HAL_I2C_Init+0x13c>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1e59      	subs	r1, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fbb1 f3f3 	udiv	r3, r1, r3
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006954:	400b      	ands	r3, r1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_I2C_Init+0x138>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1e59      	subs	r1, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	fbb1 f3f3 	udiv	r3, r1, r3
 8006968:	3301      	adds	r3, #1
 800696a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800696e:	e051      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 8006970:	2304      	movs	r3, #4
 8006972:	e04f      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d111      	bne.n	80069a0 <HAL_I2C_Init+0x168>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1e58      	subs	r0, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	440b      	add	r3, r1
 800698a:	fbb0 f3f3 	udiv	r3, r0, r3
 800698e:	3301      	adds	r3, #1
 8006990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e012      	b.n	80069c6 <HAL_I2C_Init+0x18e>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1e58      	subs	r0, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	0099      	lsls	r1, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Init+0x196>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e022      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10e      	bne.n	80069f4 <HAL_I2C_Init+0x1bc>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1e58      	subs	r0, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	440b      	add	r3, r1
 80069e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e8:	3301      	adds	r3, #1
 80069ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	e00f      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1e58      	subs	r0, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	0099      	lsls	r1, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	6809      	ldr	r1, [r1, #0]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6911      	ldr	r1, [r2, #16]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68d2      	ldr	r2, [r2, #12]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	000186a0 	.word	0x000186a0
 8006ab0:	001e847f 	.word	0x001e847f
 8006ab4:	003d08ff 	.word	0x003d08ff
 8006ab8:	431bde83 	.word	0x431bde83
 8006abc:	10624dd3 	.word	0x10624dd3

08006ac0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	461a      	mov	r2, r3
 8006acc:	460b      	mov	r3, r1
 8006ace:	817b      	strh	r3, [r7, #10]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ad4:	f7fe ff76 	bl	80059c4 <HAL_GetTick>
 8006ad8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	f040 80e0 	bne.w	8006ca8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2319      	movs	r3, #25
 8006aee:	2201      	movs	r2, #1
 8006af0:	4970      	ldr	r1, [pc, #448]	; (8006cb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f001 ffb6 	bl	8008a64 <I2C_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006afe:	2302      	movs	r3, #2
 8006b00:	e0d3      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_I2C_Master_Transmit+0x50>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0cc      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d007      	beq.n	8006b36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2221      	movs	r2, #33	; 0x21
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2210      	movs	r2, #16
 8006b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	893a      	ldrh	r2, [r7, #8]
 8006b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4a50      	ldr	r2, [pc, #320]	; (8006cb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b78:	8979      	ldrh	r1, [r7, #10]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f001 fe46 	bl	8008810 <I2C_MasterRequestWrite>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e08d      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006ba4:	e066      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6a39      	ldr	r1, [r7, #32]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f002 f830 	bl	8008c10 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d107      	bne.n	8006bce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e06b      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d11b      	bne.n	8006c48 <HAL_I2C_Master_Transmit+0x188>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d017      	beq.n	8006c48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	3b01      	subs	r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	6a39      	ldr	r1, [r7, #32]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f002 f820 	bl	8008c92 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d107      	bne.n	8006c70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e01a      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d194      	bne.n	8006ba6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	00100002 	.word	0x00100002
 8006cb8:	ffff0000 	.word	0xffff0000

08006cbc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	607a      	str	r2, [r7, #4]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	460b      	mov	r3, r1
 8006cca:	817b      	strh	r3, [r7, #10]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	f040 80a6 	bne.w	8006e32 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf4:	d005      	beq.n	8006d02 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d002      	beq.n	8006d02 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d130      	bne.n	8006d64 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d02:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	08db      	lsrs	r3, r3, #3
 8006d08:	4a4e      	ldr	r2, [pc, #312]	; (8006e44 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	0a1a      	lsrs	r2, r3, #8
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009a      	lsls	r2, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d116      	bne.n	8006d56 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f043 0220 	orr.w	r2, r3, #32
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e06e      	b.n	8006e34 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d0db      	beq.n	8006d1c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e060      	b.n	8006e34 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d007      	beq.n	8006d98 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2221      	movs	r2, #33	; 0x21
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2210      	movs	r2, #16
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	893a      	ldrh	r2, [r7, #8]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006dda:	897a      	ldrh	r2, [r7, #10]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b11      	cmp	r3, #17
 8006dea:	d10c      	bne.n	8006e06 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006df2:	d003      	beq.n	8006dfc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dfa:	d101      	bne.n	8006e00 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e14:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e2c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	200000d4 	.word	0x200000d4
 8006e44:	14f8b589 	.word	0x14f8b589

08006e48 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	; 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	461a      	mov	r2, r3
 8006e54:	460b      	mov	r3, r1
 8006e56:	817b      	strh	r3, [r7, #10]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e64:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006e68:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	f040 80da 	bne.w	800702c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e86:	d005      	beq.n	8006e94 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d002      	beq.n	8006e94 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d130      	bne.n	8006ef6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e94:	4b69      	ldr	r3, [pc, #420]	; (800703c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	4a69      	ldr	r2, [pc, #420]	; (8007040 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	0a1a      	lsrs	r2, r3, #8
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009a      	lsls	r2, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d116      	bne.n	8006ee8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	f043 0220 	orr.w	r2, r3, #32
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0a2      	b.n	800702e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d0db      	beq.n	8006eae <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e094      	b.n	800702e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d007      	beq.n	8006f2a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f38:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2222      	movs	r2, #34	; 0x22
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2210      	movs	r2, #16
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	893a      	ldrh	r2, [r7, #8]
 8006f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006f6c:	897a      	ldrh	r2, [r7, #10]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d126      	bne.n	8006fd0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d002      	beq.n	8006f8e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d120      	bne.n	8006fd0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b12      	cmp	r3, #18
 8006f92:	d114      	bne.n	8006fbe <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa2:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fba:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006fbc:	e010      	b.n	8006fe0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fcc:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006fce:	e007      	b.n	8006fe0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fde:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b12      	cmp	r3, #18
 8006fe4:	d10c      	bne.n	8007000 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fec:	d003      	beq.n	8006ff6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ff4:	d101      	bne.n	8006ffa <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d107      	bne.n	8007010 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800700e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	430a      	orrs	r2, r1
 8007026:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	e000      	b.n	800702e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800702c:	2302      	movs	r3, #2
  }
}
 800702e:	4618      	mov	r0, r3
 8007030:	3724      	adds	r7, #36	; 0x24
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200000d4 	.word	0x200000d4
 8007040:	14f8b589 	.word	0x14f8b589

08007044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b10      	cmp	r3, #16
 8007072:	d003      	beq.n	800707c <HAL_I2C_EV_IRQHandler+0x38>
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	f040 80c1 	bne.w	80071fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10d      	bne.n	80070b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800709c:	d003      	beq.n	80070a6 <HAL_I2C_EV_IRQHandler+0x62>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80070a4:	d101      	bne.n	80070aa <HAL_I2C_EV_IRQHandler+0x66>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <HAL_I2C_EV_IRQHandler+0x68>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f000 8132 	beq.w	8007316 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00c      	beq.n	80070d6 <HAL_I2C_EV_IRQHandler+0x92>
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	0a5b      	lsrs	r3, r3, #9
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fe84 	bl	8008dd6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fd83 	bl	8007bda <I2C_Master_SB>
 80070d4:	e092      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fdf9 	bl	8007ce6 <I2C_Master_ADD10>
 80070f4:	e082      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_I2C_EV_IRQHandler+0xd2>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	0a5b      	lsrs	r3, r3, #9
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe13 	bl	8007d3a <I2C_Master_ADDR>
 8007114:	e072      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	089b      	lsrs	r3, r3, #2
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d03b      	beq.n	800719a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007130:	f000 80f3 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	09db      	lsrs	r3, r3, #7
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00f      	beq.n	8007160 <HAL_I2C_EV_IRQHandler+0x11c>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	0a9b      	lsrs	r3, r3, #10
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <HAL_I2C_EV_IRQHandler+0x11c>
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	089b      	lsrs	r3, r3, #2
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9f3 	bl	8007544 <I2C_MasterTransmit_TXE>
 800715e:	e04d      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	089b      	lsrs	r3, r3, #2
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80d6 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	0a5b      	lsrs	r3, r3, #9
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80cf 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b21      	cmp	r3, #33	; 0x21
 8007180:	d103      	bne.n	800718a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa7a 	bl	800767c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007188:	e0c7      	b.n	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	f040 80c4 	bne.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fae8 	bl	8007768 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007198:	e0bf      	b.n	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a8:	f000 80b7 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	099b      	lsrs	r3, r3, #6
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00f      	beq.n	80071d8 <HAL_I2C_EV_IRQHandler+0x194>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	0a9b      	lsrs	r3, r3, #10
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_I2C_EV_IRQHandler+0x194>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	089b      	lsrs	r3, r3, #2
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb5d 	bl	8007890 <I2C_MasterReceive_RXNE>
 80071d6:	e011      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 809a 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	0a5b      	lsrs	r3, r3, #9
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8093 	beq.w	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc06 	bl	8007a06 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071fa:	e08e      	b.n	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
 80071fc:	e08d      	b.n	800731a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	e007      	b.n	8007220 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x20e>
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	0a5b      	lsrs	r3, r3, #9
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007248:	69b9      	ldr	r1, [r7, #24]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 ffc4 	bl	80081d8 <I2C_Slave_ADDR>
 8007250:	e066      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_I2C_EV_IRQHandler+0x22e>
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	0a5b      	lsrs	r3, r3, #9
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fffe 	bl	800826c <I2C_Slave_STOPF>
 8007270:	e056      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b21      	cmp	r3, #33	; 0x21
 8007276:	d002      	beq.n	800727e <HAL_I2C_EV_IRQHandler+0x23a>
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b29      	cmp	r3, #41	; 0x29
 800727c:	d125      	bne.n	80072ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	09db      	lsrs	r3, r3, #7
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00f      	beq.n	80072aa <HAL_I2C_EV_IRQHandler+0x266>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	0a9b      	lsrs	r3, r3, #10
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_I2C_EV_IRQHandler+0x266>
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	089b      	lsrs	r3, r3, #2
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 feda 	bl	800805c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072a8:	e039      	b.n	800731e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	089b      	lsrs	r3, r3, #2
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d033      	beq.n	800731e <HAL_I2C_EV_IRQHandler+0x2da>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	0a5b      	lsrs	r3, r3, #9
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02d      	beq.n	800731e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 ff07 	bl	80080d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072c8:	e029      	b.n	800731e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	099b      	lsrs	r3, r3, #6
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	0a9b      	lsrs	r3, r3, #10
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 ff12 	bl	8008118 <I2C_SlaveReceive_RXNE>
 80072f4:	e014      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00e      	beq.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	0a5b      	lsrs	r3, r3, #9
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d008      	beq.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ff40 	bl	8008194 <I2C_SlaveReceive_BTF>
 8007314:	e004      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800731e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b08a      	sub	sp, #40	; 0x28
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007348:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <HAL_I2C_ER_IRQHandler+0x4e>
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007372:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	0a5b      	lsrs	r3, r3, #9
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00e      	beq.n	800739e <HAL_I2C_ER_IRQHandler+0x78>
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	f043 0302 	orr.w	r3, r3, #2
 8007392:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800739c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	0a9b      	lsrs	r3, r3, #10
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d03f      	beq.n	800742a <HAL_I2C_ER_IRQHandler+0x104>
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d039      	beq.n	800742a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80073b6:	7efb      	ldrb	r3, [r7, #27]
 80073b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80073d0:	7ebb      	ldrb	r3, [r7, #26]
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d112      	bne.n	80073fc <HAL_I2C_ER_IRQHandler+0xd6>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10f      	bne.n	80073fc <HAL_I2C_ER_IRQHandler+0xd6>
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2b21      	cmp	r3, #33	; 0x21
 80073e0:	d008      	beq.n	80073f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80073e2:	7cfb      	ldrb	r3, [r7, #19]
 80073e4:	2b29      	cmp	r3, #41	; 0x29
 80073e6:	d005      	beq.n	80073f4 <HAL_I2C_ER_IRQHandler+0xce>
 80073e8:	7cfb      	ldrb	r3, [r7, #19]
 80073ea:	2b28      	cmp	r3, #40	; 0x28
 80073ec:	d106      	bne.n	80073fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b21      	cmp	r3, #33	; 0x21
 80073f2:	d103      	bne.n	80073fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f869 	bl	80084cc <I2C_Slave_AF>
 80073fa:	e016      	b.n	800742a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007404:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	f043 0304 	orr.w	r3, r3, #4
 800740c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800740e:	7efb      	ldrb	r3, [r7, #27]
 8007410:	2b10      	cmp	r3, #16
 8007412:	d002      	beq.n	800741a <HAL_I2C_ER_IRQHandler+0xf4>
 8007414:	7efb      	ldrb	r3, [r7, #27]
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d107      	bne.n	800742a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007428:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	0adb      	lsrs	r3, r3, #11
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00e      	beq.n	8007454 <HAL_I2C_ER_IRQHandler+0x12e>
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	0a1b      	lsrs	r3, r3, #8
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d008      	beq.n	8007454 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	f043 0308 	orr.w	r3, r3, #8
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007452:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f8a0 	bl	80085ac <I2C_ITError>
  }
}
 800746c:	bf00      	nop
 800746e:	3728      	adds	r7, #40	; 0x28
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
 80074d0:	4613      	mov	r3, r2
 80074d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007552:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800755a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d150      	bne.n	800760c <I2C_MasterTransmit_TXE+0xc8>
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b21      	cmp	r3, #33	; 0x21
 800756e:	d14d      	bne.n	800760c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b08      	cmp	r3, #8
 8007574:	d01d      	beq.n	80075b2 <I2C_MasterTransmit_TXE+0x6e>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b20      	cmp	r3, #32
 800757a:	d01a      	beq.n	80075b2 <I2C_MasterTransmit_TXE+0x6e>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007582:	d016      	beq.n	80075b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007592:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2211      	movs	r2, #17
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ff62 	bl	8007474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075b0:	e060      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d107      	bne.n	80075fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff ff7d 	bl	80074f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075fa:	e03b      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ff35 	bl	8007474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800760a:	e033      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b21      	cmp	r3, #33	; 0x21
 8007610:	d005      	beq.n	800761e <I2C_MasterTransmit_TXE+0xda>
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d12d      	bne.n	8007674 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b22      	cmp	r3, #34	; 0x22
 800761c:	d12a      	bne.n	8007674 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d108      	bne.n	800763a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007638:	e01c      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d103      	bne.n	800764e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f88e 	bl	8007768 <I2C_MemoryTransmit_TXE_BTF>
}
 800764c:	e012      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007672:	e7ff      	b.n	8007674 <I2C_MasterTransmit_TXE+0x130>
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b21      	cmp	r3, #33	; 0x21
 8007694:	d164      	bne.n	8007760 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80076c4:	e04c      	b.n	8007760 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d01d      	beq.n	8007708 <I2C_MasterTransmit_BTF+0x8c>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d01a      	beq.n	8007708 <I2C_MasterTransmit_BTF+0x8c>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076d8:	d016      	beq.n	8007708 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2211      	movs	r2, #17
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff feb7 	bl	8007474 <HAL_I2C_MasterTxCpltCallback>
}
 8007706:	e02b      	b.n	8007760 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007716:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007726:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d107      	bne.n	8007752 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fed2 	bl	80074f4 <HAL_I2C_MemTxCpltCallback>
}
 8007750:	e006      	b.n	8007760 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fe8a 	bl	8007474 <HAL_I2C_MasterTxCpltCallback>
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11d      	bne.n	80077bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10b      	bne.n	80077a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778c:	b2da      	uxtb	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	1c9a      	adds	r2, r3, #2
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800779e:	e073      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	121b      	asrs	r3, r3, #8
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077ba:	e065      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d10b      	bne.n	80077dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077da:	e055      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d151      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b22      	cmp	r3, #34	; 0x22
 80077e8:	d10d      	bne.n	8007806 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007804:	e040      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d015      	beq.n	800783c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b21      	cmp	r3, #33	; 0x21
 8007814:	d112      	bne.n	800783c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800783a:	e025      	b.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d120      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b21      	cmp	r3, #33	; 0x21
 800784a:	d11d      	bne.n	8007888 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800785a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800786a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fe36 	bl	80074f4 <HAL_I2C_MemTxCpltCallback>
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b22      	cmp	r3, #34	; 0x22
 80078a2:	f040 80ac 	bne.w	80079fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d921      	bls.n	80078f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	f040 808c 	bne.w	80079fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80078f6:	e082      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d075      	beq.n	80079ec <I2C_MasterReceive_RXNE+0x15c>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d002      	beq.n	800790c <I2C_MasterReceive_RXNE+0x7c>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d16f      	bne.n	80079ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fa01 	bl	8008d14 <I2C_WaitOnSTOPRequestThroughIT>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d142      	bne.n	800799e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007926:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d10a      	bne.n	8007988 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fdc1 	bl	8007508 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007986:	e03a      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2212      	movs	r2, #18
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fd76 	bl	8007488 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800799c:	e02f      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fd99 	bl	800751c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079ea:	e008      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fa:	605a      	str	r2, [r3, #4]
}
 80079fc:	e7ff      	b.n	80079fe <I2C_MasterReceive_RXNE+0x16e>
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d11b      	bne.n	8007a56 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a54:	e0bd      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d129      	bne.n	8007ab4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d00a      	beq.n	8007a8c <I2C_MasterReceive_BTF+0x86>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d007      	beq.n	8007a8c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007ab2:	e08e      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d176      	bne.n	8007bac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d002      	beq.n	8007aca <I2C_MasterReceive_BTF+0xc4>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d108      	bne.n	8007adc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e019      	b.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d002      	beq.n	8007ae8 <I2C_MasterReceive_BTF+0xe2>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d108      	bne.n	8007afa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e00a      	b.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d007      	beq.n	8007b10 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d10a      	bne.n	8007b96 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fcba 	bl	8007508 <HAL_I2C_MemRxCpltCallback>
}
 8007b94:	e01d      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2212      	movs	r2, #18
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fc6f 	bl	8007488 <HAL_I2C_MasterRxCpltCallback>
}
 8007baa:	e012      	b.n	8007bd2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d117      	bne.n	8007c1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c08:	e067      	b.n	8007cda <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	611a      	str	r2, [r3, #16]
}
 8007c1c:	e05d      	b.n	8007cda <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c26:	d133      	bne.n	8007c90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b21      	cmp	r3, #33	; 0x21
 8007c32:	d109      	bne.n	8007c48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c44:	611a      	str	r2, [r3, #16]
 8007c46:	e008      	b.n	8007c5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <I2C_Master_SB+0x92>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d108      	bne.n	8007c7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d032      	beq.n	8007cda <I2C_Master_SB+0x100>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02d      	beq.n	8007cda <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c8c:	605a      	str	r2, [r3, #4]
}
 8007c8e:	e024      	b.n	8007cda <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10e      	bne.n	8007cb6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	11db      	asrs	r3, r3, #7
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f063 030f 	orn	r3, r3, #15
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	611a      	str	r2, [r3, #16]
}
 8007cb4:	e011      	b.n	8007cda <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10d      	bne.n	8007cda <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	11db      	asrs	r3, r3, #7
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0306 	and.w	r3, r3, #6
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f063 030e 	orn	r3, r3, #14
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	611a      	str	r2, [r3, #16]
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <I2C_Master_ADD10+0x26>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d108      	bne.n	8007d1e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <I2C_Master_ADD10+0x48>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d2c:	605a      	str	r2, [r3, #4]
  }
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b091      	sub	sp, #68	; 0x44
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b22      	cmp	r3, #34	; 0x22
 8007d62:	f040 8169 	bne.w	8008038 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10f      	bne.n	8007d8e <I2C_Master_ADDR+0x54>
 8007d6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d10b      	bne.n	8007d8e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d76:	2300      	movs	r3, #0
 8007d78:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	633b      	str	r3, [r7, #48]	; 0x30
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	e160      	b.n	8008050 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11d      	bne.n	8007dd2 <I2C_Master_ADDR+0x98>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d9e:	d118      	bne.n	8007dd2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007da0:	2300      	movs	r3, #0
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	651a      	str	r2, [r3, #80]	; 0x50
 8007dd0:	e13e      	b.n	8008050 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d113      	bne.n	8007e04 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e115      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	f040 808a 	bne.w	8007f24 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e16:	d137      	bne.n	8007e88 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e26:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e36:	d113      	bne.n	8007e60 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e46:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	e0e7      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e60:	2300      	movs	r3, #0
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	623b      	str	r3, [r7, #32]
 8007e74:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	e0d3      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d02e      	beq.n	8007eec <I2C_Master_ADDR+0x1b2>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d02b      	beq.n	8007eec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	2b12      	cmp	r3, #18
 8007e98:	d102      	bne.n	8007ea0 <I2C_Master_ADDR+0x166>
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d125      	bne.n	8007eec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d00e      	beq.n	8007ec4 <I2C_Master_ADDR+0x18a>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d00b      	beq.n	8007ec4 <I2C_Master_ADDR+0x18a>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b10      	cmp	r3, #16
 8007eb0:	d008      	beq.n	8007ec4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e007      	b.n	8007ed4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ed2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	e0a1      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efc:	2300      	movs	r3, #0
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e085      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d14d      	bne.n	8007fca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d016      	beq.n	8007f62 <I2C_Master_ADDR+0x228>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d013      	beq.n	8007f62 <I2C_Master_ADDR+0x228>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	d010      	beq.n	8007f62 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e007      	b.n	8007f72 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f70:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f80:	d117      	bne.n	8007fb2 <I2C_Master_ADDR+0x278>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f88:	d00b      	beq.n	8007fa2 <I2C_Master_ADDR+0x268>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d008      	beq.n	8007fa2 <I2C_Master_ADDR+0x268>
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d005      	beq.n	8007fa2 <I2C_Master_ADDR+0x268>
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d002      	beq.n	8007fa2 <I2C_Master_ADDR+0x268>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d107      	bne.n	8007fb2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fb0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	e032      	b.n	8008030 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fd8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe8:	d117      	bne.n	800801a <I2C_Master_ADDR+0x2e0>
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ff0:	d00b      	beq.n	800800a <I2C_Master_ADDR+0x2d0>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d008      	beq.n	800800a <I2C_Master_ADDR+0x2d0>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d005      	beq.n	800800a <I2C_Master_ADDR+0x2d0>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	2b10      	cmp	r3, #16
 8008002:	d002      	beq.n	800800a <I2C_Master_ADDR+0x2d0>
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	2b20      	cmp	r3, #32
 8008008:	d107      	bne.n	800801a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008018:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	613b      	str	r3, [r7, #16]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008036:	e00b      	b.n	8008050 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
}
 800804e:	e7ff      	b.n	8008050 <I2C_Master_ADDR+0x316>
 8008050:	bf00      	nop
 8008052:	3744      	adds	r7, #68	; 0x44
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02b      	beq.n	80080ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	781a      	ldrb	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d114      	bne.n	80080ce <I2C_SlaveTransmit_TXE+0x72>
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b29      	cmp	r3, #41	; 0x29
 80080a8:	d111      	bne.n	80080ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2221      	movs	r2, #33	; 0x21
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2228      	movs	r2, #40	; 0x28
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff f9e7 	bl	800749c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d011      	beq.n	800810c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008126:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d02c      	beq.n	800818c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d114      	bne.n	800818c <I2C_SlaveReceive_RXNE+0x74>
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b2a      	cmp	r3, #42	; 0x2a
 8008166:	d111      	bne.n	800818c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008176:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2222      	movs	r2, #34	; 0x22
 800817c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2228      	movs	r2, #40	; 0x28
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff f992 	bl	80074b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d012      	beq.n	80081cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081f2:	2b28      	cmp	r3, #40	; 0x28
 80081f4:	d127      	bne.n	8008246 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008204:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	09db      	lsrs	r3, r3, #7
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d103      	bne.n	800822a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	81bb      	strh	r3, [r7, #12]
 8008228:	e002      	b.n	8008230 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008238:	89ba      	ldrh	r2, [r7, #12]
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff f940 	bl	80074c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008244:	e00e      	b.n	8008264 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008246:	2300      	movs	r3, #0
 8008248:	60bb      	str	r3, [r7, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800828a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800828c:	2300      	movs	r3, #0
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	60bb      	str	r3, [r7, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c8:	d172      	bne.n	80083b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	2b22      	cmp	r3, #34	; 0x22
 80082ce:	d002      	beq.n	80082d6 <I2C_Slave_STOPF+0x6a>
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b2a      	cmp	r3, #42	; 0x2a
 80082d4:	d135      	bne.n	8008342 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f043 0204 	orr.w	r2, r3, #4
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008308:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	4618      	mov	r0, r3
 8008310:	f7fd ffbc 	bl	800628c <HAL_DMA_GetState>
 8008314:	4603      	mov	r3, r0
 8008316:	2b01      	cmp	r3, #1
 8008318:	d049      	beq.n	80083ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	4a69      	ldr	r2, [pc, #420]	; (80084c4 <I2C_Slave_STOPF+0x258>)
 8008320:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fe04 	bl	8005f34 <HAL_DMA_Abort_IT>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d03d      	beq.n	80083ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008340:	e035      	b.n	80083ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f043 0204 	orr.w	r2, r3, #4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008374:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd ff86 	bl	800628c <HAL_DMA_GetState>
 8008380:	4603      	mov	r3, r0
 8008382:	2b01      	cmp	r3, #1
 8008384:	d014      	beq.n	80083b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	4a4e      	ldr	r2, [pc, #312]	; (80084c4 <I2C_Slave_STOPF+0x258>)
 800838c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fdce 	bl	8005f34 <HAL_DMA_Abort_IT>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	e000      	b.n	80083b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d03e      	beq.n	8008438 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d112      	bne.n	80083ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d112      	bne.n	8008422 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008426:	b29b      	uxth	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	f043 0204 	orr.w	r2, r3, #4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f8b3 	bl	80085ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008446:	e039      	b.n	80084bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b2a      	cmp	r3, #42	; 0x2a
 800844c:	d109      	bne.n	8008462 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2228      	movs	r2, #40	; 0x28
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff f827 	bl	80074b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b28      	cmp	r3, #40	; 0x28
 800846c:	d111      	bne.n	8008492 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <I2C_Slave_STOPF+0x25c>)
 8008472:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff f828 	bl	80074e0 <HAL_I2C_ListenCpltCallback>
}
 8008490:	e014      	b.n	80084bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	2b22      	cmp	r3, #34	; 0x22
 8008498:	d002      	beq.n	80084a0 <I2C_Slave_STOPF+0x234>
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	2b22      	cmp	r3, #34	; 0x22
 800849e:	d10d      	bne.n	80084bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe fffa 	bl	80074b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	08008915 	.word	0x08008915
 80084c8:	ffff0000 	.word	0xffff0000

080084cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d002      	beq.n	80084ee <I2C_Slave_AF+0x22>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d129      	bne.n	8008542 <I2C_Slave_AF+0x76>
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b28      	cmp	r3, #40	; 0x28
 80084f2:	d126      	bne.n	8008542 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <I2C_Slave_AF+0xdc>)
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008508:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008512:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008522:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fe ffd0 	bl	80074e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008540:	e02e      	b.n	80085a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b21      	cmp	r3, #33	; 0x21
 8008546:	d126      	bne.n	8008596 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a17      	ldr	r2, [pc, #92]	; (80085a8 <I2C_Slave_AF+0xdc>)
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2221      	movs	r2, #33	; 0x21
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008572:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800857c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fe ff84 	bl	800749c <HAL_I2C_SlaveTxCpltCallback>
}
 8008594:	e004      	b.n	80085a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800859e:	615a      	str	r2, [r3, #20]
}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	ffff0000 	.word	0xffff0000

080085ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b10      	cmp	r3, #16
 80085c8:	d002      	beq.n	80085d0 <I2C_ITError+0x24>
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d10a      	bne.n	80085e6 <I2C_ITError+0x3a>
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	2b22      	cmp	r3, #34	; 0x22
 80085d4:	d107      	bne.n	80085e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085ec:	2b28      	cmp	r3, #40	; 0x28
 80085ee:	d107      	bne.n	8008600 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2228      	movs	r2, #40	; 0x28
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085fe:	e015      	b.n	800862c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800860a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860e:	d00a      	beq.n	8008626 <I2C_ITError+0x7a>
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	2b60      	cmp	r3, #96	; 0x60
 8008614:	d007      	beq.n	8008626 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863a:	d162      	bne.n	8008702 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800864a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b01      	cmp	r3, #1
 8008658:	d020      	beq.n	800869c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	4a6a      	ldr	r2, [pc, #424]	; (8008808 <I2C_ITError+0x25c>)
 8008660:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fc64 	bl	8005f34 <HAL_DMA_Abort_IT>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8089 	beq.w	8008786 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0201 	bic.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3
 800869a:	e074      	b.n	8008786 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	4a59      	ldr	r2, [pc, #356]	; (8008808 <I2C_ITError+0x25c>)
 80086a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fd fc43 	bl	8005f34 <HAL_DMA_Abort_IT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d068      	beq.n	8008786 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b40      	cmp	r3, #64	; 0x40
 80086c0:	d10b      	bne.n	80086da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	e041      	b.n	8008786 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b60      	cmp	r3, #96	; 0x60
 800870c:	d125      	bne.n	800875a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d10b      	bne.n	8008742 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0201 	bic.w	r2, r2, #1
 8008750:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe feec 	bl	8007530 <HAL_I2C_AbortCpltCallback>
 8008758:	e015      	b.n	8008786 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d10b      	bne.n	8008780 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7fe fecb 	bl	800751c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10e      	bne.n	80087b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d007      	beq.n	80087c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d113      	bne.n	8008800 <I2C_ITError+0x254>
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b28      	cmp	r3, #40	; 0x28
 80087dc:	d110      	bne.n	8008800 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <I2C_ITError+0x260>)
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fe fe70 	bl	80074e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	08008915 	.word	0x08008915
 800880c:	ffff0000 	.word	0xffff0000

08008810 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af02      	add	r7, sp, #8
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	460b      	mov	r3, r1
 800881e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b08      	cmp	r3, #8
 800882a:	d006      	beq.n	800883a <I2C_MasterRequestWrite+0x2a>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d003      	beq.n	800883a <I2C_MasterRequestWrite+0x2a>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008838:	d108      	bne.n	800884c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e00b      	b.n	8008864 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	2b12      	cmp	r3, #18
 8008852:	d107      	bne.n	8008864 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008862:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f8f7 	bl	8008a64 <I2C_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00d      	beq.n	8008898 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888a:	d103      	bne.n	8008894 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e035      	b.n	8008904 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088a0:	d108      	bne.n	80088b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80088a2:	897b      	ldrh	r3, [r7, #10]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088b0:	611a      	str	r2, [r3, #16]
 80088b2:	e01b      	b.n	80088ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80088b4:	897b      	ldrh	r3, [r7, #10]
 80088b6:	11db      	asrs	r3, r3, #7
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	f003 0306 	and.w	r3, r3, #6
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f063 030f 	orn	r3, r3, #15
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	490e      	ldr	r1, [pc, #56]	; (800890c <I2C_MasterRequestWrite+0xfc>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f91d 	bl	8008b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e010      	b.n	8008904 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088e2:	897b      	ldrh	r3, [r7, #10]
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4907      	ldr	r1, [pc, #28]	; (8008910 <I2C_MasterRequestWrite+0x100>)
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f90d 	bl	8008b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e000      	b.n	8008904 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	00010008 	.word	0x00010008
 8008910:	00010002 	.word	0x00010002

08008914 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800892c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800892e:	4b4b      	ldr	r3, [pc, #300]	; (8008a5c <I2C_DMAAbort+0x148>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	08db      	lsrs	r3, r3, #3
 8008934:	4a4a      	ldr	r2, [pc, #296]	; (8008a60 <I2C_DMAAbort+0x14c>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	0a1a      	lsrs	r2, r3, #8
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	00da      	lsls	r2, r3, #3
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	f043 0220 	orr.w	r2, r3, #32
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800895a:	e00a      	b.n	8008972 <I2C_DMAAbort+0x5e>
    }
    count--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3b01      	subs	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800896c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008970:	d0ea      	beq.n	8008948 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897e:	2200      	movs	r2, #0
 8008980:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	2200      	movs	r2, #0
 8008990:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2200      	movs	r2, #0
 80089a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	2200      	movs	r2, #0
 80089b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	2200      	movs	r2, #0
 80089c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b60      	cmp	r3, #96	; 0x60
 80089e2:	d10e      	bne.n	8008a02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2200      	movs	r2, #0
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80089fa:	6978      	ldr	r0, [r7, #20]
 80089fc:	f7fe fd98 	bl	8007530 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a00:	e027      	b.n	8008a52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a02:	7cfb      	ldrb	r3, [r7, #19]
 8008a04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a08:	2b28      	cmp	r3, #40	; 0x28
 8008a0a:	d117      	bne.n	8008a3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2228      	movs	r2, #40	; 0x28
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a3a:	e007      	b.n	8008a4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008a4c:	6978      	ldr	r0, [r7, #20]
 8008a4e:	f7fe fd65 	bl	800751c <HAL_I2C_ErrorCallback>
}
 8008a52:	bf00      	nop
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	200000d4 	.word	0x200000d4
 8008a60:	14f8b589 	.word	0x14f8b589

08008a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a74:	e025      	b.n	8008ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d021      	beq.n	8008ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7e:	f7fc ffa1 	bl	80059c4 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d302      	bcc.n	8008a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d116      	bne.n	8008ac2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e023      	b.n	8008b0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d10d      	bne.n	8008ae8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	43da      	mvns	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf0c      	ite	eq
 8008ade:	2301      	moveq	r3, #1
 8008ae0:	2300      	movne	r3, #0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	e00c      	b.n	8008b02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	43da      	mvns	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4013      	ands	r3, r2
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bf0c      	ite	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	2300      	movne	r3, #0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d0b6      	beq.n	8008a76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b20:	e051      	b.n	8008bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b30:	d123      	bne.n	8008b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f043 0204 	orr.w	r2, r3, #4
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e046      	b.n	8008c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d021      	beq.n	8008bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b82:	f7fc ff1f 	bl	80059c4 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d302      	bcc.n	8008b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d116      	bne.n	8008bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e020      	b.n	8008c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10c      	bne.n	8008bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	43da      	mvns	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bf14      	ite	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	2300      	moveq	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	e00b      	b.n	8008c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	43da      	mvns	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d18d      	bne.n	8008b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c1c:	e02d      	b.n	8008c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f8aa 	bl	8008d78 <I2C_IsAcknowledgeFailed>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e02d      	b.n	8008c8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d021      	beq.n	8008c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c36:	f7fc fec5 	bl	80059c4 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d116      	bne.n	8008c7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f043 0220 	orr.w	r2, r3, #32
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e007      	b.n	8008c8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c84:	2b80      	cmp	r3, #128	; 0x80
 8008c86:	d1ca      	bne.n	8008c1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c9e:	e02d      	b.n	8008cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f869 	bl	8008d78 <I2C_IsAcknowledgeFailed>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e02d      	b.n	8008d0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb6:	d021      	beq.n	8008cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb8:	f7fc fe84 	bl	80059c4 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d116      	bne.n	8008cfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	f043 0220 	orr.w	r2, r3, #32
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e007      	b.n	8008d0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d1ca      	bne.n	8008ca0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d20:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	08db      	lsrs	r3, r3, #3
 8008d26:	4a13      	ldr	r2, [pc, #76]	; (8008d74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	0a1a      	lsrs	r2, r3, #8
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d107      	bne.n	8008d52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	f043 0220 	orr.w	r2, r3, #32
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e008      	b.n	8008d64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d60:	d0e9      	beq.n	8008d36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	200000d4 	.word	0x200000d4
 8008d74:	14f8b589 	.word	0x14f8b589

08008d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d8e:	d11b      	bne.n	8008dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	f043 0204 	orr.w	r2, r3, #4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008de6:	d103      	bne.n	8008df0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dee:	e007      	b.n	8008e00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008df8:	d102      	bne.n	8008e00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e267      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d075      	beq.n	8008f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e2a:	4b88      	ldr	r3, [pc, #544]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 030c 	and.w	r3, r3, #12
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d00c      	beq.n	8008e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e36:	4b85      	ldr	r3, [pc, #532]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d112      	bne.n	8008e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e42:	4b82      	ldr	r3, [pc, #520]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4e:	d10b      	bne.n	8008e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e50:	4b7e      	ldr	r3, [pc, #504]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d05b      	beq.n	8008f14 <HAL_RCC_OscConfig+0x108>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d157      	bne.n	8008f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e242      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e70:	d106      	bne.n	8008e80 <HAL_RCC_OscConfig+0x74>
 8008e72:	4b76      	ldr	r3, [pc, #472]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a75      	ldr	r2, [pc, #468]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e01d      	b.n	8008ebc <HAL_RCC_OscConfig+0xb0>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e88:	d10c      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x98>
 8008e8a:	4b70      	ldr	r3, [pc, #448]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a6f      	ldr	r2, [pc, #444]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	4b6d      	ldr	r3, [pc, #436]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a6c      	ldr	r2, [pc, #432]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	e00b      	b.n	8008ebc <HAL_RCC_OscConfig+0xb0>
 8008ea4:	4b69      	ldr	r3, [pc, #420]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a68      	ldr	r2, [pc, #416]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	4b66      	ldr	r3, [pc, #408]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a65      	ldr	r2, [pc, #404]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d013      	beq.n	8008eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec4:	f7fc fd7e 	bl	80059c4 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ecc:	f7fc fd7a 	bl	80059c4 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e207      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ede:	4b5b      	ldr	r3, [pc, #364]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0f0      	beq.n	8008ecc <HAL_RCC_OscConfig+0xc0>
 8008eea:	e014      	b.n	8008f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eec:	f7fc fd6a 	bl	80059c4 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ef4:	f7fc fd66 	bl	80059c4 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b64      	cmp	r3, #100	; 0x64
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e1f3      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f06:	4b51      	ldr	r3, [pc, #324]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0xe8>
 8008f12:	e000      	b.n	8008f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d063      	beq.n	8008fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f22:	4b4a      	ldr	r3, [pc, #296]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 030c 	and.w	r3, r3, #12
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f2e:	4b47      	ldr	r3, [pc, #284]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d11c      	bne.n	8008f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f3a:	4b44      	ldr	r3, [pc, #272]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d116      	bne.n	8008f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f46:	4b41      	ldr	r3, [pc, #260]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_RCC_OscConfig+0x152>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d001      	beq.n	8008f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e1c7      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5e:	4b3b      	ldr	r3, [pc, #236]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4937      	ldr	r1, [pc, #220]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f72:	e03a      	b.n	8008fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d020      	beq.n	8008fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f7c:	4b34      	ldr	r3, [pc, #208]	; (8009050 <HAL_RCC_OscConfig+0x244>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f82:	f7fc fd1f 	bl	80059c4 <HAL_GetTick>
 8008f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f88:	e008      	b.n	8008f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f8a:	f7fc fd1b 	bl	80059c4 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e1a8      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f9c:	4b2b      	ldr	r3, [pc, #172]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa8:	4b28      	ldr	r3, [pc, #160]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4925      	ldr	r1, [pc, #148]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	600b      	str	r3, [r1, #0]
 8008fbc:	e015      	b.n	8008fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <HAL_RCC_OscConfig+0x244>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fc fcfe 	bl	80059c4 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fcc:	f7fc fcfa 	bl	80059c4 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e187      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fde:	4b1b      	ldr	r3, [pc, #108]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d036      	beq.n	8009064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d016      	beq.n	800902c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ffe:	4b15      	ldr	r3, [pc, #84]	; (8009054 <HAL_RCC_OscConfig+0x248>)
 8009000:	2201      	movs	r2, #1
 8009002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009004:	f7fc fcde 	bl	80059c4 <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800900c:	f7fc fcda 	bl	80059c4 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e167      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800901e:	4b0b      	ldr	r3, [pc, #44]	; (800904c <HAL_RCC_OscConfig+0x240>)
 8009020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0x200>
 800902a:	e01b      	b.n	8009064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <HAL_RCC_OscConfig+0x248>)
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009032:	f7fc fcc7 	bl	80059c4 <HAL_GetTick>
 8009036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009038:	e00e      	b.n	8009058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800903a:	f7fc fcc3 	bl	80059c4 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d907      	bls.n	8009058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e150      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
 800904c:	40023800 	.word	0x40023800
 8009050:	42470000 	.word	0x42470000
 8009054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009058:	4b88      	ldr	r3, [pc, #544]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800905a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ea      	bne.n	800903a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8097 	beq.w	80091a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009076:	4b81      	ldr	r3, [pc, #516]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10f      	bne.n	80090a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	4b7d      	ldr	r3, [pc, #500]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	4a7c      	ldr	r2, [pc, #496]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800908c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009090:	6413      	str	r3, [r2, #64]	; 0x40
 8009092:	4b7a      	ldr	r3, [pc, #488]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909a:	60bb      	str	r3, [r7, #8]
 800909c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800909e:	2301      	movs	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a2:	4b77      	ldr	r3, [pc, #476]	; (8009280 <HAL_RCC_OscConfig+0x474>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d118      	bne.n	80090e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090ae:	4b74      	ldr	r3, [pc, #464]	; (8009280 <HAL_RCC_OscConfig+0x474>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a73      	ldr	r2, [pc, #460]	; (8009280 <HAL_RCC_OscConfig+0x474>)
 80090b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090ba:	f7fc fc83 	bl	80059c4 <HAL_GetTick>
 80090be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090c0:	e008      	b.n	80090d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c2:	f7fc fc7f 	bl	80059c4 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d901      	bls.n	80090d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e10c      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090d4:	4b6a      	ldr	r3, [pc, #424]	; (8009280 <HAL_RCC_OscConfig+0x474>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d106      	bne.n	80090f6 <HAL_RCC_OscConfig+0x2ea>
 80090e8:	4b64      	ldr	r3, [pc, #400]	; (800927c <HAL_RCC_OscConfig+0x470>)
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	4a63      	ldr	r2, [pc, #396]	; (800927c <HAL_RCC_OscConfig+0x470>)
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	6713      	str	r3, [r2, #112]	; 0x70
 80090f4:	e01c      	b.n	8009130 <HAL_RCC_OscConfig+0x324>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	d10c      	bne.n	8009118 <HAL_RCC_OscConfig+0x30c>
 80090fe:	4b5f      	ldr	r3, [pc, #380]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009102:	4a5e      	ldr	r2, [pc, #376]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009104:	f043 0304 	orr.w	r3, r3, #4
 8009108:	6713      	str	r3, [r2, #112]	; 0x70
 800910a:	4b5c      	ldr	r3, [pc, #368]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800910c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910e:	4a5b      	ldr	r2, [pc, #364]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	6713      	str	r3, [r2, #112]	; 0x70
 8009116:	e00b      	b.n	8009130 <HAL_RCC_OscConfig+0x324>
 8009118:	4b58      	ldr	r3, [pc, #352]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	4a57      	ldr	r2, [pc, #348]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	6713      	str	r3, [r2, #112]	; 0x70
 8009124:	4b55      	ldr	r3, [pc, #340]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	4a54      	ldr	r2, [pc, #336]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800912a:	f023 0304 	bic.w	r3, r3, #4
 800912e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d015      	beq.n	8009164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009138:	f7fc fc44 	bl	80059c4 <HAL_GetTick>
 800913c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800913e:	e00a      	b.n	8009156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009140:	f7fc fc40 	bl	80059c4 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f241 3288 	movw	r2, #5000	; 0x1388
 800914e:	4293      	cmp	r3, r2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e0cb      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009156:	4b49      	ldr	r3, [pc, #292]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0ee      	beq.n	8009140 <HAL_RCC_OscConfig+0x334>
 8009162:	e014      	b.n	800918e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009164:	f7fc fc2e 	bl	80059c4 <HAL_GetTick>
 8009168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800916a:	e00a      	b.n	8009182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800916c:	f7fc fc2a 	bl	80059c4 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	f241 3288 	movw	r2, #5000	; 0x1388
 800917a:	4293      	cmp	r3, r2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e0b5      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009182:	4b3e      	ldr	r3, [pc, #248]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1ee      	bne.n	800916c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d105      	bne.n	80091a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009194:	4b39      	ldr	r3, [pc, #228]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	4a38      	ldr	r2, [pc, #224]	; (800927c <HAL_RCC_OscConfig+0x470>)
 800919a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800919e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80a1 	beq.w	80092ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091aa:	4b34      	ldr	r3, [pc, #208]	; (800927c <HAL_RCC_OscConfig+0x470>)
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 030c 	and.w	r3, r3, #12
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d05c      	beq.n	8009270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d141      	bne.n	8009242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091be:	4b31      	ldr	r3, [pc, #196]	; (8009284 <HAL_RCC_OscConfig+0x478>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c4:	f7fc fbfe 	bl	80059c4 <HAL_GetTick>
 80091c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091cc:	f7fc fbfa 	bl	80059c4 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e087      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091de:	4b27      	ldr	r3, [pc, #156]	; (800927c <HAL_RCC_OscConfig+0x470>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f0      	bne.n	80091cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69da      	ldr	r2, [r3, #28]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	019b      	lsls	r3, r3, #6
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	085b      	lsrs	r3, r3, #1
 8009202:	3b01      	subs	r3, #1
 8009204:	041b      	lsls	r3, r3, #16
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	061b      	lsls	r3, r3, #24
 800920e:	491b      	ldr	r1, [pc, #108]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009210:	4313      	orrs	r3, r2
 8009212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009214:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <HAL_RCC_OscConfig+0x478>)
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800921a:	f7fc fbd3 	bl	80059c4 <HAL_GetTick>
 800921e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009222:	f7fc fbcf 	bl	80059c4 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e05c      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <HAL_RCC_OscConfig+0x416>
 8009240:	e054      	b.n	80092ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <HAL_RCC_OscConfig+0x478>)
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009248:	f7fc fbbc 	bl	80059c4 <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009250:	f7fc fbb8 	bl	80059c4 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b02      	cmp	r3, #2
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e045      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <HAL_RCC_OscConfig+0x470>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f0      	bne.n	8009250 <HAL_RCC_OscConfig+0x444>
 800926e:	e03d      	b.n	80092ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d107      	bne.n	8009288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e038      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
 800927c:	40023800 	.word	0x40023800
 8009280:	40007000 	.word	0x40007000
 8009284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009288:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <HAL_RCC_OscConfig+0x4ec>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d028      	beq.n	80092e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d121      	bne.n	80092e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d11a      	bne.n	80092e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092b8:	4013      	ands	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d111      	bne.n	80092e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	085b      	lsrs	r3, r3, #1
 80092d0:	3b01      	subs	r3, #1
 80092d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d107      	bne.n	80092e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d001      	beq.n	80092ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	40023800 	.word	0x40023800

080092fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e0cc      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009310:	4b68      	ldr	r3, [pc, #416]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d90c      	bls.n	8009338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931e:	4b65      	ldr	r3, [pc, #404]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009326:	4b63      	ldr	r3, [pc, #396]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d001      	beq.n	8009338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0b8      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d020      	beq.n	8009386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009350:	4b59      	ldr	r3, [pc, #356]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4a58      	ldr	r2, [pc, #352]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800935a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009368:	4b53      	ldr	r3, [pc, #332]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	4a52      	ldr	r2, [pc, #328]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800936e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009374:	4b50      	ldr	r3, [pc, #320]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	494d      	ldr	r1, [pc, #308]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009382:	4313      	orrs	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d044      	beq.n	800941c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d107      	bne.n	80093aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800939a:	4b47      	ldr	r3, [pc, #284]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d119      	bne.n	80093da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e07f      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d003      	beq.n	80093ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d107      	bne.n	80093ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ba:	4b3f      	ldr	r3, [pc, #252]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e06f      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ca:	4b3b      	ldr	r3, [pc, #236]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e067      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093da:	4b37      	ldr	r3, [pc, #220]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f023 0203 	bic.w	r2, r3, #3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4934      	ldr	r1, [pc, #208]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093ec:	f7fc faea 	bl	80059c4 <HAL_GetTick>
 80093f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f2:	e00a      	b.n	800940a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f4:	f7fc fae6 	bl	80059c4 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009402:	4293      	cmp	r3, r2
 8009404:	d901      	bls.n	800940a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e04f      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800940a:	4b2b      	ldr	r3, [pc, #172]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 020c 	and.w	r2, r3, #12
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	429a      	cmp	r2, r3
 800941a:	d1eb      	bne.n	80093f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800941c:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0307 	and.w	r3, r3, #7
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d20c      	bcs.n	8009444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800942a:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009432:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d001      	beq.n	8009444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e032      	b.n	80094aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d008      	beq.n	8009462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009450:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	4916      	ldr	r1, [pc, #88]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800945e:	4313      	orrs	r3, r2
 8009460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	490e      	ldr	r1, [pc, #56]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800947e:	4313      	orrs	r3, r2
 8009480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009482:	f000 f821 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 8009486:	4602      	mov	r2, r0
 8009488:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <HAL_RCC_ClockConfig+0x1bc>)
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	091b      	lsrs	r3, r3, #4
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	490a      	ldr	r1, [pc, #40]	; (80094bc <HAL_RCC_ClockConfig+0x1c0>)
 8009494:	5ccb      	ldrb	r3, [r1, r3]
 8009496:	fa22 f303 	lsr.w	r3, r2, r3
 800949a:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <HAL_RCC_ClockConfig+0x1c4>)
 800949c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <HAL_RCC_ClockConfig+0x1c8>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fc fa4a 	bl	800593c <HAL_InitTick>

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40023c00 	.word	0x40023c00
 80094b8:	40023800 	.word	0x40023800
 80094bc:	0800d320 	.word	0x0800d320
 80094c0:	200000d4 	.word	0x200000d4
 80094c4:	200000d8 	.word	0x200000d8

080094c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094cc:	b094      	sub	sp, #80	; 0x50
 80094ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	647b      	str	r3, [r7, #68]	; 0x44
 80094d4:	2300      	movs	r3, #0
 80094d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094d8:	2300      	movs	r3, #0
 80094da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094e0:	4b79      	ldr	r3, [pc, #484]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f003 030c 	and.w	r3, r3, #12
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d00d      	beq.n	8009508 <HAL_RCC_GetSysClockFreq+0x40>
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	f200 80e1 	bhi.w	80096b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_RCC_GetSysClockFreq+0x34>
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d003      	beq.n	8009502 <HAL_RCC_GetSysClockFreq+0x3a>
 80094fa:	e0db      	b.n	80096b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094fc:	4b73      	ldr	r3, [pc, #460]	; (80096cc <HAL_RCC_GetSysClockFreq+0x204>)
 80094fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009500:	e0db      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009502:	4b73      	ldr	r3, [pc, #460]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009506:	e0d8      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009508:	4b6f      	ldr	r3, [pc, #444]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009512:	4b6d      	ldr	r3, [pc, #436]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d063      	beq.n	80095e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800951e:	4b6a      	ldr	r3, [pc, #424]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	099b      	lsrs	r3, r3, #6
 8009524:	2200      	movs	r2, #0
 8009526:	63bb      	str	r3, [r7, #56]	; 0x38
 8009528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009530:	633b      	str	r3, [r7, #48]	; 0x30
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800953a:	4622      	mov	r2, r4
 800953c:	462b      	mov	r3, r5
 800953e:	f04f 0000 	mov.w	r0, #0
 8009542:	f04f 0100 	mov.w	r1, #0
 8009546:	0159      	lsls	r1, r3, #5
 8009548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800954c:	0150      	lsls	r0, r2, #5
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4621      	mov	r1, r4
 8009554:	1a51      	subs	r1, r2, r1
 8009556:	6139      	str	r1, [r7, #16]
 8009558:	4629      	mov	r1, r5
 800955a:	eb63 0301 	sbc.w	r3, r3, r1
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800956c:	4659      	mov	r1, fp
 800956e:	018b      	lsls	r3, r1, #6
 8009570:	4651      	mov	r1, sl
 8009572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009576:	4651      	mov	r1, sl
 8009578:	018a      	lsls	r2, r1, #6
 800957a:	4651      	mov	r1, sl
 800957c:	ebb2 0801 	subs.w	r8, r2, r1
 8009580:	4659      	mov	r1, fp
 8009582:	eb63 0901 	sbc.w	r9, r3, r1
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800959a:	4690      	mov	r8, r2
 800959c:	4699      	mov	r9, r3
 800959e:	4623      	mov	r3, r4
 80095a0:	eb18 0303 	adds.w	r3, r8, r3
 80095a4:	60bb      	str	r3, [r7, #8]
 80095a6:	462b      	mov	r3, r5
 80095a8:	eb49 0303 	adc.w	r3, r9, r3
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80095ba:	4629      	mov	r1, r5
 80095bc:	024b      	lsls	r3, r1, #9
 80095be:	4621      	mov	r1, r4
 80095c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80095c4:	4621      	mov	r1, r4
 80095c6:	024a      	lsls	r2, r1, #9
 80095c8:	4610      	mov	r0, r2
 80095ca:	4619      	mov	r1, r3
 80095cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ce:	2200      	movs	r2, #0
 80095d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095d8:	f7f7 fada 	bl	8000b90 <__aeabi_uldivmod>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4613      	mov	r3, r2
 80095e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e4:	e058      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095e6:	4b38      	ldr	r3, [pc, #224]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	099b      	lsrs	r3, r3, #6
 80095ec:	2200      	movs	r2, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	4611      	mov	r1, r2
 80095f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80095f6:	623b      	str	r3, [r7, #32]
 80095f8:	2300      	movs	r3, #0
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
 80095fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009600:	4642      	mov	r2, r8
 8009602:	464b      	mov	r3, r9
 8009604:	f04f 0000 	mov.w	r0, #0
 8009608:	f04f 0100 	mov.w	r1, #0
 800960c:	0159      	lsls	r1, r3, #5
 800960e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009612:	0150      	lsls	r0, r2, #5
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4641      	mov	r1, r8
 800961a:	ebb2 0a01 	subs.w	sl, r2, r1
 800961e:	4649      	mov	r1, r9
 8009620:	eb63 0b01 	sbc.w	fp, r3, r1
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009638:	ebb2 040a 	subs.w	r4, r2, sl
 800963c:	eb63 050b 	sbc.w	r5, r3, fp
 8009640:	f04f 0200 	mov.w	r2, #0
 8009644:	f04f 0300 	mov.w	r3, #0
 8009648:	00eb      	lsls	r3, r5, #3
 800964a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800964e:	00e2      	lsls	r2, r4, #3
 8009650:	4614      	mov	r4, r2
 8009652:	461d      	mov	r5, r3
 8009654:	4643      	mov	r3, r8
 8009656:	18e3      	adds	r3, r4, r3
 8009658:	603b      	str	r3, [r7, #0]
 800965a:	464b      	mov	r3, r9
 800965c:	eb45 0303 	adc.w	r3, r5, r3
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	f04f 0300 	mov.w	r3, #0
 800966a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800966e:	4629      	mov	r1, r5
 8009670:	028b      	lsls	r3, r1, #10
 8009672:	4621      	mov	r1, r4
 8009674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009678:	4621      	mov	r1, r4
 800967a:	028a      	lsls	r2, r1, #10
 800967c:	4610      	mov	r0, r2
 800967e:	4619      	mov	r1, r3
 8009680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009682:	2200      	movs	r2, #0
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	61fa      	str	r2, [r7, #28]
 8009688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800968c:	f7f7 fa80 	bl	8000b90 <__aeabi_uldivmod>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4613      	mov	r3, r2
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009698:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	3301      	adds	r3, #1
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80096a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096b2:	e002      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <HAL_RCC_GetSysClockFreq+0x204>)
 80096b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3750      	adds	r7, #80	; 0x50
 80096c0:	46bd      	mov	sp, r7
 80096c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096c6:	bf00      	nop
 80096c8:	40023800 	.word	0x40023800
 80096cc:	00f42400 	.word	0x00f42400
 80096d0:	007a1200 	.word	0x007a1200

080096d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096d8:	4b03      	ldr	r3, [pc, #12]	; (80096e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80096da:	681b      	ldr	r3, [r3, #0]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	200000d4 	.word	0x200000d4

080096ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80096f0:	f7ff fff0 	bl	80096d4 <HAL_RCC_GetHCLKFreq>
 80096f4:	4602      	mov	r2, r0
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <HAL_RCC_GetPCLK1Freq+0x20>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	0a9b      	lsrs	r3, r3, #10
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	4903      	ldr	r1, [pc, #12]	; (8009710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009702:	5ccb      	ldrb	r3, [r1, r3]
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009708:	4618      	mov	r0, r3
 800970a:	bd80      	pop	{r7, pc}
 800970c:	40023800 	.word	0x40023800
 8009710:	0800d330 	.word	0x0800d330

08009714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009718:	f7ff ffdc 	bl	80096d4 <HAL_RCC_GetHCLKFreq>
 800971c:	4602      	mov	r2, r0
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	0b5b      	lsrs	r3, r3, #13
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	4903      	ldr	r1, [pc, #12]	; (8009738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800972a:	5ccb      	ldrb	r3, [r1, r3]
 800972c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	bd80      	pop	{r7, pc}
 8009734:	40023800 	.word	0x40023800
 8009738:	0800d330 	.word	0x0800d330

0800973c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e041      	b.n	80097d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fb fe66 	bl	8005434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f000 fde2 	bl	800a344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d001      	beq.n	80097f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e03c      	b.n	800986e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a1e      	ldr	r2, [pc, #120]	; (800987c <HAL_TIM_Base_Start+0xa0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d018      	beq.n	8009838 <HAL_TIM_Base_Start+0x5c>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800980e:	d013      	beq.n	8009838 <HAL_TIM_Base_Start+0x5c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <HAL_TIM_Base_Start+0xa4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00e      	beq.n	8009838 <HAL_TIM_Base_Start+0x5c>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a19      	ldr	r2, [pc, #100]	; (8009884 <HAL_TIM_Base_Start+0xa8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_TIM_Base_Start+0x5c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a17      	ldr	r2, [pc, #92]	; (8009888 <HAL_TIM_Base_Start+0xac>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIM_Base_Start+0x5c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <HAL_TIM_Base_Start+0xb0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d111      	bne.n	800985c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b06      	cmp	r3, #6
 8009848:	d010      	beq.n	800986c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	e007      	b.n	800986c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40014000 	.word	0x40014000

08009890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d001      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e044      	b.n	8009932 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0201 	orr.w	r2, r2, #1
 80098be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <HAL_TIM_Base_Start_IT+0xb0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d018      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x6c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d2:	d013      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x6c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1a      	ldr	r2, [pc, #104]	; (8009944 <HAL_TIM_Base_Start_IT+0xb4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00e      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x6c>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a19      	ldr	r2, [pc, #100]	; (8009948 <HAL_TIM_Base_Start_IT+0xb8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d009      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x6c>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a17      	ldr	r2, [pc, #92]	; (800994c <HAL_TIM_Base_Start_IT+0xbc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d004      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x6c>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a16      	ldr	r2, [pc, #88]	; (8009950 <HAL_TIM_Base_Start_IT+0xc0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d111      	bne.n	8009920 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b06      	cmp	r3, #6
 800990c:	d010      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991e:	e007      	b.n	8009930 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40010000 	.word	0x40010000
 8009944:	40000400 	.word	0x40000400
 8009948:	40000800 	.word	0x40000800
 800994c:	40000c00 	.word	0x40000c00
 8009950:	40014000 	.word	0x40014000

08009954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e041      	b.n	80099ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f839 	bl	80099f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f000 fcd6 	bl	800a344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
	...

08009a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <HAL_TIM_PWM_Start+0x24>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	bf14      	ite	ne
 8009a24:	2301      	movne	r3, #1
 8009a26:	2300      	moveq	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	e022      	b.n	8009a72 <HAL_TIM_PWM_Start+0x6a>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d109      	bne.n	8009a46 <HAL_TIM_PWM_Start+0x3e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	bf14      	ite	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	2300      	moveq	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	e015      	b.n	8009a72 <HAL_TIM_PWM_Start+0x6a>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d109      	bne.n	8009a60 <HAL_TIM_PWM_Start+0x58>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	bf14      	ite	ne
 8009a58:	2301      	movne	r3, #1
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	e008      	b.n	8009a72 <HAL_TIM_PWM_Start+0x6a>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	bf14      	ite	ne
 8009a6c:	2301      	movne	r3, #1
 8009a6e:	2300      	moveq	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e068      	b.n	8009b4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_PWM_Start+0x82>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a88:	e013      	b.n	8009ab2 <HAL_TIM_PWM_Start+0xaa>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b04      	cmp	r3, #4
 8009a8e:	d104      	bne.n	8009a9a <HAL_TIM_PWM_Start+0x92>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a98:	e00b      	b.n	8009ab2 <HAL_TIM_PWM_Start+0xaa>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b08      	cmp	r3, #8
 8009a9e:	d104      	bne.n	8009aaa <HAL_TIM_PWM_Start+0xa2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aa8:	e003      	b.n	8009ab2 <HAL_TIM_PWM_Start+0xaa>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2202      	movs	r2, #2
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fee8 	bl	800a890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a23      	ldr	r2, [pc, #140]	; (8009b54 <HAL_TIM_PWM_Start+0x14c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d107      	bne.n	8009ada <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <HAL_TIM_PWM_Start+0x14c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d018      	beq.n	8009b16 <HAL_TIM_PWM_Start+0x10e>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aec:	d013      	beq.n	8009b16 <HAL_TIM_PWM_Start+0x10e>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a19      	ldr	r2, [pc, #100]	; (8009b58 <HAL_TIM_PWM_Start+0x150>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00e      	beq.n	8009b16 <HAL_TIM_PWM_Start+0x10e>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <HAL_TIM_PWM_Start+0x154>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d009      	beq.n	8009b16 <HAL_TIM_PWM_Start+0x10e>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <HAL_TIM_PWM_Start+0x158>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d004      	beq.n	8009b16 <HAL_TIM_PWM_Start+0x10e>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a14      	ldr	r2, [pc, #80]	; (8009b64 <HAL_TIM_PWM_Start+0x15c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d111      	bne.n	8009b3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b06      	cmp	r3, #6
 8009b26:	d010      	beq.n	8009b4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b38:	e007      	b.n	8009b4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0201 	orr.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40010000 	.word	0x40010000
 8009b58:	40000400 	.word	0x40000400
 8009b5c:	40000800 	.word	0x40000800
 8009b60:	40000c00 	.word	0x40000c00
 8009b64:	40014000 	.word	0x40014000

08009b68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e097      	b.n	8009cac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d106      	bne.n	8009b96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7fb fcb3 	bl	80054fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6812      	ldr	r2, [r2, #0]
 8009ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bac:	f023 0307 	bic.w	r3, r3, #7
 8009bb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f000 fbc1 	bl	800a344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009c08:	f023 030c 	bic.w	r3, r3, #12
 8009c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	4313      	orrs	r3, r2
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	011a      	lsls	r2, r3, #4
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	031b      	lsls	r3, r3, #12
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ccc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cdc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d110      	bne.n	8009d06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d102      	bne.n	8009cf0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cea:	7b7b      	ldrb	r3, [r7, #13]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d001      	beq.n	8009cf4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e069      	b.n	8009dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d04:	e031      	b.n	8009d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d110      	bne.n	8009d2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d102      	bne.n	8009d18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d12:	7b3b      	ldrb	r3, [r7, #12]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d001      	beq.n	8009d1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e055      	b.n	8009dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d2c:	e01d      	b.n	8009d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d108      	bne.n	8009d46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d105      	bne.n	8009d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d3a:	7b7b      	ldrb	r3, [r7, #13]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d102      	bne.n	8009d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d40:	7b3b      	ldrb	r3, [r7, #12]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d001      	beq.n	8009d4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e03e      	b.n	8009dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2202      	movs	r2, #2
 8009d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_TIM_Encoder_Start+0xc4>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d008      	beq.n	8009d88 <HAL_TIM_Encoder_Start+0xd4>
 8009d76:	e00f      	b.n	8009d98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fd85 	bl	800a890 <TIM_CCxChannelCmd>
      break;
 8009d86:	e016      	b.n	8009db6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	2104      	movs	r1, #4
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fd7d 	bl	800a890 <TIM_CCxChannelCmd>
      break;
 8009d96:	e00e      	b.n	8009db6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	2100      	movs	r1, #0
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fd75 	bl	800a890 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2201      	movs	r2, #1
 8009dac:	2104      	movs	r1, #4
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fd6e 	bl	800a890 <TIM_CCxChannelCmd>
      break;
 8009db4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 0201 	orr.w	r2, r2, #1
 8009dc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d122      	bne.n	8009e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d11b      	bne.n	8009e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0202 	mvn.w	r2, #2
 8009dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa77 	bl	800a306 <HAL_TIM_IC_CaptureCallback>
 8009e18:	e005      	b.n	8009e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa69 	bl	800a2f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fa7a 	bl	800a31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d122      	bne.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d11b      	bne.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f06f 0204 	mvn.w	r2, #4
 8009e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa4d 	bl	800a306 <HAL_TIM_IC_CaptureCallback>
 8009e6c:	e005      	b.n	8009e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fa3f 	bl	800a2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa50 	bl	800a31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d122      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d11b      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0208 	mvn.w	r2, #8
 8009ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa23 	bl	800a306 <HAL_TIM_IC_CaptureCallback>
 8009ec0:	e005      	b.n	8009ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa15 	bl	800a2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fa26 	bl	800a31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d122      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b10      	cmp	r3, #16
 8009eee:	d11b      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f06f 0210 	mvn.w	r2, #16
 8009ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2208      	movs	r2, #8
 8009efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9f9 	bl	800a306 <HAL_TIM_IC_CaptureCallback>
 8009f14:	e005      	b.n	8009f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f9eb 	bl	800a2f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9fc 	bl	800a31a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d10e      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d107      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f06f 0201 	mvn.w	r2, #1
 8009f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7f7 fdca 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5e:	2b80      	cmp	r3, #128	; 0x80
 8009f60:	d10e      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d107      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fd78 	bl	800aa70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d10e      	bne.n	8009fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d107      	bne.n	8009fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9c1 	bl	800a32e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d10e      	bne.n	8009fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f003 0320 	and.w	r3, r3, #32
 8009fc4:	2b20      	cmp	r3, #32
 8009fc6:	d107      	bne.n	8009fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f06f 0220 	mvn.w	r2, #32
 8009fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fd42 	bl	800aa5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e0ae      	b.n	800a15c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b0c      	cmp	r3, #12
 800a00a:	f200 809f 	bhi.w	800a14c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a049 	.word	0x0800a049
 800a018:	0800a14d 	.word	0x0800a14d
 800a01c:	0800a14d 	.word	0x0800a14d
 800a020:	0800a14d 	.word	0x0800a14d
 800a024:	0800a089 	.word	0x0800a089
 800a028:	0800a14d 	.word	0x0800a14d
 800a02c:	0800a14d 	.word	0x0800a14d
 800a030:	0800a14d 	.word	0x0800a14d
 800a034:	0800a0cb 	.word	0x0800a0cb
 800a038:	0800a14d 	.word	0x0800a14d
 800a03c:	0800a14d 	.word	0x0800a14d
 800a040:	0800a14d 	.word	0x0800a14d
 800a044:	0800a10b 	.word	0x0800a10b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 f9f8 	bl	800a444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0208 	orr.w	r2, r2, #8
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	619a      	str	r2, [r3, #24]
      break;
 800a086:	e064      	b.n	800a152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fa3e 	bl	800a510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6999      	ldr	r1, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	021a      	lsls	r2, r3, #8
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]
      break;
 800a0c8:	e043      	b.n	800a152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fa89 	bl	800a5e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0208 	orr.w	r2, r2, #8
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0204 	bic.w	r2, r2, #4
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	61da      	str	r2, [r3, #28]
      break;
 800a108:	e023      	b.n	800a152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fad3 	bl	800a6bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69d9      	ldr	r1, [r3, #28]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	021a      	lsls	r2, r3, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	61da      	str	r2, [r3, #28]
      break;
 800a14a:	e002      	b.n	800a152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
      break;
 800a150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_TIM_ConfigClockSource+0x1c>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e0b4      	b.n	800a2ea <HAL_TIM_ConfigClockSource+0x186>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a19e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b8:	d03e      	beq.n	800a238 <HAL_TIM_ConfigClockSource+0xd4>
 800a1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1be:	f200 8087 	bhi.w	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c6:	f000 8086 	beq.w	800a2d6 <HAL_TIM_ConfigClockSource+0x172>
 800a1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ce:	d87f      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d0:	2b70      	cmp	r3, #112	; 0x70
 800a1d2:	d01a      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0xa6>
 800a1d4:	2b70      	cmp	r3, #112	; 0x70
 800a1d6:	d87b      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d8:	2b60      	cmp	r3, #96	; 0x60
 800a1da:	d050      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x11a>
 800a1dc:	2b60      	cmp	r3, #96	; 0x60
 800a1de:	d877      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e0:	2b50      	cmp	r3, #80	; 0x50
 800a1e2:	d03c      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0xfa>
 800a1e4:	2b50      	cmp	r3, #80	; 0x50
 800a1e6:	d873      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e8:	2b40      	cmp	r3, #64	; 0x40
 800a1ea:	d058      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x13a>
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d86f      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f0:	2b30      	cmp	r3, #48	; 0x30
 800a1f2:	d064      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x15a>
 800a1f4:	2b30      	cmp	r3, #48	; 0x30
 800a1f6:	d86b      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f8:	2b20      	cmp	r3, #32
 800a1fa:	d060      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x15a>
 800a1fc:	2b20      	cmp	r3, #32
 800a1fe:	d867      	bhi.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d05c      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x15a>
 800a204:	2b10      	cmp	r3, #16
 800a206:	d05a      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x15a>
 800a208:	e062      	b.n	800a2d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	6899      	ldr	r1, [r3, #8]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f000 fb19 	bl	800a850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a22c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	609a      	str	r2, [r3, #8]
      break;
 800a236:	e04f      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6899      	ldr	r1, [r3, #8]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f000 fb02 	bl	800a850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a25a:	609a      	str	r2, [r3, #8]
      break;
 800a25c:	e03c      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6859      	ldr	r1, [r3, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f000 fa76 	bl	800a75c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2150      	movs	r1, #80	; 0x50
 800a276:	4618      	mov	r0, r3
 800a278:	f000 facf 	bl	800a81a <TIM_ITRx_SetConfig>
      break;
 800a27c:	e02c      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f000 fa95 	bl	800a7ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2160      	movs	r1, #96	; 0x60
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fabf 	bl	800a81a <TIM_ITRx_SetConfig>
      break;
 800a29c:	e01c      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6859      	ldr	r1, [r3, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f000 fa56 	bl	800a75c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2140      	movs	r1, #64	; 0x40
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 faaf 	bl	800a81a <TIM_ITRx_SetConfig>
      break;
 800a2bc:	e00c      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f000 faa6 	bl	800a81a <TIM_ITRx_SetConfig>
      break;
 800a2ce:	e003      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d4:	e000      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a30e:	bf00      	nop
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
	...

0800a344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a34      	ldr	r2, [pc, #208]	; (800a428 <TIM_Base_SetConfig+0xe4>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d00f      	beq.n	800a37c <TIM_Base_SetConfig+0x38>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a362:	d00b      	beq.n	800a37c <TIM_Base_SetConfig+0x38>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a31      	ldr	r2, [pc, #196]	; (800a42c <TIM_Base_SetConfig+0xe8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d007      	beq.n	800a37c <TIM_Base_SetConfig+0x38>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a30      	ldr	r2, [pc, #192]	; (800a430 <TIM_Base_SetConfig+0xec>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d003      	beq.n	800a37c <TIM_Base_SetConfig+0x38>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a2f      	ldr	r2, [pc, #188]	; (800a434 <TIM_Base_SetConfig+0xf0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d108      	bne.n	800a38e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a25      	ldr	r2, [pc, #148]	; (800a428 <TIM_Base_SetConfig+0xe4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d01b      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39c:	d017      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a22      	ldr	r2, [pc, #136]	; (800a42c <TIM_Base_SetConfig+0xe8>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d013      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a21      	ldr	r2, [pc, #132]	; (800a430 <TIM_Base_SetConfig+0xec>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00f      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a20      	ldr	r2, [pc, #128]	; (800a434 <TIM_Base_SetConfig+0xf0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d00b      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a1f      	ldr	r2, [pc, #124]	; (800a438 <TIM_Base_SetConfig+0xf4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d007      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a1e      	ldr	r2, [pc, #120]	; (800a43c <TIM_Base_SetConfig+0xf8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d003      	beq.n	800a3ce <TIM_Base_SetConfig+0x8a>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a1d      	ldr	r2, [pc, #116]	; (800a440 <TIM_Base_SetConfig+0xfc>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d108      	bne.n	800a3e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a08      	ldr	r2, [pc, #32]	; (800a428 <TIM_Base_SetConfig+0xe4>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d103      	bne.n	800a414 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	615a      	str	r2, [r3, #20]
}
 800a41a:	bf00      	nop
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40010000 	.word	0x40010000
 800a42c:	40000400 	.word	0x40000400
 800a430:	40000800 	.word	0x40000800
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40014000 	.word	0x40014000
 800a43c:	40014400 	.word	0x40014400
 800a440:	40014800 	.word	0x40014800

0800a444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f023 0201 	bic.w	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f023 0302 	bic.w	r3, r3, #2
 800a48c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <TIM_OC1_SetConfig+0xc8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d10c      	bne.n	800a4ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f023 0308 	bic.w	r3, r3, #8
 800a4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f023 0304 	bic.w	r3, r3, #4
 800a4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a13      	ldr	r2, [pc, #76]	; (800a50c <TIM_OC1_SetConfig+0xc8>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d111      	bne.n	800a4e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	621a      	str	r2, [r3, #32]
}
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	40010000 	.word	0x40010000

0800a510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	f023 0210 	bic.w	r2, r3, #16
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	021b      	lsls	r3, r3, #8
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4313      	orrs	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f023 0320 	bic.w	r3, r3, #32
 800a55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a1e      	ldr	r2, [pc, #120]	; (800a5e4 <TIM_OC2_SetConfig+0xd4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d10d      	bne.n	800a58c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a58a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a15      	ldr	r2, [pc, #84]	; (800a5e4 <TIM_OC2_SetConfig+0xd4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d113      	bne.n	800a5bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a59a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	621a      	str	r2, [r3, #32]
}
 800a5d6:	bf00      	nop
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	40010000 	.word	0x40010000

0800a5e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <TIM_OC3_SetConfig+0xd0>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d10d      	bne.n	800a662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a64c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <TIM_OC3_SetConfig+0xd0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d113      	bne.n	800a692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	621a      	str	r2, [r3, #32]
}
 800a6ac:	bf00      	nop
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	40010000 	.word	0x40010000

0800a6bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	031b      	lsls	r3, r3, #12
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4313      	orrs	r3, r2
 800a712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a10      	ldr	r2, [pc, #64]	; (800a758 <TIM_OC4_SetConfig+0x9c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d109      	bne.n	800a730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	019b      	lsls	r3, r3, #6
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	621a      	str	r2, [r3, #32]
}
 800a74a:	bf00      	nop
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	40010000 	.word	0x40010000

0800a75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	f023 0201 	bic.w	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	011b      	lsls	r3, r3, #4
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	4313      	orrs	r3, r2
 800a790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f023 030a 	bic.w	r3, r3, #10
 800a798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b087      	sub	sp, #28
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	f023 0210 	bic.w	r2, r3, #16
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	031b      	lsls	r3, r3, #12
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	621a      	str	r2, [r3, #32]
}
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	f043 0307 	orr.w	r3, r3, #7
 800a83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	609a      	str	r2, [r3, #8]
}
 800a844:	bf00      	nop
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	431a      	orrs	r2, r3
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4313      	orrs	r3, r2
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	609a      	str	r2, [r3, #8]
}
 800a884:	bf00      	nop
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f003 031f 	and.w	r3, r3, #31
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1a      	ldr	r2, [r3, #32]
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	43db      	mvns	r3, r3
 800a8b2:	401a      	ands	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	621a      	str	r2, [r3, #32]
}
 800a8ce:	bf00      	nop
 800a8d0:	371c      	adds	r7, #28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
	...

0800a8dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e050      	b.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1c      	ldr	r2, [pc, #112]	; (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d018      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d013      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a18      	ldr	r2, [pc, #96]	; (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a15      	ldr	r2, [pc, #84]	; (800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a13      	ldr	r2, [pc, #76]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d10c      	bne.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40000400 	.word	0x40000400
 800a9ac:	40000800 	.word	0x40000800
 800a9b0:	40000c00 	.word	0x40000c00
 800a9b4:	40014000 	.word	0x40014000

0800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e03d      	b.n	800aa50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e03f      	b.n	800ab16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d106      	bne.n	800aab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7fa fda8 	bl	8005600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2224      	movs	r2, #36	; 0x24
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 ffd7 	bl	800ba7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aadc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	695a      	ldr	r2, [r3, #20]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aaec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68da      	ldr	r2, [r3, #12]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aafc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d165      	bne.n	800ac06 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <HAL_UART_Transmit_DMA+0x26>
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e05e      	b.n	800ac08 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d101      	bne.n	800ab58 <HAL_UART_Transmit_DMA+0x38>
 800ab54:	2302      	movs	r3, #2
 800ab56:	e057      	b.n	800ac08 <HAL_UART_Transmit_DMA+0xe8>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	88fa      	ldrh	r2, [r7, #6]
 800ab6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	88fa      	ldrh	r2, [r7, #6]
 800ab70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2221      	movs	r2, #33	; 0x21
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab84:	4a22      	ldr	r2, [pc, #136]	; (800ac10 <HAL_UART_Transmit_DMA+0xf0>)
 800ab86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8c:	4a21      	ldr	r2, [pc, #132]	; (800ac14 <HAL_UART_Transmit_DMA+0xf4>)
 800ab8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	4a20      	ldr	r2, [pc, #128]	; (800ac18 <HAL_UART_Transmit_DMA+0xf8>)
 800ab96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aba0:	f107 0308 	add.w	r3, r7, #8
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	6819      	ldr	r1, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3304      	adds	r3, #4
 800abb4:	461a      	mov	r2, r3
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	f7fb f8f4 	bl	8005da4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abc4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3314      	adds	r3, #20
 800abd4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	e853 3f00 	ldrex	r3, [r3]
 800abdc:	617b      	str	r3, [r7, #20]
   return(result);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3314      	adds	r3, #20
 800abec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abee:	627a      	str	r2, [r7, #36]	; 0x24
 800abf0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf2:	6a39      	ldr	r1, [r7, #32]
 800abf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf6:	e841 2300 	strex	r3, r2, [r1]
 800abfa:	61fb      	str	r3, [r7, #28]
   return(result);
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1e5      	bne.n	800abce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e000      	b.n	800ac08 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ac06:	2302      	movs	r3, #2
  }
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3730      	adds	r7, #48	; 0x30
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	0800b315 	.word	0x0800b315
 800ac14:	0800b3af 	.word	0x0800b3af
 800ac18:	0800b527 	.word	0x0800b527

0800ac1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	4613      	mov	r3, r2
 800ac28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d11d      	bne.n	800ac72 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <HAL_UART_Receive_DMA+0x26>
 800ac3c:	88fb      	ldrh	r3, [r7, #6]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e016      	b.n	800ac74 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_UART_Receive_DMA+0x38>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e00f      	b.n	800ac74 <HAL_UART_Receive_DMA+0x58>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	461a      	mov	r2, r3
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fca7 	bl	800b5bc <UART_Start_Receive_DMA>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	e000      	b.n	800ac74 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ac72:	2302      	movs	r3, #2
  }
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b090      	sub	sp, #64	; 0x40
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac92:	2b80      	cmp	r3, #128	; 0x80
 800ac94:	bf0c      	ite	eq
 800ac96:	2301      	moveq	r3, #1
 800ac98:	2300      	movne	r3, #0
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b21      	cmp	r3, #33	; 0x21
 800aca8:	d128      	bne.n	800acfc <HAL_UART_DMAStop+0x80>
 800acaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d025      	beq.n	800acfc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3314      	adds	r3, #20
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	623b      	str	r3, [r7, #32]
   return(result);
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3314      	adds	r3, #20
 800acce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acd0:	633a      	str	r2, [r7, #48]	; 0x30
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e5      	bne.n	800acb0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fb f8af 	bl	8005e54 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fcfe 	bl	800b6f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad06:	2b40      	cmp	r3, #64	; 0x40
 800ad08:	bf0c      	ite	eq
 800ad0a:	2301      	moveq	r3, #1
 800ad0c:	2300      	movne	r3, #0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b22      	cmp	r3, #34	; 0x22
 800ad1c:	d128      	bne.n	800ad70 <HAL_UART_DMAStop+0xf4>
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d025      	beq.n	800ad70 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3314      	adds	r3, #20
 800ad42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad44:	61fa      	str	r2, [r7, #28]
 800ad46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	69b9      	ldr	r1, [r7, #24]
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	617b      	str	r3, [r7, #20]
   return(result);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fb f875 	bl	8005e54 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fcec 	bl	800b748 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3740      	adds	r7, #64	; 0x40
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b0ba      	sub	sp, #232	; 0xe8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800adae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800adba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10f      	bne.n	800ade2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <HAL_UART_IRQHandler+0x66>
 800adce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fd93 	bl	800b906 <UART_Receive_IT>
      return;
 800ade0:	e256      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ade2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80de 	beq.w	800afa8 <HAL_UART_IRQHandler+0x22c>
 800adec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 80d1 	beq.w	800afa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00b      	beq.n	800ae2a <HAL_UART_IRQHandler+0xae>
 800ae12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00b      	beq.n	800ae4e <HAL_UART_IRQHandler+0xd2>
 800ae36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	f043 0202 	orr.w	r2, r3, #2
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00b      	beq.n	800ae72 <HAL_UART_IRQHandler+0xf6>
 800ae5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	f043 0204 	orr.w	r2, r3, #4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <HAL_UART_IRQHandler+0x126>
 800ae7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d105      	bne.n	800ae96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f043 0208 	orr.w	r2, r3, #8
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 81ed 	beq.w	800b286 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <HAL_UART_IRQHandler+0x14e>
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fd1e 	bl	800b906 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed4:	2b40      	cmp	r3, #64	; 0x40
 800aed6:	bf0c      	ite	eq
 800aed8:	2301      	moveq	r3, #1
 800aeda:	2300      	movne	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d103      	bne.n	800aef6 <HAL_UART_IRQHandler+0x17a>
 800aeee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d04f      	beq.n	800af96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fc26 	bl	800b748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af06:	2b40      	cmp	r3, #64	; 0x40
 800af08:	d141      	bne.n	800af8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3314      	adds	r3, #20
 800af10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3314      	adds	r3, #20
 800af32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1d9      	bne.n	800af0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d013      	beq.n	800af86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af62:	4a7d      	ldr	r2, [pc, #500]	; (800b158 <HAL_UART_IRQHandler+0x3dc>)
 800af64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fa ffe2 	bl	8005f34 <HAL_DMA_Abort_IT>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d016      	beq.n	800afa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e00e      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f9ae 	bl	800b2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	e00a      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f9aa 	bl	800b2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af94:	e006      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f9a6 	bl	800b2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800afa2:	e170      	b.n	800b286 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa4:	bf00      	nop
    return;
 800afa6:	e16e      	b.n	800b286 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	2b01      	cmp	r3, #1
 800afae:	f040 814a 	bne.w	800b246 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800afb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8143 	beq.w	800b246 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afc4:	f003 0310 	and.w	r3, r3, #16
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 813c 	beq.w	800b246 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afce:	2300      	movs	r3, #0
 800afd0:	60bb      	str	r3, [r7, #8]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	60bb      	str	r3, [r7, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	60bb      	str	r3, [r7, #8]
 800afe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	f040 80b4 	bne.w	800b15c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8140 	beq.w	800b28a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b00e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b012:	429a      	cmp	r2, r3
 800b014:	f080 8139 	bcs.w	800b28a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b01e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b02a:	f000 8088 	beq.w	800b13e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	330c      	adds	r3, #12
 800b034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	330c      	adds	r3, #12
 800b056:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b05a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b05e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1d9      	bne.n	800b02e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3314      	adds	r3, #20
 800b080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3314      	adds	r3, #20
 800b09a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b09e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e1      	bne.n	800b07a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3314      	adds	r3, #20
 800b0bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3314      	adds	r3, #20
 800b0d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e3      	bne.n	800b0b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	330c      	adds	r3, #12
 800b102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10e:	f023 0310 	bic.w	r3, r3, #16
 800b112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	330c      	adds	r3, #12
 800b11c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b120:	65ba      	str	r2, [r7, #88]	; 0x58
 800b122:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e3      	bne.n	800b0fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fa fe8b 	bl	8005e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b146:	b29b      	uxth	r3, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f8d4 	bl	800b2fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b154:	e099      	b.n	800b28a <HAL_UART_IRQHandler+0x50e>
 800b156:	bf00      	nop
 800b158:	0800b80f 	.word	0x0800b80f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b164:	b29b      	uxth	r3, r3
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 808b 	beq.w	800b28e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 8086 	beq.w	800b28e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	330c      	adds	r3, #12
 800b188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	330c      	adds	r3, #12
 800b1a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b1a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b1a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e3      	bne.n	800b182 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3314      	adds	r3, #20
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
 800b1d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3314      	adds	r3, #20
 800b1da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1de:	633a      	str	r2, [r7, #48]	; 0x30
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e3      	bne.n	800b1ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	330c      	adds	r3, #12
 800b206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0310 	bic.w	r3, r3, #16
 800b216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	330c      	adds	r3, #12
 800b220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b224:	61fa      	str	r2, [r7, #28]
 800b226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	69b9      	ldr	r1, [r7, #24]
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	617b      	str	r3, [r7, #20]
   return(result);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e3      	bne.n	800b200 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f85c 	bl	800b2fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b244:	e023      	b.n	800b28e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <HAL_UART_IRQHandler+0x4ea>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fae9 	bl	800b836 <UART_Transmit_IT>
    return;
 800b264:	e014      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <HAL_UART_IRQHandler+0x514>
 800b272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb29 	bl	800b8d6 <UART_EndTransmit_IT>
    return;
 800b284:	e004      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
    return;
 800b286:	bf00      	nop
 800b288:	e002      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
      return;
 800b28a:	bf00      	nop
 800b28c:	e000      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
      return;
 800b28e:	bf00      	nop
  }
}
 800b290:	37e8      	adds	r7, #232	; 0xe8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop

0800b298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b090      	sub	sp, #64	; 0x40
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d137      	bne.n	800b3a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b332:	2200      	movs	r2, #0
 800b334:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3314      	adds	r3, #20
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	623b      	str	r3, [r7, #32]
   return(result);
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b34c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3314      	adds	r3, #20
 800b354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b356:	633a      	str	r2, [r7, #48]	; 0x30
 800b358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35e:	e841 2300 	strex	r3, r2, [r1]
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e5      	bne.n	800b336 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	330c      	adds	r3, #12
 800b370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	60fb      	str	r3, [r7, #12]
   return(result);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
 800b382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	330c      	adds	r3, #12
 800b388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b38a:	61fa      	str	r2, [r7, #28]
 800b38c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	69b9      	ldr	r1, [r7, #24]
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	617b      	str	r3, [r7, #20]
   return(result);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e5      	bne.n	800b36a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b39e:	e002      	b.n	800b3a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b3a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3a2:	f7ff ff79 	bl	800b298 <HAL_UART_TxCpltCallback>
}
 800b3a6:	bf00      	nop
 800b3a8:	3740      	adds	r7, #64	; 0x40
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff ff75 	bl	800b2ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b09c      	sub	sp, #112	; 0x70
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d172      	bne.n	800b4cc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b402:	66bb      	str	r3, [r7, #104]	; 0x68
 800b404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	330c      	adds	r3, #12
 800b40a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b40c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b40e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e5      	bne.n	800b3ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3314      	adds	r3, #20
 800b426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	f023 0301 	bic.w	r3, r3, #1
 800b436:	667b      	str	r3, [r7, #100]	; 0x64
 800b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3314      	adds	r3, #20
 800b43e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b440:	647a      	str	r2, [r7, #68]	; 0x44
 800b442:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e5      	bne.n	800b420 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3314      	adds	r3, #20
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	623b      	str	r3, [r7, #32]
   return(result);
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b46a:	663b      	str	r3, [r7, #96]	; 0x60
 800b46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3314      	adds	r3, #20
 800b472:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b474:	633a      	str	r2, [r7, #48]	; 0x30
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e5      	bne.n	800b454 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48a:	2220      	movs	r2, #32
 800b48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	2b01      	cmp	r3, #1
 800b496:	d119      	bne.n	800b4cc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	330c      	adds	r3, #12
 800b49e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 0310 	bic.w	r3, r3, #16
 800b4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	330c      	adds	r3, #12
 800b4b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4b8:	61fa      	str	r2, [r7, #28]
 800b4ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	69b9      	ldr	r1, [r7, #24]
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	e841 2300 	strex	r3, r2, [r1]
 800b4c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e5      	bne.n	800b498 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d106      	bne.n	800b4e2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4dc:	f7ff ff0e 	bl	800b2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4e0:	e002      	b.n	800b4e8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b4e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4e4:	f7ff feec 	bl	800b2c0 <HAL_UART_RxCpltCallback>
}
 800b4e8:	bf00      	nop
 800b4ea:	3770      	adds	r7, #112	; 0x70
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	2b01      	cmp	r3, #1
 800b504:	d108      	bne.n	800b518 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	4619      	mov	r1, r3
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff fef3 	bl	800b2fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b516:	e002      	b.n	800b51e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f7ff fedb 	bl	800b2d4 <HAL_UART_RxHalfCpltCallback>
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b542:	2b80      	cmp	r3, #128	; 0x80
 800b544:	bf0c      	ite	eq
 800b546:	2301      	moveq	r3, #1
 800b548:	2300      	movne	r3, #0
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b21      	cmp	r3, #33	; 0x21
 800b558:	d108      	bne.n	800b56c <UART_DMAError+0x46>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2200      	movs	r2, #0
 800b564:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b566:	68b8      	ldr	r0, [r7, #8]
 800b568:	f000 f8c6 	bl	800b6f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	bf0c      	ite	eq
 800b57a:	2301      	moveq	r3, #1
 800b57c:	2300      	movne	r3, #0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b22      	cmp	r3, #34	; 0x22
 800b58c:	d108      	bne.n	800b5a0 <UART_DMAError+0x7a>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2200      	movs	r2, #0
 800b598:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f000 f8d4 	bl	800b748 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a4:	f043 0210 	orr.w	r2, r3, #16
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ac:	68b8      	ldr	r0, [r7, #8]
 800b5ae:	f7ff fe9b 	bl	800b2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b098      	sub	sp, #96	; 0x60
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2222      	movs	r2, #34	; 0x22
 800b5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e8:	4a40      	ldr	r2, [pc, #256]	; (800b6ec <UART_Start_Receive_DMA+0x130>)
 800b5ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f0:	4a3f      	ldr	r2, [pc, #252]	; (800b6f0 <UART_Start_Receive_DMA+0x134>)
 800b5f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	4a3e      	ldr	r2, [pc, #248]	; (800b6f4 <UART_Start_Receive_DMA+0x138>)
 800b5fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	2200      	movs	r2, #0
 800b602:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	88fb      	ldrh	r3, [r7, #6]
 800b61c:	f7fa fbc2 	bl	8005da4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b620:	2300      	movs	r3, #0
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	613b      	str	r3, [r7, #16]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d019      	beq.n	800b67a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	330c      	adds	r3, #12
 800b64c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b65c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	330c      	adds	r3, #12
 800b664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b666:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b668:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b66c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e5      	bne.n	800b646 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3314      	adds	r3, #20
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	f043 0301 	orr.w	r3, r3, #1
 800b690:	657b      	str	r3, [r7, #84]	; 0x54
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3314      	adds	r3, #20
 800b698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b69a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b69c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e5      	bne.n	800b67a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3314      	adds	r3, #20
 800b6b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c4:	653b      	str	r3, [r7, #80]	; 0x50
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3314      	adds	r3, #20
 800b6cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6ce:	627a      	str	r2, [r7, #36]	; 0x24
 800b6d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6a39      	ldr	r1, [r7, #32]
 800b6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e5      	bne.n	800b6ae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3760      	adds	r7, #96	; 0x60
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	0800b3cb 	.word	0x0800b3cb
 800b6f0:	0800b4f1 	.word	0x0800b4f1
 800b6f4:	0800b527 	.word	0x0800b527

0800b6f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b089      	sub	sp, #36	; 0x24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	330c      	adds	r3, #12
 800b706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	330c      	adds	r3, #12
 800b71e:	69fa      	ldr	r2, [r7, #28]
 800b720:	61ba      	str	r2, [r7, #24]
 800b722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b724:	6979      	ldr	r1, [r7, #20]
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	e841 2300 	strex	r3, r2, [r1]
 800b72c:	613b      	str	r3, [r7, #16]
   return(result);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1e5      	bne.n	800b700 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2220      	movs	r2, #32
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b73c:	bf00      	nop
 800b73e:	3724      	adds	r7, #36	; 0x24
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b748:	b480      	push	{r7}
 800b74a:	b095      	sub	sp, #84	; 0x54
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	330c      	adds	r3, #12
 800b756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	330c      	adds	r3, #12
 800b76e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b770:	643a      	str	r2, [r7, #64]	; 0x40
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e5      	bne.n	800b750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3314      	adds	r3, #20
 800b78a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	61fb      	str	r3, [r7, #28]
   return(result);
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	f023 0301 	bic.w	r3, r3, #1
 800b79a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3314      	adds	r3, #20
 800b7a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e5      	bne.n	800b784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d119      	bne.n	800b7f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	330c      	adds	r3, #12
 800b7c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f023 0310 	bic.w	r3, r3, #16
 800b7d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7e0:	61ba      	str	r2, [r7, #24]
 800b7e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	6979      	ldr	r1, [r7, #20]
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e5      	bne.n	800b7c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b802:	bf00      	nop
 800b804:	3754      	adds	r7, #84	; 0x54
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff fd5d 	bl	800b2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b836:	b480      	push	{r7}
 800b838:	b085      	sub	sp, #20
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b21      	cmp	r3, #33	; 0x21
 800b848:	d13e      	bne.n	800b8c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b852:	d114      	bne.n	800b87e <UART_Transmit_IT+0x48>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d110      	bne.n	800b87e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b870:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	1c9a      	adds	r2, r3, #2
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	621a      	str	r2, [r3, #32]
 800b87c:	e008      	b.n	800b890 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	1c59      	adds	r1, r3, #1
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	6211      	str	r1, [r2, #32]
 800b888:	781a      	ldrb	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b894:	b29b      	uxth	r3, r3
 800b896:	3b01      	subs	r3, #1
 800b898:	b29b      	uxth	r3, r3
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	4619      	mov	r1, r3
 800b89e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10f      	bne.n	800b8c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68da      	ldr	r2, [r3, #12]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e000      	b.n	800b8ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8c8:	2302      	movs	r3, #2
  }
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff fcce 	bl	800b298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b08c      	sub	sp, #48	; 0x30
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b22      	cmp	r3, #34	; 0x22
 800b918:	f040 80ab 	bne.w	800ba72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b924:	d117      	bne.n	800b956 <UART_Receive_IT+0x50>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d113      	bne.n	800b956 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b944:	b29a      	uxth	r2, r3
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94e:	1c9a      	adds	r2, r3, #2
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	629a      	str	r2, [r3, #40]	; 0x28
 800b954:	e026      	b.n	800b9a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b95c:	2300      	movs	r3, #0
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b968:	d007      	beq.n	800b97a <UART_Receive_IT+0x74>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <UART_Receive_IT+0x82>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	b2da      	uxtb	r2, r3
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	e008      	b.n	800b99a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b994:	b2da      	uxtb	r2, r3
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d15a      	bne.n	800ba6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0220 	bic.w	r2, r2, #32
 800b9c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	695a      	ldr	r2, [r3, #20]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 0201 	bic.w	r2, r2, #1
 800b9e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d135      	bne.n	800ba64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	330c      	adds	r3, #12
 800ba04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f023 0310 	bic.w	r3, r3, #16
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	330c      	adds	r3, #12
 800ba1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1e:	623a      	str	r2, [r7, #32]
 800ba20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	69f9      	ldr	r1, [r7, #28]
 800ba24:	6a3a      	ldr	r2, [r7, #32]
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e5      	bne.n	800b9fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b10      	cmp	r3, #16
 800ba3e:	d10a      	bne.n	800ba56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff fc4d 	bl	800b2fc <HAL_UARTEx_RxEventCallback>
 800ba62:	e002      	b.n	800ba6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff fc2b 	bl	800b2c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e002      	b.n	800ba74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e000      	b.n	800ba74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba72:	2302      	movs	r3, #2
  }
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3730      	adds	r7, #48	; 0x30
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba80:	b0c0      	sub	sp, #256	; 0x100
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba98:	68d9      	ldr	r1, [r3, #12]
 800ba9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	ea40 0301 	orr.w	r3, r0, r1
 800baa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800baa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baaa:	689a      	ldr	r2, [r3, #8]
 800baac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	431a      	orrs	r2, r3
 800bab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	431a      	orrs	r2, r3
 800babc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bad4:	f021 010c 	bic.w	r1, r1, #12
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bae2:	430b      	orrs	r3, r1
 800bae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800baf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf6:	6999      	ldr	r1, [r3, #24]
 800baf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	ea40 0301 	orr.w	r3, r0, r1
 800bb02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	4b8f      	ldr	r3, [pc, #572]	; (800bd48 <UART_SetConfig+0x2cc>)
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d005      	beq.n	800bb1c <UART_SetConfig+0xa0>
 800bb10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b8d      	ldr	r3, [pc, #564]	; (800bd4c <UART_SetConfig+0x2d0>)
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d104      	bne.n	800bb26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb1c:	f7fd fdfa 	bl	8009714 <HAL_RCC_GetPCLK2Freq>
 800bb20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb24:	e003      	b.n	800bb2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb26:	f7fd fde1 	bl	80096ec <HAL_RCC_GetPCLK1Freq>
 800bb2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb38:	f040 810c 	bne.w	800bd54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb4e:	4622      	mov	r2, r4
 800bb50:	462b      	mov	r3, r5
 800bb52:	1891      	adds	r1, r2, r2
 800bb54:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb56:	415b      	adcs	r3, r3
 800bb58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb5e:	4621      	mov	r1, r4
 800bb60:	eb12 0801 	adds.w	r8, r2, r1
 800bb64:	4629      	mov	r1, r5
 800bb66:	eb43 0901 	adc.w	r9, r3, r1
 800bb6a:	f04f 0200 	mov.w	r2, #0
 800bb6e:	f04f 0300 	mov.w	r3, #0
 800bb72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb7e:	4690      	mov	r8, r2
 800bb80:	4699      	mov	r9, r3
 800bb82:	4623      	mov	r3, r4
 800bb84:	eb18 0303 	adds.w	r3, r8, r3
 800bb88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	eb49 0303 	adc.w	r3, r9, r3
 800bb92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bba2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbaa:	460b      	mov	r3, r1
 800bbac:	18db      	adds	r3, r3, r3
 800bbae:	653b      	str	r3, [r7, #80]	; 0x50
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	eb42 0303 	adc.w	r3, r2, r3
 800bbb6:	657b      	str	r3, [r7, #84]	; 0x54
 800bbb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bbbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bbc0:	f7f4 ffe6 	bl	8000b90 <__aeabi_uldivmod>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4b61      	ldr	r3, [pc, #388]	; (800bd50 <UART_SetConfig+0x2d4>)
 800bbca:	fba3 2302 	umull	r2, r3, r3, r2
 800bbce:	095b      	lsrs	r3, r3, #5
 800bbd0:	011c      	lsls	r4, r3, #4
 800bbd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bbe0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	464b      	mov	r3, r9
 800bbe8:	1891      	adds	r1, r2, r2
 800bbea:	64b9      	str	r1, [r7, #72]	; 0x48
 800bbec:	415b      	adcs	r3, r3
 800bbee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	eb12 0a01 	adds.w	sl, r2, r1
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	eb43 0b01 	adc.w	fp, r3, r1
 800bc00:	f04f 0200 	mov.w	r2, #0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc14:	4692      	mov	sl, r2
 800bc16:	469b      	mov	fp, r3
 800bc18:	4643      	mov	r3, r8
 800bc1a:	eb1a 0303 	adds.w	r3, sl, r3
 800bc1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc22:	464b      	mov	r3, r9
 800bc24:	eb4b 0303 	adc.w	r3, fp, r3
 800bc28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc40:	460b      	mov	r3, r1
 800bc42:	18db      	adds	r3, r3, r3
 800bc44:	643b      	str	r3, [r7, #64]	; 0x40
 800bc46:	4613      	mov	r3, r2
 800bc48:	eb42 0303 	adc.w	r3, r2, r3
 800bc4c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc56:	f7f4 ff9b 	bl	8000b90 <__aeabi_uldivmod>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4611      	mov	r1, r2
 800bc60:	4b3b      	ldr	r3, [pc, #236]	; (800bd50 <UART_SetConfig+0x2d4>)
 800bc62:	fba3 2301 	umull	r2, r3, r3, r1
 800bc66:	095b      	lsrs	r3, r3, #5
 800bc68:	2264      	movs	r2, #100	; 0x64
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	1acb      	subs	r3, r1, r3
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc76:	4b36      	ldr	r3, [pc, #216]	; (800bd50 <UART_SetConfig+0x2d4>)
 800bc78:	fba3 2302 	umull	r2, r3, r3, r2
 800bc7c:	095b      	lsrs	r3, r3, #5
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc84:	441c      	add	r4, r3
 800bc86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bc98:	4642      	mov	r2, r8
 800bc9a:	464b      	mov	r3, r9
 800bc9c:	1891      	adds	r1, r2, r2
 800bc9e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bca0:	415b      	adcs	r3, r3
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bca8:	4641      	mov	r1, r8
 800bcaa:	1851      	adds	r1, r2, r1
 800bcac:	6339      	str	r1, [r7, #48]	; 0x30
 800bcae:	4649      	mov	r1, r9
 800bcb0:	414b      	adcs	r3, r1
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	f04f 0200 	mov.w	r2, #0
 800bcb8:	f04f 0300 	mov.w	r3, #0
 800bcbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bcc0:	4659      	mov	r1, fp
 800bcc2:	00cb      	lsls	r3, r1, #3
 800bcc4:	4651      	mov	r1, sl
 800bcc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcca:	4651      	mov	r1, sl
 800bccc:	00ca      	lsls	r2, r1, #3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4642      	mov	r2, r8
 800bcd6:	189b      	adds	r3, r3, r2
 800bcd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcdc:	464b      	mov	r3, r9
 800bcde:	460a      	mov	r2, r1
 800bce0:	eb42 0303 	adc.w	r3, r2, r3
 800bce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bcf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	18db      	adds	r3, r3, r3
 800bd00:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd02:	4613      	mov	r3, r2
 800bd04:	eb42 0303 	adc.w	r3, r2, r3
 800bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd12:	f7f4 ff3d 	bl	8000b90 <__aeabi_uldivmod>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4b0d      	ldr	r3, [pc, #52]	; (800bd50 <UART_SetConfig+0x2d4>)
 800bd1c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd20:	095b      	lsrs	r3, r3, #5
 800bd22:	2164      	movs	r1, #100	; 0x64
 800bd24:	fb01 f303 	mul.w	r3, r1, r3
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	3332      	adds	r3, #50	; 0x32
 800bd2e:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <UART_SetConfig+0x2d4>)
 800bd30:	fba2 2303 	umull	r2, r3, r2, r3
 800bd34:	095b      	lsrs	r3, r3, #5
 800bd36:	f003 0207 	and.w	r2, r3, #7
 800bd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4422      	add	r2, r4
 800bd42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd44:	e105      	b.n	800bf52 <UART_SetConfig+0x4d6>
 800bd46:	bf00      	nop
 800bd48:	40011000 	.word	0x40011000
 800bd4c:	40011400 	.word	0x40011400
 800bd50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd66:	4642      	mov	r2, r8
 800bd68:	464b      	mov	r3, r9
 800bd6a:	1891      	adds	r1, r2, r2
 800bd6c:	6239      	str	r1, [r7, #32]
 800bd6e:	415b      	adcs	r3, r3
 800bd70:	627b      	str	r3, [r7, #36]	; 0x24
 800bd72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd76:	4641      	mov	r1, r8
 800bd78:	1854      	adds	r4, r2, r1
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	eb43 0501 	adc.w	r5, r3, r1
 800bd80:	f04f 0200 	mov.w	r2, #0
 800bd84:	f04f 0300 	mov.w	r3, #0
 800bd88:	00eb      	lsls	r3, r5, #3
 800bd8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd8e:	00e2      	lsls	r2, r4, #3
 800bd90:	4614      	mov	r4, r2
 800bd92:	461d      	mov	r5, r3
 800bd94:	4643      	mov	r3, r8
 800bd96:	18e3      	adds	r3, r4, r3
 800bd98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	eb45 0303 	adc.w	r3, r5, r3
 800bda2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdb6:	f04f 0200 	mov.w	r2, #0
 800bdba:	f04f 0300 	mov.w	r3, #0
 800bdbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	008b      	lsls	r3, r1, #2
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdcc:	4621      	mov	r1, r4
 800bdce:	008a      	lsls	r2, r1, #2
 800bdd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bdd4:	f7f4 fedc 	bl	8000b90 <__aeabi_uldivmod>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4b60      	ldr	r3, [pc, #384]	; (800bf60 <UART_SetConfig+0x4e4>)
 800bdde:	fba3 2302 	umull	r2, r3, r3, r2
 800bde2:	095b      	lsrs	r3, r3, #5
 800bde4:	011c      	lsls	r4, r3, #4
 800bde6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bdf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	1891      	adds	r1, r2, r2
 800bdfe:	61b9      	str	r1, [r7, #24]
 800be00:	415b      	adcs	r3, r3
 800be02:	61fb      	str	r3, [r7, #28]
 800be04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be08:	4641      	mov	r1, r8
 800be0a:	1851      	adds	r1, r2, r1
 800be0c:	6139      	str	r1, [r7, #16]
 800be0e:	4649      	mov	r1, r9
 800be10:	414b      	adcs	r3, r1
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	f04f 0300 	mov.w	r3, #0
 800be1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be20:	4659      	mov	r1, fp
 800be22:	00cb      	lsls	r3, r1, #3
 800be24:	4651      	mov	r1, sl
 800be26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be2a:	4651      	mov	r1, sl
 800be2c:	00ca      	lsls	r2, r1, #3
 800be2e:	4610      	mov	r0, r2
 800be30:	4619      	mov	r1, r3
 800be32:	4603      	mov	r3, r0
 800be34:	4642      	mov	r2, r8
 800be36:	189b      	adds	r3, r3, r2
 800be38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be3c:	464b      	mov	r3, r9
 800be3e:	460a      	mov	r2, r1
 800be40:	eb42 0303 	adc.w	r3, r2, r3
 800be44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	67bb      	str	r3, [r7, #120]	; 0x78
 800be52:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	f04f 0300 	mov.w	r3, #0
 800be5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be60:	4649      	mov	r1, r9
 800be62:	008b      	lsls	r3, r1, #2
 800be64:	4641      	mov	r1, r8
 800be66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be6a:	4641      	mov	r1, r8
 800be6c:	008a      	lsls	r2, r1, #2
 800be6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be72:	f7f4 fe8d 	bl	8000b90 <__aeabi_uldivmod>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4b39      	ldr	r3, [pc, #228]	; (800bf60 <UART_SetConfig+0x4e4>)
 800be7c:	fba3 1302 	umull	r1, r3, r3, r2
 800be80:	095b      	lsrs	r3, r3, #5
 800be82:	2164      	movs	r1, #100	; 0x64
 800be84:	fb01 f303 	mul.w	r3, r1, r3
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	011b      	lsls	r3, r3, #4
 800be8c:	3332      	adds	r3, #50	; 0x32
 800be8e:	4a34      	ldr	r2, [pc, #208]	; (800bf60 <UART_SetConfig+0x4e4>)
 800be90:	fba2 2303 	umull	r2, r3, r2, r3
 800be94:	095b      	lsrs	r3, r3, #5
 800be96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be9a:	441c      	add	r4, r3
 800be9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bea0:	2200      	movs	r2, #0
 800bea2:	673b      	str	r3, [r7, #112]	; 0x70
 800bea4:	677a      	str	r2, [r7, #116]	; 0x74
 800bea6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800beaa:	4642      	mov	r2, r8
 800beac:	464b      	mov	r3, r9
 800beae:	1891      	adds	r1, r2, r2
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	415b      	adcs	r3, r3
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800beba:	4641      	mov	r1, r8
 800bebc:	1851      	adds	r1, r2, r1
 800bebe:	6039      	str	r1, [r7, #0]
 800bec0:	4649      	mov	r1, r9
 800bec2:	414b      	adcs	r3, r1
 800bec4:	607b      	str	r3, [r7, #4]
 800bec6:	f04f 0200 	mov.w	r2, #0
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bed2:	4659      	mov	r1, fp
 800bed4:	00cb      	lsls	r3, r1, #3
 800bed6:	4651      	mov	r1, sl
 800bed8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bedc:	4651      	mov	r1, sl
 800bede:	00ca      	lsls	r2, r1, #3
 800bee0:	4610      	mov	r0, r2
 800bee2:	4619      	mov	r1, r3
 800bee4:	4603      	mov	r3, r0
 800bee6:	4642      	mov	r2, r8
 800bee8:	189b      	adds	r3, r3, r2
 800beea:	66bb      	str	r3, [r7, #104]	; 0x68
 800beec:	464b      	mov	r3, r9
 800beee:	460a      	mov	r2, r1
 800bef0:	eb42 0303 	adc.w	r3, r2, r3
 800bef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	663b      	str	r3, [r7, #96]	; 0x60
 800bf00:	667a      	str	r2, [r7, #100]	; 0x64
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf0e:	4649      	mov	r1, r9
 800bf10:	008b      	lsls	r3, r1, #2
 800bf12:	4641      	mov	r1, r8
 800bf14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf18:	4641      	mov	r1, r8
 800bf1a:	008a      	lsls	r2, r1, #2
 800bf1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf20:	f7f4 fe36 	bl	8000b90 <__aeabi_uldivmod>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <UART_SetConfig+0x4e4>)
 800bf2a:	fba3 1302 	umull	r1, r3, r3, r2
 800bf2e:	095b      	lsrs	r3, r3, #5
 800bf30:	2164      	movs	r1, #100	; 0x64
 800bf32:	fb01 f303 	mul.w	r3, r1, r3
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	3332      	adds	r3, #50	; 0x32
 800bf3c:	4a08      	ldr	r2, [pc, #32]	; (800bf60 <UART_SetConfig+0x4e4>)
 800bf3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf42:	095b      	lsrs	r3, r3, #5
 800bf44:	f003 020f 	and.w	r2, r3, #15
 800bf48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4422      	add	r2, r4
 800bf50:	609a      	str	r2, [r3, #8]
}
 800bf52:	bf00      	nop
 800bf54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf5e:	bf00      	nop
 800bf60:	51eb851f 	.word	0x51eb851f

0800bf64 <arm_mat_trans_f32>:
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	8802      	ldrh	r2, [r0, #0]
 800bf6a:	884b      	ldrh	r3, [r1, #2]
 800bf6c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bf70:	684f      	ldr	r7, [r1, #4]
 800bf72:	8840      	ldrh	r0, [r0, #2]
 800bf74:	4293      	cmp	r3, r2
 800bf76:	b083      	sub	sp, #12
 800bf78:	d14c      	bne.n	800c014 <arm_mat_trans_f32+0xb0>
 800bf7a:	f8b1 e000 	ldrh.w	lr, [r1]
 800bf7e:	4586      	cmp	lr, r0
 800bf80:	d148      	bne.n	800c014 <arm_mat_trans_f32+0xb0>
 800bf82:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800bf86:	009c      	lsls	r4, r3, #2
 800bf88:	f00e 0e03 	and.w	lr, lr, #3
 800bf8c:	fb08 f904 	mul.w	r9, r8, r4
 800bf90:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800bf94:	011d      	lsls	r5, r3, #4
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bf9c:	eb07 0a04 	add.w	sl, r7, r4
 800bfa0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800bfa4:	9201      	str	r2, [sp, #4]
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	f1b8 0f00 	cmp.w	r8, #0
 800bfae:	d01d      	beq.n	800bfec <arm_mat_trans_f32+0x88>
 800bfb0:	9900      	ldr	r1, [sp, #0]
 800bfb2:	f10c 0210 	add.w	r2, ip, #16
 800bfb6:	4439      	add	r1, r7
 800bfb8:	4640      	mov	r0, r8
 800bfba:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800bfbe:	601e      	str	r6, [r3, #0]
 800bfc0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800bfc4:	191e      	adds	r6, r3, r4
 800bfc6:	edc6 7a00 	vstr	s15, [r6]
 800bfca:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800bfce:	600e      	str	r6, [r1, #0]
 800bfd0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800bfd4:	190e      	adds	r6, r1, r4
 800bfd6:	3801      	subs	r0, #1
 800bfd8:	442b      	add	r3, r5
 800bfda:	f102 0210 	add.w	r2, r2, #16
 800bfde:	edc6 7a00 	vstr	s15, [r6]
 800bfe2:	4429      	add	r1, r5
 800bfe4:	d1e9      	bne.n	800bfba <arm_mat_trans_f32+0x56>
 800bfe6:	44dc      	add	ip, fp
 800bfe8:	eb09 0307 	add.w	r3, r9, r7
 800bfec:	f1be 0f00 	cmp.w	lr, #0
 800bff0:	d009      	beq.n	800c006 <arm_mat_trans_f32+0xa2>
 800bff2:	4672      	mov	r2, lr
 800bff4:	4661      	mov	r1, ip
 800bff6:	f851 0b04 	ldr.w	r0, [r1], #4
 800bffa:	6018      	str	r0, [r3, #0]
 800bffc:	3a01      	subs	r2, #1
 800bffe:	4423      	add	r3, r4
 800c000:	d1f9      	bne.n	800bff6 <arm_mat_trans_f32+0x92>
 800c002:	9b01      	ldr	r3, [sp, #4]
 800c004:	449c      	add	ip, r3
 800c006:	3704      	adds	r7, #4
 800c008:	4557      	cmp	r7, sl
 800c00a:	d1cd      	bne.n	800bfa8 <arm_mat_trans_f32+0x44>
 800c00c:	2000      	movs	r0, #0
 800c00e:	b003      	add	sp, #12
 800c010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c014:	f06f 0002 	mvn.w	r0, #2
 800c018:	e7f9      	b.n	800c00e <arm_mat_trans_f32+0xaa>
 800c01a:	bf00      	nop

0800c01c <arm_mat_sub_f32>:
 800c01c:	b4f0      	push	{r4, r5, r6, r7}
 800c01e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c022:	6803      	ldr	r3, [r0, #0]
 800c024:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c028:	6856      	ldr	r6, [r2, #4]
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	d15d      	bne.n	800c0ea <arm_mat_sub_f32+0xce>
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	4293      	cmp	r3, r2
 800c032:	d15a      	bne.n	800c0ea <arm_mat_sub_f32+0xce>
 800c034:	8803      	ldrh	r3, [r0, #0]
 800c036:	8844      	ldrh	r4, [r0, #2]
 800c038:	fb04 f403 	mul.w	r4, r4, r3
 800c03c:	08a5      	lsrs	r5, r4, #2
 800c03e:	d032      	beq.n	800c0a6 <arm_mat_sub_f32+0x8a>
 800c040:	f10c 0110 	add.w	r1, ip, #16
 800c044:	f107 0210 	add.w	r2, r7, #16
 800c048:	f106 0310 	add.w	r3, r6, #16
 800c04c:	4628      	mov	r0, r5
 800c04e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c052:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c05a:	3801      	subs	r0, #1
 800c05c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c060:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c064:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c06c:	f101 0110 	add.w	r1, r1, #16
 800c070:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c074:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c078:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c07c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c080:	f102 0210 	add.w	r2, r2, #16
 800c084:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c088:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c08c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c094:	f103 0310 	add.w	r3, r3, #16
 800c098:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c09c:	d1d7      	bne.n	800c04e <arm_mat_sub_f32+0x32>
 800c09e:	012b      	lsls	r3, r5, #4
 800c0a0:	449c      	add	ip, r3
 800c0a2:	441f      	add	r7, r3
 800c0a4:	441e      	add	r6, r3
 800c0a6:	f014 0403 	ands.w	r4, r4, #3
 800c0aa:	d01b      	beq.n	800c0e4 <arm_mat_sub_f32+0xc8>
 800c0ac:	eddc 7a00 	vldr	s15, [ip]
 800c0b0:	ed97 7a00 	vldr	s14, [r7]
 800c0b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0b8:	3c01      	subs	r4, #1
 800c0ba:	edc6 7a00 	vstr	s15, [r6]
 800c0be:	d011      	beq.n	800c0e4 <arm_mat_sub_f32+0xc8>
 800c0c0:	eddc 7a01 	vldr	s15, [ip, #4]
 800c0c4:	ed97 7a01 	vldr	s14, [r7, #4]
 800c0c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0cc:	2c01      	cmp	r4, #1
 800c0ce:	edc6 7a01 	vstr	s15, [r6, #4]
 800c0d2:	d007      	beq.n	800c0e4 <arm_mat_sub_f32+0xc8>
 800c0d4:	eddc 7a02 	vldr	s15, [ip, #8]
 800c0d8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c0dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0e0:	edc6 7a02 	vstr	s15, [r6, #8]
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0e8:	4770      	bx	lr
 800c0ea:	f06f 0002 	mvn.w	r0, #2
 800c0ee:	e7fa      	b.n	800c0e6 <arm_mat_sub_f32+0xca>

0800c0f0 <arm_mat_mult_f32>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	8845      	ldrh	r5, [r0, #2]
 800c0f6:	880b      	ldrh	r3, [r1, #0]
 800c0f8:	8806      	ldrh	r6, [r0, #0]
 800c0fa:	6847      	ldr	r7, [r0, #4]
 800c0fc:	6854      	ldr	r4, [r2, #4]
 800c0fe:	6848      	ldr	r0, [r1, #4]
 800c100:	b08b      	sub	sp, #44	; 0x2c
 800c102:	42ab      	cmp	r3, r5
 800c104:	9109      	str	r1, [sp, #36]	; 0x24
 800c106:	9604      	str	r6, [sp, #16]
 800c108:	8849      	ldrh	r1, [r1, #2]
 800c10a:	f040 808a 	bne.w	800c222 <arm_mat_mult_f32+0x132>
 800c10e:	8815      	ldrh	r5, [r2, #0]
 800c110:	42b5      	cmp	r5, r6
 800c112:	f040 8086 	bne.w	800c222 <arm_mat_mult_f32+0x132>
 800c116:	8852      	ldrh	r2, [r2, #2]
 800c118:	428a      	cmp	r2, r1
 800c11a:	f040 8082 	bne.w	800c222 <arm_mat_mult_f32+0x132>
 800c11e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800c122:	1d01      	adds	r1, r0, #4
 800c124:	0116      	lsls	r6, r2, #4
 800c126:	9108      	str	r1, [sp, #32]
 800c128:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800c12c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800c130:	9101      	str	r1, [sp, #4]
 800c132:	fb06 f108 	mul.w	r1, r6, r8
 800c136:	0095      	lsls	r5, r2, #2
 800c138:	9103      	str	r1, [sp, #12]
 800c13a:	00d2      	lsls	r2, r2, #3
 800c13c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800c140:	f003 0903 	and.w	r9, r3, #3
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	f107 0b10 	add.w	fp, r7, #16
 800c14a:	eb04 0a05 	add.w	sl, r4, r5
 800c14e:	9107      	str	r1, [sp, #28]
 800c150:	9202      	str	r2, [sp, #8]
 800c152:	9306      	str	r3, [sp, #24]
 800c154:	f1ab 0310 	sub.w	r3, fp, #16
 800c158:	9305      	str	r3, [sp, #20]
 800c15a:	9b07      	ldr	r3, [sp, #28]
 800c15c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c160:	eb03 0c0a 	add.w	ip, r3, sl
 800c164:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c22c <arm_mat_mult_f32+0x13c>
 800c168:	f1b8 0f00 	cmp.w	r8, #0
 800c16c:	d053      	beq.n	800c216 <arm_mat_mult_f32+0x126>
 800c16e:	9b02      	ldr	r3, [sp, #8]
 800c170:	4644      	mov	r4, r8
 800c172:	18c1      	adds	r1, r0, r3
 800c174:	4602      	mov	r2, r0
 800c176:	465b      	mov	r3, fp
 800c178:	ed92 6a00 	vldr	s12, [r2]
 800c17c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c180:	ed53 4a03 	vldr	s9, [r3, #-12]
 800c184:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c188:	ed91 5a00 	vldr	s10, [r1]
 800c18c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800c190:	1957      	adds	r7, r2, r5
 800c192:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c196:	ed97 6a00 	vldr	s12, [r7]
 800c19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c19e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c1a2:	194f      	adds	r7, r1, r5
 800c1a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c1a8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800c1ac:	edd7 7a00 	vldr	s15, [r7]
 800c1b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c1b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c1b8:	3c01      	subs	r4, #1
 800c1ba:	4432      	add	r2, r6
 800c1bc:	4431      	add	r1, r6
 800c1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1c2:	f103 0310 	add.w	r3, r3, #16
 800c1c6:	d1d7      	bne.n	800c178 <arm_mat_mult_f32+0x88>
 800c1c8:	9b03      	ldr	r3, [sp, #12]
 800c1ca:	9a01      	ldr	r2, [sp, #4]
 800c1cc:	4418      	add	r0, r3
 800c1ce:	f1b9 0f00 	cmp.w	r9, #0
 800c1d2:	d00b      	beq.n	800c1ec <arm_mat_mult_f32+0xfc>
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	edd0 6a00 	vldr	s13, [r0]
 800c1da:	ecb2 7a01 	vldmia	r2!, {s14}
 800c1de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	4428      	add	r0, r5
 800c1e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1ea:	d1f4      	bne.n	800c1d6 <arm_mat_mult_f32+0xe6>
 800c1ec:	ecec 7a01 	vstmia	ip!, {s15}
 800c1f0:	45d4      	cmp	ip, sl
 800c1f2:	4670      	mov	r0, lr
 800c1f4:	f10e 0e04 	add.w	lr, lr, #4
 800c1f8:	d1b4      	bne.n	800c164 <arm_mat_mult_f32+0x74>
 800c1fa:	9a01      	ldr	r2, [sp, #4]
 800c1fc:	9b06      	ldr	r3, [sp, #24]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4419      	add	r1, r3
 800c202:	449b      	add	fp, r3
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	9101      	str	r1, [sp, #4]
 800c208:	3b01      	subs	r3, #1
 800c20a:	44aa      	add	sl, r5
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	d004      	beq.n	800c21a <arm_mat_mult_f32+0x12a>
 800c210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c212:	6858      	ldr	r0, [r3, #4]
 800c214:	e79e      	b.n	800c154 <arm_mat_mult_f32+0x64>
 800c216:	9a05      	ldr	r2, [sp, #20]
 800c218:	e7d9      	b.n	800c1ce <arm_mat_mult_f32+0xde>
 800c21a:	4618      	mov	r0, r3
 800c21c:	b00b      	add	sp, #44	; 0x2c
 800c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c222:	f06f 0002 	mvn.w	r0, #2
 800c226:	b00b      	add	sp, #44	; 0x2c
 800c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22c:	00000000 	.word	0x00000000

0800c230 <arm_mat_init_f32>:
 800c230:	8001      	strh	r1, [r0, #0]
 800c232:	8042      	strh	r2, [r0, #2]
 800c234:	6043      	str	r3, [r0, #4]
 800c236:	4770      	bx	lr

0800c238 <arm_mat_add_f32>:
 800c238:	b4f0      	push	{r4, r5, r6, r7}
 800c23a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c23e:	6803      	ldr	r3, [r0, #0]
 800c240:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c244:	6856      	ldr	r6, [r2, #4]
 800c246:	42a3      	cmp	r3, r4
 800c248:	d15d      	bne.n	800c306 <arm_mat_add_f32+0xce>
 800c24a:	6812      	ldr	r2, [r2, #0]
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d15a      	bne.n	800c306 <arm_mat_add_f32+0xce>
 800c250:	8803      	ldrh	r3, [r0, #0]
 800c252:	8844      	ldrh	r4, [r0, #2]
 800c254:	fb04 f403 	mul.w	r4, r4, r3
 800c258:	08a5      	lsrs	r5, r4, #2
 800c25a:	d032      	beq.n	800c2c2 <arm_mat_add_f32+0x8a>
 800c25c:	f10c 0110 	add.w	r1, ip, #16
 800c260:	f107 0210 	add.w	r2, r7, #16
 800c264:	f106 0310 	add.w	r3, r6, #16
 800c268:	4628      	mov	r0, r5
 800c26a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c26e:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c272:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c276:	3801      	subs	r0, #1
 800c278:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c27c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c280:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c284:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c288:	f101 0110 	add.w	r1, r1, #16
 800c28c:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c290:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c294:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c298:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c29c:	f102 0210 	add.w	r2, r2, #16
 800c2a0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c2a4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c2a8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c2ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2b0:	f103 0310 	add.w	r3, r3, #16
 800c2b4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c2b8:	d1d7      	bne.n	800c26a <arm_mat_add_f32+0x32>
 800c2ba:	012b      	lsls	r3, r5, #4
 800c2bc:	449c      	add	ip, r3
 800c2be:	441f      	add	r7, r3
 800c2c0:	441e      	add	r6, r3
 800c2c2:	f014 0403 	ands.w	r4, r4, #3
 800c2c6:	d01b      	beq.n	800c300 <arm_mat_add_f32+0xc8>
 800c2c8:	edd7 7a00 	vldr	s15, [r7]
 800c2cc:	ed9c 7a00 	vldr	s14, [ip]
 800c2d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2d4:	3c01      	subs	r4, #1
 800c2d6:	edc6 7a00 	vstr	s15, [r6]
 800c2da:	d011      	beq.n	800c300 <arm_mat_add_f32+0xc8>
 800c2dc:	eddc 7a01 	vldr	s15, [ip, #4]
 800c2e0:	ed97 7a01 	vldr	s14, [r7, #4]
 800c2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2e8:	2c01      	cmp	r4, #1
 800c2ea:	edc6 7a01 	vstr	s15, [r6, #4]
 800c2ee:	d007      	beq.n	800c300 <arm_mat_add_f32+0xc8>
 800c2f0:	eddc 7a02 	vldr	s15, [ip, #8]
 800c2f4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c2f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2fc:	edc6 7a02 	vstr	s15, [r6, #8]
 800c300:	2000      	movs	r0, #0
 800c302:	bcf0      	pop	{r4, r5, r6, r7}
 800c304:	4770      	bx	lr
 800c306:	f06f 0002 	mvn.w	r0, #2
 800c30a:	e7fa      	b.n	800c302 <arm_mat_add_f32+0xca>

0800c30c <__errno>:
 800c30c:	4b01      	ldr	r3, [pc, #4]	; (800c314 <__errno+0x8>)
 800c30e:	6818      	ldr	r0, [r3, #0]
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	200000e0 	.word	0x200000e0

0800c318 <__libc_init_array>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	4d0d      	ldr	r5, [pc, #52]	; (800c350 <__libc_init_array+0x38>)
 800c31c:	4c0d      	ldr	r4, [pc, #52]	; (800c354 <__libc_init_array+0x3c>)
 800c31e:	1b64      	subs	r4, r4, r5
 800c320:	10a4      	asrs	r4, r4, #2
 800c322:	2600      	movs	r6, #0
 800c324:	42a6      	cmp	r6, r4
 800c326:	d109      	bne.n	800c33c <__libc_init_array+0x24>
 800c328:	4d0b      	ldr	r5, [pc, #44]	; (800c358 <__libc_init_array+0x40>)
 800c32a:	4c0c      	ldr	r4, [pc, #48]	; (800c35c <__libc_init_array+0x44>)
 800c32c:	f000 ffea 	bl	800d304 <_init>
 800c330:	1b64      	subs	r4, r4, r5
 800c332:	10a4      	asrs	r4, r4, #2
 800c334:	2600      	movs	r6, #0
 800c336:	42a6      	cmp	r6, r4
 800c338:	d105      	bne.n	800c346 <__libc_init_array+0x2e>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c340:	4798      	blx	r3
 800c342:	3601      	adds	r6, #1
 800c344:	e7ee      	b.n	800c324 <__libc_init_array+0xc>
 800c346:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34a:	4798      	blx	r3
 800c34c:	3601      	adds	r6, #1
 800c34e:	e7f2      	b.n	800c336 <__libc_init_array+0x1e>
 800c350:	0800d378 	.word	0x0800d378
 800c354:	0800d378 	.word	0x0800d378
 800c358:	0800d378 	.word	0x0800d378
 800c35c:	0800d37c 	.word	0x0800d37c

0800c360 <memset>:
 800c360:	4402      	add	r2, r0
 800c362:	4603      	mov	r3, r0
 800c364:	4293      	cmp	r3, r2
 800c366:	d100      	bne.n	800c36a <memset+0xa>
 800c368:	4770      	bx	lr
 800c36a:	f803 1b01 	strb.w	r1, [r3], #1
 800c36e:	e7f9      	b.n	800c364 <memset+0x4>

0800c370 <ceil>:
 800c370:	ec51 0b10 	vmov	r0, r1, d0
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c37c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c380:	2e13      	cmp	r6, #19
 800c382:	ee10 5a10 	vmov	r5, s0
 800c386:	ee10 8a10 	vmov	r8, s0
 800c38a:	460c      	mov	r4, r1
 800c38c:	dc30      	bgt.n	800c3f0 <ceil+0x80>
 800c38e:	2e00      	cmp	r6, #0
 800c390:	da12      	bge.n	800c3b8 <ceil+0x48>
 800c392:	a335      	add	r3, pc, #212	; (adr r3, 800c468 <ceil+0xf8>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f3 ff24 	bl	80001e4 <__adddf3>
 800c39c:	2200      	movs	r2, #0
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f7f4 fb66 	bl	8000a70 <__aeabi_dcmpgt>
 800c3a4:	b128      	cbz	r0, 800c3b2 <ceil+0x42>
 800c3a6:	2c00      	cmp	r4, #0
 800c3a8:	db55      	blt.n	800c456 <ceil+0xe6>
 800c3aa:	432c      	orrs	r4, r5
 800c3ac:	d057      	beq.n	800c45e <ceil+0xee>
 800c3ae:	4c30      	ldr	r4, [pc, #192]	; (800c470 <ceil+0x100>)
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	e025      	b.n	800c404 <ceil+0x94>
 800c3b8:	4f2e      	ldr	r7, [pc, #184]	; (800c474 <ceil+0x104>)
 800c3ba:	4137      	asrs	r7, r6
 800c3bc:	ea01 0307 	and.w	r3, r1, r7
 800c3c0:	4303      	orrs	r3, r0
 800c3c2:	d01f      	beq.n	800c404 <ceil+0x94>
 800c3c4:	a328      	add	r3, pc, #160	; (adr r3, 800c468 <ceil+0xf8>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 ff0b 	bl	80001e4 <__adddf3>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f7f4 fb4d 	bl	8000a70 <__aeabi_dcmpgt>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d0eb      	beq.n	800c3b2 <ceil+0x42>
 800c3da:	2c00      	cmp	r4, #0
 800c3dc:	bfc2      	ittt	gt
 800c3de:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800c3e2:	fa43 f606 	asrgt.w	r6, r3, r6
 800c3e6:	19a4      	addgt	r4, r4, r6
 800c3e8:	ea24 0407 	bic.w	r4, r4, r7
 800c3ec:	2500      	movs	r5, #0
 800c3ee:	e7e0      	b.n	800c3b2 <ceil+0x42>
 800c3f0:	2e33      	cmp	r6, #51	; 0x33
 800c3f2:	dd0b      	ble.n	800c40c <ceil+0x9c>
 800c3f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c3f8:	d104      	bne.n	800c404 <ceil+0x94>
 800c3fa:	ee10 2a10 	vmov	r2, s0
 800c3fe:	460b      	mov	r3, r1
 800c400:	f7f3 fef0 	bl	80001e4 <__adddf3>
 800c404:	ec41 0b10 	vmov	d0, r0, r1
 800c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c410:	f04f 33ff 	mov.w	r3, #4294967295
 800c414:	fa23 f707 	lsr.w	r7, r3, r7
 800c418:	4207      	tst	r7, r0
 800c41a:	d0f3      	beq.n	800c404 <ceil+0x94>
 800c41c:	a312      	add	r3, pc, #72	; (adr r3, 800c468 <ceil+0xf8>)
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	f7f3 fedf 	bl	80001e4 <__adddf3>
 800c426:	2200      	movs	r2, #0
 800c428:	2300      	movs	r3, #0
 800c42a:	f7f4 fb21 	bl	8000a70 <__aeabi_dcmpgt>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d0bf      	beq.n	800c3b2 <ceil+0x42>
 800c432:	2c00      	cmp	r4, #0
 800c434:	dd02      	ble.n	800c43c <ceil+0xcc>
 800c436:	2e14      	cmp	r6, #20
 800c438:	d103      	bne.n	800c442 <ceil+0xd2>
 800c43a:	3401      	adds	r4, #1
 800c43c:	ea25 0507 	bic.w	r5, r5, r7
 800c440:	e7b7      	b.n	800c3b2 <ceil+0x42>
 800c442:	2301      	movs	r3, #1
 800c444:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c448:	fa03 f606 	lsl.w	r6, r3, r6
 800c44c:	4435      	add	r5, r6
 800c44e:	4545      	cmp	r5, r8
 800c450:	bf38      	it	cc
 800c452:	18e4      	addcc	r4, r4, r3
 800c454:	e7f2      	b.n	800c43c <ceil+0xcc>
 800c456:	2500      	movs	r5, #0
 800c458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c45c:	e7a9      	b.n	800c3b2 <ceil+0x42>
 800c45e:	4625      	mov	r5, r4
 800c460:	e7a7      	b.n	800c3b2 <ceil+0x42>
 800c462:	bf00      	nop
 800c464:	f3af 8000 	nop.w
 800c468:	8800759c 	.word	0x8800759c
 800c46c:	7e37e43c 	.word	0x7e37e43c
 800c470:	3ff00000 	.word	0x3ff00000
 800c474:	000fffff 	.word	0x000fffff

0800c478 <pow>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	ed2d 8b02 	vpush	{d8}
 800c47e:	eeb0 8a40 	vmov.f32	s16, s0
 800c482:	eef0 8a60 	vmov.f32	s17, s1
 800c486:	ec55 4b11 	vmov	r4, r5, d1
 800c48a:	f000 f891 	bl	800c5b0 <__ieee754_pow>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	4620      	mov	r0, r4
 800c494:	4629      	mov	r1, r5
 800c496:	ec57 6b10 	vmov	r6, r7, d0
 800c49a:	f7f4 faf3 	bl	8000a84 <__aeabi_dcmpun>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d13b      	bne.n	800c51a <pow+0xa2>
 800c4a2:	ec51 0b18 	vmov	r0, r1, d8
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f7f4 fab9 	bl	8000a20 <__aeabi_dcmpeq>
 800c4ae:	b1b8      	cbz	r0, 800c4e0 <pow+0x68>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7f4 fab2 	bl	8000a20 <__aeabi_dcmpeq>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d146      	bne.n	800c54e <pow+0xd6>
 800c4c0:	ec45 4b10 	vmov	d0, r4, r5
 800c4c4:	f000 fe8d 	bl	800d1e2 <finite>
 800c4c8:	b338      	cbz	r0, 800c51a <pow+0xa2>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f4 faaf 	bl	8000a34 <__aeabi_dcmplt>
 800c4d6:	b300      	cbz	r0, 800c51a <pow+0xa2>
 800c4d8:	f7ff ff18 	bl	800c30c <__errno>
 800c4dc:	2322      	movs	r3, #34	; 0x22
 800c4de:	e01b      	b.n	800c518 <pow+0xa0>
 800c4e0:	ec47 6b10 	vmov	d0, r6, r7
 800c4e4:	f000 fe7d 	bl	800d1e2 <finite>
 800c4e8:	b9e0      	cbnz	r0, 800c524 <pow+0xac>
 800c4ea:	eeb0 0a48 	vmov.f32	s0, s16
 800c4ee:	eef0 0a68 	vmov.f32	s1, s17
 800c4f2:	f000 fe76 	bl	800d1e2 <finite>
 800c4f6:	b1a8      	cbz	r0, 800c524 <pow+0xac>
 800c4f8:	ec45 4b10 	vmov	d0, r4, r5
 800c4fc:	f000 fe71 	bl	800d1e2 <finite>
 800c500:	b180      	cbz	r0, 800c524 <pow+0xac>
 800c502:	4632      	mov	r2, r6
 800c504:	463b      	mov	r3, r7
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 fabb 	bl	8000a84 <__aeabi_dcmpun>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0e2      	beq.n	800c4d8 <pow+0x60>
 800c512:	f7ff fefb 	bl	800c30c <__errno>
 800c516:	2321      	movs	r3, #33	; 0x21
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	ecbd 8b02 	vpop	{d8}
 800c51e:	ec47 6b10 	vmov	d0, r6, r7
 800c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c524:	2200      	movs	r2, #0
 800c526:	2300      	movs	r3, #0
 800c528:	4630      	mov	r0, r6
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 fa78 	bl	8000a20 <__aeabi_dcmpeq>
 800c530:	2800      	cmp	r0, #0
 800c532:	d0f2      	beq.n	800c51a <pow+0xa2>
 800c534:	eeb0 0a48 	vmov.f32	s0, s16
 800c538:	eef0 0a68 	vmov.f32	s1, s17
 800c53c:	f000 fe51 	bl	800d1e2 <finite>
 800c540:	2800      	cmp	r0, #0
 800c542:	d0ea      	beq.n	800c51a <pow+0xa2>
 800c544:	ec45 4b10 	vmov	d0, r4, r5
 800c548:	f000 fe4b 	bl	800d1e2 <finite>
 800c54c:	e7c3      	b.n	800c4d6 <pow+0x5e>
 800c54e:	4f01      	ldr	r7, [pc, #4]	; (800c554 <pow+0xdc>)
 800c550:	2600      	movs	r6, #0
 800c552:	e7e2      	b.n	800c51a <pow+0xa2>
 800c554:	3ff00000 	.word	0x3ff00000

0800c558 <sqrt>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	ed2d 8b02 	vpush	{d8}
 800c55e:	ec55 4b10 	vmov	r4, r5, d0
 800c562:	f000 fd53 	bl	800d00c <__ieee754_sqrt>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	4620      	mov	r0, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	eeb0 8a40 	vmov.f32	s16, s0
 800c572:	eef0 8a60 	vmov.f32	s17, s1
 800c576:	f7f4 fa85 	bl	8000a84 <__aeabi_dcmpun>
 800c57a:	b990      	cbnz	r0, 800c5a2 <sqrt+0x4a>
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	4620      	mov	r0, r4
 800c582:	4629      	mov	r1, r5
 800c584:	f7f4 fa56 	bl	8000a34 <__aeabi_dcmplt>
 800c588:	b158      	cbz	r0, 800c5a2 <sqrt+0x4a>
 800c58a:	f7ff febf 	bl	800c30c <__errno>
 800c58e:	2321      	movs	r3, #33	; 0x21
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	2200      	movs	r2, #0
 800c594:	2300      	movs	r3, #0
 800c596:	4610      	mov	r0, r2
 800c598:	4619      	mov	r1, r3
 800c59a:	f7f4 f903 	bl	80007a4 <__aeabi_ddiv>
 800c59e:	ec41 0b18 	vmov	d8, r0, r1
 800c5a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c5a6:	eef0 0a68 	vmov.f32	s1, s17
 800c5aa:	ecbd 8b02 	vpop	{d8}
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}

0800c5b0 <__ieee754_pow>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ed2d 8b06 	vpush	{d8-d10}
 800c5b8:	b089      	sub	sp, #36	; 0x24
 800c5ba:	ed8d 1b00 	vstr	d1, [sp]
 800c5be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5c6:	ea58 0102 	orrs.w	r1, r8, r2
 800c5ca:	ec57 6b10 	vmov	r6, r7, d0
 800c5ce:	d115      	bne.n	800c5fc <__ieee754_pow+0x4c>
 800c5d0:	19b3      	adds	r3, r6, r6
 800c5d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5d6:	4152      	adcs	r2, r2
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	4b89      	ldr	r3, [pc, #548]	; (800c800 <__ieee754_pow+0x250>)
 800c5dc:	4193      	sbcs	r3, r2
 800c5de:	f080 84d2 	bcs.w	800cf86 <__ieee754_pow+0x9d6>
 800c5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f3 fdfb 	bl	80001e4 <__adddf3>
 800c5ee:	ec41 0b10 	vmov	d0, r0, r1
 800c5f2:	b009      	add	sp, #36	; 0x24
 800c5f4:	ecbd 8b06 	vpop	{d8-d10}
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	4b81      	ldr	r3, [pc, #516]	; (800c804 <__ieee754_pow+0x254>)
 800c5fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c602:	429c      	cmp	r4, r3
 800c604:	ee10 aa10 	vmov	sl, s0
 800c608:	463d      	mov	r5, r7
 800c60a:	dc06      	bgt.n	800c61a <__ieee754_pow+0x6a>
 800c60c:	d101      	bne.n	800c612 <__ieee754_pow+0x62>
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d1e7      	bne.n	800c5e2 <__ieee754_pow+0x32>
 800c612:	4598      	cmp	r8, r3
 800c614:	dc01      	bgt.n	800c61a <__ieee754_pow+0x6a>
 800c616:	d10f      	bne.n	800c638 <__ieee754_pow+0x88>
 800c618:	b172      	cbz	r2, 800c638 <__ieee754_pow+0x88>
 800c61a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c61e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c622:	ea55 050a 	orrs.w	r5, r5, sl
 800c626:	d1dc      	bne.n	800c5e2 <__ieee754_pow+0x32>
 800c628:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c62c:	18db      	adds	r3, r3, r3
 800c62e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c632:	4152      	adcs	r2, r2
 800c634:	429d      	cmp	r5, r3
 800c636:	e7d0      	b.n	800c5da <__ieee754_pow+0x2a>
 800c638:	2d00      	cmp	r5, #0
 800c63a:	da3b      	bge.n	800c6b4 <__ieee754_pow+0x104>
 800c63c:	4b72      	ldr	r3, [pc, #456]	; (800c808 <__ieee754_pow+0x258>)
 800c63e:	4598      	cmp	r8, r3
 800c640:	dc51      	bgt.n	800c6e6 <__ieee754_pow+0x136>
 800c642:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c646:	4598      	cmp	r8, r3
 800c648:	f340 84ac 	ble.w	800cfa4 <__ieee754_pow+0x9f4>
 800c64c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c654:	2b14      	cmp	r3, #20
 800c656:	dd0f      	ble.n	800c678 <__ieee754_pow+0xc8>
 800c658:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c65c:	fa22 f103 	lsr.w	r1, r2, r3
 800c660:	fa01 f303 	lsl.w	r3, r1, r3
 800c664:	4293      	cmp	r3, r2
 800c666:	f040 849d 	bne.w	800cfa4 <__ieee754_pow+0x9f4>
 800c66a:	f001 0101 	and.w	r1, r1, #1
 800c66e:	f1c1 0302 	rsb	r3, r1, #2
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	b182      	cbz	r2, 800c698 <__ieee754_pow+0xe8>
 800c676:	e05f      	b.n	800c738 <__ieee754_pow+0x188>
 800c678:	2a00      	cmp	r2, #0
 800c67a:	d15b      	bne.n	800c734 <__ieee754_pow+0x184>
 800c67c:	f1c3 0314 	rsb	r3, r3, #20
 800c680:	fa48 f103 	asr.w	r1, r8, r3
 800c684:	fa01 f303 	lsl.w	r3, r1, r3
 800c688:	4543      	cmp	r3, r8
 800c68a:	f040 8488 	bne.w	800cf9e <__ieee754_pow+0x9ee>
 800c68e:	f001 0101 	and.w	r1, r1, #1
 800c692:	f1c1 0302 	rsb	r3, r1, #2
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	4b5c      	ldr	r3, [pc, #368]	; (800c80c <__ieee754_pow+0x25c>)
 800c69a:	4598      	cmp	r8, r3
 800c69c:	d132      	bne.n	800c704 <__ieee754_pow+0x154>
 800c69e:	f1b9 0f00 	cmp.w	r9, #0
 800c6a2:	f280 8478 	bge.w	800cf96 <__ieee754_pow+0x9e6>
 800c6a6:	4959      	ldr	r1, [pc, #356]	; (800c80c <__ieee754_pow+0x25c>)
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	463b      	mov	r3, r7
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f7f4 f879 	bl	80007a4 <__aeabi_ddiv>
 800c6b2:	e79c      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	d13d      	bne.n	800c738 <__ieee754_pow+0x188>
 800c6bc:	4b51      	ldr	r3, [pc, #324]	; (800c804 <__ieee754_pow+0x254>)
 800c6be:	4598      	cmp	r8, r3
 800c6c0:	d1ea      	bne.n	800c698 <__ieee754_pow+0xe8>
 800c6c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c6ce:	f000 845a 	beq.w	800cf86 <__ieee754_pow+0x9d6>
 800c6d2:	4b4f      	ldr	r3, [pc, #316]	; (800c810 <__ieee754_pow+0x260>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	dd08      	ble.n	800c6ea <__ieee754_pow+0x13a>
 800c6d8:	f1b9 0f00 	cmp.w	r9, #0
 800c6dc:	f2c0 8457 	blt.w	800cf8e <__ieee754_pow+0x9de>
 800c6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6e4:	e783      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e7e5      	b.n	800c6b6 <__ieee754_pow+0x106>
 800c6ea:	f1b9 0f00 	cmp.w	r9, #0
 800c6ee:	f04f 0000 	mov.w	r0, #0
 800c6f2:	f04f 0100 	mov.w	r1, #0
 800c6f6:	f6bf af7a 	bge.w	800c5ee <__ieee754_pow+0x3e>
 800c6fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c702:	e774      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c704:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c708:	d106      	bne.n	800c718 <__ieee754_pow+0x168>
 800c70a:	4632      	mov	r2, r6
 800c70c:	463b      	mov	r3, r7
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f3 ff1d 	bl	8000550 <__aeabi_dmul>
 800c716:	e76a      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c718:	4b3e      	ldr	r3, [pc, #248]	; (800c814 <__ieee754_pow+0x264>)
 800c71a:	4599      	cmp	r9, r3
 800c71c:	d10c      	bne.n	800c738 <__ieee754_pow+0x188>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	db0a      	blt.n	800c738 <__ieee754_pow+0x188>
 800c722:	ec47 6b10 	vmov	d0, r6, r7
 800c726:	b009      	add	sp, #36	; 0x24
 800c728:	ecbd 8b06 	vpop	{d8-d10}
 800c72c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c730:	f000 bc6c 	b.w	800d00c <__ieee754_sqrt>
 800c734:	2300      	movs	r3, #0
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	ec47 6b10 	vmov	d0, r6, r7
 800c73c:	f000 fd48 	bl	800d1d0 <fabs>
 800c740:	ec51 0b10 	vmov	r0, r1, d0
 800c744:	f1ba 0f00 	cmp.w	sl, #0
 800c748:	d129      	bne.n	800c79e <__ieee754_pow+0x1ee>
 800c74a:	b124      	cbz	r4, 800c756 <__ieee754_pow+0x1a6>
 800c74c:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <__ieee754_pow+0x25c>)
 800c74e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c752:	429a      	cmp	r2, r3
 800c754:	d123      	bne.n	800c79e <__ieee754_pow+0x1ee>
 800c756:	f1b9 0f00 	cmp.w	r9, #0
 800c75a:	da05      	bge.n	800c768 <__ieee754_pow+0x1b8>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	2000      	movs	r0, #0
 800c762:	492a      	ldr	r1, [pc, #168]	; (800c80c <__ieee754_pow+0x25c>)
 800c764:	f7f4 f81e 	bl	80007a4 <__aeabi_ddiv>
 800c768:	2d00      	cmp	r5, #0
 800c76a:	f6bf af40 	bge.w	800c5ee <__ieee754_pow+0x3e>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c774:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c778:	4323      	orrs	r3, r4
 800c77a:	d108      	bne.n	800c78e <__ieee754_pow+0x1de>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	4610      	mov	r0, r2
 800c782:	4619      	mov	r1, r3
 800c784:	f7f3 fd2c 	bl	80001e0 <__aeabi_dsub>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	e78f      	b.n	800c6ae <__ieee754_pow+0xfe>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	2b01      	cmp	r3, #1
 800c792:	f47f af2c 	bne.w	800c5ee <__ieee754_pow+0x3e>
 800c796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c79a:	4619      	mov	r1, r3
 800c79c:	e727      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c79e:	0feb      	lsrs	r3, r5, #31
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	9306      	str	r3, [sp, #24]
 800c7a4:	9a06      	ldr	r2, [sp, #24]
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	d102      	bne.n	800c7b2 <__ieee754_pow+0x202>
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	e7e6      	b.n	800c780 <__ieee754_pow+0x1d0>
 800c7b2:	4b19      	ldr	r3, [pc, #100]	; (800c818 <__ieee754_pow+0x268>)
 800c7b4:	4598      	cmp	r8, r3
 800c7b6:	f340 80fb 	ble.w	800c9b0 <__ieee754_pow+0x400>
 800c7ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7be:	4598      	cmp	r8, r3
 800c7c0:	4b13      	ldr	r3, [pc, #76]	; (800c810 <__ieee754_pow+0x260>)
 800c7c2:	dd0c      	ble.n	800c7de <__ieee754_pow+0x22e>
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	dc0f      	bgt.n	800c7e8 <__ieee754_pow+0x238>
 800c7c8:	f1b9 0f00 	cmp.w	r9, #0
 800c7cc:	da0f      	bge.n	800c7ee <__ieee754_pow+0x23e>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	b009      	add	sp, #36	; 0x24
 800c7d2:	ecbd 8b06 	vpop	{d8-d10}
 800c7d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7da:	f000 bcf0 	b.w	800d1be <__math_oflow>
 800c7de:	429c      	cmp	r4, r3
 800c7e0:	dbf2      	blt.n	800c7c8 <__ieee754_pow+0x218>
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <__ieee754_pow+0x25c>)
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	dd19      	ble.n	800c81c <__ieee754_pow+0x26c>
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	dcef      	bgt.n	800c7ce <__ieee754_pow+0x21e>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	b009      	add	sp, #36	; 0x24
 800c7f2:	ecbd 8b06 	vpop	{d8-d10}
 800c7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	f000 bcd7 	b.w	800d1ac <__math_uflow>
 800c7fe:	bf00      	nop
 800c800:	fff00000 	.word	0xfff00000
 800c804:	7ff00000 	.word	0x7ff00000
 800c808:	433fffff 	.word	0x433fffff
 800c80c:	3ff00000 	.word	0x3ff00000
 800c810:	3fefffff 	.word	0x3fefffff
 800c814:	3fe00000 	.word	0x3fe00000
 800c818:	41e00000 	.word	0x41e00000
 800c81c:	4b60      	ldr	r3, [pc, #384]	; (800c9a0 <__ieee754_pow+0x3f0>)
 800c81e:	2200      	movs	r2, #0
 800c820:	f7f3 fcde 	bl	80001e0 <__aeabi_dsub>
 800c824:	a354      	add	r3, pc, #336	; (adr r3, 800c978 <__ieee754_pow+0x3c8>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4604      	mov	r4, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	f7f3 fe8f 	bl	8000550 <__aeabi_dmul>
 800c832:	a353      	add	r3, pc, #332	; (adr r3, 800c980 <__ieee754_pow+0x3d0>)
 800c834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c838:	4606      	mov	r6, r0
 800c83a:	460f      	mov	r7, r1
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 fe86 	bl	8000550 <__aeabi_dmul>
 800c844:	4b57      	ldr	r3, [pc, #348]	; (800c9a4 <__ieee754_pow+0x3f4>)
 800c846:	4682      	mov	sl, r0
 800c848:	468b      	mov	fp, r1
 800c84a:	2200      	movs	r2, #0
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	f7f3 fe7e 	bl	8000550 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	a14b      	add	r1, pc, #300	; (adr r1, 800c988 <__ieee754_pow+0x3d8>)
 800c85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c85e:	f7f3 fcbf 	bl	80001e0 <__aeabi_dsub>
 800c862:	4622      	mov	r2, r4
 800c864:	462b      	mov	r3, r5
 800c866:	f7f3 fe73 	bl	8000550 <__aeabi_dmul>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	2000      	movs	r0, #0
 800c870:	494d      	ldr	r1, [pc, #308]	; (800c9a8 <__ieee754_pow+0x3f8>)
 800c872:	f7f3 fcb5 	bl	80001e0 <__aeabi_dsub>
 800c876:	4622      	mov	r2, r4
 800c878:	4680      	mov	r8, r0
 800c87a:	4689      	mov	r9, r1
 800c87c:	462b      	mov	r3, r5
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fe65 	bl	8000550 <__aeabi_dmul>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fe5f 	bl	8000550 <__aeabi_dmul>
 800c892:	a33f      	add	r3, pc, #252	; (adr r3, 800c990 <__ieee754_pow+0x3e0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fe5a 	bl	8000550 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4650      	mov	r0, sl
 800c8a2:	4659      	mov	r1, fp
 800c8a4:	f7f3 fc9c 	bl	80001e0 <__aeabi_dsub>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	4689      	mov	r9, r1
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	f7f3 fc96 	bl	80001e4 <__adddf3>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	463b      	mov	r3, r7
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	f7f3 fc8d 	bl	80001e0 <__aeabi_dsub>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	f7f3 fc87 	bl	80001e0 <__aeabi_dsub>
 800c8d2:	9b04      	ldr	r3, [sp, #16]
 800c8d4:	9a06      	ldr	r2, [sp, #24]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	4682      	mov	sl, r0
 800c8dc:	468b      	mov	fp, r1
 800c8de:	f040 81e7 	bne.w	800ccb0 <__ieee754_pow+0x700>
 800c8e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c998 <__ieee754_pow+0x3e8>
 800c8e6:	eeb0 8a47 	vmov.f32	s16, s14
 800c8ea:	eef0 8a67 	vmov.f32	s17, s15
 800c8ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	4632      	mov	r2, r6
 800c8f6:	463b      	mov	r3, r7
 800c8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8fc:	f7f3 fc70 	bl	80001e0 <__aeabi_dsub>
 800c900:	4622      	mov	r2, r4
 800c902:	462b      	mov	r3, r5
 800c904:	f7f3 fe24 	bl	8000550 <__aeabi_dmul>
 800c908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c90c:	4680      	mov	r8, r0
 800c90e:	4689      	mov	r9, r1
 800c910:	4650      	mov	r0, sl
 800c912:	4659      	mov	r1, fp
 800c914:	f7f3 fe1c 	bl	8000550 <__aeabi_dmul>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f3 fc60 	bl	80001e4 <__adddf3>
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	4680      	mov	r8, r0
 800c92a:	4689      	mov	r9, r1
 800c92c:	4620      	mov	r0, r4
 800c92e:	4629      	mov	r1, r5
 800c930:	f7f3 fe0e 	bl	8000550 <__aeabi_dmul>
 800c934:	460b      	mov	r3, r1
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	4602      	mov	r2, r0
 800c93c:	4649      	mov	r1, r9
 800c93e:	4640      	mov	r0, r8
 800c940:	f7f3 fc50 	bl	80001e4 <__adddf3>
 800c944:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <__ieee754_pow+0x3fc>)
 800c946:	4299      	cmp	r1, r3
 800c948:	ec45 4b19 	vmov	d9, r4, r5
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
 800c950:	468b      	mov	fp, r1
 800c952:	f340 82f1 	ble.w	800cf38 <__ieee754_pow+0x988>
 800c956:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c95a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c95e:	4303      	orrs	r3, r0
 800c960:	f000 81e4 	beq.w	800cd2c <__ieee754_pow+0x77c>
 800c964:	ec51 0b18 	vmov	r0, r1, d8
 800c968:	2200      	movs	r2, #0
 800c96a:	2300      	movs	r3, #0
 800c96c:	f7f4 f862 	bl	8000a34 <__aeabi_dcmplt>
 800c970:	3800      	subs	r0, #0
 800c972:	bf18      	it	ne
 800c974:	2001      	movne	r0, #1
 800c976:	e72b      	b.n	800c7d0 <__ieee754_pow+0x220>
 800c978:	60000000 	.word	0x60000000
 800c97c:	3ff71547 	.word	0x3ff71547
 800c980:	f85ddf44 	.word	0xf85ddf44
 800c984:	3e54ae0b 	.word	0x3e54ae0b
 800c988:	55555555 	.word	0x55555555
 800c98c:	3fd55555 	.word	0x3fd55555
 800c990:	652b82fe 	.word	0x652b82fe
 800c994:	3ff71547 	.word	0x3ff71547
 800c998:	00000000 	.word	0x00000000
 800c99c:	bff00000 	.word	0xbff00000
 800c9a0:	3ff00000 	.word	0x3ff00000
 800c9a4:	3fd00000 	.word	0x3fd00000
 800c9a8:	3fe00000 	.word	0x3fe00000
 800c9ac:	408fffff 	.word	0x408fffff
 800c9b0:	4bd5      	ldr	r3, [pc, #852]	; (800cd08 <__ieee754_pow+0x758>)
 800c9b2:	402b      	ands	r3, r5
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	b92b      	cbnz	r3, 800c9c4 <__ieee754_pow+0x414>
 800c9b8:	4bd4      	ldr	r3, [pc, #848]	; (800cd0c <__ieee754_pow+0x75c>)
 800c9ba:	f7f3 fdc9 	bl	8000550 <__aeabi_dmul>
 800c9be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	1523      	asrs	r3, r4, #20
 800c9c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9ca:	4413      	add	r3, r2
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	4bd0      	ldr	r3, [pc, #832]	; (800cd10 <__ieee754_pow+0x760>)
 800c9d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9de:	dd08      	ble.n	800c9f2 <__ieee754_pow+0x442>
 800c9e0:	4bcc      	ldr	r3, [pc, #816]	; (800cd14 <__ieee754_pow+0x764>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	f340 8162 	ble.w	800ccac <__ieee754_pow+0x6fc>
 800c9e8:	9b05      	ldr	r3, [sp, #20]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9f2:	2400      	movs	r4, #0
 800c9f4:	00e3      	lsls	r3, r4, #3
 800c9f6:	9307      	str	r3, [sp, #28]
 800c9f8:	4bc7      	ldr	r3, [pc, #796]	; (800cd18 <__ieee754_pow+0x768>)
 800c9fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9fe:	ed93 7b00 	vldr	d7, [r3]
 800ca02:	4629      	mov	r1, r5
 800ca04:	ec53 2b17 	vmov	r2, r3, d7
 800ca08:	eeb0 9a47 	vmov.f32	s18, s14
 800ca0c:	eef0 9a67 	vmov.f32	s19, s15
 800ca10:	4682      	mov	sl, r0
 800ca12:	f7f3 fbe5 	bl	80001e0 <__aeabi_dsub>
 800ca16:	4652      	mov	r2, sl
 800ca18:	4606      	mov	r6, r0
 800ca1a:	460f      	mov	r7, r1
 800ca1c:	462b      	mov	r3, r5
 800ca1e:	ec51 0b19 	vmov	r0, r1, d9
 800ca22:	f7f3 fbdf 	bl	80001e4 <__adddf3>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	49bb      	ldr	r1, [pc, #748]	; (800cd1c <__ieee754_pow+0x76c>)
 800ca2e:	f7f3 feb9 	bl	80007a4 <__aeabi_ddiv>
 800ca32:	ec41 0b1a 	vmov	d10, r0, r1
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f3 fd87 	bl	8000550 <__aeabi_dmul>
 800ca42:	2300      	movs	r3, #0
 800ca44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca4e:	46ab      	mov	fp, r5
 800ca50:	106d      	asrs	r5, r5, #1
 800ca52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca5a:	ec41 0b18 	vmov	d8, r0, r1
 800ca5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca62:	2200      	movs	r2, #0
 800ca64:	4640      	mov	r0, r8
 800ca66:	4649      	mov	r1, r9
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	f7f3 fd70 	bl	8000550 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f3 fbb2 	bl	80001e0 <__aeabi_dsub>
 800ca7c:	ec53 2b19 	vmov	r2, r3, d9
 800ca80:	4606      	mov	r6, r0
 800ca82:	460f      	mov	r7, r1
 800ca84:	4620      	mov	r0, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	f7f3 fbaa 	bl	80001e0 <__aeabi_dsub>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	f7f3 fba4 	bl	80001e0 <__aeabi_dsub>
 800ca98:	4642      	mov	r2, r8
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	f7f3 fd58 	bl	8000550 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fb9a 	bl	80001e0 <__aeabi_dsub>
 800caac:	ec53 2b1a 	vmov	r2, r3, d10
 800cab0:	f7f3 fd4e 	bl	8000550 <__aeabi_dmul>
 800cab4:	ec53 2b18 	vmov	r2, r3, d8
 800cab8:	ec41 0b19 	vmov	d9, r0, r1
 800cabc:	ec51 0b18 	vmov	r0, r1, d8
 800cac0:	f7f3 fd46 	bl	8000550 <__aeabi_dmul>
 800cac4:	a37c      	add	r3, pc, #496	; (adr r3, 800ccb8 <__ieee754_pow+0x708>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	4604      	mov	r4, r0
 800cacc:	460d      	mov	r5, r1
 800cace:	f7f3 fd3f 	bl	8000550 <__aeabi_dmul>
 800cad2:	a37b      	add	r3, pc, #492	; (adr r3, 800ccc0 <__ieee754_pow+0x710>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fb84 	bl	80001e4 <__adddf3>
 800cadc:	4622      	mov	r2, r4
 800cade:	462b      	mov	r3, r5
 800cae0:	f7f3 fd36 	bl	8000550 <__aeabi_dmul>
 800cae4:	a378      	add	r3, pc, #480	; (adr r3, 800ccc8 <__ieee754_pow+0x718>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	f7f3 fb7b 	bl	80001e4 <__adddf3>
 800caee:	4622      	mov	r2, r4
 800caf0:	462b      	mov	r3, r5
 800caf2:	f7f3 fd2d 	bl	8000550 <__aeabi_dmul>
 800caf6:	a376      	add	r3, pc, #472	; (adr r3, 800ccd0 <__ieee754_pow+0x720>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	f7f3 fb72 	bl	80001e4 <__adddf3>
 800cb00:	4622      	mov	r2, r4
 800cb02:	462b      	mov	r3, r5
 800cb04:	f7f3 fd24 	bl	8000550 <__aeabi_dmul>
 800cb08:	a373      	add	r3, pc, #460	; (adr r3, 800ccd8 <__ieee754_pow+0x728>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	f7f3 fb69 	bl	80001e4 <__adddf3>
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	f7f3 fd1b 	bl	8000550 <__aeabi_dmul>
 800cb1a:	a371      	add	r3, pc, #452	; (adr r3, 800cce0 <__ieee754_pow+0x730>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fb60 	bl	80001e4 <__adddf3>
 800cb24:	4622      	mov	r2, r4
 800cb26:	4606      	mov	r6, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	f7f3 fd0e 	bl	8000550 <__aeabi_dmul>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 fd08 	bl	8000550 <__aeabi_dmul>
 800cb40:	4642      	mov	r2, r8
 800cb42:	4604      	mov	r4, r0
 800cb44:	460d      	mov	r5, r1
 800cb46:	464b      	mov	r3, r9
 800cb48:	ec51 0b18 	vmov	r0, r1, d8
 800cb4c:	f7f3 fb4a 	bl	80001e4 <__adddf3>
 800cb50:	ec53 2b19 	vmov	r2, r3, d9
 800cb54:	f7f3 fcfc 	bl	8000550 <__aeabi_dmul>
 800cb58:	4622      	mov	r2, r4
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	f7f3 fb42 	bl	80001e4 <__adddf3>
 800cb60:	4642      	mov	r2, r8
 800cb62:	4682      	mov	sl, r0
 800cb64:	468b      	mov	fp, r1
 800cb66:	464b      	mov	r3, r9
 800cb68:	4640      	mov	r0, r8
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	f7f3 fcf0 	bl	8000550 <__aeabi_dmul>
 800cb70:	4b6b      	ldr	r3, [pc, #428]	; (800cd20 <__ieee754_pow+0x770>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	4606      	mov	r6, r0
 800cb76:	460f      	mov	r7, r1
 800cb78:	f7f3 fb34 	bl	80001e4 <__adddf3>
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	465b      	mov	r3, fp
 800cb80:	f7f3 fb30 	bl	80001e4 <__adddf3>
 800cb84:	2000      	movs	r0, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	460d      	mov	r5, r1
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 fcdd 	bl	8000550 <__aeabi_dmul>
 800cb96:	4b62      	ldr	r3, [pc, #392]	; (800cd20 <__ieee754_pow+0x770>)
 800cb98:	4680      	mov	r8, r0
 800cb9a:	4689      	mov	r9, r1
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 fb1d 	bl	80001e0 <__aeabi_dsub>
 800cba6:	4632      	mov	r2, r6
 800cba8:	463b      	mov	r3, r7
 800cbaa:	f7f3 fb19 	bl	80001e0 <__aeabi_dsub>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4650      	mov	r0, sl
 800cbb4:	4659      	mov	r1, fp
 800cbb6:	f7f3 fb13 	bl	80001e0 <__aeabi_dsub>
 800cbba:	ec53 2b18 	vmov	r2, r3, d8
 800cbbe:	f7f3 fcc7 	bl	8000550 <__aeabi_dmul>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	462b      	mov	r3, r5
 800cbca:	ec51 0b19 	vmov	r0, r1, d9
 800cbce:	f7f3 fcbf 	bl	8000550 <__aeabi_dmul>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	4639      	mov	r1, r7
 800cbda:	f7f3 fb03 	bl	80001e4 <__adddf3>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 fafb 	bl	80001e4 <__adddf3>
 800cbee:	a33e      	add	r3, pc, #248	; (adr r3, 800cce8 <__ieee754_pow+0x738>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	f7f3 fca9 	bl	8000550 <__aeabi_dmul>
 800cbfe:	4642      	mov	r2, r8
 800cc00:	ec41 0b18 	vmov	d8, r0, r1
 800cc04:	464b      	mov	r3, r9
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fae9 	bl	80001e0 <__aeabi_dsub>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4630      	mov	r0, r6
 800cc14:	4639      	mov	r1, r7
 800cc16:	f7f3 fae3 	bl	80001e0 <__aeabi_dsub>
 800cc1a:	a335      	add	r3, pc, #212	; (adr r3, 800ccf0 <__ieee754_pow+0x740>)
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fc96 	bl	8000550 <__aeabi_dmul>
 800cc24:	a334      	add	r3, pc, #208	; (adr r3, 800ccf8 <__ieee754_pow+0x748>)
 800cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fc8d 	bl	8000550 <__aeabi_dmul>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fad1 	bl	80001e4 <__adddf3>
 800cc42:	9a07      	ldr	r2, [sp, #28]
 800cc44:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <__ieee754_pow+0x774>)
 800cc46:	4413      	add	r3, r2
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 faca 	bl	80001e4 <__adddf3>
 800cc50:	4682      	mov	sl, r0
 800cc52:	9805      	ldr	r0, [sp, #20]
 800cc54:	468b      	mov	fp, r1
 800cc56:	f7f3 fc11 	bl	800047c <__aeabi_i2d>
 800cc5a:	9a07      	ldr	r2, [sp, #28]
 800cc5c:	4b32      	ldr	r3, [pc, #200]	; (800cd28 <__ieee754_pow+0x778>)
 800cc5e:	4413      	add	r3, r2
 800cc60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc64:	4606      	mov	r6, r0
 800cc66:	460f      	mov	r7, r1
 800cc68:	4652      	mov	r2, sl
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	f7f3 fab8 	bl	80001e4 <__adddf3>
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	f7f3 fab4 	bl	80001e4 <__adddf3>
 800cc7c:	4632      	mov	r2, r6
 800cc7e:	463b      	mov	r3, r7
 800cc80:	f7f3 fab0 	bl	80001e4 <__adddf3>
 800cc84:	2000      	movs	r0, #0
 800cc86:	4632      	mov	r2, r6
 800cc88:	463b      	mov	r3, r7
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	f7f3 faa7 	bl	80001e0 <__aeabi_dsub>
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	f7f3 faa3 	bl	80001e0 <__aeabi_dsub>
 800cc9a:	ec53 2b18 	vmov	r2, r3, d8
 800cc9e:	f7f3 fa9f 	bl	80001e0 <__aeabi_dsub>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	4650      	mov	r0, sl
 800cca8:	4659      	mov	r1, fp
 800ccaa:	e610      	b.n	800c8ce <__ieee754_pow+0x31e>
 800ccac:	2401      	movs	r4, #1
 800ccae:	e6a1      	b.n	800c9f4 <__ieee754_pow+0x444>
 800ccb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd00 <__ieee754_pow+0x750>
 800ccb4:	e617      	b.n	800c8e6 <__ieee754_pow+0x336>
 800ccb6:	bf00      	nop
 800ccb8:	4a454eef 	.word	0x4a454eef
 800ccbc:	3fca7e28 	.word	0x3fca7e28
 800ccc0:	93c9db65 	.word	0x93c9db65
 800ccc4:	3fcd864a 	.word	0x3fcd864a
 800ccc8:	a91d4101 	.word	0xa91d4101
 800cccc:	3fd17460 	.word	0x3fd17460
 800ccd0:	518f264d 	.word	0x518f264d
 800ccd4:	3fd55555 	.word	0x3fd55555
 800ccd8:	db6fabff 	.word	0xdb6fabff
 800ccdc:	3fdb6db6 	.word	0x3fdb6db6
 800cce0:	33333303 	.word	0x33333303
 800cce4:	3fe33333 	.word	0x3fe33333
 800cce8:	e0000000 	.word	0xe0000000
 800ccec:	3feec709 	.word	0x3feec709
 800ccf0:	dc3a03fd 	.word	0xdc3a03fd
 800ccf4:	3feec709 	.word	0x3feec709
 800ccf8:	145b01f5 	.word	0x145b01f5
 800ccfc:	be3e2fe0 	.word	0xbe3e2fe0
 800cd00:	00000000 	.word	0x00000000
 800cd04:	3ff00000 	.word	0x3ff00000
 800cd08:	7ff00000 	.word	0x7ff00000
 800cd0c:	43400000 	.word	0x43400000
 800cd10:	0003988e 	.word	0x0003988e
 800cd14:	000bb679 	.word	0x000bb679
 800cd18:	0800d340 	.word	0x0800d340
 800cd1c:	3ff00000 	.word	0x3ff00000
 800cd20:	40080000 	.word	0x40080000
 800cd24:	0800d360 	.word	0x0800d360
 800cd28:	0800d350 	.word	0x0800d350
 800cd2c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d004 <__ieee754_pow+0xa54>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	4640      	mov	r0, r8
 800cd34:	4649      	mov	r1, r9
 800cd36:	f7f3 fa55 	bl	80001e4 <__adddf3>
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd40:	462b      	mov	r3, r5
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fa4b 	bl	80001e0 <__aeabi_dsub>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	ec51 0b1a 	vmov	r0, r1, d10
 800cd52:	f7f3 fe8d 	bl	8000a70 <__aeabi_dcmpgt>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f47f ae04 	bne.w	800c964 <__ieee754_pow+0x3b4>
 800cd5c:	4aa4      	ldr	r2, [pc, #656]	; (800cff0 <__ieee754_pow+0xa40>)
 800cd5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd62:	4293      	cmp	r3, r2
 800cd64:	f340 8108 	ble.w	800cf78 <__ieee754_pow+0x9c8>
 800cd68:	151b      	asrs	r3, r3, #20
 800cd6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd72:	fa4a f303 	asr.w	r3, sl, r3
 800cd76:	445b      	add	r3, fp
 800cd78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cd7c:	4e9d      	ldr	r6, [pc, #628]	; (800cff4 <__ieee754_pow+0xa44>)
 800cd7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cd82:	4116      	asrs	r6, r2
 800cd84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cd88:	2000      	movs	r0, #0
 800cd8a:	ea23 0106 	bic.w	r1, r3, r6
 800cd8e:	f1c2 0214 	rsb	r2, r2, #20
 800cd92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cd96:	fa4a fa02 	asr.w	sl, sl, r2
 800cd9a:	f1bb 0f00 	cmp.w	fp, #0
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	4620      	mov	r0, r4
 800cda4:	4629      	mov	r1, r5
 800cda6:	bfb8      	it	lt
 800cda8:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdac:	f7f3 fa18 	bl	80001e0 <__aeabi_dsub>
 800cdb0:	ec41 0b19 	vmov	d9, r0, r1
 800cdb4:	4642      	mov	r2, r8
 800cdb6:	464b      	mov	r3, r9
 800cdb8:	ec51 0b19 	vmov	r0, r1, d9
 800cdbc:	f7f3 fa12 	bl	80001e4 <__adddf3>
 800cdc0:	a37b      	add	r3, pc, #492	; (adr r3, 800cfb0 <__ieee754_pow+0xa00>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	f7f3 fbc0 	bl	8000550 <__aeabi_dmul>
 800cdd0:	ec53 2b19 	vmov	r2, r3, d9
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	4620      	mov	r0, r4
 800cdda:	4629      	mov	r1, r5
 800cddc:	f7f3 fa00 	bl	80001e0 <__aeabi_dsub>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4640      	mov	r0, r8
 800cde6:	4649      	mov	r1, r9
 800cde8:	f7f3 f9fa 	bl	80001e0 <__aeabi_dsub>
 800cdec:	a372      	add	r3, pc, #456	; (adr r3, 800cfb8 <__ieee754_pow+0xa08>)
 800cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf2:	f7f3 fbad 	bl	8000550 <__aeabi_dmul>
 800cdf6:	a372      	add	r3, pc, #456	; (adr r3, 800cfc0 <__ieee754_pow+0xa10>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	4620      	mov	r0, r4
 800ce02:	4629      	mov	r1, r5
 800ce04:	f7f3 fba4 	bl	8000550 <__aeabi_dmul>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	4649      	mov	r1, r9
 800ce10:	f7f3 f9e8 	bl	80001e4 <__adddf3>
 800ce14:	4604      	mov	r4, r0
 800ce16:	460d      	mov	r5, r1
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f7f3 f9e0 	bl	80001e4 <__adddf3>
 800ce24:	4632      	mov	r2, r6
 800ce26:	463b      	mov	r3, r7
 800ce28:	4680      	mov	r8, r0
 800ce2a:	4689      	mov	r9, r1
 800ce2c:	f7f3 f9d8 	bl	80001e0 <__aeabi_dsub>
 800ce30:	4602      	mov	r2, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7f3 f9d2 	bl	80001e0 <__aeabi_dsub>
 800ce3c:	4642      	mov	r2, r8
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460f      	mov	r7, r1
 800ce42:	464b      	mov	r3, r9
 800ce44:	4640      	mov	r0, r8
 800ce46:	4649      	mov	r1, r9
 800ce48:	f7f3 fb82 	bl	8000550 <__aeabi_dmul>
 800ce4c:	a35e      	add	r3, pc, #376	; (adr r3, 800cfc8 <__ieee754_pow+0xa18>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	4604      	mov	r4, r0
 800ce54:	460d      	mov	r5, r1
 800ce56:	f7f3 fb7b 	bl	8000550 <__aeabi_dmul>
 800ce5a:	a35d      	add	r3, pc, #372	; (adr r3, 800cfd0 <__ieee754_pow+0xa20>)
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	f7f3 f9be 	bl	80001e0 <__aeabi_dsub>
 800ce64:	4622      	mov	r2, r4
 800ce66:	462b      	mov	r3, r5
 800ce68:	f7f3 fb72 	bl	8000550 <__aeabi_dmul>
 800ce6c:	a35a      	add	r3, pc, #360	; (adr r3, 800cfd8 <__ieee754_pow+0xa28>)
 800ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce72:	f7f3 f9b7 	bl	80001e4 <__adddf3>
 800ce76:	4622      	mov	r2, r4
 800ce78:	462b      	mov	r3, r5
 800ce7a:	f7f3 fb69 	bl	8000550 <__aeabi_dmul>
 800ce7e:	a358      	add	r3, pc, #352	; (adr r3, 800cfe0 <__ieee754_pow+0xa30>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7f3 f9ac 	bl	80001e0 <__aeabi_dsub>
 800ce88:	4622      	mov	r2, r4
 800ce8a:	462b      	mov	r3, r5
 800ce8c:	f7f3 fb60 	bl	8000550 <__aeabi_dmul>
 800ce90:	a355      	add	r3, pc, #340	; (adr r3, 800cfe8 <__ieee754_pow+0xa38>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	f7f3 f9a5 	bl	80001e4 <__adddf3>
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	f7f3 fb57 	bl	8000550 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 f999 	bl	80001e0 <__aeabi_dsub>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 fb49 	bl	8000550 <__aeabi_dmul>
 800cebe:	2200      	movs	r2, #0
 800cec0:	ec41 0b19 	vmov	d9, r0, r1
 800cec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cec8:	4620      	mov	r0, r4
 800ceca:	4629      	mov	r1, r5
 800cecc:	f7f3 f988 	bl	80001e0 <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	ec51 0b19 	vmov	r0, r1, d9
 800ced8:	f7f3 fc64 	bl	80007a4 <__aeabi_ddiv>
 800cedc:	4632      	mov	r2, r6
 800cede:	4604      	mov	r4, r0
 800cee0:	460d      	mov	r5, r1
 800cee2:	463b      	mov	r3, r7
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 fb32 	bl	8000550 <__aeabi_dmul>
 800ceec:	4632      	mov	r2, r6
 800ceee:	463b      	mov	r3, r7
 800cef0:	f7f3 f978 	bl	80001e4 <__adddf3>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4620      	mov	r0, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f3 f970 	bl	80001e0 <__aeabi_dsub>
 800cf00:	4642      	mov	r2, r8
 800cf02:	464b      	mov	r3, r9
 800cf04:	f7f3 f96c 	bl	80001e0 <__aeabi_dsub>
 800cf08:	460b      	mov	r3, r1
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	493a      	ldr	r1, [pc, #232]	; (800cff8 <__ieee754_pow+0xa48>)
 800cf0e:	2000      	movs	r0, #0
 800cf10:	f7f3 f966 	bl	80001e0 <__aeabi_dsub>
 800cf14:	ec41 0b10 	vmov	d0, r0, r1
 800cf18:	ee10 3a90 	vmov	r3, s1
 800cf1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf24:	da2b      	bge.n	800cf7e <__ieee754_pow+0x9ce>
 800cf26:	4650      	mov	r0, sl
 800cf28:	f000 f966 	bl	800d1f8 <scalbn>
 800cf2c:	ec51 0b10 	vmov	r0, r1, d0
 800cf30:	ec53 2b18 	vmov	r2, r3, d8
 800cf34:	f7ff bbed 	b.w	800c712 <__ieee754_pow+0x162>
 800cf38:	4b30      	ldr	r3, [pc, #192]	; (800cffc <__ieee754_pow+0xa4c>)
 800cf3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf3e:	429e      	cmp	r6, r3
 800cf40:	f77f af0c 	ble.w	800cd5c <__ieee754_pow+0x7ac>
 800cf44:	4b2e      	ldr	r3, [pc, #184]	; (800d000 <__ieee754_pow+0xa50>)
 800cf46:	440b      	add	r3, r1
 800cf48:	4303      	orrs	r3, r0
 800cf4a:	d009      	beq.n	800cf60 <__ieee754_pow+0x9b0>
 800cf4c:	ec51 0b18 	vmov	r0, r1, d8
 800cf50:	2200      	movs	r2, #0
 800cf52:	2300      	movs	r3, #0
 800cf54:	f7f3 fd6e 	bl	8000a34 <__aeabi_dcmplt>
 800cf58:	3800      	subs	r0, #0
 800cf5a:	bf18      	it	ne
 800cf5c:	2001      	movne	r0, #1
 800cf5e:	e447      	b.n	800c7f0 <__ieee754_pow+0x240>
 800cf60:	4622      	mov	r2, r4
 800cf62:	462b      	mov	r3, r5
 800cf64:	f7f3 f93c 	bl	80001e0 <__aeabi_dsub>
 800cf68:	4642      	mov	r2, r8
 800cf6a:	464b      	mov	r3, r9
 800cf6c:	f7f3 fd76 	bl	8000a5c <__aeabi_dcmpge>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	f43f aef3 	beq.w	800cd5c <__ieee754_pow+0x7ac>
 800cf76:	e7e9      	b.n	800cf4c <__ieee754_pow+0x99c>
 800cf78:	f04f 0a00 	mov.w	sl, #0
 800cf7c:	e71a      	b.n	800cdb4 <__ieee754_pow+0x804>
 800cf7e:	ec51 0b10 	vmov	r0, r1, d0
 800cf82:	4619      	mov	r1, r3
 800cf84:	e7d4      	b.n	800cf30 <__ieee754_pow+0x980>
 800cf86:	491c      	ldr	r1, [pc, #112]	; (800cff8 <__ieee754_pow+0xa48>)
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f7ff bb30 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	2100      	movs	r1, #0
 800cf92:	f7ff bb2c 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf96:	4630      	mov	r0, r6
 800cf98:	4639      	mov	r1, r7
 800cf9a:	f7ff bb28 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf9e:	9204      	str	r2, [sp, #16]
 800cfa0:	f7ff bb7a 	b.w	800c698 <__ieee754_pow+0xe8>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f7ff bb64 	b.w	800c672 <__ieee754_pow+0xc2>
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w
 800cfb0:	00000000 	.word	0x00000000
 800cfb4:	3fe62e43 	.word	0x3fe62e43
 800cfb8:	fefa39ef 	.word	0xfefa39ef
 800cfbc:	3fe62e42 	.word	0x3fe62e42
 800cfc0:	0ca86c39 	.word	0x0ca86c39
 800cfc4:	be205c61 	.word	0xbe205c61
 800cfc8:	72bea4d0 	.word	0x72bea4d0
 800cfcc:	3e663769 	.word	0x3e663769
 800cfd0:	c5d26bf1 	.word	0xc5d26bf1
 800cfd4:	3ebbbd41 	.word	0x3ebbbd41
 800cfd8:	af25de2c 	.word	0xaf25de2c
 800cfdc:	3f11566a 	.word	0x3f11566a
 800cfe0:	16bebd93 	.word	0x16bebd93
 800cfe4:	3f66c16c 	.word	0x3f66c16c
 800cfe8:	5555553e 	.word	0x5555553e
 800cfec:	3fc55555 	.word	0x3fc55555
 800cff0:	3fe00000 	.word	0x3fe00000
 800cff4:	000fffff 	.word	0x000fffff
 800cff8:	3ff00000 	.word	0x3ff00000
 800cffc:	4090cbff 	.word	0x4090cbff
 800d000:	3f6f3400 	.word	0x3f6f3400
 800d004:	652b82fe 	.word	0x652b82fe
 800d008:	3c971547 	.word	0x3c971547

0800d00c <__ieee754_sqrt>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	ec55 4b10 	vmov	r4, r5, d0
 800d014:	4e55      	ldr	r6, [pc, #340]	; (800d16c <__ieee754_sqrt+0x160>)
 800d016:	43ae      	bics	r6, r5
 800d018:	ee10 0a10 	vmov	r0, s0
 800d01c:	ee10 3a10 	vmov	r3, s0
 800d020:	462a      	mov	r2, r5
 800d022:	4629      	mov	r1, r5
 800d024:	d110      	bne.n	800d048 <__ieee754_sqrt+0x3c>
 800d026:	ee10 2a10 	vmov	r2, s0
 800d02a:	462b      	mov	r3, r5
 800d02c:	f7f3 fa90 	bl	8000550 <__aeabi_dmul>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	4620      	mov	r0, r4
 800d036:	4629      	mov	r1, r5
 800d038:	f7f3 f8d4 	bl	80001e4 <__adddf3>
 800d03c:	4604      	mov	r4, r0
 800d03e:	460d      	mov	r5, r1
 800d040:	ec45 4b10 	vmov	d0, r4, r5
 800d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d048:	2d00      	cmp	r5, #0
 800d04a:	dc10      	bgt.n	800d06e <__ieee754_sqrt+0x62>
 800d04c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d050:	4330      	orrs	r0, r6
 800d052:	d0f5      	beq.n	800d040 <__ieee754_sqrt+0x34>
 800d054:	b15d      	cbz	r5, 800d06e <__ieee754_sqrt+0x62>
 800d056:	ee10 2a10 	vmov	r2, s0
 800d05a:	462b      	mov	r3, r5
 800d05c:	ee10 0a10 	vmov	r0, s0
 800d060:	f7f3 f8be 	bl	80001e0 <__aeabi_dsub>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	f7f3 fb9c 	bl	80007a4 <__aeabi_ddiv>
 800d06c:	e7e6      	b.n	800d03c <__ieee754_sqrt+0x30>
 800d06e:	1512      	asrs	r2, r2, #20
 800d070:	d074      	beq.n	800d15c <__ieee754_sqrt+0x150>
 800d072:	07d4      	lsls	r4, r2, #31
 800d074:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d078:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d07c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d080:	bf5e      	ittt	pl
 800d082:	0fda      	lsrpl	r2, r3, #31
 800d084:	005b      	lslpl	r3, r3, #1
 800d086:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d08a:	2400      	movs	r4, #0
 800d08c:	0fda      	lsrs	r2, r3, #31
 800d08e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d092:	107f      	asrs	r7, r7, #1
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	2516      	movs	r5, #22
 800d098:	4620      	mov	r0, r4
 800d09a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d09e:	1886      	adds	r6, r0, r2
 800d0a0:	428e      	cmp	r6, r1
 800d0a2:	bfde      	ittt	le
 800d0a4:	1b89      	suble	r1, r1, r6
 800d0a6:	18b0      	addle	r0, r6, r2
 800d0a8:	18a4      	addle	r4, r4, r2
 800d0aa:	0049      	lsls	r1, r1, #1
 800d0ac:	3d01      	subs	r5, #1
 800d0ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d0b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d0b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0ba:	d1f0      	bne.n	800d09e <__ieee754_sqrt+0x92>
 800d0bc:	462a      	mov	r2, r5
 800d0be:	f04f 0e20 	mov.w	lr, #32
 800d0c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0c6:	4281      	cmp	r1, r0
 800d0c8:	eb06 0c05 	add.w	ip, r6, r5
 800d0cc:	dc02      	bgt.n	800d0d4 <__ieee754_sqrt+0xc8>
 800d0ce:	d113      	bne.n	800d0f8 <__ieee754_sqrt+0xec>
 800d0d0:	459c      	cmp	ip, r3
 800d0d2:	d811      	bhi.n	800d0f8 <__ieee754_sqrt+0xec>
 800d0d4:	f1bc 0f00 	cmp.w	ip, #0
 800d0d8:	eb0c 0506 	add.w	r5, ip, r6
 800d0dc:	da43      	bge.n	800d166 <__ieee754_sqrt+0x15a>
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	db41      	blt.n	800d166 <__ieee754_sqrt+0x15a>
 800d0e2:	f100 0801 	add.w	r8, r0, #1
 800d0e6:	1a09      	subs	r1, r1, r0
 800d0e8:	459c      	cmp	ip, r3
 800d0ea:	bf88      	it	hi
 800d0ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d0f0:	eba3 030c 	sub.w	r3, r3, ip
 800d0f4:	4432      	add	r2, r6
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d0fc:	f1be 0e01 	subs.w	lr, lr, #1
 800d100:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d10c:	d1db      	bne.n	800d0c6 <__ieee754_sqrt+0xba>
 800d10e:	430b      	orrs	r3, r1
 800d110:	d006      	beq.n	800d120 <__ieee754_sqrt+0x114>
 800d112:	1c50      	adds	r0, r2, #1
 800d114:	bf13      	iteet	ne
 800d116:	3201      	addne	r2, #1
 800d118:	3401      	addeq	r4, #1
 800d11a:	4672      	moveq	r2, lr
 800d11c:	f022 0201 	bicne.w	r2, r2, #1
 800d120:	1063      	asrs	r3, r4, #1
 800d122:	0852      	lsrs	r2, r2, #1
 800d124:	07e1      	lsls	r1, r4, #31
 800d126:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d12a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d12e:	bf48      	it	mi
 800d130:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d134:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d138:	4614      	mov	r4, r2
 800d13a:	e781      	b.n	800d040 <__ieee754_sqrt+0x34>
 800d13c:	0ad9      	lsrs	r1, r3, #11
 800d13e:	3815      	subs	r0, #21
 800d140:	055b      	lsls	r3, r3, #21
 800d142:	2900      	cmp	r1, #0
 800d144:	d0fa      	beq.n	800d13c <__ieee754_sqrt+0x130>
 800d146:	02cd      	lsls	r5, r1, #11
 800d148:	d50a      	bpl.n	800d160 <__ieee754_sqrt+0x154>
 800d14a:	f1c2 0420 	rsb	r4, r2, #32
 800d14e:	fa23 f404 	lsr.w	r4, r3, r4
 800d152:	1e55      	subs	r5, r2, #1
 800d154:	4093      	lsls	r3, r2
 800d156:	4321      	orrs	r1, r4
 800d158:	1b42      	subs	r2, r0, r5
 800d15a:	e78a      	b.n	800d072 <__ieee754_sqrt+0x66>
 800d15c:	4610      	mov	r0, r2
 800d15e:	e7f0      	b.n	800d142 <__ieee754_sqrt+0x136>
 800d160:	0049      	lsls	r1, r1, #1
 800d162:	3201      	adds	r2, #1
 800d164:	e7ef      	b.n	800d146 <__ieee754_sqrt+0x13a>
 800d166:	4680      	mov	r8, r0
 800d168:	e7bd      	b.n	800d0e6 <__ieee754_sqrt+0xda>
 800d16a:	bf00      	nop
 800d16c:	7ff00000 	.word	0x7ff00000

0800d170 <with_errno>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	4604      	mov	r4, r0
 800d174:	460d      	mov	r5, r1
 800d176:	4616      	mov	r6, r2
 800d178:	f7ff f8c8 	bl	800c30c <__errno>
 800d17c:	4629      	mov	r1, r5
 800d17e:	6006      	str	r6, [r0, #0]
 800d180:	4620      	mov	r0, r4
 800d182:	bd70      	pop	{r4, r5, r6, pc}

0800d184 <xflow>:
 800d184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d186:	4614      	mov	r4, r2
 800d188:	461d      	mov	r5, r3
 800d18a:	b108      	cbz	r0, 800d190 <xflow+0xc>
 800d18c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d190:	e9cd 2300 	strd	r2, r3, [sp]
 800d194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d198:	4620      	mov	r0, r4
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7f3 f9d8 	bl	8000550 <__aeabi_dmul>
 800d1a0:	2222      	movs	r2, #34	; 0x22
 800d1a2:	b003      	add	sp, #12
 800d1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1a8:	f7ff bfe2 	b.w	800d170 <with_errno>

0800d1ac <__math_uflow>:
 800d1ac:	b508      	push	{r3, lr}
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1b4:	f7ff ffe6 	bl	800d184 <xflow>
 800d1b8:	ec41 0b10 	vmov	d0, r0, r1
 800d1bc:	bd08      	pop	{r3, pc}

0800d1be <__math_oflow>:
 800d1be:	b508      	push	{r3, lr}
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d1c6:	f7ff ffdd 	bl	800d184 <xflow>
 800d1ca:	ec41 0b10 	vmov	d0, r0, r1
 800d1ce:	bd08      	pop	{r3, pc}

0800d1d0 <fabs>:
 800d1d0:	ec51 0b10 	vmov	r0, r1, d0
 800d1d4:	ee10 2a10 	vmov	r2, s0
 800d1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1dc:	ec43 2b10 	vmov	d0, r2, r3
 800d1e0:	4770      	bx	lr

0800d1e2 <finite>:
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	ed8d 0b00 	vstr	d0, [sp]
 800d1e8:	9801      	ldr	r0, [sp, #4]
 800d1ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d1ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d1f2:	0fc0      	lsrs	r0, r0, #31
 800d1f4:	b002      	add	sp, #8
 800d1f6:	4770      	bx	lr

0800d1f8 <scalbn>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	ec55 4b10 	vmov	r4, r5, d0
 800d1fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d202:	4606      	mov	r6, r0
 800d204:	462b      	mov	r3, r5
 800d206:	b99a      	cbnz	r2, 800d230 <scalbn+0x38>
 800d208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d20c:	4323      	orrs	r3, r4
 800d20e:	d036      	beq.n	800d27e <scalbn+0x86>
 800d210:	4b39      	ldr	r3, [pc, #228]	; (800d2f8 <scalbn+0x100>)
 800d212:	4629      	mov	r1, r5
 800d214:	ee10 0a10 	vmov	r0, s0
 800d218:	2200      	movs	r2, #0
 800d21a:	f7f3 f999 	bl	8000550 <__aeabi_dmul>
 800d21e:	4b37      	ldr	r3, [pc, #220]	; (800d2fc <scalbn+0x104>)
 800d220:	429e      	cmp	r6, r3
 800d222:	4604      	mov	r4, r0
 800d224:	460d      	mov	r5, r1
 800d226:	da10      	bge.n	800d24a <scalbn+0x52>
 800d228:	a32b      	add	r3, pc, #172	; (adr r3, 800d2d8 <scalbn+0xe0>)
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	e03a      	b.n	800d2a6 <scalbn+0xae>
 800d230:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d234:	428a      	cmp	r2, r1
 800d236:	d10c      	bne.n	800d252 <scalbn+0x5a>
 800d238:	ee10 2a10 	vmov	r2, s0
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f2 ffd0 	bl	80001e4 <__adddf3>
 800d244:	4604      	mov	r4, r0
 800d246:	460d      	mov	r5, r1
 800d248:	e019      	b.n	800d27e <scalbn+0x86>
 800d24a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d24e:	460b      	mov	r3, r1
 800d250:	3a36      	subs	r2, #54	; 0x36
 800d252:	4432      	add	r2, r6
 800d254:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d258:	428a      	cmp	r2, r1
 800d25a:	dd08      	ble.n	800d26e <scalbn+0x76>
 800d25c:	2d00      	cmp	r5, #0
 800d25e:	a120      	add	r1, pc, #128	; (adr r1, 800d2e0 <scalbn+0xe8>)
 800d260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d264:	da1c      	bge.n	800d2a0 <scalbn+0xa8>
 800d266:	a120      	add	r1, pc, #128	; (adr r1, 800d2e8 <scalbn+0xf0>)
 800d268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d26c:	e018      	b.n	800d2a0 <scalbn+0xa8>
 800d26e:	2a00      	cmp	r2, #0
 800d270:	dd08      	ble.n	800d284 <scalbn+0x8c>
 800d272:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d27a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d27e:	ec45 4b10 	vmov	d0, r4, r5
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d288:	da19      	bge.n	800d2be <scalbn+0xc6>
 800d28a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d28e:	429e      	cmp	r6, r3
 800d290:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d294:	dd0a      	ble.n	800d2ac <scalbn+0xb4>
 800d296:	a112      	add	r1, pc, #72	; (adr r1, 800d2e0 <scalbn+0xe8>)
 800d298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e2      	bne.n	800d266 <scalbn+0x6e>
 800d2a0:	a30f      	add	r3, pc, #60	; (adr r3, 800d2e0 <scalbn+0xe8>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 f953 	bl	8000550 <__aeabi_dmul>
 800d2aa:	e7cb      	b.n	800d244 <scalbn+0x4c>
 800d2ac:	a10a      	add	r1, pc, #40	; (adr r1, 800d2d8 <scalbn+0xe0>)
 800d2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0b8      	beq.n	800d228 <scalbn+0x30>
 800d2b6:	a10e      	add	r1, pc, #56	; (adr r1, 800d2f0 <scalbn+0xf8>)
 800d2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2bc:	e7b4      	b.n	800d228 <scalbn+0x30>
 800d2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2c2:	3236      	adds	r2, #54	; 0x36
 800d2c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <scalbn+0x108>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	e7e8      	b.n	800d2a6 <scalbn+0xae>
 800d2d4:	f3af 8000 	nop.w
 800d2d8:	c2f8f359 	.word	0xc2f8f359
 800d2dc:	01a56e1f 	.word	0x01a56e1f
 800d2e0:	8800759c 	.word	0x8800759c
 800d2e4:	7e37e43c 	.word	0x7e37e43c
 800d2e8:	8800759c 	.word	0x8800759c
 800d2ec:	fe37e43c 	.word	0xfe37e43c
 800d2f0:	c2f8f359 	.word	0xc2f8f359
 800d2f4:	81a56e1f 	.word	0x81a56e1f
 800d2f8:	43500000 	.word	0x43500000
 800d2fc:	ffff3cb0 	.word	0xffff3cb0
 800d300:	3c900000 	.word	0x3c900000

0800d304 <_init>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	bf00      	nop
 800d308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30a:	bc08      	pop	{r3}
 800d30c:	469e      	mov	lr, r3
 800d30e:	4770      	bx	lr

0800d310 <_fini>:
 800d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d312:	bf00      	nop
 800d314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d316:	bc08      	pop	{r3}
 800d318:	469e      	mov	lr, r3
 800d31a:	4770      	bx	lr
