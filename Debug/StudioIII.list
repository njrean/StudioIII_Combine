
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca94  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800cc30  0800cc30  0001cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc80  0800cc80  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc80  0800cc80  0001cc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc88  0800cc88  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc8c  0800cc8c  0001cc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800cc90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000150  0800cde0  00020150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800cde0  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001580c  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  0003598c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00039368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a88  00000000  00000000  0003a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134d7  00000000  00000000  00050d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918b6  00000000  00000000  00064247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f5afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a80  00000000  00000000  000f5bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fa644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000150 	.word	0x20000150
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cc14 	.word	0x0800cc14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000154 	.word	0x20000154
 80001d4:	0800cc14 	.word	0x0800cc14

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f004 f9ce 	bl	800523c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f9aa 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fbf8 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fbce 	bl	8001648 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eac:	f000 fa0c 	bl	80012c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb0:	f000 fa38 	bl	8001324 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb4:	f000 fb78 	bl	80015a8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eb8:	f000 fad4 	bl	8001464 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebc:	f000 fb26 	bl	800150c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fb96 	bl	80015f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8000ec4:	20c8      	movs	r0, #200	; 0xc8
 8000ec6:	f004 fa2b 	bl	8005320 <HAL_Delay>
  setmatrix();
 8000eca:	f000 fecd 	bl	8001c68 <setmatrix>
  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ece:	48aa      	ldr	r0, [pc, #680]	; (8001178 <main+0x2e4>)
 8000ed0:	f008 f90c 	bl	80090ec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	48a8      	ldr	r0, [pc, #672]	; (8001178 <main+0x2e4>)
 8000ed8:	f008 fa1e 	bl	8009318 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000edc:	213c      	movs	r1, #60	; 0x3c
 8000ede:	48a7      	ldr	r0, [pc, #668]	; (800117c <main+0x2e8>)
 8000ee0:	f008 fb70 	bl	80095c4 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee4:	48a6      	ldr	r0, [pc, #664]	; (8001180 <main+0x2ec>)
 8000ee6:	f008 f95b 	bl	80091a0 <HAL_TIM_Base_Start_IT>

  //Set Matrix for Kalman Filter

  //
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	48a5      	ldr	r0, [pc, #660]	; (8001184 <main+0x2f0>)
 8000ef0:	f005 f8f8 	bl	80060e4 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim11);
 8000ef4:	48a4      	ldr	r0, [pc, #656]	; (8001188 <main+0x2f4>)
 8000ef6:	f008 f953 	bl	80091a0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(state)
 8000efa:	4ba4      	ldr	r3, [pc, #656]	; (800118c <main+0x2f8>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	f200 8130 	bhi.w	8001164 <main+0x2d0>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x78>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f31 	.word	0x08000f31
 8000f10:	08001095 	.word	0x08001095
 8000f14:	08001117 	.word	0x08001117
 8000f18:	08001155 	.word	0x08001155
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	080010ab 	.word	0x080010ab
	 {
	 case Main:
		 UART();
 8000f24:	f003 f880 	bl	8004028 <UART>
		 Finish =0;
 8000f28:	4b99      	ldr	r3, [pc, #612]	; (8001190 <main+0x2fc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
		 break;
 8000f2e:	e162      	b.n	80011f6 <main+0x362>
	 case Run:
		 UART();
 8000f30:	f003 f87a 	bl	8004028 <UART>
		 if(ModeN==0){
 8000f34:	4b97      	ldr	r3, [pc, #604]	; (8001194 <main+0x300>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d13f      	bne.n	8000fbc <main+0x128>
			 if(Go_Flag==0){
 8000f3c:	4b96      	ldr	r3, [pc, #600]	; (8001198 <main+0x304>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <main+0xbc>
				 TrajectoryGenerator_Flag=1;
 8000f44:	4b95      	ldr	r3, [pc, #596]	; (800119c <main+0x308>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
				 TrajectoryGenerator();
 8000f4a:	f001 f909 	bl	8002160 <TrajectoryGenerator>
					 }
					 state = EndEffector;
				 }
			 }
		 }
		 break;
 8000f4e:	e10d      	b.n	800116c <main+0x2d8>
			 else if(Go_Flag==1){
 8000f50:	4b91      	ldr	r3, [pc, #580]	; (8001198 <main+0x304>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 8109 	bne.w	800116c <main+0x2d8>
				 if(theta_ref == theta_f){
 8000f5a:	4b91      	ldr	r3, [pc, #580]	; (80011a0 <main+0x30c>)
 8000f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f60:	4b90      	ldr	r3, [pc, #576]	; (80011a4 <main+0x310>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff fd5b 	bl	8000a20 <__aeabi_dcmpeq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <main+0xde>
		 break;
 8000f70:	e0fc      	b.n	800116c <main+0x2d8>
					 Go_Flag =0;
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <main+0x304>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
					 volt = 0;
 8000f78:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <main+0x314>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
					 RunMotor(volt, PID_dir);
 8000f80:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <main+0x314>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f8e:	793b      	ldrb	r3, [r7, #4]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4a86      	ldr	r2, [pc, #536]	; (80011ac <main+0x318>)
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fc3b 	bl	8001814 <RunMotor>
					 if(Enable_EndEffector==1){
 8000f9e:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <main+0x31c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d103      	bne.n	8000fae <main+0x11a>
						 FlagOpen_EndEffector=1;
 8000fa6:	4b83      	ldr	r3, [pc, #524]	; (80011b4 <main+0x320>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e002      	b.n	8000fb4 <main+0x120>
						 FlagOpen_EndEffector=0;
 8000fae:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <main+0x320>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
					 state = EndEffector;
 8000fb4:	4b75      	ldr	r3, [pc, #468]	; (800118c <main+0x2f8>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	701a      	strb	r2, [r3, #0]
		 break;
 8000fba:	e0d7      	b.n	800116c <main+0x2d8>
		 else if(ModeN ==1){
 8000fbc:	4b75      	ldr	r3, [pc, #468]	; (8001194 <main+0x300>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 80d3 	bne.w	800116c <main+0x2d8>
			 if(n_station > n_station_max){
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <main+0x324>)
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	4b7c      	ldr	r3, [pc, #496]	; (80011bc <main+0x328>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d909      	bls.n	8000fe6 <main+0x152>
				 Go_Flag=0;
 8000fd2:	4b71      	ldr	r3, [pc, #452]	; (8001198 <main+0x304>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
				 Finish=1;
 8000fd8:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <main+0x2fc>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
				 state = Main;
 8000fde:	4b6b      	ldr	r3, [pc, #428]	; (800118c <main+0x2f8>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	701a      	strb	r2, [r3, #0]
		 break;
 8000fe4:	e0c2      	b.n	800116c <main+0x2d8>
			 else if(Go_Flag==0){
 8000fe6:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <main+0x304>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11c      	bne.n	8001028 <main+0x194>
				 TrajectoryGenerator_Flag=1;
 8000fee:	4b6b      	ldr	r3, [pc, #428]	; (800119c <main+0x308>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
				 theta_f = station[index_station[n_station]];
 8000ff4:	4b70      	ldr	r3, [pc, #448]	; (80011b8 <main+0x324>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <main+0x32c>)
 8000ffc:	5c9b      	ldrb	r3, [r3, r2]
 8000ffe:	4a71      	ldr	r2, [pc, #452]	; (80011c4 <main+0x330>)
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa4a 	bl	80004a0 <__aeabi_f2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4964      	ldr	r1, [pc, #400]	; (80011a4 <main+0x310>)
 8001012:	e9c1 2300 	strd	r2, r3, [r1]
				 TrajectoryGenerator();
 8001016:	f001 f8a3 	bl	8002160 <TrajectoryGenerator>
				 n_station++;
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <main+0x324>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <main+0x324>)
 8001024:	701a      	strb	r2, [r3, #0]
		 break;
 8001026:	e0a1      	b.n	800116c <main+0x2d8>
			 else if(Go_Flag==1){
 8001028:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <main+0x304>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	f040 809d 	bne.w	800116c <main+0x2d8>
				 if(theta_ref == theta_f){
 8001032:	4b5b      	ldr	r3, [pc, #364]	; (80011a0 <main+0x30c>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <main+0x310>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff fcef 	bl	8000a20 <__aeabi_dcmpeq>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <main+0x1b6>
		 break;
 8001048:	e090      	b.n	800116c <main+0x2d8>
					 Go_Flag=0;
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <main+0x304>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
					 volt = 0;
 8001050:	4b55      	ldr	r3, [pc, #340]	; (80011a8 <main+0x314>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
					 RunMotor(volt, PID_dir);
 8001058:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <main+0x314>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	edc7 7a01 	vstr	s15, [r7, #4]
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <main+0x318>)
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fbcf 	bl	8001814 <RunMotor>
					 if(Enable_EndEffector==1){
 8001076:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <main+0x31c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d103      	bne.n	8001086 <main+0x1f2>
						 FlagOpen_EndEffector=1;
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <main+0x320>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e002      	b.n	800108c <main+0x1f8>
						 FlagOpen_EndEffector=0;
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x320>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
					 state = EndEffector;
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <main+0x2f8>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
		 break;
 8001092:	e06b      	b.n	800116c <main+0x2d8>
	 case Home:
		 UART();
 8001094:	f002 ffc8 	bl	8004028 <UART>
		 SetHome();
 8001098:	f000 fcbc 	bl	8001a14 <SetHome>
		Unwrap();
 800109c:	f000 fc08 	bl	80018b0 <Unwrap>
		BackwardDifference();
 80010a0:	f000 fc98 	bl	80019d4 <BackwardDifference>
		kalmanfilter();
 80010a4:	f001 f838 	bl	8002118 <kalmanfilter>
		 break;
 80010a8:	e0a5      	b.n	80011f6 <main+0x362>
	 case Setzero:
		 UART();
 80010aa:	f002 ffbd 	bl	8004028 <UART>
		 if(micros() - timestamp > 2000000){
 80010ae:	f000 fd33 	bl	8001b18 <micros>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4944      	ldr	r1, [pc, #272]	; (80011c8 <main+0x334>)
 80010b8:	6809      	ldr	r1, [r1, #0]
 80010ba:	2000      	movs	r0, #0
 80010bc:	4688      	mov	r8, r1
 80010be:	4681      	mov	r9, r0
 80010c0:	ebb2 0408 	subs.w	r4, r2, r8
 80010c4:	eb63 0509 	sbc.w	r5, r3, r9
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <main+0x338>)
 80010ca:	429c      	cmp	r4, r3
 80010cc:	f175 0300 	sbcs.w	r3, r5, #0
 80010d0:	d34e      	bcc.n	8001170 <main+0x2dc>
			 TIM3->CNT = 0;
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <main+0x33c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
			angle_before = 0;
 80010d8:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <main+0x340>)
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
			angle = 0;
 80010e0:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <main+0x344>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
			angle_base_before = 0;
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <main+0x348>)
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
			angle_base =0;
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <main+0x34c>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
			angle_sum_before = 0;
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <main+0x350>)
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
			theta_now = 0;
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <main+0x354>)
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
			state = Main;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <main+0x2f8>)
 800110a:	2204      	movs	r2, #4
 800110c:	701a      	strb	r2, [r3, #0]
			Finish=0;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <main+0x2fc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8001114:	e02c      	b.n	8001170 <main+0x2dc>
	 case EndEffector:
		 UART();
 8001116:	f002 ff87 	bl	8004028 <UART>
		 OpenEndEffector();
 800111a:	f003 fd05 	bl	8004b28 <OpenEndEffector>
		 if(ModeN==0 && EndEffector_State == State_wait ){
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <main+0x300>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10a      	bne.n	800113c <main+0x2a8>
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <main+0x358>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d106      	bne.n	800113c <main+0x2a8>
			 state= Main;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <main+0x2f8>)
 8001130:	2204      	movs	r2, #4
 8001132:	701a      	strb	r2, [r3, #0]
			 Finish=1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <main+0x2fc>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		 }
		 else if(ModeN==1 && EndEffector_State == State_wait){
			 state= Run;
		 }
		 break;
 800113a:	e01b      	b.n	8001174 <main+0x2e0>
		 else if(ModeN==1 && EndEffector_State == State_wait){
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <main+0x300>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d117      	bne.n	8001174 <main+0x2e0>
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <main+0x358>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d113      	bne.n	8001174 <main+0x2e0>
			 state= Run;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <main+0x2f8>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
		 break;
 8001152:	e00f      	b.n	8001174 <main+0x2e0>
	 case Emergency:
		 if(Emergency_status==0){
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <main+0x35c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d14b      	bne.n	80011f4 <main+0x360>
			 state=Main;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <main+0x2f8>)
 800115e:	2204      	movs	r2, #4
 8001160:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8001162:	e047      	b.n	80011f4 <main+0x360>
	 default:
		 state =Main;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <main+0x2f8>)
 8001166:	2204      	movs	r2, #4
 8001168:	701a      	strb	r2, [r3, #0]
		 break;
 800116a:	e044      	b.n	80011f6 <main+0x362>
		 break;
 800116c:	bf00      	nop
 800116e:	e6c4      	b.n	8000efa <main+0x66>
		 break;
 8001170:	bf00      	nop
 8001172:	e6c2      	b.n	8000efa <main+0x66>
		 break;
 8001174:	bf00      	nop
 8001176:	e6c0      	b.n	8000efa <main+0x66>
 8001178:	200001c0 	.word	0x200001c0
 800117c:	20000208 	.word	0x20000208
 8001180:	20000250 	.word	0x20000250
 8001184:	40020400 	.word	0x40020400
 8001188:	20000298 	.word	0x20000298
 800118c:	200000d7 	.word	0x200000d7
 8001190:	20000671 	.word	0x20000671
 8001194:	20000670 	.word	0x20000670
 8001198:	200003e9 	.word	0x200003e9
 800119c:	200003ea 	.word	0x200003ea
 80011a0:	20000620 	.word	0x20000620
 80011a4:	20000080 	.word	0x20000080
 80011a8:	200003e4 	.word	0x200003e4
 80011ac:	200000da 	.word	0x200000da
 80011b0:	20000663 	.word	0x20000663
 80011b4:	20000684 	.word	0x20000684
 80011b8:	200000d6 	.word	0x200000d6
 80011bc:	200000d5 	.word	0x200000d5
 80011c0:	20000674 	.word	0x20000674
 80011c4:	200000ac 	.word	0x200000ac
 80011c8:	2000068c 	.word	0x2000068c
 80011cc:	001e8481 	.word	0x001e8481
 80011d0:	40000400 	.word	0x40000400
 80011d4:	200003f4 	.word	0x200003f4
 80011d8:	200003f0 	.word	0x200003f0
 80011dc:	20000400 	.word	0x20000400
 80011e0:	20000404 	.word	0x20000404
 80011e4:	200003fc 	.word	0x200003fc
 80011e8:	200003f8 	.word	0x200003f8
 80011ec:	200000d8 	.word	0x200000d8
 80011f0:	200003eb 	.word	0x200003eb
		 break;
 80011f4:	bf00      	nop
	 switch(state)
 80011f6:	e680      	b.n	8000efa <main+0x66>

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00a fd32 	bl	800bc70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <SystemClock_Config+0xc8>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <SystemClock_Config+0xc8>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <SystemClock_Config+0xc8>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <SystemClock_Config+0xcc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <SystemClock_Config+0xcc>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <SystemClock_Config+0xcc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f007 fa4d 	bl	800871c <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001288:	f003 fcf6 	bl	8004c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2103      	movs	r1, #3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 fcaf 	bl	8008c0c <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b4:	f003 fce0 	bl	8004c78 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	; 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f004 ff1f 	bl	8006148 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f003 fcb2 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000016c 	.word	0x2000016c
 800131c:	40005400 	.word	0x40005400
 8001320:	00061a80 	.word	0x00061a80

08001324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	; 0x58
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2220      	movs	r2, #32
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00a fc87 	bl	800bc70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <MX_TIM1_Init+0x138>)
 8001364:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <MX_TIM1_Init+0x13c>)
 8001366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <MX_TIM1_Init+0x138>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <MX_TIM1_Init+0x138>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <MX_TIM1_Init+0x138>)
 8001376:	f241 3287 	movw	r2, #4999	; 0x1387
 800137a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <MX_TIM1_Init+0x138>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <MX_TIM1_Init+0x138>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <MX_TIM1_Init+0x138>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138e:	4833      	ldr	r0, [pc, #204]	; (800145c <MX_TIM1_Init+0x138>)
 8001390:	f007 fe5c 	bl	800904c <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800139a:	f003 fc6d 	bl	8004c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013a8:	4619      	mov	r1, r3
 80013aa:	482c      	ldr	r0, [pc, #176]	; (800145c <MX_TIM1_Init+0x138>)
 80013ac:	f008 fb62 	bl	8009a74 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013b6:	f003 fc5f 	bl	8004c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ba:	4828      	ldr	r0, [pc, #160]	; (800145c <MX_TIM1_Init+0x138>)
 80013bc:	f007 ff52 	bl	8009264 <HAL_TIM_PWM_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013c6:	f003 fc57 	bl	8004c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d6:	4619      	mov	r1, r3
 80013d8:	4820      	ldr	r0, [pc, #128]	; (800145c <MX_TIM1_Init+0x138>)
 80013da:	f008 ff07 	bl	800a1ec <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013e4:	f003 fc48 	bl	8004c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <MX_TIM1_Init+0x138>)
 800140e:	f008 fa6f 	bl	80098f0 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001418:	f003 fc2e 	bl	8004c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_TIM1_Init+0x138>)
 8001440:	f008 ff42 	bl	800a2c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800144a:	f003 fc15 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <MX_TIM1_Init+0x138>)
 8001450:	f003 fd44 	bl	8004edc <HAL_TIM_MspPostInit>

}
 8001454:	bf00      	nop
 8001456:	3758      	adds	r7, #88	; 0x58
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200001c0 	.word	0x200001c0
 8001460:	40010000 	.word	0x40010000

08001464 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fbfc 	bl	800bc70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_TIM3_Init+0xa0>)
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <MX_TIM3_Init+0xa4>)
 8001484:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_TIM3_Init+0xa0>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_TIM3_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_TIM3_Init+0xa0>)
 8001494:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001498:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_TIM3_Init+0xa0>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM3_Init+0xa0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a6:	2303      	movs	r3, #3
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM3_Init+0xa0>)
 80014d2:	f007 ffd1 	bl	8009478 <HAL_TIM_Encoder_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f003 fbcc 	bl	8004c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM3_Init+0xa0>)
 80014ee:	f008 fe7d 	bl	800a1ec <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014f8:	f003 fbbe 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000208 	.word	0x20000208
 8001508:	40000400 	.word	0x40000400

0800150c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_TIM4_Init+0x94>)
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_TIM4_Init+0x98>)
 800152c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM4_Init+0x94>)
 8001530:	2209      	movs	r2, #9
 8001532:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM4_Init+0x94>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_TIM4_Init+0x94>)
 800153c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001540:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_TIM4_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_TIM4_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_TIM4_Init+0x94>)
 8001550:	f007 fd7c 	bl	800904c <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800155a:	f003 fb8d 	bl	8004c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM4_Init+0x94>)
 800156c:	f008 fa82 	bl	8009a74 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001576:	f003 fb7f 	bl	8004c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM4_Init+0x94>)
 8001588:	f008 fe30 	bl	800a1ec <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001592:	f003 fb71 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000250 	.word	0x20000250
 80015a4:	40000800 	.word	0x40000800

080015a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <MX_TIM11_Init+0x44>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015b4:	2263      	movs	r2, #99	; 0x63
 80015b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015d4:	f007 fd3a 	bl	800904c <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80015de:	f003 fb4b 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000298 	.word	0x20000298
 80015ec:	40014800 	.word	0x40014800

080015f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_USART2_UART_Init+0x50>)
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <MX_USART2_UART_Init+0x54>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x50>)
 80015fc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_USART2_UART_Init+0x50>)
 8001604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001608:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_USART2_UART_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x50>)
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x50>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x50>)
 800162c:	f008 feb2 	bl	800a394 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001636:	f003 fb1f 	bl	8004c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002e0 	.word	0x200002e0
 8001644:	40004400 	.word	0x40004400

08001648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_DMA_Init+0x4c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <MX_DMA_Init+0x4c>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_DMA_Init+0x4c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2010      	movs	r0, #16
 8001670:	f003 ff55 	bl	800551e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001674:	2010      	movs	r0, #16
 8001676:	f003 ff6e 	bl	8005556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2011      	movs	r0, #17
 8001680:	f003 ff4d 	bl	800551e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001684:	2011      	movs	r0, #17
 8001686:	f003 ff66 	bl	8005556 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a53      	ldr	r2, [pc, #332]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b51      	ldr	r3, [pc, #324]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a45      	ldr	r2, [pc, #276]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <MX_GPIO_Init+0x16c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <MX_GPIO_Init+0x16c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <MX_GPIO_Init+0x16c>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MX_GPIO_Init+0x16c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2120      	movs	r1, #32
 8001722:	4839      	ldr	r0, [pc, #228]	; (8001808 <MX_GPIO_Init+0x170>)
 8001724:	f004 fcde 	bl	80060e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800172e:	4837      	ldr	r0, [pc, #220]	; (800180c <MX_GPIO_Init+0x174>)
 8001730:	f004 fcd8 	bl	80060e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4831      	ldr	r0, [pc, #196]	; (8001810 <MX_GPIO_Init+0x178>)
 800174c:	f004 fb2e 	bl	8005dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001750:	2320      	movs	r3, #32
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4828      	ldr	r0, [pc, #160]	; (8001808 <MX_GPIO_Init+0x170>)
 8001768:	f004 fb20 	bl	8005dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 800176c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <MX_GPIO_Init+0x174>)
 8001786:	f004 fb11 	bl	8005dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_X_Pin */
  GPIO_InitStruct.Pin = Encoder_X_Pin;
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_X_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <MX_GPIO_Init+0x178>)
 80017a0:	f004 fb04 	bl	8005dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80017a4:	2310      	movs	r3, #16
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_GPIO_Init+0x174>)
 80017ba:	f004 faf7 	bl	8005dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 80017be:	2320      	movs	r3, #32
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017c2:	2311      	movs	r3, #17
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_GPIO_Init+0x174>)
 80017d6:	f004 fae9 	bl	8005dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	200a      	movs	r0, #10
 80017e0:	f003 fe9d 	bl	800551e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f003 feb6 	bl	8005556 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2017      	movs	r0, #23
 80017f0:	f003 fe95 	bl	800551e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017f4:	2017      	movs	r0, #23
 80017f6:	f003 feae 	bl	8005556 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800

08001814 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(uint8_t volt, uint8_t direction)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
	static float PWMOut = 0;
	if (Emergency_status == 1)
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <RunMotor+0x88>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <RunMotor+0x1c>
	{
		volt = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	71fb      	strb	r3, [r7, #7]
	}

	if (volt == 0)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <RunMotor+0x2e>
	{
		HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2120      	movs	r1, #32
 800183a:	4819      	ldr	r0, [pc, #100]	; (80018a0 <RunMotor+0x8c>)
 800183c:	f004 fc52 	bl	80060e4 <HAL_GPIO_WritePin>
 8001840:	e004      	b.n	800184c <RunMotor+0x38>
	}

	else
	{
		HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2120      	movs	r1, #32
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <RunMotor+0x8c>)
 8001848:	f004 fc4c 	bl	80060e4 <HAL_GPIO_WritePin>
	}

	PWMOut = (volt*5000)/24;
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <RunMotor+0x90>)
 8001858:	fb82 1203 	smull	r1, r2, r2, r3
 800185c:	1092      	asrs	r2, r2, #2
 800185e:	17db      	asrs	r3, r3, #31
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <RunMotor+0x94>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	461a      	mov	r2, r3
 8001874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <RunMotor+0x8c>)
 800187a:	f004 fc33 	bl	80060e4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <RunMotor+0x94>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <RunMotor+0x98>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 2a90 	vmov	r2, s15
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003eb 	.word	0x200003eb
 80018a0:	40020400 	.word	0x40020400
 80018a4:	2aaaaaab 	.word	0x2aaaaaab
 80018a8:	20000690 	.word	0x20000690
 80018ac:	200001c0 	.word	0x200001c0

080018b0 <Unwrap>:

void Unwrap()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	angle_before = angle;
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <Unwrap+0x100>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <Unwrap+0x104>)
 80018ba:	6013      	str	r3, [r2, #0]
	angle_sum_before = theta_now;
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <Unwrap+0x108>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a3e      	ldr	r2, [pc, #248]	; (80019bc <Unwrap+0x10c>)
 80018c2:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2*M_PI);
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <Unwrap+0x110>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fdc7 	bl	800045c <__aeabi_ui2d>
 80018ce:	a334      	add	r3, pc, #208	; (adr r3, 80019a0 <Unwrap+0xf0>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe ff66 	bl	80007a4 <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	a331      	add	r3, pc, #196	; (adr r3, 80019a8 <Unwrap+0xf8>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f8fd 	bl	8000af0 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <Unwrap+0x100>)
 80018fa:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <Unwrap+0x114>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <Unwrap+0x118>)
 8001902:	6013      	str	r3, [r2, #0]

	if ((angle - angle_before) <= -threshold)
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <Unwrap+0x100>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <Unwrap+0x104>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <Unwrap+0x11c>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	eef1 7a67 	vneg.f32	s15, s15
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d80b      	bhi.n	8001940 <Unwrap+0x90>
	{
		angle_base = angle_base_before + angle_max;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <Unwrap+0x118>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <Unwrap+0x120>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <Unwrap+0x114>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
 800193e:	e01f      	b.n	8001980 <Unwrap+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <Unwrap+0x100>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <Unwrap+0x104>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <Unwrap+0x11c>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	db0b      	blt.n	8001978 <Unwrap+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Unwrap+0x118>)
 8001962:	ed93 7a00 	vldr	s14, [r3]
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <Unwrap+0x120>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <Unwrap+0x114>)
 8001972:	edc3 7a00 	vstr	s15, [r3]
 8001976:	e003      	b.n	8001980 <Unwrap+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <Unwrap+0x118>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <Unwrap+0x114>)
 800197e:	6013      	str	r3, [r2, #0]
	}

	theta_now = angle + angle_base;
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <Unwrap+0x100>)
 8001982:	ed93 7a00 	vldr	s14, [r3]
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <Unwrap+0x114>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <Unwrap+0x108>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40bfff00 	.word	0x40bfff00
 80019a8:	54442d18 	.word	0x54442d18
 80019ac:	401921fb 	.word	0x401921fb
 80019b0:	200003f0 	.word	0x200003f0
 80019b4:	200003f4 	.word	0x200003f4
 80019b8:	200003f8 	.word	0x200003f8
 80019bc:	200003fc 	.word	0x200003fc
 80019c0:	40000400 	.word	0x40000400
 80019c4:	20000404 	.word	0x20000404
 80019c8:	20000400 	.word	0x20000400
 80019cc:	20000004 	.word	0x20000004
 80019d0:	20000008 	.word	0x20000008

080019d4 <BackwardDifference>:

void BackwardDifference()
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	omega_tosensor = (theta_now-angle_sum_before)/dt;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <BackwardDifference+0x30>)
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <BackwardDifference+0x34>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <BackwardDifference+0x38>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <BackwardDifference+0x3c>)
 80019f4:	edc3 7a00 	vstr	s15, [r3]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200003f8 	.word	0x200003f8
 8001a08:	200003fc 	.word	0x200003fc
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	20000408 	.word	0x20000408

08001a14 <SetHome>:

void SetHome()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	if(SetHome_Flag == 1)
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <SetHome+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d115      	bne.n	8001a4e <SetHome+0x3a>
	{
		volt = 10;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <SetHome+0x48>)
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <SetHome+0x4c>)
 8001a26:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <SetHome+0x48>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a32:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a36:	793b      	ldrb	r3, [r7, #4]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fee9 	bl	8001814 <RunMotor>
		AlSet_Flag = 0;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <SetHome+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <SetHome+0x44>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	}
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200003e8 	.word	0x200003e8
 8001a5c:	200003e4 	.word	0x200003e4
 8001a60:	41200000 	.word	0x41200000
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder_X_Pin && AlSet_Flag == 0)
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d124      	bne.n	8001ac2 <HAL_GPIO_EXTI_Callback+0x5a>
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_GPIO_EXTI_Callback+0x94>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d120      	bne.n	8001ac2 <HAL_GPIO_EXTI_Callback+0x5a>
	{
		volt = 0;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a92:	edc7 7a00 	vstr	s15, [r7]
 8001a96:	783b      	ldrb	r3, [r7, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff feb9 	bl	8001814 <RunMotor>
		theta_now = 0;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
		AlSet_Flag = 1;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_GPIO_EXTI_Callback+0x94>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
		state = Setzero;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 8001ab6:	f000 f82f 	bl	8001b18 <micros>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ac0:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d115      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001ac8:	2110      	movs	r1, #16
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001acc:	f004 faf2 	bl	80060b4 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10b      	bne.n	8001aee <HAL_GPIO_EXTI_Callback+0x86>
		{
			state=Emergency;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ae8:	f004 fafc 	bl	80060e4 <HAL_GPIO_WritePin>
		else
		{
			Emergency_status = 0;
		}
	}
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_EXTI_Callback+0x8c>
			Emergency_status = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xac>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	200003e4 	.word	0x200003e4
 8001b04:	200003f8 	.word	0x200003f8
 8001b08:	200000d7 	.word	0x200000d7
 8001b0c:	2000068c 	.word	0x2000068c
 8001b10:	40020400 	.word	0x40020400
 8001b14:	200003eb 	.word	0x200003eb

08001b18 <micros>:

inline uint64_t micros()
{
 8001b18:	b4b0      	push	{r4, r5, r7}
 8001b1a:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <micros+0x2c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2200      	movs	r2, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	4611      	mov	r1, r2
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <micros+0x30>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	1884      	adds	r4, r0, r2
 8001b30:	eb41 0503 	adc.w	r5, r1, r3
 8001b34:	4622      	mov	r2, r4
 8001b36:	462b      	mov	r3, r5
}
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bcb0      	pop	{r4, r5, r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000298 	.word	0x20000298
 8001b48:	20000668 	.word	0x20000668

08001b4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	ed2d 8b02 	vpush	{d8}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	//if (htim == &htim4 && (Go_Flag || GenVolt_Flag) && !SetHome_Flag && AlSet_Flag)
	if (htim == &htim4 && Go_Flag && state == Run)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d151      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d04d      	beq.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d149      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		//genvol
		Unwrap();
 8001b70:	f7ff fe9e 	bl	80018b0 <Unwrap>
		BackwardDifference();
 8001b74:	f7ff ff2e 	bl	80019d4 <BackwardDifference>
		TrajectoryEvaluation();
 8001b78:	f001 fa96 	bl	80030a8 <TrajectoryEvaluation>
		kalmanfilter();
 8001b7c:	f000 facc 	bl	8002118 <kalmanfilter>
		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ffb1 	bl	8000af0 <__aeabi_d2f>
 8001b8e:	4606      	mov	r6, r0
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b92:	ed93 8a00 	vldr	s16, [r3]
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe ffa6 	bl	8000af0 <__aeabi_d2f>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eef0 1a67 	vmov.f32	s3, s15
 8001bb0:	ee01 2a10 	vmov	s2, r2
 8001bb4:	eef0 0a48 	vmov.f32	s1, s16
 8001bb8:	ee00 6a10 	vmov	s0, r6
 8001bbc:	f002 f9be 	bl	8003f3c <Cascade>
 8001bc0:	eef0 7a40 	vmov.f32	s15, s0
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
		RunMotor(volt, PID_dir);
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd4:	edc7 7a00 	vstr	s15, [r7]
 8001bd8:	783b      	ldrb	r3, [r7, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fe16 	bl	8001814 <RunMotor>
		t+=dt;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
		trigger = 1;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim11)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10a      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		_micro += 65535;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c16:	1854      	adds	r4, r2, r1
 8001c18:	f143 0500 	adc.w	r5, r3, #0
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c1e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	ecbd 8b02 	vpop	{d8}
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000250 	.word	0x20000250
 8001c34:	200003e9 	.word	0x200003e9
 8001c38:	200000d7 	.word	0x200000d7
 8001c3c:	20000620 	.word	0x20000620
 8001c40:	2000040c 	.word	0x2000040c
 8001c44:	20000628 	.word	0x20000628
 8001c48:	20000410 	.word	0x20000410
 8001c4c:	200003e4 	.word	0x200003e4
 8001c50:	200000da 	.word	0x200000da
 8001c54:	20000598 	.word	0x20000598
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	200003ec 	.word	0x200003ec
 8001c60:	20000298 	.word	0x20000298
 8001c64:	20000668 	.word	0x20000668

08001c68 <setmatrix>:

void setmatrix(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001c6c:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <setmatrix+0x1d4>)
 8001c6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c72:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001c74:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <setmatrix+0x1d8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a70      	ldr	r2, [pc, #448]	; (8001e3c <setmatrix+0x1d4>)
 8001c7a:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <setmatrix+0x1d8>)
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <setmatrix+0x1d8>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c94:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <setmatrix+0x1d4>)
 8001c96:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <setmatrix+0x1d8>)
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <setmatrix+0x1d8>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	4b65      	ldr	r3, [pc, #404]	; (8001e40 <setmatrix+0x1d8>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <setmatrix+0x1d4>)
 8001cbe:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <setmatrix+0x1d4>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <setmatrix+0x1d4>)
 8001ccc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cd0:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <setmatrix+0x1d8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a59      	ldr	r2, [pc, #356]	; (8001e3c <setmatrix+0x1d4>)
 8001cd8:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <setmatrix+0x1d8>)
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <setmatrix+0x1d8>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf2:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <setmatrix+0x1d4>)
 8001cf4:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <setmatrix+0x1d4>)
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <setmatrix+0x1d4>)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <setmatrix+0x1d4>)
 8001d0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <setmatrix+0x1d8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <setmatrix+0x1d4>)
 8001d16:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <setmatrix+0x1d4>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <setmatrix+0x1d4>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001d28:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <setmatrix+0x1d4>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <setmatrix+0x1d4>)
 8001d32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <setmatrix+0x1d8>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <setmatrix+0x1d8>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <setmatrix+0x1d8>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d52:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <setmatrix+0x1dc>)
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <setmatrix+0x1d8>)
 8001d62:	ed93 7a00 	vldr	s14, [r3]
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <setmatrix+0x1d8>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <setmatrix+0x1dc>)
 8001d7a:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <setmatrix+0x1d8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <setmatrix+0x1dc>)
 8001d84:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <setmatrix+0x1dc>)
 8001d88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8c:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <setmatrix+0x1e0>)
 8001d90:	2204      	movs	r2, #4
 8001d92:	2104      	movs	r1, #4
 8001d94:	482d      	ldr	r0, [pc, #180]	; (8001e4c <setmatrix+0x1e4>)
 8001d96:	f009 fed3 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <setmatrix+0x1d4>)
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	2104      	movs	r1, #4
 8001da0:	482b      	ldr	r0, [pc, #172]	; (8001e50 <setmatrix+0x1e8>)
 8001da2:	f009 fecd 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <setmatrix+0x1dc>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	2104      	movs	r1, #4
 8001dac:	4829      	ldr	r0, [pc, #164]	; (8001e54 <setmatrix+0x1ec>)
 8001dae:	f009 fec7 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <setmatrix+0x1f0>)
 8001db4:	2204      	movs	r2, #4
 8001db6:	2101      	movs	r1, #1
 8001db8:	4828      	ldr	r0, [pc, #160]	; (8001e5c <setmatrix+0x1f4>)
 8001dba:	f009 fec1 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <setmatrix+0x1f8>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4827      	ldr	r0, [pc, #156]	; (8001e64 <setmatrix+0x1fc>)
 8001dc6:	f009 febb 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001dca:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <setmatrix+0x200>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2101      	movs	r1, #1
 8001dd0:	4826      	ldr	r0, [pc, #152]	; (8001e6c <setmatrix+0x204>)
 8001dd2:	f009 feb5 	bl	800bb40 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <setmatrix+0x208>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4825      	ldr	r0, [pc, #148]	; (8001e74 <setmatrix+0x20c>)
 8001dde:	f009 feaf 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <setmatrix+0x210>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	2104      	movs	r1, #4
 8001de8:	4824      	ldr	r0, [pc, #144]	; (8001e7c <setmatrix+0x214>)
 8001dea:	f009 fea9 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <setmatrix+0x218>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	2104      	movs	r1, #4
 8001df4:	4823      	ldr	r0, [pc, #140]	; (8001e84 <setmatrix+0x21c>)
 8001df6:	f009 fea3 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <setmatrix+0x220>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4822      	ldr	r0, [pc, #136]	; (8001e8c <setmatrix+0x224>)
 8001e02:	f009 fe9d 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <setmatrix+0x228>)
 8001e08:	2204      	movs	r2, #4
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4821      	ldr	r0, [pc, #132]	; (8001e94 <setmatrix+0x22c>)
 8001e0e:	f009 fe97 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <setmatrix+0x230>)
 8001e14:	2204      	movs	r2, #4
 8001e16:	2104      	movs	r1, #4
 8001e18:	4820      	ldr	r0, [pc, #128]	; (8001e9c <setmatrix+0x234>)
 8001e1a:	f009 fe91 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <setmatrix+0x238>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	2101      	movs	r1, #1
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <setmatrix+0x23c>)
 8001e26:	f009 fe8b 	bl	800bb40 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <setmatrix+0x240>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2101      	movs	r1, #1
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <setmatrix+0x244>)
 8001e32:	f009 fe85 	bl	800bb40 <arm_mat_init_f32>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000048c 	.word	0x2000048c
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	200004cc 	.word	0x200004cc
 8001e48:	20000010 	.word	0x20000010
 8001e4c:	2000041c 	.word	0x2000041c
 8001e50:	20000424 	.word	0x20000424
 8001e54:	2000042c 	.word	0x2000042c
 8001e58:	20000050 	.word	0x20000050
 8001e5c:	20000444 	.word	0x20000444
 8001e60:	20000060 	.word	0x20000060
 8001e64:	2000044c 	.word	0x2000044c
 8001e68:	20000064 	.word	0x20000064
 8001e6c:	20000434 	.word	0x20000434
 8001e70:	200004dc 	.word	0x200004dc
 8001e74:	20000454 	.word	0x20000454
 8001e78:	200004e0 	.word	0x200004e0
 8001e7c:	2000043c 	.word	0x2000043c
 8001e80:	200004f0 	.word	0x200004f0
 8001e84:	2000046c 	.word	0x2000046c
 8001e88:	20000500 	.word	0x20000500
 8001e8c:	20000474 	.word	0x20000474
 8001e90:	20000510 	.word	0x20000510
 8001e94:	2000047c 	.word	0x2000047c
 8001e98:	20000550 	.word	0x20000550
 8001e9c:	20000484 	.word	0x20000484
 8001ea0:	20000590 	.word	0x20000590
 8001ea4:	2000045c 	.word	0x2000045c
 8001ea8:	20000594 	.word	0x20000594
 8001eac:	20000464 	.word	0x20000464

08001eb0 <prediction>:

void prediction(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0c2      	sub	sp, #264	; 0x108
 8001eb4:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <prediction+0xcc>)
 8001eb8:	4931      	ldr	r1, [pc, #196]	; (8001f80 <prediction+0xd0>)
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <prediction+0xd4>)
 8001ebc:	f009 fda0 	bl	800ba00 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001ec0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ec4:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001ec8:	2204      	movs	r2, #4
 8001eca:	2104      	movs	r1, #4
 8001ecc:	f009 fe38 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001ed0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ed4:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2104      	movs	r1, #4
 8001edc:	f009 fe30 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001ee0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ee4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001ee8:	2204      	movs	r2, #4
 8001eea:	2104      	movs	r1, #4
 8001eec:	f009 fe28 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	f107 0018 	add.w	r0, r7, #24
 8001ef8:	2204      	movs	r2, #4
 8001efa:	2104      	movs	r1, #4
 8001efc:	f009 fe20 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	4638      	mov	r0, r7
 8001f06:	2204      	movs	r2, #4
 8001f08:	2101      	movs	r1, #1
 8001f0a:	f009 fe19 	bl	800bb40 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	4619      	mov	r1, r3
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <prediction+0xd4>)
 8001f16:	f009 fcad 	bl	800b874 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481a      	ldr	r0, [pc, #104]	; (8001f88 <prediction+0xd8>)
 8001f20:	f009 fca8 	bl	800b874 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001f24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4918      	ldr	r1, [pc, #96]	; (8001f8c <prediction+0xdc>)
 8001f2c:	4815      	ldr	r0, [pc, #84]	; (8001f84 <prediction+0xd4>)
 8001f2e:	f009 fd67 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001f32:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f36:	461a      	mov	r2, r3
 8001f38:	4915      	ldr	r1, [pc, #84]	; (8001f90 <prediction+0xe0>)
 8001f3a:	4813      	ldr	r0, [pc, #76]	; (8001f88 <prediction+0xd8>)
 8001f3c:	f009 fd60 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001f40:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f44:	f107 0118 	add.w	r1, r7, #24
 8001f48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f009 fd57 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f56:	4639      	mov	r1, r7
 8001f58:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f009 fd4f 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001f62:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <prediction+0xe4>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f009 fdeb 	bl	800bb48 <arm_mat_add_f32>
}
 8001f72:	bf00      	nop
 8001f74:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000474 	.word	0x20000474
 8001f80:	2000046c 	.word	0x2000046c
 8001f84:	20000424 	.word	0x20000424
 8001f88:	2000042c 	.word	0x2000042c
 8001f8c:	2000047c 	.word	0x2000047c
 8001f90:	20000434 	.word	0x20000434
 8001f94:	20000484 	.word	0x20000484

08001f98 <update>:

void update(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0ae      	sub	sp, #184	; 0xb8
 8001f9c:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001f9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fa2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2101      	movs	r1, #1
 8001faa:	f009 fdc9 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001fae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	2104      	movs	r1, #4
 8001fba:	f009 fdc1 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001fbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2104      	movs	r1, #4
 8001fca:	f009 fdb9 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8001fce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f009 fdb1 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8001fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f009 fda9 	bl	800bb40 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	f107 0010 	add.w	r0, r7, #16
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	f009 fda1 	bl	800bb40 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	4619      	mov	r1, r3
 8002004:	4837      	ldr	r0, [pc, #220]	; (80020e4 <update+0x14c>)
 8002006:	f009 fc35 	bl	800b874 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 800200a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800200e:	461a      	mov	r2, r3
 8002010:	4935      	ldr	r1, [pc, #212]	; (80020e8 <update+0x150>)
 8002012:	4834      	ldr	r0, [pc, #208]	; (80020e4 <update+0x14c>)
 8002014:	f009 fcf4 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8002018:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800201c:	f107 0110 	add.w	r1, r7, #16
 8002020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002024:	4618      	mov	r0, r3
 8002026:	f009 fceb 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 800202a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800202e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002032:	4619      	mov	r1, r3
 8002034:	482d      	ldr	r0, [pc, #180]	; (80020ec <update+0x154>)
 8002036:	f009 fd87 	bl	800bb48 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 800203a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800203e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002046:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	f107 0008 	add.w	r0, r7, #8
 8002050:	2201      	movs	r2, #1
 8002052:	2101      	movs	r1, #1
 8002054:	f009 fd74 	bl	800bb40 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 8002058:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	4821      	ldr	r0, [pc, #132]	; (80020e8 <update+0x150>)
 8002064:	f009 fccc 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 8002068:	f107 0108 	add.w	r1, r7, #8
 800206c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002070:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <update+0x158>)
 8002072:	4618      	mov	r0, r3
 8002074:	f009 fcc4 	bl	800ba00 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 8002078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800207c:	461a      	mov	r2, r3
 800207e:	4919      	ldr	r1, [pc, #100]	; (80020e4 <update+0x14c>)
 8002080:	481b      	ldr	r0, [pc, #108]	; (80020f0 <update+0x158>)
 8002082:	f009 fcbd 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 8002086:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800208a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800208e:	4619      	mov	r1, r3
 8002090:	4818      	ldr	r0, [pc, #96]	; (80020f4 <update+0x15c>)
 8002092:	f009 fc4b 	bl	800b92c <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 8002096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <update+0x160>)
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <update+0x150>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 fcae 	bl	800ba00 <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = omega_tosensor;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <update+0x164>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a15      	ldr	r2, [pc, #84]	; (8002100 <update+0x168>)
 80020aa:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <update+0x16c>)
 80020ae:	4916      	ldr	r1, [pc, #88]	; (8002108 <update+0x170>)
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <update+0x14c>)
 80020b2:	f009 fca5 	bl	800ba00 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <update+0x174>)
 80020b8:	4912      	ldr	r1, [pc, #72]	; (8002104 <update+0x16c>)
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <update+0x178>)
 80020bc:	f009 fc36 	bl	800b92c <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 80020c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c4:	461a      	mov	r2, r3
 80020c6:	4911      	ldr	r1, [pc, #68]	; (800210c <update+0x174>)
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <update+0x158>)
 80020ca:	f009 fc99 	bl	800ba00 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 80020ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <update+0x17c>)
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <update+0x170>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f009 fd36 	bl	800bb48 <arm_mat_add_f32>
}
 80020dc:	bf00      	nop
 80020de:	37b8      	adds	r7, #184	; 0xb8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000444 	.word	0x20000444
 80020e8:	20000484 	.word	0x20000484
 80020ec:	2000044c 	.word	0x2000044c
 80020f0:	2000043c 	.word	0x2000043c
 80020f4:	2000041c 	.word	0x2000041c
 80020f8:	2000047c 	.word	0x2000047c
 80020fc:	20000408 	.word	0x20000408
 8002100:	200004dc 	.word	0x200004dc
 8002104:	20000464 	.word	0x20000464
 8002108:	20000474 	.word	0x20000474
 800210c:	2000045c 	.word	0x2000045c
 8002110:	20000454 	.word	0x20000454
 8002114:	2000046c 	.word	0x2000046c

08002118 <kalmanfilter>:

void kalmanfilter()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	prediction();
 800211c:	f7ff fec8 	bl	8001eb0 <prediction>
	update();
 8002120:	f7ff ff3a 	bl	8001f98 <update>
	position_kalman = theta_now;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <kalmanfilter+0x30>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <kalmanfilter+0x34>)
 800212a:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <kalmanfilter+0x38>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <kalmanfilter+0x3c>)
 8002132:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <kalmanfilter+0x38>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <kalmanfilter+0x40>)
 800213a:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <kalmanfilter+0x38>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <kalmanfilter+0x44>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200003f8 	.word	0x200003f8
 800214c:	2000040c 	.word	0x2000040c
 8002150:	20000500 	.word	0x20000500
 8002154:	20000410 	.word	0x20000410
 8002158:	20000414 	.word	0x20000414
 800215c:	20000418 	.word	0x20000418

08002160 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8002160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002164:	af00      	add	r7, sp, #0
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <TrajectoryGenerator+0xd8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8775 	beq.w	800305a <TrajectoryGenerator+0xefa>
		static uint8_t N;
		static float Va;
		static float Sa;
		static float Sv;

		theta_0 = theta_now;
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <TrajectoryGenerator+0xdc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f993 	bl	80004a0 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4930      	ldr	r1, [pc, #192]	; (8002240 <TrajectoryGenerator+0xe0>)
 8002180:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <TrajectoryGenerator+0xe4>)
 8002186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <TrajectoryGenerator+0xe0>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f826 	bl	80001e0 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	492b      	ldr	r1, [pc, #172]	; (8002248 <TrajectoryGenerator+0xe8>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest<0){
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <TrajectoryGenerator+0xe8>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f7fe fc42 	bl	8000a34 <__aeabi_dcmplt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00f      	beq.n	80021d6 <TrajectoryGenerator+0x76>
			theta_dest = -theta_dest;
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <TrajectoryGenerator+0xe8>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	4614      	mov	r4, r2
 80021be:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <TrajectoryGenerator+0xe8>)
 80021c4:	e9c3 4500 	strd	r4, r5, [r3]
			dir=0;
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <TrajectoryGenerator+0xec>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
			PID_dir=0;
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <TrajectoryGenerator+0xf0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e005      	b.n	80021e2 <TrajectoryGenerator+0x82>
		}
		else{
			dir=1;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <TrajectoryGenerator+0xec>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
			PID_dir=1;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <TrajectoryGenerator+0xf0>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
		}

		if(w_max*j_max < pow(a_max,2)){
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <TrajectoryGenerator+0xf4>)
 80021e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <TrajectoryGenerator+0xf8>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f9af 	bl	8000550 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <TrajectoryGenerator+0xfc>)
 80021fc:	ed93 7b00 	vldr	d7, [r3]
 8002200:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8002230 <TrajectoryGenerator+0xd0>
 8002204:	eeb0 0a47 	vmov.f32	s0, s14
 8002208:	eef0 0a67 	vmov.f32	s1, s15
 800220c:	f009 fdbc 	bl	800bd88 <pow>
 8002210:	ec53 2b10 	vmov	r2, r3, d0
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe fc0c 	bl	8000a34 <__aeabi_dcmplt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d022      	beq.n	8002268 <TrajectoryGenerator+0x108>
			M=1;
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <TrajectoryGenerator+0x100>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
			N=0;
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <TrajectoryGenerator+0x104>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e041      	b.n	80022b4 <TrajectoryGenerator+0x154>
 8002230:	00000000 	.word	0x00000000
 8002234:	40000000 	.word	0x40000000
 8002238:	200003ea 	.word	0x200003ea
 800223c:	200003f8 	.word	0x200003f8
 8002240:	200005c8 	.word	0x200005c8
 8002244:	20000080 	.word	0x20000080
 8002248:	200005d0 	.word	0x200005d0
 800224c:	200000d9 	.word	0x200000d9
 8002250:	200000da 	.word	0x200000da
 8002254:	20000068 	.word	0x20000068
 8002258:	20000078 	.word	0x20000078
 800225c:	20000070 	.word	0x20000070
 8002260:	20000694 	.word	0x20000694
 8002264:	20000695 	.word	0x20000695
		}
		else if(w_max*j_max >= pow(a_max,2)){
 8002268:	4bbf      	ldr	r3, [pc, #764]	; (8002568 <TrajectoryGenerator+0x408>)
 800226a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226e:	4bbf      	ldr	r3, [pc, #764]	; (800256c <TrajectoryGenerator+0x40c>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f7fe f96c 	bl	8000550 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4bbb      	ldr	r3, [pc, #748]	; (8002570 <TrajectoryGenerator+0x410>)
 8002282:	ed93 7b00 	vldr	d7, [r3]
 8002286:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8002550 <TrajectoryGenerator+0x3f0>
 800228a:	eeb0 0a47 	vmov.f32	s0, s14
 800228e:	eef0 0a67 	vmov.f32	s1, s15
 8002292:	f009 fd79 	bl	800bd88 <pow>
 8002296:	ec53 2b10 	vmov	r2, r3, d0
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe fbdd 	bl	8000a5c <__aeabi_dcmpge>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <TrajectoryGenerator+0x154>
			M=0;
 80022a8:	4bb2      	ldr	r3, [pc, #712]	; (8002574 <TrajectoryGenerator+0x414>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
			N=1;
 80022ae:	4bb2      	ldr	r3, [pc, #712]	; (8002578 <TrajectoryGenerator+0x418>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
		}

		Va = pow(a_max,2)/j_max;
 80022b4:	4bae      	ldr	r3, [pc, #696]	; (8002570 <TrajectoryGenerator+0x410>)
 80022b6:	ed93 7b00 	vldr	d7, [r3]
 80022ba:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8002550 <TrajectoryGenerator+0x3f0>
 80022be:	eeb0 0a47 	vmov.f32	s0, s14
 80022c2:	eef0 0a67 	vmov.f32	s1, s15
 80022c6:	f009 fd5f 	bl	800bd88 <pow>
 80022ca:	ec51 0b10 	vmov	r0, r1, d0
 80022ce:	4ba7      	ldr	r3, [pc, #668]	; (800256c <TrajectoryGenerator+0x40c>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe fa66 	bl	80007a4 <__aeabi_ddiv>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc06 	bl	8000af0 <__aeabi_d2f>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4aa5      	ldr	r2, [pc, #660]	; (800257c <TrajectoryGenerator+0x41c>)
 80022e8:	6013      	str	r3, [r2, #0]
		Sa = (2*pow(a_max,3))/(pow(j_max,2));
 80022ea:	4ba1      	ldr	r3, [pc, #644]	; (8002570 <TrajectoryGenerator+0x410>)
 80022ec:	ed93 7b00 	vldr	d7, [r3]
 80022f0:	ed9f 1b99 	vldr	d1, [pc, #612]	; 8002558 <TrajectoryGenerator+0x3f8>
 80022f4:	eeb0 0a47 	vmov.f32	s0, s14
 80022f8:	eef0 0a67 	vmov.f32	s1, s15
 80022fc:	f009 fd44 	bl	800bd88 <pow>
 8002300:	ec51 0b10 	vmov	r0, r1, d0
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	f7fd ff6c 	bl	80001e4 <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	4b95      	ldr	r3, [pc, #596]	; (800256c <TrajectoryGenerator+0x40c>)
 8002316:	ed93 7b00 	vldr	d7, [r3]
 800231a:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 8002550 <TrajectoryGenerator+0x3f0>
 800231e:	eeb0 0a47 	vmov.f32	s0, s14
 8002322:	eef0 0a67 	vmov.f32	s1, s15
 8002326:	f009 fd2f 	bl	800bd88 <pow>
 800232a:	ec53 2b10 	vmov	r2, r3, d0
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fe fa37 	bl	80007a4 <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fbd7 	bl	8000af0 <__aeabi_d2f>
 8002342:	4603      	mov	r3, r0
 8002344:	4a8e      	ldr	r2, [pc, #568]	; (8002580 <TrajectoryGenerator+0x420>)
 8002346:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 8002348:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <TrajectoryGenerator+0x414>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f895 	bl	800047c <__aeabi_i2d>
 8002352:	4604      	mov	r4, r0
 8002354:	460d      	mov	r5, r1
 8002356:	4b84      	ldr	r3, [pc, #528]	; (8002568 <TrajectoryGenerator+0x408>)
 8002358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235c:	4b83      	ldr	r3, [pc, #524]	; (800256c <TrajectoryGenerator+0x40c>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe fa1f 	bl	80007a4 <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ec43 2b17 	vmov	d7, r2, r3
 800236e:	eeb0 0a47 	vmov.f32	s0, s14
 8002372:	eef0 0a67 	vmov.f32	s1, s15
 8002376:	f009 fd77 	bl	800be68 <sqrt>
 800237a:	ec51 0b10 	vmov	r0, r1, d0
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	f7fd ff2f 	bl	80001e4 <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fe f8df 	bl	8000550 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	4b77      	ldr	r3, [pc, #476]	; (8002578 <TrajectoryGenerator+0x418>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f86c 	bl	800047c <__aeabi_i2d>
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
 80023a8:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <TrajectoryGenerator+0x408>)
 80023aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ae:	4b70      	ldr	r3, [pc, #448]	; (8002570 <TrajectoryGenerator+0x410>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe f9f6 	bl	80007a4 <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4692      	mov	sl, r2
 80023be:	469b      	mov	fp, r3
 80023c0:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <TrajectoryGenerator+0x410>)
 80023c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c6:	4b69      	ldr	r3, [pc, #420]	; (800256c <TrajectoryGenerator+0x40c>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f9ea 	bl	80007a4 <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4650      	mov	r0, sl
 80023d6:	4659      	mov	r1, fp
 80023d8:	f7fd ff04 	bl	80001e4 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fe f8b4 	bl	8000550 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4640      	mov	r0, r8
 80023ee:	4649      	mov	r1, r9
 80023f0:	f7fd fef8 	bl	80001e4 <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <TrajectoryGenerator+0x408>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f8a5 	bl	8000550 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fb6f 	bl	8000af0 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <TrajectoryGenerator+0x424>)
 8002416:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <TrajectoryGenerator+0x41c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f83f 	bl	80004a0 <__aeabi_f2d>
 8002422:	4b51      	ldr	r3, [pc, #324]	; (8002568 <TrajectoryGenerator+0x408>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe fb22 	bl	8000a70 <__aeabi_dcmpgt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80f1 	beq.w	8002616 <TrajectoryGenerator+0x4b6>
			if(theta_dest > Sa){
 8002434:	4b52      	ldr	r3, [pc, #328]	; (8002580 <TrajectoryGenerator+0x420>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f831 	bl	80004a0 <__aeabi_f2d>
 800243e:	4b52      	ldr	r3, [pc, #328]	; (8002588 <TrajectoryGenerator+0x428>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe faf6 	bl	8000a34 <__aeabi_dcmplt>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d030      	beq.n	80024b0 <TrajectoryGenerator+0x350>
				//caseI
				tj = sqrt((w_max/j_max));
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <TrajectoryGenerator+0x408>)
 8002450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002454:	4b45      	ldr	r3, [pc, #276]	; (800256c <TrajectoryGenerator+0x40c>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fe f9a3 	bl	80007a4 <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	ec43 2b17 	vmov	d7, r2, r3
 8002466:	eeb0 0a47 	vmov.f32	s0, s14
 800246a:	eef0 0a67 	vmov.f32	s1, s15
 800246e:	f009 fcfb 	bl	800be68 <sqrt>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb39 	bl	8000af0 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	4a42      	ldr	r2, [pc, #264]	; (800258c <TrajectoryGenerator+0x42c>)
 8002482:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <TrajectoryGenerator+0x42c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a41      	ldr	r2, [pc, #260]	; (8002590 <TrajectoryGenerator+0x430>)
 800248a:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <TrajectoryGenerator+0x428>)
 800248e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <TrajectoryGenerator+0x408>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f984 	bl	80007a4 <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb24 	bl	8000af0 <__aeabi_d2f>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <TrajectoryGenerator+0x434>)
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e217      	b.n	80028e0 <TrajectoryGenerator+0x780>
			}
			else if(theta_dest < Sa){
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <TrajectoryGenerator+0x420>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fd fff3 	bl	80004a0 <__aeabi_f2d>
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <TrajectoryGenerator+0x428>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fe fad6 	bl	8000a70 <__aeabi_dcmpgt>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 820a 	beq.w	80028e0 <TrajectoryGenerator+0x780>
				if(theta_dest < Sv){
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <TrajectoryGenerator+0x424>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd ffe5 	bl	80004a0 <__aeabi_f2d>
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <TrajectoryGenerator+0x428>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe fac8 	bl	8000a70 <__aeabi_dcmpgt>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d058      	beq.n	8002598 <TrajectoryGenerator+0x438>
					//caseIV
					tj = pow((theta_dest/(2*j_max)),0.33);
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <TrajectoryGenerator+0x428>)
 80024e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <TrajectoryGenerator+0x40c>)
 80024ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	f7fd fe75 	bl	80001e4 <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f94f 	bl	80007a4 <__aeabi_ddiv>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	ec43 2b17 	vmov	d7, r2, r3
 800250e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002560 <TrajectoryGenerator+0x400>
 8002512:	eeb0 0a47 	vmov.f32	s0, s14
 8002516:	eef0 0a67 	vmov.f32	s1, s15
 800251a:	f009 fc35 	bl	800bd88 <pow>
 800251e:	ec53 2b10 	vmov	r2, r3, d0
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fae3 	bl	8000af0 <__aeabi_d2f>
 800252a:	4603      	mov	r3, r0
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <TrajectoryGenerator+0x42c>)
 800252e:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <TrajectoryGenerator+0x42c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a16      	ldr	r2, [pc, #88]	; (8002590 <TrajectoryGenerator+0x430>)
 8002536:	6013      	str	r3, [r2, #0]
					tv = 2*tj;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <TrajectoryGenerator+0x42c>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <TrajectoryGenerator+0x434>)
 8002544:	edc3 7a00 	vstr	s15, [r3]
 8002548:	e1ca      	b.n	80028e0 <TrajectoryGenerator+0x780>
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
 8002550:	00000000 	.word	0x00000000
 8002554:	40000000 	.word	0x40000000
 8002558:	00000000 	.word	0x00000000
 800255c:	40080000 	.word	0x40080000
 8002560:	51eb851f 	.word	0x51eb851f
 8002564:	3fd51eb8 	.word	0x3fd51eb8
 8002568:	20000068 	.word	0x20000068
 800256c:	20000078 	.word	0x20000078
 8002570:	20000070 	.word	0x20000070
 8002574:	20000694 	.word	0x20000694
 8002578:	20000695 	.word	0x20000695
 800257c:	20000698 	.word	0x20000698
 8002580:	2000069c 	.word	0x2000069c
 8002584:	200006a0 	.word	0x200006a0
 8002588:	200005d0 	.word	0x200005d0
 800258c:	200005b8 	.word	0x200005b8
 8002590:	200005bc 	.word	0x200005bc
 8002594:	200005c0 	.word	0x200005c0
				}
				else if(theta_dest > Sv){
 8002598:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <TrajectoryGenerator+0x6d0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff7f 	bl	80004a0 <__aeabi_f2d>
 80025a2:	4ba4      	ldr	r3, [pc, #656]	; (8002834 <TrajectoryGenerator+0x6d4>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe fa44 	bl	8000a34 <__aeabi_dcmplt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8196 	beq.w	80028e0 <TrajectoryGenerator+0x780>
					//caseIII
					tj = sqrt((w_max/j_max));
 80025b4:	4ba0      	ldr	r3, [pc, #640]	; (8002838 <TrajectoryGenerator+0x6d8>)
 80025b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ba:	4ba0      	ldr	r3, [pc, #640]	; (800283c <TrajectoryGenerator+0x6dc>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f8f0 	bl	80007a4 <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	ec43 2b17 	vmov	d7, r2, r3
 80025cc:	eeb0 0a47 	vmov.f32	s0, s14
 80025d0:	eef0 0a67 	vmov.f32	s1, s15
 80025d4:	f009 fc48 	bl	800be68 <sqrt>
 80025d8:	ec53 2b10 	vmov	r2, r3, d0
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fa86 	bl	8000af0 <__aeabi_d2f>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a96      	ldr	r2, [pc, #600]	; (8002840 <TrajectoryGenerator+0x6e0>)
 80025e8:	6013      	str	r3, [r2, #0]
					ta = tj;
 80025ea:	4b95      	ldr	r3, [pc, #596]	; (8002840 <TrajectoryGenerator+0x6e0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a95      	ldr	r2, [pc, #596]	; (8002844 <TrajectoryGenerator+0x6e4>)
 80025f0:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 80025f2:	4b90      	ldr	r3, [pc, #576]	; (8002834 <TrajectoryGenerator+0x6d4>)
 80025f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f8:	4b8f      	ldr	r3, [pc, #572]	; (8002838 <TrajectoryGenerator+0x6d8>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fe f8d1 	bl	80007a4 <__aeabi_ddiv>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fa71 	bl	8000af0 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	4a8d      	ldr	r2, [pc, #564]	; (8002848 <TrajectoryGenerator+0x6e8>)
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e164      	b.n	80028e0 <TrajectoryGenerator+0x780>
				}
			}
		}
		else if(w_max > Va){
 8002616:	4b8d      	ldr	r3, [pc, #564]	; (800284c <TrajectoryGenerator+0x6ec>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff40 	bl	80004a0 <__aeabi_f2d>
 8002620:	4b85      	ldr	r3, [pc, #532]	; (8002838 <TrajectoryGenerator+0x6d8>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fe fa05 	bl	8000a34 <__aeabi_dcmplt>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8157 	beq.w	80028e0 <TrajectoryGenerator+0x780>
			if(theta_dest < Sa){
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <TrajectoryGenerator+0x6f0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff32 	bl	80004a0 <__aeabi_f2d>
 800263c:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <TrajectoryGenerator+0x6d4>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fe fa15 	bl	8000a70 <__aeabi_dcmpgt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d031      	beq.n	80026b0 <TrajectoryGenerator+0x550>
				//caseII
				tj = pow((theta_dest/(2*j_max)),0.33);
 800264c:	4b79      	ldr	r3, [pc, #484]	; (8002834 <TrajectoryGenerator+0x6d4>)
 800264e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <TrajectoryGenerator+0x6dc>)
 8002654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	f7fd fdc2 	bl	80001e4 <__adddf3>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fe f89c 	bl	80007a4 <__aeabi_ddiv>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	ec43 2b17 	vmov	d7, r2, r3
 8002674:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002818 <TrajectoryGenerator+0x6b8>
 8002678:	eeb0 0a47 	vmov.f32	s0, s14
 800267c:	eef0 0a67 	vmov.f32	s1, s15
 8002680:	f009 fb82 	bl	800bd88 <pow>
 8002684:	ec53 2b10 	vmov	r2, r3, d0
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa30 	bl	8000af0 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <TrajectoryGenerator+0x6e0>)
 8002694:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <TrajectoryGenerator+0x6e0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <TrajectoryGenerator+0x6e4>)
 800269c:	6013      	str	r3, [r2, #0]
				tv = 2*tj;
 800269e:	4b68      	ldr	r3, [pc, #416]	; (8002840 <TrajectoryGenerator+0x6e0>)
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <TrajectoryGenerator+0x6e8>)
 80026aa:	edc3 7a00 	vstr	s15, [r3]
 80026ae:	e117      	b.n	80028e0 <TrajectoryGenerator+0x780>
			}
			else if(theta_dest > Sa){
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <TrajectoryGenerator+0x6f0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fef3 	bl	80004a0 <__aeabi_f2d>
 80026ba:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <TrajectoryGenerator+0x6d4>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fe f9b8 	bl	8000a34 <__aeabi_dcmplt>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 810a 	beq.w	80028e0 <TrajectoryGenerator+0x780>
				if(theta_dest < Sv){
 80026cc:	4b58      	ldr	r3, [pc, #352]	; (8002830 <TrajectoryGenerator+0x6d0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fee5 	bl	80004a0 <__aeabi_f2d>
 80026d6:	4b57      	ldr	r3, [pc, #348]	; (8002834 <TrajectoryGenerator+0x6d4>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fe f9c8 	bl	8000a70 <__aeabi_dcmpgt>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80bc 	beq.w	8002860 <TrajectoryGenerator+0x700>
					//caseVI
					tj = a_max/j_max;
 80026e8:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <TrajectoryGenerator+0x6f4>)
 80026ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <TrajectoryGenerator+0x6dc>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fe f856 	bl	80007a4 <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f7fe f9f6 	bl	8000af0 <__aeabi_d2f>
 8002704:	4603      	mov	r3, r0
 8002706:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <TrajectoryGenerator+0x6e0>)
 8002708:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4*theta_dest*pow(j_max,2))+pow(a_max,3))/(a_max*pow(j_max,2)))-(a_max/j_max));
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <TrajectoryGenerator+0x6d4>)
 800270c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <TrajectoryGenerator+0x6f8>)
 8002716:	f7fd ff1b 	bl	8000550 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4614      	mov	r4, r2
 8002720:	461d      	mov	r5, r3
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <TrajectoryGenerator+0x6dc>)
 8002724:	ed93 7b00 	vldr	d7, [r3]
 8002728:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002820 <TrajectoryGenerator+0x6c0>
 800272c:	eeb0 0a47 	vmov.f32	s0, s14
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	f009 fb28 	bl	800bd88 <pow>
 8002738:	ec53 2b10 	vmov	r2, r3, d0
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd ff06 	bl	8000550 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4614      	mov	r4, r2
 800274a:	461d      	mov	r5, r3
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <TrajectoryGenerator+0x6f4>)
 800274e:	ed93 7b00 	vldr	d7, [r3]
 8002752:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002828 <TrajectoryGenerator+0x6c8>
 8002756:	eeb0 0a47 	vmov.f32	s0, s14
 800275a:	eef0 0a67 	vmov.f32	s1, s15
 800275e:	f009 fb13 	bl	800bd88 <pow>
 8002762:	ec53 2b10 	vmov	r2, r3, d0
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fd3b 	bl	80001e4 <__adddf3>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4614      	mov	r4, r2
 8002774:	461d      	mov	r5, r3
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <TrajectoryGenerator+0x6dc>)
 8002778:	ed93 7b00 	vldr	d7, [r3]
 800277c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002820 <TrajectoryGenerator+0x6c0>
 8002780:	eeb0 0a47 	vmov.f32	s0, s14
 8002784:	eef0 0a67 	vmov.f32	s1, s15
 8002788:	f009 fafe 	bl	800bd88 <pow>
 800278c:	ec51 0b10 	vmov	r0, r1, d0
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <TrajectoryGenerator+0x6f4>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd fedb 	bl	8000550 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd ffff 	bl	80007a4 <__aeabi_ddiv>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ec43 2b17 	vmov	d7, r2, r3
 80027ae:	eeb0 0a47 	vmov.f32	s0, s14
 80027b2:	eef0 0a67 	vmov.f32	s1, s15
 80027b6:	f009 fb57 	bl	800be68 <sqrt>
 80027ba:	ec55 4b10 	vmov	r4, r5, d0
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <TrajectoryGenerator+0x6f4>)
 80027c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <TrajectoryGenerator+0x6dc>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ffeb 	bl	80007a4 <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4620      	mov	r0, r4
 80027d4:	4629      	mov	r1, r5
 80027d6:	f7fd fd03 	bl	80001e0 <__aeabi_dsub>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <TrajectoryGenerator+0x6fc>)
 80027e8:	f7fd feb2 	bl	8000550 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f97c 	bl	8000af0 <__aeabi_d2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <TrajectoryGenerator+0x6e4>)
 80027fc:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <TrajectoryGenerator+0x6e4>)
 8002800:	ed93 7a00 	vldr	s14, [r3]
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <TrajectoryGenerator+0x6e0>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <TrajectoryGenerator+0x6e8>)
 8002810:	edc3 7a00 	vstr	s15, [r3]
 8002814:	e064      	b.n	80028e0 <TrajectoryGenerator+0x780>
 8002816:	bf00      	nop
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	3fd51eb8 	.word	0x3fd51eb8
 8002820:	00000000 	.word	0x00000000
 8002824:	40000000 	.word	0x40000000
 8002828:	00000000 	.word	0x00000000
 800282c:	40080000 	.word	0x40080000
 8002830:	200006a0 	.word	0x200006a0
 8002834:	200005d0 	.word	0x200005d0
 8002838:	20000068 	.word	0x20000068
 800283c:	20000078 	.word	0x20000078
 8002840:	200005b8 	.word	0x200005b8
 8002844:	200005bc 	.word	0x200005bc
 8002848:	200005c0 	.word	0x200005c0
 800284c:	20000698 	.word	0x20000698
 8002850:	2000069c 	.word	0x2000069c
 8002854:	20000070 	.word	0x20000070
 8002858:	40100000 	.word	0x40100000
 800285c:	3fe00000 	.word	0x3fe00000
				}
				else if(theta_dest > Sv){
 8002860:	4bbf      	ldr	r3, [pc, #764]	; (8002b60 <TrajectoryGenerator+0xa00>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe1b 	bl	80004a0 <__aeabi_f2d>
 800286a:	4bbe      	ldr	r3, [pc, #760]	; (8002b64 <TrajectoryGenerator+0xa04>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fe f8e0 	bl	8000a34 <__aeabi_dcmplt>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d032      	beq.n	80028e0 <TrajectoryGenerator+0x780>
					//caseV
					tj = a_max/j_max;
 800287a:	4bbb      	ldr	r3, [pc, #748]	; (8002b68 <TrajectoryGenerator+0xa08>)
 800287c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002880:	4bba      	ldr	r3, [pc, #744]	; (8002b6c <TrajectoryGenerator+0xa0c>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd ff8d 	bl	80007a4 <__aeabi_ddiv>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f92d 	bl	8000af0 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	4ab5      	ldr	r2, [pc, #724]	; (8002b70 <TrajectoryGenerator+0xa10>)
 800289a:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 800289c:	4bb5      	ldr	r3, [pc, #724]	; (8002b74 <TrajectoryGenerator+0xa14>)
 800289e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028a2:	4bb1      	ldr	r3, [pc, #708]	; (8002b68 <TrajectoryGenerator+0xa08>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd ff7c 	bl	80007a4 <__aeabi_ddiv>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f91c 	bl	8000af0 <__aeabi_d2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4aaf      	ldr	r2, [pc, #700]	; (8002b78 <TrajectoryGenerator+0xa18>)
 80028bc:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 80028be:	4ba9      	ldr	r3, [pc, #676]	; (8002b64 <TrajectoryGenerator+0xa04>)
 80028c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c4:	4bab      	ldr	r3, [pc, #684]	; (8002b74 <TrajectoryGenerator+0xa14>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd ff6b 	bl	80007a4 <__aeabi_ddiv>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7fe f90b 	bl	8000af0 <__aeabi_d2f>
 80028da:	4603      	mov	r3, r0
 80028dc:	4aa7      	ldr	r2, [pc, #668]	; (8002b7c <TrajectoryGenerator+0xa1c>)
 80028de:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 80028e0:	4ba3      	ldr	r3, [pc, #652]	; (8002b70 <TrajectoryGenerator+0xa10>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4aa6      	ldr	r2, [pc, #664]	; (8002b80 <TrajectoryGenerator+0xa20>)
 80028e6:	6013      	str	r3, [r2, #0]
		t2 = ta;
 80028e8:	4ba3      	ldr	r3, [pc, #652]	; (8002b78 <TrajectoryGenerator+0xa18>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4aa5      	ldr	r2, [pc, #660]	; (8002b84 <TrajectoryGenerator+0xa24>)
 80028ee:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 80028f0:	4ba1      	ldr	r3, [pc, #644]	; (8002b78 <TrajectoryGenerator+0xa18>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	4b9e      	ldr	r3, [pc, #632]	; (8002b70 <TrajectoryGenerator+0xa10>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	4ba1      	ldr	r3, [pc, #644]	; (8002b88 <TrajectoryGenerator+0xa28>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 8002906:	4b9d      	ldr	r3, [pc, #628]	; (8002b7c <TrajectoryGenerator+0xa1c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4aa0      	ldr	r2, [pc, #640]	; (8002b8c <TrajectoryGenerator+0xa2c>)
 800290c:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 800290e:	4b9b      	ldr	r3, [pc, #620]	; (8002b7c <TrajectoryGenerator+0xa1c>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <TrajectoryGenerator+0xa10>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291e:	4b9c      	ldr	r3, [pc, #624]	; (8002b90 <TrajectoryGenerator+0xa30>)
 8002920:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 8002924:	4b95      	ldr	r3, [pc, #596]	; (8002b7c <TrajectoryGenerator+0xa1c>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	4b93      	ldr	r3, [pc, #588]	; (8002b78 <TrajectoryGenerator+0xa18>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	4b97      	ldr	r3, [pc, #604]	; (8002b94 <TrajectoryGenerator+0xa34>)
 8002936:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 800293a:	4b90      	ldr	r3, [pc, #576]	; (8002b7c <TrajectoryGenerator+0xa1c>)
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	4b8b      	ldr	r3, [pc, #556]	; (8002b70 <TrajectoryGenerator+0xa10>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294a:	4b8b      	ldr	r3, [pc, #556]	; (8002b78 <TrajectoryGenerator+0xa18>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <TrajectoryGenerator+0xa38>)
 8002956:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 800295a:	4b90      	ldr	r3, [pc, #576]	; (8002b9c <TrajectoryGenerator+0xa3c>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	498f      	ldr	r1, [pc, #572]	; (8002ba0 <TrajectoryGenerator+0xa40>)
 8002962:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 8002966:	498f      	ldr	r1, [pc, #572]	; (8002ba4 <TrajectoryGenerator+0xa44>)
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8002974:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <TrajectoryGenerator+0xa48>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 800297c:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <TrajectoryGenerator+0xa0c>)
 800297e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002982:	a371      	add	r3, pc, #452	; (adr r3, 8002b48 <TrajectoryGenerator+0x9e8>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fde2 	bl	8000550 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <TrajectoryGenerator+0xa20>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fd81 	bl	80004a0 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002b50 <TrajectoryGenerator+0x9f0>
 80029a6:	ec43 2b10 	vmov	d0, r2, r3
 80029aa:	f009 f9ed 	bl	800bd88 <pow>
 80029ae:	ec53 2b10 	vmov	r2, r3, d0
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fdcb 	bl	8000550 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f895 	bl	8000af0 <__aeabi_d2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a78      	ldr	r2, [pc, #480]	; (8002bac <TrajectoryGenerator+0xa4c>)
 80029ca:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <TrajectoryGenerator+0xa0c>)
 80029ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <TrajectoryGenerator+0xa50>)
 80029d8:	f7fd fdba 	bl	8000550 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <TrajectoryGenerator+0xa20>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd59 	bl	80004a0 <__aeabi_f2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8002b58 <TrajectoryGenerator+0x9f8>
 80029f6:	ec43 2b10 	vmov	d0, r2, r3
 80029fa:	f009 f9c5 	bl	800bd88 <pow>
 80029fe:	ec53 2b10 	vmov	r2, r3, d0
 8002a02:	4620      	mov	r0, r4
 8002a04:	4629      	mov	r1, r5
 8002a06:	f7fd fda3 	bl	8000550 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f86d 	bl	8000af0 <__aeabi_d2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <TrajectoryGenerator+0xa54>)
 8002a1a:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002a1c:	4b58      	ldr	r3, [pc, #352]	; (8002b80 <TrajectoryGenerator+0xa20>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd3d 	bl	80004a0 <__aeabi_f2d>
 8002a26:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <TrajectoryGenerator+0xa0c>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fd90 	bl	8000550 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f85a 	bl	8000af0 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a5e      	ldr	r2, [pc, #376]	; (8002bb8 <TrajectoryGenerator+0xa58>)
 8002a40:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002a42:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <TrajectoryGenerator+0xa4c>)
 8002a44:	ed93 7a00 	vldr	s14, [r3]
 8002a48:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <TrajectoryGenerator+0xa54>)
 8002a4a:	edd3 6a00 	vldr	s13, [r3]
 8002a4e:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <TrajectoryGenerator+0xa24>)
 8002a50:	ed93 6a00 	vldr	s12, [r3]
 8002a54:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <TrajectoryGenerator+0xa20>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a66:	ee17 0a90 	vmov	r0, s15
 8002a6a:	f7fd fd19 	bl	80004a0 <__aeabi_f2d>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	460d      	mov	r5, r1
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <TrajectoryGenerator+0xa58>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd12 	bl	80004a0 <__aeabi_f2d>
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <TrajectoryGenerator+0xa50>)
 8002a82:	f7fd fd65 	bl	8000550 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4690      	mov	r8, r2
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <TrajectoryGenerator+0xa24>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <TrajectoryGenerator+0xa20>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	ee17 0a90 	vmov	r0, s15
 8002aa2:	f7fd fcfd 	bl	80004a0 <__aeabi_f2d>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002b58 <TrajectoryGenerator+0x9f8>
 8002aae:	ec43 2b10 	vmov	d0, r2, r3
 8002ab2:	f009 f969 	bl	800bd88 <pow>
 8002ab6:	ec53 2b10 	vmov	r2, r3, d0
 8002aba:	4640      	mov	r0, r8
 8002abc:	4649      	mov	r1, r9
 8002abe:	f7fd fd47 	bl	8000550 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fb8b 	bl	80001e4 <__adddf3>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f80b 	bl	8000af0 <__aeabi_d2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a33      	ldr	r2, [pc, #204]	; (8002bac <TrajectoryGenerator+0xa4c>)
 8002ade:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <TrajectoryGenerator+0xa54>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <TrajectoryGenerator+0xa58>)
 8002ae8:	edd3 6a00 	vldr	s13, [r3]
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <TrajectoryGenerator+0xa24>)
 8002aee:	ed93 6a00 	vldr	s12, [r3]
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <TrajectoryGenerator+0xa20>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <TrajectoryGenerator+0xa54>)
 8002b06:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <TrajectoryGenerator+0xa58>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <TrajectoryGenerator+0xa58>)
 8002b10:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <TrajectoryGenerator+0xa4c>)
 8002b14:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b18:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <TrajectoryGenerator+0xa54>)
 8002b1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <TrajectoryGenerator+0xa28>)
 8002b20:	ed93 6a00 	vldr	s12, [r3]
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <TrajectoryGenerator+0xa24>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b36:	ee17 0a90 	vmov	r0, s15
 8002b3a:	f7fd fcb1 	bl	80004a0 <__aeabi_f2d>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	e03c      	b.n	8002bbc <TrajectoryGenerator+0xa5c>
 8002b42:	bf00      	nop
 8002b44:	f3af 8000 	nop.w
 8002b48:	55555555 	.word	0x55555555
 8002b4c:	3fc55555 	.word	0x3fc55555
 8002b50:	00000000 	.word	0x00000000
 8002b54:	40080000 	.word	0x40080000
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40000000 	.word	0x40000000
 8002b60:	200006a0 	.word	0x200006a0
 8002b64:	200005d0 	.word	0x200005d0
 8002b68:	20000070 	.word	0x20000070
 8002b6c:	20000078 	.word	0x20000078
 8002b70:	200005b8 	.word	0x200005b8
 8002b74:	20000068 	.word	0x20000068
 8002b78:	200005bc 	.word	0x200005bc
 8002b7c:	200005c0 	.word	0x200005c0
 8002b80:	2000059c 	.word	0x2000059c
 8002b84:	200005a0 	.word	0x200005a0
 8002b88:	200005a4 	.word	0x200005a4
 8002b8c:	200005a8 	.word	0x200005a8
 8002b90:	200005ac 	.word	0x200005ac
 8002b94:	200005b0 	.word	0x200005b0
 8002b98:	200005b4 	.word	0x200005b4
 8002b9c:	200005c8 	.word	0x200005c8
 8002ba0:	20000620 	.word	0x20000620
 8002ba4:	20000628 	.word	0x20000628
 8002ba8:	20000630 	.word	0x20000630
 8002bac:	20000608 	.word	0x20000608
 8002bb0:	3fe00000 	.word	0x3fe00000
 8002bb4:	200005f0 	.word	0x200005f0
 8002bb8:	200005d8 	.word	0x200005d8
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	4bd4      	ldr	r3, [pc, #848]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fc6c 	bl	80004a0 <__aeabi_f2d>
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4bd1      	ldr	r3, [pc, #836]	; (8002f14 <TrajectoryGenerator+0xdb4>)
 8002bce:	f7fd fcbf 	bl	8000550 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4bcf      	ldr	r3, [pc, #828]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	4bce      	ldr	r3, [pc, #824]	; (8002f1c <TrajectoryGenerator+0xdbc>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bea:	ee17 0a90 	vmov	r0, s15
 8002bee:	f7fd fc57 	bl	80004a0 <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8002f00 <TrajectoryGenerator+0xda0>
 8002bfa:	ec43 2b10 	vmov	d0, r2, r3
 8002bfe:	f009 f8c3 	bl	800bd88 <pow>
 8002c02:	ec53 2b10 	vmov	r2, r3, d0
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd fca1 	bl	8000550 <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fae5 	bl	80001e4 <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	4bbd      	ldr	r3, [pc, #756]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002c24:	ed93 7a00 	vldr	s14, [r3]
 8002c28:	4bbc      	ldr	r3, [pc, #752]	; (8002f1c <TrajectoryGenerator+0xdbc>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c32:	ee17 0a90 	vmov	r0, s15
 8002c36:	f7fd fc33 	bl	80004a0 <__aeabi_f2d>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8002f08 <TrajectoryGenerator+0xda8>
 8002c42:	ec43 2b10 	vmov	d0, r2, r3
 8002c46:	f009 f89f 	bl	800bd88 <pow>
 8002c4a:	ec51 0b10 	vmov	r0, r1, d0
 8002c4e:	4bb4      	ldr	r3, [pc, #720]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fc7c 	bl	8000550 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	4baf      	ldr	r3, [pc, #700]	; (8002f24 <TrajectoryGenerator+0xdc4>)
 8002c66:	f7fd fd9d 	bl	80007a4 <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd fab5 	bl	80001e0 <__aeabi_dsub>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ff37 	bl	8000af0 <__aeabi_d2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4aa8      	ldr	r2, [pc, #672]	; (8002f28 <TrajectoryGenerator+0xdc8>)
 8002c86:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002c88:	4ba8      	ldr	r3, [pc, #672]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002c8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c8e:	4ba0      	ldr	r3, [pc, #640]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002c90:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c94:	4ba0      	ldr	r3, [pc, #640]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002c96:	ed93 6a00 	vldr	s12, [r3]
 8002c9a:	4ba0      	ldr	r3, [pc, #640]	; (8002f1c <TrajectoryGenerator+0xdbc>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cac:	ee17 0a90 	vmov	r0, s15
 8002cb0:	f7fd fbf6 	bl	80004a0 <__aeabi_f2d>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	460d      	mov	r5, r1
 8002cb8:	4b99      	ldr	r3, [pc, #612]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <TrajectoryGenerator+0xdb4>)
 8002cc4:	f7fd fc44 	bl	8000550 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4690      	mov	r8, r2
 8002cce:	4699      	mov	r9, r3
 8002cd0:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <TrajectoryGenerator+0xdbc>)
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce0:	ee17 0a90 	vmov	r0, s15
 8002ce4:	f7fd fbdc 	bl	80004a0 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8002f00 <TrajectoryGenerator+0xda0>
 8002cf0:	ec43 2b10 	vmov	d0, r2, r3
 8002cf4:	f009 f848 	bl	800bd88 <pow>
 8002cf8:	ec53 2b10 	vmov	r2, r3, d0
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f7fd fc26 	bl	8000550 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f7fd fa68 	bl	80001e0 <__aeabi_dsub>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7fd feea 	bl	8000af0 <__aeabi_d2f>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a83      	ldr	r2, [pc, #524]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002d20:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbba 	bl	80004a0 <__aeabi_f2d>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	460d      	mov	r5, r1
 8002d30:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002d32:	ed93 7a00 	vldr	s14, [r3]
 8002d36:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <TrajectoryGenerator+0xdbc>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d40:	ee17 0a90 	vmov	r0, s15
 8002d44:	f7fd fbac 	bl	80004a0 <__aeabi_f2d>
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f7fd fbff 	bl	8000550 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fa41 	bl	80001e0 <__aeabi_dsub>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd fec3 	bl	8000af0 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a68      	ldr	r2, [pc, #416]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002d6e:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8002d70:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <TrajectoryGenerator+0xdc8>)
 8002d72:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002d78:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <TrajectoryGenerator+0xdd0>)
 8002d7e:	ed93 6a00 	vldr	s12, [r3]
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <TrajectoryGenerator+0xdb8>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <TrajectoryGenerator+0xdc8>)
 8002d96:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8002d9a:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002da0:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8002da2:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a5a      	ldr	r2, [pc, #360]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002da8:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <TrajectoryGenerator+0xdc8>)
 8002dac:	ed93 7a03 	vldr	s14, [r3, #12]
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002db2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002db6:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <TrajectoryGenerator+0xdd4>)
 8002db8:	ed93 6a00 	vldr	s12, [r3]
 8002dbc:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <TrajectoryGenerator+0xdd0>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dce:	ee17 0a90 	vmov	r0, s15
 8002dd2:	f7fd fb65 	bl	80004a0 <__aeabi_f2d>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <TrajectoryGenerator+0xdd4>)
 8002ddc:	ed93 7a00 	vldr	s14, [r3]
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <TrajectoryGenerator+0xdd0>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	ee17 0a90 	vmov	r0, s15
 8002dee:	f7fd fb57 	bl	80004a0 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8002f08 <TrajectoryGenerator+0xda8>
 8002dfa:	ec43 2b10 	vmov	d0, r2, r3
 8002dfe:	f008 ffc3 	bl	800bd88 <pow>
 8002e02:	ec51 0b10 	vmov	r0, r1, d0
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fba0 	bl	8000550 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <TrajectoryGenerator+0xdc4>)
 8002e1e:	f7fd fcc1 	bl	80007a4 <__aeabi_ddiv>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f7fd f9d9 	bl	80001e0 <__aeabi_dsub>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7fd fe5b 	bl	8000af0 <__aeabi_d2f>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <TrajectoryGenerator+0xdc8>)
 8002e3e:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb2b 	bl	80004a0 <__aeabi_f2d>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <TrajectoryGenerator+0xdb4>)
 8002e5a:	f7fd fb79 	bl	8000550 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <TrajectoryGenerator+0xdd4>)
 8002e68:	ed93 7a00 	vldr	s14, [r3]
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <TrajectoryGenerator+0xdd0>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	ee17 0a90 	vmov	r0, s15
 8002e7a:	f7fd fb11 	bl	80004a0 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8002f00 <TrajectoryGenerator+0xda0>
 8002e86:	ec43 2b10 	vmov	d0, r2, r3
 8002e8a:	f008 ff7d 	bl	800bd88 <pow>
 8002e8e:	ec53 2b10 	vmov	r2, r3, d0
 8002e92:	4640      	mov	r0, r8
 8002e94:	4649      	mov	r1, r9
 8002e96:	f7fd fb5b 	bl	8000550 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7fd f99d 	bl	80001e0 <__aeabi_dsub>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe1f 	bl	8000af0 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <TrajectoryGenerator+0xdcc>)
 8002eb6:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <TrajectoryGenerator+0xdb0>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd faef 	bl	80004a0 <__aeabi_f2d>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <TrajectoryGenerator+0xdd4>)
 8002ec8:	ed93 7a00 	vldr	s14, [r3]
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <TrajectoryGenerator+0xdd0>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fae1 	bl	80004a0 <__aeabi_f2d>
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <TrajectoryGenerator+0xdc0>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb34 	bl	8000550 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4620      	mov	r0, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f7fd f976 	bl	80001e0 <__aeabi_dsub>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	e01e      	b.n	8002f38 <TrajectoryGenerator+0xdd8>
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40000000 	.word	0x40000000
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	40080000 	.word	0x40080000
 8002f10:	200005d8 	.word	0x200005d8
 8002f14:	3fe00000 	.word	0x3fe00000
 8002f18:	200005a4 	.word	0x200005a4
 8002f1c:	200005a0 	.word	0x200005a0
 8002f20:	20000078 	.word	0x20000078
 8002f24:	40180000 	.word	0x40180000
 8002f28:	20000608 	.word	0x20000608
 8002f2c:	200005f0 	.word	0x200005f0
 8002f30:	200005a8 	.word	0x200005a8
 8002f34:	200005ac 	.word	0x200005ac
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fdd8 	bl	8000af0 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <TrajectoryGenerator+0xf08>)
 8002f44:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <TrajectoryGenerator+0xf0c>)
 8002f48:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f4c:	4b48      	ldr	r3, [pc, #288]	; (8003070 <TrajectoryGenerator+0xf10>)
 8002f4e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002f52:	4b48      	ldr	r3, [pc, #288]	; (8003074 <TrajectoryGenerator+0xf14>)
 8002f54:	ed93 6a00 	vldr	s12, [r3]
 8002f58:	4b47      	ldr	r3, [pc, #284]	; (8003078 <TrajectoryGenerator+0xf18>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	ee17 0a90 	vmov	r0, s15
 8002f6e:	f7fd fa97 	bl	80004a0 <__aeabi_f2d>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <TrajectoryGenerator+0xf08>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fa90 	bl	80004a0 <__aeabi_f2d>
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <TrajectoryGenerator+0xf1c>)
 8002f86:	f7fd fae3 	bl	8000550 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <TrajectoryGenerator+0xf14>)
 8002f94:	ed93 7a00 	vldr	s14, [r3]
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <TrajectoryGenerator+0xf18>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	ee17 0a90 	vmov	r0, s15
 8002fa6:	f7fd fa7b 	bl	80004a0 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8003060 <TrajectoryGenerator+0xf00>
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f008 fee7 	bl	800bd88 <pow>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd fac5 	bl	8000550 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f7fd f909 	bl	80001e4 <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7fd fd89 	bl	8000af0 <__aeabi_d2f>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <TrajectoryGenerator+0xf0c>)
 8002fe2:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <TrajectoryGenerator+0xf10>)
 8002fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <TrajectoryGenerator+0xf08>)
 8002fec:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <TrajectoryGenerator+0xf14>)
 8002ff2:	ed93 6a00 	vldr	s12, [r3]
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <TrajectoryGenerator+0xf18>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <TrajectoryGenerator+0xf10>)
 800300a:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <TrajectoryGenerator+0xf08>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <TrajectoryGenerator+0xf08>)
 8003014:	6153      	str	r3, [r2, #20]

		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <TrajectoryGenerator+0xf20>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <TrajectoryGenerator+0xf24>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]

		//Reset Cascade PID
		e1 = 0;
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <TrajectoryGenerator+0xf28>)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
		s1 = 0;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <TrajectoryGenerator+0xf2c>)
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
		p1 = 0;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <TrajectoryGenerator+0xf30>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
		u1 = 0;
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <TrajectoryGenerator+0xf34>)
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
		e2 = 0;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <TrajectoryGenerator+0xf38>)
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
		s2 = 0;
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <TrajectoryGenerator+0xf3c>)
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
		u2 = 0;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <TrajectoryGenerator+0xf40>)
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
	}
}
 800305a:	bf00      	nop
 800305c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003060:	00000000 	.word	0x00000000
 8003064:	40000000 	.word	0x40000000
 8003068:	200005d8 	.word	0x200005d8
 800306c:	20000608 	.word	0x20000608
 8003070:	200005f0 	.word	0x200005f0
 8003074:	200005b0 	.word	0x200005b0
 8003078:	200005ac 	.word	0x200005ac
 800307c:	3fe00000 	.word	0x3fe00000
 8003080:	200003ea 	.word	0x200003ea
 8003084:	200003e9 	.word	0x200003e9
 8003088:	20000634 	.word	0x20000634
 800308c:	20000638 	.word	0x20000638
 8003090:	2000063c 	.word	0x2000063c
 8003094:	20000640 	.word	0x20000640
 8003098:	20000644 	.word	0x20000644
 800309c:	20000648 	.word	0x20000648
 80030a0:	2000064c 	.word	0x2000064c
 80030a4:	00000000 	.word	0x00000000

080030a8 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	af00      	add	r7, sp, #0


	if( 0 <= t && t < t1){
 80030ae:	4ba6      	ldr	r3, [pc, #664]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	f2c0 808e 	blt.w	80031dc <TrajectoryEvaluation+0x134>
 80030c0:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80030c2:	ed93 7a00 	vldr	s14, [r3]
 80030c6:	4ba1      	ldr	r3, [pc, #644]	; (800334c <TrajectoryEvaluation+0x2a4>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d4:	f140 8082 	bpl.w	80031dc <TrajectoryEvaluation+0x134>
		theta_ref = (1.0/6.0)*j_max*pow(t,3.0);
 80030d8:	4b9d      	ldr	r3, [pc, #628]	; (8003350 <TrajectoryEvaluation+0x2a8>)
 80030da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030de:	a394      	add	r3, pc, #592	; (adr r3, 8003330 <TrajectoryEvaluation+0x288>)
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f7fd fa34 	bl	8000550 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4b95      	ldr	r3, [pc, #596]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd f9d3 	bl	80004a0 <__aeabi_f2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8003338 <TrajectoryEvaluation+0x290>
 8003102:	ec43 2b10 	vmov	d0, r2, r3
 8003106:	f008 fe3f 	bl	800bd88 <pow>
 800310a:	ec53 2b10 	vmov	r2, r3, d0
 800310e:	4620      	mov	r0, r4
 8003110:	4629      	mov	r1, r5
 8003112:	f7fd fa1d 	bl	8000550 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	498e      	ldr	r1, [pc, #568]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 800311c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 8003120:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <TrajectoryEvaluation+0x2a8>)
 8003122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <TrajectoryEvaluation+0x2b0>)
 800312c:	f7fd fa10 	bl	8000550 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4b83      	ldr	r3, [pc, #524]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9af 	bl	80004a0 <__aeabi_f2d>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8003340 <TrajectoryEvaluation+0x298>
 800314a:	ec43 2b10 	vmov	d0, r2, r3
 800314e:	f008 fe1b 	bl	800bd88 <pow>
 8003152:	ec53 2b10 	vmov	r2, r3, d0
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f7fd f9f9 	bl	8000550 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	497e      	ldr	r1, [pc, #504]	; (800335c <TrajectoryEvaluation+0x2b4>)
 8003164:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 8003168:	4b77      	ldr	r3, [pc, #476]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f997 	bl	80004a0 <__aeabi_f2d>
 8003172:	4b77      	ldr	r3, [pc, #476]	; (8003350 <TrajectoryEvaluation+0x2a8>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd f9ea 	bl	8000550 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fcb4 	bl	8000af0 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <TrajectoryEvaluation+0x2b8>)
 800318c:	6013      	str	r3, [r2, #0]
		if(dir==1){
 800318e:	4b75      	ldr	r3, [pc, #468]	; (8003364 <TrajectoryEvaluation+0x2bc>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10e      	bne.n	80031b4 <TrajectoryEvaluation+0x10c>
			theta_ref = theta_ref + theta_0;
 8003196:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 8003198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319c:	4b72      	ldr	r3, [pc, #456]	; (8003368 <TrajectoryEvaluation+0x2c0>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd f81f 	bl	80001e4 <__adddf3>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	496a      	ldr	r1, [pc, #424]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 80031ac:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80031b0:	f000 bdc8 	b.w	8003d44 <TrajectoryEvaluation+0xc9c>
		}
		else if(dir==0){
 80031b4:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <TrajectoryEvaluation+0x2bc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 85c3 	bne.w	8003d44 <TrajectoryEvaluation+0xc9c>
			theta_ref = theta_0 - theta_ref;
 80031be:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <TrajectoryEvaluation+0x2c0>)
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	4b63      	ldr	r3, [pc, #396]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd f809 	bl	80001e0 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4960      	ldr	r1, [pc, #384]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 80031d4:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80031d8:	f000 bdb4 	b.w	8003d44 <TrajectoryEvaluation+0xc9c>
		}
	}
	else if (t1 <= t && t< t2){
 80031dc:	4b5b      	ldr	r3, [pc, #364]	; (800334c <TrajectoryEvaluation+0x2a4>)
 80031de:	ed93 7a00 	vldr	s14, [r3]
 80031e2:	4b59      	ldr	r3, [pc, #356]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f0:	f200 80c4 	bhi.w	800337c <TrajectoryEvaluation+0x2d4>
 80031f4:	4b54      	ldr	r3, [pc, #336]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	4b5c      	ldr	r3, [pc, #368]	; (800336c <TrajectoryEvaluation+0x2c4>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	f140 80b8 	bpl.w	800337c <TrajectoryEvaluation+0x2d4>
		theta_ref = p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 800320c:	4b58      	ldr	r3, [pc, #352]	; (8003370 <TrajectoryEvaluation+0x2c8>)
 800320e:	ed93 7a00 	vldr	s14, [r3]
 8003212:	4b58      	ldr	r3, [pc, #352]	; (8003374 <TrajectoryEvaluation+0x2cc>)
 8003214:	edd3 6a00 	vldr	s13, [r3]
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 800321a:	ed93 6a00 	vldr	s12, [r3]
 800321e:	4b4b      	ldr	r3, [pc, #300]	; (800334c <TrajectoryEvaluation+0x2a4>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003230:	ee17 0a90 	vmov	r0, s15
 8003234:	f7fd f934 	bl	80004a0 <__aeabi_f2d>
 8003238:	4604      	mov	r4, r0
 800323a:	460d      	mov	r5, r1
 800323c:	4b4e      	ldr	r3, [pc, #312]	; (8003378 <TrajectoryEvaluation+0x2d0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f92d 	bl	80004a0 <__aeabi_f2d>
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	4b43      	ldr	r3, [pc, #268]	; (8003358 <TrajectoryEvaluation+0x2b0>)
 800324c:	f7fd f980 	bl	8000550 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4690      	mov	r8, r2
 8003256:	4699      	mov	r9, r3
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <TrajectoryEvaluation+0x2a4>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	ee17 0a90 	vmov	r0, s15
 800326c:	f7fd f918 	bl	80004a0 <__aeabi_f2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003340 <TrajectoryEvaluation+0x298>
 8003278:	ec43 2b10 	vmov	d0, r2, r3
 800327c:	f008 fd84 	bl	800bd88 <pow>
 8003280:	ec53 2b10 	vmov	r2, r3, d0
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	f7fd f962 	bl	8000550 <__aeabi_dmul>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4620      	mov	r0, r4
 8003292:	4629      	mov	r1, r5
 8003294:	f7fc ffa6 	bl	80001e4 <__adddf3>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	492d      	ldr	r1, [pc, #180]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 800329e:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <TrajectoryEvaluation+0x2cc>)
 80032a4:	ed93 7a00 	vldr	s14, [r3]
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <TrajectoryEvaluation+0x2d0>)
 80032aa:	edd3 6a00 	vldr	s13, [r3]
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <TrajectoryEvaluation+0x2a0>)
 80032b0:	ed93 6a00 	vldr	s12, [r3]
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <TrajectoryEvaluation+0x2a4>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	ee17 0a90 	vmov	r0, s15
 80032ca:	f7fd f8e9 	bl	80004a0 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4922      	ldr	r1, [pc, #136]	; (800335c <TrajectoryEvaluation+0x2b4>)
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <TrajectoryEvaluation+0x2d0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <TrajectoryEvaluation+0x2b8>)
 80032de:	6013      	str	r3, [r2, #0]
		if(dir==1){
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <TrajectoryEvaluation+0x2bc>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10e      	bne.n	8003306 <TrajectoryEvaluation+0x25e>
			theta_ref = theta_ref + theta_0;
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 80032ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <TrajectoryEvaluation+0x2c0>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fc ff76 	bl	80001e4 <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4915      	ldr	r1, [pc, #84]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 80032fe:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 8003302:	f000 bd21 	b.w	8003d48 <TrajectoryEvaluation+0xca0>
		}
		else if(dir==0){
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <TrajectoryEvaluation+0x2bc>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 851c 	bne.w	8003d48 <TrajectoryEvaluation+0xca0>
			theta_ref = theta_0 - theta_ref;
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <TrajectoryEvaluation+0x2c0>)
 8003312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fc ff60 	bl	80001e0 <__aeabi_dsub>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	490b      	ldr	r1, [pc, #44]	; (8003354 <TrajectoryEvaluation+0x2ac>)
 8003326:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 800332a:	f000 bd0d 	b.w	8003d48 <TrajectoryEvaluation+0xca0>
 800332e:	bf00      	nop
 8003330:	55555555 	.word	0x55555555
 8003334:	3fc55555 	.word	0x3fc55555
 8003338:	00000000 	.word	0x00000000
 800333c:	40080000 	.word	0x40080000
 8003340:	00000000 	.word	0x00000000
 8003344:	40000000 	.word	0x40000000
 8003348:	20000598 	.word	0x20000598
 800334c:	2000059c 	.word	0x2000059c
 8003350:	20000078 	.word	0x20000078
 8003354:	20000620 	.word	0x20000620
 8003358:	3fe00000 	.word	0x3fe00000
 800335c:	20000628 	.word	0x20000628
 8003360:	20000630 	.word	0x20000630
 8003364:	200000d9 	.word	0x200000d9
 8003368:	200005c8 	.word	0x200005c8
 800336c:	200005a0 	.word	0x200005a0
 8003370:	20000608 	.word	0x20000608
 8003374:	200005f0 	.word	0x200005f0
 8003378:	200005d8 	.word	0x200005d8
		}
	}
	else if (t2 <= t && t < t3){
 800337c:	4b98      	ldr	r3, [pc, #608]	; (80035e0 <TrajectoryEvaluation+0x538>)
 800337e:	ed93 7a00 	vldr	s14, [r3]
 8003382:	4b98      	ldr	r3, [pc, #608]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	f200 8142 	bhi.w	8003618 <TrajectoryEvaluation+0x570>
 8003394:	4b93      	ldr	r3, [pc, #588]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <TrajectoryEvaluation+0x540>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	f140 8136 	bpl.w	8003618 <TrajectoryEvaluation+0x570>
		theta_ref = p[1] + v[1]*(t-t2) + 0.5*a_max*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 80033ac:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <TrajectoryEvaluation+0x544>)
 80033ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80033b2:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <TrajectoryEvaluation+0x548>)
 80033b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80033b8:	4b8a      	ldr	r3, [pc, #552]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 80033ba:	ed93 6a00 	vldr	s12, [r3]
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <TrajectoryEvaluation+0x538>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	ee17 0a90 	vmov	r0, s15
 80033d4:	f7fd f864 	bl	80004a0 <__aeabi_f2d>
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <TrajectoryEvaluation+0x54c>)
 80033de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <TrajectoryEvaluation+0x550>)
 80033e8:	f7fd f8b2 	bl	8000550 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4690      	mov	r8, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 80033f6:	ed93 7a00 	vldr	s14, [r3]
 80033fa:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <TrajectoryEvaluation+0x538>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	ee17 0a90 	vmov	r0, s15
 8003408:	f7fd f84a 	bl	80004a0 <__aeabi_f2d>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80035d0 <TrajectoryEvaluation+0x528>
 8003414:	ec43 2b10 	vmov	d0, r2, r3
 8003418:	f008 fcb6 	bl	800bd88 <pow>
 800341c:	ec53 2b10 	vmov	r2, r3, d0
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fd f894 	bl	8000550 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fc fed8 	bl	80001e4 <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4614      	mov	r4, r2
 800343a:	461d      	mov	r5, r3
 800343c:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 800343e:	ed93 7a00 	vldr	s14, [r3]
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <TrajectoryEvaluation+0x538>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344c:	ee17 0a90 	vmov	r0, s15
 8003450:	f7fd f826 	bl	80004a0 <__aeabi_f2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80035d8 <TrajectoryEvaluation+0x530>
 800345c:	ec43 2b10 	vmov	d0, r2, r3
 8003460:	f008 fc92 	bl	800bd88 <pow>
 8003464:	ec51 0b10 	vmov	r0, r1, d0
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <TrajectoryEvaluation+0x554>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fd f86f 	bl	8000550 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b60      	ldr	r3, [pc, #384]	; (8003600 <TrajectoryEvaluation+0x558>)
 8003480:	f7fd f990 	bl	80007a4 <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc fea8 	bl	80001e0 <__aeabi_dsub>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	495b      	ldr	r1, [pc, #364]	; (8003604 <TrajectoryEvaluation+0x55c>)
 8003496:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a_max*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 800349a:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <TrajectoryEvaluation+0x548>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc fffe 	bl	80004a0 <__aeabi_f2d>
 80034a4:	4604      	mov	r4, r0
 80034a6:	460d      	mov	r5, r1
 80034a8:	4b4e      	ldr	r3, [pc, #312]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <TrajectoryEvaluation+0x538>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fc fff0 	bl	80004a0 <__aeabi_f2d>
 80034c0:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <TrajectoryEvaluation+0x54c>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd f843 	bl	8000550 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f7fc fe87 	bl	80001e4 <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4614      	mov	r4, r2
 80034dc:	461d      	mov	r5, r3
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <TrajectoryEvaluation+0x554>)
 80034e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <TrajectoryEvaluation+0x550>)
 80034ea:	f7fd f831 	bl	8000550 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <TrajectoryEvaluation+0x538>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003506:	ee17 0a90 	vmov	r0, s15
 800350a:	f7fc ffc9 	bl	80004a0 <__aeabi_f2d>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80035d0 <TrajectoryEvaluation+0x528>
 8003516:	ec43 2b10 	vmov	d0, r2, r3
 800351a:	f008 fc35 	bl	800bd88 <pow>
 800351e:	ec53 2b10 	vmov	r2, r3, d0
 8003522:	4640      	mov	r0, r8
 8003524:	4649      	mov	r1, r9
 8003526:	f7fd f813 	bl	8000550 <__aeabi_dmul>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	f7fc fe55 	bl	80001e0 <__aeabi_dsub>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4933      	ldr	r1, [pc, #204]	; (8003608 <TrajectoryEvaluation+0x560>)
 800353c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a_max - j_max*(t-t2);
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <TrajectoryEvaluation+0x54c>)
 8003542:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <TrajectoryEvaluation+0x53c>)
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <TrajectoryEvaluation+0x538>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fc ffa1 	bl	80004a0 <__aeabi_f2d>
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <TrajectoryEvaluation+0x554>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc fff4 	bl	8000550 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fe36 	bl	80001e0 <__aeabi_dsub>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fab8 	bl	8000af0 <__aeabi_d2f>
 8003580:	4603      	mov	r3, r0
 8003582:	4a22      	ldr	r2, [pc, #136]	; (800360c <TrajectoryEvaluation+0x564>)
 8003584:	6013      	str	r3, [r2, #0]
		if(dir==1){
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <TrajectoryEvaluation+0x568>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10d      	bne.n	80035aa <TrajectoryEvaluation+0x502>
			theta_ref = theta_ref + theta_0;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <TrajectoryEvaluation+0x55c>)
 8003590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <TrajectoryEvaluation+0x56c>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fc fe23 	bl	80001e4 <__adddf3>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4918      	ldr	r1, [pc, #96]	; (8003604 <TrajectoryEvaluation+0x55c>)
 80035a4:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80035a8:	e3d0      	b.n	8003d4c <TrajectoryEvaluation+0xca4>
		}
		else if(dir==0){
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <TrajectoryEvaluation+0x568>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 83cc 	bne.w	8003d4c <TrajectoryEvaluation+0xca4>
			theta_ref = theta_0 - theta_ref;
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <TrajectoryEvaluation+0x56c>)
 80035b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <TrajectoryEvaluation+0x55c>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fc fe0e 	bl	80001e0 <__aeabi_dsub>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <TrajectoryEvaluation+0x55c>)
 80035ca:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80035ce:	e3bd      	b.n	8003d4c <TrajectoryEvaluation+0xca4>
 80035d0:	00000000 	.word	0x00000000
 80035d4:	40000000 	.word	0x40000000
 80035d8:	00000000 	.word	0x00000000
 80035dc:	40080000 	.word	0x40080000
 80035e0:	200005a0 	.word	0x200005a0
 80035e4:	20000598 	.word	0x20000598
 80035e8:	200005a4 	.word	0x200005a4
 80035ec:	20000608 	.word	0x20000608
 80035f0:	200005f0 	.word	0x200005f0
 80035f4:	20000070 	.word	0x20000070
 80035f8:	3fe00000 	.word	0x3fe00000
 80035fc:	20000078 	.word	0x20000078
 8003600:	40180000 	.word	0x40180000
 8003604:	20000620 	.word	0x20000620
 8003608:	20000628 	.word	0x20000628
 800360c:	20000630 	.word	0x20000630
 8003610:	200000d9 	.word	0x200000d9
 8003614:	200005c8 	.word	0x200005c8
		}
	}
	else if (t3 <= t && t < t4 ){
 8003618:	4ba7      	ldr	r3, [pc, #668]	; (80038b8 <TrajectoryEvaluation+0x810>)
 800361a:	ed93 7a00 	vldr	s14, [r3]
 800361e:	4ba7      	ldr	r3, [pc, #668]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362c:	d85c      	bhi.n	80036e8 <TrajectoryEvaluation+0x640>
 800362e:	4ba3      	ldr	r3, [pc, #652]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	4ba2      	ldr	r3, [pc, #648]	; (80038c0 <TrajectoryEvaluation+0x818>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	d551      	bpl.n	80036e8 <TrajectoryEvaluation+0x640>
		theta_ref = p[2] + w_max*(t-t3);
 8003644:	4b9f      	ldr	r3, [pc, #636]	; (80038c4 <TrajectoryEvaluation+0x81c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ff29 	bl	80004a0 <__aeabi_f2d>
 800364e:	4604      	mov	r4, r0
 8003650:	460d      	mov	r5, r1
 8003652:	4b9a      	ldr	r3, [pc, #616]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	4b97      	ldr	r3, [pc, #604]	; (80038b8 <TrajectoryEvaluation+0x810>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003662:	ee17 0a90 	vmov	r0, s15
 8003666:	f7fc ff1b 	bl	80004a0 <__aeabi_f2d>
 800366a:	4b97      	ldr	r3, [pc, #604]	; (80038c8 <TrajectoryEvaluation+0x820>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fc ff6e 	bl	8000550 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4620      	mov	r0, r4
 800367a:	4629      	mov	r1, r5
 800367c:	f7fc fdb2 	bl	80001e4 <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4991      	ldr	r1, [pc, #580]	; (80038cc <TrajectoryEvaluation+0x824>)
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = w_max;
 800368a:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <TrajectoryEvaluation+0x820>)
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	498f      	ldr	r1, [pc, #572]	; (80038d0 <TrajectoryEvaluation+0x828>)
 8003692:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8003696:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <TrajectoryEvaluation+0x82c>)
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
		if(dir==1){
 800369e:	4b8e      	ldr	r3, [pc, #568]	; (80038d8 <TrajectoryEvaluation+0x830>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10d      	bne.n	80036c2 <TrajectoryEvaluation+0x61a>
			theta_ref = theta_ref + theta_0;
 80036a6:	4b89      	ldr	r3, [pc, #548]	; (80038cc <TrajectoryEvaluation+0x824>)
 80036a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ac:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <TrajectoryEvaluation+0x834>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc fd97 	bl	80001e4 <__adddf3>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4984      	ldr	r1, [pc, #528]	; (80038cc <TrajectoryEvaluation+0x824>)
 80036bc:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80036c0:	e346      	b.n	8003d50 <TrajectoryEvaluation+0xca8>
		}
		else if(dir==0){
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <TrajectoryEvaluation+0x830>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8342 	bne.w	8003d50 <TrajectoryEvaluation+0xca8>
			theta_ref = theta_0 - theta_ref;
 80036cc:	4b83      	ldr	r3, [pc, #524]	; (80038dc <TrajectoryEvaluation+0x834>)
 80036ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d2:	4b7e      	ldr	r3, [pc, #504]	; (80038cc <TrajectoryEvaluation+0x824>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc fd82 	bl	80001e0 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	497a      	ldr	r1, [pc, #488]	; (80038cc <TrajectoryEvaluation+0x824>)
 80036e2:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80036e6:	e333      	b.n	8003d50 <TrajectoryEvaluation+0xca8>
		}
	}
	else if (t4 <= t && t < t5 ){
 80036e8:	4b75      	ldr	r3, [pc, #468]	; (80038c0 <TrajectoryEvaluation+0x818>)
 80036ea:	ed93 7a00 	vldr	s14, [r3]
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <TrajectoryEvaluation+0x814>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	f200 80fa 	bhi.w	80038f4 <TrajectoryEvaluation+0x84c>
 8003700:	4b6e      	ldr	r3, [pc, #440]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003702:	ed93 7a00 	vldr	s14, [r3]
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <TrajectoryEvaluation+0x838>)
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	f140 80ee 	bpl.w	80038f4 <TrajectoryEvaluation+0x84c>
		theta_ref = p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 8003718:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <TrajectoryEvaluation+0x81c>)
 800371a:	ed93 7a03 	vldr	s14, [r3, #12]
 800371e:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <TrajectoryEvaluation+0x83c>)
 8003720:	edd3 6a03 	vldr	s13, [r3, #12]
 8003724:	4b65      	ldr	r3, [pc, #404]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003726:	ed93 6a00 	vldr	s12, [r3]
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <TrajectoryEvaluation+0x818>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373c:	ee17 0a90 	vmov	r0, s15
 8003740:	f7fc feae 	bl	80004a0 <__aeabi_f2d>
 8003744:	4604      	mov	r4, r0
 8003746:	460d      	mov	r5, r1
 8003748:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <TrajectoryEvaluation+0x814>)
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <TrajectoryEvaluation+0x818>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc fea0 	bl	80004a0 <__aeabi_f2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	ed9f 1b50 	vldr	d1, [pc, #320]	; 80038a8 <TrajectoryEvaluation+0x800>
 8003768:	ec43 2b10 	vmov	d0, r2, r3
 800376c:	f008 fb0c 	bl	800bd88 <pow>
 8003770:	ec51 0b10 	vmov	r0, r1, d0
 8003774:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <TrajectoryEvaluation+0x840>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f7fc fee9 	bl	8000550 <__aeabi_dmul>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <TrajectoryEvaluation+0x844>)
 800378c:	f7fd f80a 	bl	80007a4 <__aeabi_ddiv>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4620      	mov	r0, r4
 8003796:	4629      	mov	r1, r5
 8003798:	f7fc fd22 	bl	80001e0 <__aeabi_dsub>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	494a      	ldr	r1, [pc, #296]	; (80038cc <TrajectoryEvaluation+0x824>)
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 80037a6:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <TrajectoryEvaluation+0x83c>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fe78 	bl	80004a0 <__aeabi_f2d>
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <TrajectoryEvaluation+0x840>)
 80037b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <TrajectoryEvaluation+0x848>)
 80037c0:	f7fc fec6 	bl	8000550 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4690      	mov	r8, r2
 80037ca:	4699      	mov	r9, r3
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <TrajectoryEvaluation+0x814>)
 80037ce:	ed93 7a00 	vldr	s14, [r3]
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <TrajectoryEvaluation+0x818>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037dc:	ee17 0a90 	vmov	r0, s15
 80037e0:	f7fc fe5e 	bl	80004a0 <__aeabi_f2d>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	ed9f 1b31 	vldr	d1, [pc, #196]	; 80038b0 <TrajectoryEvaluation+0x808>
 80037ec:	ec43 2b10 	vmov	d0, r2, r3
 80037f0:	f008 faca 	bl	800bd88 <pow>
 80037f4:	ec53 2b10 	vmov	r2, r3, d0
 80037f8:	4640      	mov	r0, r8
 80037fa:	4649      	mov	r1, r9
 80037fc:	f7fc fea8 	bl	8000550 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fc fcea 	bl	80001e0 <__aeabi_dsub>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	492f      	ldr	r1, [pc, #188]	; (80038d0 <TrajectoryEvaluation+0x828>)
 8003812:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = - j_max*(t-t4);
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <TrajectoryEvaluation+0x840>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	4692      	mov	sl, r2
 800381e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <TrajectoryEvaluation+0x814>)
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <TrajectoryEvaluation+0x818>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003832:	ee17 0a90 	vmov	r0, s15
 8003836:	f7fc fe33 	bl	80004a0 <__aeabi_f2d>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4650      	mov	r0, sl
 8003840:	4659      	mov	r1, fp
 8003842:	f7fc fe85 	bl	8000550 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	f7fd f94f 	bl	8000af0 <__aeabi_d2f>
 8003852:	4603      	mov	r3, r0
 8003854:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <TrajectoryEvaluation+0x82c>)
 8003856:	6013      	str	r3, [r2, #0]
		if(dir==1){
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <TrajectoryEvaluation+0x830>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10d      	bne.n	800387c <TrajectoryEvaluation+0x7d4>
			theta_ref = theta_ref + theta_0;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <TrajectoryEvaluation+0x824>)
 8003862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <TrajectoryEvaluation+0x834>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fcba 	bl	80001e4 <__adddf3>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4915      	ldr	r1, [pc, #84]	; (80038cc <TrajectoryEvaluation+0x824>)
 8003876:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 800387a:	e26b      	b.n	8003d54 <TrajectoryEvaluation+0xcac>
		}
		else if(dir==0){
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <TrajectoryEvaluation+0x830>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f040 8267 	bne.w	8003d54 <TrajectoryEvaluation+0xcac>
			theta_ref = theta_0 - theta_ref;
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <TrajectoryEvaluation+0x834>)
 8003888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <TrajectoryEvaluation+0x824>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f7fc fca5 	bl	80001e0 <__aeabi_dsub>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	490c      	ldr	r1, [pc, #48]	; (80038cc <TrajectoryEvaluation+0x824>)
 800389c:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 80038a0:	e258      	b.n	8003d54 <TrajectoryEvaluation+0xcac>
 80038a2:	bf00      	nop
 80038a4:	f3af 8000 	nop.w
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40080000 	.word	0x40080000
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40000000 	.word	0x40000000
 80038b8:	200005a4 	.word	0x200005a4
 80038bc:	20000598 	.word	0x20000598
 80038c0:	200005a8 	.word	0x200005a8
 80038c4:	20000608 	.word	0x20000608
 80038c8:	20000068 	.word	0x20000068
 80038cc:	20000620 	.word	0x20000620
 80038d0:	20000628 	.word	0x20000628
 80038d4:	20000630 	.word	0x20000630
 80038d8:	200000d9 	.word	0x200000d9
 80038dc:	200005c8 	.word	0x200005c8
 80038e0:	200005ac 	.word	0x200005ac
 80038e4:	200005f0 	.word	0x200005f0
 80038e8:	20000078 	.word	0x20000078
 80038ec:	40180000 	.word	0x40180000
 80038f0:	3fe00000 	.word	0x3fe00000
		}
	}
	else if (t5 <= t && t < t6 ){
 80038f4:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <TrajectoryEvaluation+0x9e0>)
 80038f6:	ed93 7a00 	vldr	s14, [r3]
 80038fa:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <TrajectoryEvaluation+0x9e4>)
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	f200 80d6 	bhi.w	8003ab8 <TrajectoryEvaluation+0xa10>
 800390c:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <TrajectoryEvaluation+0x9e4>)
 800390e:	ed93 7a00 	vldr	s14, [r3]
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <TrajectoryEvaluation+0x9e8>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	f140 80ca 	bpl.w	8003ab8 <TrajectoryEvaluation+0xa10>
		theta_ref = p[4] + v[4]*(t-t5) + 0.5*(-a_max)*pow((t-t5),2.0);
 8003924:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <TrajectoryEvaluation+0x9ec>)
 8003926:	ed93 7a04 	vldr	s14, [r3, #16]
 800392a:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <TrajectoryEvaluation+0x9f0>)
 800392c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003930:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <TrajectoryEvaluation+0x9e4>)
 8003932:	ed93 6a00 	vldr	s12, [r3]
 8003936:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <TrajectoryEvaluation+0x9e0>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003948:	ee17 0a90 	vmov	r0, s15
 800394c:	f7fc fda8 	bl	80004a0 <__aeabi_f2d>
 8003950:	4682      	mov	sl, r0
 8003952:	468b      	mov	fp, r1
 8003954:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <TrajectoryEvaluation+0x9f4>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	4690      	mov	r8, r2
 800395c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <TrajectoryEvaluation+0x9f8>)
 8003966:	4640      	mov	r0, r8
 8003968:	4649      	mov	r1, r9
 800396a:	f7fc fdf1 	bl	8000550 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4690      	mov	r8, r2
 8003974:	4699      	mov	r9, r3
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <TrajectoryEvaluation+0x9e4>)
 8003978:	ed93 7a00 	vldr	s14, [r3]
 800397c:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <TrajectoryEvaluation+0x9e0>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003986:	ee17 0a90 	vmov	r0, s15
 800398a:	f7fc fd89 	bl	80004a0 <__aeabi_f2d>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8003a80 <TrajectoryEvaluation+0x9d8>
 8003996:	ec43 2b10 	vmov	d0, r2, r3
 800399a:	f008 f9f5 	bl	800bd88 <pow>
 800399e:	ec53 2b10 	vmov	r2, r3, d0
 80039a2:	4640      	mov	r0, r8
 80039a4:	4649      	mov	r1, r9
 80039a6:	f7fc fdd3 	bl	8000550 <__aeabi_dmul>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4650      	mov	r0, sl
 80039b0:	4659      	mov	r1, fp
 80039b2:	f7fc fc17 	bl	80001e4 <__adddf3>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	493a      	ldr	r1, [pc, #232]	; (8003aa4 <TrajectoryEvaluation+0x9fc>)
 80039bc:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + -a_max*(t-t5);
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <TrajectoryEvaluation+0x9f0>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fd6b 	bl	80004a0 <__aeabi_f2d>
 80039ca:	4680      	mov	r8, r0
 80039cc:	4689      	mov	r9, r1
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <TrajectoryEvaluation+0x9f4>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	4614      	mov	r4, r2
 80039d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <TrajectoryEvaluation+0x9e4>)
 80039dc:	ed93 7a00 	vldr	s14, [r3]
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <TrajectoryEvaluation+0x9e0>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ea:	ee17 0a90 	vmov	r0, s15
 80039ee:	f7fc fd57 	bl	80004a0 <__aeabi_f2d>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	f7fc fda9 	bl	8000550 <__aeabi_dmul>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4640      	mov	r0, r8
 8003a04:	4649      	mov	r1, r9
 8003a06:	f7fc fbed 	bl	80001e4 <__adddf3>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4926      	ldr	r1, [pc, #152]	; (8003aa8 <TrajectoryEvaluation+0xa00>)
 8003a10:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -a_max;
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <TrajectoryEvaluation+0x9f4>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f867 	bl	8000af0 <__aeabi_d2f>
 8003a22:	4603      	mov	r3, r0
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef1 7a67 	vneg.f32	s15, s15
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <TrajectoryEvaluation+0xa04>)
 8003a2e:	edc3 7a00 	vstr	s15, [r3]
		if(dir==1){
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <TrajectoryEvaluation+0xa08>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <TrajectoryEvaluation+0x9ae>
			theta_ref = theta_ref + theta_0;
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <TrajectoryEvaluation+0x9fc>)
 8003a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <TrajectoryEvaluation+0xa0c>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fbcd 	bl	80001e4 <__adddf3>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <TrajectoryEvaluation+0x9fc>)
 8003a50:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 8003a54:	e180      	b.n	8003d58 <TrajectoryEvaluation+0xcb0>
		}
		else if(dir==0){
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <TrajectoryEvaluation+0xa08>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 817c 	bne.w	8003d58 <TrajectoryEvaluation+0xcb0>
			theta_ref = theta_0 - theta_ref;
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <TrajectoryEvaluation+0xa0c>)
 8003a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <TrajectoryEvaluation+0x9fc>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fbb8 	bl	80001e0 <__aeabi_dsub>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <TrajectoryEvaluation+0x9fc>)
 8003a76:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 8003a7a:	e16d      	b.n	8003d58 <TrajectoryEvaluation+0xcb0>
 8003a7c:	f3af 8000 	nop.w
 8003a80:	00000000 	.word	0x00000000
 8003a84:	40000000 	.word	0x40000000
 8003a88:	200005ac 	.word	0x200005ac
 8003a8c:	20000598 	.word	0x20000598
 8003a90:	200005b0 	.word	0x200005b0
 8003a94:	20000608 	.word	0x20000608
 8003a98:	200005f0 	.word	0x200005f0
 8003a9c:	20000070 	.word	0x20000070
 8003aa0:	3fe00000 	.word	0x3fe00000
 8003aa4:	20000620 	.word	0x20000620
 8003aa8:	20000628 	.word	0x20000628
 8003aac:	20000630 	.word	0x20000630
 8003ab0:	200000d9 	.word	0x200000d9
 8003ab4:	200005c8 	.word	0x200005c8
		}
	}
	else if (t6 <= t && t < t7 ){
 8003ab8:	4baf      	ldr	r3, [pc, #700]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003aba:	ed93 7a00 	vldr	s14, [r3]
 8003abe:	4baf      	ldr	r3, [pc, #700]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	f200 8119 	bhi.w	8003d02 <TrajectoryEvaluation+0xc5a>
 8003ad0:	4baa      	ldr	r3, [pc, #680]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4baa      	ldr	r3, [pc, #680]	; (8003d80 <TrajectoryEvaluation+0xcd8>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	f140 810d 	bpl.w	8003d02 <TrajectoryEvaluation+0xc5a>
		theta_ref = p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8003ae8:	4ba6      	ldr	r3, [pc, #664]	; (8003d84 <TrajectoryEvaluation+0xcdc>)
 8003aea:	ed93 7a05 	vldr	s14, [r3, #20]
 8003aee:	4ba6      	ldr	r3, [pc, #664]	; (8003d88 <TrajectoryEvaluation+0xce0>)
 8003af0:	edd3 6a05 	vldr	s13, [r3, #20]
 8003af4:	4ba1      	ldr	r3, [pc, #644]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003af6:	ed93 6a00 	vldr	s12, [r3]
 8003afa:	4b9f      	ldr	r3, [pc, #636]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	ee17 0a90 	vmov	r0, s15
 8003b10:	f7fc fcc6 	bl	80004a0 <__aeabi_f2d>
 8003b14:	4604      	mov	r4, r0
 8003b16:	460d      	mov	r5, r1
 8003b18:	4b9c      	ldr	r3, [pc, #624]	; (8003d8c <TrajectoryEvaluation+0xce4>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fcbf 	bl	80004a0 <__aeabi_f2d>
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	4b9a      	ldr	r3, [pc, #616]	; (8003d90 <TrajectoryEvaluation+0xce8>)
 8003b28:	f7fc fd12 	bl	8000550 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4690      	mov	r8, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	4b91      	ldr	r3, [pc, #580]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b44:	ee17 0a90 	vmov	r0, s15
 8003b48:	f7fc fcaa 	bl	80004a0 <__aeabi_f2d>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8003d68 <TrajectoryEvaluation+0xcc0>
 8003b54:	ec43 2b10 	vmov	d0, r2, r3
 8003b58:	f008 f916 	bl	800bd88 <pow>
 8003b5c:	ec53 2b10 	vmov	r2, r3, d0
 8003b60:	4640      	mov	r0, r8
 8003b62:	4649      	mov	r1, r9
 8003b64:	f7fc fcf4 	bl	8000550 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fb38 	bl	80001e4 <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003b7e:	ed93 7a00 	vldr	s14, [r3]
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	ee17 0a90 	vmov	r0, s15
 8003b90:	f7fc fc86 	bl	80004a0 <__aeabi_f2d>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8003d70 <TrajectoryEvaluation+0xcc8>
 8003b9c:	ec43 2b10 	vmov	d0, r2, r3
 8003ba0:	f008 f8f2 	bl	800bd88 <pow>
 8003ba4:	ec51 0b10 	vmov	r0, r1, d0
 8003ba8:	4b7a      	ldr	r3, [pc, #488]	; (8003d94 <TrajectoryEvaluation+0xcec>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fccf 	bl	8000550 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <TrajectoryEvaluation+0xcf0>)
 8003bc0:	f7fc fdf0 	bl	80007a4 <__aeabi_ddiv>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fb0a 	bl	80001e4 <__adddf3>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4971      	ldr	r1, [pc, #452]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003bd6:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003bda:	4b6b      	ldr	r3, [pc, #428]	; (8003d88 <TrajectoryEvaluation+0xce0>)
 8003bdc:	ed93 7a05 	vldr	s14, [r3, #20]
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <TrajectoryEvaluation+0xce4>)
 8003be2:	edd3 6a05 	vldr	s13, [r3, #20]
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003be8:	ed93 6a00 	vldr	s12, [r3]
 8003bec:	4b62      	ldr	r3, [pc, #392]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfe:	ee17 0a90 	vmov	r0, s15
 8003c02:	f7fc fc4d 	bl	80004a0 <__aeabi_f2d>
 8003c06:	4604      	mov	r4, r0
 8003c08:	460d      	mov	r5, r1
 8003c0a:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <TrajectoryEvaluation+0xcec>)
 8003c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <TrajectoryEvaluation+0xce8>)
 8003c16:	f7fc fc9b 	bl	8000550 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4690      	mov	r8, r2
 8003c20:	4699      	mov	r9, r3
 8003c22:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c32:	ee17 0a90 	vmov	r0, s15
 8003c36:	f7fc fc33 	bl	80004a0 <__aeabi_f2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8003d68 <TrajectoryEvaluation+0xcc0>
 8003c42:	ec43 2b10 	vmov	d0, r2, r3
 8003c46:	f008 f89f 	bl	800bd88 <pow>
 8003c4a:	ec53 2b10 	vmov	r2, r3, d0
 8003c4e:	4640      	mov	r0, r8
 8003c50:	4649      	mov	r1, r9
 8003c52:	f7fc fc7d 	bl	8000550 <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc fac1 	bl	80001e4 <__adddf3>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	494e      	ldr	r1, [pc, #312]	; (8003da0 <TrajectoryEvaluation+0xcf8>)
 8003c68:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003c6c:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <TrajectoryEvaluation+0xce4>)
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fc15 	bl	80004a0 <__aeabi_f2d>
 8003c76:	4604      	mov	r4, r0
 8003c78:	460d      	mov	r5, r1
 8003c7a:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003c7c:	ed93 7a00 	vldr	s14, [r3]
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <TrajectoryEvaluation+0xcd0>)
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8a:	ee17 0a90 	vmov	r0, s15
 8003c8e:	f7fc fc07 	bl	80004a0 <__aeabi_f2d>
 8003c92:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <TrajectoryEvaluation+0xcec>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fc5a 	bl	8000550 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	f7fc fa9e 	bl	80001e4 <__adddf3>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fc ff1e 	bl	8000af0 <__aeabi_d2f>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a3b      	ldr	r2, [pc, #236]	; (8003da4 <TrajectoryEvaluation+0xcfc>)
 8003cb8:	6013      	str	r3, [r2, #0]
		if(dir==1){
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <TrajectoryEvaluation+0xd00>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10d      	bne.n	8003cde <TrajectoryEvaluation+0xc36>
			theta_ref = theta_ref + theta_0;
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cc8:	4b38      	ldr	r3, [pc, #224]	; (8003dac <TrajectoryEvaluation+0xd04>)
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f7fc fa89 	bl	80001e4 <__adddf3>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4931      	ldr	r1, [pc, #196]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 8003cdc:	e03e      	b.n	8003d5c <TrajectoryEvaluation+0xcb4>
		}
		else if(dir==0){
 8003cde:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <TrajectoryEvaluation+0xd00>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d13a      	bne.n	8003d5c <TrajectoryEvaluation+0xcb4>
			theta_ref = theta_0 - theta_ref;
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <TrajectoryEvaluation+0xd04>)
 8003ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f7fc fa75 	bl	80001e0 <__aeabi_dsub>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4928      	ldr	r1, [pc, #160]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003cfc:	e9c1 2300 	strd	r2, r3, [r1]
		if(dir==1){
 8003d00:	e02c      	b.n	8003d5c <TrajectoryEvaluation+0xcb4>
		}
	}
	else if (t7 <= t ){
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <TrajectoryEvaluation+0xcd8>)
 8003d04:	ed93 7a00 	vldr	s14, [r3]
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d900      	bls.n	8003d1a <TrajectoryEvaluation+0xc72>
		theta_ref = theta_f;
		omega_ref = omega_ref;
		alpha_ref = alpha_ref;
		t = 0;
	}
}
 8003d18:	e021      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		theta_ref = theta_f;
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <TrajectoryEvaluation+0xd08>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	491e      	ldr	r1, [pc, #120]	; (8003d9c <TrajectoryEvaluation+0xcf4>)
 8003d22:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <TrajectoryEvaluation+0xcf8>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	491c      	ldr	r1, [pc, #112]	; (8003da0 <TrajectoryEvaluation+0xcf8>)
 8003d2e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <TrajectoryEvaluation+0xcfc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <TrajectoryEvaluation+0xcfc>)
 8003d38:	6013      	str	r3, [r2, #0]
		t = 0;
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <TrajectoryEvaluation+0xcd4>)
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	e00c      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d44:	bf00      	nop
 8003d46:	e00a      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d48:	bf00      	nop
 8003d4a:	e008      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d4c:	bf00      	nop
 8003d4e:	e006      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d50:	bf00      	nop
 8003d52:	e004      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <TrajectoryEvaluation+0xcb6>
		if(dir==1){
 8003d5c:	bf00      	nop
}
 8003d5e:	bf00      	nop
 8003d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d64:	f3af 8000 	nop.w
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	40000000 	.word	0x40000000
 8003d70:	00000000 	.word	0x00000000
 8003d74:	40080000 	.word	0x40080000
 8003d78:	200005b0 	.word	0x200005b0
 8003d7c:	20000598 	.word	0x20000598
 8003d80:	200005b4 	.word	0x200005b4
 8003d84:	20000608 	.word	0x20000608
 8003d88:	200005f0 	.word	0x200005f0
 8003d8c:	200005d8 	.word	0x200005d8
 8003d90:	3fe00000 	.word	0x3fe00000
 8003d94:	20000078 	.word	0x20000078
 8003d98:	40180000 	.word	0x40180000
 8003d9c:	20000620 	.word	0x20000620
 8003da0:	20000628 	.word	0x20000628
 8003da4:	20000630 	.word	0x20000630
 8003da8:	200000d9 	.word	0x200000d9
 8003dac:	200005c8 	.word	0x200005c8
 8003db0:	20000080 	.word	0x20000080

08003db4 <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dbe:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003dc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dc6:	edd7 7a00 	vldr	s15, [r7]
 8003dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <PositionController+0x9c>)
 8003dd0:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <PositionController+0xa0>)
 8003dd6:	ed93 7a00 	vldr	s14, [r3]
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <PositionController+0x9c>)
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <PositionController+0xa0>)
 8003de6:	edc3 7a00 	vstr	s15, [r3]
	u1 = kp_1*e1 + ki_1*s1 + kd_1*(e1-p1);
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <PositionController+0xa4>)
 8003dec:	ed93 7a00 	vldr	s14, [r3]
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <PositionController+0x9c>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <PositionController+0xa8>)
 8003dfc:	edd3 6a00 	vldr	s13, [r3]
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <PositionController+0xa0>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <PositionController+0x9c>)
 8003e10:	edd3 6a00 	vldr	s13, [r3]
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <PositionController+0xac>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <PositionController+0xb0>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <PositionController+0xb4>)
 8003e2e:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <PositionController+0x9c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <PositionController+0xac>)
 8003e38:	6013      	str	r3, [r2, #0]
	return u1;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <PositionController+0xb4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	ee07 3a90 	vmov	s15, r3
}
 8003e42:	eeb0 0a67 	vmov.f32	s0, s15
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000634 	.word	0x20000634
 8003e54:	20000638 	.word	0x20000638
 8003e58:	20000088 	.word	0x20000088
 8003e5c:	2000008c 	.word	0x2000008c
 8003e60:	2000063c 	.word	0x2000063c
 8003e64:	20000650 	.word	0x20000650
 8003e68:	20000640 	.word	0x20000640

08003e6c <VelocityController>:

float VelocityController(float r,float y,float uP)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e76:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e7a:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 8003e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <VelocityController+0xb8>)
 8003e8c:	edc3 7a00 	vstr	s15, [r3]
	if(e2 >= w_max){
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <VelocityController+0xb8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fb03 	bl	80004a0 <__aeabi_f2d>
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <VelocityController+0xbc>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc fddc 	bl	8000a5c <__aeabi_dcmpge>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <VelocityController+0x52>
		e2 = w_max;
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <VelocityController+0xbc>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7fc fe1c 	bl	8000af0 <__aeabi_d2f>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <VelocityController+0xb8>)
 8003ebc:	6013      	str	r3, [r2, #0]
	}
	e2 = e2 - y;
 8003ebe:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <VelocityController+0xb8>)
 8003ec0:	ed93 7a00 	vldr	s14, [r3]
 8003ec4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <VelocityController+0xb8>)
 8003ece:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 8003ed2:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <VelocityController+0xc0>)
 8003ed4:	ed93 7a00 	vldr	s14, [r3]
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <VelocityController+0xb8>)
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <VelocityController+0xc0>)
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
	u2 = kp_2*e2 + ki_2*s2;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <VelocityController+0xc4>)
 8003eea:	ed93 7a00 	vldr	s14, [r3]
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <VelocityController+0xb8>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <VelocityController+0xc8>)
 8003efa:	edd3 6a00 	vldr	s13, [r3]
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <VelocityController+0xc0>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <VelocityController+0xcc>)
 8003f0e:	edc3 7a00 	vstr	s15, [r3]
	return u2;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <VelocityController+0xcc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	ee07 3a90 	vmov	s15, r3
}
 8003f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000644 	.word	0x20000644
 8003f28:	20000068 	.word	0x20000068
 8003f2c:	20000648 	.word	0x20000648
 8003f30:	20000090 	.word	0x20000090
 8003f34:	20000094 	.word	0x20000094
 8003f38:	2000064c 	.word	0x2000064c

08003f3c <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f46:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f4a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f4e:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	float add = 2;
 8003f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f56:	617b      	str	r3, [r7, #20]
	u = PositionController(Pd, P);
 8003f58:	edd7 0a02 	vldr	s1, [r7, #8]
 8003f5c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f60:	f7ff ff28 	bl	8003db4 <PositionController>
 8003f64:	eef0 7a40 	vmov.f32	s15, s0
 8003f68:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <Cascade+0xd8>)
 8003f6a:	edc3 7a00 	vstr	s15, [r3]
	u = VelocityController(Vd, V, u);
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <Cascade+0xd8>)
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	eeb0 1a67 	vmov.f32	s2, s15
 8003f78:	edd7 0a00 	vldr	s1, [r7]
 8003f7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f80:	f7ff ff74 	bl	8003e6c <VelocityController>
 8003f84:	eef0 7a40 	vmov.f32	s15, s0
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <Cascade+0xd8>)
 8003f8a:	edc3 7a00 	vstr	s15, [r3]
//	PID_dir = 1;
	if(u > 24){
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <Cascade+0xd8>)
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa0:	dd06      	ble.n	8003fb0 <Cascade+0x74>
		u = 24;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <Cascade+0xd8>)
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <Cascade+0xdc>)
 8003fa6:	601a      	str	r2, [r3, #0]
		PID_dir =1;
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <Cascade+0xe0>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e016      	b.n	8003fde <Cascade+0xa2>
	}
	else if (u < 0){
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <Cascade+0xd8>)
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	d50b      	bpl.n	8003fd8 <Cascade+0x9c>
		u = -(u);
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <Cascade+0xd8>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	eef1 7a67 	vneg.f32	s15, s15
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <Cascade+0xd8>)
 8003fcc:	edc3 7a00 	vstr	s15, [r3]
		PID_dir = 0;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <Cascade+0xe0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <Cascade+0xa2>
	}
	else{
		PID_dir = 1;
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <Cascade+0xe0>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
	}

	if(t >= t5)
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <Cascade+0xe4>)
 8003fe0:	ed93 7a00 	vldr	s14, [r3]
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <Cascade+0xe8>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	db02      	blt.n	8003ffa <Cascade+0xbe>
	{
		add = 0;
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
	}

	return u+add;
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <Cascade+0xd8>)
 8003ffc:	ed93 7a00 	vldr	s14, [r3]
 8004000:	edd7 7a05 	vldr	s15, [r7, #20]
 8004004:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004008:	eeb0 0a67 	vmov.f32	s0, s15
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200006a4 	.word	0x200006a4
 8004018:	41c00000 	.word	0x41c00000
 800401c:	200000da 	.word	0x200000da
 8004020:	20000598 	.word	0x20000598
 8004024:	200005ac 	.word	0x200005ac

08004028 <UART>:
			break;
		}
	}
}

void UART(){
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b096      	sub	sp, #88	; 0x58
 800402e:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t Check9=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8004030:	4baf      	ldr	r3, [pc, #700]	; (80042f0 <UART+0x2c8>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 84fe 	beq.w	8004a36 <UART+0xa0e>
 800403a:	2b00      	cmp	r3, #0
 800403c:	f2c0 8526 	blt.w	8004a8c <UART+0xa64>
 8004040:	2b9e      	cmp	r3, #158	; 0x9e
 8004042:	f300 8523 	bgt.w	8004a8c <UART+0xa64>
 8004046:	2b58      	cmp	r3, #88	; 0x58
 8004048:	f2c0 8520 	blt.w	8004a8c <UART+0xa64>
 800404c:	3b58      	subs	r3, #88	; 0x58
 800404e:	2b46      	cmp	r3, #70	; 0x46
 8004050:	f200 851c 	bhi.w	8004a8c <UART+0xa64>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART+0x34>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004a43 	.word	0x08004a43
 8004060:	08004a8d 	.word	0x08004a8d
 8004064:	08004a8d 	.word	0x08004a8d
 8004068:	08004a8d 	.word	0x08004a8d
 800406c:	08004a8d 	.word	0x08004a8d
 8004070:	08004a8d 	.word	0x08004a8d
 8004074:	08004a8d 	.word	0x08004a8d
 8004078:	08004a8d 	.word	0x08004a8d
 800407c:	08004a8d 	.word	0x08004a8d
 8004080:	08004a8d 	.word	0x08004a8d
 8004084:	08004a8d 	.word	0x08004a8d
 8004088:	08004a8d 	.word	0x08004a8d
 800408c:	08004a8d 	.word	0x08004a8d
 8004090:	08004a8d 	.word	0x08004a8d
 8004094:	08004a8d 	.word	0x08004a8d
 8004098:	08004a8d 	.word	0x08004a8d
 800409c:	08004a8d 	.word	0x08004a8d
 80040a0:	08004a8d 	.word	0x08004a8d
 80040a4:	08004a8d 	.word	0x08004a8d
 80040a8:	08004a8d 	.word	0x08004a8d
 80040ac:	08004a8d 	.word	0x08004a8d
 80040b0:	08004a8d 	.word	0x08004a8d
 80040b4:	08004a8d 	.word	0x08004a8d
 80040b8:	08004a8d 	.word	0x08004a8d
 80040bc:	08004a8d 	.word	0x08004a8d
 80040c0:	08004a8d 	.word	0x08004a8d
 80040c4:	08004a8d 	.word	0x08004a8d
 80040c8:	08004a8d 	.word	0x08004a8d
 80040cc:	08004a8d 	.word	0x08004a8d
 80040d0:	08004a8d 	.word	0x08004a8d
 80040d4:	08004a8d 	.word	0x08004a8d
 80040d8:	08004a8d 	.word	0x08004a8d
 80040dc:	08004a8d 	.word	0x08004a8d
 80040e0:	08004a8d 	.word	0x08004a8d
 80040e4:	08004a8d 	.word	0x08004a8d
 80040e8:	08004a8d 	.word	0x08004a8d
 80040ec:	08004a8d 	.word	0x08004a8d
 80040f0:	08004a8d 	.word	0x08004a8d
 80040f4:	08004a8d 	.word	0x08004a8d
 80040f8:	08004a8d 	.word	0x08004a8d
 80040fc:	08004a8d 	.word	0x08004a8d
 8004100:	08004a8d 	.word	0x08004a8d
 8004104:	08004a8d 	.word	0x08004a8d
 8004108:	08004a8d 	.word	0x08004a8d
 800410c:	08004a8d 	.word	0x08004a8d
 8004110:	08004a8d 	.word	0x08004a8d
 8004114:	08004a8d 	.word	0x08004a8d
 8004118:	08004a8d 	.word	0x08004a8d
 800411c:	08004a8d 	.word	0x08004a8d
 8004120:	08004a8d 	.word	0x08004a8d
 8004124:	08004a8d 	.word	0x08004a8d
 8004128:	08004a8d 	.word	0x08004a8d
 800412c:	08004a8d 	.word	0x08004a8d
 8004130:	08004a8d 	.word	0x08004a8d
 8004134:	08004a8d 	.word	0x08004a8d
 8004138:	08004a8d 	.word	0x08004a8d
 800413c:	08004a8d 	.word	0x08004a8d
 8004140:	08004a9b 	.word	0x08004a9b
 8004144:	08004179 	.word	0x08004179
 8004148:	0800419d 	.word	0x0800419d
 800414c:	080041c1 	.word	0x080041c1
 8004150:	08004251 	.word	0x08004251
 8004154:	08004315 	.word	0x08004315
 8004158:	080043a9 	.word	0x080043a9
 800415c:	0800446d 	.word	0x0800446d
 8004160:	08004495 	.word	0x08004495
 8004164:	0800466d 	.word	0x0800466d
 8004168:	08004835 	.word	0x08004835
 800416c:	080049bf 	.word	0x080049bf
 8004170:	080049e5 	.word	0x080049e5
 8004174:	08004a0b 	.word	0x08004a0b
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 8004178:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <UART+0x2c8>)
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b6d      	cmp	r3, #109	; 0x6d
 800417e:	f040 848e 	bne.w	8004a9e <UART+0xa76>
			//connect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004182:	2202      	movs	r2, #2
 8004184:	495b      	ldr	r1, [pc, #364]	; (80042f4 <UART+0x2cc>)
 8004186:	485c      	ldr	r0, [pc, #368]	; (80042f8 <UART+0x2d0>)
 8004188:	f006 f952 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <UART+0x2c8>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004192:	4859      	ldr	r0, [pc, #356]	; (80042f8 <UART+0x2d0>)
 8004194:	f006 f9fa 	bl	800a58c <HAL_UART_DMAStop>

		}
		break;
 8004198:	f000 bc81 	b.w	8004a9e <UART+0xa76>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 800419c:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <UART+0x2c8>)
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b6c      	cmp	r3, #108	; 0x6c
 80041a2:	f040 847e 	bne.w	8004aa2 <UART+0xa7a>
			//disconnect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80041a6:	2202      	movs	r2, #2
 80041a8:	4952      	ldr	r1, [pc, #328]	; (80042f4 <UART+0x2cc>)
 80041aa:	4853      	ldr	r0, [pc, #332]	; (80042f8 <UART+0x2d0>)
 80041ac:	f006 f940 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <UART+0x2c8>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80041b6:	4850      	ldr	r0, [pc, #320]	; (80042f8 <UART+0x2d0>)
 80041b8:	f006 f9e8 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 80041bc:	f000 bc71 	b.w	8004aa2 <UART+0xa7a>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <UART+0x2c8>)
 80041c2:	785a      	ldrb	r2, [r3, #1]
 80041c4:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <UART+0x2d4>)
 80041c6:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <UART+0x2c8>)
 80041ca:	789a      	ldrb	r2, [r3, #2]
 80041cc:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <UART+0x2d8>)
 80041ce:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80041d0:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <UART+0x2d4>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b49      	ldr	r3, [pc, #292]	; (8004300 <UART+0x2d8>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b47      	ldr	r3, [pc, #284]	; (8004304 <UART+0x2dc>)
 80041e6:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 80041e8:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <UART+0x2c8>)
 80041ea:	78da      	ldrb	r2, [r3, #3]
 80041ec:	4b43      	ldr	r3, [pc, #268]	; (80042fc <UART+0x2d4>)
 80041ee:	7819      	ldrb	r1, [r3, #0]
 80041f0:	4b43      	ldr	r3, [pc, #268]	; (8004300 <UART+0x2d8>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	440b      	add	r3, r1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3b6c      	subs	r3, #108	; 0x6c
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	429a      	cmp	r2, r3
 8004202:	f040 8450 	bne.w	8004aa6 <UART+0xa7e>
			//Set Angular Velocity
			w_max = DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 8004206:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <UART+0x2dc>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f936 	bl	800047c <__aeabi_i2d>
 8004210:	a331      	add	r3, pc, #196	; (adr r3, 80042d8 <UART+0x2b0>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc f99b 	bl	8000550 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	a32f      	add	r3, pc, #188	; (adr r3, 80042e0 <UART+0x2b8>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fc f992 	bl	8000550 <__aeabi_dmul>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4935      	ldr	r1, [pc, #212]	; (8004308 <UART+0x2e0>)
 8004232:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004236:	2202      	movs	r2, #2
 8004238:	492e      	ldr	r1, [pc, #184]	; (80042f4 <UART+0x2cc>)
 800423a:	482f      	ldr	r0, [pc, #188]	; (80042f8 <UART+0x2d0>)
 800423c:	f006 f8f8 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <UART+0x2c8>)
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004246:	482c      	ldr	r0, [pc, #176]	; (80042f8 <UART+0x2d0>)
 8004248:	f006 f9a0 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 800424c:	f000 bc2b 	b.w	8004aa6 <UART+0xa7e>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <UART+0x2c8>)
 8004252:	785a      	ldrb	r2, [r3, #1]
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <UART+0x2d4>)
 8004256:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <UART+0x2c8>)
 800425a:	789a      	ldrb	r2, [r3, #2]
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <UART+0x2d8>)
 800425e:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004260:	4b26      	ldr	r3, [pc, #152]	; (80042fc <UART+0x2d4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <UART+0x2d8>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	4413      	add	r3, r2
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b23      	ldr	r3, [pc, #140]	; (8004304 <UART+0x2dc>)
 8004276:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <UART+0x2c8>)
 800427a:	78da      	ldrb	r2, [r3, #3]
 800427c:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <UART+0x2d4>)
 800427e:	7819      	ldrb	r1, [r3, #0]
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <UART+0x2d8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	440b      	add	r3, r1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	3b6b      	subs	r3, #107	; 0x6b
 800428a:	b2db      	uxtb	r3, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	429a      	cmp	r2, r3
 8004292:	f040 840a 	bne.w	8004aaa <UART+0xa82>
			//Set Angular Position
			theta_f = DataByte/10000.0;
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <UART+0x2dc>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f8ee 	bl	800047c <__aeabi_i2d>
 80042a0:	a311      	add	r3, pc, #68	; (adr r3, 80042e8 <UART+0x2c0>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fc fa7d 	bl	80007a4 <__aeabi_ddiv>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4917      	ldr	r1, [pc, #92]	; (800430c <UART+0x2e4>)
 80042b0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80042b4:	2202      	movs	r2, #2
 80042b6:	490f      	ldr	r1, [pc, #60]	; (80042f4 <UART+0x2cc>)
 80042b8:	480f      	ldr	r0, [pc, #60]	; (80042f8 <UART+0x2d0>)
 80042ba:	f006 f8b9 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <UART+0x2c8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
			ModeN =0;
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <UART+0x2e8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80042ca:	480b      	ldr	r0, [pc, #44]	; (80042f8 <UART+0x2d0>)
 80042cc:	f006 f95e 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 80042d0:	e3eb      	b.n	8004aaa <UART+0xa82>
 80042d2:	bf00      	nop
 80042d4:	f3af 8000 	nop.w
 80042d8:	14141414 	.word	0x14141414
 80042dc:	3fa41414 	.word	0x3fa41414
 80042e0:	f37bebd5 	.word	0xf37bebd5
 80042e4:	3fbacee9 	.word	0x3fbacee9
 80042e8:	00000000 	.word	0x00000000
 80042ec:	40c38800 	.word	0x40c38800
 80042f0:	20000654 	.word	0x20000654
 80042f4:	200000a8 	.word	0x200000a8
 80042f8:	200002e0 	.word	0x200002e0
 80042fc:	200006a8 	.word	0x200006a8
 8004300:	200006a9 	.word	0x200006a9
 8004304:	200006aa 	.word	0x200006aa
 8004308:	20000068 	.word	0x20000068
 800430c:	20000080 	.word	0x20000080
 8004310:	20000670 	.word	0x20000670
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 8004314:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <UART+0x520>)
 8004316:	785a      	ldrb	r2, [r3, #1]
 8004318:	4b8c      	ldr	r3, [pc, #560]	; (800454c <UART+0x524>)
 800431a:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 800431c:	4b8a      	ldr	r3, [pc, #552]	; (8004548 <UART+0x520>)
 800431e:	789a      	ldrb	r2, [r3, #2]
 8004320:	4b8b      	ldr	r3, [pc, #556]	; (8004550 <UART+0x528>)
 8004322:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004324:	4b89      	ldr	r3, [pc, #548]	; (800454c <UART+0x524>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	b29a      	uxth	r2, r3
 800432e:	4b88      	ldr	r3, [pc, #544]	; (8004550 <UART+0x528>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	4413      	add	r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	4b86      	ldr	r3, [pc, #536]	; (8004554 <UART+0x52c>)
 800433a:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 800433c:	4b82      	ldr	r3, [pc, #520]	; (8004548 <UART+0x520>)
 800433e:	78da      	ldrb	r2, [r3, #3]
 8004340:	4b82      	ldr	r3, [pc, #520]	; (800454c <UART+0x524>)
 8004342:	7819      	ldrb	r1, [r3, #0]
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <UART+0x528>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	440b      	add	r3, r1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3b6a      	subs	r3, #106	; 0x6a
 800434e:	b2db      	uxtb	r3, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 83aa 	bne.w	8004aae <UART+0xa86>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 800435a:	4b7d      	ldr	r3, [pc, #500]	; (8004550 <UART+0x528>)
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	4b7e      	ldr	r3, [pc, #504]	; (8004558 <UART+0x530>)
 8004360:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 8004362:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <UART+0x530>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a7c      	ldr	r2, [pc, #496]	; (800455c <UART+0x534>)
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f895 	bl	80004a0 <__aeabi_f2d>
 8004376:	a372      	add	r3, pc, #456	; (adr r3, 8004540 <UART+0x518>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fc f8e8 	bl	8000550 <__aeabi_dmul>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4976      	ldr	r1, [pc, #472]	; (8004560 <UART+0x538>)
 8004386:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <UART+0x53c>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004390:	2202      	movs	r2, #2
 8004392:	4975      	ldr	r1, [pc, #468]	; (8004568 <UART+0x540>)
 8004394:	4875      	ldr	r0, [pc, #468]	; (800456c <UART+0x544>)
 8004396:	f006 f84b 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800439a:	4b6b      	ldr	r3, [pc, #428]	; (8004548 <UART+0x520>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80043a0:	4872      	ldr	r0, [pc, #456]	; (800456c <UART+0x544>)
 80043a2:	f006 f8f3 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 80043a6:	e382      	b.n	8004aae <UART+0xa86>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 80043a8:	4b67      	ldr	r3, [pc, #412]	; (8004548 <UART+0x520>)
 80043aa:	785a      	ldrb	r2, [r3, #1]
 80043ac:	4b70      	ldr	r3, [pc, #448]	; (8004570 <UART+0x548>)
 80043ae:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t k=2;
 80043b6:	2302      	movs	r3, #2
 80043b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 80043bc:	2300      	movs	r3, #0
 80043be:	653b      	str	r3, [r7, #80]	; 0x50
 80043c0:	e01d      	b.n	80043fe <UART+0x3d6>
			index_station[j] = RxData[k]%16;
 80043c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80043c6:	4a60      	ldr	r2, [pc, #384]	; (8004548 <UART+0x520>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2d9      	uxtb	r1, r3
 80043d0:	4a61      	ldr	r2, [pc, #388]	; (8004558 <UART+0x530>)
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	4413      	add	r3, r2
 80043d6:	460a      	mov	r2, r1
 80043d8:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 80043da:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80043de:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <UART+0x520>)
 80043e0:	5cd2      	ldrb	r2, [r2, r3]
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	3301      	adds	r3, #1
 80043e6:	0912      	lsrs	r2, r2, #4
 80043e8:	b2d1      	uxtb	r1, r2
 80043ea:	4a5b      	ldr	r2, [pc, #364]	; (8004558 <UART+0x530>)
 80043ec:	54d1      	strb	r1, [r2, r3]
			k+=1;
 80043ee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80043f2:	3301      	adds	r3, #1
 80043f4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 80043f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fa:	3302      	adds	r3, #2
 80043fc:	653b      	str	r3, [r7, #80]	; 0x50
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <UART+0x548>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004406:	4293      	cmp	r3, r2
 8004408:	dbdb      	blt.n	80043c2 <UART+0x39a>
		}
		for(int f = 0; f<k;f++){
 800440a:	2300      	movs	r3, #0
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440e:	e00b      	b.n	8004428 <UART+0x400>
			Check += RxData[f];
 8004410:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <UART+0x520>)
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	4413      	add	r3, r2
 8004416:	781a      	ldrb	r2, [r3, #0]
 8004418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800441c:	4413      	add	r3, r2
 800441e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for(int f = 0; f<k;f++){
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	3301      	adds	r3, #1
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	429a      	cmp	r2, r3
 8004430:	dbee      	blt.n	8004410 <UART+0x3e8>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 8004432:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004436:	4a44      	ldr	r2, [pc, #272]	; (8004548 <UART+0x520>)
 8004438:	5cd2      	ldrb	r2, [r2, r3]
 800443a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800443e:	43db      	mvns	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	429a      	cmp	r2, r3
 8004444:	f040 8335 	bne.w	8004ab2 <UART+0xa8a>

			ModeN=1;
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <UART+0x53c>)
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
			n_station=0;
 800444e:	4b49      	ldr	r3, [pc, #292]	; (8004574 <UART+0x54c>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004454:	2202      	movs	r2, #2
 8004456:	4944      	ldr	r1, [pc, #272]	; (8004568 <UART+0x540>)
 8004458:	4844      	ldr	r0, [pc, #272]	; (800456c <UART+0x544>)
 800445a:	f005 ffe9 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800445e:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <UART+0x520>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004464:	4841      	ldr	r0, [pc, #260]	; (800456c <UART+0x544>)
 8004466:	f006 f891 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 800446a:	e322      	b.n	8004ab2 <UART+0xa8a>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 800446c:	4b36      	ldr	r3, [pc, #216]	; (8004548 <UART+0x520>)
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b67      	cmp	r3, #103	; 0x67
 8004472:	f040 8320 	bne.w	8004ab6 <UART+0xa8e>
			//Go to Station / Goal Position
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004476:	2202      	movs	r2, #2
 8004478:	493b      	ldr	r1, [pc, #236]	; (8004568 <UART+0x540>)
 800447a:	483c      	ldr	r0, [pc, #240]	; (800456c <UART+0x544>)
 800447c:	f005 ffd8 	bl	800a430 <HAL_UART_Transmit_DMA>
//					theta_f = station[index_station[0]-1]*(M_PI/180.0);
//					theta = 0;
//					GenFlag =1;
//					break;
//			}
			state = Run;
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <UART+0x550>)
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <UART+0x520>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800448c:	4837      	ldr	r0, [pc, #220]	; (800456c <UART+0x544>)
 800448e:	f006 f87d 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 8004492:	e310      	b.n	8004ab6 <UART+0xa8e>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <UART+0x520>)
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b66      	cmp	r3, #102	; 0x66
 800449a:	f040 830e 	bne.w	8004aba <UART+0xa92>
			//Request Current Station

			if(Finish){
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <UART+0x554>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d074      	beq.n	8004590 <UART+0x568>
				if(Check9){
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <UART+0x558>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01e      	beq.n	80044ec <UART+0x4c4>
					TxData2[4]=TxData[2];
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <UART+0x55c>)
 80044b0:	789a      	ldrb	r2, [r3, #2]
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <UART+0x560>)
 80044b4:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <UART+0x55c>)
 80044b8:	78da      	ldrb	r2, [r3, #3]
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <UART+0x560>)
 80044bc:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <UART+0x55c>)
 80044c0:	791a      	ldrb	r2, [r3, #4]
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <UART+0x560>)
 80044c4:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <UART+0x55c>)
 80044c8:	795a      	ldrb	r2, [r3, #5]
 80044ca:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <UART+0x560>)
 80044cc:	71da      	strb	r2, [r3, #7]
					Check9 =0;
 80044ce:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <UART+0x558>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 80044d4:	2208      	movs	r2, #8
 80044d6:	492c      	ldr	r1, [pc, #176]	; (8004588 <UART+0x560>)
 80044d8:	4824      	ldr	r0, [pc, #144]	; (800456c <UART+0x544>)
 80044da:	f005 ffa9 	bl	800a430 <HAL_UART_Transmit_DMA>
					Timestamp_UI=micros();
 80044de:	f7fd fb1b 	bl	8001b18 <micros>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <UART+0x564>)
 80044e8:	601a      	str	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
					Check9=1;
				}
			}
		}
		break;
 80044ea:	e2e6      	b.n	8004aba <UART+0xa92>
					if(micros() - Timestamp_UI > 150){
 80044ec:	f7fd fb14 	bl	8001b18 <micros>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4925      	ldr	r1, [pc, #148]	; (800458c <UART+0x564>)
 80044f6:	6809      	ldr	r1, [r1, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	6439      	str	r1, [r7, #64]	; 0x40
 80044fc:	6478      	str	r0, [r7, #68]	; 0x44
 80044fe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004502:	4621      	mov	r1, r4
 8004504:	1a51      	subs	r1, r2, r1
 8004506:	63b9      	str	r1, [r7, #56]	; 0x38
 8004508:	4629      	mov	r1, r5
 800450a:	eb63 0301 	sbc.w	r3, r3, r1
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004510:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004514:	460b      	mov	r3, r1
 8004516:	2b97      	cmp	r3, #151	; 0x97
 8004518:	4613      	mov	r3, r2
 800451a:	f173 0300 	sbcs.w	r3, r3, #0
 800451e:	f0c0 82cc 	bcc.w	8004aba <UART+0xa92>
						RxData[0] = 0;
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <UART+0x520>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
						Check9=1;
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <UART+0x558>)
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
						Finish =0;
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <UART+0x554>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
						HAL_UART_DMAStop(&huart2);
 8004534:	480d      	ldr	r0, [pc, #52]	; (800456c <UART+0x544>)
 8004536:	f006 f829 	bl	800a58c <HAL_UART_DMAStop>
		break;
 800453a:	e2be      	b.n	8004aba <UART+0xa92>
 800453c:	f3af 8000 	nop.w
 8004540:	a2529d39 	.word	0xa2529d39
 8004544:	3f91df46 	.word	0x3f91df46
 8004548:	20000654 	.word	0x20000654
 800454c:	200006a8 	.word	0x200006a8
 8004550:	200006a9 	.word	0x200006a9
 8004554:	200006aa 	.word	0x200006aa
 8004558:	20000674 	.word	0x20000674
 800455c:	200000ac 	.word	0x200000ac
 8004560:	20000080 	.word	0x20000080
 8004564:	20000670 	.word	0x20000670
 8004568:	200000a8 	.word	0x200000a8
 800456c:	200002e0 	.word	0x200002e0
 8004570:	200000d5 	.word	0x200000d5
 8004574:	200000d6 	.word	0x200000d6
 8004578:	200000d7 	.word	0x200000d7
 800457c:	20000671 	.word	0x20000671
 8004580:	200000db 	.word	0x200000db
 8004584:	20000098 	.word	0x20000098
 8004588:	200000a0 	.word	0x200000a0
 800458c:	200006ac 	.word	0x200006ac
			else if(Check9){
 8004590:	4b9d      	ldr	r3, [pc, #628]	; (8004808 <UART+0x7e0>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d044      	beq.n	8004622 <UART+0x5fa>
				TxData[2] = 0b10011001;
 8004598:	4b9c      	ldr	r3, [pc, #624]	; (800480c <UART+0x7e4>)
 800459a:	2299      	movs	r2, #153	; 0x99
 800459c:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 800459e:	4b9b      	ldr	r3, [pc, #620]	; (800480c <UART+0x7e4>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 80045a4:	4b9a      	ldr	r3, [pc, #616]	; (8004810 <UART+0x7e8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ff79 	bl	80004a0 <__aeabi_f2d>
 80045ae:	a392      	add	r3, pc, #584	; (adr r3, 80047f8 <UART+0x7d0>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f8f6 	bl	80007a4 <__aeabi_ddiv>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	ec43 2b17 	vmov	d7, r2, r3
 80045c0:	eeb0 0a47 	vmov.f32	s0, s14
 80045c4:	eef0 0a67 	vmov.f32	s1, s15
 80045c8:	f007 fb5a 	bl	800bc80 <ceil>
 80045cc:	ec53 2b10 	vmov	r2, r3, d0
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f7fc fa6c 	bl	8000ab0 <__aeabi_d2uiz>
 80045d8:	4603      	mov	r3, r0
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	4b8d      	ldr	r3, [pc, #564]	; (8004814 <UART+0x7ec>)
 80045de:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <UART+0x7ec>)
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	4b89      	ldr	r3, [pc, #548]	; (800480c <UART+0x7e4>)
 80045e6:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 80045e8:	4b88      	ldr	r3, [pc, #544]	; (800480c <UART+0x7e4>)
 80045ea:	789a      	ldrb	r2, [r3, #2]
 80045ec:	4b87      	ldr	r3, [pc, #540]	; (800480c <UART+0x7e4>)
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	4413      	add	r3, r2
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b85      	ldr	r3, [pc, #532]	; (800480c <UART+0x7e4>)
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b82      	ldr	r3, [pc, #520]	; (800480c <UART+0x7e4>)
 8004602:	715a      	strb	r2, [r3, #5]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004604:	2206      	movs	r2, #6
 8004606:	4981      	ldr	r1, [pc, #516]	; (800480c <UART+0x7e4>)
 8004608:	4883      	ldr	r0, [pc, #524]	; (8004818 <UART+0x7f0>)
 800460a:	f005 ff11 	bl	800a430 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 800460e:	f7fd fa83 	bl	8001b18 <micros>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <UART+0x7f4>)
 8004618:	601a      	str	r2, [r3, #0]
				Check9=0;
 800461a:	4b7b      	ldr	r3, [pc, #492]	; (8004808 <UART+0x7e0>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
		break;
 8004620:	e24b      	b.n	8004aba <UART+0xa92>
				if(micros() - Timestamp_UI > 150){
 8004622:	f7fd fa79 	bl	8001b18 <micros>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	497c      	ldr	r1, [pc, #496]	; (800481c <UART+0x7f4>)
 800462c:	6809      	ldr	r1, [r1, #0]
 800462e:	2000      	movs	r0, #0
 8004630:	6339      	str	r1, [r7, #48]	; 0x30
 8004632:	6378      	str	r0, [r7, #52]	; 0x34
 8004634:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004638:	4621      	mov	r1, r4
 800463a:	1a51      	subs	r1, r2, r1
 800463c:	62b9      	str	r1, [r7, #40]	; 0x28
 800463e:	4629      	mov	r1, r5
 8004640:	eb63 0301 	sbc.w	r3, r3, r1
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004646:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800464a:	460b      	mov	r3, r1
 800464c:	2b97      	cmp	r3, #151	; 0x97
 800464e:	4613      	mov	r3, r2
 8004650:	f173 0300 	sbcs.w	r3, r3, #0
 8004654:	f0c0 8231 	bcc.w	8004aba <UART+0xa92>
					RxData[0] = 0;
 8004658:	4b71      	ldr	r3, [pc, #452]	; (8004820 <UART+0x7f8>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 800465e:	486e      	ldr	r0, [pc, #440]	; (8004818 <UART+0x7f0>)
 8004660:	f005 ff94 	bl	800a58c <HAL_UART_DMAStop>
					Check9=1;
 8004664:	4b68      	ldr	r3, [pc, #416]	; (8004808 <UART+0x7e0>)
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
		break;
 800466a:	e226      	b.n	8004aba <UART+0xa92>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 800466c:	4b6c      	ldr	r3, [pc, #432]	; (8004820 <UART+0x7f8>)
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b65      	cmp	r3, #101	; 0x65
 8004672:	f040 8224 	bne.w	8004abe <UART+0xa96>
			//Request Angular Position
		if(Finish){
 8004676:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <UART+0x7fc>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d04a      	beq.n	8004714 <UART+0x6ec>

			if(Check9){
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <UART+0x7e0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01e      	beq.n	80046c4 <UART+0x69c>
				TxData2[4]=TxData[2];
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <UART+0x7e4>)
 8004688:	789a      	ldrb	r2, [r3, #2]
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <UART+0x800>)
 800468c:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <UART+0x7e4>)
 8004690:	78da      	ldrb	r2, [r3, #3]
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <UART+0x800>)
 8004694:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004696:	4b5d      	ldr	r3, [pc, #372]	; (800480c <UART+0x7e4>)
 8004698:	791a      	ldrb	r2, [r3, #4]
 800469a:	4b63      	ldr	r3, [pc, #396]	; (8004828 <UART+0x800>)
 800469c:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 800469e:	4b5b      	ldr	r3, [pc, #364]	; (800480c <UART+0x7e4>)
 80046a0:	795a      	ldrb	r2, [r3, #5]
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <UART+0x800>)
 80046a4:	71da      	strb	r2, [r3, #7]
				Check9 =0;
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <UART+0x7e0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 80046ac:	2208      	movs	r2, #8
 80046ae:	495e      	ldr	r1, [pc, #376]	; (8004828 <UART+0x800>)
 80046b0:	4859      	ldr	r0, [pc, #356]	; (8004818 <UART+0x7f0>)
 80046b2:	f005 febd 	bl	800a430 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 80046b6:	f7fd fa2f 	bl	8001b18 <micros>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4b57      	ldr	r3, [pc, #348]	; (800481c <UART+0x7f4>)
 80046c0:	601a      	str	r2, [r3, #0]
				Check9=1;
			}
		}

		}
		break;
 80046c2:	e1fc      	b.n	8004abe <UART+0xa96>
				if(micros() - Timestamp_UI > 150){
 80046c4:	f7fd fa28 	bl	8001b18 <micros>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4953      	ldr	r1, [pc, #332]	; (800481c <UART+0x7f4>)
 80046ce:	6809      	ldr	r1, [r1, #0]
 80046d0:	2000      	movs	r0, #0
 80046d2:	6239      	str	r1, [r7, #32]
 80046d4:	6278      	str	r0, [r7, #36]	; 0x24
 80046d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046da:	4621      	mov	r1, r4
 80046dc:	1a51      	subs	r1, r2, r1
 80046de:	61b9      	str	r1, [r7, #24]
 80046e0:	4629      	mov	r1, r5
 80046e2:	eb63 0301 	sbc.w	r3, r3, r1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046ec:	460b      	mov	r3, r1
 80046ee:	2b97      	cmp	r3, #151	; 0x97
 80046f0:	4613      	mov	r3, r2
 80046f2:	f173 0300 	sbcs.w	r3, r3, #0
 80046f6:	f0c0 81e2 	bcc.w	8004abe <UART+0xa96>
					RxData[0] = 0;
 80046fa:	4b49      	ldr	r3, [pc, #292]	; (8004820 <UART+0x7f8>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
					Check9=1;
 8004700:	4b41      	ldr	r3, [pc, #260]	; (8004808 <UART+0x7e0>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004706:	4b47      	ldr	r3, [pc, #284]	; (8004824 <UART+0x7fc>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 800470c:	4842      	ldr	r0, [pc, #264]	; (8004818 <UART+0x7f0>)
 800470e:	f005 ff3d 	bl	800a58c <HAL_UART_DMAStop>
		break;
 8004712:	e1d4      	b.n	8004abe <UART+0xa96>
		else if(Check9){
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <UART+0x7e0>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d04c      	beq.n	80047b6 <UART+0x78e>
			TxData[2] = 0b10011010;
 800471c:	4b3b      	ldr	r3, [pc, #236]	; (800480c <UART+0x7e4>)
 800471e:	229a      	movs	r2, #154	; 0x9a
 8004720:	709a      	strb	r2, [r3, #2]
			TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 8004722:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <UART+0x7e8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb feba 	bl	80004a0 <__aeabi_f2d>
 800472c:	a334      	add	r3, pc, #208	; (adr r3, 8004800 <UART+0x7d8>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb ff0d 	bl	8000550 <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <UART+0x804>)
 8004744:	f7fc f82e 	bl	80007a4 <__aeabi_ddiv>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f7fc f9ae 	bl	8000ab0 <__aeabi_d2uiz>
 8004754:	4603      	mov	r3, r0
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <UART+0x7e4>)
 800475a:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)(theta_now*10000)%256;
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <UART+0x7e8>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004830 <UART+0x808>
 8004766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8004772:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b24      	ldr	r3, [pc, #144]	; (800480c <UART+0x7e4>)
 800477a:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 800477c:	4b23      	ldr	r3, [pc, #140]	; (800480c <UART+0x7e4>)
 800477e:	789a      	ldrb	r2, [r3, #2]
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <UART+0x7e4>)
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	4413      	add	r3, r2
 8004786:	b2da      	uxtb	r2, r3
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <UART+0x7e4>)
 800478a:	791b      	ldrb	r3, [r3, #4]
 800478c:	4413      	add	r3, r2
 800478e:	b2db      	uxtb	r3, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <UART+0x7e4>)
 8004796:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004798:	2206      	movs	r2, #6
 800479a:	491c      	ldr	r1, [pc, #112]	; (800480c <UART+0x7e4>)
 800479c:	481e      	ldr	r0, [pc, #120]	; (8004818 <UART+0x7f0>)
 800479e:	f005 fe47 	bl	800a430 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 80047a2:	f7fd f9b9 	bl	8001b18 <micros>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <UART+0x7f4>)
 80047ac:	601a      	str	r2, [r3, #0]
			Check9=0;
 80047ae:	4b16      	ldr	r3, [pc, #88]	; (8004808 <UART+0x7e0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
		break;
 80047b4:	e183      	b.n	8004abe <UART+0xa96>
			if(micros() - Timestamp_UI > 150){
 80047b6:	f7fd f9af 	bl	8001b18 <micros>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4917      	ldr	r1, [pc, #92]	; (800481c <UART+0x7f4>)
 80047c0:	6809      	ldr	r1, [r1, #0]
 80047c2:	2000      	movs	r0, #0
 80047c4:	6139      	str	r1, [r7, #16]
 80047c6:	6178      	str	r0, [r7, #20]
 80047c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047cc:	4621      	mov	r1, r4
 80047ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80047d2:	4629      	mov	r1, r5
 80047d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d8:	f1ba 0f97 	cmp.w	sl, #151	; 0x97
 80047dc:	f17b 0300 	sbcs.w	r3, fp, #0
 80047e0:	f0c0 816d 	bcc.w	8004abe <UART+0xa96>
				RxData[0] = 0;
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <UART+0x7f8>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 80047ea:	480b      	ldr	r0, [pc, #44]	; (8004818 <UART+0x7f0>)
 80047ec:	f005 fece 	bl	800a58c <HAL_UART_DMAStop>
				Check9=1;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <UART+0x7e0>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
		break;
 80047f6:	e162      	b.n	8004abe <UART+0xa96>
 80047f8:	cac08312 	.word	0xcac08312
 80047fc:	3fb645a1 	.word	0x3fb645a1
 8004800:	00000000 	.word	0x00000000
 8004804:	40c38800 	.word	0x40c38800
 8004808:	200000db 	.word	0x200000db
 800480c:	20000098 	.word	0x20000098
 8004810:	200003f8 	.word	0x200003f8
 8004814:	200000d4 	.word	0x200000d4
 8004818:	200002e0 	.word	0x200002e0
 800481c:	200006ac 	.word	0x200006ac
 8004820:	20000654 	.word	0x20000654
 8004824:	20000671 	.word	0x20000671
 8004828:	200000a0 	.word	0x200000a0
 800482c:	40700000 	.word	0x40700000
 8004830:	461c4000 	.word	0x461c4000
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 8004834:	4bae      	ldr	r3, [pc, #696]	; (8004af0 <UART+0xac8>)
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	f040 8142 	bne.w	8004ac2 <UART+0xa9a>
			//Request Angular Velocity
		if(Finish){
 800483e:	4bad      	ldr	r3, [pc, #692]	; (8004af4 <UART+0xacc>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d049      	beq.n	80048da <UART+0x8b2>
			if(Check9){
 8004846:	4bac      	ldr	r3, [pc, #688]	; (8004af8 <UART+0xad0>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01e      	beq.n	800488c <UART+0x864>
				TxData2[4]=TxData[2];
 800484e:	4bab      	ldr	r3, [pc, #684]	; (8004afc <UART+0xad4>)
 8004850:	789a      	ldrb	r2, [r3, #2]
 8004852:	4bab      	ldr	r3, [pc, #684]	; (8004b00 <UART+0xad8>)
 8004854:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004856:	4ba9      	ldr	r3, [pc, #676]	; (8004afc <UART+0xad4>)
 8004858:	78da      	ldrb	r2, [r3, #3]
 800485a:	4ba9      	ldr	r3, [pc, #676]	; (8004b00 <UART+0xad8>)
 800485c:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 800485e:	4ba7      	ldr	r3, [pc, #668]	; (8004afc <UART+0xad4>)
 8004860:	791a      	ldrb	r2, [r3, #4]
 8004862:	4ba7      	ldr	r3, [pc, #668]	; (8004b00 <UART+0xad8>)
 8004864:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004866:	4ba5      	ldr	r3, [pc, #660]	; (8004afc <UART+0xad4>)
 8004868:	795a      	ldrb	r2, [r3, #5]
 800486a:	4ba5      	ldr	r3, [pc, #660]	; (8004b00 <UART+0xad8>)
 800486c:	71da      	strb	r2, [r3, #7]
				Check9 =0;
 800486e:	4ba2      	ldr	r3, [pc, #648]	; (8004af8 <UART+0xad0>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004874:	2208      	movs	r2, #8
 8004876:	49a2      	ldr	r1, [pc, #648]	; (8004b00 <UART+0xad8>)
 8004878:	48a2      	ldr	r0, [pc, #648]	; (8004b04 <UART+0xadc>)
 800487a:	f005 fdd9 	bl	800a430 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 800487e:	f7fd f94b 	bl	8001b18 <micros>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4ba0      	ldr	r3, [pc, #640]	; (8004b08 <UART+0xae0>)
 8004888:	601a      	str	r2, [r3, #0]
				Check9=1;
			}
		}

		}
		break;
 800488a:	e11a      	b.n	8004ac2 <UART+0xa9a>
				if(micros() - Timestamp_UI > 150){
 800488c:	f7fd f944 	bl	8001b18 <micros>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	499c      	ldr	r1, [pc, #624]	; (8004b08 <UART+0xae0>)
 8004896:	6809      	ldr	r1, [r1, #0]
 8004898:	2000      	movs	r0, #0
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048a2:	4621      	mov	r1, r4
 80048a4:	ebb2 0801 	subs.w	r8, r2, r1
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb63 0901 	sbc.w	r9, r3, r1
 80048ae:	f1b8 0f97 	cmp.w	r8, #151	; 0x97
 80048b2:	f179 0300 	sbcs.w	r3, r9, #0
 80048b6:	f0c0 8104 	bcc.w	8004ac2 <UART+0xa9a>
					RxData[0] = 0;
 80048ba:	4b8d      	ldr	r3, [pc, #564]	; (8004af0 <UART+0xac8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
					Check9=1;
 80048c0:	4b8d      	ldr	r3, [pc, #564]	; (8004af8 <UART+0xad0>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
					Finish =0;
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <UART+0xacc>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 80048cc:	488d      	ldr	r0, [pc, #564]	; (8004b04 <UART+0xadc>)
 80048ce:	f005 fe5d 	bl	800a58c <HAL_UART_DMAStop>
					Check9=1;
 80048d2:	4b89      	ldr	r3, [pc, #548]	; (8004af8 <UART+0xad0>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
		break;
 80048d8:	e0f3      	b.n	8004ac2 <UART+0xa9a>
		else if (Check9){
 80048da:	4b87      	ldr	r3, [pc, #540]	; (8004af8 <UART+0xad0>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04e      	beq.n	8004980 <UART+0x958>
			TxData[2] = 0b10011011;
 80048e2:	4b86      	ldr	r3, [pc, #536]	; (8004afc <UART+0xad4>)
 80048e4:	229b      	movs	r2, #155	; 0x9b
 80048e6:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 80048e8:	4b84      	ldr	r3, [pc, #528]	; (8004afc <UART+0xad4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((omega_kalman*60/(2*M_PI))*255/10);
 80048ee:	4b87      	ldr	r3, [pc, #540]	; (8004b0c <UART+0xae4>)
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004b10 <UART+0xae8>
 80048f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fc:	ee17 0a90 	vmov	r0, s15
 8004900:	f7fb fdce 	bl	80004a0 <__aeabi_f2d>
 8004904:	a376      	add	r3, pc, #472	; (adr r3, 8004ae0 <UART+0xab8>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f7fb ff4b 	bl	80007a4 <__aeabi_ddiv>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	a374      	add	r3, pc, #464	; (adr r3, 8004ae8 <UART+0xac0>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb fe18 	bl	8000550 <__aeabi_dmul>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4b79      	ldr	r3, [pc, #484]	; (8004b14 <UART+0xaec>)
 800492e:	f7fb ff39 	bl	80007a4 <__aeabi_ddiv>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f7fc f8b9 	bl	8000ab0 <__aeabi_d2uiz>
 800493e:	4603      	mov	r3, r0
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <UART+0xad4>)
 8004944:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004946:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <UART+0xad4>)
 8004948:	789a      	ldrb	r2, [r3, #2]
 800494a:	4b6c      	ldr	r3, [pc, #432]	; (8004afc <UART+0xad4>)
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	4413      	add	r3, r2
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <UART+0xad4>)
 8004954:	791b      	ldrb	r3, [r3, #4]
 8004956:	4413      	add	r3, r2
 8004958:	b2db      	uxtb	r3, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b67      	ldr	r3, [pc, #412]	; (8004afc <UART+0xad4>)
 8004960:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004962:	2206      	movs	r2, #6
 8004964:	4965      	ldr	r1, [pc, #404]	; (8004afc <UART+0xad4>)
 8004966:	4867      	ldr	r0, [pc, #412]	; (8004b04 <UART+0xadc>)
 8004968:	f005 fd62 	bl	800a430 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 800496c:	f7fd f8d4 	bl	8001b18 <micros>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4b64      	ldr	r3, [pc, #400]	; (8004b08 <UART+0xae0>)
 8004976:	601a      	str	r2, [r3, #0]
			Check9=0;
 8004978:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <UART+0xad0>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
		break;
 800497e:	e0a0      	b.n	8004ac2 <UART+0xa9a>
			if(micros() - Timestamp_UI > 150){
 8004980:	f7fd f8ca 	bl	8001b18 <micros>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	495f      	ldr	r1, [pc, #380]	; (8004b08 <UART+0xae0>)
 800498a:	6809      	ldr	r1, [r1, #0]
 800498c:	2000      	movs	r0, #0
 800498e:	6039      	str	r1, [r7, #0]
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004996:	4641      	mov	r1, r8
 8004998:	1a54      	subs	r4, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb63 0501 	sbc.w	r5, r3, r1
 80049a0:	2c97      	cmp	r4, #151	; 0x97
 80049a2:	f175 0300 	sbcs.w	r3, r5, #0
 80049a6:	f0c0 808c 	bcc.w	8004ac2 <UART+0xa9a>
				RxData[0] = 0;
 80049aa:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <UART+0xac8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 80049b0:	4854      	ldr	r0, [pc, #336]	; (8004b04 <UART+0xadc>)
 80049b2:	f005 fdeb 	bl	800a58c <HAL_UART_DMAStop>
				Check9=1;
 80049b6:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <UART+0xad0>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
		break;
 80049bc:	e081      	b.n	8004ac2 <UART+0xa9a>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 80049be:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <UART+0xac8>)
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b63      	cmp	r3, #99	; 0x63
 80049c4:	d17f      	bne.n	8004ac6 <UART+0xa9e>
			//enable gripple
			Enable_EndEffector = 1;
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <UART+0xaf0>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80049cc:	2202      	movs	r2, #2
 80049ce:	4953      	ldr	r1, [pc, #332]	; (8004b1c <UART+0xaf4>)
 80049d0:	484c      	ldr	r0, [pc, #304]	; (8004b04 <UART+0xadc>)
 80049d2:	f005 fd2d 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80049d6:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <UART+0xac8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80049dc:	4849      	ldr	r0, [pc, #292]	; (8004b04 <UART+0xadc>)
 80049de:	f005 fdd5 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 80049e2:	e070      	b.n	8004ac6 <UART+0xa9e>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 80049e4:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <UART+0xac8>)
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b62      	cmp	r3, #98	; 0x62
 80049ea:	d16e      	bne.n	8004aca <UART+0xaa2>
			//disable gripple
			Enable_EndEffector = 0;
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <UART+0xaf0>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80049f2:	2202      	movs	r2, #2
 80049f4:	4949      	ldr	r1, [pc, #292]	; (8004b1c <UART+0xaf4>)
 80049f6:	4843      	ldr	r0, [pc, #268]	; (8004b04 <UART+0xadc>)
 80049f8:	f005 fd1a 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80049fc:	4b3c      	ldr	r3, [pc, #240]	; (8004af0 <UART+0xac8>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004a02:	4840      	ldr	r0, [pc, #256]	; (8004b04 <UART+0xadc>)
 8004a04:	f005 fdc2 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 8004a08:	e05f      	b.n	8004aca <UART+0xaa2>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004a0a:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <UART+0xac8>)
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b61      	cmp	r3, #97	; 0x61
 8004a10:	d15d      	bne.n	8004ace <UART+0xaa6>
			//Set HOME
			state = Home;
 8004a12:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <UART+0xaf8>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
			SetHome_Flag=1;
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <UART+0xafc>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004a1e:	2202      	movs	r2, #2
 8004a20:	493e      	ldr	r1, [pc, #248]	; (8004b1c <UART+0xaf4>)
 8004a22:	4838      	ldr	r0, [pc, #224]	; (8004b04 <UART+0xadc>)
 8004a24:	f005 fd04 	bl	800a430 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004a28:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <UART+0xac8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004a2e:	4835      	ldr	r0, [pc, #212]	; (8004b04 <UART+0xadc>)
 8004a30:	f005 fdac 	bl	800a58c <HAL_UART_DMAStop>
		}
		break;
 8004a34:	e04b      	b.n	8004ace <UART+0xaa6>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004a36:	220c      	movs	r2, #12
 8004a38:	492d      	ldr	r1, [pc, #180]	; (8004af0 <UART+0xac8>)
 8004a3a:	4832      	ldr	r0, [pc, #200]	; (8004b04 <UART+0xadc>)
 8004a3c:	f005 fd76 	bl	800a52c <HAL_UART_Receive_DMA>
		break;
 8004a40:	e048      	b.n	8004ad4 <UART+0xaac>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <UART+0xac8>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b58      	cmp	r3, #88	; 0x58
 8004a48:	d143      	bne.n	8004ad2 <UART+0xaaa>
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <UART+0xac8>)
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b75      	cmp	r3, #117	; 0x75
 8004a50:	d13f      	bne.n	8004ad2 <UART+0xaaa>
			if(RxData[2] !=0 && RxData[3] != 0){
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <UART+0xac8>)
 8004a54:	789b      	ldrb	r3, [r3, #2]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03b      	beq.n	8004ad2 <UART+0xaaa>
 8004a5a:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <UART+0xac8>)
 8004a5c:	78db      	ldrb	r3, [r3, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d037      	beq.n	8004ad2 <UART+0xaaa>
				RxData[0]=RxData[2];
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <UART+0xac8>)
 8004a64:	789a      	ldrb	r2, [r3, #2]
 8004a66:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <UART+0xac8>)
 8004a68:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <UART+0xac8>)
 8004a6c:	78da      	ldrb	r2, [r3, #3]
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <UART+0xac8>)
 8004a70:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <UART+0xac8>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <UART+0xac8>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <UART+0xac8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <UART+0xac8>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8004a8a:	e022      	b.n	8004ad2 <UART+0xaaa>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <UART+0xac8>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 8004a92:	481c      	ldr	r0, [pc, #112]	; (8004b04 <UART+0xadc>)
 8004a94:	f005 fd7a 	bl	800a58c <HAL_UART_DMAStop>
		break;
 8004a98:	e01c      	b.n	8004ad4 <UART+0xaac>
		break;
 8004a9a:	bf00      	nop
 8004a9c:	e01a      	b.n	8004ad4 <UART+0xaac>
		break;
 8004a9e:	bf00      	nop
 8004aa0:	e018      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aa2:	bf00      	nop
 8004aa4:	e016      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aa6:	bf00      	nop
 8004aa8:	e014      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aaa:	bf00      	nop
 8004aac:	e012      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aae:	bf00      	nop
 8004ab0:	e010      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ab2:	bf00      	nop
 8004ab4:	e00e      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ab6:	bf00      	nop
 8004ab8:	e00c      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aba:	bf00      	nop
 8004abc:	e00a      	b.n	8004ad4 <UART+0xaac>
		break;
 8004abe:	bf00      	nop
 8004ac0:	e008      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ac2:	bf00      	nop
 8004ac4:	e006      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ac6:	bf00      	nop
 8004ac8:	e004      	b.n	8004ad4 <UART+0xaac>
		break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <UART+0xaac>
		break;
 8004ad2:	bf00      	nop
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	3758      	adds	r7, #88	; 0x58
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	54442d18 	.word	0x54442d18
 8004ae4:	401921fb 	.word	0x401921fb
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	406fe000 	.word	0x406fe000
 8004af0:	20000654 	.word	0x20000654
 8004af4:	20000671 	.word	0x20000671
 8004af8:	200000db 	.word	0x200000db
 8004afc:	20000098 	.word	0x20000098
 8004b00:	200000a0 	.word	0x200000a0
 8004b04:	200002e0 	.word	0x200002e0
 8004b08:	200006ac 	.word	0x200006ac
 8004b0c:	20000410 	.word	0x20000410
 8004b10:	42700000 	.word	0x42700000
 8004b14:	40240000 	.word	0x40240000
 8004b18:	20000663 	.word	0x20000663
 8004b1c:	200000a8 	.word	0x200000a8
 8004b20:	200000d7 	.word	0x200000d7
 8004b24:	200003e8 	.word	0x200003e8

08004b28 <OpenEndEffector>:

void OpenEndEffector() {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8004b2e:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <OpenEndEffector+0xf0>)
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d119      	bne.n	8004b6e <OpenEndEffector+0x46>
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <OpenEndEffector+0xf4>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d115      	bne.n	8004b6e <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8004b42:	2364      	movs	r3, #100	; 0x64
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	4a35      	ldr	r2, [pc, #212]	; (8004c20 <OpenEndEffector+0xf8>)
 8004b4a:	2146      	movs	r1, #70	; 0x46
 8004b4c:	4832      	ldr	r0, [pc, #200]	; (8004c18 <OpenEndEffector+0xf0>)
 8004b4e:	f001 fc3f 	bl	80063d0 <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 8004b52:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <OpenEndEffector+0xf4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <OpenEndEffector+0xfc>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 8004b5e:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <OpenEndEffector+0x100>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 8004b64:	f000 fbd0 	bl	8005308 <HAL_GetTick>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <OpenEndEffector+0x104>)
 8004b6c:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <OpenEndEffector+0xfc>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d144      	bne.n	8004c00 <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 8004b76:	f000 fbc7 	bl	8005308 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <OpenEndEffector+0x104>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2bfa      	cmp	r3, #250	; 0xfa
 8004b84:	d906      	bls.n	8004b94 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 8004b86:	f000 fbbf 	bl	8005308 <HAL_GetTick>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4a27      	ldr	r2, [pc, #156]	; (8004c2c <OpenEndEffector+0x104>)
 8004b8e:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 8004b90:	f000 f850 	bl	8004c34 <CheckEndEffector>
		}

		switch(EndEffector_State)
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <OpenEndEffector+0x100>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d83a      	bhi.n	8004c12 <OpenEndEffector+0xea>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <OpenEndEffector+0x7c>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bb9 	.word	0x08004bb9
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004bf9 	.word	0x08004bf9
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <OpenEndEffector+0x108>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d121      	bne.n	8004c04 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <OpenEndEffector+0x100>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004bc6:	e01d      	b.n	8004c04 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <OpenEndEffector+0x108>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	2b34      	cmp	r3, #52	; 0x34
 8004bce:	d11b      	bne.n	8004c08 <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8004bd0:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <OpenEndEffector+0x100>)
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004bd6:	e017      	b.n	8004c08 <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <OpenEndEffector+0x108>)
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	2b56      	cmp	r3, #86	; 0x56
 8004bde:	d115      	bne.n	8004c0c <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <OpenEndEffector+0x100>)
 8004be2:	2203      	movs	r2, #3
 8004be4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004be6:	e011      	b.n	8004c0c <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <OpenEndEffector+0x108>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	2b78      	cmp	r3, #120	; 0x78
 8004bee:	d10f      	bne.n	8004c10 <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <OpenEndEffector+0x100>)
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004bf6:	e00b      	b.n	8004c10 <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <OpenEndEffector+0xfc>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
			break;
 8004bfe:	e008      	b.n	8004c12 <OpenEndEffector+0xea>
		}
	}
 8004c00:	bf00      	nop
 8004c02:	e006      	b.n	8004c12 <OpenEndEffector+0xea>
			break;
 8004c04:	bf00      	nop
 8004c06:	e004      	b.n	8004c12 <OpenEndEffector+0xea>
			break;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <OpenEndEffector+0xea>
			break;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <OpenEndEffector+0xea>
			break;
 8004c10:	bf00      	nop
}
 8004c12:	bf00      	nop
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	2000016c 	.word	0x2000016c
 8004c1c:	20000684 	.word	0x20000684
 8004c20:	200000dc 	.word	0x200000dc
 8004c24:	20000685 	.word	0x20000685
 8004c28:	200000d8 	.word	0x200000d8
 8004c2c:	20000688 	.word	0x20000688
 8004c30:	20000686 	.word	0x20000686

08004c34 <CheckEndEffector>:

void CheckEndEffector()
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <CheckEndEffector+0x38>)
 8004c42:	2146      	movs	r1, #70	; 0x46
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <CheckEndEffector+0x3c>)
 8004c46:	f001 fcc1 	bl	80065cc <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <CheckEndEffector+0x3c>)
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d107      	bne.n	8004c66 <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 8004c56:	2320      	movs	r3, #32
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <CheckEndEffector+0x40>)
 8004c5e:	2146      	movs	r1, #70	; 0x46
 8004c60:	4803      	ldr	r0, [pc, #12]	; (8004c70 <CheckEndEffector+0x3c>)
 8004c62:	f001 fd79 	bl	8006758 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200000dd 	.word	0x200000dd
 8004c70:	2000016c 	.word	0x2000016c
 8004c74:	20000686 	.word	0x20000686

08004c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c7c:	b672      	cpsid	i
}
 8004c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <Error_Handler+0x8>
	...

08004c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c98:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_MspInit+0x4c>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004cc2:	2007      	movs	r0, #7
 8004cc4:	f000 fc20 	bl	8005508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_I2C_MspInit+0xa4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d13c      	bne.n	8004d70 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d18:	2312      	movs	r3, #18
 8004d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d20:	2303      	movs	r3, #3
 8004d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d24:	2304      	movs	r3, #4
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d28:	f107 0314 	add.w	r3, r7, #20
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4814      	ldr	r0, [pc, #80]	; (8004d80 <HAL_I2C_MspInit+0xac>)
 8004d30:	f001 f83c 	bl	8005dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_I2C_MspInit+0xa8>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2100      	movs	r1, #0
 8004d54:	201f      	movs	r0, #31
 8004d56:	f000 fbe2 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004d5a:	201f      	movs	r0, #31
 8004d5c:	f000 fbfb 	bl	8005556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	2020      	movs	r0, #32
 8004d66:	f000 fbda 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004d6a:	2020      	movs	r0, #32
 8004d6c:	f000 fbf3 	bl	8005556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d70:	bf00      	nop
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40005400 	.word	0x40005400
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40020400 	.word	0x40020400

08004d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <HAL_TIM_Base_MspInit+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d116      	bne.n	8004dc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2100      	movs	r1, #0
 8004db6:	201a      	movs	r0, #26
 8004db8:	f000 fbb1 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004dbc:	201a      	movs	r0, #26
 8004dbe:	f000 fbca 	bl	8005556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004dc2:	e036      	b.n	8004e32 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <HAL_TIM_Base_MspInit+0xc0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d116      	bne.n	8004dfc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004dea:	2200      	movs	r2, #0
 8004dec:	2100      	movs	r1, #0
 8004dee:	201e      	movs	r0, #30
 8004df0:	f000 fb95 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004df4:	201e      	movs	r0, #30
 8004df6:	f000 fbae 	bl	8005556 <HAL_NVIC_EnableIRQ>
}
 8004dfa:	e01a      	b.n	8004e32 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <HAL_TIM_Base_MspInit+0xc4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d115      	bne.n	8004e32 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e14:	6453      	str	r3, [r2, #68]	; 0x44
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_TIM_Base_MspInit+0xbc>)
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e22:	2200      	movs	r2, #0
 8004e24:	2100      	movs	r1, #0
 8004e26:	201a      	movs	r0, #26
 8004e28:	f000 fb79 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e2c:	201a      	movs	r0, #26
 8004e2e:	f000 fb92 	bl	8005556 <HAL_NVIC_EnableIRQ>
}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40014800 	.word	0x40014800

08004e4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d12b      	bne.n	8004ec6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8004ea6:	23c0      	movs	r3, #192	; 0xc0
 8004ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004ec2:	f000 ff73 	bl	8005dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40020000 	.word	0x40020000

08004edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_TIM_MspPostInit+0x68>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d11e      	bne.n	8004f3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8004f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f20:	2302      	movs	r3, #2
 8004f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4619      	mov	r1, r3
 8004f36:	4805      	ldr	r0, [pc, #20]	; (8004f4c <HAL_TIM_MspPostInit+0x70>)
 8004f38:	f000 ff38 	bl	8005dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004f3c:	bf00      	nop
 8004f3e:	3720      	adds	r7, #32
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40020000 	.word	0x40020000

08004f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f58:	f107 0314 	add.w	r3, r7, #20
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a4c      	ldr	r2, [pc, #304]	; (80050a0 <HAL_UART_MspInit+0x150>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	f040 8091 	bne.w	8005096 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	4a49      	ldr	r2, [pc, #292]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f82:	6413      	str	r3, [r2, #64]	; 0x40
 8004f84:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	4a42      	ldr	r2, [pc, #264]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa0:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <HAL_UART_MspInit+0x154>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004fac:	230c      	movs	r3, #12
 8004fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc0:	f107 0314 	add.w	r3, r7, #20
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4838      	ldr	r0, [pc, #224]	; (80050a8 <HAL_UART_MspInit+0x158>)
 8004fc8:	f000 fef0 	bl	8005dac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004fcc:	4b37      	ldr	r3, [pc, #220]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004fce:	4a38      	ldr	r2, [pc, #224]	; (80050b0 <HAL_UART_MspInit+0x160>)
 8004fd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004fd2:	4b36      	ldr	r3, [pc, #216]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fda:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fe0:	4b32      	ldr	r3, [pc, #200]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8004ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005000:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8005004:	2200      	movs	r2, #0
 8005006:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <HAL_UART_MspInit+0x15c>)
 800500a:	2200      	movs	r2, #0
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800500e:	4827      	ldr	r0, [pc, #156]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8005010:	f000 fabc 	bl	800558c <HAL_DMA_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800501a:	f7ff fe2d 	bl	8004c78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
 8005024:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_UART_MspInit+0x15c>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <HAL_UART_MspInit+0x168>)
 800502e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005036:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800504a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800504e:	2200      	movs	r2, #0
 8005050:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005054:	2200      	movs	r2, #0
 8005056:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800505a:	2200      	movs	r2, #0
 800505c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005060:	2200      	movs	r2, #0
 8005062:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005066:	2200      	movs	r2, #0
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800506a:	4812      	ldr	r0, [pc, #72]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800506c:	f000 fa8e 	bl	800558c <HAL_DMA_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005076:	f7ff fdff 	bl	8004c78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <HAL_UART_MspInit+0x164>)
 800507e:	635a      	str	r2, [r3, #52]	; 0x34
 8005080:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_UART_MspInit+0x164>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	2026      	movs	r0, #38	; 0x26
 800508c:	f000 fa47 	bl	800551e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005090:	2026      	movs	r0, #38	; 0x26
 8005092:	f000 fa60 	bl	8005556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005096:	bf00      	nop
 8005098:	3728      	adds	r7, #40	; 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40020000 	.word	0x40020000
 80050ac:	20000324 	.word	0x20000324
 80050b0:	40026088 	.word	0x40026088
 80050b4:	20000384 	.word	0x20000384
 80050b8:	400260a0 	.word	0x400260a0

080050bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050c0:	e7fe      	b.n	80050c0 <NMI_Handler+0x4>

080050c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050c6:	e7fe      	b.n	80050c6 <HardFault_Handler+0x4>

080050c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050cc:	e7fe      	b.n	80050cc <MemManage_Handler+0x4>

080050ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050d2:	e7fe      	b.n	80050d2 <BusFault_Handler+0x4>

080050d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <UsageFault_Handler+0x4>

080050da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005108:	f000 f8ea 	bl	80052e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}

08005110 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8005114:	2010      	movs	r0, #16
 8005116:	f000 ffff 	bl	8006118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <DMA1_Stream5_IRQHandler+0x10>)
 8005126:	f000 fbc9 	bl	80058bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000324 	.word	0x20000324

08005134 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <DMA1_Stream6_IRQHandler+0x10>)
 800513a:	f000 fbbf 	bl	80058bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000384 	.word	0x20000384

08005148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_X_Pin);
 800514c:	2080      	movs	r0, #128	; 0x80
 800514e:	f000 ffe3 	bl	8006118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800515c:	4803      	ldr	r0, [pc, #12]	; (800516c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800515e:	f004 fabf 	bl	80096e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005162:	4803      	ldr	r0, [pc, #12]	; (8005170 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005164:	f004 fabc 	bl	80096e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005168:	bf00      	nop
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200001c0 	.word	0x200001c0
 8005170:	20000298 	.word	0x20000298

08005174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <TIM4_IRQHandler+0x10>)
 800517a:	f004 fab1 	bl	80096e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000250 	.word	0x20000250

08005188 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <I2C1_EV_IRQHandler+0x10>)
 800518e:	f001 fbe1 	bl	8006954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2000016c 	.word	0x2000016c

0800519c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051a0:	4802      	ldr	r0, [pc, #8]	; (80051ac <I2C1_ER_IRQHandler+0x10>)
 80051a2:	f001 fd48 	bl	8006c36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	2000016c 	.word	0x2000016c

080051b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <USART2_IRQHandler+0x10>)
 80051b6:	f005 fa69 	bl	800a68c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200002e0 	.word	0x200002e0

080051c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <SystemInit+0x20>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <SystemInit+0x20>)
 80051d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80051e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051ee:	490e      	ldr	r1, [pc, #56]	; (8005228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051f0:	4a0e      	ldr	r2, [pc, #56]	; (800522c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f4:	e002      	b.n	80051fc <LoopCopyDataInit>

080051f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051fa:	3304      	adds	r3, #4

080051fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005200:	d3f9      	bcc.n	80051f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005202:	4a0b      	ldr	r2, [pc, #44]	; (8005230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005204:	4c0b      	ldr	r4, [pc, #44]	; (8005234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005208:	e001      	b.n	800520e <LoopFillZerobss>

0800520a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800520a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800520c:	3204      	adds	r2, #4

0800520e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800520e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005210:	d3fb      	bcc.n	800520a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005212:	f7ff ffd7 	bl	80051c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005216:	f006 fd07 	bl	800bc28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800521a:	f7fb fe3b 	bl	8000e94 <main>
  bx  lr    
 800521e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005228:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800522c:	0800cc90 	.word	0x0800cc90
  ldr r2, =_sbss
 8005230:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8005234:	200006b4 	.word	0x200006b4

08005238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005238:	e7fe      	b.n	8005238 <ADC_IRQHandler>
	...

0800523c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_Init+0x40>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_Init+0x40>)
 8005246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_Init+0x40>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_Init+0x40>)
 8005252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_Init+0x40>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_Init+0x40>)
 800525e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005264:	2003      	movs	r0, #3
 8005266:	f000 f94f 	bl	8005508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800526a:	2000      	movs	r0, #0
 800526c:	f000 f808 	bl	8005280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005270:	f7ff fd08 	bl	8004c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00

08005280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_InitTick+0x54>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_InitTick+0x58>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005296:	fbb3 f3f1 	udiv	r3, r3, r1
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f967 	bl	8005572 <HAL_SYSTICK_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00e      	b.n	80052cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d80a      	bhi.n	80052ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052b4:	2200      	movs	r2, #0
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f000 f92f 	bl	800551e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052c0:	4a06      	ldr	r2, [pc, #24]	; (80052dc <HAL_InitTick+0x5c>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200000e0 	.word	0x200000e0
 80052d8:	200000e8 	.word	0x200000e8
 80052dc:	200000e4 	.word	0x200000e4

080052e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_IncTick+0x20>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_IncTick+0x24>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HAL_IncTick+0x24>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	200000e8 	.word	0x200000e8
 8005304:	200006b0 	.word	0x200006b0

08005308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return uwTick;
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <HAL_GetTick+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	200006b0 	.word	0x200006b0

08005320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005328:	f7ff ffee 	bl	8005308 <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d005      	beq.n	8005346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_Delay+0x44>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005346:	bf00      	nop
 8005348:	f7ff ffde 	bl	8005308 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d8f7      	bhi.n	8005348 <HAL_Delay+0x28>
  {
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	200000e8 	.word	0x200000e8

08005368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <__NVIC_SetPriorityGrouping+0x44>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005384:	4013      	ands	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <__NVIC_SetPriorityGrouping+0x44>)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	60d3      	str	r3, [r2, #12]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <__NVIC_GetPriorityGrouping+0x18>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	f003 0307 	and.w	r3, r3, #7
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	e000ed00 	.word	0xe000ed00

080053cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	db0b      	blt.n	80053f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	f003 021f 	and.w	r2, r3, #31
 80053e4:	4907      	ldr	r1, [pc, #28]	; (8005404 <__NVIC_EnableIRQ+0x38>)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2001      	movs	r0, #1
 80053ee:	fa00 f202 	lsl.w	r2, r0, r2
 80053f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	e000e100 	.word	0xe000e100

08005408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005418:	2b00      	cmp	r3, #0
 800541a:	db0a      	blt.n	8005432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	490c      	ldr	r1, [pc, #48]	; (8005454 <__NVIC_SetPriority+0x4c>)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	440b      	add	r3, r1
 800542c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005430:	e00a      	b.n	8005448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	4908      	ldr	r1, [pc, #32]	; (8005458 <__NVIC_SetPriority+0x50>)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	3b04      	subs	r3, #4
 8005440:	0112      	lsls	r2, r2, #4
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	440b      	add	r3, r1
 8005446:	761a      	strb	r2, [r3, #24]
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000e100 	.word	0xe000e100
 8005458:	e000ed00 	.word	0xe000ed00

0800545c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800545c:	b480      	push	{r7}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f1c3 0307 	rsb	r3, r3, #7
 8005476:	2b04      	cmp	r3, #4
 8005478:	bf28      	it	cs
 800547a:	2304      	movcs	r3, #4
 800547c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3304      	adds	r3, #4
 8005482:	2b06      	cmp	r3, #6
 8005484:	d902      	bls.n	800548c <NVIC_EncodePriority+0x30>
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3b03      	subs	r3, #3
 800548a:	e000      	b.n	800548e <NVIC_EncodePriority+0x32>
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005490:	f04f 32ff 	mov.w	r2, #4294967295
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43da      	mvns	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	401a      	ands	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a4:	f04f 31ff 	mov.w	r1, #4294967295
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	43d9      	mvns	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	4313      	orrs	r3, r2
         );
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3724      	adds	r7, #36	; 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d4:	d301      	bcc.n	80054da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054d6:	2301      	movs	r3, #1
 80054d8:	e00f      	b.n	80054fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <SysTick_Config+0x40>)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054e2:	210f      	movs	r1, #15
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	f7ff ff8e 	bl	8005408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <SysTick_Config+0x40>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <SysTick_Config+0x40>)
 80054f4:	2207      	movs	r2, #7
 80054f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	e000e010 	.word	0xe000e010

08005508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ff29 	bl	8005368 <__NVIC_SetPriorityGrouping>
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005530:	f7ff ff3e 	bl	80053b0 <__NVIC_GetPriorityGrouping>
 8005534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff ff8e 	bl	800545c <NVIC_EncodePriority>
 8005540:	4602      	mov	r2, r0
 8005542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff5d 	bl	8005408 <__NVIC_SetPriority>
}
 800554e:	bf00      	nop
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	4603      	mov	r3, r0
 800555e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff ff31 	bl	80053cc <__NVIC_EnableIRQ>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ffa2 	bl	80054c4 <SysTick_Config>
 8005580:	4603      	mov	r3, r0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005598:	f7ff feb6 	bl	8005308 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e099      	b.n	80056dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c8:	e00f      	b.n	80055ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ca:	f7ff fe9d 	bl	8005308 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d908      	bls.n	80055ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2203      	movs	r2, #3
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e078      	b.n	80056dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e8      	bne.n	80055ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_DMA_Init+0x158>)
 8005604:	4013      	ands	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	4313      	orrs	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b04      	cmp	r3, #4
 800567c:	d117      	bne.n	80056ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb0f 	bl	8005cb4 <DMA_CheckFifoParam>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056aa:	2301      	movs	r3, #1
 80056ac:	e016      	b.n	80056dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fac6 	bl	8005c48 <DMA_CalcBaseAndBitshift>
 80056bc:	4603      	mov	r3, r0
 80056be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	223f      	movs	r2, #63	; 0x3f
 80056c6:	409a      	lsls	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	f010803f 	.word	0xf010803f

080056e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_DMA_Start_IT+0x26>
 800570a:	2302      	movs	r3, #2
 800570c:	e040      	b.n	8005790 <HAL_DMA_Start_IT+0xa8>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d12f      	bne.n	8005782 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa58 	bl	8005bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005740:	223f      	movs	r2, #63	; 0x3f
 8005742:	409a      	lsls	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0216 	orr.w	r2, r2, #22
 8005756:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0208 	orr.w	r2, r2, #8
 800576e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e005      	b.n	800578e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800578a:	2302      	movs	r3, #2
 800578c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057a6:	f7ff fdaf 	bl	8005308 <HAL_GetTick>
 80057aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d008      	beq.n	80057ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e052      	b.n	8005870 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0216 	bic.w	r2, r2, #22
 80057d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_DMA_Abort+0x62>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0208 	bic.w	r2, r2, #8
 8005808:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800581a:	e013      	b.n	8005844 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800581c:	f7ff fd74 	bl	8005308 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b05      	cmp	r3, #5
 8005828:	d90c      	bls.n	8005844 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e015      	b.n	8005870 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e4      	bne.n	800581c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	223f      	movs	r2, #63	; 0x3f
 8005858:	409a      	lsls	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d004      	beq.n	8005896 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e00c      	b.n	80058b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2205      	movs	r2, #5
 800589a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058c8:	4b8e      	ldr	r3, [pc, #568]	; (8005b04 <HAL_DMA_IRQHandler+0x248>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a8e      	ldr	r2, [pc, #568]	; (8005b08 <HAL_DMA_IRQHandler+0x24c>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	0a9b      	lsrs	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	2208      	movs	r2, #8
 80058e8:	409a      	lsls	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01a      	beq.n	8005928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d013      	beq.n	8005928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0204 	bic.w	r2, r2, #4
 800590e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	2208      	movs	r2, #8
 8005916:	409a      	lsls	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	f043 0201 	orr.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	2201      	movs	r2, #1
 800594c:	409a      	lsls	r2, r3
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f043 0202 	orr.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	2204      	movs	r2, #4
 8005964:	409a      	lsls	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	2204      	movs	r2, #4
 8005982:	409a      	lsls	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	2210      	movs	r2, #16
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d043      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	2210      	movs	r2, #16
 80059b8:	409a      	lsls	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d018      	beq.n	80059fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d024      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
 80059ea:	e01f      	b.n	8005a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4798      	blx	r3
 80059fc:	e016      	b.n	8005a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d107      	bne.n	8005a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0208 	bic.w	r2, r2, #8
 8005a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a30:	2220      	movs	r2, #32
 8005a32:	409a      	lsls	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 808f 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8087 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a52:	2220      	movs	r2, #32
 8005a54:	409a      	lsls	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d136      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0216 	bic.w	r2, r2, #22
 8005a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_DMA_IRQHandler+0x1da>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0208 	bic.w	r2, r2, #8
 8005aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aaa:	223f      	movs	r2, #63	; 0x3f
 8005aac:	409a      	lsls	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d07e      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
        }
        return;
 8005ad2:	e079      	b.n	8005bc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01d      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d031      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
 8005b00:	e02c      	b.n	8005b5c <HAL_DMA_IRQHandler+0x2a0>
 8005b02:	bf00      	nop
 8005b04:	200000e0 	.word	0x200000e0
 8005b08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d023      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
 8005b1c:	e01e      	b.n	8005b5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10f      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0210 	bic.w	r2, r2, #16
 8005b3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d032      	beq.n	8005bca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2205      	movs	r2, #5
 8005b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d307      	bcc.n	8005ba4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f2      	bne.n	8005b88 <HAL_DMA_IRQHandler+0x2cc>
 8005ba2:	e000      	b.n	8005ba6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ba4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	e000      	b.n	8005bca <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bc8:	bf00      	nop
    }
  }
}
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bde:	b2db      	uxtb	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d108      	bne.n	8005c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c2a:	e007      	b.n	8005c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	3b10      	subs	r3, #16
 8005c58:	4a14      	ldr	r2, [pc, #80]	; (8005cac <DMA_CalcBaseAndBitshift+0x64>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c62:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d909      	bls.n	8005c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	659a      	str	r2, [r3, #88]	; 0x58
 8005c88:	e007      	b.n	8005c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	aaaaaaab 	.word	0xaaaaaaab
 8005cb0:	0800cc48 	.word	0x0800cc48

08005cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d11f      	bne.n	8005d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d856      	bhi.n	8005d82 <DMA_CheckFifoParam+0xce>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <DMA_CheckFifoParam+0x28>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005cff 	.word	0x08005cff
 8005ce4:	08005ced 	.word	0x08005ced
 8005ce8:	08005d83 	.word	0x08005d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d046      	beq.n	8005d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cfc:	e043      	b.n	8005d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d06:	d140      	bne.n	8005d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d0c:	e03d      	b.n	8005d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d16:	d121      	bne.n	8005d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d837      	bhi.n	8005d8e <DMA_CheckFifoParam+0xda>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <DMA_CheckFifoParam+0x70>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d3b 	.word	0x08005d3b
 8005d2c:	08005d35 	.word	0x08005d35
 8005d30:	08005d4d 	.word	0x08005d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
      break;
 8005d38:	e030      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d025      	beq.n	8005d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d4a:	e022      	b.n	8005d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d54:	d11f      	bne.n	8005d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d5a:	e01c      	b.n	8005d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d903      	bls.n	8005d6a <DMA_CheckFifoParam+0xb6>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d003      	beq.n	8005d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d68:	e018      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6e:	e015      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00e      	beq.n	8005d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e00b      	b.n	8005d9a <DMA_CheckFifoParam+0xe6>
      break;
 8005d82:	bf00      	nop
 8005d84:	e00a      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;
 8005d86:	bf00      	nop
 8005d88:	e008      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e006      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e004      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <DMA_CheckFifoParam+0xe8>
      break;
 8005d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop

08005dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e159      	b.n	800607c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dc8:	2201      	movs	r2, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	f040 8148 	bne.w	8006076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d005      	beq.n	8005dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d130      	bne.n	8005e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	2203      	movs	r2, #3
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e34:	2201      	movs	r2, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 0201 	and.w	r2, r3, #1
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d017      	beq.n	8005e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d123      	bne.n	8005ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	08da      	lsrs	r2, r3, #3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3208      	adds	r2, #8
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	220f      	movs	r2, #15
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	08da      	lsrs	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3208      	adds	r2, #8
 8005eea:	69b9      	ldr	r1, [r7, #24]
 8005eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	2203      	movs	r2, #3
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 0203 	and.w	r2, r3, #3
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80a2 	beq.w	8006076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	4b57      	ldr	r3, [pc, #348]	; (8006094 <HAL_GPIO_Init+0x2e8>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	4a56      	ldr	r2, [pc, #344]	; (8006094 <HAL_GPIO_Init+0x2e8>)
 8005f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f40:	6453      	str	r3, [r2, #68]	; 0x44
 8005f42:	4b54      	ldr	r3, [pc, #336]	; (8006094 <HAL_GPIO_Init+0x2e8>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4e:	4a52      	ldr	r2, [pc, #328]	; (8006098 <HAL_GPIO_Init+0x2ec>)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	089b      	lsrs	r3, r3, #2
 8005f54:	3302      	adds	r3, #2
 8005f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a49      	ldr	r2, [pc, #292]	; (800609c <HAL_GPIO_Init+0x2f0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_Init+0x202>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a48      	ldr	r2, [pc, #288]	; (80060a0 <HAL_GPIO_Init+0x2f4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_Init+0x1fe>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a47      	ldr	r2, [pc, #284]	; (80060a4 <HAL_GPIO_Init+0x2f8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_Init+0x1fa>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a46      	ldr	r2, [pc, #280]	; (80060a8 <HAL_GPIO_Init+0x2fc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_Init+0x1f6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a45      	ldr	r2, [pc, #276]	; (80060ac <HAL_GPIO_Init+0x300>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_Init+0x1f2>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_Init+0x204>
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_Init+0x204>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_Init+0x204>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_Init+0x204>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_Init+0x204>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc0:	4935      	ldr	r1, [pc, #212]	; (8006098 <HAL_GPIO_Init+0x2ec>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fce:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ff2:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800601c:	4a24      	ldr	r2, [pc, #144]	; (80060b0 <HAL_GPIO_Init+0x304>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_GPIO_Init+0x304>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <HAL_GPIO_Init+0x304>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f aea2 	bls.w	8005dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	3724      	adds	r7, #36	; 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	40013800 	.word	0x40013800
 800609c:	40020000 	.word	0x40020000
 80060a0:	40020400 	.word	0x40020400
 80060a4:	40020800 	.word	0x40020800
 80060a8:	40020c00 	.word	0x40020c00
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
 80060d0:	e001      	b.n	80060d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
 80060f0:	4613      	mov	r3, r2
 80060f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f4:	787b      	ldrb	r3, [r7, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006100:	e003      	b.n	800610a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	041a      	lsls	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d006      	beq.n	800613c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800612e:	4a05      	ldr	r2, [pc, #20]	; (8006144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fb fc96 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40013c00 	.word	0x40013c00

08006148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e12b      	b.n	80063b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fe fdb0 	bl	8004cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	; 0x24
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800619a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061ac:	f002 ff26 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 80061b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4a81      	ldr	r2, [pc, #516]	; (80063bc <HAL_I2C_Init+0x274>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d807      	bhi.n	80061cc <HAL_I2C_Init+0x84>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4a80      	ldr	r2, [pc, #512]	; (80063c0 <HAL_I2C_Init+0x278>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	bf94      	ite	ls
 80061c4:	2301      	movls	r3, #1
 80061c6:	2300      	movhi	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e006      	b.n	80061da <HAL_I2C_Init+0x92>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a7d      	ldr	r2, [pc, #500]	; (80063c4 <HAL_I2C_Init+0x27c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bf94      	ite	ls
 80061d4:	2301      	movls	r3, #1
 80061d6:	2300      	movhi	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e0e7      	b.n	80063b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a78      	ldr	r2, [pc, #480]	; (80063c8 <HAL_I2C_Init+0x280>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	0c9b      	lsrs	r3, r3, #18
 80061ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a6a      	ldr	r2, [pc, #424]	; (80063bc <HAL_I2C_Init+0x274>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d802      	bhi.n	800621c <HAL_I2C_Init+0xd4>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	3301      	adds	r3, #1
 800621a:	e009      	b.n	8006230 <HAL_I2C_Init+0xe8>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	4a69      	ldr	r2, [pc, #420]	; (80063cc <HAL_I2C_Init+0x284>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	099b      	lsrs	r3, r3, #6
 800622e:	3301      	adds	r3, #1
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	430b      	orrs	r3, r1
 8006236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	495c      	ldr	r1, [pc, #368]	; (80063bc <HAL_I2C_Init+0x274>)
 800624c:	428b      	cmp	r3, r1
 800624e:	d819      	bhi.n	8006284 <HAL_I2C_Init+0x13c>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1e59      	subs	r1, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fbb1 f3f3 	udiv	r3, r1, r3
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006264:	400b      	ands	r3, r1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_I2C_Init+0x138>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1e59      	subs	r1, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	fbb1 f3f3 	udiv	r3, r1, r3
 8006278:	3301      	adds	r3, #1
 800627a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627e:	e051      	b.n	8006324 <HAL_I2C_Init+0x1dc>
 8006280:	2304      	movs	r3, #4
 8006282:	e04f      	b.n	8006324 <HAL_I2C_Init+0x1dc>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d111      	bne.n	80062b0 <HAL_I2C_Init+0x168>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1e58      	subs	r0, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	440b      	add	r3, r1
 800629a:	fbb0 f3f3 	udiv	r3, r0, r3
 800629e:	3301      	adds	r3, #1
 80062a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e012      	b.n	80062d6 <HAL_I2C_Init+0x18e>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1e58      	subs	r0, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	0099      	lsls	r1, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062c6:	3301      	adds	r3, #1
 80062c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_Init+0x196>
 80062da:	2301      	movs	r3, #1
 80062dc:	e022      	b.n	8006324 <HAL_I2C_Init+0x1dc>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10e      	bne.n	8006304 <HAL_I2C_Init+0x1bc>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1e58      	subs	r0, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6859      	ldr	r1, [r3, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	440b      	add	r3, r1
 80062f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f8:	3301      	adds	r3, #1
 80062fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006302:	e00f      	b.n	8006324 <HAL_I2C_Init+0x1dc>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1e58      	subs	r0, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	0099      	lsls	r1, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	fbb0 f3f3 	udiv	r3, r0, r3
 800631a:	3301      	adds	r3, #1
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	6809      	ldr	r1, [r1, #0]
 8006328:	4313      	orrs	r3, r2
 800632a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6911      	ldr	r1, [r2, #16]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68d2      	ldr	r2, [r2, #12]
 800635e:	4311      	orrs	r1, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	430b      	orrs	r3, r1
 8006366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	000186a0 	.word	0x000186a0
 80063c0:	001e847f 	.word	0x001e847f
 80063c4:	003d08ff 	.word	0x003d08ff
 80063c8:	431bde83 	.word	0x431bde83
 80063cc:	10624dd3 	.word	0x10624dd3

080063d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	461a      	mov	r2, r3
 80063dc:	460b      	mov	r3, r1
 80063de:	817b      	strh	r3, [r7, #10]
 80063e0:	4613      	mov	r3, r2
 80063e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063e4:	f7fe ff90 	bl	8005308 <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	f040 80e0 	bne.w	80065b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2319      	movs	r3, #25
 80063fe:	2201      	movs	r2, #1
 8006400:	4970      	ldr	r1, [pc, #448]	; (80065c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f001 ffb6 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800640e:	2302      	movs	r3, #2
 8006410:	e0d3      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_I2C_Master_Transmit+0x50>
 800641c:	2302      	movs	r3, #2
 800641e:	e0cc      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d007      	beq.n	8006446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2221      	movs	r2, #33	; 0x21
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2210      	movs	r2, #16
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	893a      	ldrh	r2, [r7, #8]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a50      	ldr	r2, [pc, #320]	; (80065c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 fe46 	bl	8008120 <I2C_MasterRequestWrite>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e08d      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064b4:	e066      	b.n	8006584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	6a39      	ldr	r1, [r7, #32]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f002 f830 	bl	8008520 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00d      	beq.n	80064e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d107      	bne.n	80064de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e06b      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d11b      	bne.n	8006558 <HAL_I2C_Master_Transmit+0x188>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d017      	beq.n	8006558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	6a39      	ldr	r1, [r7, #32]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f002 f820 	bl	80085a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b04      	cmp	r3, #4
 800656e:	d107      	bne.n	8006580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e01a      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d194      	bne.n	80064b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e000      	b.n	80065ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	00100002 	.word	0x00100002
 80065c8:	ffff0000 	.word	0xffff0000

080065cc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	817b      	strh	r3, [r7, #10]
 80065dc:	4613      	mov	r3, r2
 80065de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f040 80a6 	bne.w	8006742 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d005      	beq.n	8006612 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d002      	beq.n	8006612 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d130      	bne.n	8006674 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006612:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	4a4e      	ldr	r2, [pc, #312]	; (8006754 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	0a1a      	lsrs	r2, r3, #8
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009a      	lsls	r2, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3b01      	subs	r3, #1
 8006630:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e06e      	b.n	8006744 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d0db      	beq.n	800662c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800667e:	2302      	movs	r3, #2
 8006680:	e060      	b.n	8006744 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d007      	beq.n	80066a8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2221      	movs	r2, #33	; 0x21
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2210      	movs	r2, #16
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	893a      	ldrh	r2, [r7, #8]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80066ea:	897a      	ldrh	r2, [r7, #10]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b11      	cmp	r3, #17
 80066fa:	d10c      	bne.n	8006716 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006702:	d003      	beq.n	800670c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800670a:	d101      	bne.n	8006710 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8006710:	2300      	movs	r3, #0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006724:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800673c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	200000e0 	.word	0x200000e0
 8006754:	14f8b589 	.word	0x14f8b589

08006758 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	; 0x24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	461a      	mov	r2, r3
 8006764:	460b      	mov	r3, r1
 8006766:	817b      	strh	r3, [r7, #10]
 8006768:	4613      	mov	r3, r2
 800676a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006774:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006778:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b20      	cmp	r3, #32
 8006784:	f040 80da 	bne.w	800693c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006796:	d005      	beq.n	80067a4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b08      	cmp	r3, #8
 800679c:	d002      	beq.n	80067a4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d130      	bne.n	8006806 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80067a4:	4b69      	ldr	r3, [pc, #420]	; (800694c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	08db      	lsrs	r3, r3, #3
 80067aa:	4a69      	ldr	r2, [pc, #420]	; (8006950 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	0a1a      	lsrs	r2, r3, #8
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009a      	lsls	r2, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0a2      	b.n	800693e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b02      	cmp	r3, #2
 8006804:	d0db      	beq.n	80067be <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8006810:	2302      	movs	r3, #2
 8006812:	e094      	b.n	800693e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d007      	beq.n	800683a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006848:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2222      	movs	r2, #34	; 0x22
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2210      	movs	r2, #16
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800687c:	897a      	ldrh	r2, [r7, #10]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d126      	bne.n	80068e0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2b20      	cmp	r3, #32
 8006896:	d002      	beq.n	800689e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b10      	cmp	r3, #16
 800689c:	d120      	bne.n	80068e0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b12      	cmp	r3, #18
 80068a2:	d114      	bne.n	80068ce <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b2:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c2:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ca:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80068cc:	e010      	b.n	80068f0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068dc:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80068de:	e007      	b.n	80068f0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ee:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b12      	cmp	r3, #18
 80068f4:	d10c      	bne.n	8006910 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068fc:	d003      	beq.n	8006906 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006904:	d101      	bne.n	800690a <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800690a:	2300      	movs	r3, #0
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	3724      	adds	r7, #36	; 0x24
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	200000e0 	.word	0x200000e0
 8006950:	14f8b589 	.word	0x14f8b589

08006954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006974:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b10      	cmp	r3, #16
 8006982:	d003      	beq.n	800698c <HAL_I2C_EV_IRQHandler+0x38>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	f040 80c1 	bne.w	8006b0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069ac:	d003      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x62>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_EV_IRQHandler+0x66>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <HAL_I2C_EV_IRQHandler+0x68>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f000 8132 	beq.w	8006c26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x92>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a5b      	lsrs	r3, r3, #9
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fe84 	bl	80086e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fd83 	bl	80074ea <I2C_Master_SB>
 80069e4:	e092      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0xb2>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fdf9 	bl	80075f6 <I2C_Master_ADD10>
 8006a04:	e082      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_I2C_EV_IRQHandler+0xd2>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fe13 	bl	800764a <I2C_Master_ADDR>
 8006a24:	e072      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	089b      	lsrs	r3, r3, #2
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03b      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a40:	f000 80f3 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	09db      	lsrs	r3, r3, #7
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	0a9b      	lsrs	r3, r3, #10
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9f3 	bl	8006e54 <I2C_MasterTransmit_TXE>
 8006a6e:	e04d      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80d6 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	0a5b      	lsrs	r3, r3, #9
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80cf 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b21      	cmp	r3, #33	; 0x21
 8006a90:	d103      	bne.n	8006a9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa7a 	bl	8006f8c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a98:	e0c7      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	f040 80c4 	bne.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fae8 	bl	8007078 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa8:	e0bf      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab8:	f000 80b7 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00f      	beq.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	0a9b      	lsrs	r3, r3, #10
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fb5d 	bl	80071a0 <I2C_MasterReceive_RXNE>
 8006ae6:	e011      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 809a 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8093 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc06 	bl	8007316 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0a:	e08e      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b0c:	e08d      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61fb      	str	r3, [r7, #28]
 8006b1e:	e007      	b.n	8006b30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d012      	beq.n	8006b62 <HAL_I2C_EV_IRQHandler+0x20e>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	0a5b      	lsrs	r3, r3, #9
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ffc4 	bl	8007ae8 <I2C_Slave_ADDR>
 8006b60:	e066      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x22e>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fffe 	bl	8007b7c <I2C_Slave_STOPF>
 8006b80:	e056      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d002      	beq.n	8006b8e <HAL_I2C_EV_IRQHandler+0x23a>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b29      	cmp	r3, #41	; 0x29
 8006b8c:	d125      	bne.n	8006bda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	0a9b      	lsrs	r3, r3, #10
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 feda 	bl	800796c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb8:	e039      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d033      	beq.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02d      	beq.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ff07 	bl	80079e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd8:	e029      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	099b      	lsrs	r3, r3, #6
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	0a9b      	lsrs	r3, r3, #10
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	089b      	lsrs	r3, r3, #2
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 ff12 	bl	8007a28 <I2C_SlaveReceive_RXNE>
 8006c04:	e014      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	0a5b      	lsrs	r3, r3, #9
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 ff40 	bl	8007aa4 <I2C_SlaveReceive_BTF>
 8006c24:	e004      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08a      	sub	sp, #40	; 0x28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <HAL_I2C_ER_IRQHandler+0x4e>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	0a5b      	lsrs	r3, r3, #9
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00e      	beq.n	8006cae <HAL_I2C_ER_IRQHandler+0x78>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006cac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	0a9b      	lsrs	r3, r3, #10
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d03f      	beq.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d039      	beq.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006cc6:	7efb      	ldrb	r3, [r7, #27]
 8006cc8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ce0:	7ebb      	ldrb	r3, [r7, #26]
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d112      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	2b21      	cmp	r3, #33	; 0x21
 8006cf0:	d008      	beq.n	8006d04 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	2b29      	cmp	r3, #41	; 0x29
 8006cf6:	d005      	beq.n	8006d04 <HAL_I2C_ER_IRQHandler+0xce>
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	2b28      	cmp	r3, #40	; 0x28
 8006cfc:	d106      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b21      	cmp	r3, #33	; 0x21
 8006d02:	d103      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f869 	bl	8007ddc <I2C_Slave_AF>
 8006d0a:	e016      	b.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d14:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	f043 0304 	orr.w	r3, r3, #4
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d1e:	7efb      	ldrb	r3, [r7, #27]
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d002      	beq.n	8006d2a <HAL_I2C_ER_IRQHandler+0xf4>
 8006d24:	7efb      	ldrb	r3, [r7, #27]
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d107      	bne.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d38:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	0adb      	lsrs	r3, r3, #11
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x12e>
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d62:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f8a0 	bl	8007ebc <I2C_ITError>
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
 8006de0:	4613      	mov	r3, r2
 8006de2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d150      	bne.n	8006f1c <I2C_MasterTransmit_TXE+0xc8>
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b21      	cmp	r3, #33	; 0x21
 8006e7e:	d14d      	bne.n	8006f1c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d01d      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d01a      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e92:	d016      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ea2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2211      	movs	r2, #17
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ff62 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ec0:	e060      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ed0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d107      	bne.n	8006f0c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff7d 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f0a:	e03b      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff35 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f1a:	e033      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b21      	cmp	r3, #33	; 0x21
 8006f20:	d005      	beq.n	8006f2e <I2C_MasterTransmit_TXE+0xda>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d12d      	bne.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b22      	cmp	r3, #34	; 0x22
 8006f2c:	d12a      	bne.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d108      	bne.n	8006f4a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f46:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f48:	e01c      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d103      	bne.n	8006f5e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f88e 	bl	8007078 <I2C_MemoryTransmit_TXE_BTF>
}
 8006f5c:	e012      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f82:	e7ff      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b21      	cmp	r3, #33	; 0x21
 8006fa4:	d164      	bne.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fd4:	e04c      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d01d      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d01a      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fe8:	d016      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ff8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2211      	movs	r2, #17
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff feb7 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
}
 8007016:	e02b      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007026:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007036:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d107      	bne.n	8007062 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fed2 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
}
 8007060:	e006      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fe8a 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11d      	bne.n	80070cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10b      	bne.n	80070b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a8:	1c9a      	adds	r2, r3, #2
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80070ae:	e073      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	121b      	asrs	r3, r3, #8
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ca:	e065      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10b      	bne.n	80070ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ea:	e055      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d151      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b22      	cmp	r3, #34	; 0x22
 80070f8:	d10d      	bne.n	8007116 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007108:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007114:	e040      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d015      	beq.n	800714c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d112      	bne.n	800714c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800714a:	e025      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d120      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b21      	cmp	r3, #33	; 0x21
 800715a:	d11d      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800716a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fe36 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b22      	cmp	r3, #34	; 0x22
 80071b2:	f040 80ac 	bne.w	800730e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d921      	bls.n	8007208 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	f040 808c 	bne.w	800730e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007204:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007206:	e082      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	2b02      	cmp	r3, #2
 800720e:	d075      	beq.n	80072fc <I2C_MasterReceive_RXNE+0x15c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d002      	beq.n	800721c <I2C_MasterReceive_RXNE+0x7c>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d16f      	bne.n	80072fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fa01 	bl	8008624 <I2C_WaitOnSTOPRequestThroughIT>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d142      	bne.n	80072ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007246:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d10a      	bne.n	8007298 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fdc1 	bl	8006e18 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007296:	e03a      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2212      	movs	r2, #18
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fd76 	bl	8006d98 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072ac:	e02f      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fd99 	bl	8006e2c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072fa:	e008      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	605a      	str	r2, [r3, #4]
}
 800730c:	e7ff      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b04      	cmp	r3, #4
 800732c:	d11b      	bne.n	8007366 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007364:	e0bd      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d129      	bne.n	80073c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00a      	beq.n	800739c <I2C_MasterReceive_BTF+0x86>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d007      	beq.n	800739c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073c2:	e08e      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d176      	bne.n	80074bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d002      	beq.n	80073da <I2C_MasterReceive_BTF+0xc4>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d108      	bne.n	80073ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e019      	b.n	8007420 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d002      	beq.n	80073f8 <I2C_MasterReceive_BTF+0xe2>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d108      	bne.n	800740a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e00a      	b.n	8007420 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d007      	beq.n	8007420 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800747a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d10a      	bne.n	80074a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fcba 	bl	8006e18 <HAL_I2C_MemRxCpltCallback>
}
 80074a4:	e01d      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2212      	movs	r2, #18
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fc6f 	bl	8006d98 <HAL_I2C_MasterRxCpltCallback>
}
 80074ba:	e012      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d117      	bne.n	800752e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007516:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007518:	e067      	b.n	80075ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]
}
 800752c:	e05d      	b.n	80075ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007536:	d133      	bne.n	80075a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b21      	cmp	r3, #33	; 0x21
 8007542:	d109      	bne.n	8007558 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007554:	611a      	str	r2, [r3, #16]
 8007556:	e008      	b.n	800756a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <I2C_Master_SB+0x92>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d032      	beq.n	80075ea <I2C_Master_SB+0x100>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d02d      	beq.n	80075ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800759c:	605a      	str	r2, [r3, #4]
}
 800759e:	e024      	b.n	80075ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10e      	bne.n	80075c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	11db      	asrs	r3, r3, #7
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0306 	and.w	r3, r3, #6
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f063 030f 	orn	r3, r3, #15
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	611a      	str	r2, [r3, #16]
}
 80075c4:	e011      	b.n	80075ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d10d      	bne.n	80075ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	11db      	asrs	r3, r3, #7
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0306 	and.w	r3, r3, #6
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f063 030e 	orn	r3, r3, #14
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <I2C_Master_ADD10+0x26>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d108      	bne.n	800762e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <I2C_Master_ADD10+0x48>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763c:	605a      	str	r2, [r3, #4]
  }
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800764a:	b480      	push	{r7}
 800764c:	b091      	sub	sp, #68	; 0x44
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b22      	cmp	r3, #34	; 0x22
 8007672:	f040 8169 	bne.w	8007948 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <I2C_Master_ADDR+0x54>
 800767e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d10b      	bne.n	800769e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007686:	2300      	movs	r3, #0
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	633b      	str	r3, [r7, #48]	; 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	633b      	str	r3, [r7, #48]	; 0x30
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	e160      	b.n	8007960 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11d      	bne.n	80076e2 <I2C_Master_ADDR+0x98>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076ae:	d118      	bne.n	80076e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	651a      	str	r2, [r3, #80]	; 0x50
 80076e0:	e13e      	b.n	8007960 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d113      	bne.n	8007714 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e115      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	f040 808a 	bne.w	8007834 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007726:	d137      	bne.n	8007798 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d113      	bne.n	8007770 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	e0e7      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	623b      	str	r3, [r7, #32]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	623b      	str	r3, [r7, #32]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	623b      	str	r3, [r7, #32]
 8007784:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e0d3      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	2b08      	cmp	r3, #8
 800779c:	d02e      	beq.n	80077fc <I2C_Master_ADDR+0x1b2>
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d02b      	beq.n	80077fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	2b12      	cmp	r3, #18
 80077a8:	d102      	bne.n	80077b0 <I2C_Master_ADDR+0x166>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d125      	bne.n	80077fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d00e      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d00b      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d008      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e007      	b.n	80077e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	e0a1      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780c:	2300      	movs	r3, #0
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e085      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d14d      	bne.n	80078da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b04      	cmp	r3, #4
 8007842:	d016      	beq.n	8007872 <I2C_Master_ADDR+0x228>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	2b02      	cmp	r3, #2
 8007848:	d013      	beq.n	8007872 <I2C_Master_ADDR+0x228>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b10      	cmp	r3, #16
 800784e:	d010      	beq.n	8007872 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e007      	b.n	8007882 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007880:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007890:	d117      	bne.n	80078c2 <I2C_Master_ADDR+0x278>
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007898:	d00b      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b01      	cmp	r3, #1
 800789e:	d008      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d005      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d002      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d107      	bne.n	80078c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	e032      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f8:	d117      	bne.n	800792a <I2C_Master_ADDR+0x2e0>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007900:	d00b      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b01      	cmp	r3, #1
 8007906:	d008      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	2b08      	cmp	r3, #8
 800790c:	d005      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b10      	cmp	r3, #16
 8007912:	d002      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b20      	cmp	r3, #32
 8007918:	d107      	bne.n	800792a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007928:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007946:	e00b      	b.n	8007960 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
}
 800795e:	e7ff      	b.n	8007960 <I2C_Master_ADDR+0x316>
 8007960:	bf00      	nop
 8007962:	3744      	adds	r7, #68	; 0x44
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02b      	beq.n	80079de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d114      	bne.n	80079de <I2C_SlaveTransmit_TXE+0x72>
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b29      	cmp	r3, #41	; 0x29
 80079b8:	d111      	bne.n	80079de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2228      	movs	r2, #40	; 0x28
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff f9e7 	bl	8006dac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02c      	beq.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d114      	bne.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d111      	bne.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2222      	movs	r2, #34	; 0x22
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2228      	movs	r2, #40	; 0x28
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f992 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b02:	2b28      	cmp	r3, #40	; 0x28
 8007b04:	d127      	bne.n	8007b56 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	089b      	lsrs	r3, r3, #2
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	09db      	lsrs	r3, r3, #7
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	81bb      	strh	r3, [r7, #12]
 8007b38:	e002      	b.n	8007b40 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b48:	89ba      	ldrh	r2, [r7, #12]
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff f940 	bl	8006dd4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b54:	e00e      	b.n	8007b74 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	60bb      	str	r3, [r7, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	60bb      	str	r3, [r7, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd8:	d172      	bne.n	8007cc0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b22      	cmp	r3, #34	; 0x22
 8007bde:	d002      	beq.n	8007be6 <I2C_Slave_STOPF+0x6a>
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b2a      	cmp	r3, #42	; 0x2a
 8007be4:	d135      	bne.n	8007c52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0204 	orr.w	r2, r3, #4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd ffd6 	bl	8005bd0 <HAL_DMA_GetState>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d049      	beq.n	8007cbe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	4a69      	ldr	r2, [pc, #420]	; (8007dd4 <I2C_Slave_STOPF+0x258>)
 8007c30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fe1e 	bl	8005878 <HAL_DMA_Abort_IT>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d03d      	beq.n	8007cbe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c50:	e035      	b.n	8007cbe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0204 	orr.w	r2, r3, #4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd ffa0 	bl	8005bd0 <HAL_DMA_GetState>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d014      	beq.n	8007cc0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	4a4e      	ldr	r2, [pc, #312]	; (8007dd4 <I2C_Slave_STOPF+0x258>)
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fde8 	bl	8005878 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	e000      	b.n	8007cc0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cbe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d03e      	beq.n	8007d48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d112      	bne.n	8007cfe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691a      	ldr	r2, [r3, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d112      	bne.n	8007d32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f043 0204 	orr.w	r2, r3, #4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f8b3 	bl	8007ebc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d56:	e039      	b.n	8007dcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d109      	bne.n	8007d72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2228      	movs	r2, #40	; 0x28
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f827 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b28      	cmp	r3, #40	; 0x28
 8007d7c:	d111      	bne.n	8007da2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <I2C_Slave_STOPF+0x25c>)
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff f828 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
}
 8007da0:	e014      	b.n	8007dcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	2b22      	cmp	r3, #34	; 0x22
 8007da8:	d002      	beq.n	8007db0 <I2C_Slave_STOPF+0x234>
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	2b22      	cmp	r3, #34	; 0x22
 8007dae:	d10d      	bne.n	8007dcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe fffa 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	08008225 	.word	0x08008225
 8007dd8:	ffff0000 	.word	0xffff0000

08007ddc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d002      	beq.n	8007dfe <I2C_Slave_AF+0x22>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d129      	bne.n	8007e52 <I2C_Slave_AF+0x76>
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b28      	cmp	r3, #40	; 0x28
 8007e02:	d126      	bne.n	8007e52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <I2C_Slave_AF+0xdc>)
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fe ffd0 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007e50:	e02e      	b.n	8007eb0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b21      	cmp	r3, #33	; 0x21
 8007e56:	d126      	bne.n	8007ea6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <I2C_Slave_AF+0xdc>)
 8007e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2221      	movs	r2, #33	; 0x21
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fe ff84 	bl	8006dac <HAL_I2C_SlaveTxCpltCallback>
}
 8007ea4:	e004      	b.n	8007eb0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eae:	615a      	str	r2, [r3, #20]
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	ffff0000 	.word	0xffff0000

08007ebc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d002      	beq.n	8007ee0 <I2C_ITError+0x24>
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d10a      	bne.n	8007ef6 <I2C_ITError+0x3a>
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b22      	cmp	r3, #34	; 0x22
 8007ee4:	d107      	bne.n	8007ef6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007efc:	2b28      	cmp	r3, #40	; 0x28
 8007efe:	d107      	bne.n	8007f10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2228      	movs	r2, #40	; 0x28
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f0e:	e015      	b.n	8007f3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1e:	d00a      	beq.n	8007f36 <I2C_ITError+0x7a>
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b60      	cmp	r3, #96	; 0x60
 8007f24:	d007      	beq.n	8007f36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4a:	d162      	bne.n	8008012 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d020      	beq.n	8007fac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <I2C_ITError+0x25c>)
 8007f70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd fc7e 	bl	8005878 <HAL_DMA_Abort_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8089 	beq.w	8008096 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4798      	blx	r3
 8007faa:	e074      	b.n	8008096 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	4a59      	ldr	r2, [pc, #356]	; (8008118 <I2C_ITError+0x25c>)
 8007fb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fc5d 	bl	8005878 <HAL_DMA_Abort_IT>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d068      	beq.n	8008096 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d10b      	bne.n	8007fea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0201 	bic.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	e041      	b.n	8008096 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b60      	cmp	r3, #96	; 0x60
 800801c:	d125      	bne.n	800806a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d10b      	bne.n	8008052 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe feec 	bl	8006e40 <HAL_I2C_AbortCpltCallback>
 8008068:	e015      	b.n	8008096 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d10b      	bne.n	8008090 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7fe fecb 	bl	8006e2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10e      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d113      	bne.n	8008110 <I2C_ITError+0x254>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b28      	cmp	r3, #40	; 0x28
 80080ec:	d110      	bne.n	8008110 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	; (800811c <I2C_ITError+0x260>)
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fe fe70 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	08008225 	.word	0x08008225
 800811c:	ffff0000 	.word	0xffff0000

08008120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d006      	beq.n	800814a <I2C_MasterRequestWrite+0x2a>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d003      	beq.n	800814a <I2C_MasterRequestWrite+0x2a>
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008148:	d108      	bne.n	800815c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e00b      	b.n	8008174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008160:	2b12      	cmp	r3, #18
 8008162:	d107      	bne.n	8008174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f8f7 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00d      	beq.n	80081a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819a:	d103      	bne.n	80081a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e035      	b.n	8008214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b0:	d108      	bne.n	80081c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081b2:	897b      	ldrh	r3, [r7, #10]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081c0:	611a      	str	r2, [r3, #16]
 80081c2:	e01b      	b.n	80081fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081c4:	897b      	ldrh	r3, [r7, #10]
 80081c6:	11db      	asrs	r3, r3, #7
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0306 	and.w	r3, r3, #6
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f063 030f 	orn	r3, r3, #15
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	490e      	ldr	r1, [pc, #56]	; (800821c <I2C_MasterRequestWrite+0xfc>)
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 f91d 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e010      	b.n	8008214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081f2:	897b      	ldrh	r3, [r7, #10]
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4907      	ldr	r1, [pc, #28]	; (8008220 <I2C_MasterRequestWrite+0x100>)
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f90d 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	00010008 	.word	0x00010008
 8008220:	00010002 	.word	0x00010002

08008224 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800823e:	4b4b      	ldr	r3, [pc, #300]	; (800836c <I2C_DMAAbort+0x148>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	4a4a      	ldr	r2, [pc, #296]	; (8008370 <I2C_DMAAbort+0x14c>)
 8008246:	fba2 2303 	umull	r2, r3, r2, r3
 800824a:	0a1a      	lsrs	r2, r3, #8
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	00da      	lsls	r2, r3, #3
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f043 0220 	orr.w	r2, r3, #32
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800826a:	e00a      	b.n	8008282 <I2C_DMAAbort+0x5e>
    }
    count--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3b01      	subs	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008280:	d0ea      	beq.n	8008258 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	2200      	movs	r2, #0
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	2200      	movs	r2, #0
 80082a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2200      	movs	r2, #0
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	2200      	movs	r2, #0
 80082c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	2200      	movs	r2, #0
 80082d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b60      	cmp	r3, #96	; 0x60
 80082f2:	d10e      	bne.n	8008312 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f7fe fd98 	bl	8006e40 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008310:	e027      	b.n	8008362 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008312:	7cfb      	ldrb	r3, [r7, #19]
 8008314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008318:	2b28      	cmp	r3, #40	; 0x28
 800831a:	d117      	bne.n	800834c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800833a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2200      	movs	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2228      	movs	r2, #40	; 0x28
 8008346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800834a:	e007      	b.n	800835c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800835c:	6978      	ldr	r0, [r7, #20]
 800835e:	f7fe fd65 	bl	8006e2c <HAL_I2C_ErrorCallback>
}
 8008362:	bf00      	nop
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200000e0 	.word	0x200000e0
 8008370:	14f8b589 	.word	0x14f8b589

08008374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008384:	e025      	b.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d021      	beq.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838e:	f7fc ffbb 	bl	8005308 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d116      	bne.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e023      	b.n	800841a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10d      	bne.n	80083f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	43da      	mvns	r2, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4013      	ands	r3, r2
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	e00c      	b.n	8008412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	43da      	mvns	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4013      	ands	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	bf0c      	ite	eq
 800840a:	2301      	moveq	r3, #1
 800840c:	2300      	movne	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	429a      	cmp	r2, r3
 8008416:	d0b6      	beq.n	8008386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008430:	e051      	b.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008440:	d123      	bne.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800845a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f043 0204 	orr.w	r2, r3, #4
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e046      	b.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d021      	beq.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008492:	f7fc ff39 	bl	8005308 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d116      	bne.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0220 	orr.w	r2, r3, #32
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e020      	b.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d10c      	bne.n	80084fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	43da      	mvns	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bf14      	ite	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	2300      	moveq	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	e00b      	b.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	43da      	mvns	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4013      	ands	r3, r2
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d18d      	bne.n	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800852c:	e02d      	b.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f8aa 	bl	8008688 <I2C_IsAcknowledgeFailed>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e02d      	b.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d021      	beq.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008546:	f7fc fedf 	bl	8005308 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d302      	bcc.n	800855c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d116      	bne.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e007      	b.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d1ca      	bne.n	800852e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085ae:	e02d      	b.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f869 	bl	8008688 <I2C_IsAcknowledgeFailed>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e02d      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d021      	beq.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085c8:	f7fc fe9e 	bl	8005308 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d302      	bcc.n	80085de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d116      	bne.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	f043 0220 	orr.w	r2, r3, #32
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e007      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b04      	cmp	r3, #4
 8008618:	d1ca      	bne.n	80085b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008630:	4b13      	ldr	r3, [pc, #76]	; (8008680 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	08db      	lsrs	r3, r3, #3
 8008636:	4a13      	ldr	r2, [pc, #76]	; (8008684 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	0a1a      	lsrs	r2, r3, #8
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b01      	subs	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d107      	bne.n	8008662 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e008      	b.n	8008674 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800866c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008670:	d0e9      	beq.n	8008646 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	200000e0 	.word	0x200000e0
 8008684:	14f8b589 	.word	0x14f8b589

08008688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869e:	d11b      	bne.n	80086d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	f043 0204 	orr.w	r2, r3, #4
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80086f6:	d103      	bne.n	8008700 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80086fe:	e007      	b.n	8008710 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008708:	d102      	bne.n	8008710 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2208      	movs	r2, #8
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e267      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d075      	beq.n	8008826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800873a:	4b88      	ldr	r3, [pc, #544]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b04      	cmp	r3, #4
 8008744:	d00c      	beq.n	8008760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008746:	4b85      	ldr	r3, [pc, #532]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800874e:	2b08      	cmp	r3, #8
 8008750:	d112      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008752:	4b82      	ldr	r3, [pc, #520]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800875e:	d10b      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008760:	4b7e      	ldr	r3, [pc, #504]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d05b      	beq.n	8008824 <HAL_RCC_OscConfig+0x108>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d157      	bne.n	8008824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e242      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008780:	d106      	bne.n	8008790 <HAL_RCC_OscConfig+0x74>
 8008782:	4b76      	ldr	r3, [pc, #472]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a75      	ldr	r2, [pc, #468]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e01d      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008798:	d10c      	bne.n	80087b4 <HAL_RCC_OscConfig+0x98>
 800879a:	4b70      	ldr	r3, [pc, #448]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a6f      	ldr	r2, [pc, #444]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4b6d      	ldr	r3, [pc, #436]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a6c      	ldr	r2, [pc, #432]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e00b      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 80087b4:	4b69      	ldr	r3, [pc, #420]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a68      	ldr	r2, [pc, #416]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	4b66      	ldr	r3, [pc, #408]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a65      	ldr	r2, [pc, #404]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d013      	beq.n	80087fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d4:	f7fc fd98 	bl	8005308 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087dc:	f7fc fd94 	bl	8005308 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b64      	cmp	r3, #100	; 0x64
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e207      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ee:	4b5b      	ldr	r3, [pc, #364]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0f0      	beq.n	80087dc <HAL_RCC_OscConfig+0xc0>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087fc:	f7fc fd84 	bl	8005308 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008804:	f7fc fd80 	bl	8005308 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b64      	cmp	r3, #100	; 0x64
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e1f3      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008816:	4b51      	ldr	r3, [pc, #324]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0xe8>
 8008822:	e000      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d063      	beq.n	80088fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008832:	4b4a      	ldr	r3, [pc, #296]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 030c 	and.w	r3, r3, #12
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800883e:	4b47      	ldr	r3, [pc, #284]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008846:	2b08      	cmp	r3, #8
 8008848:	d11c      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800884a:	4b44      	ldr	r3, [pc, #272]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d116      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008856:	4b41      	ldr	r3, [pc, #260]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d001      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e1c7      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4937      	ldr	r1, [pc, #220]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800887e:	4313      	orrs	r3, r2
 8008880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008882:	e03a      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d020      	beq.n	80088ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800888c:	4b34      	ldr	r3, [pc, #208]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008892:	f7fc fd39 	bl	8005308 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800889a:	f7fc fd35 	bl	8005308 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e1a8      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ac:	4b2b      	ldr	r3, [pc, #172]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4925      	ldr	r1, [pc, #148]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]
 80088cc:	e015      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7fc fd18 	bl	8005308 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088dc:	f7fc fd14 	bl	8005308 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e187      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d036      	beq.n	8008974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 8008910:	2201      	movs	r2, #1
 8008912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008914:	f7fc fcf8 	bl	8005308 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800891c:	f7fc fcf4 	bl	8005308 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e167      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800892e:	4b0b      	ldr	r3, [pc, #44]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0x200>
 800893a:	e01b      	b.n	8008974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008942:	f7fc fce1 	bl	8005308 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008948:	e00e      	b.n	8008968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800894a:	f7fc fcdd 	bl	8005308 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d907      	bls.n	8008968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e150      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 800895c:	40023800 	.word	0x40023800
 8008960:	42470000 	.word	0x42470000
 8008964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008968:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1ea      	bne.n	800894a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8097 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008986:	4b81      	ldr	r3, [pc, #516]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10f      	bne.n	80089b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	4b7d      	ldr	r3, [pc, #500]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6413      	str	r3, [r2, #64]	; 0x40
 80089a2:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ae:	2301      	movs	r3, #1
 80089b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b2:	4b77      	ldr	r3, [pc, #476]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d118      	bne.n	80089f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a73      	ldr	r2, [pc, #460]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ca:	f7fc fc9d 	bl	8005308 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d2:	f7fc fc99 	bl	8005308 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e10c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e4:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f0      	beq.n	80089d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d106      	bne.n	8008a06 <HAL_RCC_OscConfig+0x2ea>
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	4a63      	ldr	r2, [pc, #396]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	6713      	str	r3, [r2, #112]	; 0x70
 8008a04:	e01c      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d10c      	bne.n	8008a28 <HAL_RCC_OscConfig+0x30c>
 8008a0e:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	6713      	str	r3, [r2, #112]	; 0x70
 8008a1a:	4b5c      	ldr	r3, [pc, #368]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a5b      	ldr	r2, [pc, #364]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a20:	f043 0301 	orr.w	r3, r3, #1
 8008a24:	6713      	str	r3, [r2, #112]	; 0x70
 8008a26:	e00b      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2c:	4a57      	ldr	r2, [pc, #348]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	6713      	str	r3, [r2, #112]	; 0x70
 8008a34:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	4a54      	ldr	r2, [pc, #336]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a3a:	f023 0304 	bic.w	r3, r3, #4
 8008a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d015      	beq.n	8008a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a48:	f7fc fc5e 	bl	8005308 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4e:	e00a      	b.n	8008a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a50:	f7fc fc5a 	bl	8005308 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e0cb      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a66:	4b49      	ldr	r3, [pc, #292]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0ee      	beq.n	8008a50 <HAL_RCC_OscConfig+0x334>
 8008a72:	e014      	b.n	8008a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a74:	f7fc fc48 	bl	8005308 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fc fc44 	bl	8005308 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e0b5      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a92:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1ee      	bne.n	8008a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	4a38      	ldr	r2, [pc, #224]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80a1 	beq.w	8008bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008aba:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 030c 	and.w	r3, r3, #12
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d05c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d141      	bne.n	8008b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad4:	f7fc fc18 	bl	8005308 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fc fc14 	bl	8005308 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e087      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	3b01      	subs	r3, #1
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	491b      	ldr	r1, [pc, #108]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2a:	f7fc fbed 	bl	8005308 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b32:	f7fc fbe9 	bl	8005308 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e05c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <HAL_RCC_OscConfig+0x416>
 8008b50:	e054      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b58:	f7fc fbd6 	bl	8005308 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fc fbd2 	bl	8005308 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e045      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x444>
 8008b7e:	e03d      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d107      	bne.n	8008b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e038      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40007000 	.word	0x40007000
 8008b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <HAL_RCC_OscConfig+0x4ec>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d028      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d121      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d11a      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bc8:	4013      	ands	r3, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d111      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	3b01      	subs	r3, #1
 8008be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d107      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d001      	beq.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40023800 	.word	0x40023800

08008c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0cc      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c20:	4b68      	ldr	r3, [pc, #416]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d90c      	bls.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2e:	4b65      	ldr	r3, [pc, #404]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c36:	4b63      	ldr	r3, [pc, #396]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d001      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0b8      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d020      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c60:	4b59      	ldr	r3, [pc, #356]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	4a58      	ldr	r2, [pc, #352]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c78:	4b53      	ldr	r3, [pc, #332]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4a52      	ldr	r2, [pc, #328]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c84:	4b50      	ldr	r3, [pc, #320]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	494d      	ldr	r1, [pc, #308]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d044      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d107      	bne.n	8008cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d119      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e07f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d003      	beq.n	8008cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d107      	bne.n	8008cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cca:	4b3f      	ldr	r3, [pc, #252]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e06f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e067      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 0203 	bic.w	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4934      	ldr	r1, [pc, #208]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cfc:	f7fc fb04 	bl	8005308 <HAL_GetTick>
 8008d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d04:	f7fc fb00 	bl	8005308 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e04f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1a:	4b2b      	ldr	r3, [pc, #172]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 020c 	and.w	r2, r3, #12
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d1eb      	bne.n	8008d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d2c:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d20c      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d42:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d001      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e032      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4916      	ldr	r1, [pc, #88]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d92:	f000 f821 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	490a      	ldr	r1, [pc, #40]	; (8008dcc <HAL_RCC_ClockConfig+0x1c0>)
 8008da4:	5ccb      	ldrb	r3, [r1, r3]
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fc fa64 	bl	8005280 <HAL_InitTick>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023c00 	.word	0x40023c00
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	0800cc30 	.word	0x0800cc30
 8008dd0:	200000e0 	.word	0x200000e0
 8008dd4:	200000e4 	.word	0x200000e4

08008dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b094      	sub	sp, #80	; 0x50
 8008dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
 8008de4:	2300      	movs	r3, #0
 8008de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de8:	2300      	movs	r3, #0
 8008dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008df0:	4b79      	ldr	r3, [pc, #484]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 030c 	and.w	r3, r3, #12
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d00d      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x40>
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	f200 80e1 	bhi.w	8008fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0x34>
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d003      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e0a:	e0db      	b.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e0c:	4b73      	ldr	r3, [pc, #460]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8008e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e10:	e0db      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e12:	4b73      	ldr	r3, [pc, #460]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e16:	e0d8      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e18:	4b6f      	ldr	r3, [pc, #444]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e22:	4b6d      	ldr	r3, [pc, #436]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d063      	beq.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2e:	4b6a      	ldr	r3, [pc, #424]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	2200      	movs	r2, #0
 8008e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e40:	633b      	str	r3, [r7, #48]	; 0x30
 8008e42:	2300      	movs	r3, #0
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
 8008e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	f04f 0000 	mov.w	r0, #0
 8008e52:	f04f 0100 	mov.w	r1, #0
 8008e56:	0159      	lsls	r1, r3, #5
 8008e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e5c:	0150      	lsls	r0, r2, #5
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4621      	mov	r1, r4
 8008e64:	1a51      	subs	r1, r2, r1
 8008e66:	6139      	str	r1, [r7, #16]
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	018b      	lsls	r3, r1, #6
 8008e80:	4651      	mov	r1, sl
 8008e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e86:	4651      	mov	r1, sl
 8008e88:	018a      	lsls	r2, r1, #6
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8008e90:	4659      	mov	r1, fp
 8008e92:	eb63 0901 	sbc.w	r9, r3, r1
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eaa:	4690      	mov	r8, r2
 8008eac:	4699      	mov	r9, r3
 8008eae:	4623      	mov	r3, r4
 8008eb0:	eb18 0303 	adds.w	r3, r8, r3
 8008eb4:	60bb      	str	r3, [r7, #8]
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	eb49 0303 	adc.w	r3, r9, r3
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008eca:	4629      	mov	r1, r5
 8008ecc:	024b      	lsls	r3, r1, #9
 8008ece:	4621      	mov	r1, r4
 8008ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	024a      	lsls	r2, r1, #9
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4619      	mov	r1, r3
 8008edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ede:	2200      	movs	r2, #0
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ee8:	f7f7 fe52 	bl	8000b90 <__aeabi_uldivmod>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e058      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ef6:	4b38      	ldr	r3, [pc, #224]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	099b      	lsrs	r3, r3, #6
 8008efc:	2200      	movs	r2, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	4611      	mov	r1, r2
 8008f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f06:	623b      	str	r3, [r7, #32]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	0159      	lsls	r1, r3, #5
 8008f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f22:	0150      	lsls	r0, r2, #5
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4641      	mov	r1, r8
 8008f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f2e:	4649      	mov	r1, r9
 8008f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f48:	ebb2 040a 	subs.w	r4, r2, sl
 8008f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	00eb      	lsls	r3, r5, #3
 8008f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f5e:	00e2      	lsls	r2, r4, #3
 8008f60:	4614      	mov	r4, r2
 8008f62:	461d      	mov	r5, r3
 8008f64:	4643      	mov	r3, r8
 8008f66:	18e3      	adds	r3, r4, r3
 8008f68:	603b      	str	r3, [r7, #0]
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	eb45 0303 	adc.w	r3, r5, r3
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f7e:	4629      	mov	r1, r5
 8008f80:	028b      	lsls	r3, r1, #10
 8008f82:	4621      	mov	r1, r4
 8008f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f88:	4621      	mov	r1, r4
 8008f8a:	028a      	lsls	r2, r1, #10
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f92:	2200      	movs	r2, #0
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	61fa      	str	r2, [r7, #28]
 8008f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f9c:	f7f7 fdf8 	bl	8000b90 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fc2:	e002      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8008fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3750      	adds	r7, #80	; 0x50
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	00f42400 	.word	0x00f42400
 8008fe0:	007a1200 	.word	0x007a1200

08008fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fe8:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fea:	681b      	ldr	r3, [r3, #0]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	200000e0 	.word	0x200000e0

08008ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009000:	f7ff fff0 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 8009004:	4602      	mov	r2, r0
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	0a9b      	lsrs	r3, r3, #10
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	4903      	ldr	r1, [pc, #12]	; (8009020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009012:	5ccb      	ldrb	r3, [r1, r3]
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40023800 	.word	0x40023800
 8009020:	0800cc40 	.word	0x0800cc40

08009024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009028:	f7ff ffdc 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 800902c:	4602      	mov	r2, r0
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	0b5b      	lsrs	r3, r3, #13
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	4903      	ldr	r1, [pc, #12]	; (8009048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800903a:	5ccb      	ldrb	r3, [r1, r3]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40023800 	.word	0x40023800
 8009048:	0800cc40 	.word	0x0800cc40

0800904c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e041      	b.n	80090e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fb fe86 	bl	8004d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f000 fde2 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d001      	beq.n	8009104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e03c      	b.n	800917e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a1e      	ldr	r2, [pc, #120]	; (800918c <HAL_TIM_Base_Start+0xa0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d018      	beq.n	8009148 <HAL_TIM_Base_Start+0x5c>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d013      	beq.n	8009148 <HAL_TIM_Base_Start+0x5c>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <HAL_TIM_Base_Start+0xa4>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00e      	beq.n	8009148 <HAL_TIM_Base_Start+0x5c>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a19      	ldr	r2, [pc, #100]	; (8009194 <HAL_TIM_Base_Start+0xa8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d009      	beq.n	8009148 <HAL_TIM_Base_Start+0x5c>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a17      	ldr	r2, [pc, #92]	; (8009198 <HAL_TIM_Base_Start+0xac>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d004      	beq.n	8009148 <HAL_TIM_Base_Start+0x5c>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a16      	ldr	r2, [pc, #88]	; (800919c <HAL_TIM_Base_Start+0xb0>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d111      	bne.n	800916c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b06      	cmp	r3, #6
 8009158:	d010      	beq.n	800917c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0201 	orr.w	r2, r2, #1
 8009168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916a:	e007      	b.n	800917c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40010000 	.word	0x40010000
 8009190:	40000400 	.word	0x40000400
 8009194:	40000800 	.word	0x40000800
 8009198:	40000c00 	.word	0x40000c00
 800919c:	40014000 	.word	0x40014000

080091a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d001      	beq.n	80091b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e044      	b.n	8009242 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <HAL_TIM_Base_Start_IT+0xb0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d018      	beq.n	800920c <HAL_TIM_Base_Start_IT+0x6c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e2:	d013      	beq.n	800920c <HAL_TIM_Base_Start_IT+0x6c>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <HAL_TIM_Base_Start_IT+0xb4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00e      	beq.n	800920c <HAL_TIM_Base_Start_IT+0x6c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a19      	ldr	r2, [pc, #100]	; (8009258 <HAL_TIM_Base_Start_IT+0xb8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d009      	beq.n	800920c <HAL_TIM_Base_Start_IT+0x6c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a17      	ldr	r2, [pc, #92]	; (800925c <HAL_TIM_Base_Start_IT+0xbc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d004      	beq.n	800920c <HAL_TIM_Base_Start_IT+0x6c>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a16      	ldr	r2, [pc, #88]	; (8009260 <HAL_TIM_Base_Start_IT+0xc0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d111      	bne.n	8009230 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b06      	cmp	r3, #6
 800921c:	d010      	beq.n	8009240 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0201 	orr.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800922e:	e007      	b.n	8009240 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800
 800925c:	40000c00 	.word	0x40000c00
 8009260:	40014000 	.word	0x40014000

08009264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e041      	b.n	80092fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f839 	bl	8009302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f000 fcd6 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
	...

08009318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <HAL_TIM_PWM_Start+0x24>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e022      	b.n	8009382 <HAL_TIM_PWM_Start+0x6a>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b04      	cmp	r3, #4
 8009340:	d109      	bne.n	8009356 <HAL_TIM_PWM_Start+0x3e>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	bf14      	ite	ne
 800934e:	2301      	movne	r3, #1
 8009350:	2300      	moveq	r3, #0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	e015      	b.n	8009382 <HAL_TIM_PWM_Start+0x6a>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b08      	cmp	r3, #8
 800935a:	d109      	bne.n	8009370 <HAL_TIM_PWM_Start+0x58>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b01      	cmp	r3, #1
 8009366:	bf14      	ite	ne
 8009368:	2301      	movne	r3, #1
 800936a:	2300      	moveq	r3, #0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	e008      	b.n	8009382 <HAL_TIM_PWM_Start+0x6a>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e068      	b.n	800945c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <HAL_TIM_PWM_Start+0x82>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009398:	e013      	b.n	80093c2 <HAL_TIM_PWM_Start+0xaa>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d104      	bne.n	80093aa <HAL_TIM_PWM_Start+0x92>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a8:	e00b      	b.n	80093c2 <HAL_TIM_PWM_Start+0xaa>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d104      	bne.n	80093ba <HAL_TIM_PWM_Start+0xa2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093b8:	e003      	b.n	80093c2 <HAL_TIM_PWM_Start+0xaa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2201      	movs	r2, #1
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fee8 	bl	800a1a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a23      	ldr	r2, [pc, #140]	; (8009464 <HAL_TIM_PWM_Start+0x14c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d107      	bne.n	80093ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <HAL_TIM_PWM_Start+0x14c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d018      	beq.n	8009426 <HAL_TIM_PWM_Start+0x10e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d013      	beq.n	8009426 <HAL_TIM_PWM_Start+0x10e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a19      	ldr	r2, [pc, #100]	; (8009468 <HAL_TIM_PWM_Start+0x150>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00e      	beq.n	8009426 <HAL_TIM_PWM_Start+0x10e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a17      	ldr	r2, [pc, #92]	; (800946c <HAL_TIM_PWM_Start+0x154>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d009      	beq.n	8009426 <HAL_TIM_PWM_Start+0x10e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a16      	ldr	r2, [pc, #88]	; (8009470 <HAL_TIM_PWM_Start+0x158>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_TIM_PWM_Start+0x10e>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a14      	ldr	r2, [pc, #80]	; (8009474 <HAL_TIM_PWM_Start+0x15c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d111      	bne.n	800944a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b06      	cmp	r3, #6
 8009436:	d010      	beq.n	800945a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0201 	orr.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009448:	e007      	b.n	800945a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0201 	orr.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	40010000 	.word	0x40010000
 8009468:	40000400 	.word	0x40000400
 800946c:	40000800 	.word	0x40000800
 8009470:	40000c00 	.word	0x40000c00
 8009474:	40014000 	.word	0x40014000

08009478 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e097      	b.n	80095bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7fb fcd3 	bl	8004e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6812      	ldr	r2, [r2, #0]
 80094b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094bc:	f023 0307 	bic.w	r3, r3, #7
 80094c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f000 fbc1 	bl	8009c54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fa:	f023 0303 	bic.w	r3, r3, #3
 80094fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	4313      	orrs	r3, r2
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	4313      	orrs	r3, r2
 8009510:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009518:	f023 030c 	bic.w	r3, r3, #12
 800951c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	021b      	lsls	r3, r3, #8
 8009534:	4313      	orrs	r3, r2
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	011a      	lsls	r2, r3, #4
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	031b      	lsls	r3, r3, #12
 8009548:	4313      	orrs	r3, r2
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009556:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4313      	orrs	r3, r2
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d110      	bne.n	8009616 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d102      	bne.n	8009600 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80095fa:	7b7b      	ldrb	r3, [r7, #13]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d001      	beq.n	8009604 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e069      	b.n	80096d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009614:	e031      	b.n	800967a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b04      	cmp	r3, #4
 800961a:	d110      	bne.n	800963e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d102      	bne.n	8009628 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009622:	7b3b      	ldrb	r3, [r7, #12]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d001      	beq.n	800962c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e055      	b.n	80096d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800963c:	e01d      	b.n	800967a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d108      	bne.n	8009656 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d105      	bne.n	8009656 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800964a:	7b7b      	ldrb	r3, [r7, #13]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d102      	bne.n	8009656 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009650:	7b3b      	ldrb	r3, [r7, #12]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d001      	beq.n	800965a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e03e      	b.n	80096d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2202      	movs	r2, #2
 800966e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <HAL_TIM_Encoder_Start+0xc4>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b04      	cmp	r3, #4
 8009684:	d008      	beq.n	8009698 <HAL_TIM_Encoder_Start+0xd4>
 8009686:	e00f      	b.n	80096a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2201      	movs	r2, #1
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd85 	bl	800a1a0 <TIM_CCxChannelCmd>
      break;
 8009696:	e016      	b.n	80096c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2201      	movs	r2, #1
 800969e:	2104      	movs	r1, #4
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fd7d 	bl	800a1a0 <TIM_CCxChannelCmd>
      break;
 80096a6:	e00e      	b.n	80096c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2201      	movs	r2, #1
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fd75 	bl	800a1a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2201      	movs	r2, #1
 80096bc:	2104      	movs	r1, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fd6e 	bl	800a1a0 <TIM_CCxChannelCmd>
      break;
 80096c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d122      	bne.n	800973c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b02      	cmp	r3, #2
 8009702:	d11b      	bne.n	800973c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0202 	mvn.w	r2, #2
 800970c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa77 	bl	8009c16 <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa69 	bl	8009c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa7a 	bl	8009c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b04      	cmp	r3, #4
 8009748:	d122      	bne.n	8009790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d11b      	bne.n	8009790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0204 	mvn.w	r2, #4
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2202      	movs	r2, #2
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa4d 	bl	8009c16 <HAL_TIM_IC_CaptureCallback>
 800977c:	e005      	b.n	800978a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa3f 	bl	8009c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa50 	bl	8009c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b08      	cmp	r3, #8
 800979c:	d122      	bne.n	80097e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d11b      	bne.n	80097e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0208 	mvn.w	r2, #8
 80097b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2204      	movs	r2, #4
 80097ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa23 	bl	8009c16 <HAL_TIM_IC_CaptureCallback>
 80097d0:	e005      	b.n	80097de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fa15 	bl	8009c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa26 	bl	8009c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	2b10      	cmp	r3, #16
 80097f0:	d122      	bne.n	8009838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d11b      	bne.n	8009838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0210 	mvn.w	r2, #16
 8009808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2208      	movs	r2, #8
 800980e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9f9 	bl	8009c16 <HAL_TIM_IC_CaptureCallback>
 8009824:	e005      	b.n	8009832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9eb 	bl	8009c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f9fc 	bl	8009c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	d10e      	bne.n	8009864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b01      	cmp	r3, #1
 8009852:	d107      	bne.n	8009864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0201 	mvn.w	r2, #1
 800985c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f8 f974 	bl	8001b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986e:	2b80      	cmp	r3, #128	; 0x80
 8009870:	d10e      	bne.n	8009890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987c:	2b80      	cmp	r3, #128	; 0x80
 800987e:	d107      	bne.n	8009890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fd78 	bl	800a380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989a:	2b40      	cmp	r3, #64	; 0x40
 800989c:	d10e      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	d107      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9c1 	bl	8009c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	d10e      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d107      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0220 	mvn.w	r2, #32
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fd42 	bl	800a36c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800990a:	2302      	movs	r3, #2
 800990c:	e0ae      	b.n	8009a6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b0c      	cmp	r3, #12
 800991a:	f200 809f 	bhi.w	8009a5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009959 	.word	0x08009959
 8009928:	08009a5d 	.word	0x08009a5d
 800992c:	08009a5d 	.word	0x08009a5d
 8009930:	08009a5d 	.word	0x08009a5d
 8009934:	08009999 	.word	0x08009999
 8009938:	08009a5d 	.word	0x08009a5d
 800993c:	08009a5d 	.word	0x08009a5d
 8009940:	08009a5d 	.word	0x08009a5d
 8009944:	080099db 	.word	0x080099db
 8009948:	08009a5d 	.word	0x08009a5d
 800994c:	08009a5d 	.word	0x08009a5d
 8009950:	08009a5d 	.word	0x08009a5d
 8009954:	08009a1b 	.word	0x08009a1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f9f8 	bl	8009d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	699a      	ldr	r2, [r3, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0208 	orr.w	r2, r2, #8
 8009972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699a      	ldr	r2, [r3, #24]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0204 	bic.w	r2, r2, #4
 8009982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6999      	ldr	r1, [r3, #24]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	691a      	ldr	r2, [r3, #16]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	619a      	str	r2, [r3, #24]
      break;
 8009996:	e064      	b.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fa3e 	bl	8009e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699a      	ldr	r2, [r3, #24]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699a      	ldr	r2, [r3, #24]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6999      	ldr	r1, [r3, #24]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	021a      	lsls	r2, r3, #8
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	619a      	str	r2, [r3, #24]
      break;
 80099d8:	e043      	b.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68b9      	ldr	r1, [r7, #8]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fa89 	bl	8009ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69da      	ldr	r2, [r3, #28]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0208 	orr.w	r2, r2, #8
 80099f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69da      	ldr	r2, [r3, #28]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0204 	bic.w	r2, r2, #4
 8009a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69d9      	ldr	r1, [r3, #28]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	691a      	ldr	r2, [r3, #16]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	61da      	str	r2, [r3, #28]
      break;
 8009a18:	e023      	b.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fad3 	bl	8009fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69da      	ldr	r2, [r3, #28]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69da      	ldr	r2, [r3, #28]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69d9      	ldr	r1, [r3, #28]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	021a      	lsls	r2, r3, #8
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	61da      	str	r2, [r3, #28]
      break;
 8009a5a:	e002      	b.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIM_ConfigClockSource+0x1c>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e0b4      	b.n	8009bfa <HAL_TIM_ConfigClockSource+0x186>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac8:	d03e      	beq.n	8009b48 <HAL_TIM_ConfigClockSource+0xd4>
 8009aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ace:	f200 8087 	bhi.w	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad6:	f000 8086 	beq.w	8009be6 <HAL_TIM_ConfigClockSource+0x172>
 8009ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ade:	d87f      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae0:	2b70      	cmp	r3, #112	; 0x70
 8009ae2:	d01a      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0xa6>
 8009ae4:	2b70      	cmp	r3, #112	; 0x70
 8009ae6:	d87b      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae8:	2b60      	cmp	r3, #96	; 0x60
 8009aea:	d050      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x11a>
 8009aec:	2b60      	cmp	r3, #96	; 0x60
 8009aee:	d877      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009af0:	2b50      	cmp	r3, #80	; 0x50
 8009af2:	d03c      	beq.n	8009b6e <HAL_TIM_ConfigClockSource+0xfa>
 8009af4:	2b50      	cmp	r3, #80	; 0x50
 8009af6:	d873      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009af8:	2b40      	cmp	r3, #64	; 0x40
 8009afa:	d058      	beq.n	8009bae <HAL_TIM_ConfigClockSource+0x13a>
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d86f      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b00:	2b30      	cmp	r3, #48	; 0x30
 8009b02:	d064      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x15a>
 8009b04:	2b30      	cmp	r3, #48	; 0x30
 8009b06:	d86b      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d060      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x15a>
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d867      	bhi.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d05c      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x15a>
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d05a      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x15a>
 8009b18:	e062      	b.n	8009be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6899      	ldr	r1, [r3, #8]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f000 fb19 	bl	800a160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	609a      	str	r2, [r3, #8]
      break;
 8009b46:	e04f      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6899      	ldr	r1, [r3, #8]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f000 fb02 	bl	800a160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b6a:	609a      	str	r2, [r3, #8]
      break;
 8009b6c:	e03c      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6859      	ldr	r1, [r3, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f000 fa76 	bl	800a06c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2150      	movs	r1, #80	; 0x50
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 facf 	bl	800a12a <TIM_ITRx_SetConfig>
      break;
 8009b8c:	e02c      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6859      	ldr	r1, [r3, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f000 fa95 	bl	800a0ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2160      	movs	r1, #96	; 0x60
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fabf 	bl	800a12a <TIM_ITRx_SetConfig>
      break;
 8009bac:	e01c      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	6859      	ldr	r1, [r3, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f000 fa56 	bl	800a06c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2140      	movs	r1, #64	; 0x40
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 faaf 	bl	800a12a <TIM_ITRx_SetConfig>
      break;
 8009bcc:	e00c      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f000 faa6 	bl	800a12a <TIM_ITRx_SetConfig>
      break;
 8009bde:	e003      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	73fb      	strb	r3, [r7, #15]
      break;
 8009be4:	e000      	b.n	8009be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a34      	ldr	r2, [pc, #208]	; (8009d38 <TIM_Base_SetConfig+0xe4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d00f      	beq.n	8009c8c <TIM_Base_SetConfig+0x38>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c72:	d00b      	beq.n	8009c8c <TIM_Base_SetConfig+0x38>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a31      	ldr	r2, [pc, #196]	; (8009d3c <TIM_Base_SetConfig+0xe8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d007      	beq.n	8009c8c <TIM_Base_SetConfig+0x38>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a30      	ldr	r2, [pc, #192]	; (8009d40 <TIM_Base_SetConfig+0xec>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d003      	beq.n	8009c8c <TIM_Base_SetConfig+0x38>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <TIM_Base_SetConfig+0xf0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d108      	bne.n	8009c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a25      	ldr	r2, [pc, #148]	; (8009d38 <TIM_Base_SetConfig+0xe4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d01b      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cac:	d017      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a22      	ldr	r2, [pc, #136]	; (8009d3c <TIM_Base_SetConfig+0xe8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <TIM_Base_SetConfig+0xec>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <TIM_Base_SetConfig+0xf0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a1f      	ldr	r2, [pc, #124]	; (8009d48 <TIM_Base_SetConfig+0xf4>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a1e      	ldr	r2, [pc, #120]	; (8009d4c <TIM_Base_SetConfig+0xf8>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	; (8009d50 <TIM_Base_SetConfig+0xfc>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d108      	bne.n	8009cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a08      	ldr	r2, [pc, #32]	; (8009d38 <TIM_Base_SetConfig+0xe4>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d103      	bne.n	8009d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	615a      	str	r2, [r3, #20]
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40010000 	.word	0x40010000
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40000c00 	.word	0x40000c00
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	40014400 	.word	0x40014400
 8009d50:	40014800 	.word	0x40014800

08009d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f023 0201 	bic.w	r2, r3, #1
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0303 	bic.w	r3, r3, #3
 8009d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f023 0302 	bic.w	r3, r3, #2
 8009d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1c      	ldr	r2, [pc, #112]	; (8009e1c <TIM_OC1_SetConfig+0xc8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10c      	bne.n	8009dca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f023 0308 	bic.w	r3, r3, #8
 8009db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 0304 	bic.w	r3, r3, #4
 8009dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <TIM_OC1_SetConfig+0xc8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d111      	bne.n	8009df6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	621a      	str	r2, [r3, #32]
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	40010000 	.word	0x40010000

08009e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	f023 0210 	bic.w	r2, r3, #16
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f023 0320 	bic.w	r3, r3, #32
 8009e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1e      	ldr	r2, [pc, #120]	; (8009ef4 <TIM_OC2_SetConfig+0xd4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10d      	bne.n	8009e9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a15      	ldr	r2, [pc, #84]	; (8009ef4 <TIM_OC2_SetConfig+0xd4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d113      	bne.n	8009ecc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	621a      	str	r2, [r3, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40010000 	.word	0x40010000

08009ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a1d      	ldr	r2, [pc, #116]	; (8009fc8 <TIM_OC3_SetConfig+0xd0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d10d      	bne.n	8009f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a14      	ldr	r2, [pc, #80]	; (8009fc8 <TIM_OC3_SetConfig+0xd0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d113      	bne.n	8009fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	621a      	str	r2, [r3, #32]
}
 8009fbc:	bf00      	nop
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	40010000 	.word	0x40010000

08009fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	031b      	lsls	r3, r3, #12
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a10      	ldr	r2, [pc, #64]	; (800a068 <TIM_OC4_SetConfig+0x9c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d109      	bne.n	800a040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	019b      	lsls	r3, r3, #6
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	621a      	str	r2, [r3, #32]
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	40010000 	.word	0x40010000

0800a06c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	f023 0201 	bic.w	r2, r3, #1
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f023 030a 	bic.w	r3, r3, #10
 800a0a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b087      	sub	sp, #28
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f023 0210 	bic.w	r2, r3, #16
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	031b      	lsls	r3, r3, #12
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	621a      	str	r2, [r3, #32]
}
 800a11e:	bf00      	nop
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4313      	orrs	r3, r2
 800a148:	f043 0307 	orr.w	r3, r3, #7
 800a14c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	bf00      	nop
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a17a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	021a      	lsls	r2, r3, #8
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	431a      	orrs	r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4313      	orrs	r3, r2
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	609a      	str	r2, [r3, #8]
}
 800a194:	bf00      	nop
 800a196:	371c      	adds	r7, #28
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f003 031f 	and.w	r3, r3, #31
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1a      	ldr	r2, [r3, #32]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	401a      	ands	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1a      	ldr	r2, [r3, #32]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f003 031f 	and.w	r3, r3, #31
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	621a      	str	r2, [r3, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
	...

0800a1ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a200:	2302      	movs	r3, #2
 800a202:	e050      	b.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a1c      	ldr	r2, [pc, #112]	; (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d018      	beq.n	800a27a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a250:	d013      	beq.n	800a27a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d00e      	beq.n	800a27a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a16      	ldr	r2, [pc, #88]	; (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d009      	beq.n	800a27a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a15      	ldr	r2, [pc, #84]	; (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d004      	beq.n	800a27a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d10c      	bne.n	800a294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	40010000 	.word	0x40010000
 800a2b8:	40000400 	.word	0x40000400
 800a2bc:	40000800 	.word	0x40000800
 800a2c0:	40000c00 	.word	0x40000c00
 800a2c4:	40014000 	.word	0x40014000

0800a2c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e03d      	b.n	800a360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	4313      	orrs	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4313      	orrs	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e03f      	b.n	800a426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d106      	bne.n	800a3c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7fa fdc8 	bl	8004f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2224      	movs	r2, #36	; 0x24
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 ffd7 	bl	800b38c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	691a      	ldr	r2, [r3, #16]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695a      	ldr	r2, [r3, #20]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a40c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08c      	sub	sp, #48	; 0x30
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b20      	cmp	r3, #32
 800a448:	d165      	bne.n	800a516 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <HAL_UART_Transmit_DMA+0x26>
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e05e      	b.n	800a518 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a460:	2b01      	cmp	r3, #1
 800a462:	d101      	bne.n	800a468 <HAL_UART_Transmit_DMA+0x38>
 800a464:	2302      	movs	r3, #2
 800a466:	e057      	b.n	800a518 <HAL_UART_Transmit_DMA+0xe8>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	88fa      	ldrh	r2, [r7, #6]
 800a480:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2221      	movs	r2, #33	; 0x21
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	4a22      	ldr	r2, [pc, #136]	; (800a520 <HAL_UART_Transmit_DMA+0xf0>)
 800a496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49c:	4a21      	ldr	r2, [pc, #132]	; (800a524 <HAL_UART_Transmit_DMA+0xf4>)
 800a49e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a4:	4a20      	ldr	r2, [pc, #128]	; (800a528 <HAL_UART_Transmit_DMA+0xf8>)
 800a4a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a4b0:	f107 0308 	add.w	r3, r7, #8
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	6819      	ldr	r1, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	88fb      	ldrh	r3, [r7, #6]
 800a4c8:	f7fb f90e 	bl	80056e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	3314      	adds	r3, #20
 800a4fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fe:	627a      	str	r2, [r7, #36]	; 0x24
 800a500:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	6a39      	ldr	r1, [r7, #32]
 800a504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e5      	bne.n	800a4de <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	e000      	b.n	800a518 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a516:	2302      	movs	r3, #2
  }
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3730      	adds	r7, #48	; 0x30
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	0800ac25 	.word	0x0800ac25
 800a524:	0800acbf 	.word	0x0800acbf
 800a528:	0800ae37 	.word	0x0800ae37

0800a52c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b20      	cmp	r3, #32
 800a544:	d11d      	bne.n	800a582 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <HAL_UART_Receive_DMA+0x26>
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e016      	b.n	800a584 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_UART_Receive_DMA+0x38>
 800a560:	2302      	movs	r3, #2
 800a562:	e00f      	b.n	800a584 <HAL_UART_Receive_DMA+0x58>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	461a      	mov	r2, r3
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fca7 	bl	800aecc <UART_Start_Receive_DMA>
 800a57e:	4603      	mov	r3, r0
 800a580:	e000      	b.n	800a584 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a582:	2302      	movs	r3, #2
  }
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b090      	sub	sp, #64	; 0x40
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a594:	2300      	movs	r3, #0
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	bf0c      	ite	eq
 800a5a6:	2301      	moveq	r3, #1
 800a5a8:	2300      	movne	r3, #0
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b21      	cmp	r3, #33	; 0x21
 800a5b8:	d128      	bne.n	800a60c <HAL_UART_DMAStop+0x80>
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d025      	beq.n	800a60c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3314      	adds	r3, #20
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	623b      	str	r3, [r7, #32]
   return(result);
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3314      	adds	r3, #20
 800a5de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5e0:	633a      	str	r2, [r7, #48]	; 0x30
 800a5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e5      	bne.n	800a5c0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a600:	4618      	mov	r0, r3
 800a602:	f7fb f8c9 	bl	8005798 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fcfe 	bl	800b008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	bf0c      	ite	eq
 800a61a:	2301      	moveq	r3, #1
 800a61c:	2300      	movne	r3, #0
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b22      	cmp	r3, #34	; 0x22
 800a62c:	d128      	bne.n	800a680 <HAL_UART_DMAStop+0xf4>
 800a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d025      	beq.n	800a680 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3314      	adds	r3, #20
 800a63a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	60fb      	str	r3, [r7, #12]
   return(result);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3314      	adds	r3, #20
 800a652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a654:	61fa      	str	r2, [r7, #28]
 800a656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	69b9      	ldr	r1, [r7, #24]
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	617b      	str	r3, [r7, #20]
   return(result);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e5      	bne.n	800a634 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	4618      	mov	r0, r3
 800a676:	f7fb f88f 	bl	8005798 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fcec 	bl	800b058 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3740      	adds	r7, #64	; 0x40
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b0ba      	sub	sp, #232	; 0xe8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10f      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
 800a6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fd93 	bl	800b216 <UART_Receive_IT>
      return;
 800a6f0:	e256      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80de 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
 800a6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80d1 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
 800a722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	f043 0201 	orr.w	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
 800a746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0202 	orr.w	r2, r3, #2
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
 800a76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	f043 0204 	orr.w	r2, r3, #4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a786:	f003 0308 	and.w	r3, r3, #8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d011      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
 800a78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f043 0208 	orr.w	r2, r3, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 81ed 	beq.w	800ab96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
 800a7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fd1e 	bl	800b216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	2b40      	cmp	r3, #64	; 0x40
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <HAL_UART_IRQHandler+0x17a>
 800a7fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d04f      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fc26 	bl	800b058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d141      	bne.n	800a89e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3314      	adds	r3, #20
 800a820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a846:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a84a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d9      	bne.n	800a81a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	4a7d      	ldr	r2, [pc, #500]	; (800aa68 <HAL_UART_IRQHandler+0x3dc>)
 800a874:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fa fffc 	bl	8005878 <HAL_DMA_Abort_IT>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a894:	e00e      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9ae 	bl	800abf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89c:	e00a      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f9aa 	bl	800abf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	e006      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f9a6 	bl	800abf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8b2:	e170      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b4:	bf00      	nop
    return;
 800a8b6:	e16e      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	f040 814a 	bne.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8143 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 813c 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	f040 80b4 	bne.w	800aa6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8140 	beq.w	800ab9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a922:	429a      	cmp	r2, r3
 800a924:	f080 8139 	bcs.w	800ab9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a92e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	f000 8088 	beq.w	800aa4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	330c      	adds	r3, #12
 800a944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a95c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	330c      	adds	r3, #12
 800a966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a96a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a96e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1d9      	bne.n	800a93e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e1      	bne.n	800a98a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3314      	adds	r3, #20
 800a9cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	330c      	adds	r3, #12
 800aa12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa30:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e3      	bne.n	800aa0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fa fea5 	bl	8005798 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f8d4 	bl	800ac0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa64:	e099      	b.n	800ab9a <HAL_UART_IRQHandler+0x50e>
 800aa66:	bf00      	nop
 800aa68:	0800b11f 	.word	0x0800b11f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 808b 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8086 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	330c      	adds	r3, #12
 800aab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aab6:	647a      	str	r2, [r7, #68]	; 0x44
 800aab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e3      	bne.n	800aa92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3314      	adds	r3, #20
 800aad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	623b      	str	r3, [r7, #32]
   return(result);
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3314      	adds	r3, #20
 800aaea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaee:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e3      	bne.n	800aaca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0310 	bic.w	r3, r3, #16
 800ab26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab34:	61fa      	str	r2, [r7, #28]
 800ab36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69b9      	ldr	r1, [r7, #24]
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	617b      	str	r3, [r7, #20]
   return(result);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e3      	bne.n	800ab10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f85c 	bl	800ac0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab54:	e023      	b.n	800ab9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
 800ab62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fae9 	bl	800b146 <UART_Transmit_IT>
    return;
 800ab74:	e014      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00e      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
 800ab82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d008      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fb29 	bl	800b1e6 <UART_EndTransmit_IT>
    return;
 800ab94:	e004      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    return;
 800ab96:	bf00      	nop
 800ab98:	e002      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9a:	bf00      	nop
 800ab9c:	e000      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9e:	bf00      	nop
  }
}
 800aba0:	37e8      	adds	r7, #232	; 0xe8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b090      	sub	sp, #64	; 0x40
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d137      	bne.n	800acb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ac40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac42:	2200      	movs	r2, #0
 800ac44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3314      	adds	r3, #20
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	623b      	str	r3, [r7, #32]
   return(result);
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3314      	adds	r3, #20
 800ac64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac66:	633a      	str	r2, [r7, #48]	; 0x30
 800ac68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e5      	bne.n	800ac46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	330c      	adds	r3, #12
 800ac80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
 800ac92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9a:	61fa      	str	r2, [r7, #28]
 800ac9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9e:	69b9      	ldr	r1, [r7, #24]
 800aca0:	69fa      	ldr	r2, [r7, #28]
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	617b      	str	r3, [r7, #20]
   return(result);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1e5      	bne.n	800ac7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acae:	e002      	b.n	800acb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800acb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800acb2:	f7ff ff79 	bl	800aba8 <HAL_UART_TxCpltCallback>
}
 800acb6:	bf00      	nop
 800acb8:	3740      	adds	r7, #64	; 0x40
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff ff75 	bl	800abbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b09c      	sub	sp, #112	; 0x70
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d172      	bne.n	800addc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800acf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf8:	2200      	movs	r2, #0
 800acfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	330c      	adds	r3, #12
 800ad02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad06:	e853 3f00 	ldrex	r3, [r3]
 800ad0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	330c      	adds	r3, #12
 800ad1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e5      	bne.n	800acfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3314      	adds	r3, #20
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad42:	f023 0301 	bic.w	r3, r3, #1
 800ad46:	667b      	str	r3, [r7, #100]	; 0x64
 800ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3314      	adds	r3, #20
 800ad4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad50:	647a      	str	r2, [r7, #68]	; 0x44
 800ad52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e5      	bne.n	800ad30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3314      	adds	r3, #20
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	623b      	str	r3, [r7, #32]
   return(result);
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ad7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3314      	adds	r3, #20
 800ad82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad84:	633a      	str	r2, [r7, #48]	; 0x30
 800ad86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e5      	bne.n	800ad64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d119      	bne.n	800addc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	330c      	adds	r3, #12
 800adae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	e853 3f00 	ldrex	r3, [r3]
 800adb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 0310 	bic.w	r3, r3, #16
 800adbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adc8:	61fa      	str	r2, [r7, #28]
 800adca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	69b9      	ldr	r1, [r7, #24]
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	617b      	str	r3, [r7, #20]
   return(result);
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e5      	bne.n	800ada8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800addc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d106      	bne.n	800adf2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ade4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ade8:	4619      	mov	r1, r3
 800adea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800adec:	f7ff ff0e 	bl	800ac0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adf0:	e002      	b.n	800adf8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800adf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800adf4:	f7ff feec 	bl	800abd0 <HAL_UART_RxCpltCallback>
}
 800adf8:	bf00      	nop
 800adfa:	3770      	adds	r7, #112	; 0x70
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d108      	bne.n	800ae28 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae1a:	085b      	lsrs	r3, r3, #1
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	4619      	mov	r1, r3
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7ff fef3 	bl	800ac0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae26:	e002      	b.n	800ae2e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7ff fedb 	bl	800abe4 <HAL_UART_RxHalfCpltCallback>
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b80      	cmp	r3, #128	; 0x80
 800ae54:	bf0c      	ite	eq
 800ae56:	2301      	moveq	r3, #1
 800ae58:	2300      	movne	r3, #0
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b21      	cmp	r3, #33	; 0x21
 800ae68:	d108      	bne.n	800ae7c <UART_DMAError+0x46>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f000 f8c6 	bl	800b008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	bf0c      	ite	eq
 800ae8a:	2301      	moveq	r3, #1
 800ae8c:	2300      	movne	r3, #0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b22      	cmp	r3, #34	; 0x22
 800ae9c:	d108      	bne.n	800aeb0 <UART_DMAError+0x7a>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2200      	movs	r2, #0
 800aea8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aeaa:	68b8      	ldr	r0, [r7, #8]
 800aeac:	f000 f8d4 	bl	800b058 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb4:	f043 0210 	orr.w	r2, r3, #16
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aebc:	68b8      	ldr	r0, [r7, #8]
 800aebe:	f7ff fe9b 	bl	800abf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b098      	sub	sp, #96	; 0x60
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	4613      	mov	r3, r2
 800aed8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	88fa      	ldrh	r2, [r7, #6]
 800aee4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2222      	movs	r2, #34	; 0x22
 800aef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	4a40      	ldr	r2, [pc, #256]	; (800affc <UART_Start_Receive_DMA+0x130>)
 800aefa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	4a3f      	ldr	r2, [pc, #252]	; (800b000 <UART_Start_Receive_DMA+0x134>)
 800af02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af08:	4a3e      	ldr	r2, [pc, #248]	; (800b004 <UART_Start_Receive_DMA+0x138>)
 800af0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	2200      	movs	r2, #0
 800af12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af14:	f107 0308 	add.w	r3, r7, #8
 800af18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3304      	adds	r3, #4
 800af24:	4619      	mov	r1, r3
 800af26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	f7fa fbdc 	bl	80056e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af30:	2300      	movs	r3, #0
 800af32:	613b      	str	r3, [r7, #16]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	613b      	str	r3, [r7, #16]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d019      	beq.n	800af8a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	330c      	adds	r3, #12
 800af5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	330c      	adds	r3, #12
 800af74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af76:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e5      	bne.n	800af56 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3314      	adds	r3, #20
 800af90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	f043 0301 	orr.w	r3, r3, #1
 800afa0:	657b      	str	r3, [r7, #84]	; 0x54
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3314      	adds	r3, #20
 800afa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afaa:	63ba      	str	r2, [r7, #56]	; 0x38
 800afac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e5      	bne.n	800af8a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3314      	adds	r3, #20
 800afc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	617b      	str	r3, [r7, #20]
   return(result);
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd4:	653b      	str	r3, [r7, #80]	; 0x50
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3314      	adds	r3, #20
 800afdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afde:	627a      	str	r2, [r7, #36]	; 0x24
 800afe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6a39      	ldr	r1, [r7, #32]
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	61fb      	str	r3, [r7, #28]
   return(result);
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e5      	bne.n	800afbe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3760      	adds	r7, #96	; 0x60
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	0800acdb 	.word	0x0800acdb
 800b000:	0800ae01 	.word	0x0800ae01
 800b004:	0800ae37 	.word	0x0800ae37

0800b008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b008:	b480      	push	{r7}
 800b00a:	b089      	sub	sp, #36	; 0x24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	330c      	adds	r3, #12
 800b016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	330c      	adds	r3, #12
 800b02e:	69fa      	ldr	r2, [r7, #28]
 800b030:	61ba      	str	r2, [r7, #24]
 800b032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6979      	ldr	r1, [r7, #20]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	613b      	str	r3, [r7, #16]
   return(result);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e5      	bne.n	800b010 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2220      	movs	r2, #32
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b04c:	bf00      	nop
 800b04e:	3724      	adds	r7, #36	; 0x24
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b058:	b480      	push	{r7}
 800b05a:	b095      	sub	sp, #84	; 0x54
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	330c      	adds	r3, #12
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06a:	e853 3f00 	ldrex	r3, [r3]
 800b06e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	330c      	adds	r3, #12
 800b07e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b080:	643a      	str	r2, [r7, #64]	; 0x40
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e5      	bne.n	800b060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3314      	adds	r3, #20
 800b09a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	f023 0301 	bic.w	r3, r3, #1
 800b0aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3314      	adds	r3, #20
 800b0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e5      	bne.n	800b094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d119      	bne.n	800b104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	330c      	adds	r3, #12
 800b0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f023 0310 	bic.w	r3, r3, #16
 800b0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	330c      	adds	r3, #12
 800b0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0f0:	61ba      	str	r2, [r7, #24]
 800b0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e5      	bne.n	800b0d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b112:	bf00      	nop
 800b114:	3754      	adds	r7, #84	; 0x54
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff fd5d 	bl	800abf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b21      	cmp	r3, #33	; 0x21
 800b158:	d13e      	bne.n	800b1d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b162:	d114      	bne.n	800b18e <UART_Transmit_IT+0x48>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d110      	bne.n	800b18e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	1c9a      	adds	r2, r3, #2
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	621a      	str	r2, [r3, #32]
 800b18c:	e008      	b.n	800b1a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	1c59      	adds	r1, r3, #1
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6211      	str	r1, [r2, #32]
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10f      	bne.n	800b1d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e000      	b.n	800b1da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1d8:	2302      	movs	r3, #2
  }
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68da      	ldr	r2, [r3, #12]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2220      	movs	r2, #32
 800b202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fcce 	bl	800aba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b08c      	sub	sp, #48	; 0x30
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b22      	cmp	r3, #34	; 0x22
 800b228:	f040 80ab 	bne.w	800b382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b234:	d117      	bne.n	800b266 <UART_Receive_IT+0x50>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d113      	bne.n	800b266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	b29b      	uxth	r3, r3
 800b250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b254:	b29a      	uxth	r2, r3
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25e:	1c9a      	adds	r2, r3, #2
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	629a      	str	r2, [r3, #40]	; 0x28
 800b264:	e026      	b.n	800b2b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b278:	d007      	beq.n	800b28a <UART_Receive_IT+0x74>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <UART_Receive_IT+0x82>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	e008      	b.n	800b2aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d15a      	bne.n	800b37e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68da      	ldr	r2, [r3, #12]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f022 0220 	bic.w	r2, r2, #32
 800b2d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	695a      	ldr	r2, [r3, #20]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0201 	bic.w	r2, r2, #1
 800b2f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b304:	2b01      	cmp	r3, #1
 800b306:	d135      	bne.n	800b374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	330c      	adds	r3, #12
 800b314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	613b      	str	r3, [r7, #16]
   return(result);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f023 0310 	bic.w	r3, r3, #16
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	330c      	adds	r3, #12
 800b32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32e:	623a      	str	r2, [r7, #32]
 800b330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	69f9      	ldr	r1, [r7, #28]
 800b334:	6a3a      	ldr	r2, [r7, #32]
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b10      	cmp	r3, #16
 800b34e:	d10a      	bne.n	800b366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b350:	2300      	movs	r3, #0
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff fc4d 	bl	800ac0c <HAL_UARTEx_RxEventCallback>
 800b372:	e002      	b.n	800b37a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fc2b 	bl	800abd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	e002      	b.n	800b384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	e000      	b.n	800b384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b382:	2302      	movs	r3, #2
  }
}
 800b384:	4618      	mov	r0, r3
 800b386:	3730      	adds	r7, #48	; 0x30
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b38c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b390:	b0c0      	sub	sp, #256	; 0x100
 800b392:	af00      	add	r7, sp, #0
 800b394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a8:	68d9      	ldr	r1, [r3, #12]
 800b3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	ea40 0301 	orr.w	r3, r0, r1
 800b3b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b3e4:	f021 010c 	bic.w	r1, r1, #12
 800b3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3f2:	430b      	orrs	r3, r1
 800b3f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b406:	6999      	ldr	r1, [r3, #24]
 800b408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	ea40 0301 	orr.w	r3, r0, r1
 800b412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	4b8f      	ldr	r3, [pc, #572]	; (800b658 <UART_SetConfig+0x2cc>)
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d005      	beq.n	800b42c <UART_SetConfig+0xa0>
 800b420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b8d      	ldr	r3, [pc, #564]	; (800b65c <UART_SetConfig+0x2d0>)
 800b428:	429a      	cmp	r2, r3
 800b42a:	d104      	bne.n	800b436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b42c:	f7fd fdfa 	bl	8009024 <HAL_RCC_GetPCLK2Freq>
 800b430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b434:	e003      	b.n	800b43e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b436:	f7fd fde1 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800b43a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b448:	f040 810c 	bne.w	800b664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b44c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b450:	2200      	movs	r2, #0
 800b452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b45a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b45e:	4622      	mov	r2, r4
 800b460:	462b      	mov	r3, r5
 800b462:	1891      	adds	r1, r2, r2
 800b464:	65b9      	str	r1, [r7, #88]	; 0x58
 800b466:	415b      	adcs	r3, r3
 800b468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b46a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b46e:	4621      	mov	r1, r4
 800b470:	eb12 0801 	adds.w	r8, r2, r1
 800b474:	4629      	mov	r1, r5
 800b476:	eb43 0901 	adc.w	r9, r3, r1
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	f04f 0300 	mov.w	r3, #0
 800b482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b48a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b48e:	4690      	mov	r8, r2
 800b490:	4699      	mov	r9, r3
 800b492:	4623      	mov	r3, r4
 800b494:	eb18 0303 	adds.w	r3, r8, r3
 800b498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b49c:	462b      	mov	r3, r5
 800b49e:	eb49 0303 	adc.w	r3, r9, r3
 800b4a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	18db      	adds	r3, r3, r3
 800b4be:	653b      	str	r3, [r7, #80]	; 0x50
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	eb42 0303 	adc.w	r3, r2, r3
 800b4c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b4c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b4cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4d0:	f7f5 fb5e 	bl	8000b90 <__aeabi_uldivmod>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4b61      	ldr	r3, [pc, #388]	; (800b660 <UART_SetConfig+0x2d4>)
 800b4da:	fba3 2302 	umull	r2, r3, r3, r2
 800b4de:	095b      	lsrs	r3, r3, #5
 800b4e0:	011c      	lsls	r4, r3, #4
 800b4e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b4f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b4f4:	4642      	mov	r2, r8
 800b4f6:	464b      	mov	r3, r9
 800b4f8:	1891      	adds	r1, r2, r2
 800b4fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b4fc:	415b      	adcs	r3, r3
 800b4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b504:	4641      	mov	r1, r8
 800b506:	eb12 0a01 	adds.w	sl, r2, r1
 800b50a:	4649      	mov	r1, r9
 800b50c:	eb43 0b01 	adc.w	fp, r3, r1
 800b510:	f04f 0200 	mov.w	r2, #0
 800b514:	f04f 0300 	mov.w	r3, #0
 800b518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b51c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b524:	4692      	mov	sl, r2
 800b526:	469b      	mov	fp, r3
 800b528:	4643      	mov	r3, r8
 800b52a:	eb1a 0303 	adds.w	r3, sl, r3
 800b52e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b532:	464b      	mov	r3, r9
 800b534:	eb4b 0303 	adc.w	r3, fp, r3
 800b538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b53c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b54c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b550:	460b      	mov	r3, r1
 800b552:	18db      	adds	r3, r3, r3
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
 800b556:	4613      	mov	r3, r2
 800b558:	eb42 0303 	adc.w	r3, r2, r3
 800b55c:	647b      	str	r3, [r7, #68]	; 0x44
 800b55e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b566:	f7f5 fb13 	bl	8000b90 <__aeabi_uldivmod>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	4b3b      	ldr	r3, [pc, #236]	; (800b660 <UART_SetConfig+0x2d4>)
 800b572:	fba3 2301 	umull	r2, r3, r3, r1
 800b576:	095b      	lsrs	r3, r3, #5
 800b578:	2264      	movs	r2, #100	; 0x64
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	1acb      	subs	r3, r1, r3
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b586:	4b36      	ldr	r3, [pc, #216]	; (800b660 <UART_SetConfig+0x2d4>)
 800b588:	fba3 2302 	umull	r2, r3, r3, r2
 800b58c:	095b      	lsrs	r3, r3, #5
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b594:	441c      	add	r4, r3
 800b596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b5a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	1891      	adds	r1, r2, r2
 800b5ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5b0:	415b      	adcs	r3, r3
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5b8:	4641      	mov	r1, r8
 800b5ba:	1851      	adds	r1, r2, r1
 800b5bc:	6339      	str	r1, [r7, #48]	; 0x30
 800b5be:	4649      	mov	r1, r9
 800b5c0:	414b      	adcs	r3, r1
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b5d0:	4659      	mov	r1, fp
 800b5d2:	00cb      	lsls	r3, r1, #3
 800b5d4:	4651      	mov	r1, sl
 800b5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5da:	4651      	mov	r1, sl
 800b5dc:	00ca      	lsls	r2, r1, #3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5ec:	464b      	mov	r3, r9
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	eb42 0303 	adc.w	r3, r2, r3
 800b5f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b60c:	460b      	mov	r3, r1
 800b60e:	18db      	adds	r3, r3, r3
 800b610:	62bb      	str	r3, [r7, #40]	; 0x28
 800b612:	4613      	mov	r3, r2
 800b614:	eb42 0303 	adc.w	r3, r2, r3
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b61a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b61e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b622:	f7f5 fab5 	bl	8000b90 <__aeabi_uldivmod>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <UART_SetConfig+0x2d4>)
 800b62c:	fba3 1302 	umull	r1, r3, r3, r2
 800b630:	095b      	lsrs	r3, r3, #5
 800b632:	2164      	movs	r1, #100	; 0x64
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	3332      	adds	r3, #50	; 0x32
 800b63e:	4a08      	ldr	r2, [pc, #32]	; (800b660 <UART_SetConfig+0x2d4>)
 800b640:	fba2 2303 	umull	r2, r3, r2, r3
 800b644:	095b      	lsrs	r3, r3, #5
 800b646:	f003 0207 	and.w	r2, r3, #7
 800b64a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4422      	add	r2, r4
 800b652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b654:	e105      	b.n	800b862 <UART_SetConfig+0x4d6>
 800b656:	bf00      	nop
 800b658:	40011000 	.word	0x40011000
 800b65c:	40011400 	.word	0x40011400
 800b660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b668:	2200      	movs	r2, #0
 800b66a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b66e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	1891      	adds	r1, r2, r2
 800b67c:	6239      	str	r1, [r7, #32]
 800b67e:	415b      	adcs	r3, r3
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
 800b682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b686:	4641      	mov	r1, r8
 800b688:	1854      	adds	r4, r2, r1
 800b68a:	4649      	mov	r1, r9
 800b68c:	eb43 0501 	adc.w	r5, r3, r1
 800b690:	f04f 0200 	mov.w	r2, #0
 800b694:	f04f 0300 	mov.w	r3, #0
 800b698:	00eb      	lsls	r3, r5, #3
 800b69a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b69e:	00e2      	lsls	r2, r4, #3
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	461d      	mov	r5, r3
 800b6a4:	4643      	mov	r3, r8
 800b6a6:	18e3      	adds	r3, r4, r3
 800b6a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	eb45 0303 	adc.w	r3, r5, r3
 800b6b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	008b      	lsls	r3, r1, #2
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6dc:	4621      	mov	r1, r4
 800b6de:	008a      	lsls	r2, r1, #2
 800b6e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b6e4:	f7f5 fa54 	bl	8000b90 <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4b60      	ldr	r3, [pc, #384]	; (800b870 <UART_SetConfig+0x4e4>)
 800b6ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b6f2:	095b      	lsrs	r3, r3, #5
 800b6f4:	011c      	lsls	r4, r3, #4
 800b6f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b708:	4642      	mov	r2, r8
 800b70a:	464b      	mov	r3, r9
 800b70c:	1891      	adds	r1, r2, r2
 800b70e:	61b9      	str	r1, [r7, #24]
 800b710:	415b      	adcs	r3, r3
 800b712:	61fb      	str	r3, [r7, #28]
 800b714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b718:	4641      	mov	r1, r8
 800b71a:	1851      	adds	r1, r2, r1
 800b71c:	6139      	str	r1, [r7, #16]
 800b71e:	4649      	mov	r1, r9
 800b720:	414b      	adcs	r3, r1
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	f04f 0200 	mov.w	r2, #0
 800b728:	f04f 0300 	mov.w	r3, #0
 800b72c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b730:	4659      	mov	r1, fp
 800b732:	00cb      	lsls	r3, r1, #3
 800b734:	4651      	mov	r1, sl
 800b736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b73a:	4651      	mov	r1, sl
 800b73c:	00ca      	lsls	r2, r1, #3
 800b73e:	4610      	mov	r0, r2
 800b740:	4619      	mov	r1, r3
 800b742:	4603      	mov	r3, r0
 800b744:	4642      	mov	r2, r8
 800b746:	189b      	adds	r3, r3, r2
 800b748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b74c:	464b      	mov	r3, r9
 800b74e:	460a      	mov	r2, r1
 800b750:	eb42 0303 	adc.w	r3, r2, r3
 800b754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	67bb      	str	r3, [r7, #120]	; 0x78
 800b762:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b764:	f04f 0200 	mov.w	r2, #0
 800b768:	f04f 0300 	mov.w	r3, #0
 800b76c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b770:	4649      	mov	r1, r9
 800b772:	008b      	lsls	r3, r1, #2
 800b774:	4641      	mov	r1, r8
 800b776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b77a:	4641      	mov	r1, r8
 800b77c:	008a      	lsls	r2, r1, #2
 800b77e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b782:	f7f5 fa05 	bl	8000b90 <__aeabi_uldivmod>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4b39      	ldr	r3, [pc, #228]	; (800b870 <UART_SetConfig+0x4e4>)
 800b78c:	fba3 1302 	umull	r1, r3, r3, r2
 800b790:	095b      	lsrs	r3, r3, #5
 800b792:	2164      	movs	r1, #100	; 0x64
 800b794:	fb01 f303 	mul.w	r3, r1, r3
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	3332      	adds	r3, #50	; 0x32
 800b79e:	4a34      	ldr	r2, [pc, #208]	; (800b870 <UART_SetConfig+0x4e4>)
 800b7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a4:	095b      	lsrs	r3, r3, #5
 800b7a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7aa:	441c      	add	r4, r3
 800b7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	673b      	str	r3, [r7, #112]	; 0x70
 800b7b4:	677a      	str	r2, [r7, #116]	; 0x74
 800b7b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7ba:	4642      	mov	r2, r8
 800b7bc:	464b      	mov	r3, r9
 800b7be:	1891      	adds	r1, r2, r2
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	415b      	adcs	r3, r3
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	1851      	adds	r1, r2, r1
 800b7ce:	6039      	str	r1, [r7, #0]
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	414b      	adcs	r3, r1
 800b7d4:	607b      	str	r3, [r7, #4]
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	f04f 0300 	mov.w	r3, #0
 800b7de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b7e2:	4659      	mov	r1, fp
 800b7e4:	00cb      	lsls	r3, r1, #3
 800b7e6:	4651      	mov	r1, sl
 800b7e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7ec:	4651      	mov	r1, sl
 800b7ee:	00ca      	lsls	r2, r1, #3
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	4642      	mov	r2, r8
 800b7f8:	189b      	adds	r3, r3, r2
 800b7fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	460a      	mov	r2, r1
 800b800:	eb42 0303 	adc.w	r3, r2, r3
 800b804:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	663b      	str	r3, [r7, #96]	; 0x60
 800b810:	667a      	str	r2, [r7, #100]	; 0x64
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b81e:	4649      	mov	r1, r9
 800b820:	008b      	lsls	r3, r1, #2
 800b822:	4641      	mov	r1, r8
 800b824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b828:	4641      	mov	r1, r8
 800b82a:	008a      	lsls	r2, r1, #2
 800b82c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b830:	f7f5 f9ae 	bl	8000b90 <__aeabi_uldivmod>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4b0d      	ldr	r3, [pc, #52]	; (800b870 <UART_SetConfig+0x4e4>)
 800b83a:	fba3 1302 	umull	r1, r3, r3, r2
 800b83e:	095b      	lsrs	r3, r3, #5
 800b840:	2164      	movs	r1, #100	; 0x64
 800b842:	fb01 f303 	mul.w	r3, r1, r3
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	011b      	lsls	r3, r3, #4
 800b84a:	3332      	adds	r3, #50	; 0x32
 800b84c:	4a08      	ldr	r2, [pc, #32]	; (800b870 <UART_SetConfig+0x4e4>)
 800b84e:	fba2 2303 	umull	r2, r3, r2, r3
 800b852:	095b      	lsrs	r3, r3, #5
 800b854:	f003 020f 	and.w	r2, r3, #15
 800b858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4422      	add	r2, r4
 800b860:	609a      	str	r2, [r3, #8]
}
 800b862:	bf00      	nop
 800b864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b868:	46bd      	mov	sp, r7
 800b86a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b86e:	bf00      	nop
 800b870:	51eb851f 	.word	0x51eb851f

0800b874 <arm_mat_trans_f32>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	8802      	ldrh	r2, [r0, #0]
 800b87a:	884b      	ldrh	r3, [r1, #2]
 800b87c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b880:	684f      	ldr	r7, [r1, #4]
 800b882:	8840      	ldrh	r0, [r0, #2]
 800b884:	4293      	cmp	r3, r2
 800b886:	b083      	sub	sp, #12
 800b888:	d14c      	bne.n	800b924 <arm_mat_trans_f32+0xb0>
 800b88a:	f8b1 e000 	ldrh.w	lr, [r1]
 800b88e:	4586      	cmp	lr, r0
 800b890:	d148      	bne.n	800b924 <arm_mat_trans_f32+0xb0>
 800b892:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b896:	009c      	lsls	r4, r3, #2
 800b898:	f00e 0e03 	and.w	lr, lr, #3
 800b89c:	fb08 f904 	mul.w	r9, r8, r4
 800b8a0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b8a4:	011d      	lsls	r5, r3, #4
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b8ac:	eb07 0a04 	add.w	sl, r7, r4
 800b8b0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b8b4:	9201      	str	r2, [sp, #4]
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	463b      	mov	r3, r7
 800b8ba:	f1b8 0f00 	cmp.w	r8, #0
 800b8be:	d01d      	beq.n	800b8fc <arm_mat_trans_f32+0x88>
 800b8c0:	9900      	ldr	r1, [sp, #0]
 800b8c2:	f10c 0210 	add.w	r2, ip, #16
 800b8c6:	4439      	add	r1, r7
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b8ce:	601e      	str	r6, [r3, #0]
 800b8d0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b8d4:	191e      	adds	r6, r3, r4
 800b8d6:	edc6 7a00 	vstr	s15, [r6]
 800b8da:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b8de:	600e      	str	r6, [r1, #0]
 800b8e0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b8e4:	190e      	adds	r6, r1, r4
 800b8e6:	3801      	subs	r0, #1
 800b8e8:	442b      	add	r3, r5
 800b8ea:	f102 0210 	add.w	r2, r2, #16
 800b8ee:	edc6 7a00 	vstr	s15, [r6]
 800b8f2:	4429      	add	r1, r5
 800b8f4:	d1e9      	bne.n	800b8ca <arm_mat_trans_f32+0x56>
 800b8f6:	44dc      	add	ip, fp
 800b8f8:	eb09 0307 	add.w	r3, r9, r7
 800b8fc:	f1be 0f00 	cmp.w	lr, #0
 800b900:	d009      	beq.n	800b916 <arm_mat_trans_f32+0xa2>
 800b902:	4672      	mov	r2, lr
 800b904:	4661      	mov	r1, ip
 800b906:	f851 0b04 	ldr.w	r0, [r1], #4
 800b90a:	6018      	str	r0, [r3, #0]
 800b90c:	3a01      	subs	r2, #1
 800b90e:	4423      	add	r3, r4
 800b910:	d1f9      	bne.n	800b906 <arm_mat_trans_f32+0x92>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	449c      	add	ip, r3
 800b916:	3704      	adds	r7, #4
 800b918:	4557      	cmp	r7, sl
 800b91a:	d1cd      	bne.n	800b8b8 <arm_mat_trans_f32+0x44>
 800b91c:	2000      	movs	r0, #0
 800b91e:	b003      	add	sp, #12
 800b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b924:	f06f 0002 	mvn.w	r0, #2
 800b928:	e7f9      	b.n	800b91e <arm_mat_trans_f32+0xaa>
 800b92a:	bf00      	nop

0800b92c <arm_mat_sub_f32>:
 800b92c:	b4f0      	push	{r4, r5, r6, r7}
 800b92e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b932:	6803      	ldr	r3, [r0, #0]
 800b934:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b938:	6856      	ldr	r6, [r2, #4]
 800b93a:	42a3      	cmp	r3, r4
 800b93c:	d15d      	bne.n	800b9fa <arm_mat_sub_f32+0xce>
 800b93e:	6812      	ldr	r2, [r2, #0]
 800b940:	4293      	cmp	r3, r2
 800b942:	d15a      	bne.n	800b9fa <arm_mat_sub_f32+0xce>
 800b944:	8803      	ldrh	r3, [r0, #0]
 800b946:	8844      	ldrh	r4, [r0, #2]
 800b948:	fb04 f403 	mul.w	r4, r4, r3
 800b94c:	08a5      	lsrs	r5, r4, #2
 800b94e:	d032      	beq.n	800b9b6 <arm_mat_sub_f32+0x8a>
 800b950:	f10c 0110 	add.w	r1, ip, #16
 800b954:	f107 0210 	add.w	r2, r7, #16
 800b958:	f106 0310 	add.w	r3, r6, #16
 800b95c:	4628      	mov	r0, r5
 800b95e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b962:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b96a:	3801      	subs	r0, #1
 800b96c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b970:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b974:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b97c:	f101 0110 	add.w	r1, r1, #16
 800b980:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b984:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b988:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b98c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b990:	f102 0210 	add.w	r2, r2, #16
 800b994:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b998:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b99c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b9a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9a4:	f103 0310 	add.w	r3, r3, #16
 800b9a8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b9ac:	d1d7      	bne.n	800b95e <arm_mat_sub_f32+0x32>
 800b9ae:	012b      	lsls	r3, r5, #4
 800b9b0:	449c      	add	ip, r3
 800b9b2:	441f      	add	r7, r3
 800b9b4:	441e      	add	r6, r3
 800b9b6:	f014 0403 	ands.w	r4, r4, #3
 800b9ba:	d01b      	beq.n	800b9f4 <arm_mat_sub_f32+0xc8>
 800b9bc:	eddc 7a00 	vldr	s15, [ip]
 800b9c0:	ed97 7a00 	vldr	s14, [r7]
 800b9c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9c8:	3c01      	subs	r4, #1
 800b9ca:	edc6 7a00 	vstr	s15, [r6]
 800b9ce:	d011      	beq.n	800b9f4 <arm_mat_sub_f32+0xc8>
 800b9d0:	eddc 7a01 	vldr	s15, [ip, #4]
 800b9d4:	ed97 7a01 	vldr	s14, [r7, #4]
 800b9d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9dc:	2c01      	cmp	r4, #1
 800b9de:	edc6 7a01 	vstr	s15, [r6, #4]
 800b9e2:	d007      	beq.n	800b9f4 <arm_mat_sub_f32+0xc8>
 800b9e4:	eddc 7a02 	vldr	s15, [ip, #8]
 800b9e8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b9ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9f0:	edc6 7a02 	vstr	s15, [r6, #8]
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	bcf0      	pop	{r4, r5, r6, r7}
 800b9f8:	4770      	bx	lr
 800b9fa:	f06f 0002 	mvn.w	r0, #2
 800b9fe:	e7fa      	b.n	800b9f6 <arm_mat_sub_f32+0xca>

0800ba00 <arm_mat_mult_f32>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	8845      	ldrh	r5, [r0, #2]
 800ba06:	880b      	ldrh	r3, [r1, #0]
 800ba08:	8806      	ldrh	r6, [r0, #0]
 800ba0a:	6847      	ldr	r7, [r0, #4]
 800ba0c:	6854      	ldr	r4, [r2, #4]
 800ba0e:	6848      	ldr	r0, [r1, #4]
 800ba10:	b08b      	sub	sp, #44	; 0x2c
 800ba12:	42ab      	cmp	r3, r5
 800ba14:	9109      	str	r1, [sp, #36]	; 0x24
 800ba16:	9604      	str	r6, [sp, #16]
 800ba18:	8849      	ldrh	r1, [r1, #2]
 800ba1a:	f040 808a 	bne.w	800bb32 <arm_mat_mult_f32+0x132>
 800ba1e:	8815      	ldrh	r5, [r2, #0]
 800ba20:	42b5      	cmp	r5, r6
 800ba22:	f040 8086 	bne.w	800bb32 <arm_mat_mult_f32+0x132>
 800ba26:	8852      	ldrh	r2, [r2, #2]
 800ba28:	428a      	cmp	r2, r1
 800ba2a:	f040 8082 	bne.w	800bb32 <arm_mat_mult_f32+0x132>
 800ba2e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ba32:	1d01      	adds	r1, r0, #4
 800ba34:	0116      	lsls	r6, r2, #4
 800ba36:	9108      	str	r1, [sp, #32]
 800ba38:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800ba3c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800ba40:	9101      	str	r1, [sp, #4]
 800ba42:	fb06 f108 	mul.w	r1, r6, r8
 800ba46:	0095      	lsls	r5, r2, #2
 800ba48:	9103      	str	r1, [sp, #12]
 800ba4a:	00d2      	lsls	r2, r2, #3
 800ba4c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800ba50:	f003 0903 	and.w	r9, r3, #3
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	f107 0b10 	add.w	fp, r7, #16
 800ba5a:	eb04 0a05 	add.w	sl, r4, r5
 800ba5e:	9107      	str	r1, [sp, #28]
 800ba60:	9202      	str	r2, [sp, #8]
 800ba62:	9306      	str	r3, [sp, #24]
 800ba64:	f1ab 0310 	sub.w	r3, fp, #16
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ba70:	eb03 0c0a 	add.w	ip, r3, sl
 800ba74:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bb3c <arm_mat_mult_f32+0x13c>
 800ba78:	f1b8 0f00 	cmp.w	r8, #0
 800ba7c:	d053      	beq.n	800bb26 <arm_mat_mult_f32+0x126>
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	4644      	mov	r4, r8
 800ba82:	18c1      	adds	r1, r0, r3
 800ba84:	4602      	mov	r2, r0
 800ba86:	465b      	mov	r3, fp
 800ba88:	ed92 6a00 	vldr	s12, [r2]
 800ba8c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ba90:	ed53 4a03 	vldr	s9, [r3, #-12]
 800ba94:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ba98:	ed91 5a00 	vldr	s10, [r1]
 800ba9c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800baa0:	1957      	adds	r7, r2, r5
 800baa2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800baa6:	ed97 6a00 	vldr	s12, [r7]
 800baaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baae:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bab2:	194f      	adds	r7, r1, r5
 800bab4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bab8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800babc:	edd7 7a00 	vldr	s15, [r7]
 800bac0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bac4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bac8:	3c01      	subs	r4, #1
 800baca:	4432      	add	r2, r6
 800bacc:	4431      	add	r1, r6
 800bace:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bad2:	f103 0310 	add.w	r3, r3, #16
 800bad6:	d1d7      	bne.n	800ba88 <arm_mat_mult_f32+0x88>
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	9a01      	ldr	r2, [sp, #4]
 800badc:	4418      	add	r0, r3
 800bade:	f1b9 0f00 	cmp.w	r9, #0
 800bae2:	d00b      	beq.n	800bafc <arm_mat_mult_f32+0xfc>
 800bae4:	464b      	mov	r3, r9
 800bae6:	edd0 6a00 	vldr	s13, [r0]
 800baea:	ecb2 7a01 	vldmia	r2!, {s14}
 800baee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800baf2:	3b01      	subs	r3, #1
 800baf4:	4428      	add	r0, r5
 800baf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bafa:	d1f4      	bne.n	800bae6 <arm_mat_mult_f32+0xe6>
 800bafc:	ecec 7a01 	vstmia	ip!, {s15}
 800bb00:	45d4      	cmp	ip, sl
 800bb02:	4670      	mov	r0, lr
 800bb04:	f10e 0e04 	add.w	lr, lr, #4
 800bb08:	d1b4      	bne.n	800ba74 <arm_mat_mult_f32+0x74>
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	9b06      	ldr	r3, [sp, #24]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4419      	add	r1, r3
 800bb12:	449b      	add	fp, r3
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	9101      	str	r1, [sp, #4]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	44aa      	add	sl, r5
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	d004      	beq.n	800bb2a <arm_mat_mult_f32+0x12a>
 800bb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb22:	6858      	ldr	r0, [r3, #4]
 800bb24:	e79e      	b.n	800ba64 <arm_mat_mult_f32+0x64>
 800bb26:	9a05      	ldr	r2, [sp, #20]
 800bb28:	e7d9      	b.n	800bade <arm_mat_mult_f32+0xde>
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	b00b      	add	sp, #44	; 0x2c
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	f06f 0002 	mvn.w	r0, #2
 800bb36:	b00b      	add	sp, #44	; 0x2c
 800bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3c:	00000000 	.word	0x00000000

0800bb40 <arm_mat_init_f32>:
 800bb40:	8001      	strh	r1, [r0, #0]
 800bb42:	8042      	strh	r2, [r0, #2]
 800bb44:	6043      	str	r3, [r0, #4]
 800bb46:	4770      	bx	lr

0800bb48 <arm_mat_add_f32>:
 800bb48:	b4f0      	push	{r4, r5, r6, r7}
 800bb4a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800bb4e:	6803      	ldr	r3, [r0, #0]
 800bb50:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bb54:	6856      	ldr	r6, [r2, #4]
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	d15d      	bne.n	800bc16 <arm_mat_add_f32+0xce>
 800bb5a:	6812      	ldr	r2, [r2, #0]
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d15a      	bne.n	800bc16 <arm_mat_add_f32+0xce>
 800bb60:	8803      	ldrh	r3, [r0, #0]
 800bb62:	8844      	ldrh	r4, [r0, #2]
 800bb64:	fb04 f403 	mul.w	r4, r4, r3
 800bb68:	08a5      	lsrs	r5, r4, #2
 800bb6a:	d032      	beq.n	800bbd2 <arm_mat_add_f32+0x8a>
 800bb6c:	f10c 0110 	add.w	r1, ip, #16
 800bb70:	f107 0210 	add.w	r2, r7, #16
 800bb74:	f106 0310 	add.w	r3, r6, #16
 800bb78:	4628      	mov	r0, r5
 800bb7a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800bb7e:	ed51 7a04 	vldr	s15, [r1, #-16]
 800bb82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb86:	3801      	subs	r0, #1
 800bb88:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bb8c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800bb90:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bb94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb98:	f101 0110 	add.w	r1, r1, #16
 800bb9c:	ed43 7a03 	vstr	s15, [r3, #-12]
 800bba0:	ed12 7a02 	vldr	s14, [r2, #-8]
 800bba4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800bba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbac:	f102 0210 	add.w	r2, r2, #16
 800bbb0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bbb4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800bbb8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800bbbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc0:	f103 0310 	add.w	r3, r3, #16
 800bbc4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800bbc8:	d1d7      	bne.n	800bb7a <arm_mat_add_f32+0x32>
 800bbca:	012b      	lsls	r3, r5, #4
 800bbcc:	449c      	add	ip, r3
 800bbce:	441f      	add	r7, r3
 800bbd0:	441e      	add	r6, r3
 800bbd2:	f014 0403 	ands.w	r4, r4, #3
 800bbd6:	d01b      	beq.n	800bc10 <arm_mat_add_f32+0xc8>
 800bbd8:	edd7 7a00 	vldr	s15, [r7]
 800bbdc:	ed9c 7a00 	vldr	s14, [ip]
 800bbe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbe4:	3c01      	subs	r4, #1
 800bbe6:	edc6 7a00 	vstr	s15, [r6]
 800bbea:	d011      	beq.n	800bc10 <arm_mat_add_f32+0xc8>
 800bbec:	eddc 7a01 	vldr	s15, [ip, #4]
 800bbf0:	ed97 7a01 	vldr	s14, [r7, #4]
 800bbf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbf8:	2c01      	cmp	r4, #1
 800bbfa:	edc6 7a01 	vstr	s15, [r6, #4]
 800bbfe:	d007      	beq.n	800bc10 <arm_mat_add_f32+0xc8>
 800bc00:	eddc 7a02 	vldr	s15, [ip, #8]
 800bc04:	ed97 7a02 	vldr	s14, [r7, #8]
 800bc08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc0c:	edc6 7a02 	vstr	s15, [r6, #8]
 800bc10:	2000      	movs	r0, #0
 800bc12:	bcf0      	pop	{r4, r5, r6, r7}
 800bc14:	4770      	bx	lr
 800bc16:	f06f 0002 	mvn.w	r0, #2
 800bc1a:	e7fa      	b.n	800bc12 <arm_mat_add_f32+0xca>

0800bc1c <__errno>:
 800bc1c:	4b01      	ldr	r3, [pc, #4]	; (800bc24 <__errno+0x8>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	200000ec 	.word	0x200000ec

0800bc28 <__libc_init_array>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	4d0d      	ldr	r5, [pc, #52]	; (800bc60 <__libc_init_array+0x38>)
 800bc2c:	4c0d      	ldr	r4, [pc, #52]	; (800bc64 <__libc_init_array+0x3c>)
 800bc2e:	1b64      	subs	r4, r4, r5
 800bc30:	10a4      	asrs	r4, r4, #2
 800bc32:	2600      	movs	r6, #0
 800bc34:	42a6      	cmp	r6, r4
 800bc36:	d109      	bne.n	800bc4c <__libc_init_array+0x24>
 800bc38:	4d0b      	ldr	r5, [pc, #44]	; (800bc68 <__libc_init_array+0x40>)
 800bc3a:	4c0c      	ldr	r4, [pc, #48]	; (800bc6c <__libc_init_array+0x44>)
 800bc3c:	f000 ffea 	bl	800cc14 <_init>
 800bc40:	1b64      	subs	r4, r4, r5
 800bc42:	10a4      	asrs	r4, r4, #2
 800bc44:	2600      	movs	r6, #0
 800bc46:	42a6      	cmp	r6, r4
 800bc48:	d105      	bne.n	800bc56 <__libc_init_array+0x2e>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc50:	4798      	blx	r3
 800bc52:	3601      	adds	r6, #1
 800bc54:	e7ee      	b.n	800bc34 <__libc_init_array+0xc>
 800bc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5a:	4798      	blx	r3
 800bc5c:	3601      	adds	r6, #1
 800bc5e:	e7f2      	b.n	800bc46 <__libc_init_array+0x1e>
 800bc60:	0800cc88 	.word	0x0800cc88
 800bc64:	0800cc88 	.word	0x0800cc88
 800bc68:	0800cc88 	.word	0x0800cc88
 800bc6c:	0800cc8c 	.word	0x0800cc8c

0800bc70 <memset>:
 800bc70:	4402      	add	r2, r0
 800bc72:	4603      	mov	r3, r0
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d100      	bne.n	800bc7a <memset+0xa>
 800bc78:	4770      	bx	lr
 800bc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7e:	e7f9      	b.n	800bc74 <memset+0x4>

0800bc80 <ceil>:
 800bc80:	ec51 0b10 	vmov	r0, r1, d0
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bc8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bc90:	2e13      	cmp	r6, #19
 800bc92:	ee10 5a10 	vmov	r5, s0
 800bc96:	ee10 8a10 	vmov	r8, s0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	dc30      	bgt.n	800bd00 <ceil+0x80>
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	da12      	bge.n	800bcc8 <ceil+0x48>
 800bca2:	a335      	add	r3, pc, #212	; (adr r3, 800bd78 <ceil+0xf8>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fa9c 	bl	80001e4 <__adddf3>
 800bcac:	2200      	movs	r2, #0
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f7f4 fede 	bl	8000a70 <__aeabi_dcmpgt>
 800bcb4:	b128      	cbz	r0, 800bcc2 <ceil+0x42>
 800bcb6:	2c00      	cmp	r4, #0
 800bcb8:	db55      	blt.n	800bd66 <ceil+0xe6>
 800bcba:	432c      	orrs	r4, r5
 800bcbc:	d057      	beq.n	800bd6e <ceil+0xee>
 800bcbe:	4c30      	ldr	r4, [pc, #192]	; (800bd80 <ceil+0x100>)
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	e025      	b.n	800bd14 <ceil+0x94>
 800bcc8:	4f2e      	ldr	r7, [pc, #184]	; (800bd84 <ceil+0x104>)
 800bcca:	4137      	asrs	r7, r6
 800bccc:	ea01 0307 	and.w	r3, r1, r7
 800bcd0:	4303      	orrs	r3, r0
 800bcd2:	d01f      	beq.n	800bd14 <ceil+0x94>
 800bcd4:	a328      	add	r3, pc, #160	; (adr r3, 800bd78 <ceil+0xf8>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fa83 	bl	80001e4 <__adddf3>
 800bcde:	2200      	movs	r2, #0
 800bce0:	2300      	movs	r3, #0
 800bce2:	f7f4 fec5 	bl	8000a70 <__aeabi_dcmpgt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d0eb      	beq.n	800bcc2 <ceil+0x42>
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	bfc2      	ittt	gt
 800bcee:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800bcf2:	fa43 f606 	asrgt.w	r6, r3, r6
 800bcf6:	19a4      	addgt	r4, r4, r6
 800bcf8:	ea24 0407 	bic.w	r4, r4, r7
 800bcfc:	2500      	movs	r5, #0
 800bcfe:	e7e0      	b.n	800bcc2 <ceil+0x42>
 800bd00:	2e33      	cmp	r6, #51	; 0x33
 800bd02:	dd0b      	ble.n	800bd1c <ceil+0x9c>
 800bd04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd08:	d104      	bne.n	800bd14 <ceil+0x94>
 800bd0a:	ee10 2a10 	vmov	r2, s0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	f7f4 fa68 	bl	80001e4 <__adddf3>
 800bd14:	ec41 0b10 	vmov	d0, r0, r1
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bd20:	f04f 33ff 	mov.w	r3, #4294967295
 800bd24:	fa23 f707 	lsr.w	r7, r3, r7
 800bd28:	4207      	tst	r7, r0
 800bd2a:	d0f3      	beq.n	800bd14 <ceil+0x94>
 800bd2c:	a312      	add	r3, pc, #72	; (adr r3, 800bd78 <ceil+0xf8>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 fa57 	bl	80001e4 <__adddf3>
 800bd36:	2200      	movs	r2, #0
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f7f4 fe99 	bl	8000a70 <__aeabi_dcmpgt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0bf      	beq.n	800bcc2 <ceil+0x42>
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	dd02      	ble.n	800bd4c <ceil+0xcc>
 800bd46:	2e14      	cmp	r6, #20
 800bd48:	d103      	bne.n	800bd52 <ceil+0xd2>
 800bd4a:	3401      	adds	r4, #1
 800bd4c:	ea25 0507 	bic.w	r5, r5, r7
 800bd50:	e7b7      	b.n	800bcc2 <ceil+0x42>
 800bd52:	2301      	movs	r3, #1
 800bd54:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd58:	fa03 f606 	lsl.w	r6, r3, r6
 800bd5c:	4435      	add	r5, r6
 800bd5e:	4545      	cmp	r5, r8
 800bd60:	bf38      	it	cc
 800bd62:	18e4      	addcc	r4, r4, r3
 800bd64:	e7f2      	b.n	800bd4c <ceil+0xcc>
 800bd66:	2500      	movs	r5, #0
 800bd68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bd6c:	e7a9      	b.n	800bcc2 <ceil+0x42>
 800bd6e:	4625      	mov	r5, r4
 800bd70:	e7a7      	b.n	800bcc2 <ceil+0x42>
 800bd72:	bf00      	nop
 800bd74:	f3af 8000 	nop.w
 800bd78:	8800759c 	.word	0x8800759c
 800bd7c:	7e37e43c 	.word	0x7e37e43c
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	000fffff 	.word	0x000fffff

0800bd88 <pow>:
 800bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8a:	ed2d 8b02 	vpush	{d8}
 800bd8e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd92:	eef0 8a60 	vmov.f32	s17, s1
 800bd96:	ec55 4b11 	vmov	r4, r5, d1
 800bd9a:	f000 f891 	bl	800bec0 <__ieee754_pow>
 800bd9e:	4622      	mov	r2, r4
 800bda0:	462b      	mov	r3, r5
 800bda2:	4620      	mov	r0, r4
 800bda4:	4629      	mov	r1, r5
 800bda6:	ec57 6b10 	vmov	r6, r7, d0
 800bdaa:	f7f4 fe6b 	bl	8000a84 <__aeabi_dcmpun>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d13b      	bne.n	800be2a <pow+0xa2>
 800bdb2:	ec51 0b18 	vmov	r0, r1, d8
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f7f4 fe31 	bl	8000a20 <__aeabi_dcmpeq>
 800bdbe:	b1b8      	cbz	r0, 800bdf0 <pow+0x68>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f7f4 fe2a 	bl	8000a20 <__aeabi_dcmpeq>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d146      	bne.n	800be5e <pow+0xd6>
 800bdd0:	ec45 4b10 	vmov	d0, r4, r5
 800bdd4:	f000 fe8d 	bl	800caf2 <finite>
 800bdd8:	b338      	cbz	r0, 800be2a <pow+0xa2>
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fe27 	bl	8000a34 <__aeabi_dcmplt>
 800bde6:	b300      	cbz	r0, 800be2a <pow+0xa2>
 800bde8:	f7ff ff18 	bl	800bc1c <__errno>
 800bdec:	2322      	movs	r3, #34	; 0x22
 800bdee:	e01b      	b.n	800be28 <pow+0xa0>
 800bdf0:	ec47 6b10 	vmov	d0, r6, r7
 800bdf4:	f000 fe7d 	bl	800caf2 <finite>
 800bdf8:	b9e0      	cbnz	r0, 800be34 <pow+0xac>
 800bdfa:	eeb0 0a48 	vmov.f32	s0, s16
 800bdfe:	eef0 0a68 	vmov.f32	s1, s17
 800be02:	f000 fe76 	bl	800caf2 <finite>
 800be06:	b1a8      	cbz	r0, 800be34 <pow+0xac>
 800be08:	ec45 4b10 	vmov	d0, r4, r5
 800be0c:	f000 fe71 	bl	800caf2 <finite>
 800be10:	b180      	cbz	r0, 800be34 <pow+0xac>
 800be12:	4632      	mov	r2, r6
 800be14:	463b      	mov	r3, r7
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	f7f4 fe33 	bl	8000a84 <__aeabi_dcmpun>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d0e2      	beq.n	800bde8 <pow+0x60>
 800be22:	f7ff fefb 	bl	800bc1c <__errno>
 800be26:	2321      	movs	r3, #33	; 0x21
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	ecbd 8b02 	vpop	{d8}
 800be2e:	ec47 6b10 	vmov	d0, r6, r7
 800be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be34:	2200      	movs	r2, #0
 800be36:	2300      	movs	r3, #0
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fdf0 	bl	8000a20 <__aeabi_dcmpeq>
 800be40:	2800      	cmp	r0, #0
 800be42:	d0f2      	beq.n	800be2a <pow+0xa2>
 800be44:	eeb0 0a48 	vmov.f32	s0, s16
 800be48:	eef0 0a68 	vmov.f32	s1, s17
 800be4c:	f000 fe51 	bl	800caf2 <finite>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0ea      	beq.n	800be2a <pow+0xa2>
 800be54:	ec45 4b10 	vmov	d0, r4, r5
 800be58:	f000 fe4b 	bl	800caf2 <finite>
 800be5c:	e7c3      	b.n	800bde6 <pow+0x5e>
 800be5e:	4f01      	ldr	r7, [pc, #4]	; (800be64 <pow+0xdc>)
 800be60:	2600      	movs	r6, #0
 800be62:	e7e2      	b.n	800be2a <pow+0xa2>
 800be64:	3ff00000 	.word	0x3ff00000

0800be68 <sqrt>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	ed2d 8b02 	vpush	{d8}
 800be6e:	ec55 4b10 	vmov	r4, r5, d0
 800be72:	f000 fd53 	bl	800c91c <__ieee754_sqrt>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	eeb0 8a40 	vmov.f32	s16, s0
 800be82:	eef0 8a60 	vmov.f32	s17, s1
 800be86:	f7f4 fdfd 	bl	8000a84 <__aeabi_dcmpun>
 800be8a:	b990      	cbnz	r0, 800beb2 <sqrt+0x4a>
 800be8c:	2200      	movs	r2, #0
 800be8e:	2300      	movs	r3, #0
 800be90:	4620      	mov	r0, r4
 800be92:	4629      	mov	r1, r5
 800be94:	f7f4 fdce 	bl	8000a34 <__aeabi_dcmplt>
 800be98:	b158      	cbz	r0, 800beb2 <sqrt+0x4a>
 800be9a:	f7ff febf 	bl	800bc1c <__errno>
 800be9e:	2321      	movs	r3, #33	; 0x21
 800bea0:	6003      	str	r3, [r0, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	2300      	movs	r3, #0
 800bea6:	4610      	mov	r0, r2
 800bea8:	4619      	mov	r1, r3
 800beaa:	f7f4 fc7b 	bl	80007a4 <__aeabi_ddiv>
 800beae:	ec41 0b18 	vmov	d8, r0, r1
 800beb2:	eeb0 0a48 	vmov.f32	s0, s16
 800beb6:	eef0 0a68 	vmov.f32	s1, s17
 800beba:	ecbd 8b02 	vpop	{d8}
 800bebe:	bd38      	pop	{r3, r4, r5, pc}

0800bec0 <__ieee754_pow>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	ed2d 8b06 	vpush	{d8-d10}
 800bec8:	b089      	sub	sp, #36	; 0x24
 800beca:	ed8d 1b00 	vstr	d1, [sp]
 800bece:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bed2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bed6:	ea58 0102 	orrs.w	r1, r8, r2
 800beda:	ec57 6b10 	vmov	r6, r7, d0
 800bede:	d115      	bne.n	800bf0c <__ieee754_pow+0x4c>
 800bee0:	19b3      	adds	r3, r6, r6
 800bee2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bee6:	4152      	adcs	r2, r2
 800bee8:	4299      	cmp	r1, r3
 800beea:	4b89      	ldr	r3, [pc, #548]	; (800c110 <__ieee754_pow+0x250>)
 800beec:	4193      	sbcs	r3, r2
 800beee:	f080 84d2 	bcs.w	800c896 <__ieee754_pow+0x9d6>
 800bef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef6:	4630      	mov	r0, r6
 800bef8:	4639      	mov	r1, r7
 800befa:	f7f4 f973 	bl	80001e4 <__adddf3>
 800befe:	ec41 0b10 	vmov	d0, r0, r1
 800bf02:	b009      	add	sp, #36	; 0x24
 800bf04:	ecbd 8b06 	vpop	{d8-d10}
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0c:	4b81      	ldr	r3, [pc, #516]	; (800c114 <__ieee754_pow+0x254>)
 800bf0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bf12:	429c      	cmp	r4, r3
 800bf14:	ee10 aa10 	vmov	sl, s0
 800bf18:	463d      	mov	r5, r7
 800bf1a:	dc06      	bgt.n	800bf2a <__ieee754_pow+0x6a>
 800bf1c:	d101      	bne.n	800bf22 <__ieee754_pow+0x62>
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	d1e7      	bne.n	800bef2 <__ieee754_pow+0x32>
 800bf22:	4598      	cmp	r8, r3
 800bf24:	dc01      	bgt.n	800bf2a <__ieee754_pow+0x6a>
 800bf26:	d10f      	bne.n	800bf48 <__ieee754_pow+0x88>
 800bf28:	b172      	cbz	r2, 800bf48 <__ieee754_pow+0x88>
 800bf2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bf2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bf32:	ea55 050a 	orrs.w	r5, r5, sl
 800bf36:	d1dc      	bne.n	800bef2 <__ieee754_pow+0x32>
 800bf38:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf3c:	18db      	adds	r3, r3, r3
 800bf3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bf42:	4152      	adcs	r2, r2
 800bf44:	429d      	cmp	r5, r3
 800bf46:	e7d0      	b.n	800beea <__ieee754_pow+0x2a>
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	da3b      	bge.n	800bfc4 <__ieee754_pow+0x104>
 800bf4c:	4b72      	ldr	r3, [pc, #456]	; (800c118 <__ieee754_pow+0x258>)
 800bf4e:	4598      	cmp	r8, r3
 800bf50:	dc51      	bgt.n	800bff6 <__ieee754_pow+0x136>
 800bf52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bf56:	4598      	cmp	r8, r3
 800bf58:	f340 84ac 	ble.w	800c8b4 <__ieee754_pow+0x9f4>
 800bf5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf64:	2b14      	cmp	r3, #20
 800bf66:	dd0f      	ble.n	800bf88 <__ieee754_pow+0xc8>
 800bf68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bf6c:	fa22 f103 	lsr.w	r1, r2, r3
 800bf70:	fa01 f303 	lsl.w	r3, r1, r3
 800bf74:	4293      	cmp	r3, r2
 800bf76:	f040 849d 	bne.w	800c8b4 <__ieee754_pow+0x9f4>
 800bf7a:	f001 0101 	and.w	r1, r1, #1
 800bf7e:	f1c1 0302 	rsb	r3, r1, #2
 800bf82:	9304      	str	r3, [sp, #16]
 800bf84:	b182      	cbz	r2, 800bfa8 <__ieee754_pow+0xe8>
 800bf86:	e05f      	b.n	800c048 <__ieee754_pow+0x188>
 800bf88:	2a00      	cmp	r2, #0
 800bf8a:	d15b      	bne.n	800c044 <__ieee754_pow+0x184>
 800bf8c:	f1c3 0314 	rsb	r3, r3, #20
 800bf90:	fa48 f103 	asr.w	r1, r8, r3
 800bf94:	fa01 f303 	lsl.w	r3, r1, r3
 800bf98:	4543      	cmp	r3, r8
 800bf9a:	f040 8488 	bne.w	800c8ae <__ieee754_pow+0x9ee>
 800bf9e:	f001 0101 	and.w	r1, r1, #1
 800bfa2:	f1c1 0302 	rsb	r3, r1, #2
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	4b5c      	ldr	r3, [pc, #368]	; (800c11c <__ieee754_pow+0x25c>)
 800bfaa:	4598      	cmp	r8, r3
 800bfac:	d132      	bne.n	800c014 <__ieee754_pow+0x154>
 800bfae:	f1b9 0f00 	cmp.w	r9, #0
 800bfb2:	f280 8478 	bge.w	800c8a6 <__ieee754_pow+0x9e6>
 800bfb6:	4959      	ldr	r1, [pc, #356]	; (800c11c <__ieee754_pow+0x25c>)
 800bfb8:	4632      	mov	r2, r6
 800bfba:	463b      	mov	r3, r7
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f7f4 fbf1 	bl	80007a4 <__aeabi_ddiv>
 800bfc2:	e79c      	b.n	800befe <__ieee754_pow+0x3e>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	2a00      	cmp	r2, #0
 800bfca:	d13d      	bne.n	800c048 <__ieee754_pow+0x188>
 800bfcc:	4b51      	ldr	r3, [pc, #324]	; (800c114 <__ieee754_pow+0x254>)
 800bfce:	4598      	cmp	r8, r3
 800bfd0:	d1ea      	bne.n	800bfa8 <__ieee754_pow+0xe8>
 800bfd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bfd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bfda:	ea53 030a 	orrs.w	r3, r3, sl
 800bfde:	f000 845a 	beq.w	800c896 <__ieee754_pow+0x9d6>
 800bfe2:	4b4f      	ldr	r3, [pc, #316]	; (800c120 <__ieee754_pow+0x260>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	dd08      	ble.n	800bffa <__ieee754_pow+0x13a>
 800bfe8:	f1b9 0f00 	cmp.w	r9, #0
 800bfec:	f2c0 8457 	blt.w	800c89e <__ieee754_pow+0x9de>
 800bff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bff4:	e783      	b.n	800befe <__ieee754_pow+0x3e>
 800bff6:	2302      	movs	r3, #2
 800bff8:	e7e5      	b.n	800bfc6 <__ieee754_pow+0x106>
 800bffa:	f1b9 0f00 	cmp.w	r9, #0
 800bffe:	f04f 0000 	mov.w	r0, #0
 800c002:	f04f 0100 	mov.w	r1, #0
 800c006:	f6bf af7a 	bge.w	800befe <__ieee754_pow+0x3e>
 800c00a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c00e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c012:	e774      	b.n	800befe <__ieee754_pow+0x3e>
 800c014:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c018:	d106      	bne.n	800c028 <__ieee754_pow+0x168>
 800c01a:	4632      	mov	r2, r6
 800c01c:	463b      	mov	r3, r7
 800c01e:	4630      	mov	r0, r6
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 fa95 	bl	8000550 <__aeabi_dmul>
 800c026:	e76a      	b.n	800befe <__ieee754_pow+0x3e>
 800c028:	4b3e      	ldr	r3, [pc, #248]	; (800c124 <__ieee754_pow+0x264>)
 800c02a:	4599      	cmp	r9, r3
 800c02c:	d10c      	bne.n	800c048 <__ieee754_pow+0x188>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	db0a      	blt.n	800c048 <__ieee754_pow+0x188>
 800c032:	ec47 6b10 	vmov	d0, r6, r7
 800c036:	b009      	add	sp, #36	; 0x24
 800c038:	ecbd 8b06 	vpop	{d8-d10}
 800c03c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	f000 bc6c 	b.w	800c91c <__ieee754_sqrt>
 800c044:	2300      	movs	r3, #0
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	ec47 6b10 	vmov	d0, r6, r7
 800c04c:	f000 fd48 	bl	800cae0 <fabs>
 800c050:	ec51 0b10 	vmov	r0, r1, d0
 800c054:	f1ba 0f00 	cmp.w	sl, #0
 800c058:	d129      	bne.n	800c0ae <__ieee754_pow+0x1ee>
 800c05a:	b124      	cbz	r4, 800c066 <__ieee754_pow+0x1a6>
 800c05c:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <__ieee754_pow+0x25c>)
 800c05e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c062:	429a      	cmp	r2, r3
 800c064:	d123      	bne.n	800c0ae <__ieee754_pow+0x1ee>
 800c066:	f1b9 0f00 	cmp.w	r9, #0
 800c06a:	da05      	bge.n	800c078 <__ieee754_pow+0x1b8>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	2000      	movs	r0, #0
 800c072:	492a      	ldr	r1, [pc, #168]	; (800c11c <__ieee754_pow+0x25c>)
 800c074:	f7f4 fb96 	bl	80007a4 <__aeabi_ddiv>
 800c078:	2d00      	cmp	r5, #0
 800c07a:	f6bf af40 	bge.w	800befe <__ieee754_pow+0x3e>
 800c07e:	9b04      	ldr	r3, [sp, #16]
 800c080:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c084:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c088:	4323      	orrs	r3, r4
 800c08a:	d108      	bne.n	800c09e <__ieee754_pow+0x1de>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4610      	mov	r0, r2
 800c092:	4619      	mov	r1, r3
 800c094:	f7f4 f8a4 	bl	80001e0 <__aeabi_dsub>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	e78f      	b.n	800bfbe <__ieee754_pow+0xfe>
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	f47f af2c 	bne.w	800befe <__ieee754_pow+0x3e>
 800c0a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	e727      	b.n	800befe <__ieee754_pow+0x3e>
 800c0ae:	0feb      	lsrs	r3, r5, #31
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	9306      	str	r3, [sp, #24]
 800c0b4:	9a06      	ldr	r2, [sp, #24]
 800c0b6:	9b04      	ldr	r3, [sp, #16]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	d102      	bne.n	800c0c2 <__ieee754_pow+0x202>
 800c0bc:	4632      	mov	r2, r6
 800c0be:	463b      	mov	r3, r7
 800c0c0:	e7e6      	b.n	800c090 <__ieee754_pow+0x1d0>
 800c0c2:	4b19      	ldr	r3, [pc, #100]	; (800c128 <__ieee754_pow+0x268>)
 800c0c4:	4598      	cmp	r8, r3
 800c0c6:	f340 80fb 	ble.w	800c2c0 <__ieee754_pow+0x400>
 800c0ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c0ce:	4598      	cmp	r8, r3
 800c0d0:	4b13      	ldr	r3, [pc, #76]	; (800c120 <__ieee754_pow+0x260>)
 800c0d2:	dd0c      	ble.n	800c0ee <__ieee754_pow+0x22e>
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	dc0f      	bgt.n	800c0f8 <__ieee754_pow+0x238>
 800c0d8:	f1b9 0f00 	cmp.w	r9, #0
 800c0dc:	da0f      	bge.n	800c0fe <__ieee754_pow+0x23e>
 800c0de:	2000      	movs	r0, #0
 800c0e0:	b009      	add	sp, #36	; 0x24
 800c0e2:	ecbd 8b06 	vpop	{d8-d10}
 800c0e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ea:	f000 bcf0 	b.w	800cace <__math_oflow>
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	dbf2      	blt.n	800c0d8 <__ieee754_pow+0x218>
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <__ieee754_pow+0x25c>)
 800c0f4:	429c      	cmp	r4, r3
 800c0f6:	dd19      	ble.n	800c12c <__ieee754_pow+0x26c>
 800c0f8:	f1b9 0f00 	cmp.w	r9, #0
 800c0fc:	dcef      	bgt.n	800c0de <__ieee754_pow+0x21e>
 800c0fe:	2000      	movs	r0, #0
 800c100:	b009      	add	sp, #36	; 0x24
 800c102:	ecbd 8b06 	vpop	{d8-d10}
 800c106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	f000 bcd7 	b.w	800cabc <__math_uflow>
 800c10e:	bf00      	nop
 800c110:	fff00000 	.word	0xfff00000
 800c114:	7ff00000 	.word	0x7ff00000
 800c118:	433fffff 	.word	0x433fffff
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	3fefffff 	.word	0x3fefffff
 800c124:	3fe00000 	.word	0x3fe00000
 800c128:	41e00000 	.word	0x41e00000
 800c12c:	4b60      	ldr	r3, [pc, #384]	; (800c2b0 <__ieee754_pow+0x3f0>)
 800c12e:	2200      	movs	r2, #0
 800c130:	f7f4 f856 	bl	80001e0 <__aeabi_dsub>
 800c134:	a354      	add	r3, pc, #336	; (adr r3, 800c288 <__ieee754_pow+0x3c8>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	4604      	mov	r4, r0
 800c13c:	460d      	mov	r5, r1
 800c13e:	f7f4 fa07 	bl	8000550 <__aeabi_dmul>
 800c142:	a353      	add	r3, pc, #332	; (adr r3, 800c290 <__ieee754_pow+0x3d0>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	4606      	mov	r6, r0
 800c14a:	460f      	mov	r7, r1
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 f9fe 	bl	8000550 <__aeabi_dmul>
 800c154:	4b57      	ldr	r3, [pc, #348]	; (800c2b4 <__ieee754_pow+0x3f4>)
 800c156:	4682      	mov	sl, r0
 800c158:	468b      	mov	fp, r1
 800c15a:	2200      	movs	r2, #0
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 f9f6 	bl	8000550 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	a14b      	add	r1, pc, #300	; (adr r1, 800c298 <__ieee754_pow+0x3d8>)
 800c16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16e:	f7f4 f837 	bl	80001e0 <__aeabi_dsub>
 800c172:	4622      	mov	r2, r4
 800c174:	462b      	mov	r3, r5
 800c176:	f7f4 f9eb 	bl	8000550 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	2000      	movs	r0, #0
 800c180:	494d      	ldr	r1, [pc, #308]	; (800c2b8 <__ieee754_pow+0x3f8>)
 800c182:	f7f4 f82d 	bl	80001e0 <__aeabi_dsub>
 800c186:	4622      	mov	r2, r4
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	462b      	mov	r3, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 f9dd 	bl	8000550 <__aeabi_dmul>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4640      	mov	r0, r8
 800c19c:	4649      	mov	r1, r9
 800c19e:	f7f4 f9d7 	bl	8000550 <__aeabi_dmul>
 800c1a2:	a33f      	add	r3, pc, #252	; (adr r3, 800c2a0 <__ieee754_pow+0x3e0>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f7f4 f9d2 	bl	8000550 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	f7f4 f814 	bl	80001e0 <__aeabi_dsub>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4680      	mov	r8, r0
 800c1be:	4689      	mov	r9, r1
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	f7f4 f80e 	bl	80001e4 <__adddf3>
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	4632      	mov	r2, r6
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	f7f4 f805 	bl	80001e0 <__aeabi_dsub>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f3 ffff 	bl	80001e0 <__aeabi_dsub>
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	9a06      	ldr	r2, [sp, #24]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	4682      	mov	sl, r0
 800c1ec:	468b      	mov	fp, r1
 800c1ee:	f040 81e7 	bne.w	800c5c0 <__ieee754_pow+0x700>
 800c1f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c2a8 <__ieee754_pow+0x3e8>
 800c1f6:	eeb0 8a47 	vmov.f32	s16, s14
 800c1fa:	eef0 8a67 	vmov.f32	s17, s15
 800c1fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c202:	2600      	movs	r6, #0
 800c204:	4632      	mov	r2, r6
 800c206:	463b      	mov	r3, r7
 800c208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20c:	f7f3 ffe8 	bl	80001e0 <__aeabi_dsub>
 800c210:	4622      	mov	r2, r4
 800c212:	462b      	mov	r3, r5
 800c214:	f7f4 f99c 	bl	8000550 <__aeabi_dmul>
 800c218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21c:	4680      	mov	r8, r0
 800c21e:	4689      	mov	r9, r1
 800c220:	4650      	mov	r0, sl
 800c222:	4659      	mov	r1, fp
 800c224:	f7f4 f994 	bl	8000550 <__aeabi_dmul>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	4640      	mov	r0, r8
 800c22e:	4649      	mov	r1, r9
 800c230:	f7f3 ffd8 	bl	80001e4 <__adddf3>
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	4680      	mov	r8, r0
 800c23a:	4689      	mov	r9, r1
 800c23c:	4620      	mov	r0, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 f986 	bl	8000550 <__aeabi_dmul>
 800c244:	460b      	mov	r3, r1
 800c246:	4604      	mov	r4, r0
 800c248:	460d      	mov	r5, r1
 800c24a:	4602      	mov	r2, r0
 800c24c:	4649      	mov	r1, r9
 800c24e:	4640      	mov	r0, r8
 800c250:	f7f3 ffc8 	bl	80001e4 <__adddf3>
 800c254:	4b19      	ldr	r3, [pc, #100]	; (800c2bc <__ieee754_pow+0x3fc>)
 800c256:	4299      	cmp	r1, r3
 800c258:	ec45 4b19 	vmov	d9, r4, r5
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	468b      	mov	fp, r1
 800c262:	f340 82f1 	ble.w	800c848 <__ieee754_pow+0x988>
 800c266:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c26a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c26e:	4303      	orrs	r3, r0
 800c270:	f000 81e4 	beq.w	800c63c <__ieee754_pow+0x77c>
 800c274:	ec51 0b18 	vmov	r0, r1, d8
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	f7f4 fbda 	bl	8000a34 <__aeabi_dcmplt>
 800c280:	3800      	subs	r0, #0
 800c282:	bf18      	it	ne
 800c284:	2001      	movne	r0, #1
 800c286:	e72b      	b.n	800c0e0 <__ieee754_pow+0x220>
 800c288:	60000000 	.word	0x60000000
 800c28c:	3ff71547 	.word	0x3ff71547
 800c290:	f85ddf44 	.word	0xf85ddf44
 800c294:	3e54ae0b 	.word	0x3e54ae0b
 800c298:	55555555 	.word	0x55555555
 800c29c:	3fd55555 	.word	0x3fd55555
 800c2a0:	652b82fe 	.word	0x652b82fe
 800c2a4:	3ff71547 	.word	0x3ff71547
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	bff00000 	.word	0xbff00000
 800c2b0:	3ff00000 	.word	0x3ff00000
 800c2b4:	3fd00000 	.word	0x3fd00000
 800c2b8:	3fe00000 	.word	0x3fe00000
 800c2bc:	408fffff 	.word	0x408fffff
 800c2c0:	4bd5      	ldr	r3, [pc, #852]	; (800c618 <__ieee754_pow+0x758>)
 800c2c2:	402b      	ands	r3, r5
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	b92b      	cbnz	r3, 800c2d4 <__ieee754_pow+0x414>
 800c2c8:	4bd4      	ldr	r3, [pc, #848]	; (800c61c <__ieee754_pow+0x75c>)
 800c2ca:	f7f4 f941 	bl	8000550 <__aeabi_dmul>
 800c2ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	1523      	asrs	r3, r4, #20
 800c2d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2da:	4413      	add	r3, r2
 800c2dc:	9305      	str	r3, [sp, #20]
 800c2de:	4bd0      	ldr	r3, [pc, #832]	; (800c620 <__ieee754_pow+0x760>)
 800c2e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c2e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c2e8:	429c      	cmp	r4, r3
 800c2ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c2ee:	dd08      	ble.n	800c302 <__ieee754_pow+0x442>
 800c2f0:	4bcc      	ldr	r3, [pc, #816]	; (800c624 <__ieee754_pow+0x764>)
 800c2f2:	429c      	cmp	r4, r3
 800c2f4:	f340 8162 	ble.w	800c5bc <__ieee754_pow+0x6fc>
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c302:	2400      	movs	r4, #0
 800c304:	00e3      	lsls	r3, r4, #3
 800c306:	9307      	str	r3, [sp, #28]
 800c308:	4bc7      	ldr	r3, [pc, #796]	; (800c628 <__ieee754_pow+0x768>)
 800c30a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c30e:	ed93 7b00 	vldr	d7, [r3]
 800c312:	4629      	mov	r1, r5
 800c314:	ec53 2b17 	vmov	r2, r3, d7
 800c318:	eeb0 9a47 	vmov.f32	s18, s14
 800c31c:	eef0 9a67 	vmov.f32	s19, s15
 800c320:	4682      	mov	sl, r0
 800c322:	f7f3 ff5d 	bl	80001e0 <__aeabi_dsub>
 800c326:	4652      	mov	r2, sl
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	462b      	mov	r3, r5
 800c32e:	ec51 0b19 	vmov	r0, r1, d9
 800c332:	f7f3 ff57 	bl	80001e4 <__adddf3>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	2000      	movs	r0, #0
 800c33c:	49bb      	ldr	r1, [pc, #748]	; (800c62c <__ieee754_pow+0x76c>)
 800c33e:	f7f4 fa31 	bl	80007a4 <__aeabi_ddiv>
 800c342:	ec41 0b1a 	vmov	d10, r0, r1
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f4 f8ff 	bl	8000550 <__aeabi_dmul>
 800c352:	2300      	movs	r3, #0
 800c354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c35e:	46ab      	mov	fp, r5
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c366:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c36a:	ec41 0b18 	vmov	d8, r0, r1
 800c36e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c372:	2200      	movs	r2, #0
 800c374:	4640      	mov	r0, r8
 800c376:	4649      	mov	r1, r9
 800c378:	4614      	mov	r4, r2
 800c37a:	461d      	mov	r5, r3
 800c37c:	f7f4 f8e8 	bl	8000550 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f7f3 ff2a 	bl	80001e0 <__aeabi_dsub>
 800c38c:	ec53 2b19 	vmov	r2, r3, d9
 800c390:	4606      	mov	r6, r0
 800c392:	460f      	mov	r7, r1
 800c394:	4620      	mov	r0, r4
 800c396:	4629      	mov	r1, r5
 800c398:	f7f3 ff22 	bl	80001e0 <__aeabi_dsub>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4650      	mov	r0, sl
 800c3a2:	4659      	mov	r1, fp
 800c3a4:	f7f3 ff1c 	bl	80001e0 <__aeabi_dsub>
 800c3a8:	4642      	mov	r2, r8
 800c3aa:	464b      	mov	r3, r9
 800c3ac:	f7f4 f8d0 	bl	8000550 <__aeabi_dmul>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	f7f3 ff12 	bl	80001e0 <__aeabi_dsub>
 800c3bc:	ec53 2b1a 	vmov	r2, r3, d10
 800c3c0:	f7f4 f8c6 	bl	8000550 <__aeabi_dmul>
 800c3c4:	ec53 2b18 	vmov	r2, r3, d8
 800c3c8:	ec41 0b19 	vmov	d9, r0, r1
 800c3cc:	ec51 0b18 	vmov	r0, r1, d8
 800c3d0:	f7f4 f8be 	bl	8000550 <__aeabi_dmul>
 800c3d4:	a37c      	add	r3, pc, #496	; (adr r3, 800c5c8 <__ieee754_pow+0x708>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
 800c3de:	f7f4 f8b7 	bl	8000550 <__aeabi_dmul>
 800c3e2:	a37b      	add	r3, pc, #492	; (adr r3, 800c5d0 <__ieee754_pow+0x710>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f3 fefc 	bl	80001e4 <__adddf3>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	f7f4 f8ae 	bl	8000550 <__aeabi_dmul>
 800c3f4:	a378      	add	r3, pc, #480	; (adr r3, 800c5d8 <__ieee754_pow+0x718>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 fef3 	bl	80001e4 <__adddf3>
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	f7f4 f8a5 	bl	8000550 <__aeabi_dmul>
 800c406:	a376      	add	r3, pc, #472	; (adr r3, 800c5e0 <__ieee754_pow+0x720>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 feea 	bl	80001e4 <__adddf3>
 800c410:	4622      	mov	r2, r4
 800c412:	462b      	mov	r3, r5
 800c414:	f7f4 f89c 	bl	8000550 <__aeabi_dmul>
 800c418:	a373      	add	r3, pc, #460	; (adr r3, 800c5e8 <__ieee754_pow+0x728>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 fee1 	bl	80001e4 <__adddf3>
 800c422:	4622      	mov	r2, r4
 800c424:	462b      	mov	r3, r5
 800c426:	f7f4 f893 	bl	8000550 <__aeabi_dmul>
 800c42a:	a371      	add	r3, pc, #452	; (adr r3, 800c5f0 <__ieee754_pow+0x730>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f3 fed8 	bl	80001e4 <__adddf3>
 800c434:	4622      	mov	r2, r4
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	462b      	mov	r3, r5
 800c43c:	4620      	mov	r0, r4
 800c43e:	4629      	mov	r1, r5
 800c440:	f7f4 f886 	bl	8000550 <__aeabi_dmul>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	f7f4 f880 	bl	8000550 <__aeabi_dmul>
 800c450:	4642      	mov	r2, r8
 800c452:	4604      	mov	r4, r0
 800c454:	460d      	mov	r5, r1
 800c456:	464b      	mov	r3, r9
 800c458:	ec51 0b18 	vmov	r0, r1, d8
 800c45c:	f7f3 fec2 	bl	80001e4 <__adddf3>
 800c460:	ec53 2b19 	vmov	r2, r3, d9
 800c464:	f7f4 f874 	bl	8000550 <__aeabi_dmul>
 800c468:	4622      	mov	r2, r4
 800c46a:	462b      	mov	r3, r5
 800c46c:	f7f3 feba 	bl	80001e4 <__adddf3>
 800c470:	4642      	mov	r2, r8
 800c472:	4682      	mov	sl, r0
 800c474:	468b      	mov	fp, r1
 800c476:	464b      	mov	r3, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 f868 	bl	8000550 <__aeabi_dmul>
 800c480:	4b6b      	ldr	r3, [pc, #428]	; (800c630 <__ieee754_pow+0x770>)
 800c482:	2200      	movs	r2, #0
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	f7f3 feac 	bl	80001e4 <__adddf3>
 800c48c:	4652      	mov	r2, sl
 800c48e:	465b      	mov	r3, fp
 800c490:	f7f3 fea8 	bl	80001e4 <__adddf3>
 800c494:	2000      	movs	r0, #0
 800c496:	4604      	mov	r4, r0
 800c498:	460d      	mov	r5, r1
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 f855 	bl	8000550 <__aeabi_dmul>
 800c4a6:	4b62      	ldr	r3, [pc, #392]	; (800c630 <__ieee754_pow+0x770>)
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	4689      	mov	r9, r1
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f3 fe95 	bl	80001e0 <__aeabi_dsub>
 800c4b6:	4632      	mov	r2, r6
 800c4b8:	463b      	mov	r3, r7
 800c4ba:	f7f3 fe91 	bl	80001e0 <__aeabi_dsub>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	4659      	mov	r1, fp
 800c4c6:	f7f3 fe8b 	bl	80001e0 <__aeabi_dsub>
 800c4ca:	ec53 2b18 	vmov	r2, r3, d8
 800c4ce:	f7f4 f83f 	bl	8000550 <__aeabi_dmul>
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	462b      	mov	r3, r5
 800c4da:	ec51 0b19 	vmov	r0, r1, d9
 800c4de:	f7f4 f837 	bl	8000550 <__aeabi_dmul>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	f7f3 fe7b 	bl	80001e4 <__adddf3>
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	460f      	mov	r7, r1
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	f7f3 fe73 	bl	80001e4 <__adddf3>
 800c4fe:	a33e      	add	r3, pc, #248	; (adr r3, 800c5f8 <__ieee754_pow+0x738>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	2000      	movs	r0, #0
 800c506:	4604      	mov	r4, r0
 800c508:	460d      	mov	r5, r1
 800c50a:	f7f4 f821 	bl	8000550 <__aeabi_dmul>
 800c50e:	4642      	mov	r2, r8
 800c510:	ec41 0b18 	vmov	d8, r0, r1
 800c514:	464b      	mov	r3, r9
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f3 fe61 	bl	80001e0 <__aeabi_dsub>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f3 fe5b 	bl	80001e0 <__aeabi_dsub>
 800c52a:	a335      	add	r3, pc, #212	; (adr r3, 800c600 <__ieee754_pow+0x740>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7f4 f80e 	bl	8000550 <__aeabi_dmul>
 800c534:	a334      	add	r3, pc, #208	; (adr r3, 800c608 <__ieee754_pow+0x748>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	4606      	mov	r6, r0
 800c53c:	460f      	mov	r7, r1
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f4 f805 	bl	8000550 <__aeabi_dmul>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f3 fe49 	bl	80001e4 <__adddf3>
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	4b37      	ldr	r3, [pc, #220]	; (800c634 <__ieee754_pow+0x774>)
 800c556:	4413      	add	r3, r2
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f3 fe42 	bl	80001e4 <__adddf3>
 800c560:	4682      	mov	sl, r0
 800c562:	9805      	ldr	r0, [sp, #20]
 800c564:	468b      	mov	fp, r1
 800c566:	f7f3 ff89 	bl	800047c <__aeabi_i2d>
 800c56a:	9a07      	ldr	r2, [sp, #28]
 800c56c:	4b32      	ldr	r3, [pc, #200]	; (800c638 <__ieee754_pow+0x778>)
 800c56e:	4413      	add	r3, r2
 800c570:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	4652      	mov	r2, sl
 800c57a:	465b      	mov	r3, fp
 800c57c:	ec51 0b18 	vmov	r0, r1, d8
 800c580:	f7f3 fe30 	bl	80001e4 <__adddf3>
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	f7f3 fe2c 	bl	80001e4 <__adddf3>
 800c58c:	4632      	mov	r2, r6
 800c58e:	463b      	mov	r3, r7
 800c590:	f7f3 fe28 	bl	80001e4 <__adddf3>
 800c594:	2000      	movs	r0, #0
 800c596:	4632      	mov	r2, r6
 800c598:	463b      	mov	r3, r7
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	f7f3 fe1f 	bl	80001e0 <__aeabi_dsub>
 800c5a2:	4642      	mov	r2, r8
 800c5a4:	464b      	mov	r3, r9
 800c5a6:	f7f3 fe1b 	bl	80001e0 <__aeabi_dsub>
 800c5aa:	ec53 2b18 	vmov	r2, r3, d8
 800c5ae:	f7f3 fe17 	bl	80001e0 <__aeabi_dsub>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4650      	mov	r0, sl
 800c5b8:	4659      	mov	r1, fp
 800c5ba:	e610      	b.n	800c1de <__ieee754_pow+0x31e>
 800c5bc:	2401      	movs	r4, #1
 800c5be:	e6a1      	b.n	800c304 <__ieee754_pow+0x444>
 800c5c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c610 <__ieee754_pow+0x750>
 800c5c4:	e617      	b.n	800c1f6 <__ieee754_pow+0x336>
 800c5c6:	bf00      	nop
 800c5c8:	4a454eef 	.word	0x4a454eef
 800c5cc:	3fca7e28 	.word	0x3fca7e28
 800c5d0:	93c9db65 	.word	0x93c9db65
 800c5d4:	3fcd864a 	.word	0x3fcd864a
 800c5d8:	a91d4101 	.word	0xa91d4101
 800c5dc:	3fd17460 	.word	0x3fd17460
 800c5e0:	518f264d 	.word	0x518f264d
 800c5e4:	3fd55555 	.word	0x3fd55555
 800c5e8:	db6fabff 	.word	0xdb6fabff
 800c5ec:	3fdb6db6 	.word	0x3fdb6db6
 800c5f0:	33333303 	.word	0x33333303
 800c5f4:	3fe33333 	.word	0x3fe33333
 800c5f8:	e0000000 	.word	0xe0000000
 800c5fc:	3feec709 	.word	0x3feec709
 800c600:	dc3a03fd 	.word	0xdc3a03fd
 800c604:	3feec709 	.word	0x3feec709
 800c608:	145b01f5 	.word	0x145b01f5
 800c60c:	be3e2fe0 	.word	0xbe3e2fe0
 800c610:	00000000 	.word	0x00000000
 800c614:	3ff00000 	.word	0x3ff00000
 800c618:	7ff00000 	.word	0x7ff00000
 800c61c:	43400000 	.word	0x43400000
 800c620:	0003988e 	.word	0x0003988e
 800c624:	000bb679 	.word	0x000bb679
 800c628:	0800cc50 	.word	0x0800cc50
 800c62c:	3ff00000 	.word	0x3ff00000
 800c630:	40080000 	.word	0x40080000
 800c634:	0800cc70 	.word	0x0800cc70
 800c638:	0800cc60 	.word	0x0800cc60
 800c63c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c914 <__ieee754_pow+0xa54>)
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 fdcd 	bl	80001e4 <__adddf3>
 800c64a:	4622      	mov	r2, r4
 800c64c:	ec41 0b1a 	vmov	d10, r0, r1
 800c650:	462b      	mov	r3, r5
 800c652:	4630      	mov	r0, r6
 800c654:	4639      	mov	r1, r7
 800c656:	f7f3 fdc3 	bl	80001e0 <__aeabi_dsub>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	ec51 0b1a 	vmov	r0, r1, d10
 800c662:	f7f4 fa05 	bl	8000a70 <__aeabi_dcmpgt>
 800c666:	2800      	cmp	r0, #0
 800c668:	f47f ae04 	bne.w	800c274 <__ieee754_pow+0x3b4>
 800c66c:	4aa4      	ldr	r2, [pc, #656]	; (800c900 <__ieee754_pow+0xa40>)
 800c66e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c672:	4293      	cmp	r3, r2
 800c674:	f340 8108 	ble.w	800c888 <__ieee754_pow+0x9c8>
 800c678:	151b      	asrs	r3, r3, #20
 800c67a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c67e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c682:	fa4a f303 	asr.w	r3, sl, r3
 800c686:	445b      	add	r3, fp
 800c688:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c68c:	4e9d      	ldr	r6, [pc, #628]	; (800c904 <__ieee754_pow+0xa44>)
 800c68e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c692:	4116      	asrs	r6, r2
 800c694:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c698:	2000      	movs	r0, #0
 800c69a:	ea23 0106 	bic.w	r1, r3, r6
 800c69e:	f1c2 0214 	rsb	r2, r2, #20
 800c6a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c6a6:	fa4a fa02 	asr.w	sl, sl, r2
 800c6aa:	f1bb 0f00 	cmp.w	fp, #0
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	bfb8      	it	lt
 800c6b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c6bc:	f7f3 fd90 	bl	80001e0 <__aeabi_dsub>
 800c6c0:	ec41 0b19 	vmov	d9, r0, r1
 800c6c4:	4642      	mov	r2, r8
 800c6c6:	464b      	mov	r3, r9
 800c6c8:	ec51 0b19 	vmov	r0, r1, d9
 800c6cc:	f7f3 fd8a 	bl	80001e4 <__adddf3>
 800c6d0:	a37b      	add	r3, pc, #492	; (adr r3, 800c8c0 <__ieee754_pow+0xa00>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	4604      	mov	r4, r0
 800c6da:	460d      	mov	r5, r1
 800c6dc:	f7f3 ff38 	bl	8000550 <__aeabi_dmul>
 800c6e0:	ec53 2b19 	vmov	r2, r3, d9
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fd78 	bl	80001e0 <__aeabi_dsub>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	f7f3 fd72 	bl	80001e0 <__aeabi_dsub>
 800c6fc:	a372      	add	r3, pc, #456	; (adr r3, 800c8c8 <__ieee754_pow+0xa08>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 ff25 	bl	8000550 <__aeabi_dmul>
 800c706:	a372      	add	r3, pc, #456	; (adr r3, 800c8d0 <__ieee754_pow+0xa10>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	4680      	mov	r8, r0
 800c70e:	4689      	mov	r9, r1
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	f7f3 ff1c 	bl	8000550 <__aeabi_dmul>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4640      	mov	r0, r8
 800c71e:	4649      	mov	r1, r9
 800c720:	f7f3 fd60 	bl	80001e4 <__adddf3>
 800c724:	4604      	mov	r4, r0
 800c726:	460d      	mov	r5, r1
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4630      	mov	r0, r6
 800c72e:	4639      	mov	r1, r7
 800c730:	f7f3 fd58 	bl	80001e4 <__adddf3>
 800c734:	4632      	mov	r2, r6
 800c736:	463b      	mov	r3, r7
 800c738:	4680      	mov	r8, r0
 800c73a:	4689      	mov	r9, r1
 800c73c:	f7f3 fd50 	bl	80001e0 <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fd4a 	bl	80001e0 <__aeabi_dsub>
 800c74c:	4642      	mov	r2, r8
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	464b      	mov	r3, r9
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f3 fefa 	bl	8000550 <__aeabi_dmul>
 800c75c:	a35e      	add	r3, pc, #376	; (adr r3, 800c8d8 <__ieee754_pow+0xa18>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	4604      	mov	r4, r0
 800c764:	460d      	mov	r5, r1
 800c766:	f7f3 fef3 	bl	8000550 <__aeabi_dmul>
 800c76a:	a35d      	add	r3, pc, #372	; (adr r3, 800c8e0 <__ieee754_pow+0xa20>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 fd36 	bl	80001e0 <__aeabi_dsub>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 feea 	bl	8000550 <__aeabi_dmul>
 800c77c:	a35a      	add	r3, pc, #360	; (adr r3, 800c8e8 <__ieee754_pow+0xa28>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f7f3 fd2f 	bl	80001e4 <__adddf3>
 800c786:	4622      	mov	r2, r4
 800c788:	462b      	mov	r3, r5
 800c78a:	f7f3 fee1 	bl	8000550 <__aeabi_dmul>
 800c78e:	a358      	add	r3, pc, #352	; (adr r3, 800c8f0 <__ieee754_pow+0xa30>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 fd24 	bl	80001e0 <__aeabi_dsub>
 800c798:	4622      	mov	r2, r4
 800c79a:	462b      	mov	r3, r5
 800c79c:	f7f3 fed8 	bl	8000550 <__aeabi_dmul>
 800c7a0:	a355      	add	r3, pc, #340	; (adr r3, 800c8f8 <__ieee754_pow+0xa38>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f7f3 fd1d 	bl	80001e4 <__adddf3>
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	f7f3 fecf 	bl	8000550 <__aeabi_dmul>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f3 fd11 	bl	80001e0 <__aeabi_dsub>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f3 fec1 	bl	8000550 <__aeabi_dmul>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	ec41 0b19 	vmov	d9, r0, r1
 800c7d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7d8:	4620      	mov	r0, r4
 800c7da:	4629      	mov	r1, r5
 800c7dc:	f7f3 fd00 	bl	80001e0 <__aeabi_dsub>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	ec51 0b19 	vmov	r0, r1, d9
 800c7e8:	f7f3 ffdc 	bl	80007a4 <__aeabi_ddiv>
 800c7ec:	4632      	mov	r2, r6
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	463b      	mov	r3, r7
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f3 feaa 	bl	8000550 <__aeabi_dmul>
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	f7f3 fcf0 	bl	80001e4 <__adddf3>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4620      	mov	r0, r4
 800c80a:	4629      	mov	r1, r5
 800c80c:	f7f3 fce8 	bl	80001e0 <__aeabi_dsub>
 800c810:	4642      	mov	r2, r8
 800c812:	464b      	mov	r3, r9
 800c814:	f7f3 fce4 	bl	80001e0 <__aeabi_dsub>
 800c818:	460b      	mov	r3, r1
 800c81a:	4602      	mov	r2, r0
 800c81c:	493a      	ldr	r1, [pc, #232]	; (800c908 <__ieee754_pow+0xa48>)
 800c81e:	2000      	movs	r0, #0
 800c820:	f7f3 fcde 	bl	80001e0 <__aeabi_dsub>
 800c824:	ec41 0b10 	vmov	d0, r0, r1
 800c828:	ee10 3a90 	vmov	r3, s1
 800c82c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c834:	da2b      	bge.n	800c88e <__ieee754_pow+0x9ce>
 800c836:	4650      	mov	r0, sl
 800c838:	f000 f966 	bl	800cb08 <scalbn>
 800c83c:	ec51 0b10 	vmov	r0, r1, d0
 800c840:	ec53 2b18 	vmov	r2, r3, d8
 800c844:	f7ff bbed 	b.w	800c022 <__ieee754_pow+0x162>
 800c848:	4b30      	ldr	r3, [pc, #192]	; (800c90c <__ieee754_pow+0xa4c>)
 800c84a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c84e:	429e      	cmp	r6, r3
 800c850:	f77f af0c 	ble.w	800c66c <__ieee754_pow+0x7ac>
 800c854:	4b2e      	ldr	r3, [pc, #184]	; (800c910 <__ieee754_pow+0xa50>)
 800c856:	440b      	add	r3, r1
 800c858:	4303      	orrs	r3, r0
 800c85a:	d009      	beq.n	800c870 <__ieee754_pow+0x9b0>
 800c85c:	ec51 0b18 	vmov	r0, r1, d8
 800c860:	2200      	movs	r2, #0
 800c862:	2300      	movs	r3, #0
 800c864:	f7f4 f8e6 	bl	8000a34 <__aeabi_dcmplt>
 800c868:	3800      	subs	r0, #0
 800c86a:	bf18      	it	ne
 800c86c:	2001      	movne	r0, #1
 800c86e:	e447      	b.n	800c100 <__ieee754_pow+0x240>
 800c870:	4622      	mov	r2, r4
 800c872:	462b      	mov	r3, r5
 800c874:	f7f3 fcb4 	bl	80001e0 <__aeabi_dsub>
 800c878:	4642      	mov	r2, r8
 800c87a:	464b      	mov	r3, r9
 800c87c:	f7f4 f8ee 	bl	8000a5c <__aeabi_dcmpge>
 800c880:	2800      	cmp	r0, #0
 800c882:	f43f aef3 	beq.w	800c66c <__ieee754_pow+0x7ac>
 800c886:	e7e9      	b.n	800c85c <__ieee754_pow+0x99c>
 800c888:	f04f 0a00 	mov.w	sl, #0
 800c88c:	e71a      	b.n	800c6c4 <__ieee754_pow+0x804>
 800c88e:	ec51 0b10 	vmov	r0, r1, d0
 800c892:	4619      	mov	r1, r3
 800c894:	e7d4      	b.n	800c840 <__ieee754_pow+0x980>
 800c896:	491c      	ldr	r1, [pc, #112]	; (800c908 <__ieee754_pow+0xa48>)
 800c898:	2000      	movs	r0, #0
 800c89a:	f7ff bb30 	b.w	800befe <__ieee754_pow+0x3e>
 800c89e:	2000      	movs	r0, #0
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	f7ff bb2c 	b.w	800befe <__ieee754_pow+0x3e>
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7ff bb28 	b.w	800befe <__ieee754_pow+0x3e>
 800c8ae:	9204      	str	r2, [sp, #16]
 800c8b0:	f7ff bb7a 	b.w	800bfa8 <__ieee754_pow+0xe8>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f7ff bb64 	b.w	800bf82 <__ieee754_pow+0xc2>
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w
 800c8c0:	00000000 	.word	0x00000000
 800c8c4:	3fe62e43 	.word	0x3fe62e43
 800c8c8:	fefa39ef 	.word	0xfefa39ef
 800c8cc:	3fe62e42 	.word	0x3fe62e42
 800c8d0:	0ca86c39 	.word	0x0ca86c39
 800c8d4:	be205c61 	.word	0xbe205c61
 800c8d8:	72bea4d0 	.word	0x72bea4d0
 800c8dc:	3e663769 	.word	0x3e663769
 800c8e0:	c5d26bf1 	.word	0xc5d26bf1
 800c8e4:	3ebbbd41 	.word	0x3ebbbd41
 800c8e8:	af25de2c 	.word	0xaf25de2c
 800c8ec:	3f11566a 	.word	0x3f11566a
 800c8f0:	16bebd93 	.word	0x16bebd93
 800c8f4:	3f66c16c 	.word	0x3f66c16c
 800c8f8:	5555553e 	.word	0x5555553e
 800c8fc:	3fc55555 	.word	0x3fc55555
 800c900:	3fe00000 	.word	0x3fe00000
 800c904:	000fffff 	.word	0x000fffff
 800c908:	3ff00000 	.word	0x3ff00000
 800c90c:	4090cbff 	.word	0x4090cbff
 800c910:	3f6f3400 	.word	0x3f6f3400
 800c914:	652b82fe 	.word	0x652b82fe
 800c918:	3c971547 	.word	0x3c971547

0800c91c <__ieee754_sqrt>:
 800c91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c920:	ec55 4b10 	vmov	r4, r5, d0
 800c924:	4e55      	ldr	r6, [pc, #340]	; (800ca7c <__ieee754_sqrt+0x160>)
 800c926:	43ae      	bics	r6, r5
 800c928:	ee10 0a10 	vmov	r0, s0
 800c92c:	ee10 3a10 	vmov	r3, s0
 800c930:	462a      	mov	r2, r5
 800c932:	4629      	mov	r1, r5
 800c934:	d110      	bne.n	800c958 <__ieee754_sqrt+0x3c>
 800c936:	ee10 2a10 	vmov	r2, s0
 800c93a:	462b      	mov	r3, r5
 800c93c:	f7f3 fe08 	bl	8000550 <__aeabi_dmul>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4620      	mov	r0, r4
 800c946:	4629      	mov	r1, r5
 800c948:	f7f3 fc4c 	bl	80001e4 <__adddf3>
 800c94c:	4604      	mov	r4, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	ec45 4b10 	vmov	d0, r4, r5
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	2d00      	cmp	r5, #0
 800c95a:	dc10      	bgt.n	800c97e <__ieee754_sqrt+0x62>
 800c95c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c960:	4330      	orrs	r0, r6
 800c962:	d0f5      	beq.n	800c950 <__ieee754_sqrt+0x34>
 800c964:	b15d      	cbz	r5, 800c97e <__ieee754_sqrt+0x62>
 800c966:	ee10 2a10 	vmov	r2, s0
 800c96a:	462b      	mov	r3, r5
 800c96c:	ee10 0a10 	vmov	r0, s0
 800c970:	f7f3 fc36 	bl	80001e0 <__aeabi_dsub>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	f7f3 ff14 	bl	80007a4 <__aeabi_ddiv>
 800c97c:	e7e6      	b.n	800c94c <__ieee754_sqrt+0x30>
 800c97e:	1512      	asrs	r2, r2, #20
 800c980:	d074      	beq.n	800ca6c <__ieee754_sqrt+0x150>
 800c982:	07d4      	lsls	r4, r2, #31
 800c984:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c988:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c98c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c990:	bf5e      	ittt	pl
 800c992:	0fda      	lsrpl	r2, r3, #31
 800c994:	005b      	lslpl	r3, r3, #1
 800c996:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c99a:	2400      	movs	r4, #0
 800c99c:	0fda      	lsrs	r2, r3, #31
 800c99e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c9a2:	107f      	asrs	r7, r7, #1
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	2516      	movs	r5, #22
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c9ae:	1886      	adds	r6, r0, r2
 800c9b0:	428e      	cmp	r6, r1
 800c9b2:	bfde      	ittt	le
 800c9b4:	1b89      	suble	r1, r1, r6
 800c9b6:	18b0      	addle	r0, r6, r2
 800c9b8:	18a4      	addle	r4, r4, r2
 800c9ba:	0049      	lsls	r1, r1, #1
 800c9bc:	3d01      	subs	r5, #1
 800c9be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c9c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c9c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9ca:	d1f0      	bne.n	800c9ae <__ieee754_sqrt+0x92>
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	f04f 0e20 	mov.w	lr, #32
 800c9d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c9d6:	4281      	cmp	r1, r0
 800c9d8:	eb06 0c05 	add.w	ip, r6, r5
 800c9dc:	dc02      	bgt.n	800c9e4 <__ieee754_sqrt+0xc8>
 800c9de:	d113      	bne.n	800ca08 <__ieee754_sqrt+0xec>
 800c9e0:	459c      	cmp	ip, r3
 800c9e2:	d811      	bhi.n	800ca08 <__ieee754_sqrt+0xec>
 800c9e4:	f1bc 0f00 	cmp.w	ip, #0
 800c9e8:	eb0c 0506 	add.w	r5, ip, r6
 800c9ec:	da43      	bge.n	800ca76 <__ieee754_sqrt+0x15a>
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	db41      	blt.n	800ca76 <__ieee754_sqrt+0x15a>
 800c9f2:	f100 0801 	add.w	r8, r0, #1
 800c9f6:	1a09      	subs	r1, r1, r0
 800c9f8:	459c      	cmp	ip, r3
 800c9fa:	bf88      	it	hi
 800c9fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ca00:	eba3 030c 	sub.w	r3, r3, ip
 800ca04:	4432      	add	r2, r6
 800ca06:	4640      	mov	r0, r8
 800ca08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ca0c:	f1be 0e01 	subs.w	lr, lr, #1
 800ca10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ca14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ca1c:	d1db      	bne.n	800c9d6 <__ieee754_sqrt+0xba>
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	d006      	beq.n	800ca30 <__ieee754_sqrt+0x114>
 800ca22:	1c50      	adds	r0, r2, #1
 800ca24:	bf13      	iteet	ne
 800ca26:	3201      	addne	r2, #1
 800ca28:	3401      	addeq	r4, #1
 800ca2a:	4672      	moveq	r2, lr
 800ca2c:	f022 0201 	bicne.w	r2, r2, #1
 800ca30:	1063      	asrs	r3, r4, #1
 800ca32:	0852      	lsrs	r2, r2, #1
 800ca34:	07e1      	lsls	r1, r4, #31
 800ca36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ca3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ca3e:	bf48      	it	mi
 800ca40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ca44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ca48:	4614      	mov	r4, r2
 800ca4a:	e781      	b.n	800c950 <__ieee754_sqrt+0x34>
 800ca4c:	0ad9      	lsrs	r1, r3, #11
 800ca4e:	3815      	subs	r0, #21
 800ca50:	055b      	lsls	r3, r3, #21
 800ca52:	2900      	cmp	r1, #0
 800ca54:	d0fa      	beq.n	800ca4c <__ieee754_sqrt+0x130>
 800ca56:	02cd      	lsls	r5, r1, #11
 800ca58:	d50a      	bpl.n	800ca70 <__ieee754_sqrt+0x154>
 800ca5a:	f1c2 0420 	rsb	r4, r2, #32
 800ca5e:	fa23 f404 	lsr.w	r4, r3, r4
 800ca62:	1e55      	subs	r5, r2, #1
 800ca64:	4093      	lsls	r3, r2
 800ca66:	4321      	orrs	r1, r4
 800ca68:	1b42      	subs	r2, r0, r5
 800ca6a:	e78a      	b.n	800c982 <__ieee754_sqrt+0x66>
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	e7f0      	b.n	800ca52 <__ieee754_sqrt+0x136>
 800ca70:	0049      	lsls	r1, r1, #1
 800ca72:	3201      	adds	r2, #1
 800ca74:	e7ef      	b.n	800ca56 <__ieee754_sqrt+0x13a>
 800ca76:	4680      	mov	r8, r0
 800ca78:	e7bd      	b.n	800c9f6 <__ieee754_sqrt+0xda>
 800ca7a:	bf00      	nop
 800ca7c:	7ff00000 	.word	0x7ff00000

0800ca80 <with_errno>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	4604      	mov	r4, r0
 800ca84:	460d      	mov	r5, r1
 800ca86:	4616      	mov	r6, r2
 800ca88:	f7ff f8c8 	bl	800bc1c <__errno>
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	6006      	str	r6, [r0, #0]
 800ca90:	4620      	mov	r0, r4
 800ca92:	bd70      	pop	{r4, r5, r6, pc}

0800ca94 <xflow>:
 800ca94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca96:	4614      	mov	r4, r2
 800ca98:	461d      	mov	r5, r3
 800ca9a:	b108      	cbz	r0, 800caa0 <xflow+0xc>
 800ca9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800caa0:	e9cd 2300 	strd	r2, r3, [sp]
 800caa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fd50 	bl	8000550 <__aeabi_dmul>
 800cab0:	2222      	movs	r2, #34	; 0x22
 800cab2:	b003      	add	sp, #12
 800cab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cab8:	f7ff bfe2 	b.w	800ca80 <with_errno>

0800cabc <__math_uflow>:
 800cabc:	b508      	push	{r3, lr}
 800cabe:	2200      	movs	r2, #0
 800cac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cac4:	f7ff ffe6 	bl	800ca94 <xflow>
 800cac8:	ec41 0b10 	vmov	d0, r0, r1
 800cacc:	bd08      	pop	{r3, pc}

0800cace <__math_oflow>:
 800cace:	b508      	push	{r3, lr}
 800cad0:	2200      	movs	r2, #0
 800cad2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cad6:	f7ff ffdd 	bl	800ca94 <xflow>
 800cada:	ec41 0b10 	vmov	d0, r0, r1
 800cade:	bd08      	pop	{r3, pc}

0800cae0 <fabs>:
 800cae0:	ec51 0b10 	vmov	r0, r1, d0
 800cae4:	ee10 2a10 	vmov	r2, s0
 800cae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800caec:	ec43 2b10 	vmov	d0, r2, r3
 800caf0:	4770      	bx	lr

0800caf2 <finite>:
 800caf2:	b082      	sub	sp, #8
 800caf4:	ed8d 0b00 	vstr	d0, [sp]
 800caf8:	9801      	ldr	r0, [sp, #4]
 800cafa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cafe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb02:	0fc0      	lsrs	r0, r0, #31
 800cb04:	b002      	add	sp, #8
 800cb06:	4770      	bx	lr

0800cb08 <scalbn>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	ec55 4b10 	vmov	r4, r5, d0
 800cb0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cb12:	4606      	mov	r6, r0
 800cb14:	462b      	mov	r3, r5
 800cb16:	b99a      	cbnz	r2, 800cb40 <scalbn+0x38>
 800cb18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb1c:	4323      	orrs	r3, r4
 800cb1e:	d036      	beq.n	800cb8e <scalbn+0x86>
 800cb20:	4b39      	ldr	r3, [pc, #228]	; (800cc08 <scalbn+0x100>)
 800cb22:	4629      	mov	r1, r5
 800cb24:	ee10 0a10 	vmov	r0, s0
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f7f3 fd11 	bl	8000550 <__aeabi_dmul>
 800cb2e:	4b37      	ldr	r3, [pc, #220]	; (800cc0c <scalbn+0x104>)
 800cb30:	429e      	cmp	r6, r3
 800cb32:	4604      	mov	r4, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	da10      	bge.n	800cb5a <scalbn+0x52>
 800cb38:	a32b      	add	r3, pc, #172	; (adr r3, 800cbe8 <scalbn+0xe0>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	e03a      	b.n	800cbb6 <scalbn+0xae>
 800cb40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cb44:	428a      	cmp	r2, r1
 800cb46:	d10c      	bne.n	800cb62 <scalbn+0x5a>
 800cb48:	ee10 2a10 	vmov	r2, s0
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f7f3 fb48 	bl	80001e4 <__adddf3>
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	e019      	b.n	800cb8e <scalbn+0x86>
 800cb5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb5e:	460b      	mov	r3, r1
 800cb60:	3a36      	subs	r2, #54	; 0x36
 800cb62:	4432      	add	r2, r6
 800cb64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cb68:	428a      	cmp	r2, r1
 800cb6a:	dd08      	ble.n	800cb7e <scalbn+0x76>
 800cb6c:	2d00      	cmp	r5, #0
 800cb6e:	a120      	add	r1, pc, #128	; (adr r1, 800cbf0 <scalbn+0xe8>)
 800cb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb74:	da1c      	bge.n	800cbb0 <scalbn+0xa8>
 800cb76:	a120      	add	r1, pc, #128	; (adr r1, 800cbf8 <scalbn+0xf0>)
 800cb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7c:	e018      	b.n	800cbb0 <scalbn+0xa8>
 800cb7e:	2a00      	cmp	r2, #0
 800cb80:	dd08      	ble.n	800cb94 <scalbn+0x8c>
 800cb82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb8e:	ec45 4b10 	vmov	d0, r4, r5
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb98:	da19      	bge.n	800cbce <scalbn+0xc6>
 800cb9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb9e:	429e      	cmp	r6, r3
 800cba0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cba4:	dd0a      	ble.n	800cbbc <scalbn+0xb4>
 800cba6:	a112      	add	r1, pc, #72	; (adr r1, 800cbf0 <scalbn+0xe8>)
 800cba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e2      	bne.n	800cb76 <scalbn+0x6e>
 800cbb0:	a30f      	add	r3, pc, #60	; (adr r3, 800cbf0 <scalbn+0xe8>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fccb 	bl	8000550 <__aeabi_dmul>
 800cbba:	e7cb      	b.n	800cb54 <scalbn+0x4c>
 800cbbc:	a10a      	add	r1, pc, #40	; (adr r1, 800cbe8 <scalbn+0xe0>)
 800cbbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0b8      	beq.n	800cb38 <scalbn+0x30>
 800cbc6:	a10e      	add	r1, pc, #56	; (adr r1, 800cc00 <scalbn+0xf8>)
 800cbc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbcc:	e7b4      	b.n	800cb38 <scalbn+0x30>
 800cbce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbd2:	3236      	adds	r2, #54	; 0x36
 800cbd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4b0c      	ldr	r3, [pc, #48]	; (800cc10 <scalbn+0x108>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	e7e8      	b.n	800cbb6 <scalbn+0xae>
 800cbe4:	f3af 8000 	nop.w
 800cbe8:	c2f8f359 	.word	0xc2f8f359
 800cbec:	01a56e1f 	.word	0x01a56e1f
 800cbf0:	8800759c 	.word	0x8800759c
 800cbf4:	7e37e43c 	.word	0x7e37e43c
 800cbf8:	8800759c 	.word	0x8800759c
 800cbfc:	fe37e43c 	.word	0xfe37e43c
 800cc00:	c2f8f359 	.word	0xc2f8f359
 800cc04:	81a56e1f 	.word	0x81a56e1f
 800cc08:	43500000 	.word	0x43500000
 800cc0c:	ffff3cb0 	.word	0xffff3cb0
 800cc10:	3c900000 	.word	0x3c900000

0800cc14 <_init>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_fini>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr
