
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009040  08009040  00019040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009088  08009088  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009090  08009090  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000110  080091a4  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080091a4  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f51  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002912  00000000  00000000  0003508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000389b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a82  00000000  00000000  000398e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012acc  00000000  00000000  00050362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009167d  00000000  00000000  00062e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f44ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  000f4570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000f8e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000110 	.word	0x20000110
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009024 	.word	0x08009024

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000114 	.word	0x20000114
 80001d4:	08009024 	.word	0x08009024

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f002 fcd1 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f8ef 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f000 faef 	bl	8001444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e66:	f000 fac3 	bl	80013f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e6a:	f000 f951 	bl	8001110 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e6e:	f000 f97d 	bl	800116c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e72:	f000 fa1b 	bl	80012ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e76:	f000 fa6d 	bl	8001354 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8000e7a:	20c8      	movs	r0, #200	; 0xc8
 8000e7c:	f002 fd32 	bl	80038e4 <HAL_Delay>
  setmatrix();
 8000e80:	f000 fd92 	bl	80019a8 <setmatrix>
  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000e84:	4856      	ldr	r0, [pc, #344]	; (8000fe0 <main+0x18c>)
 8000e86:	f005 fb69 	bl	800655c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4854      	ldr	r0, [pc, #336]	; (8000fe0 <main+0x18c>)
 8000e8e:	f005 fc7b 	bl	8006788 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e92:	213c      	movs	r1, #60	; 0x3c
 8000e94:	4853      	ldr	r0, [pc, #332]	; (8000fe4 <main+0x190>)
 8000e96:	f005 fdcd 	bl	8006a34 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000e9a:	4853      	ldr	r0, [pc, #332]	; (8000fe8 <main+0x194>)
 8000e9c:	f005 fbb8 	bl	8006610 <HAL_TIM_Base_Start_IT>

  //Set Matrix for Kalman Filter

  //
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4851      	ldr	r0, [pc, #324]	; (8000fec <main+0x198>)
 8000ea6:	f003 f81f 	bl	8003ee8 <HAL_GPIO_WritePin>
  SetHome_Flag = 1;
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <main+0x19c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch (ArmState)
 8000eb0:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <main+0x1a0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b06      	cmp	r3, #6
 8000eb6:	d8fb      	bhi.n	8000eb0 <main+0x5c>
 8000eb8:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <main+0x6c>)
 8000eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebe:	bf00      	nop
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000f21 	.word	0x08000f21
 8000ec8:	08000f2d 	.word	0x08000f2d
 8000ecc:	08000f33 	.word	0x08000f33
 8000ed0:	08000f7f 	.word	0x08000f7f
 8000ed4:	08000eb1 	.word	0x08000eb1
 8000ed8:	08000fcf 	.word	0x08000fcf
	 {
	 	 case Defualt:

	 		 if (SetHome_Flag)
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <main+0x19c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <main+0x98>
	 		 {
	 			 ArmState = RunSetHome;
 8000ee4:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <main+0x1a0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
	 			 break;
 8000eea:	e078      	b.n	8000fde <main+0x18a>
	 		 }

	 		 else if (Go_Flag)
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <main+0x1a4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <main+0xa8>
	 		 {
	 			 ArmState = PreparePID;
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <main+0x1a0>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	701a      	strb	r2, [r3, #0]
	 			 break;
 8000efa:	e070      	b.n	8000fde <main+0x18a>
	 		 }

	 		 Unwrap();
 8000efc:	f000 fbb0 	bl	8001660 <Unwrap>
	 		 RunMotor(volt, dir);
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <main+0x1a8>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4a3b      	ldr	r2, [pc, #236]	; (8001000 <main+0x1ac>)
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fb51 	bl	80015c0 <RunMotor>
	 		 break;
 8000f1e:	e05e      	b.n	8000fde <main+0x18a>

	 	 case RunSetHome:
	 		 SetHome();
 8000f20:	f000 fc50 	bl	80017c4 <SetHome>
	 		 ArmState = WaitSetHome;
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <main+0x1a0>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000f2a:	e058      	b.n	8000fde <main+0x18a>

	 	 case WaitSetHome:
	 		 Unwrap();
 8000f2c:	f000 fb98 	bl	8001660 <Unwrap>
	 		 break;
 8000f30:	e055      	b.n	8000fde <main+0x18a>

	 	 case FinishSetHome:
	 		 HAL_Delay(2000);
 8000f32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f36:	f002 fcd5 	bl	80038e4 <HAL_Delay>
	 		 TIM3->CNT = 0;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <main+0x1b0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
	 		 angle_before = 0;
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <main+0x1b4>)
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	 		 angle = 0;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <main+0x1b8>)
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
	 		 angle_base_before = 0;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <main+0x1bc>)
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
	 		 angle_base =0;
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <main+0x1c0>)
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
	 		 angle_sum_before = 0;
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <main+0x1c4>)
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
	 		 angle_sum = 0;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <main+0x1c8>)
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	 		 Go_Flag = 1; //go!!
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <main+0x1a4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	 		 //GenVolt_Flag = 1;//gen volt
	 		 ArmState = Defualt;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <main+0x1a0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000f7c:	e02f      	b.n	8000fde <main+0x18a>

	 	 case PreparePID:
	 		 TrajectoryGenerator_Flag = 1;
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <main+0x1cc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
	 		 TrajectoryGenerator();
 8000f84:	f000 ff8c 	bl	8001ea0 <TrajectoryGenerator>
	 		 TrajectoryGenerator_Flag = 0;
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <main+0x1cc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	 		 e1 = 0;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <main+0x1d0>)
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
	 		 s1 = 0;
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <main+0x1d4>)
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	 		 p1 = 0;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <main+0x1d8>)
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
	 		 u1 = 0;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <main+0x1dc>)
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	 		 e2 = 0;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <main+0x1e0>)
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	 		 s2 = 0;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <main+0x1e4>)
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
	 		 u2 = 0;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <main+0x1e8>)
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	 		 ArmState = RunPID;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <main+0x1a0>)
 8000fc8:	2205      	movs	r2, #5
 8000fca:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000fcc:	e007      	b.n	8000fde <main+0x18a>

	 	 case RunPID:
	 		break;

	 	 case FinishPID:
	 		 volt = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <main+0x1a8>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
	 		 ArmState = Defualt;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <main+0x1a0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
	 		 break;
 8000fdc:	bf00      	nop
	 switch (ArmState)
 8000fde:	e767      	b.n	8000eb0 <main+0x5c>
 8000fe0:	20000180 	.word	0x20000180
 8000fe4:	200001c8 	.word	0x200001c8
 8000fe8:	20000210 	.word	0x20000210
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	200002a0 	.word	0x200002a0
 8000ff4:	200004c4 	.word	0x200004c4
 8000ff8:	200002a1 	.word	0x200002a1
 8000ffc:	2000029c 	.word	0x2000029c
 8001000:	20000098 	.word	0x20000098
 8001004:	40000400 	.word	0x40000400
 8001008:	200002ac 	.word	0x200002ac
 800100c:	200002a8 	.word	0x200002a8
 8001010:	200002b8 	.word	0x200002b8
 8001014:	200002bc 	.word	0x200002bc
 8001018:	200002b4 	.word	0x200002b4
 800101c:	200002b0 	.word	0x200002b0
 8001020:	200002a2 	.word	0x200002a2
 8001024:	200004a4 	.word	0x200004a4
 8001028:	200004a8 	.word	0x200004a8
 800102c:	200004ac 	.word	0x200004ac
 8001030:	200004b0 	.word	0x200004b0
 8001034:	200004b4 	.word	0x200004b4
 8001038:	200004b8 	.word	0x200004b8
 800103c:	200004bc 	.word	0x200004bc

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f007 f898 	bl	8008184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xc8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <SystemClock_Config+0xc8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <SystemClock_Config+0xc8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <SystemClock_Config+0xcc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <SystemClock_Config+0xcc>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <SystemClock_Config+0xcc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 fd61 	bl	8005b8c <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f002 f976 	bl	80033c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2103      	movs	r1, #3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 ffc3 	bl	800607c <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010fc:	f002 f960 	bl	80033c0 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x50>)
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_I2C1_Init+0x54>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x50>)
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_I2C1_Init+0x58>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_I2C1_Init+0x50>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_I2C1_Init+0x50>)
 800114e:	f002 fefd 	bl	8003f4c <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f002 f932 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000012c 	.word	0x2000012c
 8001164:	40005400 	.word	0x40005400
 8001168:	00061a80 	.word	0x00061a80

0800116c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	; 0x58
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 ffed 	bl	8008184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011ac:	4a3e      	ldr	r2, [pc, #248]	; (80012a8 <MX_TIM1_Init+0x13c>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011be:	f241 3287 	movw	r2, #4999	; 0x1387
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d6:	4833      	ldr	r0, [pc, #204]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011d8:	f005 f970 	bl	80064bc <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011e2:	f002 f8ed 	bl	80033c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011f0:	4619      	mov	r1, r3
 80011f2:	482c      	ldr	r0, [pc, #176]	; (80012a4 <MX_TIM1_Init+0x138>)
 80011f4:	f005 fe76 	bl	8006ee4 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011fe:	f002 f8df 	bl	80033c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001202:	4828      	ldr	r0, [pc, #160]	; (80012a4 <MX_TIM1_Init+0x138>)
 8001204:	f005 fa66 	bl	80066d4 <HAL_TIM_PWM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800120e:	f002 f8d7 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <MX_TIM1_Init+0x138>)
 8001222:	f006 fa1b 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800122c:	f002 f8c8 	bl	80033c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_TIM1_Init+0x138>)
 8001256:	f005 fd83 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001260:	f002 f8ae 	bl	80033c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM1_Init+0x138>)
 8001288:	f006 fa56 	bl	8007738 <HAL_TIMEx_ConfigBreakDeadTime>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001292:	f002 f895 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM1_Init+0x138>)
 8001298:	f002 f99e 	bl	80035d8 <HAL_TIM_MspPostInit>

}
 800129c:	bf00      	nop
 800129e:	3758      	adds	r7, #88	; 0x58
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000180 	.word	0x20000180
 80012a8:	40010000 	.word	0x40010000

080012ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 ff62 	bl	8008184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_TIM3_Init+0xa0>)
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <MX_TIM3_Init+0xa4>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_TIM3_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_TIM3_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_TIM3_Init+0xa0>)
 80012dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80012e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM3_Init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_TIM3_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ee:	2303      	movs	r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001306:	2301      	movs	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM3_Init+0xa0>)
 800131a:	f005 fae5 	bl	80068e8 <HAL_TIM_Encoder_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001324:	f002 f84c 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM3_Init+0xa0>)
 8001336:	f006 f991 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001340:	f002 f83e 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001c8 	.word	0x200001c8
 8001350:	40000400 	.word	0x40000400

08001354 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM4_Init+0x94>)
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_TIM4_Init+0x98>)
 8001374:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM4_Init+0x94>)
 8001378:	2209      	movs	r2, #9
 800137a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM4_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM4_Init+0x94>)
 8001384:	f242 720f 	movw	r2, #9999	; 0x270f
 8001388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_TIM4_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM4_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM4_Init+0x94>)
 8001398:	f005 f890 	bl	80064bc <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013a2:	f002 f80d 	bl	80033c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM4_Init+0x94>)
 80013b4:	f005 fd96 	bl	8006ee4 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013be:	f001 ffff 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM4_Init+0x94>)
 80013d0:	f006 f944 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013da:	f001 fff1 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000210 	.word	0x20000210
 80013ec:	40000800 	.word	0x40000800

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f006 f9ec 	bl	8007804 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f001 ffc5 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000258 	.word	0x20000258
 8001440:	40004400 	.word	0x40004400

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <MX_GPIO_Init+0x16c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <MX_GPIO_Init+0x16c>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <MX_GPIO_Init+0x16c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <MX_GPIO_Init+0x16c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <MX_GPIO_Init+0x16c>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <MX_GPIO_Init+0x16c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <MX_GPIO_Init+0x16c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <MX_GPIO_Init+0x16c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <MX_GPIO_Init+0x16c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <MX_GPIO_Init+0x16c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a3e      	ldr	r2, [pc, #248]	; (80015b0 <MX_GPIO_Init+0x16c>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_GPIO_Init+0x16c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	4839      	ldr	r0, [pc, #228]	; (80015b4 <MX_GPIO_Init+0x170>)
 80014d0:	f002 fd0a 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80014da:	4837      	ldr	r0, [pc, #220]	; (80015b8 <MX_GPIO_Init+0x174>)
 80014dc:	f002 fd04 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4831      	ldr	r0, [pc, #196]	; (80015bc <MX_GPIO_Init+0x178>)
 80014f8:	f002 fb5a 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4828      	ldr	r0, [pc, #160]	; (80015b4 <MX_GPIO_Init+0x170>)
 8001514:	f002 fb4c 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4821      	ldr	r0, [pc, #132]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001532:	f002 fb3d 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_X_Pin */
  GPIO_InitStruct.Pin = Encoder_X_Pin;
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_X_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <MX_GPIO_Init+0x178>)
 800154c:	f002 fb30 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001550:	2310      	movs	r3, #16
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001554:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001566:	f002 fb23 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 800156a:	2320      	movs	r3, #32
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800156e:	2311      	movs	r3, #17
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001582:	f002 fb15 	bl	8003bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200a      	movs	r0, #10
 800158c:	f002 faa9 	bl	8003ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001590:	200a      	movs	r0, #10
 8001592:	f002 fac2 	bl	8003b1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2017      	movs	r0, #23
 800159c:	f002 faa1 	bl	8003ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a0:	2017      	movs	r0, #23
 80015a2:	f002 faba 	bl	8003b1a <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800

080015c0 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(uint8_t volt, uint8_t direction)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
	static float PWMOut = 0;
	if (Emergency_status == 1)
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <RunMotor+0x88>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <RunMotor+0x1c>
	{
		volt = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]
	}

	if (volt == 0)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <RunMotor+0x2e>
	{
		HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <RunMotor+0x8c>)
 80015e8:	f002 fc7e 	bl	8003ee8 <HAL_GPIO_WritePin>
 80015ec:	e004      	b.n	80015f8 <RunMotor+0x38>
	}

	else
	{
		HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2120      	movs	r1, #32
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <RunMotor+0x8c>)
 80015f4:	f002 fc78 	bl	8003ee8 <HAL_GPIO_WritePin>
	}

	PWMOut = (volt*5000)/24;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <RunMotor+0x90>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <RunMotor+0x94>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	461a      	mov	r2, r3
 8001620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <RunMotor+0x8c>)
 8001626:	f002 fc5f 	bl	8003ee8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <RunMotor+0x94>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <RunMotor+0x98>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001638:	ee17 2a90 	vmov	r2, s15
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002a3 	.word	0x200002a3
 800164c:	40020400 	.word	0x40020400
 8001650:	2aaaaaab 	.word	0x2aaaaaab
 8001654:	200004c8 	.word	0x200004c8
 8001658:	20000180 	.word	0x20000180
 800165c:	00000000 	.word	0x00000000

08001660 <Unwrap>:

void Unwrap()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	angle_before = angle;
 8001664:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <Unwrap+0x100>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <Unwrap+0x104>)
 800166a:	6013      	str	r3, [r2, #0]
	angle_sum_before = angle_sum;
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <Unwrap+0x108>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a3e      	ldr	r2, [pc, #248]	; (800176c <Unwrap+0x10c>)
 8001672:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2*M_PI);
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <Unwrap+0x110>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe feef 	bl	800045c <__aeabi_ui2d>
 800167e:	a334      	add	r3, pc, #208	; (adr r3, 8001750 <Unwrap+0xf0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f88e 	bl	80007a4 <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	a331      	add	r3, pc, #196	; (adr r3, 8001758 <Unwrap+0xf8>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff5b 	bl	8000550 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa05 	bl	8000ab0 <__aeabi_d2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <Unwrap+0x100>)
 80016aa:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <Unwrap+0x114>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a31      	ldr	r2, [pc, #196]	; (8001778 <Unwrap+0x118>)
 80016b2:	6013      	str	r3, [r2, #0]

	if ((angle - angle_before) <= -threshold)
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <Unwrap+0x100>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <Unwrap+0x104>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <Unwrap+0x11c>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eef1 7a67 	vneg.f32	s15, s15
 80016ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d80b      	bhi.n	80016f0 <Unwrap+0x90>
	{
		angle_base = angle_base_before + angle_max;
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <Unwrap+0x118>)
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <Unwrap+0x120>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <Unwrap+0x114>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]
 80016ee:	e01f      	b.n	8001730 <Unwrap+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <Unwrap+0x100>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <Unwrap+0x104>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <Unwrap+0x11c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	db0b      	blt.n	8001728 <Unwrap+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <Unwrap+0x118>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <Unwrap+0x120>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <Unwrap+0x114>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
 8001726:	e003      	b.n	8001730 <Unwrap+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <Unwrap+0x118>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <Unwrap+0x114>)
 800172e:	6013      	str	r3, [r2, #0]
	}

	angle_sum = angle + angle_base;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <Unwrap+0x100>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <Unwrap+0x114>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <Unwrap+0x108>)
 8001742:	edc3 7a00 	vstr	s15, [r3]
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	00000000 	.word	0x00000000
 8001754:	40bfff00 	.word	0x40bfff00
 8001758:	54442d18 	.word	0x54442d18
 800175c:	401921fb 	.word	0x401921fb
 8001760:	200002a8 	.word	0x200002a8
 8001764:	200002ac 	.word	0x200002ac
 8001768:	200002b0 	.word	0x200002b0
 800176c:	200002b4 	.word	0x200002b4
 8001770:	40000400 	.word	0x40000400
 8001774:	200002bc 	.word	0x200002bc
 8001778:	200002b8 	.word	0x200002b8
 800177c:	20000004 	.word	0x20000004
 8001780:	20000008 	.word	0x20000008

08001784 <BackwardDifference>:

void BackwardDifference()
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	omega_tosensor = (angle_sum-angle_sum_before)/dt;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <BackwardDifference+0x30>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <BackwardDifference+0x34>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <BackwardDifference+0x38>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <BackwardDifference+0x3c>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	200002b4 	.word	0x200002b4
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	200002c0 	.word	0x200002c0

080017c4 <SetHome>:

void SetHome()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	if(SetHome_Flag == 1)
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <SetHome+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d115      	bne.n	80017fe <SetHome+0x3a>
	{
		volt = 10;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <SetHome+0x48>)
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <SetHome+0x4c>)
 80017d6:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <SetHome+0x48>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80017e6:	793b      	ldrb	r3, [r7, #4]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fee7 	bl	80015c0 <RunMotor>
		AlSet_Flag = 0;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SetHome+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <SetHome+0x44>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	}
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200002a0 	.word	0x200002a0
 800180c:	2000029c 	.word	0x2000029c
 8001810:	41200000 	.word	0x41200000
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder_X_Pin && AlSet_Flag == 0)
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	d11e      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x4e>
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_GPIO_EXTI_Callback+0x84>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11a      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		volt = 0;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x88>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001842:	edc7 7a00 	vstr	s15, [r7]
 8001846:	783b      	ldrb	r3, [r7, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2101      	movs	r1, #1
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff feb7 	bl	80015c0 <RunMotor>
		angle_sum = 0;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
		AlSet_Flag = 1;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_GPIO_EXTI_Callback+0x84>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
		ArmState = FinishSetHome;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x90>)
 8001862:	2203      	movs	r2, #3
 8001864:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d112      	bne.n	8001892 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 800186c:	2110      	movs	r1, #16
 800186e:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001870:	f002 fb22 	bl	8003eb8 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_GPIO_EXTI_Callback+0x74>
		{
			Emergency_status = 1;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2120      	movs	r1, #32
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001886:	f002 fb2f 	bl	8003ee8 <HAL_GPIO_WritePin>
		else
		{
			Emergency_status = 0;
		}
	}
}
 800188a:	e002      	b.n	8001892 <HAL_GPIO_EXTI_Callback+0x7a>
			Emergency_status = 0;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000
 80018a0:	2000029c 	.word	0x2000029c
 80018a4:	200002b0 	.word	0x200002b0
 80018a8:	200004c4 	.word	0x200004c4
 80018ac:	40020400 	.word	0x40020400
 80018b0:	200002a3 	.word	0x200002a3

080018b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	ed2d 8b02 	vpush	{d8}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	//if (htim == &htim4 && (Go_Flag || GenVolt_Flag) && !SetHome_Flag && AlSet_Flag)
	if (htim == &htim4 && Go_Flag && ArmState == RunPID)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d151      	bne.n	800196c <HAL_TIM_PeriodElapsedCallback+0xb8>
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d04d      	beq.n	800196c <HAL_TIM_PeriodElapsedCallback+0xb8>
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d149      	bne.n	800196c <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		//genvol
		Unwrap();
 80018d8:	f7ff fec2 	bl	8001660 <Unwrap>
		BackwardDifference();
 80018dc:	f7ff ff52 	bl	8001784 <BackwardDifference>
		TrajectoryEvaluation();
 80018e0:	f000 fede 	bl	80026a0 <TrajectoryEvaluation>
		kalmanfilter();
 80018e4:	f000 fab8 	bl	8001e58 <kalmanfilter>
		volt = Cascade(theta, position_kalman, omega, omega_kalman);
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f8dd 	bl	8000ab0 <__aeabi_d2f>
 80018f6:	4604      	mov	r4, r0
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018fa:	ed93 8a00 	vldr	s16, [r3]
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f8d2 	bl	8000ab0 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	eef0 1a67 	vmov.f32	s3, s15
 8001918:	ee01 2a10 	vmov	s2, r2
 800191c:	eef0 0a48 	vmov.f32	s1, s16
 8001920:	ee00 4a10 	vmov	s0, r4
 8001924:	f001 fcda 	bl	80032dc <Cascade>
 8001928:	eef0 7a40 	vmov.f32	s15, s0
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
		RunMotor(volt, PID_dir);
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193c:	edc7 7a00 	vstr	s15, [r7]
 8001940:	783b      	ldrb	r3, [r7, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe38 	bl	80015c0 <RunMotor>
		t+=dt;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
		trigger = 1;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
	}
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	ecbd 8b02 	vpop	{d8}
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	20000210 	.word	0x20000210
 800197c:	200002a1 	.word	0x200002a1
 8001980:	200004c4 	.word	0x200004c4
 8001984:	20000490 	.word	0x20000490
 8001988:	200002c4 	.word	0x200002c4
 800198c:	20000498 	.word	0x20000498
 8001990:	200002c8 	.word	0x200002c8
 8001994:	2000029c 	.word	0x2000029c
 8001998:	20000099 	.word	0x20000099
 800199c:	20000450 	.word	0x20000450
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	200002a4 	.word	0x200002a4

080019a8 <setmatrix>:

void setmatrix(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 80019ac:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <setmatrix+0x1d4>)
 80019ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019b2:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 80019b4:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <setmatrix+0x1d8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a70      	ldr	r2, [pc, #448]	; (8001b7c <setmatrix+0x1d4>)
 80019ba:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <setmatrix+0x1d8>)
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <setmatrix+0x1d8>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <setmatrix+0x1d4>)
 80019d6:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <setmatrix+0x1d8>)
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <setmatrix+0x1d8>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <setmatrix+0x1d8>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80019f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <setmatrix+0x1d4>)
 80019fe:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <setmatrix+0x1d4>)
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <setmatrix+0x1d4>)
 8001a0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a10:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001a12:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <setmatrix+0x1d8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a59      	ldr	r2, [pc, #356]	; (8001b7c <setmatrix+0x1d4>)
 8001a18:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <setmatrix+0x1d8>)
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <setmatrix+0x1d8>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <setmatrix+0x1d4>)
 8001a34:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <setmatrix+0x1d4>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <setmatrix+0x1d4>)
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <setmatrix+0x1d4>)
 8001a4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <setmatrix+0x1d8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <setmatrix+0x1d4>)
 8001a56:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <setmatrix+0x1d4>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <setmatrix+0x1d4>)
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <setmatrix+0x1d4>)
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <setmatrix+0x1d4>)
 8001a72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <setmatrix+0x1d8>)
 8001a7a:	ed93 7a00 	vldr	s14, [r3]
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <setmatrix+0x1d8>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <setmatrix+0x1d8>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a92:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <setmatrix+0x1dc>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <setmatrix+0x1d8>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <setmatrix+0x1d8>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <setmatrix+0x1dc>)
 8001aba:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <setmatrix+0x1d8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <setmatrix+0x1dc>)
 8001ac4:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <setmatrix+0x1dc>)
 8001ac8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001acc:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <setmatrix+0x1e0>)
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	482d      	ldr	r0, [pc, #180]	; (8001b8c <setmatrix+0x1e4>)
 8001ad6:	f006 fabd 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <setmatrix+0x1d4>)
 8001adc:	2204      	movs	r2, #4
 8001ade:	2104      	movs	r1, #4
 8001ae0:	482b      	ldr	r0, [pc, #172]	; (8001b90 <setmatrix+0x1e8>)
 8001ae2:	f006 fab7 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <setmatrix+0x1dc>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2104      	movs	r1, #4
 8001aec:	4829      	ldr	r0, [pc, #164]	; (8001b94 <setmatrix+0x1ec>)
 8001aee:	f006 fab1 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <setmatrix+0x1f0>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	2101      	movs	r1, #1
 8001af8:	4828      	ldr	r0, [pc, #160]	; (8001b9c <setmatrix+0x1f4>)
 8001afa:	f006 faab 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <setmatrix+0x1f8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	2101      	movs	r1, #1
 8001b04:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <setmatrix+0x1fc>)
 8001b06:	f006 faa5 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <setmatrix+0x200>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4826      	ldr	r0, [pc, #152]	; (8001bac <setmatrix+0x204>)
 8001b12:	f006 fa9f 	bl	8008054 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <setmatrix+0x208>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <setmatrix+0x20c>)
 8001b1e:	f006 fa99 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <setmatrix+0x210>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	2104      	movs	r1, #4
 8001b28:	4824      	ldr	r0, [pc, #144]	; (8001bbc <setmatrix+0x214>)
 8001b2a:	f006 fa93 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <setmatrix+0x218>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	2104      	movs	r1, #4
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <setmatrix+0x21c>)
 8001b36:	f006 fa8d 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <setmatrix+0x220>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2104      	movs	r1, #4
 8001b40:	4822      	ldr	r0, [pc, #136]	; (8001bcc <setmatrix+0x224>)
 8001b42:	f006 fa87 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <setmatrix+0x228>)
 8001b48:	2204      	movs	r2, #4
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <setmatrix+0x22c>)
 8001b4e:	f006 fa81 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <setmatrix+0x230>)
 8001b54:	2204      	movs	r2, #4
 8001b56:	2104      	movs	r1, #4
 8001b58:	4820      	ldr	r0, [pc, #128]	; (8001bdc <setmatrix+0x234>)
 8001b5a:	f006 fa7b 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <setmatrix+0x238>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	2101      	movs	r1, #1
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <setmatrix+0x23c>)
 8001b66:	f006 fa75 	bl	8008054 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <setmatrix+0x240>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2101      	movs	r1, #1
 8001b70:	481e      	ldr	r0, [pc, #120]	; (8001bec <setmatrix+0x244>)
 8001b72:	f006 fa6f 	bl	8008054 <arm_mat_init_f32>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000344 	.word	0x20000344
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000384 	.word	0x20000384
 8001b88:	20000010 	.word	0x20000010
 8001b8c:	200002d4 	.word	0x200002d4
 8001b90:	200002dc 	.word	0x200002dc
 8001b94:	200002e4 	.word	0x200002e4
 8001b98:	20000050 	.word	0x20000050
 8001b9c:	200002fc 	.word	0x200002fc
 8001ba0:	20000060 	.word	0x20000060
 8001ba4:	20000304 	.word	0x20000304
 8001ba8:	20000064 	.word	0x20000064
 8001bac:	200002ec 	.word	0x200002ec
 8001bb0:	20000394 	.word	0x20000394
 8001bb4:	2000030c 	.word	0x2000030c
 8001bb8:	20000398 	.word	0x20000398
 8001bbc:	200002f4 	.word	0x200002f4
 8001bc0:	200003a8 	.word	0x200003a8
 8001bc4:	20000324 	.word	0x20000324
 8001bc8:	200003b8 	.word	0x200003b8
 8001bcc:	2000032c 	.word	0x2000032c
 8001bd0:	200003c8 	.word	0x200003c8
 8001bd4:	20000334 	.word	0x20000334
 8001bd8:	20000408 	.word	0x20000408
 8001bdc:	2000033c 	.word	0x2000033c
 8001be0:	20000448 	.word	0x20000448
 8001be4:	20000314 	.word	0x20000314
 8001be8:	2000044c 	.word	0x2000044c
 8001bec:	2000031c 	.word	0x2000031c

08001bf0 <prediction>:

void prediction(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0c2      	sub	sp, #264	; 0x108
 8001bf4:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <prediction+0xcc>)
 8001bf8:	4931      	ldr	r1, [pc, #196]	; (8001cc0 <prediction+0xd0>)
 8001bfa:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <prediction+0xd4>)
 8001bfc:	f006 f98a 	bl	8007f14 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001c00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c04:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001c08:	2204      	movs	r2, #4
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	f006 fa22 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001c10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c14:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	f006 fa1a 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001c20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c24:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001c28:	2204      	movs	r2, #4
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	f006 fa12 	bl	8008054 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	f107 0018 	add.w	r0, r7, #24
 8001c38:	2204      	movs	r2, #4
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	f006 fa0a 	bl	8008054 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4638      	mov	r0, r7
 8001c46:	2204      	movs	r2, #4
 8001c48:	2101      	movs	r1, #1
 8001c4a:	f006 fa03 	bl	8008054 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4619      	mov	r1, r3
 8001c54:	481b      	ldr	r0, [pc, #108]	; (8001cc4 <prediction+0xd4>)
 8001c56:	f006 f897 	bl	8007d88 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <prediction+0xd8>)
 8001c60:	f006 f892 	bl	8007d88 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001c64:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4918      	ldr	r1, [pc, #96]	; (8001ccc <prediction+0xdc>)
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <prediction+0xd4>)
 8001c6e:	f006 f951 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001c72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c76:	461a      	mov	r2, r3
 8001c78:	4915      	ldr	r1, [pc, #84]	; (8001cd0 <prediction+0xe0>)
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <prediction+0xd8>)
 8001c7c:	f006 f94a 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001c80:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001c84:	f107 0118 	add.w	r1, r7, #24
 8001c88:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 f941 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001c92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c96:	4639      	mov	r1, r7
 8001c98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f006 f939 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001ca2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ca6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <prediction+0xe4>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 f9d5 	bl	800805c <arm_mat_add_f32>
}
 8001cb2:	bf00      	nop
 8001cb4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000032c 	.word	0x2000032c
 8001cc0:	20000324 	.word	0x20000324
 8001cc4:	200002dc 	.word	0x200002dc
 8001cc8:	200002e4 	.word	0x200002e4
 8001ccc:	20000334 	.word	0x20000334
 8001cd0:	200002ec 	.word	0x200002ec
 8001cd4:	2000033c 	.word	0x2000033c

08001cd8 <update>:

void update(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ae      	sub	sp, #184	; 0xb8
 8001cdc:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001cde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	f006 f9b3 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001cee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cf2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	f006 f9ab 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d02:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001d06:	2201      	movs	r2, #1
 8001d08:	2104      	movs	r1, #4
 8001d0a:	f006 f9a3 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8001d0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d12:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001d16:	2204      	movs	r2, #4
 8001d18:	2101      	movs	r1, #1
 8001d1a:	f006 f99b 	bl	8008054 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8001d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d22:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d26:	2201      	movs	r2, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	f006 f993 	bl	8008054 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	f107 0010 	add.w	r0, r7, #16
 8001d36:	2201      	movs	r2, #1
 8001d38:	2104      	movs	r1, #4
 8001d3a:	f006 f98b 	bl	8008054 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4619      	mov	r1, r3
 8001d44:	4837      	ldr	r0, [pc, #220]	; (8001e24 <update+0x14c>)
 8001d46:	f006 f81f 	bl	8007d88 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 8001d4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4935      	ldr	r1, [pc, #212]	; (8001e28 <update+0x150>)
 8001d52:	4834      	ldr	r0, [pc, #208]	; (8001e24 <update+0x14c>)
 8001d54:	f006 f8de 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8001d58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d5c:	f107 0110 	add.w	r1, r7, #16
 8001d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 f8d5 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 8001d6a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	4619      	mov	r1, r3
 8001d74:	482d      	ldr	r0, [pc, #180]	; (8001e2c <update+0x154>)
 8001d76:	f006 f971 	bl	800805c <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 8001d7a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d86:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	f107 0008 	add.w	r0, r7, #8
 8001d90:	2201      	movs	r2, #1
 8001d92:	2101      	movs	r1, #1
 8001d94:	f006 f95e 	bl	8008054 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 8001d98:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	4821      	ldr	r0, [pc, #132]	; (8001e28 <update+0x150>)
 8001da4:	f006 f8b6 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 8001da8:	f107 0108 	add.w	r1, r7, #8
 8001dac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <update+0x158>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 f8ae 	bl	8007f14 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 8001db8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4919      	ldr	r1, [pc, #100]	; (8001e24 <update+0x14c>)
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <update+0x158>)
 8001dc2:	f006 f8a7 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 8001dc6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4818      	ldr	r0, [pc, #96]	; (8001e34 <update+0x15c>)
 8001dd2:	f006 f835 	bl	8007e40 <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 8001dd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <update+0x160>)
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <update+0x150>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f006 f898 	bl	8007f14 <arm_mat_mult_f32>

	//data_input[0] = angle_sum;
	data_input[0] = omega_tosensor;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <update+0x164>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <update+0x168>)
 8001dea:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <update+0x16c>)
 8001dee:	4916      	ldr	r1, [pc, #88]	; (8001e48 <update+0x170>)
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <update+0x14c>)
 8001df2:	f006 f88f 	bl	8007f14 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <update+0x174>)
 8001df8:	4912      	ldr	r1, [pc, #72]	; (8001e44 <update+0x16c>)
 8001dfa:	4815      	ldr	r0, [pc, #84]	; (8001e50 <update+0x178>)
 8001dfc:	f006 f820 	bl	8007e40 <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 8001e00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e04:	461a      	mov	r2, r3
 8001e06:	4911      	ldr	r1, [pc, #68]	; (8001e4c <update+0x174>)
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <update+0x158>)
 8001e0a:	f006 f883 	bl	8007f14 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 8001e0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <update+0x17c>)
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <update+0x170>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 f920 	bl	800805c <arm_mat_add_f32>
}
 8001e1c:	bf00      	nop
 8001e1e:	37b8      	adds	r7, #184	; 0xb8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200002fc 	.word	0x200002fc
 8001e28:	2000033c 	.word	0x2000033c
 8001e2c:	20000304 	.word	0x20000304
 8001e30:	200002f4 	.word	0x200002f4
 8001e34:	200002d4 	.word	0x200002d4
 8001e38:	20000334 	.word	0x20000334
 8001e3c:	200002c0 	.word	0x200002c0
 8001e40:	20000394 	.word	0x20000394
 8001e44:	2000031c 	.word	0x2000031c
 8001e48:	2000032c 	.word	0x2000032c
 8001e4c:	20000314 	.word	0x20000314
 8001e50:	2000030c 	.word	0x2000030c
 8001e54:	20000324 	.word	0x20000324

08001e58 <kalmanfilter>:

void kalmanfilter()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	prediction();
 8001e5c:	f7ff fec8 	bl	8001bf0 <prediction>
	update();
 8001e60:	f7ff ff3a 	bl	8001cd8 <update>
	position_kalman = angle_sum;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <kalmanfilter+0x30>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <kalmanfilter+0x34>)
 8001e6a:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <kalmanfilter+0x38>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <kalmanfilter+0x3c>)
 8001e72:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <kalmanfilter+0x38>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <kalmanfilter+0x40>)
 8001e7a:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <kalmanfilter+0x38>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <kalmanfilter+0x44>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200002b0 	.word	0x200002b0
 8001e8c:	200002c4 	.word	0x200002c4
 8001e90:	200003b8 	.word	0x200003b8
 8001e94:	200002c8 	.word	0x200002c8
 8001e98:	200002cc 	.word	0x200002cc
 8001e9c:	200002d0 	.word	0x200002d0

08001ea0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4bb8      	ldr	r3, [pc, #736]	; (8002188 <TrajectoryGenerator+0x2e8>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 83bf 	beq.w	800262e <TrajectoryGenerator+0x78e>
		static uint8_t N;
		static float Va;
		static float Sa;
		static float Sv;

		theta_0 = angle_sum;
 8001eb0:	4bb6      	ldr	r3, [pc, #728]	; (800218c <TrajectoryGenerator+0x2ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe faf3 	bl	80004a0 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	49b4      	ldr	r1, [pc, #720]	; (8002190 <TrajectoryGenerator+0x2f0>)
 8001ec0:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 8001ec4:	4bb3      	ldr	r3, [pc, #716]	; (8002194 <TrajectoryGenerator+0x2f4>)
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	4bb1      	ldr	r3, [pc, #708]	; (8002190 <TrajectoryGenerator+0x2f0>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe f986 	bl	80001e0 <__aeabi_dsub>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	49af      	ldr	r1, [pc, #700]	; (8002198 <TrajectoryGenerator+0x2f8>)
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

		if(w_max*j_max < pow(a_max,2)){
 8001ede:	4baf      	ldr	r3, [pc, #700]	; (800219c <TrajectoryGenerator+0x2fc>)
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	4bae      	ldr	r3, [pc, #696]	; (80021a0 <TrajectoryGenerator+0x300>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb31 	bl	8000550 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	4bab      	ldr	r3, [pc, #684]	; (80021a4 <TrajectoryGenerator+0x304>)
 8001ef8:	ed93 7b00 	vldr	d7, [r3]
 8001efc:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002178 <TrajectoryGenerator+0x2d8>
 8001f00:	eeb0 0a47 	vmov.f32	s0, s14
 8001f04:	eef0 0a67 	vmov.f32	s1, s15
 8001f08:	f006 f944 	bl	8008194 <pow>
 8001f0c:	ec53 2b10 	vmov	r2, r3, d0
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe fd8e 	bl	8000a34 <__aeabi_dcmplt>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <TrajectoryGenerator+0x8c>
			M=1;
 8001f1e:	4ba2      	ldr	r3, [pc, #648]	; (80021a8 <TrajectoryGenerator+0x308>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
			N=0;
 8001f24:	4ba1      	ldr	r3, [pc, #644]	; (80021ac <TrajectoryGenerator+0x30c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e025      	b.n	8001f78 <TrajectoryGenerator+0xd8>
		}
		else if(w_max*j_max >= pow(a_max,2)){
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <TrajectoryGenerator+0x2fc>)
 8001f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f32:	4b9b      	ldr	r3, [pc, #620]	; (80021a0 <TrajectoryGenerator+0x300>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb0a 	bl	8000550 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <TrajectoryGenerator+0x304>)
 8001f46:	ed93 7b00 	vldr	d7, [r3]
 8001f4a:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002178 <TrajectoryGenerator+0x2d8>
 8001f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f52:	eef0 0a67 	vmov.f32	s1, s15
 8001f56:	f006 f91d 	bl	8008194 <pow>
 8001f5a:	ec53 2b10 	vmov	r2, r3, d0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fd7b 	bl	8000a5c <__aeabi_dcmpge>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <TrajectoryGenerator+0xd8>
			M=0;
 8001f6c:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <TrajectoryGenerator+0x308>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			N=1;
 8001f72:	4b8e      	ldr	r3, [pc, #568]	; (80021ac <TrajectoryGenerator+0x30c>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
		}

		Va = pow(a_max,2)/j_max;
 8001f78:	4b8a      	ldr	r3, [pc, #552]	; (80021a4 <TrajectoryGenerator+0x304>)
 8001f7a:	ed93 7b00 	vldr	d7, [r3]
 8001f7e:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002178 <TrajectoryGenerator+0x2d8>
 8001f82:	eeb0 0a47 	vmov.f32	s0, s14
 8001f86:	eef0 0a67 	vmov.f32	s1, s15
 8001f8a:	f006 f903 	bl	8008194 <pow>
 8001f8e:	ec51 0b10 	vmov	r0, r1, d0
 8001f92:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <TrajectoryGenerator+0x300>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fc04 	bl	80007a4 <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd84 	bl	8000ab0 <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a81      	ldr	r2, [pc, #516]	; (80021b0 <TrajectoryGenerator+0x310>)
 8001fac:	6013      	str	r3, [r2, #0]
		Sa = (2*pow(a_max,3))/(pow(j_max,2));
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <TrajectoryGenerator+0x304>)
 8001fb0:	ed93 7b00 	vldr	d7, [r3]
 8001fb4:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8002180 <TrajectoryGenerator+0x2e0>
 8001fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbc:	eef0 0a67 	vmov.f32	s1, s15
 8001fc0:	f006 f8e8 	bl	8008194 <pow>
 8001fc4:	ec51 0b10 	vmov	r0, r1, d0
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	f7fe f90a 	bl	80001e4 <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <TrajectoryGenerator+0x300>)
 8001fda:	ed93 7b00 	vldr	d7, [r3]
 8001fde:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8002178 <TrajectoryGenerator+0x2d8>
 8001fe2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe6:	eef0 0a67 	vmov.f32	s1, s15
 8001fea:	f006 f8d3 	bl	8008194 <pow>
 8001fee:	ec53 2b10 	vmov	r2, r3, d0
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f7fe fbd5 	bl	80007a4 <__aeabi_ddiv>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fd55 	bl	8000ab0 <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
 8002008:	4a6a      	ldr	r2, [pc, #424]	; (80021b4 <TrajectoryGenerator+0x314>)
 800200a:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <TrajectoryGenerator+0x308>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa33 	bl	800047c <__aeabi_i2d>
 8002016:	4604      	mov	r4, r0
 8002018:	460d      	mov	r5, r1
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <TrajectoryGenerator+0x2fc>)
 800201c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002020:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <TrajectoryGenerator+0x300>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fbbd 	bl	80007a4 <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	ec43 2b17 	vmov	d7, r2, r3
 8002032:	eeb0 0a47 	vmov.f32	s0, s14
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	f006 f91b 	bl	8008274 <sqrt>
 800203e:	ec51 0b10 	vmov	r0, r1, d0
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f7fe f8cd 	bl	80001e4 <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe fa7d 	bl	8000550 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4690      	mov	r8, r2
 800205c:	4699      	mov	r9, r3
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <TrajectoryGenerator+0x30c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa0a 	bl	800047c <__aeabi_i2d>
 8002068:	4604      	mov	r4, r0
 800206a:	460d      	mov	r5, r1
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <TrajectoryGenerator+0x2fc>)
 800206e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <TrajectoryGenerator+0x304>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fb94 	bl	80007a4 <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4692      	mov	sl, r2
 8002082:	469b      	mov	fp, r3
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <TrajectoryGenerator+0x304>)
 8002086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <TrajectoryGenerator+0x300>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fb88 	bl	80007a4 <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4650      	mov	r0, sl
 800209a:	4659      	mov	r1, fp
 800209c:	f7fe f8a2 	bl	80001e4 <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe fa52 	bl	8000550 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4640      	mov	r0, r8
 80020b2:	4649      	mov	r1, r9
 80020b4:	f7fe f896 	bl	80001e4 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <TrajectoryGenerator+0x2fc>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fa43 	bl	8000550 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fced 	bl	8000ab0 <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a37      	ldr	r2, [pc, #220]	; (80021b8 <TrajectoryGenerator+0x318>)
 80020da:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <TrajectoryGenerator+0x310>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f9dd 	bl	80004a0 <__aeabi_f2d>
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <TrajectoryGenerator+0x2fc>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fcc0 	bl	8000a70 <__aeabi_dcmpgt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80f4 	beq.w	80022e0 <TrajectoryGenerator+0x440>
			if(theta_dest > Sa){
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <TrajectoryGenerator+0x314>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f9cf 	bl	80004a0 <__aeabi_f2d>
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <TrajectoryGenerator+0x2f8>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fc94 	bl	8000a34 <__aeabi_dcmplt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d05a      	beq.n	80021c8 <TrajectoryGenerator+0x328>
				//caseI
				tj = sqrt((w_max/j_max));
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <TrajectoryGenerator+0x2fc>)
 8002114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <TrajectoryGenerator+0x300>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fb41 	bl	80007a4 <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	ec43 2b17 	vmov	d7, r2, r3
 800212a:	eeb0 0a47 	vmov.f32	s0, s14
 800212e:	eef0 0a67 	vmov.f32	s1, s15
 8002132:	f006 f89f 	bl	8008274 <sqrt>
 8002136:	ec53 2b10 	vmov	r2, r3, d0
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fcb7 	bl	8000ab0 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <TrajectoryGenerator+0x31c>)
 8002146:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <TrajectoryGenerator+0x31c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <TrajectoryGenerator+0x320>)
 800214e:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <TrajectoryGenerator+0x2f8>)
 8002152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <TrajectoryGenerator+0x2fc>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe fb22 	bl	80007a4 <__aeabi_ddiv>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fca2 	bl	8000ab0 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <TrajectoryGenerator+0x324>)
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e20e      	b.n	8002592 <TrajectoryGenerator+0x6f2>
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	40000000 	.word	0x40000000
 8002180:	00000000 	.word	0x00000000
 8002184:	40080000 	.word	0x40080000
 8002188:	200002a2 	.word	0x200002a2
 800218c:	200002b0 	.word	0x200002b0
 8002190:	20000480 	.word	0x20000480
 8002194:	20000080 	.word	0x20000080
 8002198:	20000488 	.word	0x20000488
 800219c:	20000068 	.word	0x20000068
 80021a0:	20000078 	.word	0x20000078
 80021a4:	20000070 	.word	0x20000070
 80021a8:	200004cc 	.word	0x200004cc
 80021ac:	200004cd 	.word	0x200004cd
 80021b0:	200004d0 	.word	0x200004d0
 80021b4:	200004d4 	.word	0x200004d4
 80021b8:	200004d8 	.word	0x200004d8
 80021bc:	20000470 	.word	0x20000470
 80021c0:	20000474 	.word	0x20000474
 80021c4:	20000478 	.word	0x20000478
			}
			else if(theta_dest < Sa){
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <TrajectoryGenerator+0x4e8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f967 	bl	80004a0 <__aeabi_f2d>
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <TrajectoryGenerator+0x4ec>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe fc4a 	bl	8000a70 <__aeabi_dcmpgt>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 81d7 	beq.w	8002592 <TrajectoryGenerator+0x6f2>
				if(theta_dest < Sv){
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <TrajectoryGenerator+0x4f0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f959 	bl	80004a0 <__aeabi_f2d>
 80021ee:	4b67      	ldr	r3, [pc, #412]	; (800238c <TrajectoryGenerator+0x4ec>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fc3c 	bl	8000a70 <__aeabi_dcmpgt>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d031      	beq.n	8002262 <TrajectoryGenerator+0x3c2>
					//caseIV
					tj = pow((theta_dest/(2*j_max)),0.33);
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <TrajectoryGenerator+0x4ec>)
 8002200:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002204:	4b63      	ldr	r3, [pc, #396]	; (8002394 <TrajectoryGenerator+0x4f4>)
 8002206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	f7fd ffe9 	bl	80001e4 <__adddf3>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe fac3 	bl	80007a4 <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	ec43 2b17 	vmov	d7, r2, r3
 8002226:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002380 <TrajectoryGenerator+0x4e0>
 800222a:	eeb0 0a47 	vmov.f32	s0, s14
 800222e:	eef0 0a67 	vmov.f32	s1, s15
 8002232:	f005 ffaf 	bl	8008194 <pow>
 8002236:	ec53 2b10 	vmov	r2, r3, d0
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fc37 	bl	8000ab0 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <TrajectoryGenerator+0x4f8>)
 8002246:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <TrajectoryGenerator+0x4f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a53      	ldr	r2, [pc, #332]	; (800239c <TrajectoryGenerator+0x4fc>)
 800224e:	6013      	str	r3, [r2, #0]
					tv = 2*tj;
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <TrajectoryGenerator+0x4f8>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <TrajectoryGenerator+0x500>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
 8002260:	e197      	b.n	8002592 <TrajectoryGenerator+0x6f2>
				}
				else if(theta_dest > Sv){
 8002262:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <TrajectoryGenerator+0x4f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f91a 	bl	80004a0 <__aeabi_f2d>
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <TrajectoryGenerator+0x4ec>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe fbdf 	bl	8000a34 <__aeabi_dcmplt>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 818a 	beq.w	8002592 <TrajectoryGenerator+0x6f2>
					//caseIII
					tj = sqrt((w_max/j_max));
 800227e:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <TrajectoryGenerator+0x504>)
 8002280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <TrajectoryGenerator+0x4f4>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe fa8b 	bl	80007a4 <__aeabi_ddiv>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	ec43 2b17 	vmov	d7, r2, r3
 8002296:	eeb0 0a47 	vmov.f32	s0, s14
 800229a:	eef0 0a67 	vmov.f32	s1, s15
 800229e:	f005 ffe9 	bl	8008274 <sqrt>
 80022a2:	ec53 2b10 	vmov	r2, r3, d0
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc01 	bl	8000ab0 <__aeabi_d2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a39      	ldr	r2, [pc, #228]	; (8002398 <TrajectoryGenerator+0x4f8>)
 80022b2:	6013      	str	r3, [r2, #0]
					ta = tj;
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <TrajectoryGenerator+0x4f8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <TrajectoryGenerator+0x4fc>)
 80022ba:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <TrajectoryGenerator+0x4ec>)
 80022be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <TrajectoryGenerator+0x504>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe fa6c 	bl	80007a4 <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fbec 	bl	8000ab0 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <TrajectoryGenerator+0x500>)
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e158      	b.n	8002592 <TrajectoryGenerator+0x6f2>
				}
			}
		}
		else if(w_max > Va){
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <TrajectoryGenerator+0x508>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8db 	bl	80004a0 <__aeabi_f2d>
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <TrajectoryGenerator+0x504>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe fba0 	bl	8000a34 <__aeabi_dcmplt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 814b 	beq.w	8002592 <TrajectoryGenerator+0x6f2>
			if(theta_dest < Sa){
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <TrajectoryGenerator+0x4e8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8cd 	bl	80004a0 <__aeabi_f2d>
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <TrajectoryGenerator+0x4ec>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe fbb0 	bl	8000a70 <__aeabi_dcmpgt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04a      	beq.n	80023ac <TrajectoryGenerator+0x50c>
				//caseII
				tj = pow((theta_dest/(2*j_max)),0.33);
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <TrajectoryGenerator+0x4ec>)
 8002318:	e9d3 4500 	ldrd	r4, r5, [r3]
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <TrajectoryGenerator+0x4f4>)
 800231e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	f7fd ff5d 	bl	80001e4 <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fe fa37 	bl	80007a4 <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	ec43 2b17 	vmov	d7, r2, r3
 800233e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002380 <TrajectoryGenerator+0x4e0>
 8002342:	eeb0 0a47 	vmov.f32	s0, s14
 8002346:	eef0 0a67 	vmov.f32	s1, s15
 800234a:	f005 ff23 	bl	8008194 <pow>
 800234e:	ec53 2b10 	vmov	r2, r3, d0
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fbab 	bl	8000ab0 <__aeabi_d2f>
 800235a:	4603      	mov	r3, r0
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <TrajectoryGenerator+0x4f8>)
 800235e:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <TrajectoryGenerator+0x4f8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <TrajectoryGenerator+0x4fc>)
 8002366:	6013      	str	r3, [r2, #0]
				tv = 2*tj;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <TrajectoryGenerator+0x4f8>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <TrajectoryGenerator+0x500>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
 8002378:	e10b      	b.n	8002592 <TrajectoryGenerator+0x6f2>
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w
 8002380:	51eb851f 	.word	0x51eb851f
 8002384:	3fd51eb8 	.word	0x3fd51eb8
 8002388:	200004d4 	.word	0x200004d4
 800238c:	20000488 	.word	0x20000488
 8002390:	200004d8 	.word	0x200004d8
 8002394:	20000078 	.word	0x20000078
 8002398:	20000470 	.word	0x20000470
 800239c:	20000474 	.word	0x20000474
 80023a0:	20000478 	.word	0x20000478
 80023a4:	20000068 	.word	0x20000068
 80023a8:	200004d0 	.word	0x200004d0
			}
			else if(theta_dest > Sa){
 80023ac:	4ba6      	ldr	r3, [pc, #664]	; (8002648 <TrajectoryGenerator+0x7a8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f875 	bl	80004a0 <__aeabi_f2d>
 80023b6:	4ba5      	ldr	r3, [pc, #660]	; (800264c <TrajectoryGenerator+0x7ac>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe fb3a 	bl	8000a34 <__aeabi_dcmplt>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80e5 	beq.w	8002592 <TrajectoryGenerator+0x6f2>
				if(theta_dest < Sv){
 80023c8:	4ba1      	ldr	r3, [pc, #644]	; (8002650 <TrajectoryGenerator+0x7b0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f867 	bl	80004a0 <__aeabi_f2d>
 80023d2:	4b9e      	ldr	r3, [pc, #632]	; (800264c <TrajectoryGenerator+0x7ac>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe fb4a 	bl	8000a70 <__aeabi_dcmpgt>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8097 	beq.w	8002512 <TrajectoryGenerator+0x672>
					//caseVI
					tj = a_max/j_max;
 80023e4:	4b9b      	ldr	r3, [pc, #620]	; (8002654 <TrajectoryGenerator+0x7b4>)
 80023e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ea:	4b9b      	ldr	r3, [pc, #620]	; (8002658 <TrajectoryGenerator+0x7b8>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f9d8 	bl	80007a4 <__aeabi_ddiv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fb58 	bl	8000ab0 <__aeabi_d2f>
 8002400:	4603      	mov	r3, r0
 8002402:	4a96      	ldr	r2, [pc, #600]	; (800265c <TrajectoryGenerator+0x7bc>)
 8002404:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4*theta_dest*pow(j_max,2))+pow(a_max,3))/(a_max*pow(j_max,2)))-(a_max/j_max));
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <TrajectoryGenerator+0x7ac>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b93      	ldr	r3, [pc, #588]	; (8002660 <TrajectoryGenerator+0x7c0>)
 8002412:	f7fe f89d 	bl	8000550 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <TrajectoryGenerator+0x7b8>)
 8002420:	ed93 7b00 	vldr	d7, [r3]
 8002424:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8002638 <TrajectoryGenerator+0x798>
 8002428:	eeb0 0a47 	vmov.f32	s0, s14
 800242c:	eef0 0a67 	vmov.f32	s1, s15
 8002430:	f005 feb0 	bl	8008194 <pow>
 8002434:	ec53 2b10 	vmov	r2, r3, d0
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fe f888 	bl	8000550 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4b82      	ldr	r3, [pc, #520]	; (8002654 <TrajectoryGenerator+0x7b4>)
 800244a:	ed93 7b00 	vldr	d7, [r3]
 800244e:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8002640 <TrajectoryGenerator+0x7a0>
 8002452:	eeb0 0a47 	vmov.f32	s0, s14
 8002456:	eef0 0a67 	vmov.f32	s1, s15
 800245a:	f005 fe9b 	bl	8008194 <pow>
 800245e:	ec53 2b10 	vmov	r2, r3, d0
 8002462:	4620      	mov	r0, r4
 8002464:	4629      	mov	r1, r5
 8002466:	f7fd febd 	bl	80001e4 <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	461d      	mov	r5, r3
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <TrajectoryGenerator+0x7b8>)
 8002474:	ed93 7b00 	vldr	d7, [r3]
 8002478:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002638 <TrajectoryGenerator+0x798>
 800247c:	eeb0 0a47 	vmov.f32	s0, s14
 8002480:	eef0 0a67 	vmov.f32	s1, s15
 8002484:	f005 fe86 	bl	8008194 <pow>
 8002488:	ec51 0b10 	vmov	r0, r1, d0
 800248c:	4b71      	ldr	r3, [pc, #452]	; (8002654 <TrajectoryGenerator+0x7b4>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f85d 	bl	8000550 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	f7fe f981 	bl	80007a4 <__aeabi_ddiv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	ec43 2b17 	vmov	d7, r2, r3
 80024aa:	eeb0 0a47 	vmov.f32	s0, s14
 80024ae:	eef0 0a67 	vmov.f32	s1, s15
 80024b2:	f005 fedf 	bl	8008274 <sqrt>
 80024b6:	ec55 4b10 	vmov	r4, r5, d0
 80024ba:	4b66      	ldr	r3, [pc, #408]	; (8002654 <TrajectoryGenerator+0x7b4>)
 80024bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c0:	4b65      	ldr	r3, [pc, #404]	; (8002658 <TrajectoryGenerator+0x7b8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f96d 	bl	80007a4 <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fd fe85 	bl	80001e0 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	4b60      	ldr	r3, [pc, #384]	; (8002664 <TrajectoryGenerator+0x7c4>)
 80024e4:	f7fe f834 	bl	8000550 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fade 	bl	8000ab0 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <TrajectoryGenerator+0x7c8>)
 80024f8:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <TrajectoryGenerator+0x7c8>)
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	4b56      	ldr	r3, [pc, #344]	; (800265c <TrajectoryGenerator+0x7bc>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	4b58      	ldr	r3, [pc, #352]	; (800266c <TrajectoryGenerator+0x7cc>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
 8002510:	e03f      	b.n	8002592 <TrajectoryGenerator+0x6f2>
				}
				else if(theta_dest > Sv){
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <TrajectoryGenerator+0x7b0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd ffc2 	bl	80004a0 <__aeabi_f2d>
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <TrajectoryGenerator+0x7ac>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fe fa87 	bl	8000a34 <__aeabi_dcmplt>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d032      	beq.n	8002592 <TrajectoryGenerator+0x6f2>
					//caseV
					tj = a_max/j_max;
 800252c:	4b49      	ldr	r3, [pc, #292]	; (8002654 <TrajectoryGenerator+0x7b4>)
 800252e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <TrajectoryGenerator+0x7b8>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f934 	bl	80007a4 <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fab4 	bl	8000ab0 <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	4a44      	ldr	r2, [pc, #272]	; (800265c <TrajectoryGenerator+0x7bc>)
 800254c:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <TrajectoryGenerator+0x7d0>)
 8002550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <TrajectoryGenerator+0x7b4>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fe f923 	bl	80007a4 <__aeabi_ddiv>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7fe faa3 	bl	8000ab0 <__aeabi_d2f>
 800256a:	4603      	mov	r3, r0
 800256c:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <TrajectoryGenerator+0x7c8>)
 800256e:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <TrajectoryGenerator+0x7ac>)
 8002572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <TrajectoryGenerator+0x7d0>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe f912 	bl	80007a4 <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fa92 	bl	8000ab0 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	4a37      	ldr	r2, [pc, #220]	; (800266c <TrajectoryGenerator+0x7cc>)
 8002590:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <TrajectoryGenerator+0x7bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a37      	ldr	r2, [pc, #220]	; (8002674 <TrajectoryGenerator+0x7d4>)
 8002598:	6013      	str	r3, [r2, #0]
		t2 = ta;
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <TrajectoryGenerator+0x7c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a36      	ldr	r2, [pc, #216]	; (8002678 <TrajectoryGenerator+0x7d8>)
 80025a0:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <TrajectoryGenerator+0x7c8>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <TrajectoryGenerator+0x7bc>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <TrajectoryGenerator+0x7dc>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <TrajectoryGenerator+0x7cc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a30      	ldr	r2, [pc, #192]	; (8002680 <TrajectoryGenerator+0x7e0>)
 80025be:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <TrajectoryGenerator+0x7cc>)
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <TrajectoryGenerator+0x7bc>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <TrajectoryGenerator+0x7e4>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <TrajectoryGenerator+0x7cc>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <TrajectoryGenerator+0x7c8>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <TrajectoryGenerator+0x7e8>)
 80025e8:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <TrajectoryGenerator+0x7cc>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <TrajectoryGenerator+0x7bc>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <TrajectoryGenerator+0x7c8>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <TrajectoryGenerator+0x7ec>)
 8002608:	edc3 7a00 	vstr	s15, [r3]

		theta = theta_0;
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <TrajectoryGenerator+0x7f0>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	4920      	ldr	r1, [pc, #128]	; (8002694 <TrajectoryGenerator+0x7f4>)
 8002614:	e9c1 2300 	strd	r2, r3, [r1]
		omega = 0;
 8002618:	491f      	ldr	r1, [pc, #124]	; (8002698 <TrajectoryGenerator+0x7f8>)
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = 0;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <TrajectoryGenerator+0x7fc>)
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	}
}
 800262e:	bf00      	nop
 8002630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	40000000 	.word	0x40000000
 8002640:	00000000 	.word	0x00000000
 8002644:	40080000 	.word	0x40080000
 8002648:	200004d4 	.word	0x200004d4
 800264c:	20000488 	.word	0x20000488
 8002650:	200004d8 	.word	0x200004d8
 8002654:	20000070 	.word	0x20000070
 8002658:	20000078 	.word	0x20000078
 800265c:	20000470 	.word	0x20000470
 8002660:	40100000 	.word	0x40100000
 8002664:	3fe00000 	.word	0x3fe00000
 8002668:	20000474 	.word	0x20000474
 800266c:	20000478 	.word	0x20000478
 8002670:	20000068 	.word	0x20000068
 8002674:	20000454 	.word	0x20000454
 8002678:	20000458 	.word	0x20000458
 800267c:	2000045c 	.word	0x2000045c
 8002680:	20000460 	.word	0x20000460
 8002684:	20000464 	.word	0x20000464
 8002688:	20000468 	.word	0x20000468
 800268c:	2000046c 	.word	0x2000046c
 8002690:	20000480 	.word	0x20000480
 8002694:	20000490 	.word	0x20000490
 8002698:	20000498 	.word	0x20000498
 800269c:	200004a0 	.word	0x200004a0

080026a0 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 80026a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026a4:	af00      	add	r7, sp, #0
	if( 0 <= t && t < t1){
 80026a6:	4bae      	ldr	r3, [pc, #696]	; (8002960 <TrajectoryEvaluation+0x2c0>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	f2c0 80d7 	blt.w	8002866 <TrajectoryEvaluation+0x1c6>
 80026b8:	4ba9      	ldr	r3, [pc, #676]	; (8002960 <TrajectoryEvaluation+0x2c0>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	4ba9      	ldr	r3, [pc, #676]	; (8002964 <TrajectoryEvaluation+0x2c4>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	f140 80cb 	bpl.w	8002866 <TrajectoryEvaluation+0x1c6>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0) + j_max*pow(dt,3.0)/6.0;
 80026d0:	4ba5      	ldr	r3, [pc, #660]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fee3 	bl	80004a0 <__aeabi_f2d>
 80026da:	4ba4      	ldr	r3, [pc, #656]	; (800296c <TrajectoryEvaluation+0x2cc>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff36 	bl	8000550 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	4ba0      	ldr	r3, [pc, #640]	; (8002970 <TrajectoryEvaluation+0x2d0>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fd fd77 	bl	80001e4 <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4614      	mov	r4, r2
 80026fc:	461d      	mov	r5, r3
 80026fe:	4b9d      	ldr	r3, [pc, #628]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd fecc 	bl	80004a0 <__aeabi_f2d>
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	4b9a      	ldr	r3, [pc, #616]	; (8002978 <TrajectoryEvaluation+0x2d8>)
 800270e:	f7fd ff1f 	bl	8000550 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4690      	mov	r8, r2
 8002718:	4699      	mov	r9, r3
 800271a:	4b93      	ldr	r3, [pc, #588]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd febe 	bl	80004a0 <__aeabi_f2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8002950 <TrajectoryEvaluation+0x2b0>
 800272c:	ec43 2b10 	vmov	d0, r2, r3
 8002730:	f005 fd30 	bl	8008194 <pow>
 8002734:	ec53 2b10 	vmov	r2, r3, d0
 8002738:	4640      	mov	r0, r8
 800273a:	4649      	mov	r1, r9
 800273c:	f7fd ff08 	bl	8000550 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fd4c 	bl	80001e4 <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fea1 	bl	80004a0 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002958 <TrajectoryEvaluation+0x2b8>
 8002766:	ec43 2b10 	vmov	d0, r2, r3
 800276a:	f005 fd13 	bl	8008194 <pow>
 800276e:	ec51 0b10 	vmov	r0, r1, d0
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <TrajectoryEvaluation+0x2dc>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd feea 	bl	8000550 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <TrajectoryEvaluation+0x2e0>)
 800278a:	f7fe f80b 	bl	80007a4 <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd fd25 	bl	80001e4 <__adddf3>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4974      	ldr	r1, [pc, #464]	; (8002970 <TrajectoryEvaluation+0x2d0>)
 80027a0:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt + 0.5*j_max*pow(dt,2.0);
 80027a4:	4b73      	ldr	r3, [pc, #460]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 80027a6:	ed93 7a00 	vldr	s14, [r3]
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	ee17 0a90 	vmov	r0, s15
 80027b8:	f7fd fe72 	bl	80004a0 <__aeabi_f2d>
 80027bc:	4b6b      	ldr	r3, [pc, #428]	; (800296c <TrajectoryEvaluation+0x2cc>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd fd0f 	bl	80001e4 <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4614      	mov	r4, r2
 80027cc:	461d      	mov	r5, r3
 80027ce:	4b6b      	ldr	r3, [pc, #428]	; (800297c <TrajectoryEvaluation+0x2dc>)
 80027d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	4b67      	ldr	r3, [pc, #412]	; (8002978 <TrajectoryEvaluation+0x2d8>)
 80027da:	f7fd feb9 	bl	8000550 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4690      	mov	r8, r2
 80027e4:	4699      	mov	r9, r3
 80027e6:	4b60      	ldr	r3, [pc, #384]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe58 	bl	80004a0 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002950 <TrajectoryEvaluation+0x2b0>
 80027f8:	ec43 2b10 	vmov	d0, r2, r3
 80027fc:	f005 fcca 	bl	8008194 <pow>
 8002800:	ec53 2b10 	vmov	r2, r3, d0
 8002804:	4640      	mov	r0, r8
 8002806:	4649      	mov	r1, r9
 8002808:	f7fd fea2 	bl	8000550 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4620      	mov	r0, r4
 8002812:	4629      	mov	r1, r5
 8002814:	f7fd fce6 	bl	80001e4 <__adddf3>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4953      	ldr	r1, [pc, #332]	; (800296c <TrajectoryEvaluation+0x2cc>)
 800281e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha + j_max*dt;
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe3a 	bl	80004a0 <__aeabi_f2d>
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
 8002830:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe33 	bl	80004a0 <__aeabi_f2d>
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <TrajectoryEvaluation+0x2dc>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd fe86 	bl	8000550 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fcca 	bl	80001e4 <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f92a 	bl	8000ab0 <__aeabi_d2f>
 800285c:	4603      	mov	r3, r0
 800285e:	4a45      	ldr	r2, [pc, #276]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f000 bc50 	b.w	8003106 <TrajectoryEvaluation+0xa66>
	}
	else if (t1 <= t && t< t2){
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <TrajectoryEvaluation+0x2c4>)
 8002868:	ed93 7a00 	vldr	s14, [r3]
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <TrajectoryEvaluation+0x2c0>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	f200 8085 	bhi.w	8002988 <TrajectoryEvaluation+0x2e8>
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <TrajectoryEvaluation+0x2c0>)
 8002880:	ed93 7a00 	vldr	s14, [r3]
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <TrajectoryEvaluation+0x2e4>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	d579      	bpl.n	8002988 <TrajectoryEvaluation+0x2e8>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0);
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe01 	bl	80004a0 <__aeabi_f2d>
 800289e:	4b33      	ldr	r3, [pc, #204]	; (800296c <TrajectoryEvaluation+0x2cc>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fe54 	bl	8000550 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <TrajectoryEvaluation+0x2d0>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fc95 	bl	80001e4 <__adddf3>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4614      	mov	r4, r2
 80028c0:	461d      	mov	r5, r3
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fdea 	bl	80004a0 <__aeabi_f2d>
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <TrajectoryEvaluation+0x2d8>)
 80028d2:	f7fd fe3d 	bl	8000550 <__aeabi_dmul>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4690      	mov	r8, r2
 80028dc:	4699      	mov	r9, r3
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fddc 	bl	80004a0 <__aeabi_f2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8002950 <TrajectoryEvaluation+0x2b0>
 80028f0:	ec43 2b10 	vmov	d0, r2, r3
 80028f4:	f005 fc4e 	bl	8008194 <pow>
 80028f8:	ec53 2b10 	vmov	r2, r3, d0
 80028fc:	4640      	mov	r0, r8
 80028fe:	4649      	mov	r1, r9
 8002900:	f7fd fe26 	bl	8000550 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fc6a 	bl	80001e4 <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <TrajectoryEvaluation+0x2d0>)
 8002916:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt;
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 800291c:	ed93 7a00 	vldr	s14, [r3]
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <TrajectoryEvaluation+0x2c8>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292a:	ee17 0a90 	vmov	r0, s15
 800292e:	f7fd fdb7 	bl	80004a0 <__aeabi_f2d>
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <TrajectoryEvaluation+0x2cc>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fc54 	bl	80001e4 <__adddf3>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	490a      	ldr	r1, [pc, #40]	; (800296c <TrajectoryEvaluation+0x2cc>)
 8002942:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <TrajectoryEvaluation+0x2d4>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e3da      	b.n	8003106 <TrajectoryEvaluation+0xa66>
 8002950:	00000000 	.word	0x00000000
 8002954:	40000000 	.word	0x40000000
 8002958:	00000000 	.word	0x00000000
 800295c:	40080000 	.word	0x40080000
 8002960:	20000450 	.word	0x20000450
 8002964:	20000454 	.word	0x20000454
 8002968:	2000000c 	.word	0x2000000c
 800296c:	20000498 	.word	0x20000498
 8002970:	20000490 	.word	0x20000490
 8002974:	200004a0 	.word	0x200004a0
 8002978:	3fe00000 	.word	0x3fe00000
 800297c:	20000078 	.word	0x20000078
 8002980:	40180000 	.word	0x40180000
 8002984:	20000458 	.word	0x20000458
	}
	else if (t2 <= t && t < t3){
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <TrajectoryEvaluation+0x530>)
 800298a:	ed93 7a00 	vldr	s14, [r3]
 800298e:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <TrajectoryEvaluation+0x534>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299c:	f200 80d6 	bhi.w	8002b4c <TrajectoryEvaluation+0x4ac>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <TrajectoryEvaluation+0x534>)
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <TrajectoryEvaluation+0x538>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	f140 80ca 	bpl.w	8002b4c <TrajectoryEvaluation+0x4ac>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0) - j_max*pow(dt,3.0)/6.0;
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd6f 	bl	80004a0 <__aeabi_f2d>
 80029c2:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <TrajectoryEvaluation+0x540>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fdc2 	bl	8000550 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <TrajectoryEvaluation+0x544>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fc03 	bl	80001e4 <__adddf3>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	461d      	mov	r5, r3
 80029e6:	4b80      	ldr	r3, [pc, #512]	; (8002be8 <TrajectoryEvaluation+0x548>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fd58 	bl	80004a0 <__aeabi_f2d>
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <TrajectoryEvaluation+0x54c>)
 80029f6:	f7fd fdab 	bl	8000550 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4690      	mov	r8, r2
 8002a00:	4699      	mov	r9, r3
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd4a 	bl	80004a0 <__aeabi_f2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002bc0 <TrajectoryEvaluation+0x520>
 8002a14:	ec43 2b10 	vmov	d0, r2, r3
 8002a18:	f005 fbbc 	bl	8008194 <pow>
 8002a1c:	ec53 2b10 	vmov	r2, r3, d0
 8002a20:	4640      	mov	r0, r8
 8002a22:	4649      	mov	r1, r9
 8002a24:	f7fd fd94 	bl	8000550 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fbd8 	bl	80001e4 <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd2d 	bl	80004a0 <__aeabi_f2d>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002bc8 <TrajectoryEvaluation+0x528>
 8002a4e:	ec43 2b10 	vmov	d0, r2, r3
 8002a52:	f005 fb9f 	bl	8008194 <pow>
 8002a56:	ec51 0b10 	vmov	r0, r1, d0
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <TrajectoryEvaluation+0x550>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fd76 	bl	8000550 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <TrajectoryEvaluation+0x554>)
 8002a72:	f7fd fe97 	bl	80007a4 <__aeabi_ddiv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fbaf 	bl	80001e0 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4957      	ldr	r1, [pc, #348]	; (8002be4 <TrajectoryEvaluation+0x544>)
 8002a88:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt - 0.5*j_max*pow(dt,2.0);
 8002a8c:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <TrajectoryEvaluation+0x548>)
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9c:	ee17 0a90 	vmov	r0, s15
 8002aa0:	f7fd fcfe 	bl	80004a0 <__aeabi_f2d>
 8002aa4:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <TrajectoryEvaluation+0x540>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fb9b 	bl	80001e4 <__adddf3>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4614      	mov	r4, r2
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <TrajectoryEvaluation+0x550>)
 8002ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <TrajectoryEvaluation+0x54c>)
 8002ac2:	f7fd fd45 	bl	8000550 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4690      	mov	r8, r2
 8002acc:	4699      	mov	r9, r3
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fce4 	bl	80004a0 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8002bc0 <TrajectoryEvaluation+0x520>
 8002ae0:	ec43 2b10 	vmov	d0, r2, r3
 8002ae4:	f005 fb56 	bl	8008194 <pow>
 8002ae8:	ec53 2b10 	vmov	r2, r3, d0
 8002aec:	4640      	mov	r0, r8
 8002aee:	4649      	mov	r1, r9
 8002af0:	f7fd fd2e 	bl	8000550 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fb70 	bl	80001e0 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4936      	ldr	r1, [pc, #216]	; (8002be0 <TrajectoryEvaluation+0x540>)
 8002b06:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha - j_max*dt;
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <TrajectoryEvaluation+0x548>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fcc6 	bl	80004a0 <__aeabi_f2d>
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fcbf 	bl	80004a0 <__aeabi_f2d>
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <TrajectoryEvaluation+0x550>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fd12 	bl	8000550 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4620      	mov	r0, r4
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7fd fb54 	bl	80001e0 <__aeabi_dsub>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fd ffb6 	bl	8000ab0 <__aeabi_d2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <TrajectoryEvaluation+0x548>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e2dc      	b.n	8003106 <TrajectoryEvaluation+0xa66>
	}
	else if (t3 <= t && t < t4 ){
 8002b4c:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <TrajectoryEvaluation+0x538>)
 8002b4e:	ed93 7a00 	vldr	s14, [r3]
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <TrajectoryEvaluation+0x534>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	d84c      	bhi.n	8002bfc <TrajectoryEvaluation+0x55c>
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <TrajectoryEvaluation+0x534>)
 8002b64:	ed93 7a00 	vldr	s14, [r3]
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <TrajectoryEvaluation+0x558>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	d541      	bpl.n	8002bfc <TrajectoryEvaluation+0x55c>
		theta = theta + omega*dt;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <TrajectoryEvaluation+0x53c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fc8f 	bl	80004a0 <__aeabi_f2d>
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <TrajectoryEvaluation+0x540>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fce2 	bl	8000550 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <TrajectoryEvaluation+0x544>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fb23 	bl	80001e4 <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4910      	ldr	r1, [pc, #64]	; (8002be4 <TrajectoryEvaluation+0x544>)
 8002ba4:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega;
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <TrajectoryEvaluation+0x540>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	490c      	ldr	r1, [pc, #48]	; (8002be0 <TrajectoryEvaluation+0x540>)
 8002bb0:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = 0;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <TrajectoryEvaluation+0x548>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e2a3      	b.n	8003106 <TrajectoryEvaluation+0xa66>
 8002bbe:	bf00      	nop
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	40000000 	.word	0x40000000
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	40080000 	.word	0x40080000
 8002bd0:	20000458 	.word	0x20000458
 8002bd4:	20000450 	.word	0x20000450
 8002bd8:	2000045c 	.word	0x2000045c
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	20000498 	.word	0x20000498
 8002be4:	20000490 	.word	0x20000490
 8002be8:	200004a0 	.word	0x200004a0
 8002bec:	3fe00000 	.word	0x3fe00000
 8002bf0:	20000078 	.word	0x20000078
 8002bf4:	40180000 	.word	0x40180000
 8002bf8:	20000460 	.word	0x20000460
	}
	else if (t4 <= t && t < t5 ){
 8002bfc:	4bb0      	ldr	r3, [pc, #704]	; (8002ec0 <TrajectoryEvaluation+0x820>)
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	4bb0      	ldr	r3, [pc, #704]	; (8002ec4 <TrajectoryEvaluation+0x824>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	f200 80d6 	bhi.w	8002dc0 <TrajectoryEvaluation+0x720>
 8002c14:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <TrajectoryEvaluation+0x824>)
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <TrajectoryEvaluation+0x828>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	f140 80ca 	bpl.w	8002dc0 <TrajectoryEvaluation+0x720>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0) - j_max*pow(dt,3.0)/6.0;
 8002c2c:	4ba7      	ldr	r3, [pc, #668]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fc35 	bl	80004a0 <__aeabi_f2d>
 8002c36:	4ba6      	ldr	r3, [pc, #664]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fc88 	bl	8000550 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	4ba2      	ldr	r3, [pc, #648]	; (8002ed4 <TrajectoryEvaluation+0x834>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fac9 	bl	80001e4 <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	461d      	mov	r5, r3
 8002c5a:	4b9f      	ldr	r3, [pc, #636]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc1e 	bl	80004a0 <__aeabi_f2d>
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	4b9c      	ldr	r3, [pc, #624]	; (8002edc <TrajectoryEvaluation+0x83c>)
 8002c6a:	f7fd fc71 	bl	8000550 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4690      	mov	r8, r2
 8002c74:	4699      	mov	r9, r3
 8002c76:	4b95      	ldr	r3, [pc, #596]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc10 	bl	80004a0 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8002eb0 <TrajectoryEvaluation+0x810>
 8002c88:	ec43 2b10 	vmov	d0, r2, r3
 8002c8c:	f005 fa82 	bl	8008194 <pow>
 8002c90:	ec53 2b10 	vmov	r2, r3, d0
 8002c94:	4640      	mov	r0, r8
 8002c96:	4649      	mov	r1, r9
 8002c98:	f7fd fc5a 	bl	8000550 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fa9e 	bl	80001e4 <__adddf3>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4b86      	ldr	r3, [pc, #536]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fbf3 	bl	80004a0 <__aeabi_f2d>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002eb8 <TrajectoryEvaluation+0x818>
 8002cc2:	ec43 2b10 	vmov	d0, r2, r3
 8002cc6:	f005 fa65 	bl	8008194 <pow>
 8002cca:	ec51 0b10 	vmov	r0, r1, d0
 8002cce:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <TrajectoryEvaluation+0x840>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fc3c 	bl	8000550 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <TrajectoryEvaluation+0x844>)
 8002ce6:	f7fd fd5d 	bl	80007a4 <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fa75 	bl	80001e0 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4976      	ldr	r1, [pc, #472]	; (8002ed4 <TrajectoryEvaluation+0x834>)
 8002cfc:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt - 0.5*j_max*pow(dt,2.0);
 8002d00:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d10:	ee17 0a90 	vmov	r0, s15
 8002d14:	f7fd fbc4 	bl	80004a0 <__aeabi_f2d>
 8002d18:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fa61 	bl	80001e4 <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <TrajectoryEvaluation+0x840>)
 8002d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	4b69      	ldr	r3, [pc, #420]	; (8002edc <TrajectoryEvaluation+0x83c>)
 8002d36:	f7fd fc0b 	bl	8000550 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbaa 	bl	80004a0 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002eb0 <TrajectoryEvaluation+0x810>
 8002d54:	ec43 2b10 	vmov	d0, r2, r3
 8002d58:	f005 fa1c 	bl	8008194 <pow>
 8002d5c:	ec53 2b10 	vmov	r2, r3, d0
 8002d60:	4640      	mov	r0, r8
 8002d62:	4649      	mov	r1, r9
 8002d64:	f7fd fbf4 	bl	8000550 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fa36 	bl	80001e0 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4955      	ldr	r1, [pc, #340]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha - j_max*dt;
 8002d7e:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fb8c 	bl	80004a0 <__aeabi_f2d>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	460d      	mov	r5, r1
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb85 	bl	80004a0 <__aeabi_f2d>
 8002d96:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <TrajectoryEvaluation+0x840>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fbd8 	bl	8000550 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fa1a 	bl	80001e0 <__aeabi_dsub>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fd fe7c 	bl	8000ab0 <__aeabi_d2f>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e1a2      	b.n	8003106 <TrajectoryEvaluation+0xa66>

	}
	else if (t5 <= t && t < t6 ){
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <TrajectoryEvaluation+0x828>)
 8002dc2:	ed93 7a00 	vldr	s14, [r3]
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <TrajectoryEvaluation+0x824>)
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	f200 808a 	bhi.w	8002eec <TrajectoryEvaluation+0x84c>
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <TrajectoryEvaluation+0x824>)
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <TrajectoryEvaluation+0x848>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d57e      	bpl.n	8002eec <TrajectoryEvaluation+0x84c>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0);
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb54 	bl	80004a0 <__aeabi_f2d>
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fba7 	bl	8000550 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <TrajectoryEvaluation+0x834>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	f7fd f9e8 	bl	80001e4 <__adddf3>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fb3d 	bl	80004a0 <__aeabi_f2d>
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <TrajectoryEvaluation+0x83c>)
 8002e2c:	f7fd fb90 	bl	8000550 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4690      	mov	r8, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fb2f 	bl	80004a0 <__aeabi_f2d>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002eb0 <TrajectoryEvaluation+0x810>
 8002e4a:	ec43 2b10 	vmov	d0, r2, r3
 8002e4e:	f005 f9a1 	bl	8008194 <pow>
 8002e52:	ec53 2b10 	vmov	r2, r3, d0
 8002e56:	4640      	mov	r0, r8
 8002e58:	4649      	mov	r1, r9
 8002e5a:	f7fd fb79 	bl	8000550 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd f9bd 	bl	80001e4 <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4919      	ldr	r1, [pc, #100]	; (8002ed4 <TrajectoryEvaluation+0x834>)
 8002e70:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <TrajectoryEvaluation+0x82c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	ee17 0a90 	vmov	r0, s15
 8002e88:	f7fd fb0a 	bl	80004a0 <__aeabi_f2d>
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd f9a7 	bl	80001e4 <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <TrajectoryEvaluation+0x830>)
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <TrajectoryEvaluation+0x838>)
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e12d      	b.n	8003106 <TrajectoryEvaluation+0xa66>
 8002eaa:	bf00      	nop
 8002eac:	f3af 8000 	nop.w
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40000000 	.word	0x40000000
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40080000 	.word	0x40080000
 8002ec0:	20000460 	.word	0x20000460
 8002ec4:	20000450 	.word	0x20000450
 8002ec8:	20000464 	.word	0x20000464
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	20000498 	.word	0x20000498
 8002ed4:	20000490 	.word	0x20000490
 8002ed8:	200004a0 	.word	0x200004a0
 8002edc:	3fe00000 	.word	0x3fe00000
 8002ee0:	20000078 	.word	0x20000078
 8002ee4:	40180000 	.word	0x40180000
 8002ee8:	20000468 	.word	0x20000468
	}
	else if (t6 <= t && t < t7 ){
 8002eec:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <TrajectoryEvaluation+0xa80>)
 8002eee:	ed93 7a00 	vldr	s14, [r3]
 8002ef2:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <TrajectoryEvaluation+0xa84>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	f200 80d6 	bhi.w	80030b0 <TrajectoryEvaluation+0xa10>
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <TrajectoryEvaluation+0xa84>)
 8002f06:	ed93 7a00 	vldr	s14, [r3]
 8002f0a:	4b87      	ldr	r3, [pc, #540]	; (8003128 <TrajectoryEvaluation+0xa88>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	f140 80ca 	bpl.w	80030b0 <TrajectoryEvaluation+0xa10>
		theta = theta + omega*dt + 0.5*alpha*pow(dt,2.0) + j_max*pow(dt,3.0)/6.0;
 8002f1c:	4b83      	ldr	r3, [pc, #524]	; (800312c <TrajectoryEvaluation+0xa8c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fabd 	bl	80004a0 <__aeabi_f2d>
 8002f26:	4b82      	ldr	r3, [pc, #520]	; (8003130 <TrajectoryEvaluation+0xa90>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fb10 	bl	8000550 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <TrajectoryEvaluation+0xa94>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd f951 	bl	80001e4 <__adddf3>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4614      	mov	r4, r2
 8002f48:	461d      	mov	r5, r3
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <TrajectoryEvaluation+0xa98>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd faa6 	bl	80004a0 <__aeabi_f2d>
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <TrajectoryEvaluation+0xa9c>)
 8002f5a:	f7fd faf9 	bl	8000550 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4b71      	ldr	r3, [pc, #452]	; (800312c <TrajectoryEvaluation+0xa8c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fa98 	bl	80004a0 <__aeabi_f2d>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8003110 <TrajectoryEvaluation+0xa70>
 8002f78:	ec43 2b10 	vmov	d0, r2, r3
 8002f7c:	f005 f90a 	bl	8008194 <pow>
 8002f80:	ec53 2b10 	vmov	r2, r3, d0
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd fae2 	bl	8000550 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f926 	bl	80001e4 <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4b62      	ldr	r3, [pc, #392]	; (800312c <TrajectoryEvaluation+0xa8c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa7b 	bl	80004a0 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8003118 <TrajectoryEvaluation+0xa78>
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f005 f8ed 	bl	8008194 <pow>
 8002fba:	ec51 0b10 	vmov	r0, r1, d0
 8002fbe:	4b60      	ldr	r3, [pc, #384]	; (8003140 <TrajectoryEvaluation+0xaa0>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd fac4 	bl	8000550 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <TrajectoryEvaluation+0xaa4>)
 8002fd6:	f7fd fbe5 	bl	80007a4 <__aeabi_ddiv>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd f8ff 	bl	80001e4 <__adddf3>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4952      	ldr	r1, [pc, #328]	; (8003134 <TrajectoryEvaluation+0xa94>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega + alpha*dt + 0.5*j_max*pow(dt,2.0);
 8002ff0:	4b51      	ldr	r3, [pc, #324]	; (8003138 <TrajectoryEvaluation+0xa98>)
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <TrajectoryEvaluation+0xa8c>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003000:	ee17 0a90 	vmov	r0, s15
 8003004:	f7fd fa4c 	bl	80004a0 <__aeabi_f2d>
 8003008:	4b49      	ldr	r3, [pc, #292]	; (8003130 <TrajectoryEvaluation+0xa90>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	f7fd f8e9 	bl	80001e4 <__adddf3>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4614      	mov	r4, r2
 8003018:	461d      	mov	r5, r3
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <TrajectoryEvaluation+0xaa0>)
 800301c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <TrajectoryEvaluation+0xa9c>)
 8003026:	f7fd fa93 	bl	8000550 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4690      	mov	r8, r2
 8003030:	4699      	mov	r9, r3
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <TrajectoryEvaluation+0xa8c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa32 	bl	80004a0 <__aeabi_f2d>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8003110 <TrajectoryEvaluation+0xa70>
 8003044:	ec43 2b10 	vmov	d0, r2, r3
 8003048:	f005 f8a4 	bl	8008194 <pow>
 800304c:	ec53 2b10 	vmov	r2, r3, d0
 8003050:	4640      	mov	r0, r8
 8003052:	4649      	mov	r1, r9
 8003054:	f7fd fa7c 	bl	8000550 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f7fd f8c0 	bl	80001e4 <__adddf3>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4931      	ldr	r1, [pc, #196]	; (8003130 <TrajectoryEvaluation+0xa90>)
 800306a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha + j_max*dt;
 800306e:	4b32      	ldr	r3, [pc, #200]	; (8003138 <TrajectoryEvaluation+0xa98>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa14 	bl	80004a0 <__aeabi_f2d>
 8003078:	4604      	mov	r4, r0
 800307a:	460d      	mov	r5, r1
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <TrajectoryEvaluation+0xa8c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa0d 	bl	80004a0 <__aeabi_f2d>
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <TrajectoryEvaluation+0xaa0>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f7fd fa60 	bl	8000550 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4620      	mov	r0, r4
 8003096:	4629      	mov	r1, r5
 8003098:	f7fd f8a4 	bl	80001e4 <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd04 	bl	8000ab0 <__aeabi_d2f>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <TrajectoryEvaluation+0xa98>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e02a      	b.n	8003106 <TrajectoryEvaluation+0xa66>
	}
	else if (t7+2 <= t ){
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <TrajectoryEvaluation+0xa88>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <TrajectoryEvaluation+0xa84>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d900      	bls.n	80030d0 <TrajectoryEvaluation+0xa30>
		alpha = alpha;
		t = 0;
		Go_Flag = 0;
		ArmState = FinishPID;
	}
}
 80030ce:	e01a      	b.n	8003106 <TrajectoryEvaluation+0xa66>
		theta = theta_f;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <TrajectoryEvaluation+0xaa8>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	4917      	ldr	r1, [pc, #92]	; (8003134 <TrajectoryEvaluation+0xa94>)
 80030d8:	e9c1 2300 	strd	r2, r3, [r1]
		omega = omega;
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <TrajectoryEvaluation+0xa90>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	4913      	ldr	r1, [pc, #76]	; (8003130 <TrajectoryEvaluation+0xa90>)
 80030e4:	e9c1 2300 	strd	r2, r3, [r1]
		alpha = alpha;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <TrajectoryEvaluation+0xa98>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <TrajectoryEvaluation+0xa98>)
 80030ee:	6013      	str	r3, [r2, #0]
		t = 0;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <TrajectoryEvaluation+0xa84>)
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
		Go_Flag = 0;
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <TrajectoryEvaluation+0xaac>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
		ArmState = FinishPID;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <TrajectoryEvaluation+0xab0>)
 8003100:	2206      	movs	r2, #6
 8003102:	701a      	strb	r2, [r3, #0]
}
 8003104:	e7ff      	b.n	8003106 <TrajectoryEvaluation+0xa66>
 8003106:	bf00      	nop
 8003108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800310c:	f3af 8000 	nop.w
 8003110:	00000000 	.word	0x00000000
 8003114:	40000000 	.word	0x40000000
 8003118:	00000000 	.word	0x00000000
 800311c:	40080000 	.word	0x40080000
 8003120:	20000468 	.word	0x20000468
 8003124:	20000450 	.word	0x20000450
 8003128:	2000046c 	.word	0x2000046c
 800312c:	2000000c 	.word	0x2000000c
 8003130:	20000498 	.word	0x20000498
 8003134:	20000490 	.word	0x20000490
 8003138:	200004a0 	.word	0x200004a0
 800313c:	3fe00000 	.word	0x3fe00000
 8003140:	20000078 	.word	0x20000078
 8003144:	40180000 	.word	0x40180000
 8003148:	20000080 	.word	0x20000080
 800314c:	200002a1 	.word	0x200002a1
 8003150:	200004c4 	.word	0x200004c4

08003154 <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	ed87 0a01 	vstr	s0, [r7, #4]
 800315e:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003162:	ed97 7a01 	vldr	s14, [r7, #4]
 8003166:	edd7 7a00 	vldr	s15, [r7]
 800316a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <PositionController+0x9c>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <PositionController+0xa0>)
 8003176:	ed93 7a00 	vldr	s14, [r3]
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <PositionController+0x9c>)
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <PositionController+0xa0>)
 8003186:	edc3 7a00 	vstr	s15, [r3]
	u1 = kp_1*e1 + ki_1*s1 + kd_1*(e1-p1);
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <PositionController+0xa4>)
 800318c:	ed93 7a00 	vldr	s14, [r3]
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <PositionController+0x9c>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <PositionController+0xa8>)
 800319c:	edd3 6a00 	vldr	s13, [r3]
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <PositionController+0xa0>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <PositionController+0x9c>)
 80031b0:	edd3 6a00 	vldr	s13, [r3]
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <PositionController+0xac>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <PositionController+0xb0>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <PositionController+0xb4>)
 80031ce:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <PositionController+0x9c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <PositionController+0xac>)
 80031d8:	6013      	str	r3, [r2, #0]
	return u1;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <PositionController+0xb4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	ee07 3a90 	vmov	s15, r3
}
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	200004a4 	.word	0x200004a4
 80031f4:	200004a8 	.word	0x200004a8
 80031f8:	20000088 	.word	0x20000088
 80031fc:	2000008c 	.word	0x2000008c
 8003200:	200004ac 	.word	0x200004ac
 8003204:	200004c0 	.word	0x200004c0
 8003208:	200004b0 	.word	0x200004b0

0800320c <VelocityController>:

float VelocityController(float r,float y,float uP)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	ed87 0a03 	vstr	s0, [r7, #12]
 8003216:	edc7 0a02 	vstr	s1, [r7, #8]
 800321a:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 800321e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003222:	edd7 7a03 	vldr	s15, [r7, #12]
 8003226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <VelocityController+0xb8>)
 800322c:	edc3 7a00 	vstr	s15, [r3]
	if(e2 >= w_max){
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <VelocityController+0xb8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f933 	bl	80004a0 <__aeabi_f2d>
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <VelocityController+0xbc>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f7fd fc0c 	bl	8000a5c <__aeabi_dcmpge>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <VelocityController+0x52>
		e2 = w_max;
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <VelocityController+0xbc>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f7fd fc2c 	bl	8000ab0 <__aeabi_d2f>
 8003258:	4603      	mov	r3, r0
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <VelocityController+0xb8>)
 800325c:	6013      	str	r3, [r2, #0]
	}
	e2 = e2 - y;
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <VelocityController+0xb8>)
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	edd7 7a02 	vldr	s15, [r7, #8]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <VelocityController+0xb8>)
 800326e:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <VelocityController+0xc0>)
 8003274:	ed93 7a00 	vldr	s14, [r3]
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <VelocityController+0xb8>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <VelocityController+0xc0>)
 8003284:	edc3 7a00 	vstr	s15, [r3]
	u2 = kp_2*e2 + ki_2*s2;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <VelocityController+0xc4>)
 800328a:	ed93 7a00 	vldr	s14, [r3]
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <VelocityController+0xb8>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <VelocityController+0xc8>)
 800329a:	edd3 6a00 	vldr	s13, [r3]
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <VelocityController+0xc0>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <VelocityController+0xcc>)
 80032ae:	edc3 7a00 	vstr	s15, [r3]
	return u2;
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <VelocityController+0xcc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	ee07 3a90 	vmov	s15, r3
}
 80032ba:	eeb0 0a67 	vmov.f32	s0, s15
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200004b4 	.word	0x200004b4
 80032c8:	20000068 	.word	0x20000068
 80032cc:	200004b8 	.word	0x200004b8
 80032d0:	20000090 	.word	0x20000090
 80032d4:	20000094 	.word	0x20000094
 80032d8:	200004bc 	.word	0x200004bc

080032dc <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80032e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80032ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80032ee:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	float add = 2;
 80032f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032f6:	617b      	str	r3, [r7, #20]
	u = PositionController(Pd, P);
 80032f8:	edd7 0a02 	vldr	s1, [r7, #8]
 80032fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8003300:	f7ff ff28 	bl	8003154 <PositionController>
 8003304:	eef0 7a40 	vmov.f32	s15, s0
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <Cascade+0xd0>)
 800330a:	edc3 7a00 	vstr	s15, [r3]
	u = VelocityController(Vd, V, u);
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <Cascade+0xd0>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb0 1a67 	vmov.f32	s2, s15
 8003318:	edd7 0a00 	vldr	s1, [r7]
 800331c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003320:	f7ff ff74 	bl	800320c <VelocityController>
 8003324:	eef0 7a40 	vmov.f32	s15, s0
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <Cascade+0xd0>)
 800332a:	edc3 7a00 	vstr	s15, [r3]
	PID_dir = 1;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <Cascade+0xd4>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
	if(u > 24){
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <Cascade+0xd0>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	dd03      	ble.n	8003350 <Cascade+0x74>
		u = 24;
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <Cascade+0xd0>)
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <Cascade+0xd8>)
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e012      	b.n	8003376 <Cascade+0x9a>
	}
	else if (u < 0){
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <Cascade+0xd0>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d50a      	bpl.n	8003376 <Cascade+0x9a>
		u = -(u);
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <Cascade+0xd0>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	eef1 7a67 	vneg.f32	s15, s15
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <Cascade+0xd0>)
 800336c:	edc3 7a00 	vstr	s15, [r3]
		PID_dir = 0;
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <Cascade+0xd4>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
	}

	if(t >= t5)
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <Cascade+0xdc>)
 8003378:	ed93 7a00 	vldr	s14, [r3]
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <Cascade+0xe0>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	db02      	blt.n	8003392 <Cascade+0xb6>
	{
		add = 0;
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
	}

	return u+add;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <Cascade+0xd0>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	edd7 7a05 	vldr	s15, [r7, #20]
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200004dc 	.word	0x200004dc
 80033b0:	20000099 	.word	0x20000099
 80033b4:	41c00000 	.word	0x41c00000
 80033b8:	20000450 	.word	0x20000450
 80033bc:	20000464 	.word	0x20000464

080033c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c4:	b672      	cpsid	i
}
 80033c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033c8:	e7fe      	b.n	80033c8 <Error_Handler+0x8>
	...

080033cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_MspInit+0x4c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <HAL_MspInit+0x4c>)
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e0:	6453      	str	r3, [r2, #68]	; 0x44
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_MspInit+0x4c>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_MspInit+0x4c>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_MspInit+0x4c>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	; 0x40
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_MspInit+0x4c>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800340a:	2007      	movs	r0, #7
 800340c:	f000 fb5e 	bl	8003acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_I2C_MspInit+0xa4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d13c      	bne.n	80034b8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800345a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003460:	2312      	movs	r3, #18
 8003462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003468:	2303      	movs	r3, #3
 800346a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800346c:	2304      	movs	r3, #4
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4619      	mov	r1, r3
 8003476:	4814      	ldr	r0, [pc, #80]	; (80034c8 <HAL_I2C_MspInit+0xac>)
 8003478:	f000 fb9a 	bl	8003bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 8003486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800348a:	6413      	str	r3, [r2, #64]	; 0x40
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <HAL_I2C_MspInit+0xa8>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	201f      	movs	r0, #31
 800349e:	f000 fb20 	bl	8003ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034a2:	201f      	movs	r0, #31
 80034a4:	f000 fb39 	bl	8003b1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	2020      	movs	r0, #32
 80034ae:	f000 fb18 	bl	8003ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80034b2:	2020      	movs	r0, #32
 80034b4:	f000 fb31 	bl	8003b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40005400 	.word	0x40005400
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020400 	.word	0x40020400

080034cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIM_Base_MspInit+0x70>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034fa:	e01a      	b.n	8003532 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_TIM_Base_MspInit+0x78>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d115      	bne.n	8003532 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_TIM_Base_MspInit+0x74>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	201e      	movs	r0, #30
 8003528:	f000 fadb 	bl	8003ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800352c:	201e      	movs	r0, #30
 800352e:	f000 faf4 	bl	8003b1a <HAL_NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40023800 	.word	0x40023800
 8003544:	40000800 	.word	0x40000800

08003548 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_TIM_Encoder_MspInit+0x84>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d12b      	bne.n	80035c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 80035a2:	23c0      	movs	r3, #192	; 0xc0
 80035a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035b2:	2302      	movs	r3, #2
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4805      	ldr	r0, [pc, #20]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80035be:	f000 faf7 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020000 	.word	0x40020000

080035d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a12      	ldr	r2, [pc, #72]	; (8003640 <HAL_TIM_MspPostInit+0x68>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d11e      	bne.n	8003638 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_TIM_MspPostInit+0x6c>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <HAL_TIM_MspPostInit+0x6c>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_TIM_MspPostInit+0x6c>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8003616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800361a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	4619      	mov	r1, r3
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <HAL_TIM_MspPostInit+0x70>)
 8003634:	f000 fabc 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003638:	bf00      	nop
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40010000 	.word	0x40010000
 8003644:	40023800 	.word	0x40023800
 8003648:	40020000 	.word	0x40020000

0800364c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_UART_MspInit+0x84>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12b      	bne.n	80036c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <HAL_UART_MspInit+0x88>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_UART_MspInit+0x88>)
 8003678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_UART_MspInit+0x88>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_UART_MspInit+0x88>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <HAL_UART_MspInit+0x88>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_UART_MspInit+0x88>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036a6:	230c      	movs	r3, #12
 80036a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036b6:	2307      	movs	r3, #7
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <HAL_UART_MspInit+0x8c>)
 80036c2:	f000 fa75 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>

080036e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <HardFault_Handler+0x4>

080036e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ec:	e7fe      	b.n	80036ec <MemManage_Handler+0x4>

080036ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f2:	e7fe      	b.n	80036f2 <BusFault_Handler+0x4>

080036f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <UsageFault_Handler+0x4>

080036fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003728:	f000 f8bc 	bl	80038a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003734:	2010      	movs	r0, #16
 8003736:	f000 fbf1 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}

0800373e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_X_Pin);
 8003742:	2080      	movs	r0, #128	; 0x80
 8003744:	f000 fbea 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}

0800374c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003750:	4802      	ldr	r0, [pc, #8]	; (800375c <TIM4_IRQHandler+0x10>)
 8003752:	f003 f9fd 	bl	8006b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000210 	.word	0x20000210

08003760 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003764:	4802      	ldr	r0, [pc, #8]	; (8003770 <I2C1_EV_IRQHandler+0x10>)
 8003766:	f000 fd35 	bl	80041d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2000012c 	.word	0x2000012c

08003774 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <I2C1_ER_IRQHandler+0x10>)
 800377a:	f000 fe9c 	bl	80044b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000012c 	.word	0x2000012c

08003788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <SystemInit+0x20>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <SystemInit+0x20>)
 8003794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037b0:	480d      	ldr	r0, [pc, #52]	; (80037e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037b2:	490e      	ldr	r1, [pc, #56]	; (80037ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037c8:	4c0b      	ldr	r4, [pc, #44]	; (80037f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037d6:	f7ff ffd7 	bl	8003788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f004 fcaf 	bl	800813c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fd fb39 	bl	8000e54 <main>
  bx  lr    
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ec:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80037f0:	08009098 	.word	0x08009098
  ldr r2, =_sbss
 80037f4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80037f8:	200004e4 	.word	0x200004e4

080037fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC_IRQHandler>
	...

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_Init+0x40>)
 800380a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <HAL_Init+0x40>)
 8003816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_Init+0x40>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_Init+0x40>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003828:	2003      	movs	r0, #3
 800382a:	f000 f94f 	bl	8003acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382e:	2000      	movs	r0, #0
 8003830:	f000 f808 	bl	8003844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003834:	f7ff fdca 	bl	80033cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00

08003844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_InitTick+0x54>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_InitTick+0x58>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385a:	fbb3 f3f1 	udiv	r3, r3, r1
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f967 	bl	8003b36 <HAL_SYSTICK_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00e      	b.n	8003890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d80a      	bhi.n	800388e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003878:	2200      	movs	r2, #0
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f000 f92f 	bl	8003ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003884:	4a06      	ldr	r2, [pc, #24]	; (80038a0 <HAL_InitTick+0x5c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	2000009c 	.word	0x2000009c
 800389c:	200000a4 	.word	0x200000a4
 80038a0:	200000a0 	.word	0x200000a0

080038a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_IncTick+0x20>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_IncTick+0x24>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_IncTick+0x24>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	200000a4 	.word	0x200000a4
 80038c8:	200004e0 	.word	0x200004e0

080038cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return uwTick;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_GetTick+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	200004e0 	.word	0x200004e0

080038e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ec:	f7ff ffee 	bl	80038cc <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d005      	beq.n	800390a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_Delay+0x44>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800390a:	bf00      	nop
 800390c:	f7ff ffde 	bl	80038cc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d8f7      	bhi.n	800390c <HAL_Delay+0x28>
  {
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200000a4 	.word	0x200000a4

0800392c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <__NVIC_SetPriorityGrouping+0x44>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003948:	4013      	ands	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <__NVIC_SetPriorityGrouping+0x44>)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	60d3      	str	r3, [r2, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <__NVIC_GetPriorityGrouping+0x18>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	f003 0307 	and.w	r3, r3, #7
}
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	db0b      	blt.n	80039ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	4907      	ldr	r1, [pc, #28]	; (80039c8 <__NVIC_EnableIRQ+0x38>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2001      	movs	r0, #1
 80039b2:	fa00 f202 	lsl.w	r2, r0, r2
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000e100 	.word	0xe000e100

080039cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	db0a      	blt.n	80039f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	490c      	ldr	r1, [pc, #48]	; (8003a18 <__NVIC_SetPriority+0x4c>)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	440b      	add	r3, r1
 80039f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f4:	e00a      	b.n	8003a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	4908      	ldr	r1, [pc, #32]	; (8003a1c <__NVIC_SetPriority+0x50>)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	3b04      	subs	r3, #4
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	440b      	add	r3, r1
 8003a0a:	761a      	strb	r2, [r3, #24]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000e100 	.word	0xe000e100
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f1c3 0307 	rsb	r3, r3, #7
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	bf28      	it	cs
 8003a3e:	2304      	movcs	r3, #4
 8003a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d902      	bls.n	8003a50 <NVIC_EncodePriority+0x30>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3b03      	subs	r3, #3
 8003a4e:	e000      	b.n	8003a52 <NVIC_EncodePriority+0x32>
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	401a      	ands	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a68:	f04f 31ff 	mov.w	r1, #4294967295
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	43d9      	mvns	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	4313      	orrs	r3, r2
         );
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a98:	d301      	bcc.n	8003a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00f      	b.n	8003abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <SysTick_Config+0x40>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa6:	210f      	movs	r1, #15
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	f7ff ff8e 	bl	80039cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <SysTick_Config+0x40>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <SysTick_Config+0x40>)
 8003ab8:	2207      	movs	r2, #7
 8003aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000e010 	.word	0xe000e010

08003acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff29 	bl	800392c <__NVIC_SetPriorityGrouping>
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af4:	f7ff ff3e 	bl	8003974 <__NVIC_GetPriorityGrouping>
 8003af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f7ff ff8e 	bl	8003a20 <NVIC_EncodePriority>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff5d 	bl	80039cc <__NVIC_SetPriority>
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff31 	bl	8003990 <__NVIC_EnableIRQ>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ffa2 	bl	8003a88 <SysTick_Config>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d004      	beq.n	8003b6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e00c      	b.n	8003b86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2205      	movs	r2, #5
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba0:	b2db      	uxtb	r3, r3
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e159      	b.n	8003e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	f040 8148 	bne.w	8003e7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d005      	beq.n	8003c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d130      	bne.n	8003c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0201 	and.w	r2, r3, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d017      	beq.n	8003ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d123      	bne.n	8003cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	08da      	lsrs	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3208      	adds	r2, #8
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a2 	beq.w	8003e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d52:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	220f      	movs	r2, #15
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a49      	ldr	r2, [pc, #292]	; (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d019      	beq.n	8003db2 <HAL_GPIO_Init+0x202>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a48      	ldr	r2, [pc, #288]	; (8003ea4 <HAL_GPIO_Init+0x2f4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_GPIO_Init+0x1fe>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a47      	ldr	r2, [pc, #284]	; (8003ea8 <HAL_GPIO_Init+0x2f8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00d      	beq.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a46      	ldr	r2, [pc, #280]	; (8003eac <HAL_GPIO_Init+0x2fc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <HAL_GPIO_Init+0x1f6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a45      	ldr	r2, [pc, #276]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_GPIO_Init+0x1f2>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e008      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003db2:	2300      	movs	r3, #0
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f002 0203 	and.w	r2, r2, #3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc4:	4935      	ldr	r1, [pc, #212]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dfc:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e26:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e50:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e74:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	f67f aea2 	bls.w	8003bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	40020800 	.word	0x40020800
 8003eac:	40020c00 	.word	0x40020c00
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40013c00 	.word	0x40013c00

08003eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e001      	b.n	8003eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f04:	e003      	b.n	8003f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	619a      	str	r2, [r3, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fc6c 	bl	8001818 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40013c00 	.word	0x40013c00

08003f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e12b      	b.n	80041b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fa52 	bl	800341c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f002 fa5c 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a81      	ldr	r2, [pc, #516]	; (80041c0 <HAL_I2C_Init+0x274>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d807      	bhi.n	8003fd0 <HAL_I2C_Init+0x84>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a80      	ldr	r2, [pc, #512]	; (80041c4 <HAL_I2C_Init+0x278>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bf94      	ite	ls
 8003fc8:	2301      	movls	r3, #1
 8003fca:	2300      	movhi	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e006      	b.n	8003fde <HAL_I2C_Init+0x92>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a7d      	ldr	r2, [pc, #500]	; (80041c8 <HAL_I2C_Init+0x27c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bf94      	ite	ls
 8003fd8:	2301      	movls	r3, #1
 8003fda:	2300      	movhi	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0e7      	b.n	80041b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a78      	ldr	r2, [pc, #480]	; (80041cc <HAL_I2C_Init+0x280>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9b      	lsrs	r3, r3, #18
 8003ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <HAL_I2C_Init+0x274>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <HAL_I2C_Init+0xd4>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3301      	adds	r3, #1
 800401e:	e009      	b.n	8004034 <HAL_I2C_Init+0xe8>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	4a69      	ldr	r2, [pc, #420]	; (80041d0 <HAL_I2C_Init+0x284>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	430b      	orrs	r3, r1
 800403a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	495c      	ldr	r1, [pc, #368]	; (80041c0 <HAL_I2C_Init+0x274>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d819      	bhi.n	8004088 <HAL_I2C_Init+0x13c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e59      	subs	r1, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004068:	400b      	ands	r3, r1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_I2C_Init+0x138>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1e59      	subs	r1, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fbb1 f3f3 	udiv	r3, r1, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	e051      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004084:	2304      	movs	r3, #4
 8004086:	e04f      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <HAL_I2C_Init+0x168>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e58      	subs	r0, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	440b      	add	r3, r1
 800409e:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e012      	b.n	80040da <HAL_I2C_Init+0x18e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e58      	subs	r0, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	0099      	lsls	r1, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Init+0x196>
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10e      	bne.n	8004108 <HAL_I2C_Init+0x1bc>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e58      	subs	r0, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	440b      	add	r3, r1
 80040f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004106:	e00f      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e58      	subs	r0, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	0099      	lsls	r1, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	fbb0 f3f3 	udiv	r3, r0, r3
 800411e:	3301      	adds	r3, #1
 8004120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	6809      	ldr	r1, [r1, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6911      	ldr	r1, [r2, #16]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	000186a0 	.word	0x000186a0
 80041c4:	001e847f 	.word	0x001e847f
 80041c8:	003d08ff 	.word	0x003d08ff
 80041cc:	431bde83 	.word	0x431bde83
 80041d0:	10624dd3 	.word	0x10624dd3

080041d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d003      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x38>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	f040 80c1 	bne.w	800438e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <HAL_I2C_EV_IRQHandler+0x6e>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800422c:	d003      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0x62>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004234:	d101      	bne.n	800423a <HAL_I2C_EV_IRQHandler+0x66>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_I2C_EV_IRQHandler+0x68>
 800423a:	2300      	movs	r3, #0
 800423c:	2b01      	cmp	r3, #1
 800423e:	f000 8132 	beq.w	80044a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x92>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fc7b 	bl	8005b54 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fd83 	bl	8004d6a <I2C_Master_SB>
 8004264:	e092      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xb2>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a5b      	lsrs	r3, r3, #9
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fdf9 	bl	8004e76 <I2C_Master_ADD10>
 8004284:	e082      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	0a5b      	lsrs	r3, r3, #9
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fe13 	bl	8004eca <I2C_Master_ADDR>
 80042a4:	e072      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03b      	beq.n	800432a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	f000 80f3 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9f3 	bl	80046d4 <I2C_MasterTransmit_TXE>
 80042ee:	e04d      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80d6 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	0a5b      	lsrs	r3, r3, #9
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80cf 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	2b21      	cmp	r3, #33	; 0x21
 8004310:	d103      	bne.n	800431a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa7a 	bl	800480c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004318:	e0c7      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	f040 80c4 	bne.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fae8 	bl	80048f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004328:	e0bf      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	f000 80b7 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fb5d 	bl	8004a20 <I2C_MasterReceive_RXNE>
 8004366:	e011      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809a 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	0a5b      	lsrs	r3, r3, #9
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8093 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fc06 	bl	8004b96 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	e08e      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800438c:	e08d      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e007      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 ffc4 	bl	8005368 <I2C_Slave_ADDR>
 80043e0:	e066      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x22e>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fffe 	bl	80053fc <I2C_Slave_STOPF>
 8004400:	e056      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	2b21      	cmp	r3, #33	; 0x21
 8004406:	d002      	beq.n	800440e <HAL_I2C_EV_IRQHandler+0x23a>
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2b29      	cmp	r3, #41	; 0x29
 800440c:	d125      	bne.n	800445a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	09db      	lsrs	r3, r3, #7
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	0a9b      	lsrs	r3, r3, #10
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 feda 	bl	80051ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004438:	e039      	b.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d033      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02d      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ff07 	bl	8005266 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004458:	e029      	b.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	0a9b      	lsrs	r3, r3, #10
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 ff12 	bl	80052a8 <I2C_SlaveReceive_RXNE>
 8004484:	e014      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff40 	bl	8005324 <I2C_SlaveReceive_BTF>
 80044a4:	e004      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b08a      	sub	sp, #40	; 0x28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00e      	beq.n	8004504 <HAL_I2C_ER_IRQHandler+0x4e>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004502:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	0a5b      	lsrs	r3, r3, #9
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <HAL_I2C_ER_IRQHandler+0x78>
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800452c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	0a9b      	lsrs	r3, r3, #10
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03f      	beq.n	80045ba <HAL_I2C_ER_IRQHandler+0x104>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d039      	beq.n	80045ba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004546:	7efb      	ldrb	r3, [r7, #27]
 8004548:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004560:	7ebb      	ldrb	r3, [r7, #26]
 8004562:	2b20      	cmp	r3, #32
 8004564:	d112      	bne.n	800458c <HAL_I2C_ER_IRQHandler+0xd6>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_I2C_ER_IRQHandler+0xd6>
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b21      	cmp	r3, #33	; 0x21
 8004570:	d008      	beq.n	8004584 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b29      	cmp	r3, #41	; 0x29
 8004576:	d005      	beq.n	8004584 <HAL_I2C_ER_IRQHandler+0xce>
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b28      	cmp	r3, #40	; 0x28
 800457c:	d106      	bne.n	800458c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b21      	cmp	r3, #33	; 0x21
 8004582:	d103      	bne.n	800458c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f001 f869 	bl	800565c <I2C_Slave_AF>
 800458a:	e016      	b.n	80045ba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004594:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800459e:	7efb      	ldrb	r3, [r7, #27]
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d002      	beq.n	80045aa <HAL_I2C_ER_IRQHandler+0xf4>
 80045a4:	7efb      	ldrb	r3, [r7, #27]
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d107      	bne.n	80045ba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	0adb      	lsrs	r3, r3, #11
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_I2C_ER_IRQHandler+0x12e>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80045e2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f001 f8a0 	bl	800573c <I2C_ITError>
  }
}
 80045fc:	bf00      	nop
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
 8004660:	4613      	mov	r3, r2
 8004662:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d150      	bne.n	800479c <I2C_MasterTransmit_TXE+0xc8>
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d14d      	bne.n	800479c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d01d      	beq.n	8004742 <I2C_MasterTransmit_TXE+0x6e>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b20      	cmp	r3, #32
 800470a:	d01a      	beq.n	8004742 <I2C_MasterTransmit_TXE+0x6e>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004712:	d016      	beq.n	8004742 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004722:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2211      	movs	r2, #17
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ff62 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004740:	e060      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004750:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004760:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d107      	bne.n	800478c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff7d 	bl	8004684 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800478a:	e03b      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff35 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800479a:	e033      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b21      	cmp	r3, #33	; 0x21
 80047a0:	d005      	beq.n	80047ae <I2C_MasterTransmit_TXE+0xda>
 80047a2:	7bbb      	ldrb	r3, [r7, #14]
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d12d      	bne.n	8004804 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b22      	cmp	r3, #34	; 0x22
 80047ac:	d12a      	bne.n	8004804 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047c8:	e01c      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d103      	bne.n	80047de <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f88e 	bl	80048f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80047dc:	e012      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004802:	e7ff      	b.n	8004804 <I2C_MasterTransmit_TXE+0x130>
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b21      	cmp	r3, #33	; 0x21
 8004824:	d164      	bne.n	80048f0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d012      	beq.n	8004856 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004854:	e04c      	b.n	80048f0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d01d      	beq.n	8004898 <I2C_MasterTransmit_BTF+0x8c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b20      	cmp	r3, #32
 8004860:	d01a      	beq.n	8004898 <I2C_MasterTransmit_BTF+0x8c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004868:	d016      	beq.n	8004898 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004878:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2211      	movs	r2, #17
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff feb7 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
}
 8004896:	e02b      	b.n	80048f0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d107      	bne.n	80048e2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fed2 	bl	8004684 <HAL_I2C_MemTxCpltCallback>
}
 80048e0:	e006      	b.n	80048f0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fe8a 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10b      	bne.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	b2da      	uxtb	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800492e:	e073      	b.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	b29b      	uxth	r3, r3
 8004936:	121b      	asrs	r3, r3, #8
 8004938:	b2da      	uxtb	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
}
 800494a:	e065      	b.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10b      	bne.n	800496c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	b2da      	uxtb	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	651a      	str	r2, [r3, #80]	; 0x50
}
 800496a:	e055      	b.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	2b02      	cmp	r3, #2
 8004972:	d151      	bne.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b22      	cmp	r3, #34	; 0x22
 8004978:	d10d      	bne.n	8004996 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004994:	e040      	b.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b21      	cmp	r3, #33	; 0x21
 80049a4:	d112      	bne.n	80049cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049ca:	e025      	b.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d120      	bne.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b21      	cmp	r3, #33	; 0x21
 80049da:	d11d      	bne.n	8004a18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fe36 	bl	8004684 <HAL_I2C_MemTxCpltCallback>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b22      	cmp	r3, #34	; 0x22
 8004a32:	f040 80ac 	bne.w	8004b8e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d921      	bls.n	8004a88 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	f040 808c 	bne.w	8004b8e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a84:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004a86:	e082      	b.n	8004b8e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d075      	beq.n	8004b7c <I2C_MasterReceive_RXNE+0x15c>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d002      	beq.n	8004a9c <I2C_MasterReceive_RXNE+0x7c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d16f      	bne.n	8004b7c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 f827 	bl	8005af0 <I2C_WaitOnSTOPRequestThroughIT>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d142      	bne.n	8004b2e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d10a      	bne.n	8004b18 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fdc1 	bl	8004698 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b16:	e03a      	b.n	8004b8e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2212      	movs	r2, #18
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fd76 	bl	8004618 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b2c:	e02f      	b.n	8004b8e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fd99 	bl	80046ac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b7a:	e008      	b.n	8004b8e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8a:	605a      	str	r2, [r3, #4]
}
 8004b8c:	e7ff      	b.n	8004b8e <I2C_MasterReceive_RXNE+0x16e>
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d11b      	bne.n	8004be6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004be4:	e0bd      	b.n	8004d62 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d129      	bne.n	8004c44 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00a      	beq.n	8004c1c <I2C_MasterReceive_BTF+0x86>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d007      	beq.n	8004c1c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c42:	e08e      	b.n	8004d62 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d176      	bne.n	8004d3c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d002      	beq.n	8004c5a <I2C_MasterReceive_BTF+0xc4>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d108      	bne.n	8004c6c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e019      	b.n	8004ca0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d002      	beq.n	8004c78 <I2C_MasterReceive_BTF+0xe2>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d108      	bne.n	8004c8a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e00a      	b.n	8004ca0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d007      	beq.n	8004ca0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cfa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d10a      	bne.n	8004d26 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fcba 	bl	8004698 <HAL_I2C_MemRxCpltCallback>
}
 8004d24:	e01d      	b.n	8004d62 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2212      	movs	r2, #18
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fc6f 	bl	8004618 <HAL_I2C_MasterRxCpltCallback>
}
 8004d3a:	e012      	b.n	8004d62 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d117      	bne.n	8004dae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d96:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d98:	e067      	b.n	8004e6a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	611a      	str	r2, [r3, #16]
}
 8004dac:	e05d      	b.n	8004e6a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db6:	d133      	bne.n	8004e20 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b21      	cmp	r3, #33	; 0x21
 8004dc2:	d109      	bne.n	8004dd8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dd4:	611a      	str	r2, [r3, #16]
 8004dd6:	e008      	b.n	8004dea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <I2C_Master_SB+0x92>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d032      	beq.n	8004e6a <I2C_Master_SB+0x100>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d02d      	beq.n	8004e6a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1c:	605a      	str	r2, [r3, #4]
}
 8004e1e:	e024      	b.n	8004e6a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10e      	bne.n	8004e46 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	11db      	asrs	r3, r3, #7
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f003 0306 	and.w	r3, r3, #6
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f063 030f 	orn	r3, r3, #15
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
}
 8004e44:	e011      	b.n	8004e6a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d10d      	bne.n	8004e6a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	11db      	asrs	r3, r3, #7
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 0306 	and.w	r3, r3, #6
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f063 030e 	orn	r3, r3, #14
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	611a      	str	r2, [r3, #16]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <I2C_Master_ADD10+0x26>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <I2C_Master_ADD10+0x48>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebc:	605a      	str	r2, [r3, #4]
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b091      	sub	sp, #68	; 0x44
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	f040 8169 	bne.w	80051c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <I2C_Master_ADDR+0x54>
 8004efe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d10b      	bne.n	8004f1e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f06:	2300      	movs	r3, #0
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	633b      	str	r3, [r7, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	e160      	b.n	80051e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11d      	bne.n	8004f62 <I2C_Master_ADDR+0x98>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f2e:	d118      	bne.n	8004f62 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f60:	e13e      	b.n	80051e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d113      	bne.n	8004f94 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e115      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f040 808a 	bne.w	80050b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa6:	d137      	bne.n	8005018 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc6:	d113      	bne.n	8004ff0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	e0e7      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e0d3      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	2b08      	cmp	r3, #8
 800501c:	d02e      	beq.n	800507c <I2C_Master_ADDR+0x1b2>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b20      	cmp	r3, #32
 8005022:	d02b      	beq.n	800507c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	2b12      	cmp	r3, #18
 8005028:	d102      	bne.n	8005030 <I2C_Master_ADDR+0x166>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b01      	cmp	r3, #1
 800502e:	d125      	bne.n	800507c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b04      	cmp	r3, #4
 8005034:	d00e      	beq.n	8005054 <I2C_Master_ADDR+0x18a>
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	2b02      	cmp	r3, #2
 800503a:	d00b      	beq.n	8005054 <I2C_Master_ADDR+0x18a>
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	2b10      	cmp	r3, #16
 8005040:	d008      	beq.n	8005054 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e007      	b.n	8005064 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	e0a1      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e085      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d14d      	bne.n	800515a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d016      	beq.n	80050f2 <I2C_Master_ADDR+0x228>
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d013      	beq.n	80050f2 <I2C_Master_ADDR+0x228>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d010      	beq.n	80050f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e007      	b.n	8005102 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005100:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	d117      	bne.n	8005142 <I2C_Master_ADDR+0x278>
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005118:	d00b      	beq.n	8005132 <I2C_Master_ADDR+0x268>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b01      	cmp	r3, #1
 800511e:	d008      	beq.n	8005132 <I2C_Master_ADDR+0x268>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b08      	cmp	r3, #8
 8005124:	d005      	beq.n	8005132 <I2C_Master_ADDR+0x268>
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b10      	cmp	r3, #16
 800512a:	d002      	beq.n	8005132 <I2C_Master_ADDR+0x268>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b20      	cmp	r3, #32
 8005130:	d107      	bne.n	8005142 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005140:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	e032      	b.n	80051c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005178:	d117      	bne.n	80051aa <I2C_Master_ADDR+0x2e0>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005180:	d00b      	beq.n	800519a <I2C_Master_ADDR+0x2d0>
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b01      	cmp	r3, #1
 8005186:	d008      	beq.n	800519a <I2C_Master_ADDR+0x2d0>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b08      	cmp	r3, #8
 800518c:	d005      	beq.n	800519a <I2C_Master_ADDR+0x2d0>
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	2b10      	cmp	r3, #16
 8005192:	d002      	beq.n	800519a <I2C_Master_ADDR+0x2d0>
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	2b20      	cmp	r3, #32
 8005198:	d107      	bne.n	80051aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80051c6:	e00b      	b.n	80051e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	e7ff      	b.n	80051e0 <I2C_Master_ADDR+0x316>
 80051e0:	bf00      	nop
 80051e2:	3744      	adds	r7, #68	; 0x44
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02b      	beq.n	800525e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d114      	bne.n	800525e <I2C_SlaveTransmit_TXE+0x72>
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b29      	cmp	r3, #41	; 0x29
 8005238:	d111      	bne.n	800525e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005248:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2221      	movs	r2, #33	; 0x21
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2228      	movs	r2, #40	; 0x28
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff f9e7 	bl	800462c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d011      	beq.n	800529c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02c      	beq.n	800531c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d114      	bne.n	800531c <I2C_SlaveReceive_RXNE+0x74>
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b2a      	cmp	r3, #42	; 0x2a
 80052f6:	d111      	bne.n	800531c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2222      	movs	r2, #34	; 0x22
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2228      	movs	r2, #40	; 0x28
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff f992 	bl	8004640 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d012      	beq.n	800535c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005382:	2b28      	cmp	r3, #40	; 0x28
 8005384:	d127      	bne.n	80053d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	09db      	lsrs	r3, r3, #7
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	81bb      	strh	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80053c8:	89ba      	ldrh	r2, [r7, #12]
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff f940 	bl	8004654 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053d4:	e00e      	b.n	80053f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800541c:	2300      	movs	r3, #0
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005458:	d172      	bne.n	8005540 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b22      	cmp	r3, #34	; 0x22
 800545e:	d002      	beq.n	8005466 <I2C_Slave_STOPF+0x6a>
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b2a      	cmp	r3, #42	; 0x2a
 8005464:	d135      	bne.n	80054d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005498:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe fb77 	bl	8003b92 <HAL_DMA_GetState>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d049      	beq.n	800553e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	4a69      	ldr	r2, [pc, #420]	; (8005654 <I2C_Slave_STOPF+0x258>)
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fb49 	bl	8003b4e <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03d      	beq.n	800553e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054d0:	e035      	b.n	800553e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f043 0204 	orr.w	r2, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005504:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fb41 	bl	8003b92 <HAL_DMA_GetState>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d014      	beq.n	8005540 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	4a4e      	ldr	r2, [pc, #312]	; (8005654 <I2C_Slave_STOPF+0x258>)
 800551c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fb13 	bl	8003b4e <HAL_DMA_Abort_IT>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005538:	4610      	mov	r0, r2
 800553a:	4798      	blx	r3
 800553c:	e000      	b.n	8005540 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800553e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03e      	beq.n	80055c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d112      	bne.n	800557e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d112      	bne.n	80055b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0204 	orr.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8b3 	bl	800573c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055d6:	e039      	b.n	800564c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b2a      	cmp	r3, #42	; 0x2a
 80055dc:	d109      	bne.n	80055f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2228      	movs	r2, #40	; 0x28
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f827 	bl	8004640 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b28      	cmp	r3, #40	; 0x28
 80055fc:	d111      	bne.n	8005622 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a15      	ldr	r2, [pc, #84]	; (8005658 <I2C_Slave_STOPF+0x25c>)
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f828 	bl	8004670 <HAL_I2C_ListenCpltCallback>
}
 8005620:	e014      	b.n	800564c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	d002      	beq.n	8005630 <I2C_Slave_STOPF+0x234>
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b22      	cmp	r3, #34	; 0x22
 800562e:	d10d      	bne.n	800564c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fe fffa 	bl	8004640 <HAL_I2C_SlaveRxCpltCallback>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	080059a1 	.word	0x080059a1
 8005658:	ffff0000 	.word	0xffff0000

0800565c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d002      	beq.n	800567e <I2C_Slave_AF+0x22>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b20      	cmp	r3, #32
 800567c:	d129      	bne.n	80056d2 <I2C_Slave_AF+0x76>
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b28      	cmp	r3, #40	; 0x28
 8005682:	d126      	bne.n	80056d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <I2C_Slave_AF+0xdc>)
 8005688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005698:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fe ffd0 	bl	8004670 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80056d0:	e02e      	b.n	8005730 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b21      	cmp	r3, #33	; 0x21
 80056d6:	d126      	bne.n	8005726 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a17      	ldr	r2, [pc, #92]	; (8005738 <I2C_Slave_AF+0xdc>)
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005702:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800570c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fe ff84 	bl	800462c <HAL_I2C_SlaveTxCpltCallback>
}
 8005724:	e004      	b.n	8005730 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800572e:	615a      	str	r2, [r3, #20]
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	ffff0000 	.word	0xffff0000

0800573c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005752:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2b10      	cmp	r3, #16
 8005758:	d002      	beq.n	8005760 <I2C_ITError+0x24>
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d10a      	bne.n	8005776 <I2C_ITError+0x3a>
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b22      	cmp	r3, #34	; 0x22
 8005764:	d107      	bne.n	8005776 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005774:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800577c:	2b28      	cmp	r3, #40	; 0x28
 800577e:	d107      	bne.n	8005790 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800578e:	e015      	b.n	80057bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d00a      	beq.n	80057b6 <I2C_ITError+0x7a>
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b60      	cmp	r3, #96	; 0x60
 80057a4:	d007      	beq.n	80057b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ca:	d162      	bne.n	8005892 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d020      	beq.n	800582c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	4a6a      	ldr	r2, [pc, #424]	; (8005998 <I2C_ITError+0x25c>)
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe f9a9 	bl	8003b4e <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8089 	beq.w	8005916 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005826:	4610      	mov	r0, r2
 8005828:	4798      	blx	r3
 800582a:	e074      	b.n	8005916 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	4a59      	ldr	r2, [pc, #356]	; (8005998 <I2C_ITError+0x25c>)
 8005832:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe f988 	bl	8003b4e <HAL_DMA_Abort_IT>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d068      	beq.n	8005916 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d10b      	bne.n	800586a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	e041      	b.n	8005916 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b60      	cmp	r3, #96	; 0x60
 800589c:	d125      	bne.n	80058ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d10b      	bne.n	80058d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fe feec 	bl	80046c0 <HAL_I2C_AbortCpltCallback>
 80058e8:	e015      	b.n	8005916 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d10b      	bne.n	8005910 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fe fecb 	bl	80046ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005952:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d113      	bne.n	8005990 <I2C_ITError+0x254>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b28      	cmp	r3, #40	; 0x28
 800596c:	d110      	bne.n	8005990 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <I2C_ITError+0x260>)
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fe fe70 	bl	8004670 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	080059a1 	.word	0x080059a1
 800599c:	ffff0000 	.word	0xffff0000

080059a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059ba:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <I2C_DMAAbort+0x148>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	4a4a      	ldr	r2, [pc, #296]	; (8005aec <I2C_DMAAbort+0x14c>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	0a1a      	lsrs	r2, r3, #8
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	00da      	lsls	r2, r3, #3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0220 	orr.w	r2, r3, #32
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059e6:	e00a      	b.n	80059fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fc:	d0ea      	beq.n	80059d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	2200      	movs	r2, #0
 8005a42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	2200      	movs	r2, #0
 8005a52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b60      	cmp	r3, #96	; 0x60
 8005a6e:	d10e      	bne.n	8005a8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7fe fe1a 	bl	80046c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a8c:	e027      	b.n	8005ade <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a8e:	7cfb      	ldrb	r3, [r7, #19]
 8005a90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a94:	2b28      	cmp	r3, #40	; 0x28
 8005a96:	d117      	bne.n	8005ac8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ab6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2228      	movs	r2, #40	; 0x28
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ac6:	e007      	b.n	8005ad8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ad8:	6978      	ldr	r0, [r7, #20]
 8005ada:	f7fe fde7 	bl	80046ac <HAL_I2C_ErrorCallback>
}
 8005ade:	bf00      	nop
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000009c 	.word	0x2000009c
 8005aec:	14f8b589 	.word	0x14f8b589

08005af0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	08db      	lsrs	r3, r3, #3
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	0a1a      	lsrs	r2, r3, #8
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e008      	b.n	8005b40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3c:	d0e9      	beq.n	8005b12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	2000009c 	.word	0x2000009c
 8005b50:	14f8b589 	.word	0x14f8b589

08005b54 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b64:	d103      	bne.n	8005b6e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b6c:	e007      	b.n	8005b7e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b76:	d102      	bne.n	8005b7e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e267      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d075      	beq.n	8005c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005baa:	4b88      	ldr	r3, [pc, #544]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 030c 	and.w	r3, r3, #12
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bb6:	4b85      	ldr	r3, [pc, #532]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d112      	bne.n	8005be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc2:	4b82      	ldr	r3, [pc, #520]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bce:	d10b      	bne.n	8005be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd0:	4b7e      	ldr	r3, [pc, #504]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05b      	beq.n	8005c94 <HAL_RCC_OscConfig+0x108>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d157      	bne.n	8005c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e242      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCC_OscConfig+0x74>
 8005bf2:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a75      	ldr	r2, [pc, #468]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e01d      	b.n	8005c3c <HAL_RCC_OscConfig+0xb0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x98>
 8005c0a:	4b70      	ldr	r3, [pc, #448]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6f      	ldr	r2, [pc, #444]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4b6d      	ldr	r3, [pc, #436]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6c      	ldr	r2, [pc, #432]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0xb0>
 8005c24:	4b69      	ldr	r3, [pc, #420]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a68      	ldr	r2, [pc, #416]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b66      	ldr	r3, [pc, #408]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a65      	ldr	r2, [pc, #404]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d013      	beq.n	8005c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd fe42 	bl	80038cc <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fe3e 	bl	80038cc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e207      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0xc0>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fe2e 	bl	80038cc <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c74:	f7fd fe2a 	bl	80038cc <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e1f3      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c86:	4b51      	ldr	r3, [pc, #324]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0xe8>
 8005c92:	e000      	b.n	8005c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d063      	beq.n	8005d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cae:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d11c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cba:	4b44      	ldr	r3, [pc, #272]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d116      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_RCC_OscConfig+0x152>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d001      	beq.n	8005cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e1c7      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4937      	ldr	r1, [pc, #220]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf2:	e03a      	b.n	8005d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d020      	beq.n	8005d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cfc:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_RCC_OscConfig+0x244>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d02:	f7fd fde3 	bl	80038cc <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d0a:	f7fd fddf 	bl	80038cc <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e1a8      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d28:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4925      	ldr	r1, [pc, #148]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	600b      	str	r3, [r1, #0]
 8005d3c:	e015      	b.n	8005d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <HAL_RCC_OscConfig+0x244>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fd fdc2 	bl	80038cc <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d4c:	f7fd fdbe 	bl	80038cc <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e187      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d036      	beq.n	8005de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <HAL_RCC_OscConfig+0x248>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d84:	f7fd fda2 	bl	80038cc <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d8c:	f7fd fd9e 	bl	80038cc <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e167      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_RCC_OscConfig+0x240>)
 8005da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCC_OscConfig+0x200>
 8005daa:	e01b      	b.n	8005de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCC_OscConfig+0x248>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db2:	f7fd fd8b 	bl	80038cc <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db8:	e00e      	b.n	8005dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dba:	f7fd fd87 	bl	80038cc <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d907      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e150      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	42470000 	.word	0x42470000
 8005dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd8:	4b88      	ldr	r3, [pc, #544]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1ea      	bne.n	8005dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8097 	beq.w	8005f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005df6:	4b81      	ldr	r3, [pc, #516]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10f      	bne.n	8005e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	4b7d      	ldr	r3, [pc, #500]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	4a7c      	ldr	r2, [pc, #496]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6413      	str	r3, [r2, #64]	; 0x40
 8005e12:	4b7a      	ldr	r3, [pc, #488]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e22:	4b77      	ldr	r3, [pc, #476]	; (8006000 <HAL_RCC_OscConfig+0x474>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d118      	bne.n	8005e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e2e:	4b74      	ldr	r3, [pc, #464]	; (8006000 <HAL_RCC_OscConfig+0x474>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a73      	ldr	r2, [pc, #460]	; (8006000 <HAL_RCC_OscConfig+0x474>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3a:	f7fd fd47 	bl	80038cc <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fd fd43 	bl	80038cc <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e10c      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e54:	4b6a      	ldr	r3, [pc, #424]	; (8006000 <HAL_RCC_OscConfig+0x474>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d106      	bne.n	8005e76 <HAL_RCC_OscConfig+0x2ea>
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a63      	ldr	r2, [pc, #396]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e01c      	b.n	8005eb0 <HAL_RCC_OscConfig+0x324>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x30c>
 8005e7e:	4b5f      	ldr	r3, [pc, #380]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a5e      	ldr	r2, [pc, #376]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8a:	4b5c      	ldr	r3, [pc, #368]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a5b      	ldr	r2, [pc, #364]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6713      	str	r3, [r2, #112]	; 0x70
 8005e96:	e00b      	b.n	8005eb0 <HAL_RCC_OscConfig+0x324>
 8005e98:	4b58      	ldr	r3, [pc, #352]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9c:	4a57      	ldr	r2, [pc, #348]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea4:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4a54      	ldr	r2, [pc, #336]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f023 0304 	bic.w	r3, r3, #4
 8005eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fd fd08 	bl	80038cc <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebe:	e00a      	b.n	8005ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ec0:	f7fd fd04 	bl	80038cc <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e0cb      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed6:	4b49      	ldr	r3, [pc, #292]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0ee      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x334>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee4:	f7fd fcf2 	bl	80038cc <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fd fcee 	bl	80038cc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0b5      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f02:	4b3e      	ldr	r3, [pc, #248]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ee      	bne.n	8005eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f14:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	4a38      	ldr	r2, [pc, #224]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a1 	beq.w	800606c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f2a:	4b34      	ldr	r3, [pc, #208]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d05c      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d141      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <HAL_RCC_OscConfig+0x478>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fd fcc2 	bl	80038cc <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4c:	f7fd fcbe 	bl	80038cc <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e087      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	3b01      	subs	r3, #1
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	061b      	lsls	r3, r3, #24
 8005f8e:	491b      	ldr	r1, [pc, #108]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f94:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <HAL_RCC_OscConfig+0x478>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9a:	f7fd fc97 	bl	80038cc <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fd fc93 	bl	80038cc <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e05c      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x416>
 8005fc0:	e054      	b.n	800606c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <HAL_RCC_OscConfig+0x478>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc8:	f7fd fc80 	bl	80038cc <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd0:	f7fd fc7c 	bl	80038cc <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e045      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_OscConfig+0x470>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x444>
 8005fee:	e03d      	b.n	800606c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e038      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
 8005ffc:	40023800 	.word	0x40023800
 8006000:	40007000 	.word	0x40007000
 8006004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006008:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <HAL_RCC_OscConfig+0x4ec>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d028      	beq.n	8006068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006020:	429a      	cmp	r2, r3
 8006022:	d121      	bne.n	8006068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800602e:	429a      	cmp	r2, r3
 8006030:	d11a      	bne.n	8006068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006038:	4013      	ands	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800603e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006040:	4293      	cmp	r3, r2
 8006042:	d111      	bne.n	8006068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	3b01      	subs	r3, #1
 8006052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d107      	bne.n	8006068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d001      	beq.n	800606c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800

0800607c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0cc      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006090:	4b68      	ldr	r3, [pc, #416]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90c      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609e:	4b65      	ldr	r3, [pc, #404]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b63      	ldr	r3, [pc, #396]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0b8      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d020      	beq.n	8006106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d0:	4b59      	ldr	r3, [pc, #356]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a58      	ldr	r2, [pc, #352]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060e8:	4b53      	ldr	r3, [pc, #332]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4a52      	ldr	r2, [pc, #328]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f4:	4b50      	ldr	r3, [pc, #320]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	494d      	ldr	r1, [pc, #308]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d044      	beq.n	800619c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611a:	4b47      	ldr	r3, [pc, #284]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d119      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e07f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d003      	beq.n	800613a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006136:	2b03      	cmp	r3, #3
 8006138:	d107      	bne.n	800614a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613a:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e06f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614a:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e067      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f023 0203 	bic.w	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4934      	ldr	r1, [pc, #208]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800616c:	f7fd fbae 	bl	80038cc <HAL_GetTick>
 8006170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	e00a      	b.n	800618a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006174:	f7fd fbaa 	bl	80038cc <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e04f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 020c 	and.w	r2, r3, #12
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	429a      	cmp	r2, r3
 800619a:	d1eb      	bne.n	8006174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d20c      	bcs.n	80061c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b22      	ldr	r3, [pc, #136]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b20      	ldr	r3, [pc, #128]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e032      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4916      	ldr	r1, [pc, #88]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	490e      	ldr	r1, [pc, #56]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006202:	f000 f821 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	490a      	ldr	r1, [pc, #40]	; (800623c <HAL_RCC_ClockConfig+0x1c0>)
 8006214:	5ccb      	ldrb	r3, [r1, r3]
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <HAL_RCC_ClockConfig+0x1c4>)
 800621c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_RCC_ClockConfig+0x1c8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fd fb0e 	bl	8003844 <HAL_InitTick>

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023c00 	.word	0x40023c00
 8006238:	40023800 	.word	0x40023800
 800623c:	08009040 	.word	0x08009040
 8006240:	2000009c 	.word	0x2000009c
 8006244:	200000a0 	.word	0x200000a0

08006248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800624c:	b094      	sub	sp, #80	; 0x50
 800624e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	647b      	str	r3, [r7, #68]	; 0x44
 8006254:	2300      	movs	r3, #0
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006258:	2300      	movs	r3, #0
 800625a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006260:	4b79      	ldr	r3, [pc, #484]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 030c 	and.w	r3, r3, #12
 8006268:	2b08      	cmp	r3, #8
 800626a:	d00d      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x40>
 800626c:	2b08      	cmp	r3, #8
 800626e:	f200 80e1 	bhi.w	8006434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_RCC_GetSysClockFreq+0x34>
 8006276:	2b04      	cmp	r3, #4
 8006278:	d003      	beq.n	8006282 <HAL_RCC_GetSysClockFreq+0x3a>
 800627a:	e0db      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800627c:	4b73      	ldr	r3, [pc, #460]	; (800644c <HAL_RCC_GetSysClockFreq+0x204>)
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006280:	e0db      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006282:	4b73      	ldr	r3, [pc, #460]	; (8006450 <HAL_RCC_GetSysClockFreq+0x208>)
 8006284:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006286:	e0d8      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006288:	4b6f      	ldr	r3, [pc, #444]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006292:	4b6d      	ldr	r3, [pc, #436]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d063      	beq.n	8006366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800629e:	4b6a      	ldr	r3, [pc, #424]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	2200      	movs	r2, #0
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	633b      	str	r3, [r7, #48]	; 0x30
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f04f 0000 	mov.w	r0, #0
 80062c2:	f04f 0100 	mov.w	r1, #0
 80062c6:	0159      	lsls	r1, r3, #5
 80062c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062cc:	0150      	lsls	r0, r2, #5
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4621      	mov	r1, r4
 80062d4:	1a51      	subs	r1, r2, r1
 80062d6:	6139      	str	r1, [r7, #16]
 80062d8:	4629      	mov	r1, r5
 80062da:	eb63 0301 	sbc.w	r3, r3, r1
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062ec:	4659      	mov	r1, fp
 80062ee:	018b      	lsls	r3, r1, #6
 80062f0:	4651      	mov	r1, sl
 80062f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062f6:	4651      	mov	r1, sl
 80062f8:	018a      	lsls	r2, r1, #6
 80062fa:	4651      	mov	r1, sl
 80062fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006300:	4659      	mov	r1, fp
 8006302:	eb63 0901 	sbc.w	r9, r3, r1
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800631a:	4690      	mov	r8, r2
 800631c:	4699      	mov	r9, r3
 800631e:	4623      	mov	r3, r4
 8006320:	eb18 0303 	adds.w	r3, r8, r3
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	462b      	mov	r3, r5
 8006328:	eb49 0303 	adc.w	r3, r9, r3
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800633a:	4629      	mov	r1, r5
 800633c:	024b      	lsls	r3, r1, #9
 800633e:	4621      	mov	r1, r4
 8006340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006344:	4621      	mov	r1, r4
 8006346:	024a      	lsls	r2, r1, #9
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634e:	2200      	movs	r2, #0
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006358:	f7fa fbfa 	bl	8000b50 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006364:	e058      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	099b      	lsrs	r3, r3, #6
 800636c:	2200      	movs	r2, #0
 800636e:	4618      	mov	r0, r3
 8006370:	4611      	mov	r1, r2
 8006372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	2300      	movs	r3, #0
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
 800637c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	f04f 0000 	mov.w	r0, #0
 8006388:	f04f 0100 	mov.w	r1, #0
 800638c:	0159      	lsls	r1, r3, #5
 800638e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006392:	0150      	lsls	r0, r2, #5
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4641      	mov	r1, r8
 800639a:	ebb2 0a01 	subs.w	sl, r2, r1
 800639e:	4649      	mov	r1, r9
 80063a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063b8:	ebb2 040a 	subs.w	r4, r2, sl
 80063bc:	eb63 050b 	sbc.w	r5, r3, fp
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	00eb      	lsls	r3, r5, #3
 80063ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ce:	00e2      	lsls	r2, r4, #3
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	4643      	mov	r3, r8
 80063d6:	18e3      	adds	r3, r4, r3
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	464b      	mov	r3, r9
 80063dc:	eb45 0303 	adc.w	r3, r5, r3
 80063e0:	607b      	str	r3, [r7, #4]
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063ee:	4629      	mov	r1, r5
 80063f0:	028b      	lsls	r3, r1, #10
 80063f2:	4621      	mov	r1, r4
 80063f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063f8:	4621      	mov	r1, r4
 80063fa:	028a      	lsls	r2, r1, #10
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006402:	2200      	movs	r2, #0
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	61fa      	str	r2, [r7, #28]
 8006408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800640c:	f7fa fba0 	bl	8000b50 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4613      	mov	r3, r2
 8006416:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_RCC_GetSysClockFreq+0x200>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	3301      	adds	r3, #1
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800642a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006432:	e002      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_RCC_GetSysClockFreq+0x204>)
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800643a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800643c:	4618      	mov	r0, r3
 800643e:	3750      	adds	r7, #80	; 0x50
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006446:	bf00      	nop
 8006448:	40023800 	.word	0x40023800
 800644c:	00f42400 	.word	0x00f42400
 8006450:	007a1200 	.word	0x007a1200

08006454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <HAL_RCC_GetHCLKFreq+0x14>)
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000009c 	.word	0x2000009c

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006470:	f7ff fff0 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	0a9b      	lsrs	r3, r3, #10
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4903      	ldr	r1, [pc, #12]	; (8006490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40023800 	.word	0x40023800
 8006490:	08009050 	.word	0x08009050

08006494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006498:	f7ff ffdc 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	0b5b      	lsrs	r3, r3, #13
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	4903      	ldr	r1, [pc, #12]	; (80064b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40023800 	.word	0x40023800
 80064b8:	08009050 	.word	0x08009050

080064bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e041      	b.n	8006552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fc fff2 	bl	80034cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fde2 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d001      	beq.n	8006574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e03c      	b.n	80065ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <HAL_TIM_Base_Start+0xa0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_TIM_Base_Start+0x5c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d013      	beq.n	80065b8 <HAL_TIM_Base_Start+0x5c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <HAL_TIM_Base_Start+0xa4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_Base_Start+0x5c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_TIM_Base_Start+0xa8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_Base_Start+0x5c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a17      	ldr	r2, [pc, #92]	; (8006608 <HAL_TIM_Base_Start+0xac>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_Base_Start+0x5c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <HAL_TIM_Base_Start+0xb0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d111      	bne.n	80065dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d010      	beq.n	80065ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	e007      	b.n	80065ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40000c00 	.word	0x40000c00
 800660c:	40014000 	.word	0x40014000

08006610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e044      	b.n	80066b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d013      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a17      	ldr	r2, [pc, #92]	; (80066cc <HAL_TIM_Base_Start_IT+0xbc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d111      	bne.n	80066a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b06      	cmp	r3, #6
 800668c:	d010      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	e007      	b.n	80066b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40014000 	.word	0x40014000

080066d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e041      	b.n	800676a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f839 	bl	8006772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 fcd6 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_TIM_PWM_Start+0x24>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e022      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d109      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x3e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e015      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d109      	bne.n	80067e0 <HAL_TIM_PWM_Start+0x58>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e008      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e068      	b.n	80068cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <HAL_TIM_PWM_Start+0x82>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006808:	e013      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b04      	cmp	r3, #4
 800680e:	d104      	bne.n	800681a <HAL_TIM_PWM_Start+0x92>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006818:	e00b      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d104      	bne.n	800682a <HAL_TIM_PWM_Start+0xa2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006828:	e003      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fee8 	bl	8007610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <HAL_TIM_PWM_Start+0x14c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d107      	bne.n	800685a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <HAL_TIM_PWM_Start+0x14c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d018      	beq.n	8006896 <HAL_TIM_PWM_Start+0x10e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d013      	beq.n	8006896 <HAL_TIM_PWM_Start+0x10e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <HAL_TIM_PWM_Start+0x150>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_TIM_PWM_Start+0x10e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a17      	ldr	r2, [pc, #92]	; (80068dc <HAL_TIM_PWM_Start+0x154>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_TIM_PWM_Start+0x10e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <HAL_TIM_PWM_Start+0x158>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_TIM_PWM_Start+0x10e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a14      	ldr	r2, [pc, #80]	; (80068e4 <HAL_TIM_PWM_Start+0x15c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d111      	bne.n	80068ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b06      	cmp	r3, #6
 80068a6:	d010      	beq.n	80068ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b8:	e007      	b.n	80068ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40014000 	.word	0x40014000

080068e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e097      	b.n	8006a2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fc fe19 	bl	8003548 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f000 fbc1 	bl	80070c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	4313      	orrs	r3, r2
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006988:	f023 030c 	bic.w	r3, r3, #12
 800698c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	4313      	orrs	r3, r2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	031b      	lsls	r3, r3, #12
 80069b8:	4313      	orrs	r3, r2
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	4313      	orrs	r3, r2
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d110      	bne.n	8006a86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d102      	bne.n	8006a70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a6a:	7b7b      	ldrb	r3, [r7, #13]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d001      	beq.n	8006a74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e069      	b.n	8006b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a84:	e031      	b.n	8006aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d110      	bne.n	8006aae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d102      	bne.n	8006a98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a92:	7b3b      	ldrb	r3, [r7, #12]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d001      	beq.n	8006a9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e055      	b.n	8006b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aac:	e01d      	b.n	8006aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d108      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d105      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aba:	7b7b      	ldrb	r3, [r7, #13]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d102      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ac0:	7b3b      	ldrb	r3, [r7, #12]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d001      	beq.n	8006aca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e03e      	b.n	8006b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_TIM_Encoder_Start+0xc4>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d008      	beq.n	8006b08 <HAL_TIM_Encoder_Start+0xd4>
 8006af6:	e00f      	b.n	8006b18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd85 	bl	8007610 <TIM_CCxChannelCmd>
      break;
 8006b06:	e016      	b.n	8006b36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	2104      	movs	r1, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fd7d 	bl	8007610 <TIM_CCxChannelCmd>
      break;
 8006b16:	e00e      	b.n	8006b36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fd75 	bl	8007610 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd6e 	bl	8007610 <TIM_CCxChannelCmd>
      break;
 8006b34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d122      	bne.n	8006bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d11b      	bne.n	8006bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0202 	mvn.w	r2, #2
 8006b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa77 	bl	8007086 <HAL_TIM_IC_CaptureCallback>
 8006b98:	e005      	b.n	8006ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa69 	bl	8007072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa7a 	bl	800709a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d122      	bne.n	8006c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d11b      	bne.n	8006c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0204 	mvn.w	r2, #4
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa4d 	bl	8007086 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa3f 	bl	8007072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa50 	bl	800709a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d122      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d11b      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0208 	mvn.w	r2, #8
 8006c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa23 	bl	8007086 <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa15 	bl	8007072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa26 	bl	800709a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0210 	mvn.w	r2, #16
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9f9 	bl	8007086 <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9eb 	bl	8007072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9fc 	bl	800709a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10e      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d107      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0201 	mvn.w	r2, #1
 8006ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fa fdf0 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d10e      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d107      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fd78 	bl	80077f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d10e      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d107      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9c1 	bl	80070ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d10e      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d107      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0220 	mvn.w	r2, #32
 8006d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fd42 	bl	80077dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e0ae      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	f200 809f 	bhi.w	8006ecc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006ecd 	.word	0x08006ecd
 8006d9c:	08006ecd 	.word	0x08006ecd
 8006da0:	08006ecd 	.word	0x08006ecd
 8006da4:	08006e09 	.word	0x08006e09
 8006da8:	08006ecd 	.word	0x08006ecd
 8006dac:	08006ecd 	.word	0x08006ecd
 8006db0:	08006ecd 	.word	0x08006ecd
 8006db4:	08006e4b 	.word	0x08006e4b
 8006db8:	08006ecd 	.word	0x08006ecd
 8006dbc:	08006ecd 	.word	0x08006ecd
 8006dc0:	08006ecd 	.word	0x08006ecd
 8006dc4:	08006e8b 	.word	0x08006e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f9f8 	bl	80071c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6999      	ldr	r1, [r3, #24]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	619a      	str	r2, [r3, #24]
      break;
 8006e06:	e064      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fa3e 	bl	8007290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	021a      	lsls	r2, r3, #8
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	619a      	str	r2, [r3, #24]
      break;
 8006e48:	e043      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fa89 	bl	8007368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0208 	orr.w	r2, r2, #8
 8006e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0204 	bic.w	r2, r2, #4
 8006e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69d9      	ldr	r1, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	61da      	str	r2, [r3, #28]
      break;
 8006e88:	e023      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fad3 	bl	800743c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	021a      	lsls	r2, r3, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	61da      	str	r2, [r3, #28]
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_TIM_ConfigClockSource+0x1c>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e0b4      	b.n	800706a <HAL_TIM_ConfigClockSource+0x186>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f38:	d03e      	beq.n	8006fb8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3e:	f200 8087 	bhi.w	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f46:	f000 8086 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x172>
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	d87f      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b70      	cmp	r3, #112	; 0x70
 8006f52:	d01a      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0xa6>
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d87b      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f58:	2b60      	cmp	r3, #96	; 0x60
 8006f5a:	d050      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x11a>
 8006f5c:	2b60      	cmp	r3, #96	; 0x60
 8006f5e:	d877      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b50      	cmp	r3, #80	; 0x50
 8006f62:	d03c      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0xfa>
 8006f64:	2b50      	cmp	r3, #80	; 0x50
 8006f66:	d873      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d058      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x13a>
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d86f      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	d064      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15a>
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d86b      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d060      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15a>
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d867      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05c      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15a>
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d05a      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15a>
 8006f88:	e062      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f000 fb19 	bl	80075d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	609a      	str	r2, [r3, #8]
      break;
 8006fb6:	e04f      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6899      	ldr	r1, [r3, #8]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f000 fb02 	bl	80075d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fda:	609a      	str	r2, [r3, #8]
      break;
 8006fdc:	e03c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 fa76 	bl	80074dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2150      	movs	r1, #80	; 0x50
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 facf 	bl	800759a <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e02c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	461a      	mov	r2, r3
 800700c:	f000 fa95 	bl	800753a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2160      	movs	r1, #96	; 0x60
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fabf 	bl	800759a <TIM_ITRx_SetConfig>
      break;
 800701c:	e01c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 fa56 	bl	80074dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2140      	movs	r1, #64	; 0x40
 8007036:	4618      	mov	r0, r3
 8007038:	f000 faaf 	bl	800759a <TIM_ITRx_SetConfig>
      break;
 800703c:	e00c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f000 faa6 	bl	800759a <TIM_ITRx_SetConfig>
      break;
 800704e:	e003      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	e000      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a34      	ldr	r2, [pc, #208]	; (80071a8 <TIM_Base_SetConfig+0xe4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a31      	ldr	r2, [pc, #196]	; (80071ac <TIM_Base_SetConfig+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a30      	ldr	r2, [pc, #192]	; (80071b0 <TIM_Base_SetConfig+0xec>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <TIM_Base_SetConfig+0xf0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <TIM_Base_SetConfig+0xe4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01b      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d017      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a22      	ldr	r2, [pc, #136]	; (80071ac <TIM_Base_SetConfig+0xe8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <TIM_Base_SetConfig+0xec>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00f      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <TIM_Base_SetConfig+0xf0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00b      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <TIM_Base_SetConfig+0xf4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1e      	ldr	r2, [pc, #120]	; (80071bc <TIM_Base_SetConfig+0xf8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <TIM_Base_SetConfig+0xfc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <TIM_Base_SetConfig+0xe4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d103      	bne.n	8007194 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	615a      	str	r2, [r3, #20]
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f023 0302 	bic.w	r3, r3, #2
 800720c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <TIM_OC1_SetConfig+0xc8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10c      	bne.n	800723a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 0308 	bic.w	r3, r3, #8
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a13      	ldr	r2, [pc, #76]	; (800728c <TIM_OC1_SetConfig+0xc8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d111      	bne.n	8007266 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	621a      	str	r2, [r3, #32]
}
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	40010000 	.word	0x40010000

08007290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f023 0210 	bic.w	r2, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0320 	bic.w	r3, r3, #32
 80072da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <TIM_OC2_SetConfig+0xd4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10d      	bne.n	800730c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a15      	ldr	r2, [pc, #84]	; (8007364 <TIM_OC2_SetConfig+0xd4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d113      	bne.n	800733c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800731a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000

08007368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a1d      	ldr	r2, [pc, #116]	; (8007438 <TIM_OC3_SetConfig+0xd0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d10d      	bne.n	80073e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <TIM_OC3_SetConfig+0xd0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d113      	bne.n	8007412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	621a      	str	r2, [r3, #32]
}
 800742c:	bf00      	nop
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40010000 	.word	0x40010000

0800743c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	031b      	lsls	r3, r3, #12
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a10      	ldr	r2, [pc, #64]	; (80074d8 <TIM_OC4_SetConfig+0x9c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d109      	bne.n	80074b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	019b      	lsls	r3, r3, #6
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000

080074dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f023 0201 	bic.w	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 030a 	bic.w	r3, r3, #10
 8007518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0210 	bic.w	r2, r3, #16
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	031b      	lsls	r3, r3, #12
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f043 0307 	orr.w	r3, r3, #7
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	021a      	lsls	r2, r3, #8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	371c      	adds	r7, #28
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2201      	movs	r2, #1
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	43db      	mvns	r3, r3
 8007632:	401a      	ands	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1a      	ldr	r2, [r3, #32]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	fa01 f303 	lsl.w	r3, r1, r3
 8007648:	431a      	orrs	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007670:	2302      	movs	r3, #2
 8007672:	e050      	b.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d013      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a16      	ldr	r2, [pc, #88]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a15      	ldr	r2, [pc, #84]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a13      	ldr	r2, [pc, #76]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d10c      	bne.n	8007704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40010000 	.word	0x40010000
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40014000 	.word	0x40014000

08007738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007750:	2302      	movs	r3, #2
 8007752:	e03d      	b.n	80077d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e03f      	b.n	8007896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fb ff0e 	bl	800364c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2224      	movs	r2, #36	; 0x24
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f829 	bl	80078a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800785c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695a      	ldr	r2, [r3, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800786c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800787c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a4:	b0c0      	sub	sp, #256	; 0x100
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	68d9      	ldr	r1, [r3, #12]
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	ea40 0301 	orr.w	r3, r0, r1
 80078c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	431a      	orrs	r2, r3
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078f8:	f021 010c 	bic.w	r1, r1, #12
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007906:	430b      	orrs	r3, r1
 8007908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791a:	6999      	ldr	r1, [r3, #24]
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	ea40 0301 	orr.w	r3, r0, r1
 8007926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b8f      	ldr	r3, [pc, #572]	; (8007b6c <UART_SetConfig+0x2cc>)
 8007930:	429a      	cmp	r2, r3
 8007932:	d005      	beq.n	8007940 <UART_SetConfig+0xa0>
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b8d      	ldr	r3, [pc, #564]	; (8007b70 <UART_SetConfig+0x2d0>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d104      	bne.n	800794a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007940:	f7fe fda8 	bl	8006494 <HAL_RCC_GetPCLK2Freq>
 8007944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007948:	e003      	b.n	8007952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800794a:	f7fe fd8f 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 800794e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795c:	f040 810c 	bne.w	8007b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007964:	2200      	movs	r2, #0
 8007966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800796a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800796e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	1891      	adds	r1, r2, r2
 8007978:	65b9      	str	r1, [r7, #88]	; 0x58
 800797a:	415b      	adcs	r3, r3
 800797c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800797e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007982:	4621      	mov	r1, r4
 8007984:	eb12 0801 	adds.w	r8, r2, r1
 8007988:	4629      	mov	r1, r5
 800798a:	eb43 0901 	adc.w	r9, r3, r1
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	f04f 0300 	mov.w	r3, #0
 8007996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800799a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800799e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079a2:	4690      	mov	r8, r2
 80079a4:	4699      	mov	r9, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	eb18 0303 	adds.w	r3, r8, r3
 80079ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079b0:	462b      	mov	r3, r5
 80079b2:	eb49 0303 	adc.w	r3, r9, r3
 80079b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079ce:	460b      	mov	r3, r1
 80079d0:	18db      	adds	r3, r3, r3
 80079d2:	653b      	str	r3, [r7, #80]	; 0x50
 80079d4:	4613      	mov	r3, r2
 80079d6:	eb42 0303 	adc.w	r3, r2, r3
 80079da:	657b      	str	r3, [r7, #84]	; 0x54
 80079dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079e4:	f7f9 f8b4 	bl	8000b50 <__aeabi_uldivmod>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4b61      	ldr	r3, [pc, #388]	; (8007b74 <UART_SetConfig+0x2d4>)
 80079ee:	fba3 2302 	umull	r2, r3, r3, r2
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	011c      	lsls	r4, r3, #4
 80079f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	1891      	adds	r1, r2, r2
 8007a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a10:	415b      	adcs	r3, r3
 8007a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a18:	4641      	mov	r1, r8
 8007a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a1e:	4649      	mov	r1, r9
 8007a20:	eb43 0b01 	adc.w	fp, r3, r1
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a38:	4692      	mov	sl, r2
 8007a3a:	469b      	mov	fp, r3
 8007a3c:	4643      	mov	r3, r8
 8007a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8007a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a46:	464b      	mov	r3, r9
 8007a48:	eb4b 0303 	adc.w	r3, fp, r3
 8007a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a64:	460b      	mov	r3, r1
 8007a66:	18db      	adds	r3, r3, r3
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	eb42 0303 	adc.w	r3, r2, r3
 8007a70:	647b      	str	r3, [r7, #68]	; 0x44
 8007a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a7a:	f7f9 f869 	bl	8000b50 <__aeabi_uldivmod>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	4b3b      	ldr	r3, [pc, #236]	; (8007b74 <UART_SetConfig+0x2d4>)
 8007a86:	fba3 2301 	umull	r2, r3, r3, r1
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	2264      	movs	r2, #100	; 0x64
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	1acb      	subs	r3, r1, r3
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a9a:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <UART_SetConfig+0x2d4>)
 8007a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007aa8:	441c      	add	r4, r3
 8007aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007abc:	4642      	mov	r2, r8
 8007abe:	464b      	mov	r3, r9
 8007ac0:	1891      	adds	r1, r2, r2
 8007ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ac4:	415b      	adcs	r3, r3
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007acc:	4641      	mov	r1, r8
 8007ace:	1851      	adds	r1, r2, r1
 8007ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	414b      	adcs	r3, r1
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	00cb      	lsls	r3, r1, #3
 8007ae8:	4651      	mov	r1, sl
 8007aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aee:	4651      	mov	r1, sl
 8007af0:	00ca      	lsls	r2, r1, #3
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	4642      	mov	r2, r8
 8007afa:	189b      	adds	r3, r3, r2
 8007afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b00:	464b      	mov	r3, r9
 8007b02:	460a      	mov	r2, r1
 8007b04:	eb42 0303 	adc.w	r3, r2, r3
 8007b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b20:	460b      	mov	r3, r1
 8007b22:	18db      	adds	r3, r3, r3
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b26:	4613      	mov	r3, r2
 8007b28:	eb42 0303 	adc.w	r3, r2, r3
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b36:	f7f9 f80b 	bl	8000b50 <__aeabi_uldivmod>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <UART_SetConfig+0x2d4>)
 8007b40:	fba3 1302 	umull	r1, r3, r3, r2
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	2164      	movs	r1, #100	; 0x64
 8007b48:	fb01 f303 	mul.w	r3, r1, r3
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	3332      	adds	r3, #50	; 0x32
 8007b52:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <UART_SetConfig+0x2d4>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	f003 0207 	and.w	r2, r3, #7
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4422      	add	r2, r4
 8007b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b68:	e105      	b.n	8007d76 <UART_SetConfig+0x4d6>
 8007b6a:	bf00      	nop
 8007b6c:	40011000 	.word	0x40011000
 8007b70:	40011400 	.word	0x40011400
 8007b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	1891      	adds	r1, r2, r2
 8007b90:	6239      	str	r1, [r7, #32]
 8007b92:	415b      	adcs	r3, r3
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
 8007b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	1854      	adds	r4, r2, r1
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	eb43 0501 	adc.w	r5, r3, r1
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	00eb      	lsls	r3, r5, #3
 8007bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bb2:	00e2      	lsls	r2, r4, #3
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	4643      	mov	r3, r8
 8007bba:	18e3      	adds	r3, r4, r3
 8007bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	eb45 0303 	adc.w	r3, r5, r3
 8007bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	f04f 0300 	mov.w	r3, #0
 8007be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007be6:	4629      	mov	r1, r5
 8007be8:	008b      	lsls	r3, r1, #2
 8007bea:	4621      	mov	r1, r4
 8007bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	008a      	lsls	r2, r1, #2
 8007bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bf8:	f7f8 ffaa 	bl	8000b50 <__aeabi_uldivmod>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4b60      	ldr	r3, [pc, #384]	; (8007d84 <UART_SetConfig+0x4e4>)
 8007c02:	fba3 2302 	umull	r2, r3, r3, r2
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	011c      	lsls	r4, r3, #4
 8007c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	1891      	adds	r1, r2, r2
 8007c22:	61b9      	str	r1, [r7, #24]
 8007c24:	415b      	adcs	r3, r3
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	1851      	adds	r1, r2, r1
 8007c30:	6139      	str	r1, [r7, #16]
 8007c32:	4649      	mov	r1, r9
 8007c34:	414b      	adcs	r3, r1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c44:	4659      	mov	r1, fp
 8007c46:	00cb      	lsls	r3, r1, #3
 8007c48:	4651      	mov	r1, sl
 8007c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c4e:	4651      	mov	r1, sl
 8007c50:	00ca      	lsls	r2, r1, #3
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	4642      	mov	r2, r8
 8007c5a:	189b      	adds	r3, r3, r2
 8007c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c60:	464b      	mov	r3, r9
 8007c62:	460a      	mov	r2, r1
 8007c64:	eb42 0303 	adc.w	r3, r2, r3
 8007c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c84:	4649      	mov	r1, r9
 8007c86:	008b      	lsls	r3, r1, #2
 8007c88:	4641      	mov	r1, r8
 8007c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c8e:	4641      	mov	r1, r8
 8007c90:	008a      	lsls	r2, r1, #2
 8007c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c96:	f7f8 ff5b 	bl	8000b50 <__aeabi_uldivmod>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <UART_SetConfig+0x4e4>)
 8007ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	2164      	movs	r1, #100	; 0x64
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	3332      	adds	r3, #50	; 0x32
 8007cb2:	4a34      	ldr	r2, [pc, #208]	; (8007d84 <UART_SetConfig+0x4e4>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cbe:	441c      	add	r4, r3
 8007cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8007cc8:	677a      	str	r2, [r7, #116]	; 0x74
 8007cca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cce:	4642      	mov	r2, r8
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	1891      	adds	r1, r2, r2
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	415b      	adcs	r3, r3
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cde:	4641      	mov	r1, r8
 8007ce0:	1851      	adds	r1, r2, r1
 8007ce2:	6039      	str	r1, [r7, #0]
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	414b      	adcs	r3, r1
 8007ce8:	607b      	str	r3, [r7, #4]
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cf6:	4659      	mov	r1, fp
 8007cf8:	00cb      	lsls	r3, r1, #3
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d00:	4651      	mov	r1, sl
 8007d02:	00ca      	lsls	r2, r1, #3
 8007d04:	4610      	mov	r0, r2
 8007d06:	4619      	mov	r1, r3
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	189b      	adds	r3, r3, r2
 8007d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d10:	464b      	mov	r3, r9
 8007d12:	460a      	mov	r2, r1
 8007d14:	eb42 0303 	adc.w	r3, r2, r3
 8007d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	663b      	str	r3, [r7, #96]	; 0x60
 8007d24:	667a      	str	r2, [r7, #100]	; 0x64
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d32:	4649      	mov	r1, r9
 8007d34:	008b      	lsls	r3, r1, #2
 8007d36:	4641      	mov	r1, r8
 8007d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	008a      	lsls	r2, r1, #2
 8007d40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d44:	f7f8 ff04 	bl	8000b50 <__aeabi_uldivmod>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <UART_SetConfig+0x4e4>)
 8007d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	2164      	movs	r1, #100	; 0x64
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	3332      	adds	r3, #50	; 0x32
 8007d60:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <UART_SetConfig+0x4e4>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	f003 020f 	and.w	r2, r3, #15
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4422      	add	r2, r4
 8007d74:	609a      	str	r2, [r3, #8]
}
 8007d76:	bf00      	nop
 8007d78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d82:	bf00      	nop
 8007d84:	51eb851f 	.word	0x51eb851f

08007d88 <arm_mat_trans_f32>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	8802      	ldrh	r2, [r0, #0]
 8007d8e:	884b      	ldrh	r3, [r1, #2]
 8007d90:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007d94:	684f      	ldr	r7, [r1, #4]
 8007d96:	8840      	ldrh	r0, [r0, #2]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	d14c      	bne.n	8007e38 <arm_mat_trans_f32+0xb0>
 8007d9e:	f8b1 e000 	ldrh.w	lr, [r1]
 8007da2:	4586      	cmp	lr, r0
 8007da4:	d148      	bne.n	8007e38 <arm_mat_trans_f32+0xb0>
 8007da6:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8007daa:	009c      	lsls	r4, r3, #2
 8007dac:	f00e 0e03 	and.w	lr, lr, #3
 8007db0:	fb08 f904 	mul.w	r9, r8, r4
 8007db4:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8007db8:	011d      	lsls	r5, r3, #4
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007dc0:	eb07 0a04 	add.w	sl, r7, r4
 8007dc4:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8007dc8:	9201      	str	r2, [sp, #4]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	d01d      	beq.n	8007e10 <arm_mat_trans_f32+0x88>
 8007dd4:	9900      	ldr	r1, [sp, #0]
 8007dd6:	f10c 0210 	add.w	r2, ip, #16
 8007dda:	4439      	add	r1, r7
 8007ddc:	4640      	mov	r0, r8
 8007dde:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8007de2:	601e      	str	r6, [r3, #0]
 8007de4:	ed52 7a03 	vldr	s15, [r2, #-12]
 8007de8:	191e      	adds	r6, r3, r4
 8007dea:	edc6 7a00 	vstr	s15, [r6]
 8007dee:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8007df2:	600e      	str	r6, [r1, #0]
 8007df4:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007df8:	190e      	adds	r6, r1, r4
 8007dfa:	3801      	subs	r0, #1
 8007dfc:	442b      	add	r3, r5
 8007dfe:	f102 0210 	add.w	r2, r2, #16
 8007e02:	edc6 7a00 	vstr	s15, [r6]
 8007e06:	4429      	add	r1, r5
 8007e08:	d1e9      	bne.n	8007dde <arm_mat_trans_f32+0x56>
 8007e0a:	44dc      	add	ip, fp
 8007e0c:	eb09 0307 	add.w	r3, r9, r7
 8007e10:	f1be 0f00 	cmp.w	lr, #0
 8007e14:	d009      	beq.n	8007e2a <arm_mat_trans_f32+0xa2>
 8007e16:	4672      	mov	r2, lr
 8007e18:	4661      	mov	r1, ip
 8007e1a:	f851 0b04 	ldr.w	r0, [r1], #4
 8007e1e:	6018      	str	r0, [r3, #0]
 8007e20:	3a01      	subs	r2, #1
 8007e22:	4423      	add	r3, r4
 8007e24:	d1f9      	bne.n	8007e1a <arm_mat_trans_f32+0x92>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	449c      	add	ip, r3
 8007e2a:	3704      	adds	r7, #4
 8007e2c:	4557      	cmp	r7, sl
 8007e2e:	d1cd      	bne.n	8007dcc <arm_mat_trans_f32+0x44>
 8007e30:	2000      	movs	r0, #0
 8007e32:	b003      	add	sp, #12
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e38:	f06f 0002 	mvn.w	r0, #2
 8007e3c:	e7f9      	b.n	8007e32 <arm_mat_trans_f32+0xaa>
 8007e3e:	bf00      	nop

08007e40 <arm_mat_sub_f32>:
 8007e40:	b4f0      	push	{r4, r5, r6, r7}
 8007e42:	e9d1 4700 	ldrd	r4, r7, [r1]
 8007e46:	6803      	ldr	r3, [r0, #0]
 8007e48:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007e4c:	6856      	ldr	r6, [r2, #4]
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	d15d      	bne.n	8007f0e <arm_mat_sub_f32+0xce>
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d15a      	bne.n	8007f0e <arm_mat_sub_f32+0xce>
 8007e58:	8803      	ldrh	r3, [r0, #0]
 8007e5a:	8844      	ldrh	r4, [r0, #2]
 8007e5c:	fb04 f403 	mul.w	r4, r4, r3
 8007e60:	08a5      	lsrs	r5, r4, #2
 8007e62:	d032      	beq.n	8007eca <arm_mat_sub_f32+0x8a>
 8007e64:	f10c 0110 	add.w	r1, ip, #16
 8007e68:	f107 0210 	add.w	r2, r7, #16
 8007e6c:	f106 0310 	add.w	r3, r6, #16
 8007e70:	4628      	mov	r0, r5
 8007e72:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007e76:	ed51 7a04 	vldr	s15, [r1, #-16]
 8007e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e7e:	3801      	subs	r0, #1
 8007e80:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007e84:	ed12 7a03 	vldr	s14, [r2, #-12]
 8007e88:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e90:	f101 0110 	add.w	r1, r1, #16
 8007e94:	ed43 7a03 	vstr	s15, [r3, #-12]
 8007e98:	ed12 7a02 	vldr	s14, [r2, #-8]
 8007e9c:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8007ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ea4:	f102 0210 	add.w	r2, r2, #16
 8007ea8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007eac:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8007eb0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eb8:	f103 0310 	add.w	r3, r3, #16
 8007ebc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8007ec0:	d1d7      	bne.n	8007e72 <arm_mat_sub_f32+0x32>
 8007ec2:	012b      	lsls	r3, r5, #4
 8007ec4:	449c      	add	ip, r3
 8007ec6:	441f      	add	r7, r3
 8007ec8:	441e      	add	r6, r3
 8007eca:	f014 0403 	ands.w	r4, r4, #3
 8007ece:	d01b      	beq.n	8007f08 <arm_mat_sub_f32+0xc8>
 8007ed0:	eddc 7a00 	vldr	s15, [ip]
 8007ed4:	ed97 7a00 	vldr	s14, [r7]
 8007ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007edc:	3c01      	subs	r4, #1
 8007ede:	edc6 7a00 	vstr	s15, [r6]
 8007ee2:	d011      	beq.n	8007f08 <arm_mat_sub_f32+0xc8>
 8007ee4:	eddc 7a01 	vldr	s15, [ip, #4]
 8007ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8007eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ef0:	2c01      	cmp	r4, #1
 8007ef2:	edc6 7a01 	vstr	s15, [r6, #4]
 8007ef6:	d007      	beq.n	8007f08 <arm_mat_sub_f32+0xc8>
 8007ef8:	eddc 7a02 	vldr	s15, [ip, #8]
 8007efc:	ed97 7a02 	vldr	s14, [r7, #8]
 8007f00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f04:	edc6 7a02 	vstr	s15, [r6, #8]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f0c:	4770      	bx	lr
 8007f0e:	f06f 0002 	mvn.w	r0, #2
 8007f12:	e7fa      	b.n	8007f0a <arm_mat_sub_f32+0xca>

08007f14 <arm_mat_mult_f32>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	8845      	ldrh	r5, [r0, #2]
 8007f1a:	880b      	ldrh	r3, [r1, #0]
 8007f1c:	8806      	ldrh	r6, [r0, #0]
 8007f1e:	6847      	ldr	r7, [r0, #4]
 8007f20:	6854      	ldr	r4, [r2, #4]
 8007f22:	6848      	ldr	r0, [r1, #4]
 8007f24:	b08b      	sub	sp, #44	; 0x2c
 8007f26:	42ab      	cmp	r3, r5
 8007f28:	9109      	str	r1, [sp, #36]	; 0x24
 8007f2a:	9604      	str	r6, [sp, #16]
 8007f2c:	8849      	ldrh	r1, [r1, #2]
 8007f2e:	f040 808a 	bne.w	8008046 <arm_mat_mult_f32+0x132>
 8007f32:	8815      	ldrh	r5, [r2, #0]
 8007f34:	42b5      	cmp	r5, r6
 8007f36:	f040 8086 	bne.w	8008046 <arm_mat_mult_f32+0x132>
 8007f3a:	8852      	ldrh	r2, [r2, #2]
 8007f3c:	428a      	cmp	r2, r1
 8007f3e:	f040 8082 	bne.w	8008046 <arm_mat_mult_f32+0x132>
 8007f42:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007f46:	1d01      	adds	r1, r0, #4
 8007f48:	0116      	lsls	r6, r2, #4
 8007f4a:	9108      	str	r1, [sp, #32]
 8007f4c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007f50:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007f54:	9101      	str	r1, [sp, #4]
 8007f56:	fb06 f108 	mul.w	r1, r6, r8
 8007f5a:	0095      	lsls	r5, r2, #2
 8007f5c:	9103      	str	r1, [sp, #12]
 8007f5e:	00d2      	lsls	r2, r2, #3
 8007f60:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007f64:	f003 0903 	and.w	r9, r3, #3
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	f107 0b10 	add.w	fp, r7, #16
 8007f6e:	eb04 0a05 	add.w	sl, r4, r5
 8007f72:	9107      	str	r1, [sp, #28]
 8007f74:	9202      	str	r2, [sp, #8]
 8007f76:	9306      	str	r3, [sp, #24]
 8007f78:	f1ab 0310 	sub.w	r3, fp, #16
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	9b07      	ldr	r3, [sp, #28]
 8007f80:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007f84:	eb03 0c0a 	add.w	ip, r3, sl
 8007f88:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008050 <arm_mat_mult_f32+0x13c>
 8007f8c:	f1b8 0f00 	cmp.w	r8, #0
 8007f90:	d053      	beq.n	800803a <arm_mat_mult_f32+0x126>
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	4644      	mov	r4, r8
 8007f96:	18c1      	adds	r1, r0, r3
 8007f98:	4602      	mov	r2, r0
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	ed92 6a00 	vldr	s12, [r2]
 8007fa0:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007fa4:	ed53 4a03 	vldr	s9, [r3, #-12]
 8007fa8:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007fac:	ed91 5a00 	vldr	s10, [r1]
 8007fb0:	ed53 5a01 	vldr	s11, [r3, #-4]
 8007fb4:	1957      	adds	r7, r2, r5
 8007fb6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007fba:	ed97 6a00 	vldr	s12, [r7]
 8007fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fc2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007fc6:	194f      	adds	r7, r1, r5
 8007fc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007fcc:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007fd0:	edd7 7a00 	vldr	s15, [r7]
 8007fd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fd8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007fdc:	3c01      	subs	r4, #1
 8007fde:	4432      	add	r2, r6
 8007fe0:	4431      	add	r1, r6
 8007fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fe6:	f103 0310 	add.w	r3, r3, #16
 8007fea:	d1d7      	bne.n	8007f9c <arm_mat_mult_f32+0x88>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	9a01      	ldr	r2, [sp, #4]
 8007ff0:	4418      	add	r0, r3
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	d00b      	beq.n	8008010 <arm_mat_mult_f32+0xfc>
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	edd0 6a00 	vldr	s13, [r0]
 8007ffe:	ecb2 7a01 	vldmia	r2!, {s14}
 8008002:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008006:	3b01      	subs	r3, #1
 8008008:	4428      	add	r0, r5
 800800a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800800e:	d1f4      	bne.n	8007ffa <arm_mat_mult_f32+0xe6>
 8008010:	ecec 7a01 	vstmia	ip!, {s15}
 8008014:	45d4      	cmp	ip, sl
 8008016:	4670      	mov	r0, lr
 8008018:	f10e 0e04 	add.w	lr, lr, #4
 800801c:	d1b4      	bne.n	8007f88 <arm_mat_mult_f32+0x74>
 800801e:	9a01      	ldr	r2, [sp, #4]
 8008020:	9b06      	ldr	r3, [sp, #24]
 8008022:	4611      	mov	r1, r2
 8008024:	4419      	add	r1, r3
 8008026:	449b      	add	fp, r3
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	9101      	str	r1, [sp, #4]
 800802c:	3b01      	subs	r3, #1
 800802e:	44aa      	add	sl, r5
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	d004      	beq.n	800803e <arm_mat_mult_f32+0x12a>
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	6858      	ldr	r0, [r3, #4]
 8008038:	e79e      	b.n	8007f78 <arm_mat_mult_f32+0x64>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	e7d9      	b.n	8007ff2 <arm_mat_mult_f32+0xde>
 800803e:	4618      	mov	r0, r3
 8008040:	b00b      	add	sp, #44	; 0x2c
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	f06f 0002 	mvn.w	r0, #2
 800804a:	b00b      	add	sp, #44	; 0x2c
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	00000000 	.word	0x00000000

08008054 <arm_mat_init_f32>:
 8008054:	8001      	strh	r1, [r0, #0]
 8008056:	8042      	strh	r2, [r0, #2]
 8008058:	6043      	str	r3, [r0, #4]
 800805a:	4770      	bx	lr

0800805c <arm_mat_add_f32>:
 800805c:	b4f0      	push	{r4, r5, r6, r7}
 800805e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8008062:	6803      	ldr	r3, [r0, #0]
 8008064:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008068:	6856      	ldr	r6, [r2, #4]
 800806a:	42a3      	cmp	r3, r4
 800806c:	d15d      	bne.n	800812a <arm_mat_add_f32+0xce>
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	4293      	cmp	r3, r2
 8008072:	d15a      	bne.n	800812a <arm_mat_add_f32+0xce>
 8008074:	8803      	ldrh	r3, [r0, #0]
 8008076:	8844      	ldrh	r4, [r0, #2]
 8008078:	fb04 f403 	mul.w	r4, r4, r3
 800807c:	08a5      	lsrs	r5, r4, #2
 800807e:	d032      	beq.n	80080e6 <arm_mat_add_f32+0x8a>
 8008080:	f10c 0110 	add.w	r1, ip, #16
 8008084:	f107 0210 	add.w	r2, r7, #16
 8008088:	f106 0310 	add.w	r3, r6, #16
 800808c:	4628      	mov	r0, r5
 800808e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8008092:	ed51 7a04 	vldr	s15, [r1, #-16]
 8008096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800809a:	3801      	subs	r0, #1
 800809c:	ed43 7a04 	vstr	s15, [r3, #-16]
 80080a0:	ed12 7a03 	vldr	s14, [r2, #-12]
 80080a4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80080a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080ac:	f101 0110 	add.w	r1, r1, #16
 80080b0:	ed43 7a03 	vstr	s15, [r3, #-12]
 80080b4:	ed12 7a02 	vldr	s14, [r2, #-8]
 80080b8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80080bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080c0:	f102 0210 	add.w	r2, r2, #16
 80080c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80080c8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80080cc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80080d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d4:	f103 0310 	add.w	r3, r3, #16
 80080d8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80080dc:	d1d7      	bne.n	800808e <arm_mat_add_f32+0x32>
 80080de:	012b      	lsls	r3, r5, #4
 80080e0:	449c      	add	ip, r3
 80080e2:	441f      	add	r7, r3
 80080e4:	441e      	add	r6, r3
 80080e6:	f014 0403 	ands.w	r4, r4, #3
 80080ea:	d01b      	beq.n	8008124 <arm_mat_add_f32+0xc8>
 80080ec:	edd7 7a00 	vldr	s15, [r7]
 80080f0:	ed9c 7a00 	vldr	s14, [ip]
 80080f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080f8:	3c01      	subs	r4, #1
 80080fa:	edc6 7a00 	vstr	s15, [r6]
 80080fe:	d011      	beq.n	8008124 <arm_mat_add_f32+0xc8>
 8008100:	eddc 7a01 	vldr	s15, [ip, #4]
 8008104:	ed97 7a01 	vldr	s14, [r7, #4]
 8008108:	ee77 7a87 	vadd.f32	s15, s15, s14
 800810c:	2c01      	cmp	r4, #1
 800810e:	edc6 7a01 	vstr	s15, [r6, #4]
 8008112:	d007      	beq.n	8008124 <arm_mat_add_f32+0xc8>
 8008114:	eddc 7a02 	vldr	s15, [ip, #8]
 8008118:	ed97 7a02 	vldr	s14, [r7, #8]
 800811c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008120:	edc6 7a02 	vstr	s15, [r6, #8]
 8008124:	2000      	movs	r0, #0
 8008126:	bcf0      	pop	{r4, r5, r6, r7}
 8008128:	4770      	bx	lr
 800812a:	f06f 0002 	mvn.w	r0, #2
 800812e:	e7fa      	b.n	8008126 <arm_mat_add_f32+0xca>

08008130 <__errno>:
 8008130:	4b01      	ldr	r3, [pc, #4]	; (8008138 <__errno+0x8>)
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	200000a8 	.word	0x200000a8

0800813c <__libc_init_array>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4d0d      	ldr	r5, [pc, #52]	; (8008174 <__libc_init_array+0x38>)
 8008140:	4c0d      	ldr	r4, [pc, #52]	; (8008178 <__libc_init_array+0x3c>)
 8008142:	1b64      	subs	r4, r4, r5
 8008144:	10a4      	asrs	r4, r4, #2
 8008146:	2600      	movs	r6, #0
 8008148:	42a6      	cmp	r6, r4
 800814a:	d109      	bne.n	8008160 <__libc_init_array+0x24>
 800814c:	4d0b      	ldr	r5, [pc, #44]	; (800817c <__libc_init_array+0x40>)
 800814e:	4c0c      	ldr	r4, [pc, #48]	; (8008180 <__libc_init_array+0x44>)
 8008150:	f000 ff68 	bl	8009024 <_init>
 8008154:	1b64      	subs	r4, r4, r5
 8008156:	10a4      	asrs	r4, r4, #2
 8008158:	2600      	movs	r6, #0
 800815a:	42a6      	cmp	r6, r4
 800815c:	d105      	bne.n	800816a <__libc_init_array+0x2e>
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	f855 3b04 	ldr.w	r3, [r5], #4
 8008164:	4798      	blx	r3
 8008166:	3601      	adds	r6, #1
 8008168:	e7ee      	b.n	8008148 <__libc_init_array+0xc>
 800816a:	f855 3b04 	ldr.w	r3, [r5], #4
 800816e:	4798      	blx	r3
 8008170:	3601      	adds	r6, #1
 8008172:	e7f2      	b.n	800815a <__libc_init_array+0x1e>
 8008174:	08009090 	.word	0x08009090
 8008178:	08009090 	.word	0x08009090
 800817c:	08009090 	.word	0x08009090
 8008180:	08009094 	.word	0x08009094

08008184 <memset>:
 8008184:	4402      	add	r2, r0
 8008186:	4603      	mov	r3, r0
 8008188:	4293      	cmp	r3, r2
 800818a:	d100      	bne.n	800818e <memset+0xa>
 800818c:	4770      	bx	lr
 800818e:	f803 1b01 	strb.w	r1, [r3], #1
 8008192:	e7f9      	b.n	8008188 <memset+0x4>

08008194 <pow>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	ed2d 8b02 	vpush	{d8}
 800819a:	eeb0 8a40 	vmov.f32	s16, s0
 800819e:	eef0 8a60 	vmov.f32	s17, s1
 80081a2:	ec55 4b11 	vmov	r4, r5, d1
 80081a6:	f000 f893 	bl	80082d0 <__ieee754_pow>
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	ec57 6b10 	vmov	r6, r7, d0
 80081b6:	f7f8 fc65 	bl	8000a84 <__aeabi_dcmpun>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d13b      	bne.n	8008236 <pow+0xa2>
 80081be:	ec51 0b18 	vmov	r0, r1, d8
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	f7f8 fc2b 	bl	8000a20 <__aeabi_dcmpeq>
 80081ca:	b1b8      	cbz	r0, 80081fc <pow+0x68>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	4620      	mov	r0, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 fc24 	bl	8000a20 <__aeabi_dcmpeq>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d146      	bne.n	800826a <pow+0xd6>
 80081dc:	ec45 4b10 	vmov	d0, r4, r5
 80081e0:	f000 fe8f 	bl	8008f02 <finite>
 80081e4:	b338      	cbz	r0, 8008236 <pow+0xa2>
 80081e6:	2200      	movs	r2, #0
 80081e8:	2300      	movs	r3, #0
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 fc21 	bl	8000a34 <__aeabi_dcmplt>
 80081f2:	b300      	cbz	r0, 8008236 <pow+0xa2>
 80081f4:	f7ff ff9c 	bl	8008130 <__errno>
 80081f8:	2322      	movs	r3, #34	; 0x22
 80081fa:	e01b      	b.n	8008234 <pow+0xa0>
 80081fc:	ec47 6b10 	vmov	d0, r6, r7
 8008200:	f000 fe7f 	bl	8008f02 <finite>
 8008204:	b9e0      	cbnz	r0, 8008240 <pow+0xac>
 8008206:	eeb0 0a48 	vmov.f32	s0, s16
 800820a:	eef0 0a68 	vmov.f32	s1, s17
 800820e:	f000 fe78 	bl	8008f02 <finite>
 8008212:	b1a8      	cbz	r0, 8008240 <pow+0xac>
 8008214:	ec45 4b10 	vmov	d0, r4, r5
 8008218:	f000 fe73 	bl	8008f02 <finite>
 800821c:	b180      	cbz	r0, 8008240 <pow+0xac>
 800821e:	4632      	mov	r2, r6
 8008220:	463b      	mov	r3, r7
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 fc2d 	bl	8000a84 <__aeabi_dcmpun>
 800822a:	2800      	cmp	r0, #0
 800822c:	d0e2      	beq.n	80081f4 <pow+0x60>
 800822e:	f7ff ff7f 	bl	8008130 <__errno>
 8008232:	2321      	movs	r3, #33	; 0x21
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	ecbd 8b02 	vpop	{d8}
 800823a:	ec47 6b10 	vmov	d0, r6, r7
 800823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fbea 	bl	8000a20 <__aeabi_dcmpeq>
 800824c:	2800      	cmp	r0, #0
 800824e:	d0f2      	beq.n	8008236 <pow+0xa2>
 8008250:	eeb0 0a48 	vmov.f32	s0, s16
 8008254:	eef0 0a68 	vmov.f32	s1, s17
 8008258:	f000 fe53 	bl	8008f02 <finite>
 800825c:	2800      	cmp	r0, #0
 800825e:	d0ea      	beq.n	8008236 <pow+0xa2>
 8008260:	ec45 4b10 	vmov	d0, r4, r5
 8008264:	f000 fe4d 	bl	8008f02 <finite>
 8008268:	e7c3      	b.n	80081f2 <pow+0x5e>
 800826a:	4f01      	ldr	r7, [pc, #4]	; (8008270 <pow+0xdc>)
 800826c:	2600      	movs	r6, #0
 800826e:	e7e2      	b.n	8008236 <pow+0xa2>
 8008270:	3ff00000 	.word	0x3ff00000

08008274 <sqrt>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	ed2d 8b02 	vpush	{d8}
 800827a:	ec55 4b10 	vmov	r4, r5, d0
 800827e:	f000 fd55 	bl	8008d2c <__ieee754_sqrt>
 8008282:	4622      	mov	r2, r4
 8008284:	462b      	mov	r3, r5
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	eeb0 8a40 	vmov.f32	s16, s0
 800828e:	eef0 8a60 	vmov.f32	s17, s1
 8008292:	f7f8 fbf7 	bl	8000a84 <__aeabi_dcmpun>
 8008296:	b990      	cbnz	r0, 80082be <sqrt+0x4a>
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4620      	mov	r0, r4
 800829e:	4629      	mov	r1, r5
 80082a0:	f7f8 fbc8 	bl	8000a34 <__aeabi_dcmplt>
 80082a4:	b158      	cbz	r0, 80082be <sqrt+0x4a>
 80082a6:	f7ff ff43 	bl	8008130 <__errno>
 80082aa:	2321      	movs	r3, #33	; 0x21
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4610      	mov	r0, r2
 80082b4:	4619      	mov	r1, r3
 80082b6:	f7f8 fa75 	bl	80007a4 <__aeabi_ddiv>
 80082ba:	ec41 0b18 	vmov	d8, r0, r1
 80082be:	eeb0 0a48 	vmov.f32	s0, s16
 80082c2:	eef0 0a68 	vmov.f32	s1, s17
 80082c6:	ecbd 8b02 	vpop	{d8}
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	0000      	movs	r0, r0
	...

080082d0 <__ieee754_pow>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	ed2d 8b06 	vpush	{d8-d10}
 80082d8:	b089      	sub	sp, #36	; 0x24
 80082da:	ed8d 1b00 	vstr	d1, [sp]
 80082de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80082e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80082e6:	ea58 0102 	orrs.w	r1, r8, r2
 80082ea:	ec57 6b10 	vmov	r6, r7, d0
 80082ee:	d115      	bne.n	800831c <__ieee754_pow+0x4c>
 80082f0:	19b3      	adds	r3, r6, r6
 80082f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80082f6:	4152      	adcs	r2, r2
 80082f8:	4299      	cmp	r1, r3
 80082fa:	4b89      	ldr	r3, [pc, #548]	; (8008520 <__ieee754_pow+0x250>)
 80082fc:	4193      	sbcs	r3, r2
 80082fe:	f080 84d2 	bcs.w	8008ca6 <__ieee754_pow+0x9d6>
 8008302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f7 ff6b 	bl	80001e4 <__adddf3>
 800830e:	ec41 0b10 	vmov	d0, r0, r1
 8008312:	b009      	add	sp, #36	; 0x24
 8008314:	ecbd 8b06 	vpop	{d8-d10}
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	4b81      	ldr	r3, [pc, #516]	; (8008524 <__ieee754_pow+0x254>)
 800831e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008322:	429c      	cmp	r4, r3
 8008324:	ee10 aa10 	vmov	sl, s0
 8008328:	463d      	mov	r5, r7
 800832a:	dc06      	bgt.n	800833a <__ieee754_pow+0x6a>
 800832c:	d101      	bne.n	8008332 <__ieee754_pow+0x62>
 800832e:	2e00      	cmp	r6, #0
 8008330:	d1e7      	bne.n	8008302 <__ieee754_pow+0x32>
 8008332:	4598      	cmp	r8, r3
 8008334:	dc01      	bgt.n	800833a <__ieee754_pow+0x6a>
 8008336:	d10f      	bne.n	8008358 <__ieee754_pow+0x88>
 8008338:	b172      	cbz	r2, 8008358 <__ieee754_pow+0x88>
 800833a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800833e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008342:	ea55 050a 	orrs.w	r5, r5, sl
 8008346:	d1dc      	bne.n	8008302 <__ieee754_pow+0x32>
 8008348:	e9dd 3200 	ldrd	r3, r2, [sp]
 800834c:	18db      	adds	r3, r3, r3
 800834e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008352:	4152      	adcs	r2, r2
 8008354:	429d      	cmp	r5, r3
 8008356:	e7d0      	b.n	80082fa <__ieee754_pow+0x2a>
 8008358:	2d00      	cmp	r5, #0
 800835a:	da3b      	bge.n	80083d4 <__ieee754_pow+0x104>
 800835c:	4b72      	ldr	r3, [pc, #456]	; (8008528 <__ieee754_pow+0x258>)
 800835e:	4598      	cmp	r8, r3
 8008360:	dc51      	bgt.n	8008406 <__ieee754_pow+0x136>
 8008362:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008366:	4598      	cmp	r8, r3
 8008368:	f340 84ac 	ble.w	8008cc4 <__ieee754_pow+0x9f4>
 800836c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008374:	2b14      	cmp	r3, #20
 8008376:	dd0f      	ble.n	8008398 <__ieee754_pow+0xc8>
 8008378:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800837c:	fa22 f103 	lsr.w	r1, r2, r3
 8008380:	fa01 f303 	lsl.w	r3, r1, r3
 8008384:	4293      	cmp	r3, r2
 8008386:	f040 849d 	bne.w	8008cc4 <__ieee754_pow+0x9f4>
 800838a:	f001 0101 	and.w	r1, r1, #1
 800838e:	f1c1 0302 	rsb	r3, r1, #2
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	b182      	cbz	r2, 80083b8 <__ieee754_pow+0xe8>
 8008396:	e05f      	b.n	8008458 <__ieee754_pow+0x188>
 8008398:	2a00      	cmp	r2, #0
 800839a:	d15b      	bne.n	8008454 <__ieee754_pow+0x184>
 800839c:	f1c3 0314 	rsb	r3, r3, #20
 80083a0:	fa48 f103 	asr.w	r1, r8, r3
 80083a4:	fa01 f303 	lsl.w	r3, r1, r3
 80083a8:	4543      	cmp	r3, r8
 80083aa:	f040 8488 	bne.w	8008cbe <__ieee754_pow+0x9ee>
 80083ae:	f001 0101 	and.w	r1, r1, #1
 80083b2:	f1c1 0302 	rsb	r3, r1, #2
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	4b5c      	ldr	r3, [pc, #368]	; (800852c <__ieee754_pow+0x25c>)
 80083ba:	4598      	cmp	r8, r3
 80083bc:	d132      	bne.n	8008424 <__ieee754_pow+0x154>
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	f280 8478 	bge.w	8008cb6 <__ieee754_pow+0x9e6>
 80083c6:	4959      	ldr	r1, [pc, #356]	; (800852c <__ieee754_pow+0x25c>)
 80083c8:	4632      	mov	r2, r6
 80083ca:	463b      	mov	r3, r7
 80083cc:	2000      	movs	r0, #0
 80083ce:	f7f8 f9e9 	bl	80007a4 <__aeabi_ddiv>
 80083d2:	e79c      	b.n	800830e <__ieee754_pow+0x3e>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	2a00      	cmp	r2, #0
 80083da:	d13d      	bne.n	8008458 <__ieee754_pow+0x188>
 80083dc:	4b51      	ldr	r3, [pc, #324]	; (8008524 <__ieee754_pow+0x254>)
 80083de:	4598      	cmp	r8, r3
 80083e0:	d1ea      	bne.n	80083b8 <__ieee754_pow+0xe8>
 80083e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80083e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80083ea:	ea53 030a 	orrs.w	r3, r3, sl
 80083ee:	f000 845a 	beq.w	8008ca6 <__ieee754_pow+0x9d6>
 80083f2:	4b4f      	ldr	r3, [pc, #316]	; (8008530 <__ieee754_pow+0x260>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	dd08      	ble.n	800840a <__ieee754_pow+0x13a>
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	f2c0 8457 	blt.w	8008cae <__ieee754_pow+0x9de>
 8008400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008404:	e783      	b.n	800830e <__ieee754_pow+0x3e>
 8008406:	2302      	movs	r3, #2
 8008408:	e7e5      	b.n	80083d6 <__ieee754_pow+0x106>
 800840a:	f1b9 0f00 	cmp.w	r9, #0
 800840e:	f04f 0000 	mov.w	r0, #0
 8008412:	f04f 0100 	mov.w	r1, #0
 8008416:	f6bf af7a 	bge.w	800830e <__ieee754_pow+0x3e>
 800841a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800841e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008422:	e774      	b.n	800830e <__ieee754_pow+0x3e>
 8008424:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008428:	d106      	bne.n	8008438 <__ieee754_pow+0x168>
 800842a:	4632      	mov	r2, r6
 800842c:	463b      	mov	r3, r7
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f8 f88d 	bl	8000550 <__aeabi_dmul>
 8008436:	e76a      	b.n	800830e <__ieee754_pow+0x3e>
 8008438:	4b3e      	ldr	r3, [pc, #248]	; (8008534 <__ieee754_pow+0x264>)
 800843a:	4599      	cmp	r9, r3
 800843c:	d10c      	bne.n	8008458 <__ieee754_pow+0x188>
 800843e:	2d00      	cmp	r5, #0
 8008440:	db0a      	blt.n	8008458 <__ieee754_pow+0x188>
 8008442:	ec47 6b10 	vmov	d0, r6, r7
 8008446:	b009      	add	sp, #36	; 0x24
 8008448:	ecbd 8b06 	vpop	{d8-d10}
 800844c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	f000 bc6c 	b.w	8008d2c <__ieee754_sqrt>
 8008454:	2300      	movs	r3, #0
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	ec47 6b10 	vmov	d0, r6, r7
 800845c:	f000 fd48 	bl	8008ef0 <fabs>
 8008460:	ec51 0b10 	vmov	r0, r1, d0
 8008464:	f1ba 0f00 	cmp.w	sl, #0
 8008468:	d129      	bne.n	80084be <__ieee754_pow+0x1ee>
 800846a:	b124      	cbz	r4, 8008476 <__ieee754_pow+0x1a6>
 800846c:	4b2f      	ldr	r3, [pc, #188]	; (800852c <__ieee754_pow+0x25c>)
 800846e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008472:	429a      	cmp	r2, r3
 8008474:	d123      	bne.n	80084be <__ieee754_pow+0x1ee>
 8008476:	f1b9 0f00 	cmp.w	r9, #0
 800847a:	da05      	bge.n	8008488 <__ieee754_pow+0x1b8>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	2000      	movs	r0, #0
 8008482:	492a      	ldr	r1, [pc, #168]	; (800852c <__ieee754_pow+0x25c>)
 8008484:	f7f8 f98e 	bl	80007a4 <__aeabi_ddiv>
 8008488:	2d00      	cmp	r5, #0
 800848a:	f6bf af40 	bge.w	800830e <__ieee754_pow+0x3e>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008494:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008498:	4323      	orrs	r3, r4
 800849a:	d108      	bne.n	80084ae <__ieee754_pow+0x1de>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	f7f7 fe9c 	bl	80001e0 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	e78f      	b.n	80083ce <__ieee754_pow+0xfe>
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	f47f af2c 	bne.w	800830e <__ieee754_pow+0x3e>
 80084b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ba:	4619      	mov	r1, r3
 80084bc:	e727      	b.n	800830e <__ieee754_pow+0x3e>
 80084be:	0feb      	lsrs	r3, r5, #31
 80084c0:	3b01      	subs	r3, #1
 80084c2:	9306      	str	r3, [sp, #24]
 80084c4:	9a06      	ldr	r2, [sp, #24]
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d102      	bne.n	80084d2 <__ieee754_pow+0x202>
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	e7e6      	b.n	80084a0 <__ieee754_pow+0x1d0>
 80084d2:	4b19      	ldr	r3, [pc, #100]	; (8008538 <__ieee754_pow+0x268>)
 80084d4:	4598      	cmp	r8, r3
 80084d6:	f340 80fb 	ble.w	80086d0 <__ieee754_pow+0x400>
 80084da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80084de:	4598      	cmp	r8, r3
 80084e0:	4b13      	ldr	r3, [pc, #76]	; (8008530 <__ieee754_pow+0x260>)
 80084e2:	dd0c      	ble.n	80084fe <__ieee754_pow+0x22e>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	dc0f      	bgt.n	8008508 <__ieee754_pow+0x238>
 80084e8:	f1b9 0f00 	cmp.w	r9, #0
 80084ec:	da0f      	bge.n	800850e <__ieee754_pow+0x23e>
 80084ee:	2000      	movs	r0, #0
 80084f0:	b009      	add	sp, #36	; 0x24
 80084f2:	ecbd 8b06 	vpop	{d8-d10}
 80084f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f000 bcf0 	b.w	8008ede <__math_oflow>
 80084fe:	429c      	cmp	r4, r3
 8008500:	dbf2      	blt.n	80084e8 <__ieee754_pow+0x218>
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <__ieee754_pow+0x25c>)
 8008504:	429c      	cmp	r4, r3
 8008506:	dd19      	ble.n	800853c <__ieee754_pow+0x26c>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	dcef      	bgt.n	80084ee <__ieee754_pow+0x21e>
 800850e:	2000      	movs	r0, #0
 8008510:	b009      	add	sp, #36	; 0x24
 8008512:	ecbd 8b06 	vpop	{d8-d10}
 8008516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f000 bcd7 	b.w	8008ecc <__math_uflow>
 800851e:	bf00      	nop
 8008520:	fff00000 	.word	0xfff00000
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	433fffff 	.word	0x433fffff
 800852c:	3ff00000 	.word	0x3ff00000
 8008530:	3fefffff 	.word	0x3fefffff
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	41e00000 	.word	0x41e00000
 800853c:	4b60      	ldr	r3, [pc, #384]	; (80086c0 <__ieee754_pow+0x3f0>)
 800853e:	2200      	movs	r2, #0
 8008540:	f7f7 fe4e 	bl	80001e0 <__aeabi_dsub>
 8008544:	a354      	add	r3, pc, #336	; (adr r3, 8008698 <__ieee754_pow+0x3c8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	4604      	mov	r4, r0
 800854c:	460d      	mov	r5, r1
 800854e:	f7f7 ffff 	bl	8000550 <__aeabi_dmul>
 8008552:	a353      	add	r3, pc, #332	; (adr r3, 80086a0 <__ieee754_pow+0x3d0>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	4620      	mov	r0, r4
 800855e:	4629      	mov	r1, r5
 8008560:	f7f7 fff6 	bl	8000550 <__aeabi_dmul>
 8008564:	4b57      	ldr	r3, [pc, #348]	; (80086c4 <__ieee754_pow+0x3f4>)
 8008566:	4682      	mov	sl, r0
 8008568:	468b      	mov	fp, r1
 800856a:	2200      	movs	r2, #0
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 ffee 	bl	8000550 <__aeabi_dmul>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	a14b      	add	r1, pc, #300	; (adr r1, 80086a8 <__ieee754_pow+0x3d8>)
 800857a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857e:	f7f7 fe2f 	bl	80001e0 <__aeabi_dsub>
 8008582:	4622      	mov	r2, r4
 8008584:	462b      	mov	r3, r5
 8008586:	f7f7 ffe3 	bl	8000550 <__aeabi_dmul>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	2000      	movs	r0, #0
 8008590:	494d      	ldr	r1, [pc, #308]	; (80086c8 <__ieee754_pow+0x3f8>)
 8008592:	f7f7 fe25 	bl	80001e0 <__aeabi_dsub>
 8008596:	4622      	mov	r2, r4
 8008598:	4680      	mov	r8, r0
 800859a:	4689      	mov	r9, r1
 800859c:	462b      	mov	r3, r5
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f7 ffd5 	bl	8000550 <__aeabi_dmul>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f7 ffcf 	bl	8000550 <__aeabi_dmul>
 80085b2:	a33f      	add	r3, pc, #252	; (adr r3, 80086b0 <__ieee754_pow+0x3e0>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 ffca 	bl	8000550 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4650      	mov	r0, sl
 80085c2:	4659      	mov	r1, fp
 80085c4:	f7f7 fe0c 	bl	80001e0 <__aeabi_dsub>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4680      	mov	r8, r0
 80085ce:	4689      	mov	r9, r1
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f7 fe06 	bl	80001e4 <__adddf3>
 80085d8:	2000      	movs	r0, #0
 80085da:	4632      	mov	r2, r6
 80085dc:	463b      	mov	r3, r7
 80085de:	4604      	mov	r4, r0
 80085e0:	460d      	mov	r5, r1
 80085e2:	f7f7 fdfd 	bl	80001e0 <__aeabi_dsub>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f7 fdf7 	bl	80001e0 <__aeabi_dsub>
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	9a06      	ldr	r2, [sp, #24]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	4313      	orrs	r3, r2
 80085fa:	4682      	mov	sl, r0
 80085fc:	468b      	mov	fp, r1
 80085fe:	f040 81e7 	bne.w	80089d0 <__ieee754_pow+0x700>
 8008602:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80086b8 <__ieee754_pow+0x3e8>
 8008606:	eeb0 8a47 	vmov.f32	s16, s14
 800860a:	eef0 8a67 	vmov.f32	s17, s15
 800860e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008612:	2600      	movs	r6, #0
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800861c:	f7f7 fde0 	bl	80001e0 <__aeabi_dsub>
 8008620:	4622      	mov	r2, r4
 8008622:	462b      	mov	r3, r5
 8008624:	f7f7 ff94 	bl	8000550 <__aeabi_dmul>
 8008628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	f7f7 ff8c 	bl	8000550 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	f7f7 fdd0 	bl	80001e4 <__adddf3>
 8008644:	4632      	mov	r2, r6
 8008646:	463b      	mov	r3, r7
 8008648:	4680      	mov	r8, r0
 800864a:	4689      	mov	r9, r1
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	f7f7 ff7e 	bl	8000550 <__aeabi_dmul>
 8008654:	460b      	mov	r3, r1
 8008656:	4604      	mov	r4, r0
 8008658:	460d      	mov	r5, r1
 800865a:	4602      	mov	r2, r0
 800865c:	4649      	mov	r1, r9
 800865e:	4640      	mov	r0, r8
 8008660:	f7f7 fdc0 	bl	80001e4 <__adddf3>
 8008664:	4b19      	ldr	r3, [pc, #100]	; (80086cc <__ieee754_pow+0x3fc>)
 8008666:	4299      	cmp	r1, r3
 8008668:	ec45 4b19 	vmov	d9, r4, r5
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	468b      	mov	fp, r1
 8008672:	f340 82f1 	ble.w	8008c58 <__ieee754_pow+0x988>
 8008676:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800867a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800867e:	4303      	orrs	r3, r0
 8008680:	f000 81e4 	beq.w	8008a4c <__ieee754_pow+0x77c>
 8008684:	ec51 0b18 	vmov	r0, r1, d8
 8008688:	2200      	movs	r2, #0
 800868a:	2300      	movs	r3, #0
 800868c:	f7f8 f9d2 	bl	8000a34 <__aeabi_dcmplt>
 8008690:	3800      	subs	r0, #0
 8008692:	bf18      	it	ne
 8008694:	2001      	movne	r0, #1
 8008696:	e72b      	b.n	80084f0 <__ieee754_pow+0x220>
 8008698:	60000000 	.word	0x60000000
 800869c:	3ff71547 	.word	0x3ff71547
 80086a0:	f85ddf44 	.word	0xf85ddf44
 80086a4:	3e54ae0b 	.word	0x3e54ae0b
 80086a8:	55555555 	.word	0x55555555
 80086ac:	3fd55555 	.word	0x3fd55555
 80086b0:	652b82fe 	.word	0x652b82fe
 80086b4:	3ff71547 	.word	0x3ff71547
 80086b8:	00000000 	.word	0x00000000
 80086bc:	bff00000 	.word	0xbff00000
 80086c0:	3ff00000 	.word	0x3ff00000
 80086c4:	3fd00000 	.word	0x3fd00000
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	408fffff 	.word	0x408fffff
 80086d0:	4bd5      	ldr	r3, [pc, #852]	; (8008a28 <__ieee754_pow+0x758>)
 80086d2:	402b      	ands	r3, r5
 80086d4:	2200      	movs	r2, #0
 80086d6:	b92b      	cbnz	r3, 80086e4 <__ieee754_pow+0x414>
 80086d8:	4bd4      	ldr	r3, [pc, #848]	; (8008a2c <__ieee754_pow+0x75c>)
 80086da:	f7f7 ff39 	bl	8000550 <__aeabi_dmul>
 80086de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80086e2:	460c      	mov	r4, r1
 80086e4:	1523      	asrs	r3, r4, #20
 80086e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086ea:	4413      	add	r3, r2
 80086ec:	9305      	str	r3, [sp, #20]
 80086ee:	4bd0      	ldr	r3, [pc, #832]	; (8008a30 <__ieee754_pow+0x760>)
 80086f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80086f8:	429c      	cmp	r4, r3
 80086fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086fe:	dd08      	ble.n	8008712 <__ieee754_pow+0x442>
 8008700:	4bcc      	ldr	r3, [pc, #816]	; (8008a34 <__ieee754_pow+0x764>)
 8008702:	429c      	cmp	r4, r3
 8008704:	f340 8162 	ble.w	80089cc <__ieee754_pow+0x6fc>
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	3301      	adds	r3, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008712:	2400      	movs	r4, #0
 8008714:	00e3      	lsls	r3, r4, #3
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	4bc7      	ldr	r3, [pc, #796]	; (8008a38 <__ieee754_pow+0x768>)
 800871a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800871e:	ed93 7b00 	vldr	d7, [r3]
 8008722:	4629      	mov	r1, r5
 8008724:	ec53 2b17 	vmov	r2, r3, d7
 8008728:	eeb0 9a47 	vmov.f32	s18, s14
 800872c:	eef0 9a67 	vmov.f32	s19, s15
 8008730:	4682      	mov	sl, r0
 8008732:	f7f7 fd55 	bl	80001e0 <__aeabi_dsub>
 8008736:	4652      	mov	r2, sl
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	462b      	mov	r3, r5
 800873e:	ec51 0b19 	vmov	r0, r1, d9
 8008742:	f7f7 fd4f 	bl	80001e4 <__adddf3>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	2000      	movs	r0, #0
 800874c:	49bb      	ldr	r1, [pc, #748]	; (8008a3c <__ieee754_pow+0x76c>)
 800874e:	f7f8 f829 	bl	80007a4 <__aeabi_ddiv>
 8008752:	ec41 0b1a 	vmov	d10, r0, r1
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f7 fef7 	bl	8000550 <__aeabi_dmul>
 8008762:	2300      	movs	r3, #0
 8008764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800876e:	46ab      	mov	fp, r5
 8008770:	106d      	asrs	r5, r5, #1
 8008772:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008776:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800877a:	ec41 0b18 	vmov	d8, r0, r1
 800877e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008782:	2200      	movs	r2, #0
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	f7f7 fee0 	bl	8000550 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f7 fd22 	bl	80001e0 <__aeabi_dsub>
 800879c:	ec53 2b19 	vmov	r2, r3, d9
 80087a0:	4606      	mov	r6, r0
 80087a2:	460f      	mov	r7, r1
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 fd1a 	bl	80001e0 <__aeabi_dsub>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4650      	mov	r0, sl
 80087b2:	4659      	mov	r1, fp
 80087b4:	f7f7 fd14 	bl	80001e0 <__aeabi_dsub>
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	f7f7 fec8 	bl	8000550 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f7 fd0a 	bl	80001e0 <__aeabi_dsub>
 80087cc:	ec53 2b1a 	vmov	r2, r3, d10
 80087d0:	f7f7 febe 	bl	8000550 <__aeabi_dmul>
 80087d4:	ec53 2b18 	vmov	r2, r3, d8
 80087d8:	ec41 0b19 	vmov	d9, r0, r1
 80087dc:	ec51 0b18 	vmov	r0, r1, d8
 80087e0:	f7f7 feb6 	bl	8000550 <__aeabi_dmul>
 80087e4:	a37c      	add	r3, pc, #496	; (adr r3, 80089d8 <__ieee754_pow+0x708>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	f7f7 feaf 	bl	8000550 <__aeabi_dmul>
 80087f2:	a37b      	add	r3, pc, #492	; (adr r3, 80089e0 <__ieee754_pow+0x710>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f7 fcf4 	bl	80001e4 <__adddf3>
 80087fc:	4622      	mov	r2, r4
 80087fe:	462b      	mov	r3, r5
 8008800:	f7f7 fea6 	bl	8000550 <__aeabi_dmul>
 8008804:	a378      	add	r3, pc, #480	; (adr r3, 80089e8 <__ieee754_pow+0x718>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f7f7 fceb 	bl	80001e4 <__adddf3>
 800880e:	4622      	mov	r2, r4
 8008810:	462b      	mov	r3, r5
 8008812:	f7f7 fe9d 	bl	8000550 <__aeabi_dmul>
 8008816:	a376      	add	r3, pc, #472	; (adr r3, 80089f0 <__ieee754_pow+0x720>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	f7f7 fce2 	bl	80001e4 <__adddf3>
 8008820:	4622      	mov	r2, r4
 8008822:	462b      	mov	r3, r5
 8008824:	f7f7 fe94 	bl	8000550 <__aeabi_dmul>
 8008828:	a373      	add	r3, pc, #460	; (adr r3, 80089f8 <__ieee754_pow+0x728>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 fcd9 	bl	80001e4 <__adddf3>
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f7f7 fe8b 	bl	8000550 <__aeabi_dmul>
 800883a:	a371      	add	r3, pc, #452	; (adr r3, 8008a00 <__ieee754_pow+0x730>)
 800883c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008840:	f7f7 fcd0 	bl	80001e4 <__adddf3>
 8008844:	4622      	mov	r2, r4
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	462b      	mov	r3, r5
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f7 fe7e 	bl	8000550 <__aeabi_dmul>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4630      	mov	r0, r6
 800885a:	4639      	mov	r1, r7
 800885c:	f7f7 fe78 	bl	8000550 <__aeabi_dmul>
 8008860:	4642      	mov	r2, r8
 8008862:	4604      	mov	r4, r0
 8008864:	460d      	mov	r5, r1
 8008866:	464b      	mov	r3, r9
 8008868:	ec51 0b18 	vmov	r0, r1, d8
 800886c:	f7f7 fcba 	bl	80001e4 <__adddf3>
 8008870:	ec53 2b19 	vmov	r2, r3, d9
 8008874:	f7f7 fe6c 	bl	8000550 <__aeabi_dmul>
 8008878:	4622      	mov	r2, r4
 800887a:	462b      	mov	r3, r5
 800887c:	f7f7 fcb2 	bl	80001e4 <__adddf3>
 8008880:	4642      	mov	r2, r8
 8008882:	4682      	mov	sl, r0
 8008884:	468b      	mov	fp, r1
 8008886:	464b      	mov	r3, r9
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f7 fe60 	bl	8000550 <__aeabi_dmul>
 8008890:	4b6b      	ldr	r3, [pc, #428]	; (8008a40 <__ieee754_pow+0x770>)
 8008892:	2200      	movs	r2, #0
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	f7f7 fca4 	bl	80001e4 <__adddf3>
 800889c:	4652      	mov	r2, sl
 800889e:	465b      	mov	r3, fp
 80088a0:	f7f7 fca0 	bl	80001e4 <__adddf3>
 80088a4:	2000      	movs	r0, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4640      	mov	r0, r8
 80088b0:	4649      	mov	r1, r9
 80088b2:	f7f7 fe4d 	bl	8000550 <__aeabi_dmul>
 80088b6:	4b62      	ldr	r3, [pc, #392]	; (8008a40 <__ieee754_pow+0x770>)
 80088b8:	4680      	mov	r8, r0
 80088ba:	4689      	mov	r9, r1
 80088bc:	2200      	movs	r2, #0
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 fc8d 	bl	80001e0 <__aeabi_dsub>
 80088c6:	4632      	mov	r2, r6
 80088c8:	463b      	mov	r3, r7
 80088ca:	f7f7 fc89 	bl	80001e0 <__aeabi_dsub>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	f7f7 fc83 	bl	80001e0 <__aeabi_dsub>
 80088da:	ec53 2b18 	vmov	r2, r3, d8
 80088de:	f7f7 fe37 	bl	8000550 <__aeabi_dmul>
 80088e2:	4622      	mov	r2, r4
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	462b      	mov	r3, r5
 80088ea:	ec51 0b19 	vmov	r0, r1, d9
 80088ee:	f7f7 fe2f 	bl	8000550 <__aeabi_dmul>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4630      	mov	r0, r6
 80088f8:	4639      	mov	r1, r7
 80088fa:	f7f7 fc73 	bl	80001e4 <__adddf3>
 80088fe:	4606      	mov	r6, r0
 8008900:	460f      	mov	r7, r1
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	f7f7 fc6b 	bl	80001e4 <__adddf3>
 800890e:	a33e      	add	r3, pc, #248	; (adr r3, 8008a08 <__ieee754_pow+0x738>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	2000      	movs	r0, #0
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	f7f7 fe19 	bl	8000550 <__aeabi_dmul>
 800891e:	4642      	mov	r2, r8
 8008920:	ec41 0b18 	vmov	d8, r0, r1
 8008924:	464b      	mov	r3, r9
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fc59 	bl	80001e0 <__aeabi_dsub>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	f7f7 fc53 	bl	80001e0 <__aeabi_dsub>
 800893a:	a335      	add	r3, pc, #212	; (adr r3, 8008a10 <__ieee754_pow+0x740>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe06 	bl	8000550 <__aeabi_dmul>
 8008944:	a334      	add	r3, pc, #208	; (adr r3, 8008a18 <__ieee754_pow+0x748>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 fdfd 	bl	8000550 <__aeabi_dmul>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4630      	mov	r0, r6
 800895c:	4639      	mov	r1, r7
 800895e:	f7f7 fc41 	bl	80001e4 <__adddf3>
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	4b37      	ldr	r3, [pc, #220]	; (8008a44 <__ieee754_pow+0x774>)
 8008966:	4413      	add	r3, r2
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fc3a 	bl	80001e4 <__adddf3>
 8008970:	4682      	mov	sl, r0
 8008972:	9805      	ldr	r0, [sp, #20]
 8008974:	468b      	mov	fp, r1
 8008976:	f7f7 fd81 	bl	800047c <__aeabi_i2d>
 800897a:	9a07      	ldr	r2, [sp, #28]
 800897c:	4b32      	ldr	r3, [pc, #200]	; (8008a48 <__ieee754_pow+0x778>)
 800897e:	4413      	add	r3, r2
 8008980:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008984:	4606      	mov	r6, r0
 8008986:	460f      	mov	r7, r1
 8008988:	4652      	mov	r2, sl
 800898a:	465b      	mov	r3, fp
 800898c:	ec51 0b18 	vmov	r0, r1, d8
 8008990:	f7f7 fc28 	bl	80001e4 <__adddf3>
 8008994:	4642      	mov	r2, r8
 8008996:	464b      	mov	r3, r9
 8008998:	f7f7 fc24 	bl	80001e4 <__adddf3>
 800899c:	4632      	mov	r2, r6
 800899e:	463b      	mov	r3, r7
 80089a0:	f7f7 fc20 	bl	80001e4 <__adddf3>
 80089a4:	2000      	movs	r0, #0
 80089a6:	4632      	mov	r2, r6
 80089a8:	463b      	mov	r3, r7
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	f7f7 fc17 	bl	80001e0 <__aeabi_dsub>
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	f7f7 fc13 	bl	80001e0 <__aeabi_dsub>
 80089ba:	ec53 2b18 	vmov	r2, r3, d8
 80089be:	f7f7 fc0f 	bl	80001e0 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4650      	mov	r0, sl
 80089c8:	4659      	mov	r1, fp
 80089ca:	e610      	b.n	80085ee <__ieee754_pow+0x31e>
 80089cc:	2401      	movs	r4, #1
 80089ce:	e6a1      	b.n	8008714 <__ieee754_pow+0x444>
 80089d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008a20 <__ieee754_pow+0x750>
 80089d4:	e617      	b.n	8008606 <__ieee754_pow+0x336>
 80089d6:	bf00      	nop
 80089d8:	4a454eef 	.word	0x4a454eef
 80089dc:	3fca7e28 	.word	0x3fca7e28
 80089e0:	93c9db65 	.word	0x93c9db65
 80089e4:	3fcd864a 	.word	0x3fcd864a
 80089e8:	a91d4101 	.word	0xa91d4101
 80089ec:	3fd17460 	.word	0x3fd17460
 80089f0:	518f264d 	.word	0x518f264d
 80089f4:	3fd55555 	.word	0x3fd55555
 80089f8:	db6fabff 	.word	0xdb6fabff
 80089fc:	3fdb6db6 	.word	0x3fdb6db6
 8008a00:	33333303 	.word	0x33333303
 8008a04:	3fe33333 	.word	0x3fe33333
 8008a08:	e0000000 	.word	0xe0000000
 8008a0c:	3feec709 	.word	0x3feec709
 8008a10:	dc3a03fd 	.word	0xdc3a03fd
 8008a14:	3feec709 	.word	0x3feec709
 8008a18:	145b01f5 	.word	0x145b01f5
 8008a1c:	be3e2fe0 	.word	0xbe3e2fe0
 8008a20:	00000000 	.word	0x00000000
 8008a24:	3ff00000 	.word	0x3ff00000
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	43400000 	.word	0x43400000
 8008a30:	0003988e 	.word	0x0003988e
 8008a34:	000bb679 	.word	0x000bb679
 8008a38:	08009058 	.word	0x08009058
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	40080000 	.word	0x40080000
 8008a44:	08009078 	.word	0x08009078
 8008a48:	08009068 	.word	0x08009068
 8008a4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008d24 <__ieee754_pow+0xa54>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fbc5 	bl	80001e4 <__adddf3>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	ec41 0b1a 	vmov	d10, r0, r1
 8008a60:	462b      	mov	r3, r5
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fbbb 	bl	80001e0 <__aeabi_dsub>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	ec51 0b1a 	vmov	r0, r1, d10
 8008a72:	f7f7 fffd 	bl	8000a70 <__aeabi_dcmpgt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f47f ae04 	bne.w	8008684 <__ieee754_pow+0x3b4>
 8008a7c:	4aa4      	ldr	r2, [pc, #656]	; (8008d10 <__ieee754_pow+0xa40>)
 8008a7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f340 8108 	ble.w	8008c98 <__ieee754_pow+0x9c8>
 8008a88:	151b      	asrs	r3, r3, #20
 8008a8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a92:	fa4a f303 	asr.w	r3, sl, r3
 8008a96:	445b      	add	r3, fp
 8008a98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008a9c:	4e9d      	ldr	r6, [pc, #628]	; (8008d14 <__ieee754_pow+0xa44>)
 8008a9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008aa2:	4116      	asrs	r6, r2
 8008aa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	ea23 0106 	bic.w	r1, r3, r6
 8008aae:	f1c2 0214 	rsb	r2, r2, #20
 8008ab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ab6:	fa4a fa02 	asr.w	sl, sl, r2
 8008aba:	f1bb 0f00 	cmp.w	fp, #0
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	bfb8      	it	lt
 8008ac8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008acc:	f7f7 fb88 	bl	80001e0 <__aeabi_dsub>
 8008ad0:	ec41 0b19 	vmov	d9, r0, r1
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	ec51 0b19 	vmov	r0, r1, d9
 8008adc:	f7f7 fb82 	bl	80001e4 <__adddf3>
 8008ae0:	a37b      	add	r3, pc, #492	; (adr r3, 8008cd0 <__ieee754_pow+0xa00>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	f7f7 fd30 	bl	8000550 <__aeabi_dmul>
 8008af0:	ec53 2b19 	vmov	r2, r3, d9
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	4620      	mov	r0, r4
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7f7 fb70 	bl	80001e0 <__aeabi_dsub>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4640      	mov	r0, r8
 8008b06:	4649      	mov	r1, r9
 8008b08:	f7f7 fb6a 	bl	80001e0 <__aeabi_dsub>
 8008b0c:	a372      	add	r3, pc, #456	; (adr r3, 8008cd8 <__ieee754_pow+0xa08>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fd1d 	bl	8000550 <__aeabi_dmul>
 8008b16:	a372      	add	r3, pc, #456	; (adr r3, 8008ce0 <__ieee754_pow+0xa10>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4689      	mov	r9, r1
 8008b20:	4620      	mov	r0, r4
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7f7 fd14 	bl	8000550 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fb58 	bl	80001e4 <__adddf3>
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fb50 	bl	80001e4 <__adddf3>
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	f7f7 fb48 	bl	80001e0 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4620      	mov	r0, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	f7f7 fb42 	bl	80001e0 <__aeabi_dsub>
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	464b      	mov	r3, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	4649      	mov	r1, r9
 8008b68:	f7f7 fcf2 	bl	8000550 <__aeabi_dmul>
 8008b6c:	a35e      	add	r3, pc, #376	; (adr r3, 8008ce8 <__ieee754_pow+0xa18>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	f7f7 fceb 	bl	8000550 <__aeabi_dmul>
 8008b7a:	a35d      	add	r3, pc, #372	; (adr r3, 8008cf0 <__ieee754_pow+0xa20>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fb2e 	bl	80001e0 <__aeabi_dsub>
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	f7f7 fce2 	bl	8000550 <__aeabi_dmul>
 8008b8c:	a35a      	add	r3, pc, #360	; (adr r3, 8008cf8 <__ieee754_pow+0xa28>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb27 	bl	80001e4 <__adddf3>
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	f7f7 fcd9 	bl	8000550 <__aeabi_dmul>
 8008b9e:	a358      	add	r3, pc, #352	; (adr r3, 8008d00 <__ieee754_pow+0xa30>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fb1c 	bl	80001e0 <__aeabi_dsub>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fcd0 	bl	8000550 <__aeabi_dmul>
 8008bb0:	a355      	add	r3, pc, #340	; (adr r3, 8008d08 <__ieee754_pow+0xa38>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb15 	bl	80001e4 <__adddf3>
 8008bba:	4622      	mov	r2, r4
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	f7f7 fcc7 	bl	8000550 <__aeabi_dmul>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fb09 	bl	80001e0 <__aeabi_dsub>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fcb9 	bl	8000550 <__aeabi_dmul>
 8008bde:	2200      	movs	r2, #0
 8008be0:	ec41 0b19 	vmov	d9, r0, r1
 8008be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 faf8 	bl	80001e0 <__aeabi_dsub>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	ec51 0b19 	vmov	r0, r1, d9
 8008bf8:	f7f7 fdd4 	bl	80007a4 <__aeabi_ddiv>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	463b      	mov	r3, r7
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 fca2 	bl	8000550 <__aeabi_dmul>
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	463b      	mov	r3, r7
 8008c10:	f7f7 fae8 	bl	80001e4 <__adddf3>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fae0 	bl	80001e0 <__aeabi_dsub>
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	f7f7 fadc 	bl	80001e0 <__aeabi_dsub>
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	493a      	ldr	r1, [pc, #232]	; (8008d18 <__ieee754_pow+0xa48>)
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7f7 fad6 	bl	80001e0 <__aeabi_dsub>
 8008c34:	ec41 0b10 	vmov	d0, r0, r1
 8008c38:	ee10 3a90 	vmov	r3, s1
 8008c3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c44:	da2b      	bge.n	8008c9e <__ieee754_pow+0x9ce>
 8008c46:	4650      	mov	r0, sl
 8008c48:	f000 f966 	bl	8008f18 <scalbn>
 8008c4c:	ec51 0b10 	vmov	r0, r1, d0
 8008c50:	ec53 2b18 	vmov	r2, r3, d8
 8008c54:	f7ff bbed 	b.w	8008432 <__ieee754_pow+0x162>
 8008c58:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <__ieee754_pow+0xa4c>)
 8008c5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c5e:	429e      	cmp	r6, r3
 8008c60:	f77f af0c 	ble.w	8008a7c <__ieee754_pow+0x7ac>
 8008c64:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <__ieee754_pow+0xa50>)
 8008c66:	440b      	add	r3, r1
 8008c68:	4303      	orrs	r3, r0
 8008c6a:	d009      	beq.n	8008c80 <__ieee754_pow+0x9b0>
 8008c6c:	ec51 0b18 	vmov	r0, r1, d8
 8008c70:	2200      	movs	r2, #0
 8008c72:	2300      	movs	r3, #0
 8008c74:	f7f7 fede 	bl	8000a34 <__aeabi_dcmplt>
 8008c78:	3800      	subs	r0, #0
 8008c7a:	bf18      	it	ne
 8008c7c:	2001      	movne	r0, #1
 8008c7e:	e447      	b.n	8008510 <__ieee754_pow+0x240>
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	f7f7 faac 	bl	80001e0 <__aeabi_dsub>
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	f7f7 fee6 	bl	8000a5c <__aeabi_dcmpge>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f43f aef3 	beq.w	8008a7c <__ieee754_pow+0x7ac>
 8008c96:	e7e9      	b.n	8008c6c <__ieee754_pow+0x99c>
 8008c98:	f04f 0a00 	mov.w	sl, #0
 8008c9c:	e71a      	b.n	8008ad4 <__ieee754_pow+0x804>
 8008c9e:	ec51 0b10 	vmov	r0, r1, d0
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	e7d4      	b.n	8008c50 <__ieee754_pow+0x980>
 8008ca6:	491c      	ldr	r1, [pc, #112]	; (8008d18 <__ieee754_pow+0xa48>)
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7ff bb30 	b.w	800830e <__ieee754_pow+0x3e>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f7ff bb2c 	b.w	800830e <__ieee754_pow+0x3e>
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	4639      	mov	r1, r7
 8008cba:	f7ff bb28 	b.w	800830e <__ieee754_pow+0x3e>
 8008cbe:	9204      	str	r2, [sp, #16]
 8008cc0:	f7ff bb7a 	b.w	80083b8 <__ieee754_pow+0xe8>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f7ff bb64 	b.w	8008392 <__ieee754_pow+0xc2>
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	00000000 	.word	0x00000000
 8008cd4:	3fe62e43 	.word	0x3fe62e43
 8008cd8:	fefa39ef 	.word	0xfefa39ef
 8008cdc:	3fe62e42 	.word	0x3fe62e42
 8008ce0:	0ca86c39 	.word	0x0ca86c39
 8008ce4:	be205c61 	.word	0xbe205c61
 8008ce8:	72bea4d0 	.word	0x72bea4d0
 8008cec:	3e663769 	.word	0x3e663769
 8008cf0:	c5d26bf1 	.word	0xc5d26bf1
 8008cf4:	3ebbbd41 	.word	0x3ebbbd41
 8008cf8:	af25de2c 	.word	0xaf25de2c
 8008cfc:	3f11566a 	.word	0x3f11566a
 8008d00:	16bebd93 	.word	0x16bebd93
 8008d04:	3f66c16c 	.word	0x3f66c16c
 8008d08:	5555553e 	.word	0x5555553e
 8008d0c:	3fc55555 	.word	0x3fc55555
 8008d10:	3fe00000 	.word	0x3fe00000
 8008d14:	000fffff 	.word	0x000fffff
 8008d18:	3ff00000 	.word	0x3ff00000
 8008d1c:	4090cbff 	.word	0x4090cbff
 8008d20:	3f6f3400 	.word	0x3f6f3400
 8008d24:	652b82fe 	.word	0x652b82fe
 8008d28:	3c971547 	.word	0x3c971547

08008d2c <__ieee754_sqrt>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	ec55 4b10 	vmov	r4, r5, d0
 8008d34:	4e55      	ldr	r6, [pc, #340]	; (8008e8c <__ieee754_sqrt+0x160>)
 8008d36:	43ae      	bics	r6, r5
 8008d38:	ee10 0a10 	vmov	r0, s0
 8008d3c:	ee10 3a10 	vmov	r3, s0
 8008d40:	462a      	mov	r2, r5
 8008d42:	4629      	mov	r1, r5
 8008d44:	d110      	bne.n	8008d68 <__ieee754_sqrt+0x3c>
 8008d46:	ee10 2a10 	vmov	r2, s0
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	f7f7 fc00 	bl	8000550 <__aeabi_dmul>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	f7f7 fa44 	bl	80001e4 <__adddf3>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	460d      	mov	r5, r1
 8008d60:	ec45 4b10 	vmov	d0, r4, r5
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	dc10      	bgt.n	8008d8e <__ieee754_sqrt+0x62>
 8008d6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d70:	4330      	orrs	r0, r6
 8008d72:	d0f5      	beq.n	8008d60 <__ieee754_sqrt+0x34>
 8008d74:	b15d      	cbz	r5, 8008d8e <__ieee754_sqrt+0x62>
 8008d76:	ee10 2a10 	vmov	r2, s0
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	ee10 0a10 	vmov	r0, s0
 8008d80:	f7f7 fa2e 	bl	80001e0 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	f7f7 fd0c 	bl	80007a4 <__aeabi_ddiv>
 8008d8c:	e7e6      	b.n	8008d5c <__ieee754_sqrt+0x30>
 8008d8e:	1512      	asrs	r2, r2, #20
 8008d90:	d074      	beq.n	8008e7c <__ieee754_sqrt+0x150>
 8008d92:	07d4      	lsls	r4, r2, #31
 8008d94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008d98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008da0:	bf5e      	ittt	pl
 8008da2:	0fda      	lsrpl	r2, r3, #31
 8008da4:	005b      	lslpl	r3, r3, #1
 8008da6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008daa:	2400      	movs	r4, #0
 8008dac:	0fda      	lsrs	r2, r3, #31
 8008dae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008db2:	107f      	asrs	r7, r7, #1
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	2516      	movs	r5, #22
 8008db8:	4620      	mov	r0, r4
 8008dba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008dbe:	1886      	adds	r6, r0, r2
 8008dc0:	428e      	cmp	r6, r1
 8008dc2:	bfde      	ittt	le
 8008dc4:	1b89      	suble	r1, r1, r6
 8008dc6:	18b0      	addle	r0, r6, r2
 8008dc8:	18a4      	addle	r4, r4, r2
 8008dca:	0049      	lsls	r1, r1, #1
 8008dcc:	3d01      	subs	r5, #1
 8008dce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008dd2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008dd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dda:	d1f0      	bne.n	8008dbe <__ieee754_sqrt+0x92>
 8008ddc:	462a      	mov	r2, r5
 8008dde:	f04f 0e20 	mov.w	lr, #32
 8008de2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008de6:	4281      	cmp	r1, r0
 8008de8:	eb06 0c05 	add.w	ip, r6, r5
 8008dec:	dc02      	bgt.n	8008df4 <__ieee754_sqrt+0xc8>
 8008dee:	d113      	bne.n	8008e18 <__ieee754_sqrt+0xec>
 8008df0:	459c      	cmp	ip, r3
 8008df2:	d811      	bhi.n	8008e18 <__ieee754_sqrt+0xec>
 8008df4:	f1bc 0f00 	cmp.w	ip, #0
 8008df8:	eb0c 0506 	add.w	r5, ip, r6
 8008dfc:	da43      	bge.n	8008e86 <__ieee754_sqrt+0x15a>
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	db41      	blt.n	8008e86 <__ieee754_sqrt+0x15a>
 8008e02:	f100 0801 	add.w	r8, r0, #1
 8008e06:	1a09      	subs	r1, r1, r0
 8008e08:	459c      	cmp	ip, r3
 8008e0a:	bf88      	it	hi
 8008e0c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008e10:	eba3 030c 	sub.w	r3, r3, ip
 8008e14:	4432      	add	r2, r6
 8008e16:	4640      	mov	r0, r8
 8008e18:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008e1c:	f1be 0e01 	subs.w	lr, lr, #1
 8008e20:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008e24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e2c:	d1db      	bne.n	8008de6 <__ieee754_sqrt+0xba>
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	d006      	beq.n	8008e40 <__ieee754_sqrt+0x114>
 8008e32:	1c50      	adds	r0, r2, #1
 8008e34:	bf13      	iteet	ne
 8008e36:	3201      	addne	r2, #1
 8008e38:	3401      	addeq	r4, #1
 8008e3a:	4672      	moveq	r2, lr
 8008e3c:	f022 0201 	bicne.w	r2, r2, #1
 8008e40:	1063      	asrs	r3, r4, #1
 8008e42:	0852      	lsrs	r2, r2, #1
 8008e44:	07e1      	lsls	r1, r4, #31
 8008e46:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008e4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008e4e:	bf48      	it	mi
 8008e50:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008e54:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008e58:	4614      	mov	r4, r2
 8008e5a:	e781      	b.n	8008d60 <__ieee754_sqrt+0x34>
 8008e5c:	0ad9      	lsrs	r1, r3, #11
 8008e5e:	3815      	subs	r0, #21
 8008e60:	055b      	lsls	r3, r3, #21
 8008e62:	2900      	cmp	r1, #0
 8008e64:	d0fa      	beq.n	8008e5c <__ieee754_sqrt+0x130>
 8008e66:	02cd      	lsls	r5, r1, #11
 8008e68:	d50a      	bpl.n	8008e80 <__ieee754_sqrt+0x154>
 8008e6a:	f1c2 0420 	rsb	r4, r2, #32
 8008e6e:	fa23 f404 	lsr.w	r4, r3, r4
 8008e72:	1e55      	subs	r5, r2, #1
 8008e74:	4093      	lsls	r3, r2
 8008e76:	4321      	orrs	r1, r4
 8008e78:	1b42      	subs	r2, r0, r5
 8008e7a:	e78a      	b.n	8008d92 <__ieee754_sqrt+0x66>
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	e7f0      	b.n	8008e62 <__ieee754_sqrt+0x136>
 8008e80:	0049      	lsls	r1, r1, #1
 8008e82:	3201      	adds	r2, #1
 8008e84:	e7ef      	b.n	8008e66 <__ieee754_sqrt+0x13a>
 8008e86:	4680      	mov	r8, r0
 8008e88:	e7bd      	b.n	8008e06 <__ieee754_sqrt+0xda>
 8008e8a:	bf00      	nop
 8008e8c:	7ff00000 	.word	0x7ff00000

08008e90 <with_errno>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
 8008e96:	4616      	mov	r6, r2
 8008e98:	f7ff f94a 	bl	8008130 <__errno>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	6006      	str	r6, [r0, #0]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}

08008ea4 <xflow>:
 8008ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	b108      	cbz	r0, 8008eb0 <xflow+0xc>
 8008eac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8008eb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7f7 fb48 	bl	8000550 <__aeabi_dmul>
 8008ec0:	2222      	movs	r2, #34	; 0x22
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ec8:	f7ff bfe2 	b.w	8008e90 <with_errno>

08008ecc <__math_uflow>:
 8008ecc:	b508      	push	{r3, lr}
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ed4:	f7ff ffe6 	bl	8008ea4 <xflow>
 8008ed8:	ec41 0b10 	vmov	d0, r0, r1
 8008edc:	bd08      	pop	{r3, pc}

08008ede <__math_oflow>:
 8008ede:	b508      	push	{r3, lr}
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008ee6:	f7ff ffdd 	bl	8008ea4 <xflow>
 8008eea:	ec41 0b10 	vmov	d0, r0, r1
 8008eee:	bd08      	pop	{r3, pc}

08008ef0 <fabs>:
 8008ef0:	ec51 0b10 	vmov	r0, r1, d0
 8008ef4:	ee10 2a10 	vmov	r2, s0
 8008ef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008efc:	ec43 2b10 	vmov	d0, r2, r3
 8008f00:	4770      	bx	lr

08008f02 <finite>:
 8008f02:	b082      	sub	sp, #8
 8008f04:	ed8d 0b00 	vstr	d0, [sp]
 8008f08:	9801      	ldr	r0, [sp, #4]
 8008f0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008f0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f12:	0fc0      	lsrs	r0, r0, #31
 8008f14:	b002      	add	sp, #8
 8008f16:	4770      	bx	lr

08008f18 <scalbn>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	ec55 4b10 	vmov	r4, r5, d0
 8008f1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008f22:	4606      	mov	r6, r0
 8008f24:	462b      	mov	r3, r5
 8008f26:	b99a      	cbnz	r2, 8008f50 <scalbn+0x38>
 8008f28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f2c:	4323      	orrs	r3, r4
 8008f2e:	d036      	beq.n	8008f9e <scalbn+0x86>
 8008f30:	4b39      	ldr	r3, [pc, #228]	; (8009018 <scalbn+0x100>)
 8008f32:	4629      	mov	r1, r5
 8008f34:	ee10 0a10 	vmov	r0, s0
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f7f7 fb09 	bl	8000550 <__aeabi_dmul>
 8008f3e:	4b37      	ldr	r3, [pc, #220]	; (800901c <scalbn+0x104>)
 8008f40:	429e      	cmp	r6, r3
 8008f42:	4604      	mov	r4, r0
 8008f44:	460d      	mov	r5, r1
 8008f46:	da10      	bge.n	8008f6a <scalbn+0x52>
 8008f48:	a32b      	add	r3, pc, #172	; (adr r3, 8008ff8 <scalbn+0xe0>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e03a      	b.n	8008fc6 <scalbn+0xae>
 8008f50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f54:	428a      	cmp	r2, r1
 8008f56:	d10c      	bne.n	8008f72 <scalbn+0x5a>
 8008f58:	ee10 2a10 	vmov	r2, s0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f7f7 f940 	bl	80001e4 <__adddf3>
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	e019      	b.n	8008f9e <scalbn+0x86>
 8008f6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f6e:	460b      	mov	r3, r1
 8008f70:	3a36      	subs	r2, #54	; 0x36
 8008f72:	4432      	add	r2, r6
 8008f74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f78:	428a      	cmp	r2, r1
 8008f7a:	dd08      	ble.n	8008f8e <scalbn+0x76>
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	a120      	add	r1, pc, #128	; (adr r1, 8009000 <scalbn+0xe8>)
 8008f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f84:	da1c      	bge.n	8008fc0 <scalbn+0xa8>
 8008f86:	a120      	add	r1, pc, #128	; (adr r1, 8009008 <scalbn+0xf0>)
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	e018      	b.n	8008fc0 <scalbn+0xa8>
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	dd08      	ble.n	8008fa4 <scalbn+0x8c>
 8008f92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f9e:	ec45 4b10 	vmov	d0, r4, r5
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008fa8:	da19      	bge.n	8008fde <scalbn+0xc6>
 8008faa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fae:	429e      	cmp	r6, r3
 8008fb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008fb4:	dd0a      	ble.n	8008fcc <scalbn+0xb4>
 8008fb6:	a112      	add	r1, pc, #72	; (adr r1, 8009000 <scalbn+0xe8>)
 8008fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e2      	bne.n	8008f86 <scalbn+0x6e>
 8008fc0:	a30f      	add	r3, pc, #60	; (adr r3, 8009000 <scalbn+0xe8>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 fac3 	bl	8000550 <__aeabi_dmul>
 8008fca:	e7cb      	b.n	8008f64 <scalbn+0x4c>
 8008fcc:	a10a      	add	r1, pc, #40	; (adr r1, 8008ff8 <scalbn+0xe0>)
 8008fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0b8      	beq.n	8008f48 <scalbn+0x30>
 8008fd6:	a10e      	add	r1, pc, #56	; (adr r1, 8009010 <scalbn+0xf8>)
 8008fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fdc:	e7b4      	b.n	8008f48 <scalbn+0x30>
 8008fde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fe2:	3236      	adds	r2, #54	; 0x36
 8008fe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008fec:	4620      	mov	r0, r4
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <scalbn+0x108>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	e7e8      	b.n	8008fc6 <scalbn+0xae>
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	c2f8f359 	.word	0xc2f8f359
 8008ffc:	01a56e1f 	.word	0x01a56e1f
 8009000:	8800759c 	.word	0x8800759c
 8009004:	7e37e43c 	.word	0x7e37e43c
 8009008:	8800759c 	.word	0x8800759c
 800900c:	fe37e43c 	.word	0xfe37e43c
 8009010:	c2f8f359 	.word	0xc2f8f359
 8009014:	81a56e1f 	.word	0x81a56e1f
 8009018:	43500000 	.word	0x43500000
 800901c:	ffff3cb0 	.word	0xffff3cb0
 8009020:	3c900000 	.word	0x3c900000

08009024 <_init>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr

08009030 <_fini>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr
