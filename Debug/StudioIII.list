
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d164  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d300  0800d300  0001d300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d358  0800d358  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800d360  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000148  0800d4a4  00020148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800d4a4  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a4e  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  00035bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8e  00000000  00000000  0003a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135c1  00000000  00000000  00050fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919dc  00000000  00000000  000645af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f5f8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b24  00000000  00000000  000f6050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000148 	.word	0x20000148
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d2e4 	.word	0x0800d2e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000014c 	.word	0x2000014c
 80001d4:	0800d2e4 	.word	0x0800d2e4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 fd1b 	bl	80058d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f94d 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fb9b 	bl	80015e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fb71 	bl	8001590 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f9af 	bl	8001210 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9db 	bl	800126c <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb1b 	bl	80014f0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa77 	bl	80013ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fac9 	bl	8001454 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fb39 	bl	8001538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f004 fd78 	bl	80059bc <HAL_Delay>
  setmatrix();
 8000ecc:	f000 fee6 	bl	8001c9c <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	4881      	ldr	r0, [pc, #516]	; (80010d8 <main+0x240>)
 8000ed2:	f008 fc73 	bl	80097bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	487f      	ldr	r0, [pc, #508]	; (80010d8 <main+0x240>)
 8000eda:	f008 fd85 	bl	80099e8 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	487e      	ldr	r0, [pc, #504]	; (80010dc <main+0x244>)
 8000ee2:	f008 fed7 	bl	8009c94 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	487e      	ldr	r0, [pc, #504]	; (80010e0 <main+0x248>)
 8000ee8:	f008 fcc2 	bl	8009870 <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	487d      	ldr	r0, [pc, #500]	; (80010e4 <main+0x24c>)
 8000eee:	f008 fcbf 	bl	8009870 <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	487c      	ldr	r0, [pc, #496]	; (80010e8 <main+0x250>)
 8000ef8:	f005 fc42 	bl	8006780 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <main+0x254>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fd9 	.word	0x08000fd9
 8000f10:	08000f37 	.word	0x08000f37
 8000f14:	08001073 	.word	0x08001073
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f6b 	.word	0x08000f6b
 8000f24:	08000fc3 	.word	0x08000fc3
		case Main:
			UART();
 8000f28:	f003 fa7e 	bl	8004428 <UART>
			ReadEncoder();
 8000f2c:	f000 fc64 	bl	80017f8 <ReadEncoder>
			kalmanfilter();
 8000f30:	f001 f90c 	bl	800214c <kalmanfilter>
			break;
 8000f34:	e0c9      	b.n	80010ca <main+0x232>
		case Home:
			UART();
 8000f36:	f003 fa77 	bl	8004428 <UART>
			ReadEncoder();
 8000f3a:	f000 fc5d 	bl	80017f8 <ReadEncoder>
			SetHome();
 8000f3e:	f000 fced 	bl	800191c <SetHome>
			kalmanfilter();
 8000f42:	f001 f903 	bl	800214c <kalmanfilter>
			break;
 8000f46:	e0c0      	b.n	80010ca <main+0x232>
		case Emergency:
			UART();
 8000f48:	f003 fa6e 	bl	8004428 <UART>
			if(Emergency_status == 1){
 8000f4c:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <main+0x258>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <main+0xca>
				Arm_State = Emergency;
 8000f54:	4b65      	ldr	r3, [pc, #404]	; (80010ec <main+0x254>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <main+0x25c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000f60:	e0b3      	b.n	80010ca <main+0x232>
				Arm_State = Main;
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <main+0x254>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e0af      	b.n	80010ca <main+0x232>
		case Setzero:
			UART();
 8000f6a:	f003 fa5d 	bl	8004428 <UART>
			if(micros() - timestamp > 2000000){
 8000f6e:	f000 fda3 	bl	8001ab8 <micros>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4960      	ldr	r1, [pc, #384]	; (80010f8 <main+0x260>)
 8000f78:	6809      	ldr	r1, [r1, #0]
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	4688      	mov	r8, r1
 8000f7e:	4681      	mov	r9, r0
 8000f80:	ebb2 0408 	subs.w	r4, r2, r8
 8000f84:	eb63 0509 	sbc.w	r5, r3, r9
 8000f88:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x264>)
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	f175 0300 	sbcs.w	r3, r5, #0
 8000f90:	f0c0 8096 	bcc.w	80010c0 <main+0x228>
				if (SetZeroState)
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <main+0x268>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <main+0x122>
				{
					TIM3->CNT = 0;
 8000f9c:	4b59      	ldr	r3, [pc, #356]	; (8001104 <main+0x26c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
					angle_base = 0;
 8000fa2:	4b59      	ldr	r3, [pc, #356]	; (8001108 <main+0x270>)
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
					angle = 0;
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <main+0x274>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
					theta_now = 0;
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <main+0x278>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
				}
				Arm_State = Main;
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <main+0x254>)
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8000fc0:	e07e      	b.n	80010c0 <main+0x228>
		case PrepareRun:
			UART();
 8000fc2:	f003 fa31 	bl	8004428 <UART>
			TrajectoryGenerator_Flag=1;
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <main+0x27c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 8000fcc:	f001 f8e0 	bl	8002190 <TrajectoryGenerator>
			Arm_State = Run;
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <main+0x254>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			break;
 8000fd6:	e078      	b.n	80010ca <main+0x232>
		case Run:
			UART();
 8000fd8:	f003 fa26 	bl	8004428 <UART>
			if(Go_Flag == 0){
 8000fdc:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <main+0x280>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d16f      	bne.n	80010c4 <main+0x22c>
				if(ModeN==1){
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0x284>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d138      	bne.n	800105e <main+0x1c6>
					if(n_station >= n_station_max-1){
 8000fec:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x288>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <main+0x28c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	db0c      	blt.n	8001016 <main+0x17e>
						Arm_State = EndEffector;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <main+0x254>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <main+0x290>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <main+0x284>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <main+0x25c>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e005      	b.n	8001022 <main+0x18a>
					}
					else{
						n_station++;
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <main+0x288>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x288>)
 8001020:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <main+0x254>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <main+0x290>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <main+0x288>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <main+0x294>)
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <main+0x298>)
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa2c 	bl	80004a0 <__aeabi_f2d>
 8001048:	a321      	add	r3, pc, #132	; (adr r3, 80010d0 <main+0x238>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa7f 	bl	8000550 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4937      	ldr	r1, [pc, #220]	; (8001134 <main+0x29c>)
 8001058:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 800105c:	e032      	b.n	80010c4 <main+0x22c>
					Arm_State = EndEffector;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0x254>)
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <main+0x290>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
					Finish =1;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0x25c>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	e028      	b.n	80010c4 <main+0x22c>
		case EndEffector:
			UART();
 8001072:	f003 f9d9 	bl	8004428 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <main+0x2a0>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d111      	bne.n	80010a2 <main+0x20a>
			{
				OpenEndEffector();
 800107e:	f003 ffff 	bl	8005080 <OpenEndEffector>
				if(EndEffector_State == State_wait){
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <main+0x2a4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d11e      	bne.n	80010c8 <main+0x230>
					if(ModeN==1){
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <main+0x284>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d103      	bne.n	800109a <main+0x202>
						Arm_State = PrepareRun;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <main+0x254>)
 8001094:	2206      	movs	r2, #6
 8001096:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001098:	e016      	b.n	80010c8 <main+0x230>
						Arm_State = Main;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <main+0x254>)
 800109c:	2204      	movs	r2, #4
 800109e:	701a      	strb	r2, [r3, #0]
			break;
 80010a0:	e012      	b.n	80010c8 <main+0x230>
				FlagOpen_EndEffector =0;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <main+0x290>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <main+0x284>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d103      	bne.n	80010b8 <main+0x220>
					Arm_State = PrepareRun;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <main+0x254>)
 80010b2:	2206      	movs	r2, #6
 80010b4:	701a      	strb	r2, [r3, #0]
			break;
 80010b6:	e007      	b.n	80010c8 <main+0x230>
					Arm_State = Main;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <main+0x254>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	701a      	strb	r2, [r3, #0]
			break;
 80010be:	e003      	b.n	80010c8 <main+0x230>
			break;
 80010c0:	bf00      	nop
 80010c2:	e71b      	b.n	8000efc <main+0x64>
			break;
 80010c4:	bf00      	nop
 80010c6:	e719      	b.n	8000efc <main+0x64>
			break;
 80010c8:	bf00      	nop
	  switch (Arm_State) {
 80010ca:	e717      	b.n	8000efc <main+0x64>
 80010cc:	f3af 8000 	nop.w
 80010d0:	a2529d39 	.word	0xa2529d39
 80010d4:	3f91df46 	.word	0x3f91df46
 80010d8:	200001b8 	.word	0x200001b8
 80010dc:	20000200 	.word	0x20000200
 80010e0:	20000248 	.word	0x20000248
 80010e4:	20000290 	.word	0x20000290
 80010e8:	40020400 	.word	0x40020400
 80010ec:	200000cb 	.word	0x200000cb
 80010f0:	200003eb 	.word	0x200003eb
 80010f4:	20000699 	.word	0x20000699
 80010f8:	200006b4 	.word	0x200006b4
 80010fc:	001e8481 	.word	0x001e8481
 8001100:	20000088 	.word	0x20000088
 8001104:	40000400 	.word	0x40000400
 8001108:	20000400 	.word	0x20000400
 800110c:	200003ec 	.word	0x200003ec
 8001110:	200003f4 	.word	0x200003f4
 8001114:	200003ea 	.word	0x200003ea
 8001118:	200003e9 	.word	0x200003e9
 800111c:	20000698 	.word	0x20000698
 8001120:	200000ca 	.word	0x200000ca
 8001124:	200000c9 	.word	0x200000c9
 8001128:	200006ac 	.word	0x200006ac
 800112c:	2000069c 	.word	0x2000069c
 8001130:	200000a0 	.word	0x200000a0
 8001134:	200005c8 	.word	0x200005c8
 8001138:	2000068b 	.word	0x2000068b
 800113c:	200000cc 	.word	0x200000cc

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f00b f8f6 	bl	800c340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <SystemClock_Config+0xc8>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xc8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SystemClock_Config+0xcc>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemClock_Config+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b0:	2308      	movs	r3, #8
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fe11 	bl	8008dec <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d0:	f004 f89a 	bl	8005308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2103      	movs	r1, #3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 f873 	bl	80092dc <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011fc:	f004 f884 	bl	8005308 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f005 fae3 	bl	8006818 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f004 f856 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000164 	.word	0x20000164
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00b f84b 	bl	800c340 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012ac:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <MX_TIM1_Init+0x13c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b0:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012be:	f241 3287 	movw	r2, #4999	; 0x1387
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012d8:	f008 fa20 	bl	800971c <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f004 f811 	bl	8005308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482c      	ldr	r0, [pc, #176]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012f4:	f008 ff26 	bl	800a144 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f004 f803 	bl	8005308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4828      	ldr	r0, [pc, #160]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001304:	f008 fb16 	bl	8009934 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f003 fffb 	bl	8005308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001322:	f009 facb 	bl	800a8bc <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f003 ffec 	bl	8005308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001356:	f008 fe33 	bl	8009fc0 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001360:	f003 ffd2 	bl	8005308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001388:	f009 fb06 	bl	800a998 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001392:	f003 ffb9 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x138>)
 8001398:	f004 f8e8 	bl	800556c <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	; 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001b8 	.word	0x200001b8
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00a ffc0 	bl	800c340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <MX_TIM3_Init+0xa4>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM3_Init+0xa0>)
 80013dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM3_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ee:	2303      	movs	r3, #3
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_TIM3_Init+0xa0>)
 800141a:	f008 fb95 	bl	8009b48 <HAL_TIM_Encoder_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001424:	f003 ff70 	bl	8005308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM3_Init+0xa0>)
 8001436:	f009 fa41 	bl	800a8bc <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001440:	f003 ff62 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000200 	.word	0x20000200
 8001450:	40000400 	.word	0x40000400

08001454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_TIM4_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001478:	2209      	movs	r2, #9
 800147a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001484:	f242 720f 	movw	r2, #9999	; 0x270f
 8001488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_TIM4_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_TIM4_Init+0x94>)
 8001498:	f008 f940 	bl	800971c <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80014a2:	f003 ff31 	bl	8005308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_TIM4_Init+0x94>)
 80014b4:	f008 fe46 	bl	800a144 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014be:	f003 ff23 	bl	8005308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM4_Init+0x94>)
 80014d0:	f009 f9f4 	bl	800a8bc <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014da:	f003 ff15 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000248 	.word	0x20000248
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_TIM11_Init+0x40>)
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <MX_TIM11_Init+0x44>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_TIM11_Init+0x40>)
 80014fc:	2263      	movs	r2, #99	; 0x63
 80014fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_TIM11_Init+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_TIM11_Init+0x40>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_TIM11_Init+0x40>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_TIM11_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM11_Init+0x40>)
 800151c:	f008 f8fe 	bl	800971c <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001526:	f003 feef 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000290 	.word	0x20000290
 8001534:	40014800 	.word	0x40014800

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001544:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800154c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001550:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001574:	f009 fa76 	bl	800aa64 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800157e:	f003 fec3 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002d8 	.word	0x200002d8
 800158c:	40004400 	.word	0x40004400

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_DMA_Init+0x4c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <MX_DMA_Init+0x4c>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_DMA_Init+0x4c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2010      	movs	r0, #16
 80015b8:	f004 faff 	bl	8005bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015bc:	2010      	movs	r0, #16
 80015be:	f004 fb18 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2011      	movs	r0, #17
 80015c8:	f004 faf7 	bl	8005bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f004 fb10 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <MX_GPIO_Init+0x17c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a57      	ldr	r2, [pc, #348]	; (800175c <MX_GPIO_Init+0x17c>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b55      	ldr	r3, [pc, #340]	; (800175c <MX_GPIO_Init+0x17c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <MX_GPIO_Init+0x17c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a50      	ldr	r2, [pc, #320]	; (800175c <MX_GPIO_Init+0x17c>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <MX_GPIO_Init+0x17c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <MX_GPIO_Init+0x17c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a49      	ldr	r2, [pc, #292]	; (800175c <MX_GPIO_Init+0x17c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MX_GPIO_Init+0x17c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <MX_GPIO_Init+0x17c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <MX_GPIO_Init+0x17c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <MX_GPIO_Init+0x17c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	483d      	ldr	r0, [pc, #244]	; (8001760 <MX_GPIO_Init+0x180>)
 800166c:	f005 f888 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001676:	483b      	ldr	r0, [pc, #236]	; (8001764 <MX_GPIO_Init+0x184>)
 8001678:	f005 f882 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001682:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4835      	ldr	r0, [pc, #212]	; (8001768 <MX_GPIO_Init+0x188>)
 8001694:	f004 fed8 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001698:	2304      	movs	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800169c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <MX_GPIO_Init+0x188>)
 80016ae:	f004 fecb 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b2:	2320      	movs	r3, #32
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_GPIO_Init+0x180>)
 80016ca:	f004 febd 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	481f      	ldr	r0, [pc, #124]	; (8001764 <MX_GPIO_Init+0x184>)
 80016e8:	f004 feae 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80016ec:	2310      	movs	r3, #16
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4818      	ldr	r0, [pc, #96]	; (8001764 <MX_GPIO_Init+0x184>)
 8001702:	f004 fea1 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 8001706:	2320      	movs	r3, #32
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800170a:	2311      	movs	r3, #17
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <MX_GPIO_Init+0x184>)
 800171e:	f004 fe93 	bl	8006448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2008      	movs	r0, #8
 8001728:	f004 fa47 	bl	8005bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800172c:	2008      	movs	r0, #8
 800172e:	f004 fa60 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200a      	movs	r0, #10
 8001738:	f004 fa3f 	bl	8005bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800173c:	200a      	movs	r0, #10
 800173e:	f004 fa58 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2028      	movs	r0, #40	; 0x28
 8001748:	f004 fa37 	bl	8005bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800174c:	2028      	movs	r0, #40	; 0x28
 800174e:	f004 fa50 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	00000000 	.word	0x00000000

08001770 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;
	PWMOut = (volt*5000.0)/24.0;
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fe8e 	bl	80004a0 <__aeabi_f2d>
 8001784:	a31a      	add	r3, pc, #104	; (adr r3, 80017f0 <RunMotor+0x80>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fee1 	bl	8000550 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <RunMotor+0x70>)
 800179c:	f7ff f802 	bl	80007a4 <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9a2 	bl	8000af0 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <RunMotor+0x74>)
 80017b0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <RunMotor+0x78>)
 80017bc:	f004 ffe0 	bl	8006780 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RunMotor+0x74>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <RunMotor+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ce:	ee17 2a90 	vmov	r2, s15
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f3af 8000 	nop.w
 80017e0:	40380000 	.word	0x40380000
 80017e4:	200006dc 	.word	0x200006dc
 80017e8:	40020400 	.word	0x40020400
 80017ec:	200001b8 	.word	0x200001b8
 80017f0:	00000000 	.word	0x00000000
 80017f4:	40b38800 	.word	0x40b38800

080017f8 <ReadEncoder>:

void ReadEncoder()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	angle_before = angle;
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <ReadEncoder+0x100>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <ReadEncoder+0x104>)
 8001802:	6013      	str	r3, [r2, #0]
	angle_sum_before = theta_now;
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <ReadEncoder+0x108>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3e      	ldr	r2, [pc, #248]	; (8001904 <ReadEncoder+0x10c>)
 800180a:	6013      	str	r3, [r2, #0]

	angle = (TIM3->CNT/8191.0)*(2.0*M_PI);
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <ReadEncoder+0x110>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe23 	bl	800045c <__aeabi_ui2d>
 8001816:	a334      	add	r3, pc, #208	; (adr r3, 80018e8 <ReadEncoder+0xf0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ffc2 	bl	80007a4 <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a331      	add	r3, pc, #196	; (adr r3, 80018f0 <ReadEncoder+0xf8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fe8f 	bl	8000550 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f959 	bl	8000af0 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <ReadEncoder+0x100>)
 8001842:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <ReadEncoder+0x114>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <ReadEncoder+0x118>)
 800184a:	6013      	str	r3, [r2, #0]
	if ((angle - angle_before) <= -threshold)
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <ReadEncoder+0x100>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <ReadEncoder+0x104>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <ReadEncoder+0x11c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eef1 7a67 	vneg.f32	s15, s15
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d80b      	bhi.n	8001888 <ReadEncoder+0x90>
	{
		angle_base = angle_base_before + angle_max;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <ReadEncoder+0x118>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <ReadEncoder+0x120>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <ReadEncoder+0x114>)
 8001882:	edc3 7a00 	vstr	s15, [r3]
 8001886:	e01f      	b.n	80018c8 <ReadEncoder+0xd0>
	}
	else if ((angle - angle_before) >= threshold)
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <ReadEncoder+0x100>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <ReadEncoder+0x104>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <ReadEncoder+0x11c>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	db0b      	blt.n	80018c0 <ReadEncoder+0xc8>
	{
		angle_base = angle_base_before - angle_max;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <ReadEncoder+0x118>)
 80018aa:	ed93 7a00 	vldr	s14, [r3]
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <ReadEncoder+0x120>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <ReadEncoder+0x114>)
 80018ba:	edc3 7a00 	vstr	s15, [r3]
 80018be:	e003      	b.n	80018c8 <ReadEncoder+0xd0>
	}
	else
	{
		angle_base = angle_base_before;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <ReadEncoder+0x118>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <ReadEncoder+0x114>)
 80018c6:	6013      	str	r3, [r2, #0]
	}

	theta_now = angle + angle_base;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <ReadEncoder+0x100>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <ReadEncoder+0x114>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <ReadEncoder+0x108>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40bfff00 	.word	0x40bfff00
 80018f0:	54442d18 	.word	0x54442d18
 80018f4:	401921fb 	.word	0x401921fb
 80018f8:	200003ec 	.word	0x200003ec
 80018fc:	200003f0 	.word	0x200003f0
 8001900:	200003f4 	.word	0x200003f4
 8001904:	200003f8 	.word	0x200003f8
 8001908:	40000400 	.word	0x40000400
 800190c:	20000400 	.word	0x20000400
 8001910:	200003fc 	.word	0x200003fc
 8001914:	20000004 	.word	0x20000004
 8001918:	20000008 	.word	0x20000008

0800191c <SetHome>:
	alpha_tosensor = (omega_tosensor[0]-omega_tosensor[1])/dt;
	omega_tosensor[1] = omega_tosensor[0];
}

void SetHome()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Proximity_GPIO_Port, Proximity_Pin) == GPIO_PIN_RESET && AlSet_Flag == 2)
 8001920:	2104      	movs	r1, #4
 8001922:	481d      	ldr	r0, [pc, #116]	; (8001998 <SetHome+0x7c>)
 8001924:	f004 ff14 	bl	8006750 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <SetHome+0x20>
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <SetHome+0x80>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d102      	bne.n	800193c <SetHome+0x20>
	{
		SetHome_Flag = 2;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <SetHome+0x84>)
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
	}

	if(SetHome_Flag == 1)
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <SetHome+0x84>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d111      	bne.n	8001968 <SetHome+0x4c>
	{
		volt = 7;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <SetHome+0x88>)
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <SetHome+0x8c>)
 8001948:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <SetHome+0x88>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	2000      	movs	r0, #0
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f7ff ff0b 	bl	8001770 <RunMotor>
		AlSet_Flag = 1;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <SetHome+0x80>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <SetHome+0x84>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		volt = 5.0;
		RunMotor(volt, counterclockwise);
		AlSet_Flag = 0;
		SetHome_Flag = 0;
	}
}
 8001966:	e014      	b.n	8001992 <SetHome+0x76>
	else if(SetHome_Flag == 2)
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <SetHome+0x84>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d110      	bne.n	8001992 <SetHome+0x76>
		volt = 5.0;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <SetHome+0x88>)
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <SetHome+0x90>)
 8001974:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <SetHome+0x88>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	2000      	movs	r0, #0
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	f7ff fef5 	bl	8001770 <RunMotor>
		AlSet_Flag = 0;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <SetHome+0x80>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SetHome+0x84>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020800 	.word	0x40020800
 800199c:	20000000 	.word	0x20000000
 80019a0:	200003e8 	.word	0x200003e8
 80019a4:	200003dc 	.word	0x200003dc
 80019a8:	40e00000 	.word	0x40e00000
 80019ac:	40a00000 	.word	0x40a00000

080019b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 0)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d11e      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x4e>
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11a      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x4e>
	{
		volt = 0;
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xe4>)
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xe4>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	2001      	movs	r0, #1
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f7ff fec8 	bl	8001770 <RunMotor>
		kalmanfilter();
 80019e0:	f000 fbb4 	bl	800214c <kalmanfilter>
		AlSet_Flag = 2;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 80019ea:	f000 f865 	bl	8001ab8 <micros>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019f4:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_GPIO_EXTI_Callback+0xec>)
 80019f8:	2205      	movs	r2, #5
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e009      	b.n	8001a12 <HAL_GPIO_EXTI_Callback+0x62>
	}

	else if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 1)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d106      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x62>
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x62>
	{
		SetHome_Flag = 2;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == B1_Pin)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a18:	d10e      	bne.n	8001a38 <HAL_GPIO_EXTI_Callback+0x88>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a1e:	f004 fec8 	bl	80067b2 <HAL_GPIO_TogglePin>
		SetZeroState = (SetZeroState+1)%2;
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	bfb8      	it	lt
 8001a30:	425b      	neglt	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a36:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d124      	bne.n	8001a88 <HAL_GPIO_EXTI_Callback+0xd8>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001a3e:	2110      	movs	r1, #16
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a42:	f004 fe85 	bl	8006750 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11a      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0xd2>
		{
			Arm_State=Main;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_GPIO_EXTI_Callback+0xec>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2120      	movs	r1, #32
 8001a62:	4812      	ldr	r0, [pc, #72]	; (8001aac <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a64:	f004 fe8c 	bl	8006780 <HAL_GPIO_WritePin>
			volt = 0;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	2001      	movs	r0, #1
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f7ff fe78 	bl	8001770 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_EXTI_Callback+0xd8>
			Emergency_status = 0;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	200003dc 	.word	0x200003dc
 8001a98:	200006b4 	.word	0x200006b4
 8001a9c:	200000cb 	.word	0x200000cb
 8001aa0:	200003e8 	.word	0x200003e8
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000088 	.word	0x20000088
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	20000699 	.word	0x20000699
 8001ab4:	200003eb 	.word	0x200003eb

08001ab8 <micros>:

inline uint64_t micros()
{
 8001ab8:	b4b0      	push	{r4, r5, r7}
 8001aba:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <micros+0x2c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <micros+0x30>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	1884      	adds	r4, r0, r2
 8001ad0:	eb41 0503 	adc.w	r5, r1, r3
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	462b      	mov	r3, r5
}
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bcb0      	pop	{r4, r5, r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000290 	.word	0x20000290
 8001ae8:	20000690 	.word	0x20000690
 8001aec:	00000000 	.word	0x00000000

08001af0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001af4:	ed2d 8b02 	vpush	{d8}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 808f 	bne.w	8001c26 <HAL_TIM_PeriodElapsedCallback+0x136>
 8001b08:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808a 	beq.w	8001c26 <HAL_TIM_PeriodElapsedCallback+0x136>
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8085 	bne.w	8001c26 <HAL_TIM_PeriodElapsedCallback+0x136>
	{
		ReadEncoder();
 8001b1c:	f7ff fe6c 	bl	80017f8 <ReadEncoder>
		TrajectoryEvaluation();
 8001b20:	f001 fcbe 	bl	80034a0 <TrajectoryEvaluation>
		kalmanfilter();
 8001b24:	f000 fb12 	bl	800214c <kalmanfilter>

		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffdd 	bl	8000af0 <__aeabi_d2f>
 8001b36:	4606      	mov	r6, r0
 8001b38:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001b3a:	ed93 8a00 	vldr	s16, [r3]
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ffd2 	bl	8000af0 <__aeabi_d2f>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eef0 1a67 	vmov.f32	s3, s15
 8001b58:	ee01 2a10 	vmov	s2, r2
 8001b5c:	eef0 0a48 	vmov.f32	s1, s16
 8001b60:	ee00 6a10 	vmov	s0, r6
 8001b64:	f002 fb40 	bl	80041e8 <Cascade>
 8001b68:	eef0 7a40 	vmov.f32	s15, s0
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]

		t+=dt;
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]

		if (theta_now >= (theta_f - 0.007) && theta_now <= (theta_f + 0.007))
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc87 	bl	80004a0 <__aeabi_f2d>
 8001b92:	4680      	mov	r8, r0
 8001b94:	4689      	mov	r9, r1
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9c:	a32e      	add	r3, pc, #184	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fb1d 	bl	80001e0 <__aeabi_dsub>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe ff55 	bl	8000a5c <__aeabi_dcmpge>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d02c      	beq.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0x122>
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc6f 	bl	80004a0 <__aeabi_f2d>
 8001bc2:	4680      	mov	r8, r0
 8001bc4:	4689      	mov	r9, r1
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	a322      	add	r3, pc, #136	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb07 	bl	80001e4 <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4640      	mov	r0, r8
 8001bdc:	4649      	mov	r1, r9
 8001bde:	f7fe ff33 	bl	8000a48 <__aeabi_dcmple>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d014      	beq.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0x122>
		{
			volt = 0;
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
			RunMotor(volt, PID_dir);
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	f7ff fdb6 	bl	8001770 <RunMotor>
			Go_Flag = 0;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
			t = 0;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
//			RunMotor(volt, PID_dir);
//			Go_Flag = 0;
//			t = 0;
//		}

		RunMotor(volt, PID_dir);
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c22:	f7ff fda5 	bl	8001770 <RunMotor>
	}

	if (htim == &htim11)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10a      	bne.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0x154>
	{
		_micro += 65535;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c38:	1854      	adds	r4, r2, r1
 8001c3a:	f143 0500 	adc.w	r5, r3, #0
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c40:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	ecbd 8b02 	vpop	{d8}
 8001c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	3126e979 	.word	0x3126e979
 8001c5c:	3f7cac08 	.word	0x3f7cac08
 8001c60:	20000248 	.word	0x20000248
 8001c64:	200003e9 	.word	0x200003e9
 8001c68:	200000cb 	.word	0x200000cb
 8001c6c:	20000620 	.word	0x20000620
 8001c70:	20000404 	.word	0x20000404
 8001c74:	20000628 	.word	0x20000628
 8001c78:	20000408 	.word	0x20000408
 8001c7c:	200003dc 	.word	0x200003dc
 8001c80:	20000590 	.word	0x20000590
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	200003f4 	.word	0x200003f4
 8001c8c:	200005c8 	.word	0x200005c8
 8001c90:	200000ce 	.word	0x200000ce
 8001c94:	20000290 	.word	0x20000290
 8001c98:	20000690 	.word	0x20000690

08001c9c <setmatrix>:

void setmatrix(){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001ca0:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <setmatrix+0x1d4>)
 8001ca2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ca6:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001ca8:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <setmatrix+0x1d8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a70      	ldr	r2, [pc, #448]	; (8001e70 <setmatrix+0x1d4>)
 8001cae:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <setmatrix+0x1d8>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <setmatrix+0x1d8>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc8:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <setmatrix+0x1d4>)
 8001cca:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001cce:	4b69      	ldr	r3, [pc, #420]	; (8001e74 <setmatrix+0x1d8>)
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <setmatrix+0x1d8>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <setmatrix+0x1d8>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf0:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <setmatrix+0x1d4>)
 8001cf2:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <setmatrix+0x1d4>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <setmatrix+0x1d4>)
 8001d00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d04:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <setmatrix+0x1d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <setmatrix+0x1d4>)
 8001d0c:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <setmatrix+0x1d8>)
 8001d10:	ed93 7a00 	vldr	s14, [r3]
 8001d14:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <setmatrix+0x1d8>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <setmatrix+0x1d4>)
 8001d28:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <setmatrix+0x1d4>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001d34:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <setmatrix+0x1d4>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <setmatrix+0x1d4>)
 8001d3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <setmatrix+0x1d8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <setmatrix+0x1d4>)
 8001d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001d4c:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <setmatrix+0x1d4>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <setmatrix+0x1d4>)
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001d5c:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <setmatrix+0x1d4>)
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <setmatrix+0x1d4>)
 8001d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001d6c:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <setmatrix+0x1d8>)
 8001d6e:	ed93 7a00 	vldr	s14, [r3]
 8001d72:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <setmatrix+0x1d8>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <setmatrix+0x1d8>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d86:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <setmatrix+0x1dc>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <setmatrix+0x1d8>)
 8001d96:	ed93 7a00 	vldr	s14, [r3]
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <setmatrix+0x1d8>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <setmatrix+0x1dc>)
 8001dae:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <setmatrix+0x1d8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <setmatrix+0x1dc>)
 8001db8:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <setmatrix+0x1dc>)
 8001dbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dc0:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <setmatrix+0x1e0>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	482d      	ldr	r0, [pc, #180]	; (8001e80 <setmatrix+0x1e4>)
 8001dca:	f00a fa21 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <setmatrix+0x1d4>)
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	482b      	ldr	r0, [pc, #172]	; (8001e84 <setmatrix+0x1e8>)
 8001dd6:	f00a fa1b 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <setmatrix+0x1dc>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2104      	movs	r1, #4
 8001de0:	4829      	ldr	r0, [pc, #164]	; (8001e88 <setmatrix+0x1ec>)
 8001de2:	f00a fa15 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <setmatrix+0x1f0>)
 8001de8:	2204      	movs	r2, #4
 8001dea:	2101      	movs	r1, #1
 8001dec:	4828      	ldr	r0, [pc, #160]	; (8001e90 <setmatrix+0x1f4>)
 8001dee:	f00a fa0f 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <setmatrix+0x1f8>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	2101      	movs	r1, #1
 8001df8:	4827      	ldr	r0, [pc, #156]	; (8001e98 <setmatrix+0x1fc>)
 8001dfa:	f00a fa09 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <setmatrix+0x200>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	2101      	movs	r1, #1
 8001e04:	4826      	ldr	r0, [pc, #152]	; (8001ea0 <setmatrix+0x204>)
 8001e06:	f00a fa03 	bl	800c210 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <setmatrix+0x208>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4825      	ldr	r0, [pc, #148]	; (8001ea8 <setmatrix+0x20c>)
 8001e12:	f00a f9fd 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <setmatrix+0x210>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <setmatrix+0x214>)
 8001e1e:	f00a f9f7 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <setmatrix+0x218>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	2104      	movs	r1, #4
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <setmatrix+0x21c>)
 8001e2a:	f00a f9f1 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <setmatrix+0x220>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	2104      	movs	r1, #4
 8001e34:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <setmatrix+0x224>)
 8001e36:	f00a f9eb 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <setmatrix+0x228>)
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4821      	ldr	r0, [pc, #132]	; (8001ec8 <setmatrix+0x22c>)
 8001e42:	f00a f9e5 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <setmatrix+0x230>)
 8001e48:	2204      	movs	r2, #4
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	4820      	ldr	r0, [pc, #128]	; (8001ed0 <setmatrix+0x234>)
 8001e4e:	f00a f9df 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <setmatrix+0x238>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	2101      	movs	r1, #1
 8001e58:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <setmatrix+0x23c>)
 8001e5a:	f00a f9d9 	bl	800c210 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <setmatrix+0x240>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	2101      	movs	r1, #1
 8001e64:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <setmatrix+0x244>)
 8001e66:	f00a f9d3 	bl	800c210 <arm_mat_init_f32>
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000484 	.word	0x20000484
 8001e74:	2000000c 	.word	0x2000000c
 8001e78:	200004c4 	.word	0x200004c4
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	20000414 	.word	0x20000414
 8001e84:	2000041c 	.word	0x2000041c
 8001e88:	20000424 	.word	0x20000424
 8001e8c:	20000050 	.word	0x20000050
 8001e90:	2000043c 	.word	0x2000043c
 8001e94:	20000060 	.word	0x20000060
 8001e98:	20000444 	.word	0x20000444
 8001e9c:	20000064 	.word	0x20000064
 8001ea0:	2000042c 	.word	0x2000042c
 8001ea4:	200004d4 	.word	0x200004d4
 8001ea8:	2000044c 	.word	0x2000044c
 8001eac:	200004d8 	.word	0x200004d8
 8001eb0:	20000434 	.word	0x20000434
 8001eb4:	200004e8 	.word	0x200004e8
 8001eb8:	20000464 	.word	0x20000464
 8001ebc:	200004f8 	.word	0x200004f8
 8001ec0:	2000046c 	.word	0x2000046c
 8001ec4:	20000508 	.word	0x20000508
 8001ec8:	20000474 	.word	0x20000474
 8001ecc:	20000548 	.word	0x20000548
 8001ed0:	2000047c 	.word	0x2000047c
 8001ed4:	20000588 	.word	0x20000588
 8001ed8:	20000454 	.word	0x20000454
 8001edc:	2000058c 	.word	0x2000058c
 8001ee0:	2000045c 	.word	0x2000045c

08001ee4 <prediction>:

void prediction(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0c2      	sub	sp, #264	; 0x108
 8001ee8:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001eea:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <prediction+0xcc>)
 8001eec:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <prediction+0xd0>)
 8001eee:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <prediction+0xd4>)
 8001ef0:	f00a f8ee 	bl	800c0d0 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001ef4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ef8:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001efc:	2204      	movs	r2, #4
 8001efe:	2104      	movs	r1, #4
 8001f00:	f00a f986 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001f04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f08:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2104      	movs	r1, #4
 8001f10:	f00a f97e 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001f14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f18:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	2104      	movs	r1, #4
 8001f20:	f00a f976 	bl	800c210 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	f107 0018 	add.w	r0, r7, #24
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	2104      	movs	r1, #4
 8001f30:	f00a f96e 	bl	800c210 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	4638      	mov	r0, r7
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	f00a f967 	bl	800c210 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4619      	mov	r1, r3
 8001f48:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <prediction+0xd4>)
 8001f4a:	f009 fffb 	bl	800bf44 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	481a      	ldr	r0, [pc, #104]	; (8001fbc <prediction+0xd8>)
 8001f54:	f009 fff6 	bl	800bf44 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001f58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <prediction+0xdc>)
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <prediction+0xd4>)
 8001f62:	f00a f8b5 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001f66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4915      	ldr	r1, [pc, #84]	; (8001fc4 <prediction+0xe0>)
 8001f6e:	4813      	ldr	r0, [pc, #76]	; (8001fbc <prediction+0xd8>)
 8001f70:	f00a f8ae 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001f74:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f78:	f107 0118 	add.w	r1, r7, #24
 8001f7c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00a f8a5 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001f86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00a f89d 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001f96:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <prediction+0xe4>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00a f939 	bl	800c218 <arm_mat_add_f32>
}
 8001fa6:	bf00      	nop
 8001fa8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000046c 	.word	0x2000046c
 8001fb4:	20000464 	.word	0x20000464
 8001fb8:	2000041c 	.word	0x2000041c
 8001fbc:	20000424 	.word	0x20000424
 8001fc0:	20000474 	.word	0x20000474
 8001fc4:	2000042c 	.word	0x2000042c
 8001fc8:	2000047c 	.word	0x2000047c

08001fcc <update>:

void update(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ae      	sub	sp, #184	; 0xb8
 8001fd0:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001fd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd6:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2101      	movs	r1, #1
 8001fde:	f00a f917 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001fe2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fe6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001fea:	2204      	movs	r2, #4
 8001fec:	2104      	movs	r1, #4
 8001fee:	f00a f90f 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001ff2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	f00a f907 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8002002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002006:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800200a:	2204      	movs	r2, #4
 800200c:	2101      	movs	r1, #1
 800200e:	f00a f8ff 	bl	800c210 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8002012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002016:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800201a:	2201      	movs	r2, #1
 800201c:	2101      	movs	r1, #1
 800201e:	f00a f8f7 	bl	800c210 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	f107 0010 	add.w	r0, r7, #16
 800202a:	2201      	movs	r2, #1
 800202c:	2104      	movs	r1, #4
 800202e:	f00a f8ef 	bl	800c210 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4837      	ldr	r0, [pc, #220]	; (8002118 <update+0x14c>)
 800203a:	f009 ff83 	bl	800bf44 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 800203e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002042:	461a      	mov	r2, r3
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <update+0x150>)
 8002046:	4834      	ldr	r0, [pc, #208]	; (8002118 <update+0x14c>)
 8002048:	f00a f842 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 800204c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002050:	f107 0110 	add.w	r1, r7, #16
 8002054:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002058:	4618      	mov	r0, r3
 800205a:	f00a f839 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 800205e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002066:	4619      	mov	r1, r3
 8002068:	482d      	ldr	r0, [pc, #180]	; (8002120 <update+0x154>)
 800206a:	f00a f8d5 	bl	800c218 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 800206e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207a:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	f107 0008 	add.w	r0, r7, #8
 8002084:	2201      	movs	r2, #1
 8002086:	2101      	movs	r1, #1
 8002088:	f00a f8c2 	bl	800c210 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 800208c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4821      	ldr	r0, [pc, #132]	; (800211c <update+0x150>)
 8002098:	f00a f81a 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 800209c:	f107 0108 	add.w	r1, r7, #8
 80020a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <update+0x158>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00a f812 	bl	800c0d0 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 80020ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020b0:	461a      	mov	r2, r3
 80020b2:	4919      	ldr	r1, [pc, #100]	; (8002118 <update+0x14c>)
 80020b4:	481b      	ldr	r0, [pc, #108]	; (8002124 <update+0x158>)
 80020b6:	f00a f80b 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 80020ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020c2:	4619      	mov	r1, r3
 80020c4:	4818      	ldr	r0, [pc, #96]	; (8002128 <update+0x15c>)
 80020c6:	f009 ff99 	bl	800bffc <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 80020ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <update+0x160>)
 80020d0:	4912      	ldr	r1, [pc, #72]	; (800211c <update+0x150>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f009 fffc 	bl	800c0d0 <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <update+0x164>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <update+0x168>)
 80020de:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 80020e0:	4a15      	ldr	r2, [pc, #84]	; (8002138 <update+0x16c>)
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <update+0x170>)
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <update+0x14c>)
 80020e6:	f009 fff3 	bl	800c0d0 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <update+0x174>)
 80020ec:	4912      	ldr	r1, [pc, #72]	; (8002138 <update+0x16c>)
 80020ee:	4815      	ldr	r0, [pc, #84]	; (8002144 <update+0x178>)
 80020f0:	f009 ff84 	bl	800bffc <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 80020f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020f8:	461a      	mov	r2, r3
 80020fa:	4911      	ldr	r1, [pc, #68]	; (8002140 <update+0x174>)
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <update+0x158>)
 80020fe:	f009 ffe7 	bl	800c0d0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 8002102:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <update+0x17c>)
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <update+0x170>)
 800210a:	4618      	mov	r0, r3
 800210c:	f00a f884 	bl	800c218 <arm_mat_add_f32>
}
 8002110:	bf00      	nop
 8002112:	37b8      	adds	r7, #184	; 0xb8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000043c 	.word	0x2000043c
 800211c:	2000047c 	.word	0x2000047c
 8002120:	20000444 	.word	0x20000444
 8002124:	20000434 	.word	0x20000434
 8002128:	20000414 	.word	0x20000414
 800212c:	20000474 	.word	0x20000474
 8002130:	200003f4 	.word	0x200003f4
 8002134:	200004d4 	.word	0x200004d4
 8002138:	2000045c 	.word	0x2000045c
 800213c:	2000046c 	.word	0x2000046c
 8002140:	20000454 	.word	0x20000454
 8002144:	2000044c 	.word	0x2000044c
 8002148:	20000464 	.word	0x20000464

0800214c <kalmanfilter>:

void kalmanfilter()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	prediction();
 8002150:	f7ff fec8 	bl	8001ee4 <prediction>
	update();
 8002154:	f7ff ff3a 	bl	8001fcc <update>
	position_kalman = data_x_new[0];
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <kalmanfilter+0x30>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <kalmanfilter+0x34>)
 800215e:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <kalmanfilter+0x30>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <kalmanfilter+0x38>)
 8002166:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <kalmanfilter+0x30>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <kalmanfilter+0x3c>)
 800216e:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <kalmanfilter+0x30>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a05      	ldr	r2, [pc, #20]	; (800218c <kalmanfilter+0x40>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200004f8 	.word	0x200004f8
 8002180:	20000404 	.word	0x20000404
 8002184:	20000408 	.word	0x20000408
 8002188:	2000040c 	.word	0x2000040c
 800218c:	20000410 	.word	0x20000410

08002190 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8002190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <TrajectoryGenerator+0x158>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f001 8117 	beq.w	80033d0 <TrajectoryGenerator+0x1240>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <TrajectoryGenerator+0x15c>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fca0 	bl	8000af0 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	ee00 3a10 	vmov	s0, r3
 80021b6:	f002 f8fd 	bl	80043b4 <positive>
 80021ba:	ee10 3a10 	vmov	r3, s0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f96e 	bl	80004a0 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4948      	ldr	r1, [pc, #288]	; (80022ec <TrajectoryGenerator+0x15c>)
 80021ca:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <TrajectoryGenerator+0x160>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fc8a 	bl	8000af0 <__aeabi_d2f>
 80021dc:	4603      	mov	r3, r0
 80021de:	ee00 3a10 	vmov	s0, r3
 80021e2:	f002 f8e7 	bl	80043b4 <positive>
 80021e6:	ee10 3a10 	vmov	r3, s0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f958 	bl	80004a0 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	493e      	ldr	r1, [pc, #248]	; (80022f0 <TrajectoryGenerator+0x160>)
 80021f6:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <TrajectoryGenerator+0x164>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fc74 	bl	8000af0 <__aeabi_d2f>
 8002208:	4603      	mov	r3, r0
 800220a:	ee00 3a10 	vmov	s0, r3
 800220e:	f002 f8d1 	bl	80043b4 <positive>
 8002212:	ee10 3a10 	vmov	r3, s0
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f942 	bl	80004a0 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4934      	ldr	r1, [pc, #208]	; (80022f4 <TrajectoryGenerator+0x164>)
 8002222:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <TrajectoryGenerator+0x168>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f938 	bl	80004a0 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4931      	ldr	r1, [pc, #196]	; (80022fc <TrajectoryGenerator+0x16c>)
 8002236:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <TrajectoryGenerator+0x170>)
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <TrajectoryGenerator+0x16c>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fd ffcb 	bl	80001e0 <__aeabi_dsub>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	492d      	ldr	r1, [pc, #180]	; (8002304 <TrajectoryGenerator+0x174>)
 8002250:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <TrajectoryGenerator+0x174>)
 8002256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f7fe fbe7 	bl	8000a34 <__aeabi_dcmplt>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <TrajectoryGenerator+0xf6>
		{
			theta_dest = -(theta_dest);
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <TrajectoryGenerator+0x174>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	4614      	mov	r4, r2
 8002274:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <TrajectoryGenerator+0x174>)
 800227a:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <TrajectoryGenerator+0x178>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e002      	b.n	800228c <TrajectoryGenerator+0xfc>
		}

		else
		{
			dir = 1;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <TrajectoryGenerator+0x178>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
		}

		if(w_max*j_max < pow(a_max,2.0)){
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <TrajectoryGenerator+0x164>)
 800228e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <TrajectoryGenerator+0x15c>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f95a 	bl	8000550 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <TrajectoryGenerator+0x160>)
 80022a6:	ed93 7b00 	vldr	d7, [r3]
 80022aa:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80022e0 <TrajectoryGenerator+0x150>
 80022ae:	eeb0 0a47 	vmov.f32	s0, s14
 80022b2:	eef0 0a67 	vmov.f32	s1, s15
 80022b6:	f00a f8cf 	bl	800c458 <pow>
 80022ba:	ec53 2b10 	vmov	r2, r3, d0
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe fbb7 	bl	8000a34 <__aeabi_dcmplt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <TrajectoryGenerator+0x184>
			M=1.0;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <TrajectoryGenerator+0x17c>)
 80022ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d2:	601a      	str	r2, [r3, #0]
			N=0.0;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <TrajectoryGenerator+0x180>)
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e042      	b.n	8002364 <TrajectoryGenerator+0x1d4>
 80022de:	bf00      	nop
 80022e0:	00000000 	.word	0x00000000
 80022e4:	40000000 	.word	0x40000000
 80022e8:	200003ea 	.word	0x200003ea
 80022ec:	20000078 	.word	0x20000078
 80022f0:	20000070 	.word	0x20000070
 80022f4:	20000068 	.word	0x20000068
 80022f8:	200003f4 	.word	0x200003f4
 80022fc:	200005c0 	.word	0x200005c0
 8002300:	200005c8 	.word	0x200005c8
 8002304:	200005d0 	.word	0x200005d0
 8002308:	200000cd 	.word	0x200000cd
 800230c:	200006e0 	.word	0x200006e0
 8002310:	200006e4 	.word	0x200006e4
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 8002314:	4b96      	ldr	r3, [pc, #600]	; (8002570 <TrajectoryGenerator+0x3e0>)
 8002316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231a:	4b96      	ldr	r3, [pc, #600]	; (8002574 <TrajectoryGenerator+0x3e4>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f916 	bl	8000550 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4614      	mov	r4, r2
 800232a:	461d      	mov	r5, r3
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <TrajectoryGenerator+0x3e8>)
 800232e:	ed93 7b00 	vldr	d7, [r3]
 8002332:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002560 <TrajectoryGenerator+0x3d0>
 8002336:	eeb0 0a47 	vmov.f32	s0, s14
 800233a:	eef0 0a67 	vmov.f32	s1, s15
 800233e:	f00a f88b 	bl	800c458 <pow>
 8002342:	ec53 2b10 	vmov	r2, r3, d0
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fe fb87 	bl	8000a5c <__aeabi_dcmpge>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <TrajectoryGenerator+0x1d4>
			M=0.0;
 8002354:	4b89      	ldr	r3, [pc, #548]	; (800257c <TrajectoryGenerator+0x3ec>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
			N=1.0;
 800235c:	4b88      	ldr	r3, [pc, #544]	; (8002580 <TrajectoryGenerator+0x3f0>)
 800235e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002362:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 8002364:	4b84      	ldr	r3, [pc, #528]	; (8002578 <TrajectoryGenerator+0x3e8>)
 8002366:	ed93 7b00 	vldr	d7, [r3]
 800236a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002560 <TrajectoryGenerator+0x3d0>
 800236e:	eeb0 0a47 	vmov.f32	s0, s14
 8002372:	eef0 0a67 	vmov.f32	s1, s15
 8002376:	f00a f86f 	bl	800c458 <pow>
 800237a:	ec51 0b10 	vmov	r0, r1, d0
 800237e:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <TrajectoryGenerator+0x3e4>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe fa0e 	bl	80007a4 <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fbae 	bl	8000af0 <__aeabi_d2f>
 8002394:	4603      	mov	r3, r0
 8002396:	4a7b      	ldr	r2, [pc, #492]	; (8002584 <TrajectoryGenerator+0x3f4>)
 8002398:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 800239a:	4b77      	ldr	r3, [pc, #476]	; (8002578 <TrajectoryGenerator+0x3e8>)
 800239c:	ed93 7b00 	vldr	d7, [r3]
 80023a0:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002568 <TrajectoryGenerator+0x3d8>
 80023a4:	eeb0 0a47 	vmov.f32	s0, s14
 80023a8:	eef0 0a67 	vmov.f32	s1, s15
 80023ac:	f00a f854 	bl	800c458 <pow>
 80023b0:	ec51 0b10 	vmov	r0, r1, d0
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	f7fd ff14 	bl	80001e4 <__adddf3>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <TrajectoryGenerator+0x3e4>)
 80023c6:	ed93 7b00 	vldr	d7, [r3]
 80023ca:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002560 <TrajectoryGenerator+0x3d0>
 80023ce:	eeb0 0a47 	vmov.f32	s0, s14
 80023d2:	eef0 0a67 	vmov.f32	s1, s15
 80023d6:	f00a f83f 	bl	800c458 <pow>
 80023da:	ec53 2b10 	vmov	r2, r3, d0
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	f7fe f9df 	bl	80007a4 <__aeabi_ddiv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fb7f 	bl	8000af0 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a64      	ldr	r2, [pc, #400]	; (8002588 <TrajectoryGenerator+0x3f8>)
 80023f6:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 80023f8:	4b60      	ldr	r3, [pc, #384]	; (800257c <TrajectoryGenerator+0x3ec>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f84f 	bl	80004a0 <__aeabi_f2d>
 8002402:	4604      	mov	r4, r0
 8002404:	460d      	mov	r5, r1
 8002406:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <TrajectoryGenerator+0x3e0>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	4b59      	ldr	r3, [pc, #356]	; (8002574 <TrajectoryGenerator+0x3e4>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f9c7 	bl	80007a4 <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ec43 2b17 	vmov	d7, r2, r3
 800241e:	eeb0 0a47 	vmov.f32	s0, s14
 8002422:	eef0 0a67 	vmov.f32	s1, s15
 8002426:	f00a f887 	bl	800c538 <sqrt>
 800242a:	ec51 0b10 	vmov	r0, r1, d0
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	f7fd fed7 	bl	80001e4 <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f7fe f887 	bl	8000550 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4690      	mov	r8, r2
 8002448:	4699      	mov	r9, r3
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <TrajectoryGenerator+0x3f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f826 	bl	80004a0 <__aeabi_f2d>
 8002454:	4604      	mov	r4, r0
 8002456:	460d      	mov	r5, r1
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <TrajectoryGenerator+0x3e0>)
 800245a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <TrajectoryGenerator+0x3e8>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f99e 	bl	80007a4 <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4692      	mov	sl, r2
 800246e:	469b      	mov	fp, r3
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <TrajectoryGenerator+0x3e8>)
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <TrajectoryGenerator+0x3e4>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f992 	bl	80007a4 <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4650      	mov	r0, sl
 8002486:	4659      	mov	r1, fp
 8002488:	f7fd feac 	bl	80001e4 <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4640      	mov	r0, r8
 800249e:	4649      	mov	r1, r9
 80024a0:	f7fd fea0 	bl	80001e4 <__adddf3>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <TrajectoryGenerator+0x3e0>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe f84d 	bl	8000550 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe fb17 	bl	8000af0 <__aeabi_d2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a31      	ldr	r2, [pc, #196]	; (800258c <TrajectoryGenerator+0x3fc>)
 80024c6:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <TrajectoryGenerator+0x3f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ffe7 	bl	80004a0 <__aeabi_f2d>
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <TrajectoryGenerator+0x3e0>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe faca 	bl	8000a70 <__aeabi_dcmpgt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80ea 	beq.w	80026b8 <TrajectoryGenerator+0x528>
			if(theta_dest > Sa){
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <TrajectoryGenerator+0x3f8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd ffd9 	bl	80004a0 <__aeabi_f2d>
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <TrajectoryGenerator+0x400>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fe fa9e 	bl	8000a34 <__aeabi_dcmplt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d050      	beq.n	80025a0 <TrajectoryGenerator+0x410>
				//caseI
				tj = sqrt((w_max/j_max));
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <TrajectoryGenerator+0x3e0>)
 8002500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <TrajectoryGenerator+0x3e4>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f94b 	bl	80007a4 <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b17 	vmov	d7, r2, r3
 8002516:	eeb0 0a47 	vmov.f32	s0, s14
 800251a:	eef0 0a67 	vmov.f32	s1, s15
 800251e:	f00a f80b 	bl	800c538 <sqrt>
 8002522:	ec53 2b10 	vmov	r2, r3, d0
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe fae1 	bl	8000af0 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <TrajectoryGenerator+0x404>)
 8002532:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <TrajectoryGenerator+0x404>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a17      	ldr	r2, [pc, #92]	; (8002598 <TrajectoryGenerator+0x408>)
 800253a:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <TrajectoryGenerator+0x400>)
 800253e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <TrajectoryGenerator+0x3e0>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe f92c 	bl	80007a4 <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe facc 	bl	8000af0 <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <TrajectoryGenerator+0x40c>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e223      	b.n	80029a8 <TrajectoryGenerator+0x818>
 8002560:	00000000 	.word	0x00000000
 8002564:	40000000 	.word	0x40000000
 8002568:	00000000 	.word	0x00000000
 800256c:	40080000 	.word	0x40080000
 8002570:	20000068 	.word	0x20000068
 8002574:	20000078 	.word	0x20000078
 8002578:	20000070 	.word	0x20000070
 800257c:	200006e0 	.word	0x200006e0
 8002580:	200006e4 	.word	0x200006e4
 8002584:	200006e8 	.word	0x200006e8
 8002588:	200006ec 	.word	0x200006ec
 800258c:	200006f0 	.word	0x200006f0
 8002590:	200005d0 	.word	0x200005d0
 8002594:	200005b0 	.word	0x200005b0
 8002598:	200005b4 	.word	0x200005b4
 800259c:	200005b8 	.word	0x200005b8
			}
			else if(theta_dest < Sa){
 80025a0:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <TrajectoryGenerator+0x5d0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ff7b 	bl	80004a0 <__aeabi_f2d>
 80025aa:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <TrajectoryGenerator+0x5d4>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe fa5e 	bl	8000a70 <__aeabi_dcmpgt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 81f6 	beq.w	80029a8 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <TrajectoryGenerator+0x5d8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff6d 	bl	80004a0 <__aeabi_f2d>
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <TrajectoryGenerator+0x5d4>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe fa50 	bl	8000a70 <__aeabi_dcmpgt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d031      	beq.n	800263a <TrajectoryGenerator+0x4aa>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <TrajectoryGenerator+0x5d4>)
 80025d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <TrajectoryGenerator+0x5dc>)
 80025de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	f7fd fdfd 	bl	80001e4 <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fe f8d7 	bl	80007a4 <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ec43 2b17 	vmov	d7, r2, r3
 80025fe:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002758 <TrajectoryGenerator+0x5c8>
 8002602:	eeb0 0a47 	vmov.f32	s0, s14
 8002606:	eef0 0a67 	vmov.f32	s1, s15
 800260a:	f009 ff25 	bl	800c458 <pow>
 800260e:	ec53 2b10 	vmov	r2, r3, d0
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fe fa6b 	bl	8000af0 <__aeabi_d2f>
 800261a:	4603      	mov	r3, r0
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <TrajectoryGenerator+0x5e0>)
 800261e:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <TrajectoryGenerator+0x5e0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a53      	ldr	r2, [pc, #332]	; (8002774 <TrajectoryGenerator+0x5e4>)
 8002626:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 8002628:	4b51      	ldr	r3, [pc, #324]	; (8002770 <TrajectoryGenerator+0x5e0>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <TrajectoryGenerator+0x5e8>)
 8002634:	edc3 7a00 	vstr	s15, [r3]
 8002638:	e1b6      	b.n	80029a8 <TrajectoryGenerator+0x818>
				}
				else if(theta_dest > Sv){
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <TrajectoryGenerator+0x5d8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff2e 	bl	80004a0 <__aeabi_f2d>
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <TrajectoryGenerator+0x5d4>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe f9f3 	bl	8000a34 <__aeabi_dcmplt>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 81a9 	beq.w	80029a8 <TrajectoryGenerator+0x818>
					//caseIII
					tj = sqrt((w_max/j_max));
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <TrajectoryGenerator+0x5ec>)
 8002658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <TrajectoryGenerator+0x5dc>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fe f89f 	bl	80007a4 <__aeabi_ddiv>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	ec43 2b17 	vmov	d7, r2, r3
 800266e:	eeb0 0a47 	vmov.f32	s0, s14
 8002672:	eef0 0a67 	vmov.f32	s1, s15
 8002676:	f009 ff5f 	bl	800c538 <sqrt>
 800267a:	ec53 2b10 	vmov	r2, r3, d0
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa35 	bl	8000af0 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <TrajectoryGenerator+0x5e0>)
 800268a:	6013      	str	r3, [r2, #0]
					ta = tj;
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <TrajectoryGenerator+0x5e0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a38      	ldr	r2, [pc, #224]	; (8002774 <TrajectoryGenerator+0x5e4>)
 8002692:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <TrajectoryGenerator+0x5d4>)
 8002696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <TrajectoryGenerator+0x5ec>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fe f880 	bl	80007a4 <__aeabi_ddiv>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe fa20 	bl	8000af0 <__aeabi_d2f>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <TrajectoryGenerator+0x5e8>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e177      	b.n	80029a8 <TrajectoryGenerator+0x818>
				}
			}
		}
		else if(w_max >= Va){
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <TrajectoryGenerator+0x5f0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd feef 	bl	80004a0 <__aeabi_f2d>
 80026c2:	4b2e      	ldr	r3, [pc, #184]	; (800277c <TrajectoryGenerator+0x5ec>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fe f9be 	bl	8000a48 <__aeabi_dcmple>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 816a 	beq.w	80029a8 <TrajectoryGenerator+0x818>
			if(theta_dest < Sa){
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <TrajectoryGenerator+0x5d0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fee1 	bl	80004a0 <__aeabi_f2d>
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <TrajectoryGenerator+0x5d4>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fe f9c4 	bl	8000a70 <__aeabi_dcmpgt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d04a      	beq.n	8002784 <TrajectoryGenerator+0x5f4>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <TrajectoryGenerator+0x5d4>)
 80026f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <TrajectoryGenerator+0x5dc>)
 80026f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	f7fd fd71 	bl	80001e4 <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4620      	mov	r0, r4
 8002708:	4629      	mov	r1, r5
 800270a:	f7fe f84b 	bl	80007a4 <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	ec43 2b17 	vmov	d7, r2, r3
 8002716:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002758 <TrajectoryGenerator+0x5c8>
 800271a:	eeb0 0a47 	vmov.f32	s0, s14
 800271e:	eef0 0a67 	vmov.f32	s1, s15
 8002722:	f009 fe99 	bl	800c458 <pow>
 8002726:	ec53 2b10 	vmov	r2, r3, d0
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe f9df 	bl	8000af0 <__aeabi_d2f>
 8002732:	4603      	mov	r3, r0
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <TrajectoryGenerator+0x5e0>)
 8002736:	6013      	str	r3, [r2, #0]
				ta = tj;
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <TrajectoryGenerator+0x5e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <TrajectoryGenerator+0x5e4>)
 800273e:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <TrajectoryGenerator+0x5e0>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <TrajectoryGenerator+0x5e8>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
 8002750:	e12a      	b.n	80029a8 <TrajectoryGenerator+0x818>
 8002752:	bf00      	nop
 8002754:	f3af 8000 	nop.w
 8002758:	85f06f69 	.word	0x85f06f69
 800275c:	3fd554c9 	.word	0x3fd554c9
 8002760:	200006ec 	.word	0x200006ec
 8002764:	200005d0 	.word	0x200005d0
 8002768:	200006f0 	.word	0x200006f0
 800276c:	20000078 	.word	0x20000078
 8002770:	200005b0 	.word	0x200005b0
 8002774:	200005b4 	.word	0x200005b4
 8002778:	200005b8 	.word	0x200005b8
 800277c:	20000068 	.word	0x20000068
 8002780:	200006e8 	.word	0x200006e8
			}
			else if(theta_dest >= Sa){
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <TrajectoryGenerator+0x770>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe89 	bl	80004a0 <__aeabi_f2d>
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <TrajectoryGenerator+0x774>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fe f958 	bl	8000a48 <__aeabi_dcmple>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8104 	beq.w	80029a8 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <TrajectoryGenerator+0x778>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe7b 	bl	80004a0 <__aeabi_f2d>
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <TrajectoryGenerator+0x774>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fe f95e 	bl	8000a70 <__aeabi_dcmpgt>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80b6 	beq.w	8002928 <TrajectoryGenerator+0x798>
					//caseVI
					tj = a_max/j_max;
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <TrajectoryGenerator+0x77c>)
 80027be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <TrajectoryGenerator+0x780>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd ffec 	bl	80007a4 <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7fe f98c 	bl	8000af0 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <TrajectoryGenerator+0x784>)
 80027dc:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <TrajectoryGenerator+0x774>)
 80027e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <TrajectoryGenerator+0x788>)
 80027ea:	f7fd feb1 	bl	8000550 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	4b46      	ldr	r3, [pc, #280]	; (8002910 <TrajectoryGenerator+0x780>)
 80027f8:	ed93 7b00 	vldr	d7, [r3]
 80027fc:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80028f0 <TrajectoryGenerator+0x760>
 8002800:	eeb0 0a47 	vmov.f32	s0, s14
 8002804:	eef0 0a67 	vmov.f32	s1, s15
 8002808:	f009 fe26 	bl	800c458 <pow>
 800280c:	ec53 2b10 	vmov	r2, r3, d0
 8002810:	4620      	mov	r0, r4
 8002812:	4629      	mov	r1, r5
 8002814:	f7fd fe9c 	bl	8000550 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4614      	mov	r4, r2
 800281e:	461d      	mov	r5, r3
 8002820:	4b3a      	ldr	r3, [pc, #232]	; (800290c <TrajectoryGenerator+0x77c>)
 8002822:	ed93 7b00 	vldr	d7, [r3]
 8002826:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80028f8 <TrajectoryGenerator+0x768>
 800282a:	eeb0 0a47 	vmov.f32	s0, s14
 800282e:	eef0 0a67 	vmov.f32	s1, s15
 8002832:	f009 fe11 	bl	800c458 <pow>
 8002836:	ec53 2b10 	vmov	r2, r3, d0
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fcd1 	bl	80001e4 <__adddf3>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4614      	mov	r4, r2
 8002848:	461d      	mov	r5, r3
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <TrajectoryGenerator+0x780>)
 800284c:	ed93 7b00 	vldr	d7, [r3]
 8002850:	ed9f 1b27 	vldr	d1, [pc, #156]	; 80028f0 <TrajectoryGenerator+0x760>
 8002854:	eeb0 0a47 	vmov.f32	s0, s14
 8002858:	eef0 0a67 	vmov.f32	s1, s15
 800285c:	f009 fdfc 	bl	800c458 <pow>
 8002860:	ec51 0b10 	vmov	r0, r1, d0
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <TrajectoryGenerator+0x77c>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fe71 	bl	8000550 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd ff95 	bl	80007a4 <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	ec43 2b17 	vmov	d7, r2, r3
 8002882:	eeb0 0a47 	vmov.f32	s0, s14
 8002886:	eef0 0a67 	vmov.f32	s1, s15
 800288a:	f009 fe55 	bl	800c538 <sqrt>
 800288e:	ec55 4b10 	vmov	r4, r5, d0
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <TrajectoryGenerator+0x77c>)
 8002894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <TrajectoryGenerator+0x780>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd ff81 	bl	80007a4 <__aeabi_ddiv>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd fc99 	bl	80001e0 <__aeabi_dsub>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <TrajectoryGenerator+0x78c>)
 80028bc:	f7fd fe48 	bl	8000550 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f912 	bl	8000af0 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <TrajectoryGenerator+0x790>)
 80028d0:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <TrajectoryGenerator+0x790>)
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <TrajectoryGenerator+0x784>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <TrajectoryGenerator+0x794>)
 80028e4:	edc3 7a00 	vstr	s15, [r3]
 80028e8:	e05e      	b.n	80029a8 <TrajectoryGenerator+0x818>
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40000000 	.word	0x40000000
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40080000 	.word	0x40080000
 8002900:	200006ec 	.word	0x200006ec
 8002904:	200005d0 	.word	0x200005d0
 8002908:	200006f0 	.word	0x200006f0
 800290c:	20000070 	.word	0x20000070
 8002910:	20000078 	.word	0x20000078
 8002914:	200005b0 	.word	0x200005b0
 8002918:	40100000 	.word	0x40100000
 800291c:	3fe00000 	.word	0x3fe00000
 8002920:	200005b4 	.word	0x200005b4
 8002924:	200005b8 	.word	0x200005b8
				}
				else if(theta_dest >= Sv){
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <TrajectoryGenerator+0x944>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fdb7 	bl	80004a0 <__aeabi_f2d>
 8002932:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <TrajectoryGenerator+0x948>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fe f886 	bl	8000a48 <__aeabi_dcmple>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d032      	beq.n	80029a8 <TrajectoryGenerator+0x818>
					//caseV
					tj = a_max/j_max;
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <TrajectoryGenerator+0x94c>)
 8002944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002948:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <TrajectoryGenerator+0x950>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd ff29 	bl	80007a4 <__aeabi_ddiv>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f8c9 	bl	8000af0 <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
 8002960:	4a60      	ldr	r2, [pc, #384]	; (8002ae4 <TrajectoryGenerator+0x954>)
 8002962:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 8002964:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <TrajectoryGenerator+0x958>)
 8002966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <TrajectoryGenerator+0x94c>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd ff18 	bl	80007a4 <__aeabi_ddiv>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f8b8 	bl	8000af0 <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <TrajectoryGenerator+0x95c>)
 8002984:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 8002986:	4b54      	ldr	r3, [pc, #336]	; (8002ad8 <TrajectoryGenerator+0x948>)
 8002988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <TrajectoryGenerator+0x958>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd ff07 	bl	80007a4 <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f8a7 	bl	8000af0 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <TrajectoryGenerator+0x960>)
 80029a6:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 80029a8:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <TrajectoryGenerator+0x954>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <TrajectoryGenerator+0x964>)
 80029ae:	6013      	str	r3, [r2, #0]
		t2 = ta;
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <TrajectoryGenerator+0x95c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <TrajectoryGenerator+0x968>)
 80029b6:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <TrajectoryGenerator+0x95c>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <TrajectoryGenerator+0x954>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <TrajectoryGenerator+0x96c>)
 80029ca:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <TrajectoryGenerator+0x960>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <TrajectoryGenerator+0x970>)
 80029d4:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <TrajectoryGenerator+0x960>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <TrajectoryGenerator+0x954>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e6:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <TrajectoryGenerator+0x974>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <TrajectoryGenerator+0x960>)
 80029ee:	ed93 7a00 	vldr	s14, [r3]
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <TrajectoryGenerator+0x95c>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <TrajectoryGenerator+0x978>)
 80029fe:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <TrajectoryGenerator+0x960>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <TrajectoryGenerator+0x954>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <TrajectoryGenerator+0x95c>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <TrajectoryGenerator+0x97c>)
 8002a1e:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <TrajectoryGenerator+0x980>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	493a      	ldr	r1, [pc, #232]	; (8002b14 <TrajectoryGenerator+0x984>)
 8002a2a:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 8002a2e:	493a      	ldr	r1, [pc, #232]	; (8002b18 <TrajectoryGenerator+0x988>)
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8002a3c:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <TrajectoryGenerator+0x98c>)
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <TrajectoryGenerator+0x990>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d16b      	bne.n	8002b24 <TrajectoryGenerator+0x994>
		{
			j_max = negative(j_max);
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <TrajectoryGenerator+0x950>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f84b 	bl	8000af0 <__aeabi_d2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	ee00 3a10 	vmov	s0, r3
 8002a60:	f001 fc8c 	bl	800437c <negative>
 8002a64:	ee10 3a10 	vmov	r3, s0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd19 	bl	80004a0 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	491b      	ldr	r1, [pc, #108]	; (8002ae0 <TrajectoryGenerator+0x950>)
 8002a74:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <TrajectoryGenerator+0x94c>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f835 	bl	8000af0 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	ee00 3a10 	vmov	s0, r3
 8002a8c:	f001 fc76 	bl	800437c <negative>
 8002a90:	ee10 3a10 	vmov	r3, s0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd03 	bl	80004a0 <__aeabi_f2d>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	490f      	ldr	r1, [pc, #60]	; (8002adc <TrajectoryGenerator+0x94c>)
 8002aa0:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <TrajectoryGenerator+0x958>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f81f 	bl	8000af0 <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	ee00 3a10 	vmov	s0, r3
 8002ab8:	f001 fc60 	bl	800437c <negative>
 8002abc:	ee10 3a10 	vmov	r3, s0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fced 	bl	80004a0 <__aeabi_f2d>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <TrajectoryGenerator+0x958>)
 8002acc:	e9c1 2300 	strd	r2, r3, [r1]
 8002ad0:	e06a      	b.n	8002ba8 <TrajectoryGenerator+0xa18>
 8002ad2:	bf00      	nop
 8002ad4:	200006f0 	.word	0x200006f0
 8002ad8:	200005d0 	.word	0x200005d0
 8002adc:	20000070 	.word	0x20000070
 8002ae0:	20000078 	.word	0x20000078
 8002ae4:	200005b0 	.word	0x200005b0
 8002ae8:	20000068 	.word	0x20000068
 8002aec:	200005b4 	.word	0x200005b4
 8002af0:	200005b8 	.word	0x200005b8
 8002af4:	20000594 	.word	0x20000594
 8002af8:	20000598 	.word	0x20000598
 8002afc:	2000059c 	.word	0x2000059c
 8002b00:	200005a0 	.word	0x200005a0
 8002b04:	200005a4 	.word	0x200005a4
 8002b08:	200005a8 	.word	0x200005a8
 8002b0c:	200005ac 	.word	0x200005ac
 8002b10:	200005c0 	.word	0x200005c0
 8002b14:	20000620 	.word	0x20000620
 8002b18:	20000628 	.word	0x20000628
 8002b1c:	20000630 	.word	0x20000630
 8002b20:	200000cd 	.word	0x200000cd
		}

		else
		{
			j_max = positive(j_max);
 8002b24:	4bcc      	ldr	r3, [pc, #816]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fd ffdf 	bl	8000af0 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	ee00 3a10 	vmov	s0, r3
 8002b38:	f001 fc3c 	bl	80043b4 <positive>
 8002b3c:	ee10 3a10 	vmov	r3, s0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fcad 	bl	80004a0 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	49c3      	ldr	r1, [pc, #780]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002b4c:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 8002b50:	4bc2      	ldr	r3, [pc, #776]	; (8002e5c <TrajectoryGenerator+0xccc>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fd ffc9 	bl	8000af0 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	ee00 3a10 	vmov	s0, r3
 8002b64:	f001 fc26 	bl	80043b4 <positive>
 8002b68:	ee10 3a10 	vmov	r3, s0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fc97 	bl	80004a0 <__aeabi_f2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	49b9      	ldr	r1, [pc, #740]	; (8002e5c <TrajectoryGenerator+0xccc>)
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 8002b7c:	4bb8      	ldr	r3, [pc, #736]	; (8002e60 <TrajectoryGenerator+0xcd0>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	f7fd ffb3 	bl	8000af0 <__aeabi_d2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	ee00 3a10 	vmov	s0, r3
 8002b90:	f001 fc10 	bl	80043b4 <positive>
 8002b94:	ee10 3a10 	vmov	r3, s0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc81 	bl	80004a0 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	49af      	ldr	r1, [pc, #700]	; (8002e60 <TrajectoryGenerator+0xcd0>)
 8002ba4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 8002ba8:	4bab      	ldr	r3, [pc, #684]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bae:	a3a4      	add	r3, pc, #656	; (adr r3, 8002e40 <TrajectoryGenerator+0xcb0>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fccc 	bl	8000550 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4ba8      	ldr	r3, [pc, #672]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc6b 	bl	80004a0 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002e48 <TrajectoryGenerator+0xcb8>
 8002bd2:	ec43 2b10 	vmov	d0, r2, r3
 8002bd6:	f009 fc3f 	bl	800c458 <pow>
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ff7f 	bl	8000af0 <__aeabi_d2f>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4a9c      	ldr	r2, [pc, #624]	; (8002e68 <TrajectoryGenerator+0xcd8>)
 8002bf6:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8002bf8:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	4b9a      	ldr	r3, [pc, #616]	; (8002e6c <TrajectoryGenerator+0xcdc>)
 8002c04:	f7fd fca4 	bl	8000550 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc43 	bl	80004a0 <__aeabi_f2d>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002e50 <TrajectoryGenerator+0xcc0>
 8002c22:	ec43 2b10 	vmov	d0, r2, r3
 8002c26:	f009 fc17 	bl	800c458 <pow>
 8002c2a:	ec53 2b10 	vmov	r2, r3, d0
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fc8d 	bl	8000550 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ff57 	bl	8000af0 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a8a      	ldr	r2, [pc, #552]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002c46:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc27 	bl	80004a0 <__aeabi_f2d>
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fc7a 	bl	8000550 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd ff44 	bl	8000af0 <__aeabi_d2f>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a82      	ldr	r2, [pc, #520]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002c6c:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002c6e:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <TrajectoryGenerator+0xcd8>)
 8002c70:	ed93 7a00 	vldr	s14, [r3]
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002c76:	edd3 6a00 	vldr	s13, [r3]
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002c7c:	ed93 6a00 	vldr	s12, [r3]
 8002c80:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c92:	ee17 0a90 	vmov	r0, s15
 8002c96:	f7fd fc03 	bl	80004a0 <__aeabi_f2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fbfc 	bl	80004a0 <__aeabi_f2d>
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <TrajectoryGenerator+0xcdc>)
 8002cae:	f7fd fc4f 	bl	8000550 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4690      	mov	r8, r2
 8002cb8:	4699      	mov	r9, r3
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cca:	ee17 0a90 	vmov	r0, s15
 8002cce:	f7fd fbe7 	bl	80004a0 <__aeabi_f2d>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002e50 <TrajectoryGenerator+0xcc0>
 8002cda:	ec43 2b10 	vmov	d0, r2, r3
 8002cde:	f009 fbbb 	bl	800c458 <pow>
 8002ce2:	ec53 2b10 	vmov	r2, r3, d0
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd fc31 	bl	8000550 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fa75 	bl	80001e4 <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd fef5 	bl	8000af0 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <TrajectoryGenerator+0xcd8>)
 8002d0a:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002d0c:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002d0e:	ed93 7a00 	vldr	s14, [r3]
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002d14:	edd3 6a00 	vldr	s13, [r3]
 8002d18:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002d1a:	ed93 6a00 	vldr	s12, [r3]
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <TrajectoryGenerator+0xcd4>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002d32:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002d36:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a4e      	ldr	r2, [pc, #312]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002d3c:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <TrajectoryGenerator+0xcd8>)
 8002d40:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002d46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d4a:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <TrajectoryGenerator+0xcec>)
 8002d4c:	ed93 6a00 	vldr	s12, [r3]
 8002d50:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	ee17 0a90 	vmov	r0, s15
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	460d      	mov	r5, r1
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <TrajectoryGenerator+0xce4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fb94 	bl	80004a0 <__aeabi_f2d>
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <TrajectoryGenerator+0xcdc>)
 8002d7e:	f7fd fbe7 	bl	8000550 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <TrajectoryGenerator+0xcec>)
 8002d8c:	ed93 7a00 	vldr	s14, [r3]
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fb7f 	bl	80004a0 <__aeabi_f2d>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8002e50 <TrajectoryGenerator+0xcc0>
 8002daa:	ec43 2b10 	vmov	d0, r2, r3
 8002dae:	f009 fb53 	bl	800c458 <pow>
 8002db2:	ec53 2b10 	vmov	r2, r3, d0
 8002db6:	4640      	mov	r0, r8
 8002db8:	4649      	mov	r1, r9
 8002dba:	f7fd fbc9 	bl	8000550 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fa0d 	bl	80001e4 <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4614      	mov	r4, r2
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <TrajectoryGenerator+0xcec>)
 8002dd4:	ed93 7a00 	vldr	s14, [r3]
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <TrajectoryGenerator+0xce8>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de2:	ee17 0a90 	vmov	r0, s15
 8002de6:	f7fd fb5b 	bl	80004a0 <__aeabi_f2d>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002e48 <TrajectoryGenerator+0xcb8>
 8002df2:	ec43 2b10 	vmov	d0, r2, r3
 8002df6:	f009 fb2f 	bl	800c458 <pow>
 8002dfa:	ec51 0b10 	vmov	r0, r1, d0
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <TrajectoryGenerator+0xcc8>)
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f7fd fba4 	bl	8000550 <__aeabi_dmul>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <TrajectoryGenerator+0xcf0>)
 8002e16:	f7fd fcc5 	bl	80007a4 <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4629      	mov	r1, r5
 8002e22:	f7fd f9dd 	bl	80001e0 <__aeabi_dsub>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7fd fe5f 	bl	8000af0 <__aeabi_d2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <TrajectoryGenerator+0xcd8>)
 8002e36:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <TrajectoryGenerator+0xce0>)
 8002e3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e3e:	e021      	b.n	8002e84 <TrajectoryGenerator+0xcf4>
 8002e40:	55555555 	.word	0x55555555
 8002e44:	3fc55555 	.word	0x3fc55555
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	40080000 	.word	0x40080000
 8002e50:	00000000 	.word	0x00000000
 8002e54:	40000000 	.word	0x40000000
 8002e58:	20000078 	.word	0x20000078
 8002e5c:	20000070 	.word	0x20000070
 8002e60:	20000068 	.word	0x20000068
 8002e64:	20000594 	.word	0x20000594
 8002e68:	20000608 	.word	0x20000608
 8002e6c:	3fe00000 	.word	0x3fe00000
 8002e70:	200005f0 	.word	0x200005f0
 8002e74:	200005d8 	.word	0x200005d8
 8002e78:	20000598 	.word	0x20000598
 8002e7c:	2000059c 	.word	0x2000059c
 8002e80:	40180000 	.word	0x40180000
 8002e84:	4bd0      	ldr	r3, [pc, #832]	; (80031c8 <TrajectoryGenerator+0x1038>)
 8002e86:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e8a:	4bd0      	ldr	r3, [pc, #832]	; (80031cc <TrajectoryGenerator+0x103c>)
 8002e8c:	ed93 6a00 	vldr	s12, [r3]
 8002e90:	4bcf      	ldr	r3, [pc, #828]	; (80031d0 <TrajectoryGenerator+0x1040>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea2:	ee17 0a90 	vmov	r0, s15
 8002ea6:	f7fd fafb 	bl	80004a0 <__aeabi_f2d>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	460d      	mov	r5, r1
 8002eae:	4bc9      	ldr	r3, [pc, #804]	; (80031d4 <TrajectoryGenerator+0x1044>)
 8002eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4bc7      	ldr	r3, [pc, #796]	; (80031d8 <TrajectoryGenerator+0x1048>)
 8002eba:	f7fd fb49 	bl	8000550 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4bc1      	ldr	r3, [pc, #772]	; (80031cc <TrajectoryGenerator+0x103c>)
 8002ec8:	ed93 7a00 	vldr	s14, [r3]
 8002ecc:	4bc0      	ldr	r3, [pc, #768]	; (80031d0 <TrajectoryGenerator+0x1040>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fae1 	bl	80004a0 <__aeabi_f2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80031b8 <TrajectoryGenerator+0x1028>
 8002ee6:	ec43 2b10 	vmov	d0, r2, r3
 8002eea:	f009 fab5 	bl	800c458 <pow>
 8002eee:	ec53 2b10 	vmov	r2, r3, d0
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	f7fd fb2b 	bl	8000550 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd f96d 	bl	80001e0 <__aeabi_dsub>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fdef 	bl	8000af0 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4ab1      	ldr	r2, [pc, #708]	; (80031dc <TrajectoryGenerator+0x104c>)
 8002f16:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 8002f18:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <TrajectoryGenerator+0x1038>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fabf 	bl	80004a0 <__aeabi_f2d>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	4ba9      	ldr	r3, [pc, #676]	; (80031cc <TrajectoryGenerator+0x103c>)
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	4ba8      	ldr	r3, [pc, #672]	; (80031d0 <TrajectoryGenerator+0x1040>)
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	ee17 0a90 	vmov	r0, s15
 8002f3a:	f7fd fab1 	bl	80004a0 <__aeabi_f2d>
 8002f3e:	4ba5      	ldr	r3, [pc, #660]	; (80031d4 <TrajectoryGenerator+0x1044>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fb04 	bl	8000550 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7fd f946 	bl	80001e0 <__aeabi_dsub>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fdc8 	bl	8000af0 <__aeabi_d2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a99      	ldr	r2, [pc, #612]	; (80031c8 <TrajectoryGenerator+0x1038>)
 8002f64:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8002f66:	4b9e      	ldr	r3, [pc, #632]	; (80031e0 <TrajectoryGenerator+0x1050>)
 8002f68:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f6c:	4b9b      	ldr	r3, [pc, #620]	; (80031dc <TrajectoryGenerator+0x104c>)
 8002f6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f72:	4b9c      	ldr	r3, [pc, #624]	; (80031e4 <TrajectoryGenerator+0x1054>)
 8002f74:	ed93 6a00 	vldr	s12, [r3]
 8002f78:	4b94      	ldr	r3, [pc, #592]	; (80031cc <TrajectoryGenerator+0x103c>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8a:	4b95      	ldr	r3, [pc, #596]	; (80031e0 <TrajectoryGenerator+0x1050>)
 8002f8c:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <TrajectoryGenerator+0x104c>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a91      	ldr	r2, [pc, #580]	; (80031dc <TrajectoryGenerator+0x104c>)
 8002f96:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8002f98:	4b8b      	ldr	r3, [pc, #556]	; (80031c8 <TrajectoryGenerator+0x1038>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a8a      	ldr	r2, [pc, #552]	; (80031c8 <TrajectoryGenerator+0x1038>)
 8002f9e:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <TrajectoryGenerator+0x1050>)
 8002fa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <TrajectoryGenerator+0x104c>)
 8002fa8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fac:	4b8e      	ldr	r3, [pc, #568]	; (80031e8 <TrajectoryGenerator+0x1058>)
 8002fae:	ed93 6a00 	vldr	s12, [r3]
 8002fb2:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <TrajectoryGenerator+0x1054>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc4:	ee17 0a90 	vmov	r0, s15
 8002fc8:	f7fd fa6a 	bl	80004a0 <__aeabi_f2d>
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460d      	mov	r5, r1
 8002fd0:	4b85      	ldr	r3, [pc, #532]	; (80031e8 <TrajectoryGenerator+0x1058>)
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <TrajectoryGenerator+0x1054>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe0:	ee17 0a90 	vmov	r0, s15
 8002fe4:	f7fd fa5c 	bl	80004a0 <__aeabi_f2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80031c0 <TrajectoryGenerator+0x1030>
 8002ff0:	ec43 2b10 	vmov	d0, r2, r3
 8002ff4:	f009 fa30 	bl	800c458 <pow>
 8002ff8:	ec51 0b10 	vmov	r0, r1, d0
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <TrajectoryGenerator+0x1044>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd faa5 	bl	8000550 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <TrajectoryGenerator+0x105c>)
 8003014:	f7fd fbc6 	bl	80007a4 <__aeabi_ddiv>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd f8de 	bl	80001e0 <__aeabi_dsub>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fd60 	bl	8000af0 <__aeabi_d2f>
 8003030:	4603      	mov	r3, r0
 8003032:	4a6b      	ldr	r2, [pc, #428]	; (80031e0 <TrajectoryGenerator+0x1050>)
 8003034:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 8003036:	4b69      	ldr	r3, [pc, #420]	; (80031dc <TrajectoryGenerator+0x104c>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa30 	bl	80004a0 <__aeabi_f2d>
 8003040:	4604      	mov	r4, r0
 8003042:	460d      	mov	r5, r1
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <TrajectoryGenerator+0x1044>)
 8003046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	4b62      	ldr	r3, [pc, #392]	; (80031d8 <TrajectoryGenerator+0x1048>)
 8003050:	f7fd fa7e 	bl	8000550 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4690      	mov	r8, r2
 800305a:	4699      	mov	r9, r3
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <TrajectoryGenerator+0x1058>)
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	4b60      	ldr	r3, [pc, #384]	; (80031e4 <TrajectoryGenerator+0x1054>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	ee17 0a90 	vmov	r0, s15
 8003070:	f7fd fa16 	bl	80004a0 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 80031b8 <TrajectoryGenerator+0x1028>
 800307c:	ec43 2b10 	vmov	d0, r2, r3
 8003080:	f009 f9ea 	bl	800c458 <pow>
 8003084:	ec53 2b10 	vmov	r2, r3, d0
 8003088:	4640      	mov	r0, r8
 800308a:	4649      	mov	r1, r9
 800308c:	f7fd fa60 	bl	8000550 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4620      	mov	r0, r4
 8003096:	4629      	mov	r1, r5
 8003098:	f7fd f8a2 	bl	80001e0 <__aeabi_dsub>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd24 	bl	8000af0 <__aeabi_d2f>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4a4c      	ldr	r2, [pc, #304]	; (80031dc <TrajectoryGenerator+0x104c>)
 80030ac:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 80030ae:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <TrajectoryGenerator+0x1038>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd f9f4 	bl	80004a0 <__aeabi_f2d>
 80030b8:	4604      	mov	r4, r0
 80030ba:	460d      	mov	r5, r1
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <TrajectoryGenerator+0x1058>)
 80030be:	ed93 7a00 	vldr	s14, [r3]
 80030c2:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <TrajectoryGenerator+0x1054>)
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030cc:	ee17 0a90 	vmov	r0, s15
 80030d0:	f7fd f9e6 	bl	80004a0 <__aeabi_f2d>
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <TrajectoryGenerator+0x1044>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd fa39 	bl	8000550 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f7fd f87b 	bl	80001e0 <__aeabi_dsub>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fcfd 	bl	8000af0 <__aeabi_d2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <TrajectoryGenerator+0x1038>)
 80030fa:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <TrajectoryGenerator+0x1050>)
 80030fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <TrajectoryGenerator+0x104c>)
 8003104:	edd3 6a04 	vldr	s13, [r3, #16]
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <TrajectoryGenerator+0x1060>)
 800310a:	ed93 6a00 	vldr	s12, [r3]
 800310e:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <TrajectoryGenerator+0x1058>)
 8003110:	edd3 7a00 	vldr	s15, [r3]
 8003114:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	ee17 0a90 	vmov	r0, s15
 8003124:	f7fd f9bc 	bl	80004a0 <__aeabi_f2d>
 8003128:	4604      	mov	r4, r0
 800312a:	460d      	mov	r5, r1
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <TrajectoryGenerator+0x1038>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f9b5 	bl	80004a0 <__aeabi_f2d>
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <TrajectoryGenerator+0x1048>)
 800313c:	f7fd fa08 	bl	8000550 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4690      	mov	r8, r2
 8003146:	4699      	mov	r9, r3
 8003148:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <TrajectoryGenerator+0x1060>)
 800314a:	ed93 7a00 	vldr	s14, [r3]
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <TrajectoryGenerator+0x1058>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003158:	ee17 0a90 	vmov	r0, s15
 800315c:	f7fd f9a0 	bl	80004a0 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80031b8 <TrajectoryGenerator+0x1028>
 8003168:	ec43 2b10 	vmov	d0, r2, r3
 800316c:	f009 f974 	bl	800c458 <pow>
 8003170:	ec53 2b10 	vmov	r2, r3, d0
 8003174:	4640      	mov	r0, r8
 8003176:	4649      	mov	r1, r9
 8003178:	f7fd f9ea 	bl	8000550 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4620      	mov	r0, r4
 8003182:	4629      	mov	r1, r5
 8003184:	f7fd f82e 	bl	80001e4 <__adddf3>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fcae 	bl	8000af0 <__aeabi_d2f>
 8003194:	4603      	mov	r3, r0
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <TrajectoryGenerator+0x1050>)
 8003198:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <TrajectoryGenerator+0x104c>)
 800319c:	ed93 7a04 	vldr	s14, [r3, #16]
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <TrajectoryGenerator+0x1038>)
 80031a2:	edd3 6a04 	vldr	s13, [r3, #16]
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <TrajectoryGenerator+0x1060>)
 80031a8:	ed93 6a00 	vldr	s12, [r3]
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <TrajectoryGenerator+0x1058>)
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031b6:	e01d      	b.n	80031f4 <TrajectoryGenerator+0x1064>
 80031b8:	00000000 	.word	0x00000000
 80031bc:	40000000 	.word	0x40000000
 80031c0:	00000000 	.word	0x00000000
 80031c4:	40080000 	.word	0x40080000
 80031c8:	200005d8 	.word	0x200005d8
 80031cc:	2000059c 	.word	0x2000059c
 80031d0:	20000598 	.word	0x20000598
 80031d4:	20000078 	.word	0x20000078
 80031d8:	3fe00000 	.word	0x3fe00000
 80031dc:	200005f0 	.word	0x200005f0
 80031e0:	20000608 	.word	0x20000608
 80031e4:	200005a0 	.word	0x200005a0
 80031e8:	200005a4 	.word	0x200005a4
 80031ec:	40180000 	.word	0x40180000
 80031f0:	200005a8 	.word	0x200005a8
 80031f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fc:	4b82      	ldr	r3, [pc, #520]	; (8003408 <TrajectoryGenerator+0x1278>)
 80031fe:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <TrajectoryGenerator+0x127c>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4a81      	ldr	r2, [pc, #516]	; (800340c <TrajectoryGenerator+0x127c>)
 8003208:	6153      	str	r3, [r2, #20]

		//Change Cascade Gain
		if (theta_dest >= 6.0737)
 800320a:	4b81      	ldr	r3, [pc, #516]	; (8003410 <TrajectoryGenerator+0x1280>)
 800320c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003210:	a373      	add	r3, pc, #460	; (adr r3, 80033e0 <TrajectoryGenerator+0x1250>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd fc21 	bl	8000a5c <__aeabi_dcmpge>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <TrajectoryGenerator+0x10c4>
//
//			kp_2 = 0.002;
//			ki_2 = 0.07;
//			kd_2 = 0;

			kp_1 = 0;
 8003220:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <TrajectoryGenerator+0x1284>)
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
			ki_1 = 0;
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <TrajectoryGenerator+0x1288>)
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
			kd_1 = 0;
 8003230:	4b7a      	ldr	r3, [pc, #488]	; (800341c <TrajectoryGenerator+0x128c>)
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

			kp_2 = 0.003;
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <TrajectoryGenerator+0x1290>)
 800323a:	4a7a      	ldr	r2, [pc, #488]	; (8003424 <TrajectoryGenerator+0x1294>)
 800323c:	601a      	str	r2, [r3, #0]
			ki_2 = 0.05;
 800323e:	4b7a      	ldr	r3, [pc, #488]	; (8003428 <TrajectoryGenerator+0x1298>)
 8003240:	4a7a      	ldr	r2, [pc, #488]	; (800342c <TrajectoryGenerator+0x129c>)
 8003242:	601a      	str	r2, [r3, #0]
			kd_2 = 0;
 8003244:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <TrajectoryGenerator+0x12a0>)
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

			TrajectoryEvaluationFlag =1;
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <TrajectoryGenerator+0x12a4>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e041      	b.n	80032d8 <TrajectoryGenerator+0x1148>

		}

		else if(theta_dest <= 0.524){
 8003254:	4b6e      	ldr	r3, [pc, #440]	; (8003410 <TrajectoryGenerator+0x1280>)
 8003256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800325a:	a363      	add	r3, pc, #396	; (adr r3, 80033e8 <TrajectoryGenerator+0x1258>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f7fd fbf2 	bl	8000a48 <__aeabi_dcmple>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01b      	beq.n	80032a2 <TrajectoryGenerator+0x1112>
			kp_1 = kp_1_m;
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <TrajectoryGenerator+0x12a8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a69      	ldr	r2, [pc, #420]	; (8003414 <TrajectoryGenerator+0x1284>)
 8003270:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_m;
 8003272:	4b72      	ldr	r3, [pc, #456]	; (800343c <TrajectoryGenerator+0x12ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a68      	ldr	r2, [pc, #416]	; (8003418 <TrajectoryGenerator+0x1288>)
 8003278:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_m;
 800327a:	4b71      	ldr	r3, [pc, #452]	; (8003440 <TrajectoryGenerator+0x12b0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a67      	ldr	r2, [pc, #412]	; (800341c <TrajectoryGenerator+0x128c>)
 8003280:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_m;
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <TrajectoryGenerator+0x12b4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a66      	ldr	r2, [pc, #408]	; (8003420 <TrajectoryGenerator+0x1290>)
 8003288:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_m;
 800328a:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <TrajectoryGenerator+0x12b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a66      	ldr	r2, [pc, #408]	; (8003428 <TrajectoryGenerator+0x1298>)
 8003290:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_m;
 8003292:	4b6e      	ldr	r3, [pc, #440]	; (800344c <TrajectoryGenerator+0x12bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a66      	ldr	r2, [pc, #408]	; (8003430 <TrajectoryGenerator+0x12a0>)
 8003298:	6013      	str	r3, [r2, #0]
			TrajectoryEvaluationFlag = 0;
 800329a:	4b66      	ldr	r3, [pc, #408]	; (8003434 <TrajectoryGenerator+0x12a4>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e01a      	b.n	80032d8 <TrajectoryGenerator+0x1148>
		}

		else
		{
			kp_1 = kp_1_m;
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <TrajectoryGenerator+0x12a8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <TrajectoryGenerator+0x1284>)
 80032a8:	6013      	str	r3, [r2, #0]
			ki_1 = ki_1_m;
 80032aa:	4b64      	ldr	r3, [pc, #400]	; (800343c <TrajectoryGenerator+0x12ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5a      	ldr	r2, [pc, #360]	; (8003418 <TrajectoryGenerator+0x1288>)
 80032b0:	6013      	str	r3, [r2, #0]
			kd_1 = kd_1_m;
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <TrajectoryGenerator+0x12b0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a59      	ldr	r2, [pc, #356]	; (800341c <TrajectoryGenerator+0x128c>)
 80032b8:	6013      	str	r3, [r2, #0]

			kp_2 = kp_2_m;
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <TrajectoryGenerator+0x12b4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a58      	ldr	r2, [pc, #352]	; (8003420 <TrajectoryGenerator+0x1290>)
 80032c0:	6013      	str	r3, [r2, #0]
			ki_2 = ki_2_m;
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <TrajectoryGenerator+0x12b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a58      	ldr	r2, [pc, #352]	; (8003428 <TrajectoryGenerator+0x1298>)
 80032c8:	6013      	str	r3, [r2, #0]
			kd_2 = kd_2_m;
 80032ca:	4b60      	ldr	r3, [pc, #384]	; (800344c <TrajectoryGenerator+0x12bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a58      	ldr	r2, [pc, #352]	; (8003430 <TrajectoryGenerator+0x12a0>)
 80032d0:	6013      	str	r3, [r2, #0]
			TrajectoryEvaluationFlag =1;
 80032d2:	4b58      	ldr	r3, [pc, #352]	; (8003434 <TrajectoryGenerator+0x12a4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
		}

		//Check Volt Constant
		if(theta_f <= 1.6){ //90 degree
 80032d8:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <TrajectoryGenerator+0x12c0>)
 80032da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032de:	a344      	add	r3, pc, #272	; (adr r3, 80033f0 <TrajectoryGenerator+0x1260>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f7fd fbb0 	bl	8000a48 <__aeabi_dcmple>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <TrajectoryGenerator+0x116c>
			volt_constant = 2.5; //2.9;
 80032ee:	4b59      	ldr	r3, [pc, #356]	; (8003454 <TrajectoryGenerator+0x12c4>)
 80032f0:	4a59      	ldr	r2, [pc, #356]	; (8003458 <TrajectoryGenerator+0x12c8>)
 80032f2:	601a      	str	r2, [r3, #0]
			volt_statics = 3.8;
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <TrajectoryGenerator+0x12cc>)
 80032f6:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <TrajectoryGenerator+0x12d0>)
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e02c      	b.n	8003356 <TrajectoryGenerator+0x11c6>
		}
		else if(theta_f <= 3.13){ //180 degree
 80032fc:	4b54      	ldr	r3, [pc, #336]	; (8003450 <TrajectoryGenerator+0x12c0>)
 80032fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003302:	a33d      	add	r3, pc, #244	; (adr r3, 80033f8 <TrajectoryGenerator+0x1268>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f7fd fb9e 	bl	8000a48 <__aeabi_dcmple>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <TrajectoryGenerator+0x1192>
			volt_constant = 3.5;//4.0;
 8003312:	4b50      	ldr	r3, [pc, #320]	; (8003454 <TrajectoryGenerator+0x12c4>)
 8003314:	4a53      	ldr	r2, [pc, #332]	; (8003464 <TrajectoryGenerator+0x12d4>)
 8003316:	601a      	str	r2, [r3, #0]
			volt_statics = 4.0;
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <TrajectoryGenerator+0x12cc>)
 800331a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e019      	b.n	8003356 <TrajectoryGenerator+0x11c6>
		}
		else if(theta_f <= 4.72){ //270 degree
 8003322:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <TrajectoryGenerator+0x12c0>)
 8003324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003328:	a335      	add	r3, pc, #212	; (adr r3, 8003400 <TrajectoryGenerator+0x1270>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd fb8b 	bl	8000a48 <__aeabi_dcmple>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <TrajectoryGenerator+0x11b8>
			volt_constant = 4.0;//4.35;
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <TrajectoryGenerator+0x12c4>)
 800333a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800333e:	601a      	str	r2, [r3, #0]
			volt_statics = 4.6;
 8003340:	4b46      	ldr	r3, [pc, #280]	; (800345c <TrajectoryGenerator+0x12cc>)
 8003342:	4a49      	ldr	r2, [pc, #292]	; (8003468 <TrajectoryGenerator+0x12d8>)
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e006      	b.n	8003356 <TrajectoryGenerator+0x11c6>
		}
		else{
			volt_constant = 3.0;//3.9;
 8003348:	4b42      	ldr	r3, [pc, #264]	; (8003454 <TrajectoryGenerator+0x12c4>)
 800334a:	4a48      	ldr	r2, [pc, #288]	; (800346c <TrajectoryGenerator+0x12dc>)
 800334c:	601a      	str	r2, [r3, #0]
			volt_statics = 4.0;
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <TrajectoryGenerator+0x12cc>)
 8003350:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003354:	601a      	str	r2, [r3, #0]
		}

		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 8003356:	4b46      	ldr	r3, [pc, #280]	; (8003470 <TrajectoryGenerator+0x12e0>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 800335c:	4b45      	ldr	r3, [pc, #276]	; (8003474 <TrajectoryGenerator+0x12e4>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]


		//Reset Cascade PID
		e1 = 0;
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <TrajectoryGenerator+0x12e8>)
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
		s1 = 0;
 800336a:	4b44      	ldr	r3, [pc, #272]	; (800347c <TrajectoryGenerator+0x12ec>)
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
		p1 = 0;
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <TrajectoryGenerator+0x12f0>)
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
		u1 = 0;
 800337a:	4b42      	ldr	r3, [pc, #264]	; (8003484 <TrajectoryGenerator+0x12f4>)
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
		e2 = 0;
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <TrajectoryGenerator+0x12f8>)
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
		s2 = 0;
 800338a:	4b40      	ldr	r3, [pc, #256]	; (800348c <TrajectoryGenerator+0x12fc>)
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
		p2 = 0;
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <TrajectoryGenerator+0x1300>)
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
		u2 = 0;
 800339a:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <TrajectoryGenerator+0x1304>)
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

		//Reset TransferFunction
		for(int i=0;i<4;i++){
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	e010      	b.n	80033ca <TrajectoryGenerator+0x123a>
			u_i[i]=0;
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <TrajectoryGenerator+0x1308>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
			y_i[i]=0;
 80033b6:	4a39      	ldr	r2, [pc, #228]	; (800349c <TrajectoryGenerator+0x130c>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	ddeb      	ble.n	80033a8 <TrajectoryGenerator+0x1218>
		}
	}
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w
 80033e0:	0346dc5d 	.word	0x0346dc5d
 80033e4:	40184b78 	.word	0x40184b78
 80033e8:	a5e353f8 	.word	0xa5e353f8
 80033ec:	3fe0c49b 	.word	0x3fe0c49b
 80033f0:	9999999a 	.word	0x9999999a
 80033f4:	3ff99999 	.word	0x3ff99999
 80033f8:	70a3d70a 	.word	0x70a3d70a
 80033fc:	40090a3d 	.word	0x40090a3d
 8003400:	ae147ae1 	.word	0xae147ae1
 8003404:	4012e147 	.word	0x4012e147
 8003408:	200005f0 	.word	0x200005f0
 800340c:	200005d8 	.word	0x200005d8
 8003410:	200005d0 	.word	0x200005d0
 8003414:	20000654 	.word	0x20000654
 8003418:	20000658 	.word	0x20000658
 800341c:	2000065c 	.word	0x2000065c
 8003420:	20000660 	.word	0x20000660
 8003424:	3b449ba6 	.word	0x3b449ba6
 8003428:	20000664 	.word	0x20000664
 800342c:	3d4ccccd 	.word	0x3d4ccccd
 8003430:	20000668 	.word	0x20000668
 8003434:	200005bc 	.word	0x200005bc
 8003438:	2000066c 	.word	0x2000066c
 800343c:	20000670 	.word	0x20000670
 8003440:	20000674 	.word	0x20000674
 8003444:	20000080 	.word	0x20000080
 8003448:	20000084 	.word	0x20000084
 800344c:	20000678 	.word	0x20000678
 8003450:	200005c8 	.word	0x200005c8
 8003454:	200003e0 	.word	0x200003e0
 8003458:	40200000 	.word	0x40200000
 800345c:	200003e4 	.word	0x200003e4
 8003460:	40733333 	.word	0x40733333
 8003464:	40600000 	.word	0x40600000
 8003468:	40933333 	.word	0x40933333
 800346c:	40400000 	.word	0x40400000
 8003470:	200003ea 	.word	0x200003ea
 8003474:	200003e9 	.word	0x200003e9
 8003478:	20000634 	.word	0x20000634
 800347c:	20000638 	.word	0x20000638
 8003480:	2000063c 	.word	0x2000063c
 8003484:	20000640 	.word	0x20000640
 8003488:	20000644 	.word	0x20000644
 800348c:	20000648 	.word	0x20000648
 8003490:	2000064c 	.word	0x2000064c
 8003494:	20000650 	.word	0x20000650
 8003498:	200006b8 	.word	0x200006b8
 800349c:	200006c8 	.word	0x200006c8

080034a0 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	af00      	add	r7, sp, #0
	if(TrajectoryEvaluationFlag == 1){
 80034a6:	4b90      	ldr	r3, [pc, #576]	; (80036e8 <TrajectoryEvaluation+0x248>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f040 8573 	bne.w	8003f96 <TrajectoryEvaluation+0xaf6>

	if( 0 <= t && t < t1){
 80034b0:	4b8e      	ldr	r3, [pc, #568]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	db70      	blt.n	80035a2 <TrajectoryEvaluation+0x102>
 80034c0:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	4b8a      	ldr	r3, [pc, #552]	; (80036f0 <TrajectoryEvaluation+0x250>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d565      	bpl.n	80035a2 <TrajectoryEvaluation+0x102>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 80034d6:	4b87      	ldr	r3, [pc, #540]	; (80036f4 <TrajectoryEvaluation+0x254>)
 80034d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034dc:	a37c      	add	r3, pc, #496	; (adr r3, 80036d0 <TrajectoryEvaluation+0x230>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fd f835 	bl	8000550 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4614      	mov	r4, r2
 80034ec:	461d      	mov	r5, r3
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc ffd4 	bl	80004a0 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	ed9f 1b76 	vldr	d1, [pc, #472]	; 80036d8 <TrajectoryEvaluation+0x238>
 8003500:	ec43 2b10 	vmov	d0, r2, r3
 8003504:	f008 ffa8 	bl	800c458 <pow>
 8003508:	ec53 2b10 	vmov	r2, r3, d0
 800350c:	4620      	mov	r0, r4
 800350e:	4629      	mov	r1, r5
 8003510:	f7fd f81e 	bl	8000550 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <TrajectoryEvaluation+0x258>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fc fe5f 	bl	80001e4 <__adddf3>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4974      	ldr	r1, [pc, #464]	; (80036fc <TrajectoryEvaluation+0x25c>)
 800352c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 8003530:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <TrajectoryEvaluation+0x254>)
 8003532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	4b71      	ldr	r3, [pc, #452]	; (8003700 <TrajectoryEvaluation+0x260>)
 800353c:	f7fd f808 	bl	8000550 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <TrajectoryEvaluation+0x24c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc ffa7 	bl	80004a0 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	ed9f 1b62 	vldr	d1, [pc, #392]	; 80036e0 <TrajectoryEvaluation+0x240>
 800355a:	ec43 2b10 	vmov	d0, r2, r3
 800355e:	f008 ff7b 	bl	800c458 <pow>
 8003562:	ec53 2b10 	vmov	r2, r3, d0
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f7fc fff1 	bl	8000550 <__aeabi_dmul>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4964      	ldr	r1, [pc, #400]	; (8003704 <TrajectoryEvaluation+0x264>)
 8003574:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 8003578:	4b5c      	ldr	r3, [pc, #368]	; (80036ec <TrajectoryEvaluation+0x24c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ff8f 	bl	80004a0 <__aeabi_f2d>
 8003582:	4b5c      	ldr	r3, [pc, #368]	; (80036f4 <TrajectoryEvaluation+0x254>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fc ffe2 	bl	8000550 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	f7fd faac 	bl	8000af0 <__aeabi_d2f>
 8003598:	4603      	mov	r3, r0
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <TrajectoryEvaluation+0x268>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	f000 bcfa 	b.w	8003f96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t1 <= t && t< t2){
 80035a2:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <TrajectoryEvaluation+0x250>)
 80035a4:	ed93 7a00 	vldr	s14, [r3]
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	f200 80b1 	bhi.w	800371c <TrajectoryEvaluation+0x27c>
 80035ba:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80035bc:	ed93 7a00 	vldr	s14, [r3]
 80035c0:	4b52      	ldr	r3, [pc, #328]	; (800370c <TrajectoryEvaluation+0x26c>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	f140 80a5 	bpl.w	800371c <TrajectoryEvaluation+0x27c>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <TrajectoryEvaluation+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff62 	bl	80004a0 <__aeabi_f2d>
 80035dc:	4b46      	ldr	r3, [pc, #280]	; (80036f8 <TrajectoryEvaluation+0x258>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc fdff 	bl	80001e4 <__adddf3>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	4b49      	ldr	r3, [pc, #292]	; (8003714 <TrajectoryEvaluation+0x274>)
 80035f0:	ed93 7a00 	vldr	s14, [r3]
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <TrajectoryEvaluation+0x24c>)
 80035f6:	edd3 6a00 	vldr	s13, [r3]
 80035fa:	4b3d      	ldr	r3, [pc, #244]	; (80036f0 <TrajectoryEvaluation+0x250>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	ee17 0a90 	vmov	r0, s15
 800360c:	f7fc ff48 	bl	80004a0 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fc fde4 	bl	80001e4 <__adddf3>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4614      	mov	r4, r2
 8003622:	461d      	mov	r5, r3
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <TrajectoryEvaluation+0x278>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ff39 	bl	80004a0 <__aeabi_f2d>
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <TrajectoryEvaluation+0x260>)
 8003634:	f7fc ff8c 	bl	8000550 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <TrajectoryEvaluation+0x24c>)
 8003642:	ed93 7a00 	vldr	s14, [r3]
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <TrajectoryEvaluation+0x250>)
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003650:	ee17 0a90 	vmov	r0, s15
 8003654:	f7fc ff24 	bl	80004a0 <__aeabi_f2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80036e0 <TrajectoryEvaluation+0x240>
 8003660:	ec43 2b10 	vmov	d0, r2, r3
 8003664:	f008 fef8 	bl	800c458 <pow>
 8003668:	ec53 2b10 	vmov	r2, r3, d0
 800366c:	4640      	mov	r0, r8
 800366e:	4649      	mov	r1, r9
 8003670:	f7fc ff6e 	bl	8000550 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4620      	mov	r0, r4
 800367a:	4629      	mov	r1, r5
 800367c:	f7fc fdb2 	bl	80001e4 <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	491d      	ldr	r1, [pc, #116]	; (80036fc <TrajectoryEvaluation+0x25c>)
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <TrajectoryEvaluation+0x274>)
 800368c:	ed93 7a00 	vldr	s14, [r3]
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <TrajectoryEvaluation+0x278>)
 8003692:	edd3 6a00 	vldr	s13, [r3]
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <TrajectoryEvaluation+0x24c>)
 8003698:	ed93 6a00 	vldr	s12, [r3]
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <TrajectoryEvaluation+0x250>)
 800369e:	edd3 7a00 	vldr	s15, [r3]
 80036a2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc fef5 	bl	80004a0 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4912      	ldr	r1, [pc, #72]	; (8003704 <TrajectoryEvaluation+0x264>)
 80036bc:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <TrajectoryEvaluation+0x278>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <TrajectoryEvaluation+0x268>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	f000 bc65 	b.w	8003f96 <TrajectoryEvaluation+0xaf6>
 80036cc:	f3af 8000 	nop.w
 80036d0:	55555555 	.word	0x55555555
 80036d4:	3fc55555 	.word	0x3fc55555
 80036d8:	00000000 	.word	0x00000000
 80036dc:	40080000 	.word	0x40080000
 80036e0:	00000000 	.word	0x00000000
 80036e4:	40000000 	.word	0x40000000
 80036e8:	200005bc 	.word	0x200005bc
 80036ec:	20000590 	.word	0x20000590
 80036f0:	20000594 	.word	0x20000594
 80036f4:	20000078 	.word	0x20000078
 80036f8:	200005c0 	.word	0x200005c0
 80036fc:	20000620 	.word	0x20000620
 8003700:	3fe00000 	.word	0x3fe00000
 8003704:	20000628 	.word	0x20000628
 8003708:	20000630 	.word	0x20000630
 800370c:	20000598 	.word	0x20000598
 8003710:	20000608 	.word	0x20000608
 8003714:	200005f0 	.word	0x200005f0
 8003718:	200005d8 	.word	0x200005d8
	}
	else if (t2 <= t && t < t3){
 800371c:	4bb4      	ldr	r3, [pc, #720]	; (80039f0 <TrajectoryEvaluation+0x550>)
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	4bb4      	ldr	r3, [pc, #720]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	f200 8107 	bhi.w	8003942 <TrajectoryEvaluation+0x4a2>
 8003734:	4baf      	ldr	r3, [pc, #700]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003736:	ed93 7a00 	vldr	s14, [r3]
 800373a:	4baf      	ldr	r3, [pc, #700]	; (80039f8 <TrajectoryEvaluation+0x558>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	f140 80fb 	bpl.w	8003942 <TrajectoryEvaluation+0x4a2>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 800374c:	4bab      	ldr	r3, [pc, #684]	; (80039fc <TrajectoryEvaluation+0x55c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fea5 	bl	80004a0 <__aeabi_f2d>
 8003756:	4baa      	ldr	r3, [pc, #680]	; (8003a00 <TrajectoryEvaluation+0x560>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc fd42 	bl	80001e4 <__adddf3>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4ba6      	ldr	r3, [pc, #664]	; (8003a04 <TrajectoryEvaluation+0x564>)
 800376a:	ed93 7a01 	vldr	s14, [r3, #4]
 800376e:	4ba1      	ldr	r3, [pc, #644]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003770:	edd3 6a00 	vldr	s13, [r3]
 8003774:	4b9e      	ldr	r3, [pc, #632]	; (80039f0 <TrajectoryEvaluation+0x550>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	ee17 0a90 	vmov	r0, s15
 8003786:	f7fc fe8b 	bl	80004a0 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fc fd27 	bl	80001e4 <__adddf3>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4614      	mov	r4, r2
 800379c:	461d      	mov	r5, r3
 800379e:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <TrajectoryEvaluation+0x568>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe7c 	bl	80004a0 <__aeabi_f2d>
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <TrajectoryEvaluation+0x56c>)
 80037ae:	f7fc fecf 	bl	8000550 <__aeabi_dmul>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4b8e      	ldr	r3, [pc, #568]	; (80039f4 <TrajectoryEvaluation+0x554>)
 80037bc:	ed93 7a00 	vldr	s14, [r3]
 80037c0:	4b8b      	ldr	r3, [pc, #556]	; (80039f0 <TrajectoryEvaluation+0x550>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ca:	ee17 0a90 	vmov	r0, s15
 80037ce:	f7fc fe67 	bl	80004a0 <__aeabi_f2d>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	ed9f 1b82 	vldr	d1, [pc, #520]	; 80039e0 <TrajectoryEvaluation+0x540>
 80037da:	ec43 2b10 	vmov	d0, r2, r3
 80037de:	f008 fe3b 	bl	800c458 <pow>
 80037e2:	ec53 2b10 	vmov	r2, r3, d0
 80037e6:	4640      	mov	r0, r8
 80037e8:	4649      	mov	r1, r9
 80037ea:	f7fc feb1 	bl	8000550 <__aeabi_dmul>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	f7fc fcf5 	bl	80001e4 <__adddf3>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	461d      	mov	r5, r3
 8003802:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003804:	ed93 7a00 	vldr	s14, [r3]
 8003808:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <TrajectoryEvaluation+0x550>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003812:	ee17 0a90 	vmov	r0, s15
 8003816:	f7fc fe43 	bl	80004a0 <__aeabi_f2d>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80039e8 <TrajectoryEvaluation+0x548>
 8003822:	ec43 2b10 	vmov	d0, r2, r3
 8003826:	f008 fe17 	bl	800c458 <pow>
 800382a:	ec51 0b10 	vmov	r0, r1, d0
 800382e:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <TrajectoryEvaluation+0x570>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc fe8c 	bl	8000550 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <TrajectoryEvaluation+0x574>)
 8003846:	f7fc ffad 	bl	80007a4 <__aeabi_ddiv>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fcc5 	bl	80001e0 <__aeabi_dsub>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	496f      	ldr	r1, [pc, #444]	; (8003a18 <TrajectoryEvaluation+0x578>)
 800385c:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 8003860:	4b68      	ldr	r3, [pc, #416]	; (8003a04 <TrajectoryEvaluation+0x564>)
 8003862:	ed93 7a01 	vldr	s14, [r3, #4]
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <TrajectoryEvaluation+0x568>)
 8003868:	edd3 6a01 	vldr	s13, [r3, #4]
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <TrajectoryEvaluation+0x554>)
 800386e:	ed93 6a00 	vldr	s12, [r3]
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <TrajectoryEvaluation+0x550>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	ee76 7a67 	vsub.f32	s15, s12, s15
 800387c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003884:	ee17 0a90 	vmov	r0, s15
 8003888:	f7fc fe0a 	bl	80004a0 <__aeabi_f2d>
 800388c:	4604      	mov	r4, r0
 800388e:	460d      	mov	r5, r1
 8003890:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <TrajectoryEvaluation+0x570>)
 8003892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <TrajectoryEvaluation+0x56c>)
 800389c:	f7fc fe58 	bl	8000550 <__aeabi_dmul>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4690      	mov	r8, r2
 80038a6:	4699      	mov	r9, r3
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <TrajectoryEvaluation+0x554>)
 80038aa:	ed93 7a00 	vldr	s14, [r3]
 80038ae:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <TrajectoryEvaluation+0x550>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b8:	ee17 0a90 	vmov	r0, s15
 80038bc:	f7fc fdf0 	bl	80004a0 <__aeabi_f2d>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80039e0 <TrajectoryEvaluation+0x540>
 80038c8:	ec43 2b10 	vmov	d0, r2, r3
 80038cc:	f008 fdc4 	bl	800c458 <pow>
 80038d0:	ec53 2b10 	vmov	r2, r3, d0
 80038d4:	4640      	mov	r0, r8
 80038d6:	4649      	mov	r1, r9
 80038d8:	f7fc fe3a 	bl	8000550 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4620      	mov	r0, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	f7fc fc7c 	bl	80001e0 <__aeabi_dsub>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	494b      	ldr	r1, [pc, #300]	; (8003a1c <TrajectoryEvaluation+0x57c>)
 80038ee:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 80038f2:	4b45      	ldr	r3, [pc, #276]	; (8003a08 <TrajectoryEvaluation+0x568>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fdd2 	bl	80004a0 <__aeabi_f2d>
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003902:	ed93 7a00 	vldr	s14, [r3]
 8003906:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <TrajectoryEvaluation+0x550>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003910:	ee17 0a90 	vmov	r0, s15
 8003914:	f7fc fdc4 	bl	80004a0 <__aeabi_f2d>
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <TrajectoryEvaluation+0x570>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fc fe17 	bl	8000550 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fc fc59 	bl	80001e0 <__aeabi_dsub>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	f7fd f8db 	bl	8000af0 <__aeabi_d2f>
 800393a:	4603      	mov	r3, r0
 800393c:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <TrajectoryEvaluation+0x580>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e329      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t3 <= t && t < t4 ){
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <TrajectoryEvaluation+0x558>)
 8003944:	ed93 7a00 	vldr	s14, [r3]
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <TrajectoryEvaluation+0x554>)
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d867      	bhi.n	8003a28 <TrajectoryEvaluation+0x588>
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <TrajectoryEvaluation+0x554>)
 800395a:	ed93 7a00 	vldr	s14, [r3]
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <TrajectoryEvaluation+0x584>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	d55c      	bpl.n	8003a28 <TrajectoryEvaluation+0x588>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <TrajectoryEvaluation+0x55c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fd94 	bl	80004a0 <__aeabi_f2d>
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <TrajectoryEvaluation+0x560>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f7fc fc31 	bl	80001e4 <__adddf3>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4614      	mov	r4, r2
 8003988:	461d      	mov	r5, r3
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <TrajectoryEvaluation+0x564>)
 800398c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <TrajectoryEvaluation+0x554>)
 8003992:	edd3 6a00 	vldr	s13, [r3]
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <TrajectoryEvaluation+0x558>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a4:	ee17 0a90 	vmov	r0, s15
 80039a8:	f7fc fd7a 	bl	80004a0 <__aeabi_f2d>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7fc fc16 	bl	80001e4 <__adddf3>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <TrajectoryEvaluation+0x578>)
 80039be:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <TrajectoryEvaluation+0x564>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fd6a 	bl	80004a0 <__aeabi_f2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4912      	ldr	r1, [pc, #72]	; (8003a1c <TrajectoryEvaluation+0x57c>)
 80039d2:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <TrajectoryEvaluation+0x580>)
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e2da      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
 80039e0:	00000000 	.word	0x00000000
 80039e4:	40000000 	.word	0x40000000
 80039e8:	00000000 	.word	0x00000000
 80039ec:	40080000 	.word	0x40080000
 80039f0:	20000598 	.word	0x20000598
 80039f4:	20000590 	.word	0x20000590
 80039f8:	2000059c 	.word	0x2000059c
 80039fc:	20000608 	.word	0x20000608
 8003a00:	200005c0 	.word	0x200005c0
 8003a04:	200005f0 	.word	0x200005f0
 8003a08:	200005d8 	.word	0x200005d8
 8003a0c:	3fe00000 	.word	0x3fe00000
 8003a10:	20000078 	.word	0x20000078
 8003a14:	40180000 	.word	0x40180000
 8003a18:	20000620 	.word	0x20000620
 8003a1c:	20000628 	.word	0x20000628
 8003a20:	20000630 	.word	0x20000630
 8003a24:	200005a0 	.word	0x200005a0
	}
	else if (t4 <= t && t < t5 ){
 8003a28:	4bb3      	ldr	r3, [pc, #716]	; (8003cf8 <TrajectoryEvaluation+0x858>)
 8003a2a:	ed93 7a00 	vldr	s14, [r3]
 8003a2e:	4bb3      	ldr	r3, [pc, #716]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	f200 80be 	bhi.w	8003bbc <TrajectoryEvaluation+0x71c>
 8003a40:	4bae      	ldr	r3, [pc, #696]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003a42:	ed93 7a00 	vldr	s14, [r3]
 8003a46:	4bae      	ldr	r3, [pc, #696]	; (8003d00 <TrajectoryEvaluation+0x860>)
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	f140 80b2 	bpl.w	8003bbc <TrajectoryEvaluation+0x71c>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 8003a58:	4baa      	ldr	r3, [pc, #680]	; (8003d04 <TrajectoryEvaluation+0x864>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd1f 	bl	80004a0 <__aeabi_f2d>
 8003a62:	4ba9      	ldr	r3, [pc, #676]	; (8003d08 <TrajectoryEvaluation+0x868>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f7fc fbbc 	bl	80001e4 <__adddf3>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4690      	mov	r8, r2
 8003a72:	4699      	mov	r9, r3
 8003a74:	4ba5      	ldr	r3, [pc, #660]	; (8003d0c <TrajectoryEvaluation+0x86c>)
 8003a76:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a7a:	4ba0      	ldr	r3, [pc, #640]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003a7c:	edd3 6a00 	vldr	s13, [r3]
 8003a80:	4b9d      	ldr	r3, [pc, #628]	; (8003cf8 <TrajectoryEvaluation+0x858>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	ee17 0a90 	vmov	r0, s15
 8003a92:	f7fc fd05 	bl	80004a0 <__aeabi_f2d>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fba1 	bl	80001e4 <__adddf3>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4690      	mov	r8, r2
 8003aa8:	4699      	mov	r9, r3
 8003aaa:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003aac:	ed93 7a00 	vldr	s14, [r3]
 8003ab0:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <TrajectoryEvaluation+0x858>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aba:	ee17 0a90 	vmov	r0, s15
 8003abe:	f7fc fcef 	bl	80004a0 <__aeabi_f2d>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003ce8 <TrajectoryEvaluation+0x848>
 8003aca:	ec43 2b10 	vmov	d0, r2, r3
 8003ace:	f008 fcc3 	bl	800c458 <pow>
 8003ad2:	ec51 0b10 	vmov	r0, r1, d0
 8003ad6:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <TrajectoryEvaluation+0x870>)
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f7fc fd38 	bl	8000550 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <TrajectoryEvaluation+0x874>)
 8003aee:	f7fc fe59 	bl	80007a4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4640      	mov	r0, r8
 8003af8:	4649      	mov	r1, r9
 8003afa:	f7fc fb71 	bl	80001e0 <__aeabi_dsub>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4985      	ldr	r1, [pc, #532]	; (8003d18 <TrajectoryEvaluation+0x878>)
 8003b04:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 8003b08:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <TrajectoryEvaluation+0x86c>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fcc7 	bl	80004a0 <__aeabi_f2d>
 8003b12:	4680      	mov	r8, r0
 8003b14:	4689      	mov	r9, r1
 8003b16:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <TrajectoryEvaluation+0x870>)
 8003b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	4b7e      	ldr	r3, [pc, #504]	; (8003d1c <TrajectoryEvaluation+0x87c>)
 8003b22:	f7fc fd15 	bl	8000550 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4692      	mov	sl, r2
 8003b2c:	469b      	mov	fp, r3
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <TrajectoryEvaluation+0x858>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3e:	ee17 0a90 	vmov	r0, s15
 8003b42:	f7fc fcad 	bl	80004a0 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003cf0 <TrajectoryEvaluation+0x850>
 8003b4e:	ec43 2b10 	vmov	d0, r2, r3
 8003b52:	f008 fc81 	bl	800c458 <pow>
 8003b56:	ec53 2b10 	vmov	r2, r3, d0
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	f7fc fcf7 	bl	8000550 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4640      	mov	r0, r8
 8003b68:	4649      	mov	r1, r9
 8003b6a:	f7fc fb39 	bl	80001e0 <__aeabi_dsub>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	496b      	ldr	r1, [pc, #428]	; (8003d20 <TrajectoryEvaluation+0x880>)
 8003b74:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 8003b78:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <TrajectoryEvaluation+0x870>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	4614      	mov	r4, r2
 8003b80:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003b84:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003b86:	ed93 7a00 	vldr	s14, [r3]
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <TrajectoryEvaluation+0x858>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b94:	ee17 0a90 	vmov	r0, s15
 8003b98:	f7fc fc82 	bl	80004a0 <__aeabi_f2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc fcd4 	bl	8000550 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f7fc ff9e 	bl	8000af0 <__aeabi_d2f>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <TrajectoryEvaluation+0x884>)
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e1ec      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t5 <= t && t < t6 ){
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <TrajectoryEvaluation+0x860>)
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	f200 80ae 	bhi.w	8003d30 <TrajectoryEvaluation+0x890>
 8003bd4:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <TrajectoryEvaluation+0x888>)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	f140 80a2 	bpl.w	8003d30 <TrajectoryEvaluation+0x890>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 8003bec:	4b45      	ldr	r3, [pc, #276]	; (8003d04 <TrajectoryEvaluation+0x864>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fc55 	bl	80004a0 <__aeabi_f2d>
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <TrajectoryEvaluation+0x868>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc faf2 	bl	80001e4 <__adddf3>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <TrajectoryEvaluation+0x86c>)
 8003c0a:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003c10:	edd3 6a00 	vldr	s13, [r3]
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <TrajectoryEvaluation+0x860>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	ee17 0a90 	vmov	r0, s15
 8003c26:	f7fc fc3b 	bl	80004a0 <__aeabi_f2d>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7fc fad7 	bl	80001e4 <__adddf3>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <TrajectoryEvaluation+0x88c>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fc2c 	bl	80004a0 <__aeabi_f2d>
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <TrajectoryEvaluation+0x87c>)
 8003c4e:	f7fc fc7f 	bl	8000550 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003c5c:	ed93 7a00 	vldr	s14, [r3]
 8003c60:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <TrajectoryEvaluation+0x860>)
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6a:	ee17 0a90 	vmov	r0, s15
 8003c6e:	f7fc fc17 	bl	80004a0 <__aeabi_f2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8003cf0 <TrajectoryEvaluation+0x850>
 8003c7a:	ec43 2b10 	vmov	d0, r2, r3
 8003c7e:	f008 fbeb 	bl	800c458 <pow>
 8003c82:	ec53 2b10 	vmov	r2, r3, d0
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc fc61 	bl	8000550 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f7fc faa5 	bl	80001e4 <__adddf3>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	491e      	ldr	r1, [pc, #120]	; (8003d18 <TrajectoryEvaluation+0x878>)
 8003ca0:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <TrajectoryEvaluation+0x86c>)
 8003ca6:	ed93 7a04 	vldr	s14, [r3, #16]
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <TrajectoryEvaluation+0x88c>)
 8003cac:	edd3 6a04 	vldr	s13, [r3, #16]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <TrajectoryEvaluation+0x85c>)
 8003cb2:	ed93 6a00 	vldr	s12, [r3]
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <TrajectoryEvaluation+0x860>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc8:	ee17 0a90 	vmov	r0, s15
 8003ccc:	f7fc fbe8 	bl	80004a0 <__aeabi_f2d>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4912      	ldr	r1, [pc, #72]	; (8003d20 <TrajectoryEvaluation+0x880>)
 8003cd6:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <TrajectoryEvaluation+0x88c>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <TrajectoryEvaluation+0x884>)
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e158      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	40080000 	.word	0x40080000
 8003cf0:	00000000 	.word	0x00000000
 8003cf4:	40000000 	.word	0x40000000
 8003cf8:	200005a0 	.word	0x200005a0
 8003cfc:	20000590 	.word	0x20000590
 8003d00:	200005a4 	.word	0x200005a4
 8003d04:	20000608 	.word	0x20000608
 8003d08:	200005c0 	.word	0x200005c0
 8003d0c:	200005f0 	.word	0x200005f0
 8003d10:	20000078 	.word	0x20000078
 8003d14:	40180000 	.word	0x40180000
 8003d18:	20000620 	.word	0x20000620
 8003d1c:	3fe00000 	.word	0x3fe00000
 8003d20:	20000628 	.word	0x20000628
 8003d24:	20000630 	.word	0x20000630
 8003d28:	200005a8 	.word	0x200005a8
 8003d2c:	200005d8 	.word	0x200005d8
	}
	else if (t6 <= t && t < t7 ){
 8003d30:	4b9f      	ldr	r3, [pc, #636]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003d32:	ed93 7a00 	vldr	s14, [r3]
 8003d36:	4b9f      	ldr	r3, [pc, #636]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	f200 8107 	bhi.w	8003f56 <TrajectoryEvaluation+0xab6>
 8003d48:	4b9a      	ldr	r3, [pc, #616]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003d4a:	ed93 7a00 	vldr	s14, [r3]
 8003d4e:	4b9a      	ldr	r3, [pc, #616]	; (8003fb8 <TrajectoryEvaluation+0xb18>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	f140 80fb 	bpl.w	8003f56 <TrajectoryEvaluation+0xab6>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <TrajectoryEvaluation+0xb1c>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fb9b 	bl	80004a0 <__aeabi_f2d>
 8003d6a:	4b95      	ldr	r3, [pc, #596]	; (8003fc0 <TrajectoryEvaluation+0xb20>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa38 	bl	80001e4 <__adddf3>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <TrajectoryEvaluation+0xb24>)
 8003d7e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d82:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003d84:	edd3 6a00 	vldr	s13, [r3]
 8003d88:	4b89      	ldr	r3, [pc, #548]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	ee17 0a90 	vmov	r0, s15
 8003d9a:	f7fc fb81 	bl	80004a0 <__aeabi_f2d>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4620      	mov	r0, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	f7fc fa1d 	bl	80001e4 <__adddf3>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4614      	mov	r4, r2
 8003db0:	461d      	mov	r5, r3
 8003db2:	4b85      	ldr	r3, [pc, #532]	; (8003fc8 <TrajectoryEvaluation+0xb28>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fb72 	bl	80004a0 <__aeabi_f2d>
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	4b82      	ldr	r3, [pc, #520]	; (8003fcc <TrajectoryEvaluation+0xb2c>)
 8003dc2:	f7fc fbc5 	bl	8000550 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4690      	mov	r8, r2
 8003dcc:	4699      	mov	r9, r3
 8003dce:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003dd0:	ed93 7a00 	vldr	s14, [r3]
 8003dd4:	4b76      	ldr	r3, [pc, #472]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dde:	ee17 0a90 	vmov	r0, s15
 8003de2:	f7fc fb5d 	bl	80004a0 <__aeabi_f2d>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8003fa0 <TrajectoryEvaluation+0xb00>
 8003dee:	ec43 2b10 	vmov	d0, r2, r3
 8003df2:	f008 fb31 	bl	800c458 <pow>
 8003df6:	ec53 2b10 	vmov	r2, r3, d0
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	f7fc fba7 	bl	8000550 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc f9eb 	bl	80001e4 <__adddf3>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4614      	mov	r4, r2
 8003e14:	461d      	mov	r5, r3
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003e18:	ed93 7a00 	vldr	s14, [r3]
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003e1e:	edd3 7a00 	vldr	s15, [r3]
 8003e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e26:	ee17 0a90 	vmov	r0, s15
 8003e2a:	f7fc fb39 	bl	80004a0 <__aeabi_f2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8003fa8 <TrajectoryEvaluation+0xb08>
 8003e36:	ec43 2b10 	vmov	d0, r2, r3
 8003e3a:	f008 fb0d 	bl	800c458 <pow>
 8003e3e:	ec51 0b10 	vmov	r0, r1, d0
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <TrajectoryEvaluation+0xb30>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f7fc fb82 	bl	8000550 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	4b5e      	ldr	r3, [pc, #376]	; (8003fd4 <TrajectoryEvaluation+0xb34>)
 8003e5a:	f7fc fca3 	bl	80007a4 <__aeabi_ddiv>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4620      	mov	r0, r4
 8003e64:	4629      	mov	r1, r5
 8003e66:	f7fc f9bd 	bl	80001e4 <__adddf3>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	495a      	ldr	r1, [pc, #360]	; (8003fd8 <TrajectoryEvaluation+0xb38>)
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <TrajectoryEvaluation+0xb24>)
 8003e76:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e7a:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <TrajectoryEvaluation+0xb28>)
 8003e7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003e80:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003e82:	ed93 6a00 	vldr	s12, [r3]
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e98:	ee17 0a90 	vmov	r0, s15
 8003e9c:	f7fc fb00 	bl	80004a0 <__aeabi_f2d>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <TrajectoryEvaluation+0xb30>)
 8003ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <TrajectoryEvaluation+0xb2c>)
 8003eb0:	f7fc fb4e 	bl	8000550 <__aeabi_dmul>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4690      	mov	r8, r2
 8003eba:	4699      	mov	r9, r3
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003ebe:	ed93 7a00 	vldr	s14, [r3]
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003ec4:	edd3 7a00 	vldr	s15, [r3]
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	ee17 0a90 	vmov	r0, s15
 8003ed0:	f7fc fae6 	bl	80004a0 <__aeabi_f2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8003fa0 <TrajectoryEvaluation+0xb00>
 8003edc:	ec43 2b10 	vmov	d0, r2, r3
 8003ee0:	f008 faba 	bl	800c458 <pow>
 8003ee4:	ec53 2b10 	vmov	r2, r3, d0
 8003ee8:	4640      	mov	r0, r8
 8003eea:	4649      	mov	r1, r9
 8003eec:	f7fc fb30 	bl	8000550 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc f974 	bl	80001e4 <__adddf3>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4936      	ldr	r1, [pc, #216]	; (8003fdc <TrajectoryEvaluation+0xb3c>)
 8003f02:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003f06:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <TrajectoryEvaluation+0xb28>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fac8 	bl	80004a0 <__aeabi_f2d>
 8003f10:	4604      	mov	r4, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003f16:	ed93 7a00 	vldr	s14, [r3]
 8003f1a:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <TrajectoryEvaluation+0xb10>)
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f24:	ee17 0a90 	vmov	r0, s15
 8003f28:	f7fc faba 	bl	80004a0 <__aeabi_f2d>
 8003f2c:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <TrajectoryEvaluation+0xb30>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc fb0d 	bl	8000550 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f7fc f951 	bl	80001e4 <__adddf3>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fdd1 	bl	8000af0 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <TrajectoryEvaluation+0xb40>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e01f      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
	}
	else if (t7 <= t ){
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <TrajectoryEvaluation+0xb18>)
 8003f58:	ed93 7a00 	vldr	s14, [r3]
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <TrajectoryEvaluation+0xb14>)
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	d900      	bls.n	8003f6e <TrajectoryEvaluation+0xace>
//			volt = 0;
//			RunMotor(volt, PID_dir);
//			Go_Flag = 0;
//		}
	}
}
 8003f6c:	e013      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
		theta_ref = theta_f;
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <TrajectoryEvaluation+0xb44>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	4918      	ldr	r1, [pc, #96]	; (8003fd8 <TrajectoryEvaluation+0xb38>)
 8003f76:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <TrajectoryEvaluation+0xb3c>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <TrajectoryEvaluation+0xb3c>)
 8003f82:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <TrajectoryEvaluation+0xb40>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <TrajectoryEvaluation+0xb40>)
 8003f8c:	6013      	str	r3, [r2, #0]
		TrajectoryEvaluationFlag =0;
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <TrajectoryEvaluation+0xb48>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
}
 8003f94:	e7ff      	b.n	8003f96 <TrajectoryEvaluation+0xaf6>
 8003f96:	bf00      	nop
 8003f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	40000000 	.word	0x40000000
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	40080000 	.word	0x40080000
 8003fb0:	200005a8 	.word	0x200005a8
 8003fb4:	20000590 	.word	0x20000590
 8003fb8:	200005ac 	.word	0x200005ac
 8003fbc:	20000608 	.word	0x20000608
 8003fc0:	200005c0 	.word	0x200005c0
 8003fc4:	200005f0 	.word	0x200005f0
 8003fc8:	200005d8 	.word	0x200005d8
 8003fcc:	3fe00000 	.word	0x3fe00000
 8003fd0:	20000078 	.word	0x20000078
 8003fd4:	40180000 	.word	0x40180000
 8003fd8:	20000620 	.word	0x20000620
 8003fdc:	20000628 	.word	0x20000628
 8003fe0:	20000630 	.word	0x20000630
 8003fe4:	200005c8 	.word	0x200005c8
 8003fe8:	200005bc 	.word	0x200005bc

08003fec <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ff6:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ffe:	edd7 7a00 	vldr	s15, [r7]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <PositionController+0x9c>)
 8004008:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <PositionController+0xa0>)
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <PositionController+0x9c>)
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <PositionController+0xa0>)
 800401e:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <PositionController+0xa4>)
 8004024:	ed93 7a00 	vldr	s14, [r3]
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <PositionController+0x9c>)
 800402a:	edd3 7a00 	vldr	s15, [r3]
 800402e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <PositionController+0xa8>)
 8004034:	edd3 6a00 	vldr	s13, [r3]
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <PositionController+0xa0>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <PositionController+0x9c>)
 8004048:	edd3 6a00 	vldr	s13, [r3]
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <PositionController+0xac>)
 800404e:	edd3 7a00 	vldr	s15, [r3]
 8004052:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <PositionController+0xb0>)
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <PositionController+0xb4>)
 8004066:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <PositionController+0x9c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <PositionController+0xac>)
 8004070:	6013      	str	r3, [r2, #0]
	return u1;
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <PositionController+0xb4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	ee07 3a90 	vmov	s15, r3
}
 800407a:	eeb0 0a67 	vmov.f32	s0, s15
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000634 	.word	0x20000634
 800408c:	20000638 	.word	0x20000638
 8004090:	20000654 	.word	0x20000654
 8004094:	20000658 	.word	0x20000658
 8004098:	2000063c 	.word	0x2000063c
 800409c:	2000065c 	.word	0x2000065c
 80040a0:	20000640 	.word	0x20000640

080040a4 <VelocityController>:

float VelocityController(float r,float y,float uP) //r == trajectory, y==feedback
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80040ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80040b2:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 80040b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80040ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80040be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c2:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <VelocityController+0x120>)
 80040c4:	edc3 7a00 	vstr	s15, [r3]

	if (dir == 0 && e2 <= w_max)
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <VelocityController+0x124>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d117      	bne.n	8004100 <VelocityController+0x5c>
 80040d0:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <VelocityController+0x120>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc f9e3 	bl	80004a0 <__aeabi_f2d>
 80040da:	4b3c      	ldr	r3, [pc, #240]	; (80041cc <VelocityController+0x128>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc fcb2 	bl	8000a48 <__aeabi_dcmple>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <VelocityController+0x5c>
	{
		e2 = w_max;
 80040ea:	4b38      	ldr	r3, [pc, #224]	; (80041cc <VelocityController+0x128>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f7fc fcfc 	bl	8000af0 <__aeabi_d2f>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <VelocityController+0x120>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01a      	b.n	8004136 <VelocityController+0x92>
	}

	else if (dir == 1 && e2 >= w_max)
 8004100:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <VelocityController+0x124>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d116      	bne.n	8004136 <VelocityController+0x92>
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <VelocityController+0x120>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc f9c7 	bl	80004a0 <__aeabi_f2d>
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <VelocityController+0x128>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f7fc fca0 	bl	8000a5c <__aeabi_dcmpge>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <VelocityController+0x92>
	{
		e2 = w_max;
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <VelocityController+0x128>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f7fc fce0 	bl	8000af0 <__aeabi_d2f>
 8004130:	4603      	mov	r3, r0
 8004132:	4a24      	ldr	r2, [pc, #144]	; (80041c4 <VelocityController+0x120>)
 8004134:	6013      	str	r3, [r2, #0]
	}

	e2 = e2 - y;
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <VelocityController+0x120>)
 8004138:	ed93 7a00 	vldr	s14, [r3]
 800413c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <VelocityController+0x120>)
 8004146:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <VelocityController+0x12c>)
 800414c:	ed93 7a00 	vldr	s14, [r3]
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <VelocityController+0x120>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <VelocityController+0x12c>)
 800415c:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2) + (kd_2*(e2-p2));
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <VelocityController+0x130>)
 8004162:	ed93 7a00 	vldr	s14, [r3]
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <VelocityController+0x120>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <VelocityController+0x134>)
 8004172:	edd3 6a00 	vldr	s13, [r3]
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <VelocityController+0x12c>)
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <VelocityController+0x120>)
 8004186:	edd3 6a00 	vldr	s13, [r3]
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <VelocityController+0x138>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <VelocityController+0x13c>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800419e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <VelocityController+0x140>)
 80041a4:	edc3 7a00 	vstr	s15, [r3]
	p2 = e2;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <VelocityController+0x120>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <VelocityController+0x138>)
 80041ae:	6013      	str	r3, [r2, #0]
	return u2;
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <VelocityController+0x140>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	ee07 3a90 	vmov	s15, r3
}
 80041b8:	eeb0 0a67 	vmov.f32	s0, s15
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000644 	.word	0x20000644
 80041c8:	200000cd 	.word	0x200000cd
 80041cc:	20000068 	.word	0x20000068
 80041d0:	20000648 	.word	0x20000648
 80041d4:	20000660 	.word	0x20000660
 80041d8:	20000664 	.word	0x20000664
 80041dc:	2000064c 	.word	0x2000064c
 80041e0:	20000668 	.word	0x20000668
 80041e4:	20000650 	.word	0x20000650

080041e8 <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80041f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80041f6:	ed87 1a01 	vstr	s2, [r7, #4]
 80041fa:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	if(TrajectoryEvaluationFlag == 1)
 80041fe:	4b52      	ldr	r3, [pc, #328]	; (8004348 <Cascade+0x160>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d178      	bne.n	80042f8 <Cascade+0x110>
	{
		u = PositionController(Pd, P);
 8004206:	edd7 0a02 	vldr	s1, [r7, #8]
 800420a:	ed97 0a03 	vldr	s0, [r7, #12]
 800420e:	f7ff feed 	bl	8003fec <PositionController>
 8004212:	eef0 7a40 	vmov.f32	s15, s0
 8004216:	4b4d      	ldr	r3, [pc, #308]	; (800434c <Cascade+0x164>)
 8004218:	edc3 7a00 	vstr	s15, [r3]
		u = VelocityController(Vd, V, u);
 800421c:	4b4b      	ldr	r3, [pc, #300]	; (800434c <Cascade+0x164>)
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	eeb0 1a67 	vmov.f32	s2, s15
 8004226:	edd7 0a00 	vldr	s1, [r7]
 800422a:	ed97 0a01 	vldr	s0, [r7, #4]
 800422e:	f7ff ff39 	bl	80040a4 <VelocityController>
 8004232:	eef0 7a40 	vmov.f32	s15, s0
 8004236:	4b45      	ldr	r3, [pc, #276]	; (800434c <Cascade+0x164>)
 8004238:	edc3 7a00 	vstr	s15, [r3]
		if (u >= 0)
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <Cascade+0x164>)
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424a:	db04      	blt.n	8004256 <Cascade+0x6e>
		{
			PID_dir = dir;
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <Cascade+0x168>)
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	4b40      	ldr	r3, [pc, #256]	; (8004354 <Cascade+0x16c>)
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e00b      	b.n	800426e <Cascade+0x86>
		}

		else
		{
			u = -u;
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <Cascade+0x164>)
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	eef1 7a67 	vneg.f32	s15, s15
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <Cascade+0x164>)
 8004262:	edc3 7a00 	vstr	s15, [r3]
			PID_dir = dir;
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <Cascade+0x168>)
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <Cascade+0x16c>)
 800426c:	701a      	strb	r2, [r3, #0]
		}
		volt_buff = TransferFunction(omega_ref);
 800426e:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <Cascade+0x170>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	f7fc fc3a 	bl	8000af0 <__aeabi_d2f>
 800427c:	4603      	mov	r3, r0
 800427e:	ee00 3a10 	vmov	s0, r3
 8004282:	f000 ffa5 	bl	80051d0 <TransferFunction>
 8004286:	eef0 7a40 	vmov.f32	s15, s0
 800428a:	4b34      	ldr	r3, [pc, #208]	; (800435c <Cascade+0x174>)
 800428c:	edc3 7a00 	vstr	s15, [r3]
		u = u+volt_buff;
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <Cascade+0x164>)
 8004292:	ed93 7a00 	vldr	s14, [r3]
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <Cascade+0x174>)
 8004298:	edd3 7a00 	vldr	s15, [r3]
 800429c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <Cascade+0x164>)
 80042a2:	edc3 7a00 	vstr	s15, [r3]

		if ((t > t4 && u <= volt_constant) || t >= t7)
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <Cascade+0x178>)
 80042a8:	ed93 7a00 	vldr	s14, [r3]
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <Cascade+0x17c>)
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	dd0a      	ble.n	80042d2 <Cascade+0xea>
 80042bc:	4b23      	ldr	r3, [pc, #140]	; (800434c <Cascade+0x164>)
 80042be:	ed93 7a00 	vldr	s14, [r3]
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <Cascade+0x180>)
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d90a      	bls.n	80042e8 <Cascade+0x100>
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <Cascade+0x178>)
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <Cascade+0x184>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	db21      	blt.n	800432c <Cascade+0x144>
			{
				u = volt_constant;
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <Cascade+0x180>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <Cascade+0x164>)
 80042ee:	6013      	str	r3, [r2, #0]
				TrajectoryEvaluationFlag = 0;
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <Cascade+0x160>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e019      	b.n	800432c <Cascade+0x144>
			}
	}
	else
	{
		PID_dir = dir;
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <Cascade+0x168>)
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <Cascade+0x16c>)
 80042fe:	701a      	strb	r2, [r3, #0]
		if(theta_now == theta_0){
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <Cascade+0x188>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc f8cb 	bl	80004a0 <__aeabi_f2d>
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <Cascade+0x18c>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc fb86 	bl	8000a20 <__aeabi_dcmpeq>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <Cascade+0x13c>
			u = volt_statics;
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <Cascade+0x190>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0b      	ldr	r2, [pc, #44]	; (800434c <Cascade+0x164>)
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e003      	b.n	800432c <Cascade+0x144>
		}
		else{
			u = volt_constant;
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <Cascade+0x180>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <Cascade+0x164>)
 800432a:	6013      	str	r3, [r2, #0]
		}

	}

	return limit(u);
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <Cascade+0x164>)
 800432e:	edd3 7a00 	vldr	s15, [r3]
 8004332:	eeb0 0a67 	vmov.f32	s0, s15
 8004336:	f000 f859 	bl	80043ec <limit>
 800433a:	eef0 7a40 	vmov.f32	s15, s0
}
 800433e:	eeb0 0a67 	vmov.f32	s0, s15
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200005bc 	.word	0x200005bc
 800434c:	200006f4 	.word	0x200006f4
 8004350:	200000cd 	.word	0x200000cd
 8004354:	200000ce 	.word	0x200000ce
 8004358:	20000628 	.word	0x20000628
 800435c:	200006d8 	.word	0x200006d8
 8004360:	20000590 	.word	0x20000590
 8004364:	200005a0 	.word	0x200005a0
 8004368:	200003e0 	.word	0x200003e0
 800436c:	200005ac 	.word	0x200005ac
 8004370:	200003f4 	.word	0x200003f4
 8004374:	200005c0 	.word	0x200005c0
 8004378:	200003e4 	.word	0x200003e4

0800437c <negative>:

float negative(float var)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 8004386:	edd7 7a01 	vldr	s15, [r7, #4]
 800438a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	dd05      	ble.n	80043a0 <negative+0x24>
		var = -var;
 8004394:	edd7 7a01 	vldr	s15, [r7, #4]
 8004398:	eef1 7a67 	vneg.f32	s15, s15
 800439c:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	ee07 3a90 	vmov	s15, r3
}
 80043a6:	eeb0 0a67 	vmov.f32	s0, s15
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <positive>:

float positive(float var)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 80043be:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	d505      	bpl.n	80043d8 <positive+0x24>
			var = -var;
 80043cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80043d0:	eef1 7a67 	vneg.f32	s15, s15
 80043d4:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	ee07 3a90 	vmov	s15, r3
}
 80043de:	eeb0 0a67 	vmov.f32	s0, s15
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <limit>:

float limit(float var1)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	ed87 0a01 	vstr	s0, [r7, #4]
	return (var1 > 24.0) ? 24.0 : var1;
 80043f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fa:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80043fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	dd01      	ble.n	800440c <limit+0x20>
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <limit+0x34>)
 800440a:	e000      	b.n	800440e <limit+0x22>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	ee07 3a90 	vmov	s15, r3
}
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	41c00000 	.word	0x41c00000
 8004424:	00000000 	.word	0x00000000

08004428 <UART>:

void UART(){
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b0a2      	sub	sp, #136	; 0x88
 800442e:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 8004430:	4baf      	ldr	r3, [pc, #700]	; (80046f0 <UART+0x2c8>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 85a1 	beq.w	8004f7c <UART+0xb54>
 800443a:	2b00      	cmp	r3, #0
 800443c:	f2c0 85f3 	blt.w	8005026 <UART+0xbfe>
 8004440:	2b9e      	cmp	r3, #158	; 0x9e
 8004442:	f300 85f0 	bgt.w	8005026 <UART+0xbfe>
 8004446:	2b58      	cmp	r3, #88	; 0x58
 8004448:	f2c0 85ed 	blt.w	8005026 <UART+0xbfe>
 800444c:	3b58      	subs	r3, #88	; 0x58
 800444e:	2b46      	cmp	r3, #70	; 0x46
 8004450:	f200 85e9 	bhi.w	8005026 <UART+0xbfe>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <UART+0x34>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004fdd 	.word	0x08004fdd
 8004460:	08005027 	.word	0x08005027
 8004464:	08005027 	.word	0x08005027
 8004468:	08005027 	.word	0x08005027
 800446c:	08005027 	.word	0x08005027
 8004470:	08005027 	.word	0x08005027
 8004474:	08005027 	.word	0x08005027
 8004478:	08005027 	.word	0x08005027
 800447c:	08005027 	.word	0x08005027
 8004480:	08005027 	.word	0x08005027
 8004484:	08005027 	.word	0x08005027
 8004488:	08005027 	.word	0x08005027
 800448c:	08005027 	.word	0x08005027
 8004490:	08005027 	.word	0x08005027
 8004494:	08005027 	.word	0x08005027
 8004498:	08005027 	.word	0x08005027
 800449c:	08005027 	.word	0x08005027
 80044a0:	08005027 	.word	0x08005027
 80044a4:	08005027 	.word	0x08005027
 80044a8:	08005027 	.word	0x08005027
 80044ac:	08005027 	.word	0x08005027
 80044b0:	08005027 	.word	0x08005027
 80044b4:	08005027 	.word	0x08005027
 80044b8:	08005027 	.word	0x08005027
 80044bc:	08005027 	.word	0x08005027
 80044c0:	08005027 	.word	0x08005027
 80044c4:	08005027 	.word	0x08005027
 80044c8:	08005027 	.word	0x08005027
 80044cc:	08005027 	.word	0x08005027
 80044d0:	08005027 	.word	0x08005027
 80044d4:	08005027 	.word	0x08005027
 80044d8:	08005027 	.word	0x08005027
 80044dc:	08005027 	.word	0x08005027
 80044e0:	08005027 	.word	0x08005027
 80044e4:	08005027 	.word	0x08005027
 80044e8:	08005027 	.word	0x08005027
 80044ec:	08005027 	.word	0x08005027
 80044f0:	08005027 	.word	0x08005027
 80044f4:	08005027 	.word	0x08005027
 80044f8:	08005027 	.word	0x08005027
 80044fc:	08005027 	.word	0x08005027
 8004500:	08005027 	.word	0x08005027
 8004504:	08005027 	.word	0x08005027
 8004508:	08005027 	.word	0x08005027
 800450c:	08005027 	.word	0x08005027
 8004510:	08005027 	.word	0x08005027
 8004514:	08005027 	.word	0x08005027
 8004518:	08005027 	.word	0x08005027
 800451c:	08005027 	.word	0x08005027
 8004520:	08005027 	.word	0x08005027
 8004524:	08005027 	.word	0x08005027
 8004528:	08005027 	.word	0x08005027
 800452c:	08005027 	.word	0x08005027
 8004530:	08005027 	.word	0x08005027
 8004534:	08005027 	.word	0x08005027
 8004538:	08005027 	.word	0x08005027
 800453c:	08005027 	.word	0x08005027
 8004540:	08005035 	.word	0x08005035
 8004544:	08004579 	.word	0x08004579
 8004548:	0800459d 	.word	0x0800459d
 800454c:	080045c1 	.word	0x080045c1
 8004550:	08004651 	.word	0x08004651
 8004554:	08004715 	.word	0x08004715
 8004558:	080047ab 	.word	0x080047ab
 800455c:	080048a9 	.word	0x080048a9
 8004560:	080048d1 	.word	0x080048d1
 8004564:	08004af3 	.word	0x08004af3
 8004568:	08004d2f 	.word	0x08004d2f
 800456c:	08004ef9 	.word	0x08004ef9
 8004570:	08004f21 	.word	0x08004f21
 8004574:	08004f49 	.word	0x08004f49
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 8004578:	4b5d      	ldr	r3, [pc, #372]	; (80046f0 <UART+0x2c8>)
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b6d      	cmp	r3, #109	; 0x6d
 800457e:	f040 855b 	bne.w	8005038 <UART+0xc10>
			//connect MCU
			HAL_UART_DMAStop(&huart2);
 8004582:	485c      	ldr	r0, [pc, #368]	; (80046f4 <UART+0x2cc>)
 8004584:	f006 fb6a 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004588:	2202      	movs	r2, #2
 800458a:	495b      	ldr	r1, [pc, #364]	; (80046f8 <UART+0x2d0>)
 800458c:	4859      	ldr	r0, [pc, #356]	; (80046f4 <UART+0x2cc>)
 800458e:	f006 fab7 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004592:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <UART+0x2c8>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);

		}
		break;
 8004598:	f000 bd4e 	b.w	8005038 <UART+0xc10>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 800459c:	4b54      	ldr	r3, [pc, #336]	; (80046f0 <UART+0x2c8>)
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	2b6c      	cmp	r3, #108	; 0x6c
 80045a2:	f040 854b 	bne.w	800503c <UART+0xc14>
			//disconnect MCU
			HAL_UART_DMAStop(&huart2);
 80045a6:	4853      	ldr	r0, [pc, #332]	; (80046f4 <UART+0x2cc>)
 80045a8:	f006 fb58 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80045ac:	2202      	movs	r2, #2
 80045ae:	4952      	ldr	r1, [pc, #328]	; (80046f8 <UART+0x2d0>)
 80045b0:	4850      	ldr	r0, [pc, #320]	; (80046f4 <UART+0x2cc>)
 80045b2:	f006 faa5 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <UART+0x2c8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 80045bc:	f000 bd3e 	b.w	800503c <UART+0xc14>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <UART+0x2c8>)
 80045c2:	785a      	ldrb	r2, [r3, #1]
 80045c4:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <UART+0x2d4>)
 80045c6:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <UART+0x2c8>)
 80045ca:	789a      	ldrb	r2, [r3, #2]
 80045cc:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <UART+0x2d8>)
 80045ce:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80045d0:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <UART+0x2d4>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b49      	ldr	r3, [pc, #292]	; (8004700 <UART+0x2d8>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	4b47      	ldr	r3, [pc, #284]	; (8004704 <UART+0x2dc>)
 80045e6:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 80045e8:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <UART+0x2c8>)
 80045ea:	78da      	ldrb	r2, [r3, #3]
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <UART+0x2d4>)
 80045ee:	7819      	ldrb	r1, [r3, #0]
 80045f0:	4b43      	ldr	r3, [pc, #268]	; (8004700 <UART+0x2d8>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	440b      	add	r3, r1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	3b6c      	subs	r3, #108	; 0x6c
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	429a      	cmp	r2, r3
 8004602:	f040 851d 	bne.w	8005040 <UART+0xc18>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 8004606:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <UART+0x2dc>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fb ff26 	bl	800045c <__aeabi_ui2d>
 8004610:	a331      	add	r3, pc, #196	; (adr r3, 80046d8 <UART+0x2b0>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ff9b 	bl	8000550 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	a32f      	add	r3, pc, #188	; (adr r3, 80046e0 <UART+0x2b8>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb ff92 	bl	8000550 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4935      	ldr	r1, [pc, #212]	; (8004708 <UART+0x2e0>)
 8004632:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 8004636:	482f      	ldr	r0, [pc, #188]	; (80046f4 <UART+0x2cc>)
 8004638:	f006 fb10 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 800463c:	2202      	movs	r2, #2
 800463e:	492e      	ldr	r1, [pc, #184]	; (80046f8 <UART+0x2d0>)
 8004640:	482c      	ldr	r0, [pc, #176]	; (80046f4 <UART+0x2cc>)
 8004642:	f006 fa5d 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004646:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <UART+0x2c8>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 800464c:	f000 bcf8 	b.w	8005040 <UART+0xc18>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <UART+0x2c8>)
 8004652:	785a      	ldrb	r2, [r3, #1]
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <UART+0x2d4>)
 8004656:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <UART+0x2c8>)
 800465a:	789a      	ldrb	r2, [r3, #2]
 800465c:	4b28      	ldr	r3, [pc, #160]	; (8004700 <UART+0x2d8>)
 800465e:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <UART+0x2d4>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	b29a      	uxth	r2, r3
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <UART+0x2d8>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4413      	add	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <UART+0x2dc>)
 8004676:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <UART+0x2c8>)
 800467a:	78da      	ldrb	r2, [r3, #3]
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <UART+0x2d4>)
 800467e:	7819      	ldrb	r1, [r3, #0]
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <UART+0x2d8>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	440b      	add	r3, r1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	3b6b      	subs	r3, #107	; 0x6b
 800468a:	b2db      	uxtb	r3, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	429a      	cmp	r2, r3
 8004692:	f040 84d7 	bne.w	8005044 <UART+0xc1c>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 8004696:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <UART+0x2dc>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fede 	bl	800045c <__aeabi_ui2d>
 80046a0:	a311      	add	r3, pc, #68	; (adr r3, 80046e8 <UART+0x2c0>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fc f87d 	bl	80007a4 <__aeabi_ddiv>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4917      	ldr	r1, [pc, #92]	; (800470c <UART+0x2e4>)
 80046b0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 80046b4:	480f      	ldr	r0, [pc, #60]	; (80046f4 <UART+0x2cc>)
 80046b6:	f006 fad1 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80046ba:	2202      	movs	r2, #2
 80046bc:	490e      	ldr	r1, [pc, #56]	; (80046f8 <UART+0x2d0>)
 80046be:	480d      	ldr	r0, [pc, #52]	; (80046f4 <UART+0x2cc>)
 80046c0:	f006 fa1e 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <UART+0x2c8>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
			ModeN =0;
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <UART+0x2e8>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 80046d0:	f000 bcb8 	b.w	8005044 <UART+0xc1c>
 80046d4:	f3af 8000 	nop.w
 80046d8:	14141414 	.word	0x14141414
 80046dc:	3fa41414 	.word	0x3fa41414
 80046e0:	f37bebd5 	.word	0xf37bebd5
 80046e4:	3fbacee9 	.word	0x3fbacee9
 80046e8:	00000000 	.word	0x00000000
 80046ec:	40c38800 	.word	0x40c38800
 80046f0:	2000067c 	.word	0x2000067c
 80046f4:	200002d8 	.word	0x200002d8
 80046f8:	2000009c 	.word	0x2000009c
 80046fc:	200006f8 	.word	0x200006f8
 8004700:	200006f9 	.word	0x200006f9
 8004704:	200006fa 	.word	0x200006fa
 8004708:	20000068 	.word	0x20000068
 800470c:	200005c8 	.word	0x200005c8
 8004710:	20000698 	.word	0x20000698
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 8004714:	4ba4      	ldr	r3, [pc, #656]	; (80049a8 <UART+0x580>)
 8004716:	785a      	ldrb	r2, [r3, #1]
 8004718:	4ba4      	ldr	r3, [pc, #656]	; (80049ac <UART+0x584>)
 800471a:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 800471c:	4ba2      	ldr	r3, [pc, #648]	; (80049a8 <UART+0x580>)
 800471e:	789a      	ldrb	r2, [r3, #2]
 8004720:	4ba3      	ldr	r3, [pc, #652]	; (80049b0 <UART+0x588>)
 8004722:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004724:	4ba1      	ldr	r3, [pc, #644]	; (80049ac <UART+0x584>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	b29a      	uxth	r2, r3
 800472e:	4ba0      	ldr	r3, [pc, #640]	; (80049b0 <UART+0x588>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4413      	add	r3, r2
 8004736:	b29a      	uxth	r2, r3
 8004738:	4b9e      	ldr	r3, [pc, #632]	; (80049b4 <UART+0x58c>)
 800473a:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 800473c:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <UART+0x580>)
 800473e:	78da      	ldrb	r2, [r3, #3]
 8004740:	4b9a      	ldr	r3, [pc, #616]	; (80049ac <UART+0x584>)
 8004742:	7819      	ldrb	r1, [r3, #0]
 8004744:	4b9a      	ldr	r3, [pc, #616]	; (80049b0 <UART+0x588>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	440b      	add	r3, r1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3b6a      	subs	r3, #106	; 0x6a
 800474e:	b2db      	uxtb	r3, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	429a      	cmp	r2, r3
 8004756:	f040 8477 	bne.w	8005048 <UART+0xc20>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 800475a:	4b95      	ldr	r3, [pc, #596]	; (80049b0 <UART+0x588>)
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	4b96      	ldr	r3, [pc, #600]	; (80049b8 <UART+0x590>)
 8004760:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 8004762:	4b95      	ldr	r3, [pc, #596]	; (80049b8 <UART+0x590>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	4a94      	ldr	r2, [pc, #592]	; (80049bc <UART+0x594>)
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb fe95 	bl	80004a0 <__aeabi_f2d>
 8004776:	a38a      	add	r3, pc, #552	; (adr r3, 80049a0 <UART+0x578>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb fee8 	bl	8000550 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	498e      	ldr	r1, [pc, #568]	; (80049c0 <UART+0x598>)
 8004786:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 800478a:	4b8e      	ldr	r3, [pc, #568]	; (80049c4 <UART+0x59c>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004790:	488d      	ldr	r0, [pc, #564]	; (80049c8 <UART+0x5a0>)
 8004792:	f006 fa63 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004796:	2202      	movs	r2, #2
 8004798:	498c      	ldr	r1, [pc, #560]	; (80049cc <UART+0x5a4>)
 800479a:	488b      	ldr	r0, [pc, #556]	; (80049c8 <UART+0x5a0>)
 800479c:	f006 f9b0 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80047a0:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <UART+0x580>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 80047a6:	f000 bc4f 	b.w	8005048 <UART+0xc20>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 80047aa:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <UART+0x580>)
 80047ac:	785a      	ldrb	r2, [r3, #1]
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <UART+0x5a8>)
 80047b0:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		uint8_t k=2;
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		for(int j = 0;j<n_station_max;j+=2){
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c4:	e021      	b.n	800480a <UART+0x3e2>
			index_station[j] = RxData[k]%16;
 80047c6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80047ca:	4a77      	ldr	r2, [pc, #476]	; (80049a8 <UART+0x580>)
 80047cc:	5cd3      	ldrb	r3, [r2, r3]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2d9      	uxtb	r1, r3
 80047d4:	4a78      	ldr	r2, [pc, #480]	; (80049b8 <UART+0x590>)
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047da:	4413      	add	r3, r2
 80047dc:	460a      	mov	r2, r1
 80047de:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 80047e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80047e4:	4a70      	ldr	r2, [pc, #448]	; (80049a8 <UART+0x580>)
 80047e6:	5cd2      	ldrb	r2, [r2, r3]
 80047e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047ec:	3301      	adds	r3, #1
 80047ee:	0912      	lsrs	r2, r2, #4
 80047f0:	b2d1      	uxtb	r1, r2
 80047f2:	4a71      	ldr	r2, [pc, #452]	; (80049b8 <UART+0x590>)
 80047f4:	54d1      	strb	r1, [r2, r3]
			k+=1;
 80047f6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80047fa:	3301      	adds	r3, #1
 80047fc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		for(int j = 0;j<n_station_max;j+=2){
 8004800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004804:	3302      	adds	r3, #2
 8004806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800480a:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <UART+0x5a8>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004814:	4293      	cmp	r3, r2
 8004816:	dbd6      	blt.n	80047c6 <UART+0x39e>
		}
		for(int f = 0; f<k;f++){
 8004818:	2300      	movs	r3, #0
 800481a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800481c:	e00b      	b.n	8004836 <UART+0x40e>
			Check += RxData[f];
 800481e:	4a62      	ldr	r2, [pc, #392]	; (80049a8 <UART+0x580>)
 8004820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004822:	4413      	add	r3, r2
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800482a:	4413      	add	r3, r2
 800482c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		for(int f = 0; f<k;f++){
 8004830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004832:	3301      	adds	r3, #1
 8004834:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004836:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800483a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800483c:	429a      	cmp	r2, r3
 800483e:	dbee      	blt.n	800481e <UART+0x3f6>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 8004840:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004844:	4a58      	ldr	r2, [pc, #352]	; (80049a8 <UART+0x580>)
 8004846:	5cd2      	ldrb	r2, [r2, r3]
 8004848:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800484c:	43db      	mvns	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	429a      	cmp	r2, r3
 8004852:	f040 83fb 	bne.w	800504c <UART+0xc24>

			ModeN=1;
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <UART+0x59c>)
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]
			n_station=0;
 800485c:	4b5d      	ldr	r3, [pc, #372]	; (80049d4 <UART+0x5ac>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <UART+0x5ac>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <UART+0x590>)
 800486a:	5c9b      	ldrb	r3, [r3, r2]
 800486c:	3b01      	subs	r3, #1
 800486e:	4a53      	ldr	r2, [pc, #332]	; (80049bc <UART+0x594>)
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe12 	bl	80004a0 <__aeabi_f2d>
 800487c:	a348      	add	r3, pc, #288	; (adr r3, 80049a0 <UART+0x578>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fe65 	bl	8000550 <__aeabi_dmul>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	494d      	ldr	r1, [pc, #308]	; (80049c0 <UART+0x598>)
 800488c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_DMAStop(&huart2);
 8004890:	484d      	ldr	r0, [pc, #308]	; (80049c8 <UART+0x5a0>)
 8004892:	f006 f9e3 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004896:	2202      	movs	r2, #2
 8004898:	494c      	ldr	r1, [pc, #304]	; (80049cc <UART+0x5a4>)
 800489a:	484b      	ldr	r0, [pc, #300]	; (80049c8 <UART+0x5a0>)
 800489c:	f006 f930 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <UART+0x580>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 80048a6:	e3d1      	b.n	800504c <UART+0xc24>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 80048a8:	4b3f      	ldr	r3, [pc, #252]	; (80049a8 <UART+0x580>)
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b67      	cmp	r3, #103	; 0x67
 80048ae:	f040 83cf 	bne.w	8005050 <UART+0xc28>
			//Go to Station / Goal Position
			HAL_UART_DMAStop(&huart2);
 80048b2:	4845      	ldr	r0, [pc, #276]	; (80049c8 <UART+0x5a0>)
 80048b4:	f006 f9d2 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80048b8:	2202      	movs	r2, #2
 80048ba:	4944      	ldr	r1, [pc, #272]	; (80049cc <UART+0x5a4>)
 80048bc:	4842      	ldr	r0, [pc, #264]	; (80049c8 <UART+0x5a0>)
 80048be:	f006 f91f 	bl	800ab00 <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 80048c2:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <UART+0x5b0>)
 80048c4:	2206      	movs	r2, #6
 80048c6:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 80048c8:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <UART+0x580>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
//			HAL_UART_DMAStop(&huart2);
		}
		break;
 80048ce:	e3bf      	b.n	8005050 <UART+0xc28>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 80048d0:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <UART+0x580>)
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b66      	cmp	r3, #102	; 0x66
 80048d6:	f040 83bd 	bne.w	8005054 <UART+0xc2c>
			//Request Current Station
			if(Finish){
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <UART+0x5b4>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8088 	beq.w	80049f4 <UART+0x5cc>
				if(CheckTrasmit){
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <UART+0x5b8>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d021      	beq.n	8004930 <UART+0x508>
					TxData2[4]=TxData[2];
 80048ec:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <UART+0x5bc>)
 80048ee:	789a      	ldrb	r2, [r3, #2]
 80048f0:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <UART+0x5c0>)
 80048f2:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <UART+0x5bc>)
 80048f6:	78da      	ldrb	r2, [r3, #3]
 80048f8:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <UART+0x5c0>)
 80048fa:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <UART+0x5bc>)
 80048fe:	791a      	ldrb	r2, [r3, #4]
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <UART+0x5c0>)
 8004902:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <UART+0x5bc>)
 8004906:	795a      	ldrb	r2, [r3, #5]
 8004908:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <UART+0x5c0>)
 800490a:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <UART+0x5b8>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2); //
 8004912:	482d      	ldr	r0, [pc, #180]	; (80049c8 <UART+0x5a0>)
 8004914:	f006 f9a2 	bl	800ac5c <HAL_UART_DMAStop>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004918:	2208      	movs	r2, #8
 800491a:	4933      	ldr	r1, [pc, #204]	; (80049e8 <UART+0x5c0>)
 800491c:	482a      	ldr	r0, [pc, #168]	; (80049c8 <UART+0x5a0>)
 800491e:	f006 f8ef 	bl	800ab00 <HAL_UART_Transmit_DMA>
					Timestamp_UI=micros();
 8004922:	f7fd f8c9 	bl	8001ab8 <micros>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <UART+0x5c4>)
 800492c:	601a      	str	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
					CheckTrasmit=1;
				}
			}
		}
		break;
 800492e:	e391      	b.n	8005054 <UART+0xc2c>
					if(micros() - Timestamp_UI > UARTDelay){
 8004930:	f7fd f8c2 	bl	8001ab8 <micros>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	492c      	ldr	r1, [pc, #176]	; (80049ec <UART+0x5c4>)
 800493a:	6809      	ldr	r1, [r1, #0]
 800493c:	2000      	movs	r0, #0
 800493e:	6739      	str	r1, [r7, #112]	; 0x70
 8004940:	6778      	str	r0, [r7, #116]	; 0x74
 8004942:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004946:	4621      	mov	r1, r4
 8004948:	1a51      	subs	r1, r2, r1
 800494a:	66b9      	str	r1, [r7, #104]	; 0x68
 800494c:	4629      	mov	r1, r5
 800494e:	eb63 0301 	sbc.w	r3, r3, r1
 8004952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004954:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <UART+0x5c8>)
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	2200      	movs	r2, #0
 800495c:	663b      	str	r3, [r7, #96]	; 0x60
 800495e:	667a      	str	r2, [r7, #100]	; 0x64
 8004960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004964:	4623      	mov	r3, r4
 8004966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800496a:	4602      	mov	r2, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	462b      	mov	r3, r5
 8004970:	460a      	mov	r2, r1
 8004972:	4193      	sbcs	r3, r2
 8004974:	f080 836e 	bcs.w	8005054 <UART+0xc2c>
						RxData[0] = 0;
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <UART+0x580>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
						CheckTrasmit=1;
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <UART+0x5b8>)
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
						Finish =0;
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <UART+0x5b4>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
						HAL_UART_DMAStop(&huart2);
 800498a:	480f      	ldr	r0, [pc, #60]	; (80049c8 <UART+0x5a0>)
 800498c:	f006 f966 	bl	800ac5c <HAL_UART_DMAStop>
						HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004990:	220c      	movs	r2, #12
 8004992:	4905      	ldr	r1, [pc, #20]	; (80049a8 <UART+0x580>)
 8004994:	480c      	ldr	r0, [pc, #48]	; (80049c8 <UART+0x5a0>)
 8004996:	f006 f931 	bl	800abfc <HAL_UART_Receive_DMA>
		break;
 800499a:	e35b      	b.n	8005054 <UART+0xc2c>
 800499c:	f3af 8000 	nop.w
 80049a0:	a2529d39 	.word	0xa2529d39
 80049a4:	3f91df46 	.word	0x3f91df46
 80049a8:	2000067c 	.word	0x2000067c
 80049ac:	200006f8 	.word	0x200006f8
 80049b0:	200006f9 	.word	0x200006f9
 80049b4:	200006fa 	.word	0x200006fa
 80049b8:	2000069c 	.word	0x2000069c
 80049bc:	200000a0 	.word	0x200000a0
 80049c0:	200005c8 	.word	0x200005c8
 80049c4:	20000698 	.word	0x20000698
 80049c8:	200002d8 	.word	0x200002d8
 80049cc:	2000009c 	.word	0x2000009c
 80049d0:	200000c9 	.word	0x200000c9
 80049d4:	200000ca 	.word	0x200000ca
 80049d8:	200000cb 	.word	0x200000cb
 80049dc:	20000699 	.word	0x20000699
 80049e0:	200000cf 	.word	0x200000cf
 80049e4:	2000008c 	.word	0x2000008c
 80049e8:	20000094 	.word	0x20000094
 80049ec:	200006fc 	.word	0x200006fc
 80049f0:	2000008a 	.word	0x2000008a
			else if(CheckTrasmit){
 80049f4:	4bae      	ldr	r3, [pc, #696]	; (8004cb0 <UART+0x888>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d047      	beq.n	8004a8c <UART+0x664>
				TxData[2] = 0b10011001;
 80049fc:	4bad      	ldr	r3, [pc, #692]	; (8004cb4 <UART+0x88c>)
 80049fe:	2299      	movs	r2, #153	; 0x99
 8004a00:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 8004a02:	4bac      	ldr	r3, [pc, #688]	; (8004cb4 <UART+0x88c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 8004a08:	4bab      	ldr	r3, [pc, #684]	; (8004cb8 <UART+0x890>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fd47 	bl	80004a0 <__aeabi_f2d>
 8004a12:	a3a3      	add	r3, pc, #652	; (adr r3, 8004ca0 <UART+0x878>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fb fec4 	bl	80007a4 <__aeabi_ddiv>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	ec43 2b17 	vmov	d7, r2, r3
 8004a24:	eeb0 0a47 	vmov.f32	s0, s14
 8004a28:	eef0 0a67 	vmov.f32	s1, s15
 8004a2c:	f007 fc90 	bl	800c350 <ceil>
 8004a30:	ec53 2b10 	vmov	r2, r3, d0
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7fc f83a 	bl	8000ab0 <__aeabi_d2uiz>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	4b9e      	ldr	r3, [pc, #632]	; (8004cbc <UART+0x894>)
 8004a42:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 8004a44:	4b9d      	ldr	r3, [pc, #628]	; (8004cbc <UART+0x894>)
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	4b9a      	ldr	r3, [pc, #616]	; (8004cb4 <UART+0x88c>)
 8004a4a:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004a4c:	4b99      	ldr	r3, [pc, #612]	; (8004cb4 <UART+0x88c>)
 8004a4e:	789a      	ldrb	r2, [r3, #2]
 8004a50:	4b98      	ldr	r3, [pc, #608]	; (8004cb4 <UART+0x88c>)
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	4413      	add	r3, r2
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	4b96      	ldr	r3, [pc, #600]	; (8004cb4 <UART+0x88c>)
 8004a5a:	791b      	ldrb	r3, [r3, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	4b93      	ldr	r3, [pc, #588]	; (8004cb4 <UART+0x88c>)
 8004a66:	715a      	strb	r2, [r3, #5]
				HAL_UART_DMAStop(&huart2); //
 8004a68:	4895      	ldr	r0, [pc, #596]	; (8004cc0 <UART+0x898>)
 8004a6a:	f006 f8f7 	bl	800ac5c <HAL_UART_DMAStop>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004a6e:	2206      	movs	r2, #6
 8004a70:	4990      	ldr	r1, [pc, #576]	; (8004cb4 <UART+0x88c>)
 8004a72:	4893      	ldr	r0, [pc, #588]	; (8004cc0 <UART+0x898>)
 8004a74:	f006 f844 	bl	800ab00 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004a78:	f7fd f81e 	bl	8001ab8 <micros>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4b90      	ldr	r3, [pc, #576]	; (8004cc4 <UART+0x89c>)
 8004a82:	601a      	str	r2, [r3, #0]
				CheckTrasmit=0;
 8004a84:	4b8a      	ldr	r3, [pc, #552]	; (8004cb0 <UART+0x888>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
		break;
 8004a8a:	e2e3      	b.n	8005054 <UART+0xc2c>
				if(micros() - Timestamp_UI > UARTDelay){
 8004a8c:	f7fd f814 	bl	8001ab8 <micros>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	498b      	ldr	r1, [pc, #556]	; (8004cc4 <UART+0x89c>)
 8004a96:	6809      	ldr	r1, [r1, #0]
 8004a98:	2000      	movs	r0, #0
 8004a9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004a9e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	6539      	str	r1, [r7, #80]	; 0x50
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab0:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <UART+0x8a0>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004abc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	462b      	mov	r3, r5
 8004acc:	460a      	mov	r2, r1
 8004ace:	4193      	sbcs	r3, r2
 8004ad0:	f080 82c0 	bcs.w	8005054 <UART+0xc2c>
					RxData[0] = 0;
 8004ad4:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <UART+0x8a4>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004ada:	4879      	ldr	r0, [pc, #484]	; (8004cc0 <UART+0x898>)
 8004adc:	f006 f8be 	bl	800ac5c <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004ae0:	220c      	movs	r2, #12
 8004ae2:	497a      	ldr	r1, [pc, #488]	; (8004ccc <UART+0x8a4>)
 8004ae4:	4876      	ldr	r0, [pc, #472]	; (8004cc0 <UART+0x898>)
 8004ae6:	f006 f889 	bl	800abfc <HAL_UART_Receive_DMA>
					CheckTrasmit=1;
 8004aea:	4b71      	ldr	r3, [pc, #452]	; (8004cb0 <UART+0x888>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
		break;
 8004af0:	e2b0      	b.n	8005054 <UART+0xc2c>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <UART+0x8a4>)
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	2b65      	cmp	r3, #101	; 0x65
 8004af8:	f040 82ae 	bne.w	8005058 <UART+0xc30>
			//Request Angular Position
		if(Finish){
 8004afc:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <UART+0x8a8>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d069      	beq.n	8004bd8 <UART+0x7b0>

			if(CheckTrasmit){
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <UART+0x888>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02f      	beq.n	8004b6c <UART+0x744>
				if(Arm_State == Setzero || Arm_State == Home){
 8004b0c:	4b71      	ldr	r3, [pc, #452]	; (8004cd4 <UART+0x8ac>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d003      	beq.n	8004b1c <UART+0x6f4>
 8004b14:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <UART+0x8ac>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <UART+0x700>
					TxData[4] = 0;
 8004b1c:	4b65      	ldr	r3, [pc, #404]	; (8004cb4 <UART+0x88c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	711a      	strb	r2, [r3, #4]
					TxData[3] =0;
 8004b22:	4b64      	ldr	r3, [pc, #400]	; (8004cb4 <UART+0x88c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	70da      	strb	r2, [r3, #3]
				}
				TxData2[4]=TxData[2];
 8004b28:	4b62      	ldr	r3, [pc, #392]	; (8004cb4 <UART+0x88c>)
 8004b2a:	789a      	ldrb	r2, [r3, #2]
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <UART+0x8b0>)
 8004b2e:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <UART+0x88c>)
 8004b32:	78da      	ldrb	r2, [r3, #3]
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <UART+0x8b0>)
 8004b36:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004b38:	4b5e      	ldr	r3, [pc, #376]	; (8004cb4 <UART+0x88c>)
 8004b3a:	791a      	ldrb	r2, [r3, #4]
 8004b3c:	4b66      	ldr	r3, [pc, #408]	; (8004cd8 <UART+0x8b0>)
 8004b3e:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004b40:	4b5c      	ldr	r3, [pc, #368]	; (8004cb4 <UART+0x88c>)
 8004b42:	795a      	ldrb	r2, [r3, #5]
 8004b44:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <UART+0x8b0>)
 8004b46:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <UART+0x888>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004b4e:	485c      	ldr	r0, [pc, #368]	; (8004cc0 <UART+0x898>)
 8004b50:	f006 f884 	bl	800ac5c <HAL_UART_DMAStop>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004b54:	2208      	movs	r2, #8
 8004b56:	4960      	ldr	r1, [pc, #384]	; (8004cd8 <UART+0x8b0>)
 8004b58:	4859      	ldr	r0, [pc, #356]	; (8004cc0 <UART+0x898>)
 8004b5a:	f005 ffd1 	bl	800ab00 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004b5e:	f7fc ffab 	bl	8001ab8 <micros>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <UART+0x89c>)
 8004b68:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 8004b6a:	e275      	b.n	8005058 <UART+0xc30>
				if(micros() - Timestamp_UI > UARTDelay){
 8004b6c:	f7fc ffa4 	bl	8001ab8 <micros>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4953      	ldr	r1, [pc, #332]	; (8004cc4 <UART+0x89c>)
 8004b76:	6809      	ldr	r1, [r1, #0]
 8004b78:	2000      	movs	r0, #0
 8004b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b7c:	6478      	str	r0, [r7, #68]	; 0x44
 8004b7e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004b82:	4621      	mov	r1, r4
 8004b84:	1a51      	subs	r1, r2, r1
 8004b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <UART+0x8a0>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2200      	movs	r2, #0
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	462b      	mov	r3, r5
 8004bac:	460a      	mov	r2, r1
 8004bae:	4193      	sbcs	r3, r2
 8004bb0:	f080 8252 	bcs.w	8005058 <UART+0xc30>
					RxData[0] = 0;
 8004bb4:	4b45      	ldr	r3, [pc, #276]	; (8004ccc <UART+0x8a4>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <UART+0x888>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <UART+0x8a8>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004bc6:	483e      	ldr	r0, [pc, #248]	; (8004cc0 <UART+0x898>)
 8004bc8:	f006 f848 	bl	800ac5c <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004bcc:	220c      	movs	r2, #12
 8004bce:	493f      	ldr	r1, [pc, #252]	; (8004ccc <UART+0x8a4>)
 8004bd0:	483b      	ldr	r0, [pc, #236]	; (8004cc0 <UART+0x898>)
 8004bd2:	f006 f813 	bl	800abfc <HAL_UART_Receive_DMA>
		break;
 8004bd6:	e23f      	b.n	8005058 <UART+0xc30>
		else if(CheckTrasmit){
 8004bd8:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <UART+0x888>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d07f      	beq.n	8004ce0 <UART+0x8b8>
			TxData[2] = 0b10011010;
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <UART+0x88c>)
 8004be2:	229a      	movs	r2, #154	; 0x9a
 8004be4:	709a      	strb	r2, [r3, #2]
			if(Arm_State == Setzero){
 8004be6:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <UART+0x8ac>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d106      	bne.n	8004bfc <UART+0x7d4>
				TxData[3] = 0;
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <UART+0x88c>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0;
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <UART+0x88c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	711a      	strb	r2, [r3, #4]
 8004bfa:	e030      	b.n	8004c5e <UART+0x836>
				TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <UART+0x890>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fc4d 	bl	80004a0 <__aeabi_f2d>
 8004c06:	a328      	add	r3, pc, #160	; (adr r3, 8004ca8 <UART+0x880>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fca0 	bl	8000550 <__aeabi_dmul>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <UART+0x8b4>)
 8004c1e:	f7fb fdc1 	bl	80007a4 <__aeabi_ddiv>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7fb ff41 	bl	8000ab0 <__aeabi_d2uiz>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <UART+0x88c>)
 8004c34:	70da      	strb	r2, [r3, #3]
				TxData[4] = (uint8_t)(theta_now*10000.0)%256;
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <UART+0x890>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fc30 	bl	80004a0 <__aeabi_f2d>
 8004c40:	a319      	add	r3, pc, #100	; (adr r3, 8004ca8 <UART+0x880>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fc83 	bl	8000550 <__aeabi_dmul>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fb ff2d 	bl	8000ab0 <__aeabi_d2uiz>
 8004c56:	4603      	mov	r3, r0
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <UART+0x88c>)
 8004c5c:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <UART+0x88c>)
 8004c60:	789a      	ldrb	r2, [r3, #2]
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <UART+0x88c>)
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	4413      	add	r3, r2
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <UART+0x88c>)
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <UART+0x88c>)
 8004c78:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2);
 8004c7a:	4811      	ldr	r0, [pc, #68]	; (8004cc0 <UART+0x898>)
 8004c7c:	f005 ffee 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004c80:	2206      	movs	r2, #6
 8004c82:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <UART+0x88c>)
 8004c84:	480e      	ldr	r0, [pc, #56]	; (8004cc0 <UART+0x898>)
 8004c86:	f005 ff3b 	bl	800ab00 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004c8a:	f7fc ff15 	bl	8001ab8 <micros>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <UART+0x89c>)
 8004c94:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <UART+0x888>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
		break;
 8004c9c:	e1dc      	b.n	8005058 <UART+0xc30>
 8004c9e:	bf00      	nop
 8004ca0:	cac08312 	.word	0xcac08312
 8004ca4:	3fb645a1 	.word	0x3fb645a1
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	40c38800 	.word	0x40c38800
 8004cb0:	200000cf 	.word	0x200000cf
 8004cb4:	2000008c 	.word	0x2000008c
 8004cb8:	200003f4 	.word	0x200003f4
 8004cbc:	200000c8 	.word	0x200000c8
 8004cc0:	200002d8 	.word	0x200002d8
 8004cc4:	200006fc 	.word	0x200006fc
 8004cc8:	2000008a 	.word	0x2000008a
 8004ccc:	2000067c 	.word	0x2000067c
 8004cd0:	20000699 	.word	0x20000699
 8004cd4:	200000cb 	.word	0x200000cb
 8004cd8:	20000094 	.word	0x20000094
 8004cdc:	40700000 	.word	0x40700000
			if(micros() - Timestamp_UI > UARTDelay){
 8004ce0:	f7fc feea 	bl	8001ab8 <micros>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	49ab      	ldr	r1, [pc, #684]	; (8004f98 <UART+0xb70>)
 8004cea:	6809      	ldr	r1, [r1, #0]
 8004cec:	2000      	movs	r0, #0
 8004cee:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cf2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d02:	4ba6      	ldr	r3, [pc, #664]	; (8004f9c <UART+0xb74>)
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d12:	460b      	mov	r3, r1
 8004d14:	4553      	cmp	r3, sl
 8004d16:	4613      	mov	r3, r2
 8004d18:	eb73 030b 	sbcs.w	r3, r3, fp
 8004d1c:	f080 819c 	bcs.w	8005058 <UART+0xc30>
				RxData[0] = 0;
 8004d20:	4b9f      	ldr	r3, [pc, #636]	; (8004fa0 <UART+0xb78>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
				CheckTrasmit=1;
 8004d26:	4b9f      	ldr	r3, [pc, #636]	; (8004fa4 <UART+0xb7c>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
		break;
 8004d2c:	e194      	b.n	8005058 <UART+0xc30>
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 8004d2e:	4b9c      	ldr	r3, [pc, #624]	; (8004fa0 <UART+0xb78>)
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	f040 8192 	bne.w	800505c <UART+0xc34>
			//Request Angular Velocity
		if(Finish){
 8004d38:	4b9b      	ldr	r3, [pc, #620]	; (8004fa8 <UART+0xb80>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05a      	beq.n	8004df6 <UART+0x9ce>
			if(CheckTrasmit){
 8004d40:	4b98      	ldr	r3, [pc, #608]	; (8004fa4 <UART+0xb7c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d021      	beq.n	8004d8c <UART+0x964>
				TxData2[4]=TxData[2];
 8004d48:	4b98      	ldr	r3, [pc, #608]	; (8004fac <UART+0xb84>)
 8004d4a:	789a      	ldrb	r2, [r3, #2]
 8004d4c:	4b98      	ldr	r3, [pc, #608]	; (8004fb0 <UART+0xb88>)
 8004d4e:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004d50:	4b96      	ldr	r3, [pc, #600]	; (8004fac <UART+0xb84>)
 8004d52:	78da      	ldrb	r2, [r3, #3]
 8004d54:	4b96      	ldr	r3, [pc, #600]	; (8004fb0 <UART+0xb88>)
 8004d56:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004d58:	4b94      	ldr	r3, [pc, #592]	; (8004fac <UART+0xb84>)
 8004d5a:	791a      	ldrb	r2, [r3, #4]
 8004d5c:	4b94      	ldr	r3, [pc, #592]	; (8004fb0 <UART+0xb88>)
 8004d5e:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004d60:	4b92      	ldr	r3, [pc, #584]	; (8004fac <UART+0xb84>)
 8004d62:	795a      	ldrb	r2, [r3, #5]
 8004d64:	4b92      	ldr	r3, [pc, #584]	; (8004fb0 <UART+0xb88>)
 8004d66:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004d68:	4b8e      	ldr	r3, [pc, #568]	; (8004fa4 <UART+0xb7c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2); //
 8004d6e:	4891      	ldr	r0, [pc, #580]	; (8004fb4 <UART+0xb8c>)
 8004d70:	f005 ff74 	bl	800ac5c <HAL_UART_DMAStop>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004d74:	2208      	movs	r2, #8
 8004d76:	498e      	ldr	r1, [pc, #568]	; (8004fb0 <UART+0xb88>)
 8004d78:	488e      	ldr	r0, [pc, #568]	; (8004fb4 <UART+0xb8c>)
 8004d7a:	f005 fec1 	bl	800ab00 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004d7e:	f7fc fe9b 	bl	8001ab8 <micros>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b84      	ldr	r3, [pc, #528]	; (8004f98 <UART+0xb70>)
 8004d88:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 8004d8a:	e167      	b.n	800505c <UART+0xc34>
				if(micros() - Timestamp_UI > UARTDelay){
 8004d8c:	f7fc fe94 	bl	8001ab8 <micros>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4980      	ldr	r1, [pc, #512]	; (8004f98 <UART+0xb70>)
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	2000      	movs	r0, #0
 8004d9a:	61b9      	str	r1, [r7, #24]
 8004d9c:	61f8      	str	r0, [r7, #28]
 8004d9e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004da2:	4621      	mov	r1, r4
 8004da4:	ebb2 0801 	subs.w	r8, r2, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	eb63 0901 	sbc.w	r9, r3, r1
 8004dae:	4b7b      	ldr	r3, [pc, #492]	; (8004f9c <UART+0xb74>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2200      	movs	r2, #0
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	617a      	str	r2, [r7, #20]
 8004dba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4543      	cmp	r3, r8
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	eb73 0309 	sbcs.w	r3, r3, r9
 8004dc8:	f080 8148 	bcs.w	800505c <UART+0xc34>
					RxData[0] = 0;
 8004dcc:	4b74      	ldr	r3, [pc, #464]	; (8004fa0 <UART+0xb78>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004dd2:	4b74      	ldr	r3, [pc, #464]	; (8004fa4 <UART+0xb7c>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004dd8:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <UART+0xb80>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 8004dde:	4875      	ldr	r0, [pc, #468]	; (8004fb4 <UART+0xb8c>)
 8004de0:	f005 ff3c 	bl	800ac5c <HAL_UART_DMAStop>
					HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004de4:	220c      	movs	r2, #12
 8004de6:	496e      	ldr	r1, [pc, #440]	; (8004fa0 <UART+0xb78>)
 8004de8:	4872      	ldr	r0, [pc, #456]	; (8004fb4 <UART+0xb8c>)
 8004dea:	f005 ff07 	bl	800abfc <HAL_UART_Receive_DMA>
					CheckTrasmit=1;
 8004dee:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <UART+0xb7c>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
		break;
 8004df4:	e132      	b.n	800505c <UART+0xc34>
		else if (CheckTrasmit){
 8004df6:	4b6b      	ldr	r3, [pc, #428]	; (8004fa4 <UART+0xb7c>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d057      	beq.n	8004eae <UART+0xa86>
			TxData[2] = 0b10011011;
 8004dfe:	4b6b      	ldr	r3, [pc, #428]	; (8004fac <UART+0xb84>)
 8004e00:	229b      	movs	r2, #155	; 0x9b
 8004e02:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8004e04:	4b69      	ldr	r3, [pc, #420]	; (8004fac <UART+0xb84>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((positive(omega_kalman)*60/(2*M_PI))*255/10);
 8004e0a:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <UART+0xb90>)
 8004e0c:	edd3 7a00 	vldr	s15, [r3]
 8004e10:	eeb0 0a67 	vmov.f32	s0, s15
 8004e14:	f7ff face 	bl	80043b4 <positive>
 8004e18:	eef0 7a40 	vmov.f32	s15, s0
 8004e1c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004fbc <UART+0xb94>
 8004e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e24:	ee17 0a90 	vmov	r0, s15
 8004e28:	f7fb fb3a 	bl	80004a0 <__aeabi_f2d>
 8004e2c:	a356      	add	r3, pc, #344	; (adr r3, 8004f88 <UART+0xb60>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f7fb fcb7 	bl	80007a4 <__aeabi_ddiv>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	a354      	add	r3, pc, #336	; (adr r3, 8004f90 <UART+0xb68>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f7fb fb84 	bl	8000550 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	4b5a      	ldr	r3, [pc, #360]	; (8004fc0 <UART+0xb98>)
 8004e56:	f7fb fca5 	bl	80007a4 <__aeabi_ddiv>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fb fe25 	bl	8000ab0 <__aeabi_d2uiz>
 8004e66:	4603      	mov	r3, r0
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b50      	ldr	r3, [pc, #320]	; (8004fac <UART+0xb84>)
 8004e6c:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004e6e:	4b4f      	ldr	r3, [pc, #316]	; (8004fac <UART+0xb84>)
 8004e70:	789a      	ldrb	r2, [r3, #2]
 8004e72:	4b4e      	ldr	r3, [pc, #312]	; (8004fac <UART+0xb84>)
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	4413      	add	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <UART+0xb84>)
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4b49      	ldr	r3, [pc, #292]	; (8004fac <UART+0xb84>)
 8004e88:	715a      	strb	r2, [r3, #5]
			HAL_UART_DMAStop(&huart2); //
 8004e8a:	484a      	ldr	r0, [pc, #296]	; (8004fb4 <UART+0xb8c>)
 8004e8c:	f005 fee6 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004e90:	2206      	movs	r2, #6
 8004e92:	4946      	ldr	r1, [pc, #280]	; (8004fac <UART+0xb84>)
 8004e94:	4847      	ldr	r0, [pc, #284]	; (8004fb4 <UART+0xb8c>)
 8004e96:	f005 fe33 	bl	800ab00 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004e9a:	f7fc fe0d 	bl	8001ab8 <micros>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <UART+0xb70>)
 8004ea4:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004ea6:	4b3f      	ldr	r3, [pc, #252]	; (8004fa4 <UART+0xb7c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
		break;
 8004eac:	e0d6      	b.n	800505c <UART+0xc34>
			if(micros() - Timestamp_UI > UARTDelay){
 8004eae:	f7fc fe03 	bl	8001ab8 <micros>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4938      	ldr	r1, [pc, #224]	; (8004f98 <UART+0xb70>)
 8004eb8:	6809      	ldr	r1, [r1, #0]
 8004eba:	2000      	movs	r0, #0
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	1a54      	subs	r4, r2, r1
 8004ec8:	4649      	mov	r1, r9
 8004eca:	eb63 0501 	sbc.w	r5, r3, r1
 8004ece:	4b33      	ldr	r3, [pc, #204]	; (8004f9c <UART+0xb74>)
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	41ab      	sbcs	r3, r5
 8004ee6:	f080 80b9 	bcs.w	800505c <UART+0xc34>
				RxData[0] = 0;
 8004eea:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <UART+0xb78>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
				CheckTrasmit=1;
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <UART+0xb7c>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	701a      	strb	r2, [r3, #0]
		break;
 8004ef6:	e0b1      	b.n	800505c <UART+0xc34>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <UART+0xb78>)
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b63      	cmp	r3, #99	; 0x63
 8004efe:	f040 80af 	bne.w	8005060 <UART+0xc38>
			//enable gripple
			Enable_EndEffector = 1;
 8004f02:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <UART+0xb9c>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004f08:	482a      	ldr	r0, [pc, #168]	; (8004fb4 <UART+0xb8c>)
 8004f0a:	f005 fea7 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004f0e:	2202      	movs	r2, #2
 8004f10:	492d      	ldr	r1, [pc, #180]	; (8004fc8 <UART+0xba0>)
 8004f12:	4828      	ldr	r0, [pc, #160]	; (8004fb4 <UART+0xb8c>)
 8004f14:	f005 fdf4 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <UART+0xb78>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004f1e:	e09f      	b.n	8005060 <UART+0xc38>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <UART+0xb78>)
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b62      	cmp	r3, #98	; 0x62
 8004f26:	f040 809d 	bne.w	8005064 <UART+0xc3c>
			//disable gripple
			Enable_EndEffector = 0;
 8004f2a:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <UART+0xb9c>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004f30:	4820      	ldr	r0, [pc, #128]	; (8004fb4 <UART+0xb8c>)
 8004f32:	f005 fe93 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004f36:	2202      	movs	r2, #2
 8004f38:	4923      	ldr	r1, [pc, #140]	; (8004fc8 <UART+0xba0>)
 8004f3a:	481e      	ldr	r0, [pc, #120]	; (8004fb4 <UART+0xb8c>)
 8004f3c:	f005 fde0 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <UART+0xb78>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]

		}
		break;
 8004f46:	e08d      	b.n	8005064 <UART+0xc3c>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <UART+0xb78>)
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b61      	cmp	r3, #97	; 0x61
 8004f4e:	f040 808b 	bne.w	8005068 <UART+0xc40>
			//Set HOME
			Arm_State = Home;
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <UART+0xba4>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
			theta_now = 0.1;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <UART+0xba8>)
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <UART+0xbac>)
 8004f5c:	601a      	str	r2, [r3, #0]
			SetHome_Flag=1;
 8004f5e:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <UART+0xbb0>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004f64:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <UART+0xb8c>)
 8004f66:	f005 fe79 	bl	800ac5c <HAL_UART_DMAStop>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <UART+0xba0>)
 8004f6e:	4811      	ldr	r0, [pc, #68]	; (8004fb4 <UART+0xb8c>)
 8004f70:	f005 fdc6 	bl	800ab00 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <UART+0xb78>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004f7a:	e075      	b.n	8005068 <UART+0xc40>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004f7c:	220c      	movs	r2, #12
 8004f7e:	4908      	ldr	r1, [pc, #32]	; (8004fa0 <UART+0xb78>)
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <UART+0xb8c>)
 8004f82:	f005 fe3b 	bl	800abfc <HAL_UART_Receive_DMA>
		break;
 8004f86:	e072      	b.n	800506e <UART+0xc46>
 8004f88:	54442d18 	.word	0x54442d18
 8004f8c:	401921fb 	.word	0x401921fb
 8004f90:	00000000 	.word	0x00000000
 8004f94:	406fe000 	.word	0x406fe000
 8004f98:	200006fc 	.word	0x200006fc
 8004f9c:	2000008a 	.word	0x2000008a
 8004fa0:	2000067c 	.word	0x2000067c
 8004fa4:	200000cf 	.word	0x200000cf
 8004fa8:	20000699 	.word	0x20000699
 8004fac:	2000008c 	.word	0x2000008c
 8004fb0:	20000094 	.word	0x20000094
 8004fb4:	200002d8 	.word	0x200002d8
 8004fb8:	20000408 	.word	0x20000408
 8004fbc:	42700000 	.word	0x42700000
 8004fc0:	40240000 	.word	0x40240000
 8004fc4:	2000068b 	.word	0x2000068b
 8004fc8:	2000009c 	.word	0x2000009c
 8004fcc:	200000cb 	.word	0x200000cb
 8004fd0:	200003f4 	.word	0x200003f4
 8004fd4:	3dcccccd 	.word	0x3dcccccd
 8004fd8:	200003e8 	.word	0x200003e8
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <UART+0xc50>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b58      	cmp	r3, #88	; 0x58
 8004fe2:	d143      	bne.n	800506c <UART+0xc44>
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <UART+0xc50>)
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b75      	cmp	r3, #117	; 0x75
 8004fea:	d13f      	bne.n	800506c <UART+0xc44>
			if(RxData[2] !=0 && RxData[3] != 0){
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <UART+0xc50>)
 8004fee:	789b      	ldrb	r3, [r3, #2]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d03b      	beq.n	800506c <UART+0xc44>
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <UART+0xc50>)
 8004ff6:	78db      	ldrb	r3, [r3, #3]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d037      	beq.n	800506c <UART+0xc44>
				RxData[0]=RxData[2];
 8004ffc:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <UART+0xc50>)
 8004ffe:	789a      	ldrb	r2, [r3, #2]
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <UART+0xc50>)
 8005002:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 8005004:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <UART+0xc50>)
 8005006:	78da      	ldrb	r2, [r3, #3]
 8005008:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <UART+0xc50>)
 800500a:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <UART+0xc50>)
 800500e:	2200      	movs	r2, #0
 8005010:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <UART+0xc50>)
 8005014:	2200      	movs	r2, #0
 8005016:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 8005018:	4b17      	ldr	r3, [pc, #92]	; (8005078 <UART+0xc50>)
 800501a:	2200      	movs	r2, #0
 800501c:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 800501e:	4b16      	ldr	r3, [pc, #88]	; (8005078 <UART+0xc50>)
 8005020:	2200      	movs	r2, #0
 8005022:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8005024:	e022      	b.n	800506c <UART+0xc44>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <UART+0xc50>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 800502c:	4813      	ldr	r0, [pc, #76]	; (800507c <UART+0xc54>)
 800502e:	f005 fe15 	bl	800ac5c <HAL_UART_DMAStop>
		break;
 8005032:	e01c      	b.n	800506e <UART+0xc46>
		break;
 8005034:	bf00      	nop
 8005036:	e01a      	b.n	800506e <UART+0xc46>
		break;
 8005038:	bf00      	nop
 800503a:	e018      	b.n	800506e <UART+0xc46>
		break;
 800503c:	bf00      	nop
 800503e:	e016      	b.n	800506e <UART+0xc46>
		break;
 8005040:	bf00      	nop
 8005042:	e014      	b.n	800506e <UART+0xc46>
		break;
 8005044:	bf00      	nop
 8005046:	e012      	b.n	800506e <UART+0xc46>
		break;
 8005048:	bf00      	nop
 800504a:	e010      	b.n	800506e <UART+0xc46>
		break;
 800504c:	bf00      	nop
 800504e:	e00e      	b.n	800506e <UART+0xc46>
		break;
 8005050:	bf00      	nop
 8005052:	e00c      	b.n	800506e <UART+0xc46>
		break;
 8005054:	bf00      	nop
 8005056:	e00a      	b.n	800506e <UART+0xc46>
		break;
 8005058:	bf00      	nop
 800505a:	e008      	b.n	800506e <UART+0xc46>
		break;
 800505c:	bf00      	nop
 800505e:	e006      	b.n	800506e <UART+0xc46>
		break;
 8005060:	bf00      	nop
 8005062:	e004      	b.n	800506e <UART+0xc46>
		break;
 8005064:	bf00      	nop
 8005066:	e002      	b.n	800506e <UART+0xc46>
		break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <UART+0xc46>
		break;
 800506c:	bf00      	nop
	}
}
 800506e:	bf00      	nop
 8005070:	3788      	adds	r7, #136	; 0x88
 8005072:	46bd      	mov	sp, r7
 8005074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005078:	2000067c 	.word	0x2000067c
 800507c:	200002d8 	.word	0x200002d8

08005080 <OpenEndEffector>:

void OpenEndEffector() {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8005086:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <OpenEndEffector+0xf0>)
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	d119      	bne.n	80050c6 <OpenEndEffector+0x46>
 8005092:	4b38      	ldr	r3, [pc, #224]	; (8005174 <OpenEndEffector+0xf4>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d115      	bne.n	80050c6 <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 800509a:	2364      	movs	r3, #100	; 0x64
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	4a35      	ldr	r2, [pc, #212]	; (8005178 <OpenEndEffector+0xf8>)
 80050a2:	2146      	movs	r1, #70	; 0x46
 80050a4:	4832      	ldr	r0, [pc, #200]	; (8005170 <OpenEndEffector+0xf0>)
 80050a6:	f001 fcfb 	bl	8006aa0 <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <OpenEndEffector+0xf4>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <OpenEndEffector+0xfc>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 80050b6:	4b32      	ldr	r3, [pc, #200]	; (8005180 <OpenEndEffector+0x100>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 80050bc:	f000 fc72 	bl	80059a4 <HAL_GetTick>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a30      	ldr	r2, [pc, #192]	; (8005184 <OpenEndEffector+0x104>)
 80050c4:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 80050c6:	4b2d      	ldr	r3, [pc, #180]	; (800517c <OpenEndEffector+0xfc>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d144      	bne.n	8005158 <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 80050ce:	f000 fc69 	bl	80059a4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <OpenEndEffector+0x104>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2bfa      	cmp	r3, #250	; 0xfa
 80050dc:	d906      	bls.n	80050ec <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 80050de:	f000 fc61 	bl	80059a4 <HAL_GetTick>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <OpenEndEffector+0x104>)
 80050e6:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 80050e8:	f000 f850 	bl	800518c <CheckEndEffector>
		}

		switch(EndEffector_State)
 80050ec:	4b24      	ldr	r3, [pc, #144]	; (8005180 <OpenEndEffector+0x100>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d83a      	bhi.n	800516a <OpenEndEffector+0xea>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <OpenEndEffector+0x7c>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005111 	.word	0x08005111
 8005100:	08005121 	.word	0x08005121
 8005104:	08005131 	.word	0x08005131
 8005108:	08005141 	.word	0x08005141
 800510c:	08005151 	.word	0x08005151
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <OpenEndEffector+0x108>)
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	2b12      	cmp	r3, #18
 8005116:	d121      	bne.n	800515c <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <OpenEndEffector+0x100>)
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800511e:	e01d      	b.n	800515c <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <OpenEndEffector+0x108>)
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	2b34      	cmp	r3, #52	; 0x34
 8005126:	d11b      	bne.n	8005160 <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <OpenEndEffector+0x100>)
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800512e:	e017      	b.n	8005160 <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <OpenEndEffector+0x108>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b56      	cmp	r3, #86	; 0x56
 8005136:	d115      	bne.n	8005164 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <OpenEndEffector+0x100>)
 800513a:	2203      	movs	r2, #3
 800513c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800513e:	e011      	b.n	8005164 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <OpenEndEffector+0x108>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	2b78      	cmp	r3, #120	; 0x78
 8005146:	d10f      	bne.n	8005168 <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <OpenEndEffector+0x100>)
 800514a:	2204      	movs	r2, #4
 800514c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800514e:	e00b      	b.n	8005168 <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <OpenEndEffector+0xfc>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
			break;
 8005156:	e008      	b.n	800516a <OpenEndEffector+0xea>
		}
	}
 8005158:	bf00      	nop
 800515a:	e006      	b.n	800516a <OpenEndEffector+0xea>
			break;
 800515c:	bf00      	nop
 800515e:	e004      	b.n	800516a <OpenEndEffector+0xea>
			break;
 8005160:	bf00      	nop
 8005162:	e002      	b.n	800516a <OpenEndEffector+0xea>
			break;
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <OpenEndEffector+0xea>
			break;
 8005168:	bf00      	nop
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000164 	.word	0x20000164
 8005174:	200006ac 	.word	0x200006ac
 8005178:	200000d0 	.word	0x200000d0
 800517c:	200006ad 	.word	0x200006ad
 8005180:	200000cc 	.word	0x200000cc
 8005184:	200006b0 	.word	0x200006b0
 8005188:	200006ae 	.word	0x200006ae

0800518c <CheckEndEffector>:

void CheckEndEffector()
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 8005192:	2301      	movs	r3, #1
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2301      	movs	r3, #1
 8005198:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <CheckEndEffector+0x38>)
 800519a:	2146      	movs	r1, #70	; 0x46
 800519c:	480a      	ldr	r0, [pc, #40]	; (80051c8 <CheckEndEffector+0x3c>)
 800519e:	f001 fd7d 	bl	8006c9c <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <CheckEndEffector+0x3c>)
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d107      	bne.n	80051be <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 80051ae:	2320      	movs	r3, #32
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2301      	movs	r3, #1
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <CheckEndEffector+0x40>)
 80051b6:	2146      	movs	r1, #70	; 0x46
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <CheckEndEffector+0x3c>)
 80051ba:	f001 fe35 	bl	8006e28 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200000d1 	.word	0x200000d1
 80051c8:	20000164 	.word	0x20000164
 80051cc:	200006ae 	.word	0x200006ae

080051d0 <TransferFunction>:

float TransferFunction(float u_tf){
 80051d0:	b5b0      	push	{r4, r5, r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float volt_base = 1.0;
 80051da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80051de:	60bb      	str	r3, [r7, #8]
	u_i[0] = u_tf;
 80051e0:	4a47      	ldr	r2, [pc, #284]	; (8005300 <TransferFunction+0x130>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6013      	str	r3, [r2, #0]
	y_i[0] = 0.6524*y_i[1] + 157.5*u_i[1] - 306.8*u_i[2] + 151.9*u_i[3];
 80051e6:	4b47      	ldr	r3, [pc, #284]	; (8005304 <TransferFunction+0x134>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb f958 	bl	80004a0 <__aeabi_f2d>
 80051f0:	a33b      	add	r3, pc, #236	; (adr r3, 80052e0 <TransferFunction+0x110>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb f9ab 	bl	8000550 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	461d      	mov	r5, r3
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <TransferFunction+0x130>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f94a 	bl	80004a0 <__aeabi_f2d>
 800520c:	a336      	add	r3, pc, #216	; (adr r3, 80052e8 <TransferFunction+0x118>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f7fb f99d 	bl	8000550 <__aeabi_dmul>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4620      	mov	r0, r4
 800521c:	4629      	mov	r1, r5
 800521e:	f7fa ffe1 	bl	80001e4 <__adddf3>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4614      	mov	r4, r2
 8005228:	461d      	mov	r5, r3
 800522a:	4b35      	ldr	r3, [pc, #212]	; (8005300 <TransferFunction+0x130>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fb f936 	bl	80004a0 <__aeabi_f2d>
 8005234:	a32e      	add	r3, pc, #184	; (adr r3, 80052f0 <TransferFunction+0x120>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f989 	bl	8000550 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4620      	mov	r0, r4
 8005244:	4629      	mov	r1, r5
 8005246:	f7fa ffcb 	bl	80001e0 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4614      	mov	r4, r2
 8005250:	461d      	mov	r5, r3
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <TransferFunction+0x130>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb f922 	bl	80004a0 <__aeabi_f2d>
 800525c:	a326      	add	r3, pc, #152	; (adr r3, 80052f8 <TransferFunction+0x128>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f975 	bl	8000550 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fa ffb9 	bl	80001e4 <__adddf3>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	f7fb fc39 	bl	8000af0 <__aeabi_d2f>
 800527e:	4603      	mov	r3, r0
 8005280:	4a20      	ldr	r2, [pc, #128]	; (8005304 <TransferFunction+0x134>)
 8005282:	6013      	str	r3, [r2, #0]
	for(int i=2;i>=0;i--){
 8005284:	2302      	movs	r3, #2
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e018      	b.n	80052bc <TransferFunction+0xec>
		u_i[i+1]=u_i[i];
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	491c      	ldr	r1, [pc, #112]	; (8005300 <TransferFunction+0x130>)
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	440a      	add	r2, r1
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	4919      	ldr	r1, [pc, #100]	; (8005300 <TransferFunction+0x130>)
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	601a      	str	r2, [r3, #0]
		y_i[i+i]=y_i[i];
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4917      	ldr	r1, [pc, #92]	; (8005304 <TransferFunction+0x134>)
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	0092      	lsls	r2, r2, #2
 80052aa:	440a      	add	r2, r1
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4915      	ldr	r1, [pc, #84]	; (8005304 <TransferFunction+0x134>)
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	601a      	str	r2, [r3, #0]
	for(int i=2;i>=0;i--){
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	dae3      	bge.n	800528a <TransferFunction+0xba>
//	else if (t>t4 && PID_dir == 0 && 5.0*y_i[0] > -volt_base)
//	{
//		return 1.0;
//	}

	return positive(y_i[0]);
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <TransferFunction+0x134>)
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	eeb0 0a67 	vmov.f32	s0, s15
 80052cc:	f7ff f872 	bl	80043b4 <positive>
 80052d0:	eef0 7a40 	vmov.f32	s15, s0
}
 80052d4:	eeb0 0a67 	vmov.f32	s0, s15
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	bf00      	nop
 80052e0:	f6fd21ff 	.word	0xf6fd21ff
 80052e4:	3fe4e075 	.word	0x3fe4e075
 80052e8:	00000000 	.word	0x00000000
 80052ec:	4063b000 	.word	0x4063b000
 80052f0:	cccccccd 	.word	0xcccccccd
 80052f4:	40732ccc 	.word	0x40732ccc
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	4062fccc 	.word	0x4062fccc
 8005300:	200006b8 	.word	0x200006b8
 8005304:	200006c8 	.word	0x200006c8

08005308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800530c:	b672      	cpsid	i
}
 800530e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005310:	e7fe      	b.n	8005310 <Error_Handler+0x8>
	...

08005314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_MspInit+0x4c>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <HAL_MspInit+0x4c>)
 8005324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005328:	6453      	str	r3, [r2, #68]	; 0x44
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_MspInit+0x4c>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_MspInit+0x4c>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a08      	ldr	r2, [pc, #32]	; (8005360 <HAL_MspInit+0x4c>)
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_MspInit+0x4c>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005352:	2007      	movs	r0, #7
 8005354:	f000 fc26 	bl	8005ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023800 	.word	0x40023800

08005364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a21      	ldr	r2, [pc, #132]	; (8005408 <HAL_I2C_MspInit+0xa4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d13c      	bne.n	8005400 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <HAL_I2C_MspInit+0xa8>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_I2C_MspInit+0xa8>)
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b1d      	ldr	r3, [pc, #116]	; (800540c <HAL_I2C_MspInit+0xa8>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80053a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053a8:	2312      	movs	r3, #18
 80053aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b0:	2303      	movs	r3, #3
 80053b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053b4:	2304      	movs	r3, #4
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	4619      	mov	r1, r3
 80053be:	4814      	ldr	r0, [pc, #80]	; (8005410 <HAL_I2C_MspInit+0xac>)
 80053c0:	f001 f842 	bl	8006448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_I2C_MspInit+0xa8>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	4a0f      	ldr	r2, [pc, #60]	; (800540c <HAL_I2C_MspInit+0xa8>)
 80053ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d2:	6413      	str	r3, [r2, #64]	; 0x40
 80053d4:	4b0d      	ldr	r3, [pc, #52]	; (800540c <HAL_I2C_MspInit+0xa8>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80053e0:	2200      	movs	r2, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	201f      	movs	r0, #31
 80053e6:	f000 fbe8 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80053ea:	201f      	movs	r0, #31
 80053ec:	f000 fc01 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80053f0:	2200      	movs	r2, #0
 80053f2:	2100      	movs	r1, #0
 80053f4:	2020      	movs	r0, #32
 80053f6:	f000 fbe0 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80053fa:	2020      	movs	r0, #32
 80053fc:	f000 fbf9 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005400:	bf00      	nop
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40005400 	.word	0x40005400
 800540c:	40023800 	.word	0x40023800
 8005410:	40020400 	.word	0x40020400

08005414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_TIM_Base_MspInit+0xb8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d116      	bne.n	8005454 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6453      	str	r3, [r2, #68]	; 0x44
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005442:	2200      	movs	r2, #0
 8005444:	2100      	movs	r1, #0
 8005446:	201a      	movs	r0, #26
 8005448:	f000 fbb7 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800544c:	201a      	movs	r0, #26
 800544e:	f000 fbd0 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005452:	e036      	b.n	80054c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_TIM_Base_MspInit+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d116      	bne.n	800548c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800547a:	2200      	movs	r2, #0
 800547c:	2100      	movs	r1, #0
 800547e:	201e      	movs	r0, #30
 8005480:	f000 fb9b 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005484:	201e      	movs	r0, #30
 8005486:	f000 fbb4 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 800548a:	e01a      	b.n	80054c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <HAL_TIM_Base_MspInit+0xc4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d115      	bne.n	80054c2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a4:	6453      	str	r3, [r2, #68]	; 0x44
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <HAL_TIM_Base_MspInit+0xbc>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	2100      	movs	r1, #0
 80054b6:	201a      	movs	r0, #26
 80054b8:	f000 fb7f 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80054bc:	201a      	movs	r0, #26
 80054be:	f000 fb98 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40014800 	.word	0x40014800

080054dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_TIM_Encoder_MspInit+0x84>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d12b      	bne.n	8005556 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	4a17      	ldr	r2, [pc, #92]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	6413      	str	r3, [r2, #64]	; 0x40
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	6313      	str	r3, [r2, #48]	; 0x30
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <HAL_TIM_Encoder_MspInit+0x88>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553a:	2302      	movs	r3, #2
 800553c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005542:	2300      	movs	r3, #0
 8005544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005546:	2302      	movs	r3, #2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	4619      	mov	r1, r3
 8005550:	4805      	ldr	r0, [pc, #20]	; (8005568 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005552:	f000 ff79 	bl	8006448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005556:	bf00      	nop
 8005558:	3728      	adds	r7, #40	; 0x28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40000400 	.word	0x40000400
 8005564:	40023800 	.word	0x40023800
 8005568:	40020000 	.word	0x40020000

0800556c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <HAL_TIM_MspPostInit+0x68>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d11e      	bne.n	80055cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_TIM_MspPostInit+0x6c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <HAL_TIM_MspPostInit+0x6c>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6313      	str	r3, [r2, #48]	; 0x30
 800559e:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <HAL_TIM_MspPostInit+0x6c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 80055aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b0:	2302      	movs	r3, #2
 80055b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055bc:	2301      	movs	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80055c0:	f107 030c 	add.w	r3, r7, #12
 80055c4:	4619      	mov	r1, r3
 80055c6:	4805      	ldr	r0, [pc, #20]	; (80055dc <HAL_TIM_MspPostInit+0x70>)
 80055c8:	f000 ff3e 	bl	8006448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80055cc:	bf00      	nop
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020000 	.word	0x40020000

080055e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e8:	f107 0314 	add.w	r3, r7, #20
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a4c      	ldr	r2, [pc, #304]	; (8005730 <HAL_UART_MspInit+0x150>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	f040 8091 	bne.w	8005726 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	4b4a      	ldr	r3, [pc, #296]	; (8005734 <HAL_UART_MspInit+0x154>)
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	4a49      	ldr	r2, [pc, #292]	; (8005734 <HAL_UART_MspInit+0x154>)
 800560e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005612:	6413      	str	r3, [r2, #64]	; 0x40
 8005614:	4b47      	ldr	r3, [pc, #284]	; (8005734 <HAL_UART_MspInit+0x154>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	4b43      	ldr	r3, [pc, #268]	; (8005734 <HAL_UART_MspInit+0x154>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4a42      	ldr	r2, [pc, #264]	; (8005734 <HAL_UART_MspInit+0x154>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6313      	str	r3, [r2, #48]	; 0x30
 8005630:	4b40      	ldr	r3, [pc, #256]	; (8005734 <HAL_UART_MspInit+0x154>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800563c:	230c      	movs	r3, #12
 800563e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005640:	2302      	movs	r3, #2
 8005642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005648:	2303      	movs	r3, #3
 800564a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800564c:	2307      	movs	r3, #7
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4619      	mov	r1, r3
 8005656:	4838      	ldr	r0, [pc, #224]	; (8005738 <HAL_UART_MspInit+0x158>)
 8005658:	f000 fef6 	bl	8006448 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800565c:	4b37      	ldr	r3, [pc, #220]	; (800573c <HAL_UART_MspInit+0x15c>)
 800565e:	4a38      	ldr	r2, [pc, #224]	; (8005740 <HAL_UART_MspInit+0x160>)
 8005660:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005662:	4b36      	ldr	r3, [pc, #216]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005668:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <HAL_UART_MspInit+0x15c>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005670:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005672:	2200      	movs	r2, #0
 8005674:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005676:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800567c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800567e:	4b2f      	ldr	r3, [pc, #188]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005684:	4b2d      	ldr	r3, [pc, #180]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800568a:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_UART_MspInit+0x15c>)
 800568c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005690:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_UART_MspInit+0x15c>)
 8005694:	2200      	movs	r2, #0
 8005696:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <HAL_UART_MspInit+0x15c>)
 800569a:	2200      	movs	r2, #0
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800569e:	4827      	ldr	r0, [pc, #156]	; (800573c <HAL_UART_MspInit+0x15c>)
 80056a0:	f000 fac2 	bl	8005c28 <HAL_DMA_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80056aa:	f7ff fe2d 	bl	8005308 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_UART_MspInit+0x15c>)
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_UART_MspInit+0x15c>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056bc:	4a22      	ldr	r2, [pc, #136]	; (8005748 <HAL_UART_MspInit+0x168>)
 80056be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056ca:	2240      	movs	r2, #64	; 0x40
 80056cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056de:	2200      	movs	r2, #0
 80056e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056f4:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80056fa:	4812      	ldr	r0, [pc, #72]	; (8005744 <HAL_UART_MspInit+0x164>)
 80056fc:	f000 fa94 	bl	8005c28 <HAL_DMA_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005706:	f7ff fdff 	bl	8005308 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <HAL_UART_MspInit+0x164>)
 800570e:	635a      	str	r2, [r3, #52]	; 0x34
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <HAL_UART_MspInit+0x164>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005716:	2200      	movs	r2, #0
 8005718:	2100      	movs	r1, #0
 800571a:	2026      	movs	r0, #38	; 0x26
 800571c:	f000 fa4d 	bl	8005bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005720:	2026      	movs	r0, #38	; 0x26
 8005722:	f000 fa66 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005726:	bf00      	nop
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40004400 	.word	0x40004400
 8005734:	40023800 	.word	0x40023800
 8005738:	40020000 	.word	0x40020000
 800573c:	2000031c 	.word	0x2000031c
 8005740:	40026088 	.word	0x40026088
 8005744:	2000037c 	.word	0x2000037c
 8005748:	400260a0 	.word	0x400260a0

0800574c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005750:	e7fe      	b.n	8005750 <NMI_Handler+0x4>

08005752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005752:	b480      	push	{r7}
 8005754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005756:	e7fe      	b.n	8005756 <HardFault_Handler+0x4>

08005758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800575c:	e7fe      	b.n	800575c <MemManage_Handler+0x4>

0800575e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005762:	e7fe      	b.n	8005762 <BusFault_Handler+0x4>

08005764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005768:	e7fe      	b.n	8005768 <UsageFault_Handler+0x4>

0800576a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005798:	f000 f8f0 	bl	800597c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800579c:	bf00      	nop
 800579e:	bd80      	pop	{r7, pc}

080057a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 80057a4:	2004      	movs	r0, #4
 80057a6:	f001 f81f 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}

080057ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80057b2:	2010      	movs	r0, #16
 80057b4:	f001 f818 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}

080057bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057c0:	4802      	ldr	r0, [pc, #8]	; (80057cc <DMA1_Stream5_IRQHandler+0x10>)
 80057c2:	f000 fbc9 	bl	8005f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	2000031c 	.word	0x2000031c

080057d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <DMA1_Stream6_IRQHandler+0x10>)
 80057d6:	f000 fbbf 	bl	8005f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2000037c 	.word	0x2000037c

080057e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057e8:	4803      	ldr	r0, [pc, #12]	; (80057f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80057ea:	f004 fae1 	bl	8009db0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80057ee:	4803      	ldr	r0, [pc, #12]	; (80057fc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80057f0:	f004 fade 	bl	8009db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200001b8 	.word	0x200001b8
 80057fc:	20000290 	.word	0x20000290

08005800 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005804:	4802      	ldr	r0, [pc, #8]	; (8005810 <TIM4_IRQHandler+0x10>)
 8005806:	f004 fad3 	bl	8009db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000248 	.word	0x20000248

08005814 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005818:	4802      	ldr	r0, [pc, #8]	; (8005824 <I2C1_EV_IRQHandler+0x10>)
 800581a:	f001 fc03 	bl	8007024 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000164 	.word	0x20000164

08005828 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800582c:	4802      	ldr	r0, [pc, #8]	; (8005838 <I2C1_ER_IRQHandler+0x10>)
 800582e:	f001 fd6a 	bl	8007306 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000164 	.word	0x20000164

0800583c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005840:	4802      	ldr	r0, [pc, #8]	; (800584c <USART2_IRQHandler+0x10>)
 8005842:	f005 fa8b 	bl	800ad5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200002d8 	.word	0x200002d8

08005850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005858:	f000 ffc6 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800585c:	bf00      	nop
 800585e:	bd80      	pop	{r7, pc}

08005860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <SystemInit+0x20>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <SystemInit+0x20>)
 800586c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <Reset_Handler>:
 8005884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058bc <LoopFillZerobss+0x12>
 8005888:	480d      	ldr	r0, [pc, #52]	; (80058c0 <LoopFillZerobss+0x16>)
 800588a:	490e      	ldr	r1, [pc, #56]	; (80058c4 <LoopFillZerobss+0x1a>)
 800588c:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <LoopFillZerobss+0x1e>)
 800588e:	2300      	movs	r3, #0
 8005890:	e002      	b.n	8005898 <LoopCopyDataInit>

08005892 <CopyDataInit>:
 8005892:	58d4      	ldr	r4, [r2, r3]
 8005894:	50c4      	str	r4, [r0, r3]
 8005896:	3304      	adds	r3, #4

08005898 <LoopCopyDataInit>:
 8005898:	18c4      	adds	r4, r0, r3
 800589a:	428c      	cmp	r4, r1
 800589c:	d3f9      	bcc.n	8005892 <CopyDataInit>
 800589e:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <LoopFillZerobss+0x22>)
 80058a0:	4c0b      	ldr	r4, [pc, #44]	; (80058d0 <LoopFillZerobss+0x26>)
 80058a2:	2300      	movs	r3, #0
 80058a4:	e001      	b.n	80058aa <LoopFillZerobss>

080058a6 <FillZerobss>:
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	3204      	adds	r2, #4

080058aa <LoopFillZerobss>:
 80058aa:	42a2      	cmp	r2, r4
 80058ac:	d3fb      	bcc.n	80058a6 <FillZerobss>
 80058ae:	f7ff ffd7 	bl	8005860 <SystemInit>
 80058b2:	f006 fd21 	bl	800c2f8 <__libc_init_array>
 80058b6:	f7fb faef 	bl	8000e98 <main>
 80058ba:	4770      	bx	lr
 80058bc:	20020000 	.word	0x20020000
 80058c0:	20000000 	.word	0x20000000
 80058c4:	20000144 	.word	0x20000144
 80058c8:	0800d360 	.word	0x0800d360
 80058cc:	20000148 	.word	0x20000148
 80058d0:	20000704 	.word	0x20000704

080058d4 <ADC_IRQHandler>:
 80058d4:	e7fe      	b.n	80058d4 <ADC_IRQHandler>
	...

080058d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <HAL_Init+0x40>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <HAL_Init+0x40>)
 80058e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_Init+0x40>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <HAL_Init+0x40>)
 80058ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <HAL_Init+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a07      	ldr	r2, [pc, #28]	; (8005918 <HAL_Init+0x40>)
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005900:	2003      	movs	r0, #3
 8005902:	f000 f94f 	bl	8005ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005906:	2000      	movs	r0, #0
 8005908:	f000 f808 	bl	800591c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800590c:	f7ff fd02 	bl	8005314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00

0800591c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005924:	4b12      	ldr	r3, [pc, #72]	; (8005970 <HAL_InitTick+0x54>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b12      	ldr	r3, [pc, #72]	; (8005974 <HAL_InitTick+0x58>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f967 	bl	8005c0e <HAL_SYSTICK_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e00e      	b.n	8005968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b0f      	cmp	r3, #15
 800594e:	d80a      	bhi.n	8005966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005950:	2200      	movs	r2, #0
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	f000 f92f 	bl	8005bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800595c:	4a06      	ldr	r2, [pc, #24]	; (8005978 <HAL_InitTick+0x5c>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200000d4 	.word	0x200000d4
 8005974:	200000dc 	.word	0x200000dc
 8005978:	200000d8 	.word	0x200000d8

0800597c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_IncTick+0x20>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_IncTick+0x24>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4413      	add	r3, r2
 800598c:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <HAL_IncTick+0x24>)
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	200000dc 	.word	0x200000dc
 80059a0:	20000700 	.word	0x20000700

080059a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return uwTick;
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_GetTick+0x14>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000700 	.word	0x20000700

080059bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059c4:	f7ff ffee 	bl	80059a4 <HAL_GetTick>
 80059c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d005      	beq.n	80059e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <HAL_Delay+0x44>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059e2:	bf00      	nop
 80059e4:	f7ff ffde 	bl	80059a4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d8f7      	bhi.n	80059e4 <HAL_Delay+0x28>
  {
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200000dc 	.word	0x200000dc

08005a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a20:	4013      	ands	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <__NVIC_GetPriorityGrouping+0x18>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f003 0307 	and.w	r3, r3, #7
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	db0b      	blt.n	8005a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	4907      	ldr	r1, [pc, #28]	; (8005aa0 <__NVIC_EnableIRQ+0x38>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2001      	movs	r0, #1
 8005a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e000e100 	.word	0xe000e100

08005aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	db0a      	blt.n	8005ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	490c      	ldr	r1, [pc, #48]	; (8005af0 <__NVIC_SetPriority+0x4c>)
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005acc:	e00a      	b.n	8005ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	4908      	ldr	r1, [pc, #32]	; (8005af4 <__NVIC_SetPriority+0x50>)
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	3b04      	subs	r3, #4
 8005adc:	0112      	lsls	r2, r2, #4
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	761a      	strb	r2, [r3, #24]
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	e000e100 	.word	0xe000e100
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f1c3 0307 	rsb	r3, r3, #7
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	bf28      	it	cs
 8005b16:	2304      	movcs	r3, #4
 8005b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d902      	bls.n	8005b28 <NVIC_EncodePriority+0x30>
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	3b03      	subs	r3, #3
 8005b26:	e000      	b.n	8005b2a <NVIC_EncodePriority+0x32>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b40:	f04f 31ff 	mov.w	r1, #4294967295
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4a:	43d9      	mvns	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b50:	4313      	orrs	r3, r2
         );
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3724      	adds	r7, #36	; 0x24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b70:	d301      	bcc.n	8005b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b72:	2301      	movs	r3, #1
 8005b74:	e00f      	b.n	8005b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <SysTick_Config+0x40>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b7e:	210f      	movs	r1, #15
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	f7ff ff8e 	bl	8005aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <SysTick_Config+0x40>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <SysTick_Config+0x40>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010

08005ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff29 	bl	8005a04 <__NVIC_SetPriorityGrouping>
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bcc:	f7ff ff3e 	bl	8005a4c <__NVIC_GetPriorityGrouping>
 8005bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff ff8e 	bl	8005af8 <NVIC_EncodePriority>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff5d 	bl	8005aa4 <__NVIC_SetPriority>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff31 	bl	8005a68 <__NVIC_EnableIRQ>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ffa2 	bl	8005b60 <SysTick_Config>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c34:	f7ff feb6 	bl	80059a4 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e099      	b.n	8005d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c64:	e00f      	b.n	8005c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c66:	f7ff fe9d 	bl	80059a4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b05      	cmp	r3, #5
 8005c72:	d908      	bls.n	8005c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e078      	b.n	8005d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e8      	bne.n	8005c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4b38      	ldr	r3, [pc, #224]	; (8005d80 <HAL_DMA_Init+0x158>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d107      	bne.n	8005cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0307 	bic.w	r3, r3, #7
 8005d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d117      	bne.n	8005d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb0f 	bl	8006350 <DMA_CheckFifoParam>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d46:	2301      	movs	r3, #1
 8005d48:	e016      	b.n	8005d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fac6 	bl	80062e4 <DMA_CalcBaseAndBitshift>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	223f      	movs	r2, #63	; 0x3f
 8005d62:	409a      	lsls	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	f010803f 	.word	0xf010803f

08005d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_DMA_Start_IT+0x26>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e040      	b.n	8005e2c <HAL_DMA_Start_IT+0xa8>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d12f      	bne.n	8005e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fa58 	bl	8006288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ddc:	223f      	movs	r2, #63	; 0x3f
 8005dde:	409a      	lsls	r2, r3
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0216 	orr.w	r2, r2, #22
 8005df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e005      	b.n	8005e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
 8005e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e42:	f7ff fdaf 	bl	80059a4 <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d008      	beq.n	8005e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e052      	b.n	8005f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0216 	bic.w	r2, r2, #22
 8005e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <HAL_DMA_Abort+0x62>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eb6:	e013      	b.n	8005ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb8:	f7ff fd74 	bl	80059a4 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d90c      	bls.n	8005ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e015      	b.n	8005f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e4      	bne.n	8005eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	223f      	movs	r2, #63	; 0x3f
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d004      	beq.n	8005f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2280      	movs	r2, #128	; 0x80
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e00c      	b.n	8005f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2205      	movs	r2, #5
 8005f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f64:	4b8e      	ldr	r3, [pc, #568]	; (80061a0 <HAL_DMA_IRQHandler+0x248>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a8e      	ldr	r2, [pc, #568]	; (80061a4 <HAL_DMA_IRQHandler+0x24c>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	0a9b      	lsrs	r3, r3, #10
 8005f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	2208      	movs	r2, #8
 8005f84:	409a      	lsls	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01a      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f043 0201 	orr.w	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	2201      	movs	r2, #1
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f043 0202 	orr.w	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffe:	2204      	movs	r2, #4
 8006000:	409a      	lsls	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d012      	beq.n	8006030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	2204      	movs	r2, #4
 800601e:	409a      	lsls	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	f043 0204 	orr.w	r2, r3, #4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006034:	2210      	movs	r2, #16
 8006036:	409a      	lsls	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d043      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d03c      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006052:	2210      	movs	r2, #16
 8006054:	409a      	lsls	r2, r3
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d018      	beq.n	800609a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d024      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
 8006086:	e01f      	b.n	80060c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01b      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	e016      	b.n	80060c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0208 	bic.w	r2, r2, #8
 80060b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	2220      	movs	r2, #32
 80060ce:	409a      	lsls	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 808f 	beq.w	80061f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8087 	beq.w	80061f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ee:	2220      	movs	r2, #32
 80060f0:	409a      	lsls	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d136      	bne.n	8006170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0216 	bic.w	r2, r2, #22
 8006110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <HAL_DMA_IRQHandler+0x1da>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0208 	bic.w	r2, r2, #8
 8006140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	223f      	movs	r2, #63	; 0x3f
 8006148:	409a      	lsls	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006162:	2b00      	cmp	r3, #0
 8006164:	d07e      	beq.n	8006264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
        }
        return;
 800616e:	e079      	b.n	8006264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01d      	beq.n	80061ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10d      	bne.n	80061a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	2b00      	cmp	r3, #0
 8006192:	d031      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
 800619c:	e02c      	b.n	80061f8 <HAL_DMA_IRQHandler+0x2a0>
 800619e:	bf00      	nop
 80061a0:	200000d4 	.word	0x200000d4
 80061a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d023      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	e01e      	b.n	80061f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10f      	bne.n	80061e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0210 	bic.w	r2, r2, #16
 80061d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d032      	beq.n	8006266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2205      	movs	r2, #5
 8006210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3301      	adds	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	429a      	cmp	r2, r3
 800622e:	d307      	bcc.n	8006240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f2      	bne.n	8006224 <HAL_DMA_IRQHandler+0x2cc>
 800623e:	e000      	b.n	8006242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	e000      	b.n	8006266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006264:	bf00      	nop
    }
  }
}
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800627a:	b2db      	uxtb	r3, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d108      	bne.n	80062c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062c6:	e007      	b.n	80062d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	60da      	str	r2, [r3, #12]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	3b10      	subs	r3, #16
 80062f4:	4a14      	ldr	r2, [pc, #80]	; (8006348 <DMA_CalcBaseAndBitshift+0x64>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <DMA_CalcBaseAndBitshift+0x68>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d909      	bls.n	8006326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	659a      	str	r2, [r3, #88]	; 0x58
 8006324:	e007      	b.n	8006336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	aaaaaaab 	.word	0xaaaaaaab
 800634c:	0800d318 	.word	0x0800d318

08006350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d11f      	bne.n	80063aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d856      	bhi.n	800641e <DMA_CheckFifoParam+0xce>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <DMA_CheckFifoParam+0x28>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	08006389 	.word	0x08006389
 800637c:	0800639b 	.word	0x0800639b
 8006380:	08006389 	.word	0x08006389
 8006384:	0800641f 	.word	0x0800641f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d046      	beq.n	8006422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006398:	e043      	b.n	8006422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063a2:	d140      	bne.n	8006426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a8:	e03d      	b.n	8006426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b2:	d121      	bne.n	80063f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d837      	bhi.n	800642a <DMA_CheckFifoParam+0xda>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <DMA_CheckFifoParam+0x70>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063d7 	.word	0x080063d7
 80063c8:	080063d1 	.word	0x080063d1
 80063cc:	080063e9 	.word	0x080063e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e030      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d025      	beq.n	800642e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e6:	e022      	b.n	800642e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063f0:	d11f      	bne.n	8006432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063f6:	e01c      	b.n	8006432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d903      	bls.n	8006406 <DMA_CheckFifoParam+0xb6>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d003      	beq.n	800640c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006404:	e018      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
      break;
 800640a:	e015      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00e      	beq.n	8006436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e00b      	b.n	8006436 <DMA_CheckFifoParam+0xe6>
      break;
 800641e:	bf00      	nop
 8006420:	e00a      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;
 8006422:	bf00      	nop
 8006424:	e008      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;
 8006426:	bf00      	nop
 8006428:	e006      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;
 800642a:	bf00      	nop
 800642c:	e004      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;   
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <DMA_CheckFifoParam+0xe8>
      break;
 8006436:	bf00      	nop
    }
  } 
  
  return status; 
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop

08006448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	; 0x24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	e159      	b.n	8006718 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006464:	2201      	movs	r2, #1
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4013      	ands	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	429a      	cmp	r2, r3
 800647e:	f040 8148 	bne.w	8006712 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	2b01      	cmp	r3, #1
 800648c:	d005      	beq.n	800649a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006496:	2b02      	cmp	r3, #2
 8006498:	d130      	bne.n	80064fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	2203      	movs	r2, #3
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43db      	mvns	r3, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4013      	ands	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064d0:	2201      	movs	r2, #1
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	43db      	mvns	r3, r3
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	4013      	ands	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f003 0201 	and.w	r2, r3, #1
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	2b03      	cmp	r3, #3
 8006506:	d017      	beq.n	8006538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	2203      	movs	r2, #3
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43db      	mvns	r3, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4313      	orrs	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d123      	bne.n	800658c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	08da      	lsrs	r2, r3, #3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3208      	adds	r2, #8
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	220f      	movs	r2, #15
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4313      	orrs	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	08da      	lsrs	r2, r3, #3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3208      	adds	r2, #8
 8006586:	69b9      	ldr	r1, [r7, #24]
 8006588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	2203      	movs	r2, #3
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4013      	ands	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 0203 	and.w	r2, r3, #3
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80a2 	beq.w	8006712 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	4b57      	ldr	r3, [pc, #348]	; (8006730 <HAL_GPIO_Init+0x2e8>)
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	4a56      	ldr	r2, [pc, #344]	; (8006730 <HAL_GPIO_Init+0x2e8>)
 80065d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065dc:	6453      	str	r3, [r2, #68]	; 0x44
 80065de:	4b54      	ldr	r3, [pc, #336]	; (8006730 <HAL_GPIO_Init+0x2e8>)
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ea:	4a52      	ldr	r2, [pc, #328]	; (8006734 <HAL_GPIO_Init+0x2ec>)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	089b      	lsrs	r3, r3, #2
 80065f0:	3302      	adds	r3, #2
 80065f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	220f      	movs	r2, #15
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	43db      	mvns	r3, r3
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	4013      	ands	r3, r2
 800660c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a49      	ldr	r2, [pc, #292]	; (8006738 <HAL_GPIO_Init+0x2f0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d019      	beq.n	800664a <HAL_GPIO_Init+0x202>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a48      	ldr	r2, [pc, #288]	; (800673c <HAL_GPIO_Init+0x2f4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_GPIO_Init+0x1fe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a47      	ldr	r2, [pc, #284]	; (8006740 <HAL_GPIO_Init+0x2f8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00d      	beq.n	8006642 <HAL_GPIO_Init+0x1fa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a46      	ldr	r2, [pc, #280]	; (8006744 <HAL_GPIO_Init+0x2fc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <HAL_GPIO_Init+0x1f6>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a45      	ldr	r2, [pc, #276]	; (8006748 <HAL_GPIO_Init+0x300>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_GPIO_Init+0x1f2>
 8006636:	2304      	movs	r3, #4
 8006638:	e008      	b.n	800664c <HAL_GPIO_Init+0x204>
 800663a:	2307      	movs	r3, #7
 800663c:	e006      	b.n	800664c <HAL_GPIO_Init+0x204>
 800663e:	2303      	movs	r3, #3
 8006640:	e004      	b.n	800664c <HAL_GPIO_Init+0x204>
 8006642:	2302      	movs	r3, #2
 8006644:	e002      	b.n	800664c <HAL_GPIO_Init+0x204>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <HAL_GPIO_Init+0x204>
 800664a:	2300      	movs	r3, #0
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	f002 0203 	and.w	r2, r2, #3
 8006652:	0092      	lsls	r2, r2, #2
 8006654:	4093      	lsls	r3, r2
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	4313      	orrs	r3, r2
 800665a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800665c:	4935      	ldr	r1, [pc, #212]	; (8006734 <HAL_GPIO_Init+0x2ec>)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	089b      	lsrs	r3, r3, #2
 8006662:	3302      	adds	r3, #2
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800666a:	4b38      	ldr	r3, [pc, #224]	; (800674c <HAL_GPIO_Init+0x304>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	43db      	mvns	r3, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800668e:	4a2f      	ldr	r2, [pc, #188]	; (800674c <HAL_GPIO_Init+0x304>)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <HAL_GPIO_Init+0x304>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	43db      	mvns	r3, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4013      	ands	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066b8:	4a24      	ldr	r2, [pc, #144]	; (800674c <HAL_GPIO_Init+0x304>)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066be:	4b23      	ldr	r3, [pc, #140]	; (800674c <HAL_GPIO_Init+0x304>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066e2:	4a1a      	ldr	r2, [pc, #104]	; (800674c <HAL_GPIO_Init+0x304>)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <HAL_GPIO_Init+0x304>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800670c:	4a0f      	ldr	r2, [pc, #60]	; (800674c <HAL_GPIO_Init+0x304>)
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3301      	adds	r3, #1
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b0f      	cmp	r3, #15
 800671c:	f67f aea2 	bls.w	8006464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	3724      	adds	r7, #36	; 0x24
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40023800 	.word	0x40023800
 8006734:	40013800 	.word	0x40013800
 8006738:	40020000 	.word	0x40020000
 800673c:	40020400 	.word	0x40020400
 8006740:	40020800 	.word	0x40020800
 8006744:	40020c00 	.word	0x40020c00
 8006748:	40021000 	.word	0x40021000
 800674c:	40013c00 	.word	0x40013c00

08006750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	887b      	ldrh	r3, [r7, #2]
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e001      	b.n	8006772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	807b      	strh	r3, [r7, #2]
 800678c:	4613      	mov	r3, r2
 800678e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006790:	787b      	ldrb	r3, [r7, #1]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800679c:	e003      	b.n	80067a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800679e:	887b      	ldrh	r3, [r7, #2]
 80067a0:	041a      	lsls	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	619a      	str	r2, [r3, #24]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067c4:	887a      	ldrh	r2, [r7, #2]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	041a      	lsls	r2, r3, #16
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	43d9      	mvns	r1, r3
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	400b      	ands	r3, r1
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	619a      	str	r2, [r3, #24]
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d006      	beq.n	800680c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067fe:	4a05      	ldr	r2, [pc, #20]	; (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fb f8d2 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40013c00 	.word	0x40013c00

08006818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e12b      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe fd90 	bl	8005364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800687a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800687c:	f002 ff26 	bl	80096cc <HAL_RCC_GetPCLK1Freq>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a81      	ldr	r2, [pc, #516]	; (8006a8c <HAL_I2C_Init+0x274>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d807      	bhi.n	800689c <HAL_I2C_Init+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a80      	ldr	r2, [pc, #512]	; (8006a90 <HAL_I2C_Init+0x278>)
 8006890:	4293      	cmp	r3, r2
 8006892:	bf94      	ite	ls
 8006894:	2301      	movls	r3, #1
 8006896:	2300      	movhi	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e006      	b.n	80068aa <HAL_I2C_Init+0x92>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a7d      	ldr	r2, [pc, #500]	; (8006a94 <HAL_I2C_Init+0x27c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bf94      	ite	ls
 80068a4:	2301      	movls	r3, #1
 80068a6:	2300      	movhi	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0e7      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a78      	ldr	r2, [pc, #480]	; (8006a98 <HAL_I2C_Init+0x280>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0c9b      	lsrs	r3, r3, #18
 80068bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a6a      	ldr	r2, [pc, #424]	; (8006a8c <HAL_I2C_Init+0x274>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d802      	bhi.n	80068ec <HAL_I2C_Init+0xd4>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3301      	adds	r3, #1
 80068ea:	e009      	b.n	8006900 <HAL_I2C_Init+0xe8>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	4a69      	ldr	r2, [pc, #420]	; (8006a9c <HAL_I2C_Init+0x284>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	3301      	adds	r3, #1
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	495c      	ldr	r1, [pc, #368]	; (8006a8c <HAL_I2C_Init+0x274>)
 800691c:	428b      	cmp	r3, r1
 800691e:	d819      	bhi.n	8006954 <HAL_I2C_Init+0x13c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1e59      	subs	r1, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	fbb1 f3f3 	udiv	r3, r1, r3
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006934:	400b      	ands	r3, r1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_I2C_Init+0x138>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1e59      	subs	r1, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	fbb1 f3f3 	udiv	r3, r1, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694e:	e051      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006950:	2304      	movs	r3, #4
 8006952:	e04f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d111      	bne.n	8006980 <HAL_I2C_Init+0x168>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1e58      	subs	r0, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6859      	ldr	r1, [r3, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	440b      	add	r3, r1
 800696a:	fbb0 f3f3 	udiv	r3, r0, r3
 800696e:	3301      	adds	r3, #1
 8006970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006974:	2b00      	cmp	r3, #0
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e012      	b.n	80069a6 <HAL_I2C_Init+0x18e>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1e58      	subs	r0, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6859      	ldr	r1, [r3, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	0099      	lsls	r1, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	fbb0 f3f3 	udiv	r3, r0, r3
 8006996:	3301      	adds	r3, #1
 8006998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Init+0x196>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10e      	bne.n	80069d4 <HAL_I2C_Init+0x1bc>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1e58      	subs	r0, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	440b      	add	r3, r1
 80069c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c8:	3301      	adds	r3, #1
 80069ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	e00f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1e58      	subs	r0, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	0099      	lsls	r1, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6911      	ldr	r1, [r2, #16]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68d2      	ldr	r2, [r2, #12]
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	000186a0 	.word	0x000186a0
 8006a90:	001e847f 	.word	0x001e847f
 8006a94:	003d08ff 	.word	0x003d08ff
 8006a98:	431bde83 	.word	0x431bde83
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	817b      	strh	r3, [r7, #10]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ab4:	f7fe ff76 	bl	80059a4 <HAL_GetTick>
 8006ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	f040 80e0 	bne.w	8006c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2319      	movs	r3, #25
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4970      	ldr	r1, [pc, #448]	; (8006c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 ffb6 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e0d3      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2C_Master_Transmit+0x50>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e0cc      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d007      	beq.n	8006b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2221      	movs	r2, #33	; 0x21
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2210      	movs	r2, #16
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	893a      	ldrh	r2, [r7, #8]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a50      	ldr	r2, [pc, #320]	; (8006c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b58:	8979      	ldrh	r1, [r7, #10]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f001 fe46 	bl	80087f0 <I2C_MasterRequestWrite>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e08d      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b84:	e066      	b.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f002 f830 	bl	8008bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e06b      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d11b      	bne.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d017      	beq.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	6a39      	ldr	r1, [r7, #32]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f002 f820 	bl	8008c72 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d107      	bne.n	8006c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01a      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d194      	bne.n	8006b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	00100002 	.word	0x00100002
 8006c98:	ffff0000 	.word	0xffff0000

08006c9c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	460b      	mov	r3, r1
 8006caa:	817b      	strh	r3, [r7, #10]
 8006cac:	4613      	mov	r3, r2
 8006cae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	f040 80a6 	bne.w	8006e12 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd4:	d005      	beq.n	8006ce2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d002      	beq.n	8006ce2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d130      	bne.n	8006d44 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ce2:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	4a4e      	ldr	r2, [pc, #312]	; (8006e24 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	0a1a      	lsrs	r2, r3, #8
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009a      	lsls	r2, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d116      	bne.n	8006d36 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e06e      	b.n	8006e14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d0db      	beq.n	8006cfc <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e060      	b.n	8006e14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d007      	beq.n	8006d78 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2221      	movs	r2, #33	; 0x21
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2210      	movs	r2, #16
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	893a      	ldrh	r2, [r7, #8]
 8006da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006dba:	897a      	ldrh	r2, [r7, #10]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b11      	cmp	r3, #17
 8006dca:	d10c      	bne.n	8006de6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006dd2:	d003      	beq.n	8006ddc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dda:	d101      	bne.n	8006de0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d107      	bne.n	8006df6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e0c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	200000d4 	.word	0x200000d4
 8006e24:	14f8b589 	.word	0x14f8b589

08006e28 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	461a      	mov	r2, r3
 8006e34:	460b      	mov	r3, r1
 8006e36:	817b      	strh	r3, [r7, #10]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006e48:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	f040 80da 	bne.w	800700c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e66:	d005      	beq.n	8006e74 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d002      	beq.n	8006e74 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d130      	bne.n	8006ed6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e74:	4b69      	ldr	r3, [pc, #420]	; (800701c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	4a69      	ldr	r2, [pc, #420]	; (8007020 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	0a1a      	lsrs	r2, r3, #8
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009a      	lsls	r2, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0a2      	b.n	800700e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d0db      	beq.n	8006e8e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e094      	b.n	800700e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d007      	beq.n	8006f0a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f18:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2222      	movs	r2, #34	; 0x22
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2210      	movs	r2, #16
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	893a      	ldrh	r2, [r7, #8]
 8006f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006f4c:	897a      	ldrh	r2, [r7, #10]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d126      	bne.n	8006fb0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d002      	beq.n	8006f6e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b10      	cmp	r3, #16
 8006f6c:	d120      	bne.n	8006fb0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b12      	cmp	r3, #18
 8006f72:	d114      	bne.n	8006f9e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f82:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f92:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f9a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006f9c:	e010      	b.n	8006fc0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fac:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006fae:	e007      	b.n	8006fc0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fbe:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b12      	cmp	r3, #18
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fcc:	d003      	beq.n	8006fd6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fd4:	d101      	bne.n	8006fda <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	430a      	orrs	r2, r1
 8007006:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3724      	adds	r7, #36	; 0x24
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	200000d4 	.word	0x200000d4
 8007020:	14f8b589 	.word	0x14f8b589

08007024 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007044:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b10      	cmp	r3, #16
 8007052:	d003      	beq.n	800705c <HAL_I2C_EV_IRQHandler+0x38>
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	f040 80c1 	bne.w	80071de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <HAL_I2C_EV_IRQHandler+0x6e>
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800707c:	d003      	beq.n	8007086 <HAL_I2C_EV_IRQHandler+0x62>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007084:	d101      	bne.n	800708a <HAL_I2C_EV_IRQHandler+0x66>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <HAL_I2C_EV_IRQHandler+0x68>
 800708a:	2300      	movs	r3, #0
 800708c:	2b01      	cmp	r3, #1
 800708e:	f000 8132 	beq.w	80072f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00c      	beq.n	80070b6 <HAL_I2C_EV_IRQHandler+0x92>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	0a5b      	lsrs	r3, r3, #9
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fe84 	bl	8008db6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fd83 	bl	8007bba <I2C_Master_SB>
 80070b4:	e092      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	0a5b      	lsrs	r3, r3, #9
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fdf9 	bl	8007cc6 <I2C_Master_ADD10>
 80070d4:	e082      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fe13 	bl	8007d1a <I2C_Master_ADDR>
 80070f4:	e072      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	089b      	lsrs	r3, r3, #2
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03b      	beq.n	800717a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800710c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007110:	f000 80f3 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	09db      	lsrs	r3, r3, #7
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <HAL_I2C_EV_IRQHandler+0x11c>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	0a9b      	lsrs	r3, r3, #10
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <HAL_I2C_EV_IRQHandler+0x11c>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	089b      	lsrs	r3, r3, #2
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9f3 	bl	8007524 <I2C_MasterTransmit_TXE>
 800713e:	e04d      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80d6 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	0a5b      	lsrs	r3, r3, #9
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80cf 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b21      	cmp	r3, #33	; 0x21
 8007160:	d103      	bne.n	800716a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa7a 	bl	800765c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007168:	e0c7      	b.n	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b40      	cmp	r3, #64	; 0x40
 800716e:	f040 80c4 	bne.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fae8 	bl	8007748 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007178:	e0bf      	b.n	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007188:	f000 80b7 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00f      	beq.n	80071b8 <HAL_I2C_EV_IRQHandler+0x194>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	0a9b      	lsrs	r3, r3, #10
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_I2C_EV_IRQHandler+0x194>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	089b      	lsrs	r3, r3, #2
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb5d 	bl	8007870 <I2C_MasterReceive_RXNE>
 80071b6:	e011      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	089b      	lsrs	r3, r3, #2
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 809a 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	0a5b      	lsrs	r3, r3, #9
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8093 	beq.w	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc06 	bl	80079e6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071da:	e08e      	b.n	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80071dc:	e08d      	b.n	80072fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e007      	b.n	8007200 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d012      	beq.n	8007232 <HAL_I2C_EV_IRQHandler+0x20e>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	0a5b      	lsrs	r3, r3, #9
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007228:	69b9      	ldr	r1, [r7, #24]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 ffc4 	bl	80081b8 <I2C_Slave_ADDR>
 8007230:	e066      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x22e>
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fffe 	bl	800824c <I2C_Slave_STOPF>
 8007250:	e056      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b21      	cmp	r3, #33	; 0x21
 8007256:	d002      	beq.n	800725e <HAL_I2C_EV_IRQHandler+0x23a>
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b29      	cmp	r3, #41	; 0x29
 800725c:	d125      	bne.n	80072aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00f      	beq.n	800728a <HAL_I2C_EV_IRQHandler+0x266>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	0a9b      	lsrs	r3, r3, #10
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <HAL_I2C_EV_IRQHandler+0x266>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 feda 	bl	800803c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007288:	e039      	b.n	80072fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	089b      	lsrs	r3, r3, #2
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d033      	beq.n	80072fe <HAL_I2C_EV_IRQHandler+0x2da>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	0a5b      	lsrs	r3, r3, #9
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d02d      	beq.n	80072fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 ff07 	bl	80080b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072a8:	e029      	b.n	80072fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	099b      	lsrs	r3, r3, #6
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	0a9b      	lsrs	r3, r3, #10
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 ff12 	bl	80080f8 <I2C_SlaveReceive_RXNE>
 80072d4:	e014      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00e      	beq.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	0a5b      	lsrs	r3, r3, #9
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 ff40 	bl	8008174 <I2C_SlaveReceive_BTF>
 80072f4:	e004      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80072f6:	bf00      	nop
 80072f8:	e002      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b08a      	sub	sp, #40	; 0x28
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007328:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00e      	beq.n	8007354 <HAL_I2C_ER_IRQHandler+0x4e>
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	0a1b      	lsrs	r3, r3, #8
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	f043 0301 	orr.w	r3, r3, #1
 8007348:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007352:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	0a5b      	lsrs	r3, r3, #9
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <HAL_I2C_ER_IRQHandler+0x78>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800737c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	0a9b      	lsrs	r3, r3, #10
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d03f      	beq.n	800740a <HAL_I2C_ER_IRQHandler+0x104>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	0a1b      	lsrs	r3, r3, #8
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d039      	beq.n	800740a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007396:	7efb      	ldrb	r3, [r7, #27]
 8007398:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80073b0:	7ebb      	ldrb	r3, [r7, #26]
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d112      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xd6>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10f      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xd6>
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	2b21      	cmp	r3, #33	; 0x21
 80073c0:	d008      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80073c2:	7cfb      	ldrb	r3, [r7, #19]
 80073c4:	2b29      	cmp	r3, #41	; 0x29
 80073c6:	d005      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0xce>
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	2b28      	cmp	r3, #40	; 0x28
 80073cc:	d106      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b21      	cmp	r3, #33	; 0x21
 80073d2:	d103      	bne.n	80073dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f869 	bl	80084ac <I2C_Slave_AF>
 80073da:	e016      	b.n	800740a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80073ee:	7efb      	ldrb	r3, [r7, #27]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d002      	beq.n	80073fa <HAL_I2C_ER_IRQHandler+0xf4>
 80073f4:	7efb      	ldrb	r3, [r7, #27]
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d107      	bne.n	800740a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007408:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	0adb      	lsrs	r3, r3, #11
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00e      	beq.n	8007434 <HAL_I2C_ER_IRQHandler+0x12e>
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	f043 0308 	orr.w	r3, r3, #8
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007432:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f8a0 	bl	800858c <I2C_ITError>
  }
}
 800744c:	bf00      	nop
 800744e:	3728      	adds	r7, #40	; 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
 80074b0:	4613      	mov	r3, r2
 80074b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007532:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800753a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d150      	bne.n	80075ec <I2C_MasterTransmit_TXE+0xc8>
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b21      	cmp	r3, #33	; 0x21
 800754e:	d14d      	bne.n	80075ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b08      	cmp	r3, #8
 8007554:	d01d      	beq.n	8007592 <I2C_MasterTransmit_TXE+0x6e>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b20      	cmp	r3, #32
 800755a:	d01a      	beq.n	8007592 <I2C_MasterTransmit_TXE+0x6e>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007562:	d016      	beq.n	8007592 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007572:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2211      	movs	r2, #17
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff62 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007590:	e060      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	d107      	bne.n	80075dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ff7d 	bl	80074d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075da:	e03b      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ff35 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075ea:	e033      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b21      	cmp	r3, #33	; 0x21
 80075f0:	d005      	beq.n	80075fe <I2C_MasterTransmit_TXE+0xda>
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d12d      	bne.n	8007654 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b22      	cmp	r3, #34	; 0x22
 80075fc:	d12a      	bne.n	8007654 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007616:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007618:	e01c      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d103      	bne.n	800762e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f88e 	bl	8007748 <I2C_MemoryTransmit_TXE_BTF>
}
 800762c:	e012      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007652:	e7ff      	b.n	8007654 <I2C_MasterTransmit_TXE+0x130>
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b21      	cmp	r3, #33	; 0x21
 8007674:	d164      	bne.n	8007740 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d012      	beq.n	80076a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80076a4:	e04c      	b.n	8007740 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d01d      	beq.n	80076e8 <I2C_MasterTransmit_BTF+0x8c>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d01a      	beq.n	80076e8 <I2C_MasterTransmit_BTF+0x8c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076b8:	d016      	beq.n	80076e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2211      	movs	r2, #17
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff feb7 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
}
 80076e6:	e02b      	b.n	8007740 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007706:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d107      	bne.n	8007732 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fed2 	bl	80074d4 <HAL_I2C_MemTxCpltCallback>
}
 8007730:	e006      	b.n	8007740 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fe8a 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11d      	bne.n	800779c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d10b      	bne.n	8007780 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800777e:	e073      	b.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007784:	b29b      	uxth	r3, r3
 8007786:	121b      	asrs	r3, r3, #8
 8007788:	b2da      	uxtb	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	651a      	str	r2, [r3, #80]	; 0x50
}
 800779a:	e065      	b.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10b      	bne.n	80077bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077ba:	e055      	b.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d151      	bne.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b22      	cmp	r3, #34	; 0x22
 80077c8:	d10d      	bne.n	80077e6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077d8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077e4:	e040      	b.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d015      	beq.n	800781c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b21      	cmp	r3, #33	; 0x21
 80077f4:	d112      	bne.n	800781c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800781a:	e025      	b.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d120      	bne.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b21      	cmp	r3, #33	; 0x21
 800782a:	d11d      	bne.n	8007868 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800783a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800784a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fe36 	bl	80074d4 <HAL_I2C_MemTxCpltCallback>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b22      	cmp	r3, #34	; 0x22
 8007882:	f040 80ac 	bne.w	80079de <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d921      	bls.n	80078d8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	f040 808c 	bne.w	80079de <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80078d6:	e082      	b.n	80079de <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d075      	beq.n	80079cc <I2C_MasterReceive_RXNE+0x15c>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d002      	beq.n	80078ec <I2C_MasterReceive_RXNE+0x7c>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d16f      	bne.n	80079cc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fa01 	bl	8008cf4 <I2C_WaitOnSTOPRequestThroughIT>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d142      	bne.n	800797e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007906:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007916:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d10a      	bne.n	8007968 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fdc1 	bl	80074e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007966:	e03a      	b.n	80079de <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2212      	movs	r2, #18
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fd76 	bl	8007468 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800797c:	e02f      	b.n	80079de <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800798c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fd99 	bl	80074fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079ca:	e008      	b.n	80079de <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079da:	605a      	str	r2, [r3, #4]
}
 80079dc:	e7ff      	b.n	80079de <I2C_MasterReceive_RXNE+0x16e>
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d11b      	bne.n	8007a36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a34:	e0bd      	b.n	8007bb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d129      	bne.n	8007a94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d00a      	beq.n	8007a6c <I2C_MasterReceive_BTF+0x86>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d007      	beq.n	8007a6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007a92:	e08e      	b.n	8007bb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d176      	bne.n	8007b8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d002      	beq.n	8007aaa <I2C_MasterReceive_BTF+0xc4>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d108      	bne.n	8007abc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e019      	b.n	8007af0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d002      	beq.n	8007ac8 <I2C_MasterReceive_BTF+0xe2>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d108      	bne.n	8007ada <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e00a      	b.n	8007af0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d007      	beq.n	8007af0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d10a      	bne.n	8007b76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fcba 	bl	80074e8 <HAL_I2C_MemRxCpltCallback>
}
 8007b74:	e01d      	b.n	8007bb2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2212      	movs	r2, #18
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fc6f 	bl	8007468 <HAL_I2C_MasterRxCpltCallback>
}
 8007b8a:	e012      	b.n	8007bb2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d117      	bne.n	8007bfe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007be6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007be8:	e067      	b.n	8007cba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	611a      	str	r2, [r3, #16]
}
 8007bfc:	e05d      	b.n	8007cba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c06:	d133      	bne.n	8007c70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b21      	cmp	r3, #33	; 0x21
 8007c12:	d109      	bne.n	8007c28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c24:	611a      	str	r2, [r3, #16]
 8007c26:	e008      	b.n	8007c3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <I2C_Master_SB+0x92>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d108      	bne.n	8007c5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d032      	beq.n	8007cba <I2C_Master_SB+0x100>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d02d      	beq.n	8007cba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c6c:	605a      	str	r2, [r3, #4]
}
 8007c6e:	e024      	b.n	8007cba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10e      	bne.n	8007c96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	11db      	asrs	r3, r3, #7
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0306 	and.w	r3, r3, #6
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f063 030f 	orn	r3, r3, #15
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	611a      	str	r2, [r3, #16]
}
 8007c94:	e011      	b.n	8007cba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10d      	bne.n	8007cba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	11db      	asrs	r3, r3, #7
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0306 	and.w	r3, r3, #6
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f063 030e 	orn	r3, r3, #14
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	611a      	str	r2, [r3, #16]
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <I2C_Master_ADD10+0x26>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d108      	bne.n	8007cfe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00c      	beq.n	8007d0e <I2C_Master_ADD10+0x48>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d0c:	605a      	str	r2, [r3, #4]
  }
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b091      	sub	sp, #68	; 0x44
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b22      	cmp	r3, #34	; 0x22
 8007d42:	f040 8169 	bne.w	8008018 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10f      	bne.n	8007d6e <I2C_Master_ADDR+0x54>
 8007d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d10b      	bne.n	8007d6e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d56:	2300      	movs	r3, #0
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	633b      	str	r3, [r7, #48]	; 0x30
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	e160      	b.n	8008030 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d11d      	bne.n	8007db2 <I2C_Master_ADDR+0x98>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d7e:	d118      	bne.n	8007db2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d80:	2300      	movs	r3, #0
 8007d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007da4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	651a      	str	r2, [r3, #80]	; 0x50
 8007db0:	e13e      	b.n	8008030 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d113      	bne.n	8007de4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e115      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	f040 808a 	bne.w	8007f04 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007df6:	d137      	bne.n	8007e68 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e06:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e16:	d113      	bne.n	8007e40 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e26:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	e0e7      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e40:	2300      	movs	r3, #0
 8007e42:	623b      	str	r3, [r7, #32]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	623b      	str	r3, [r7, #32]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	623b      	str	r3, [r7, #32]
 8007e54:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e0d3      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d02e      	beq.n	8007ecc <I2C_Master_ADDR+0x1b2>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d02b      	beq.n	8007ecc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	2b12      	cmp	r3, #18
 8007e78:	d102      	bne.n	8007e80 <I2C_Master_ADDR+0x166>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d125      	bne.n	8007ecc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d00e      	beq.n	8007ea4 <I2C_Master_ADDR+0x18a>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d00b      	beq.n	8007ea4 <I2C_Master_ADDR+0x18a>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d008      	beq.n	8007ea4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e007      	b.n	8007eb4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	e0a1      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eda:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007edc:	2300      	movs	r3, #0
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	e085      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d14d      	bne.n	8007faa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d016      	beq.n	8007f42 <I2C_Master_ADDR+0x228>
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d013      	beq.n	8007f42 <I2C_Master_ADDR+0x228>
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b10      	cmp	r3, #16
 8007f1e:	d010      	beq.n	8007f42 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e007      	b.n	8007f52 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f50:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f60:	d117      	bne.n	8007f92 <I2C_Master_ADDR+0x278>
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f68:	d00b      	beq.n	8007f82 <I2C_Master_ADDR+0x268>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d008      	beq.n	8007f82 <I2C_Master_ADDR+0x268>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d005      	beq.n	8007f82 <I2C_Master_ADDR+0x268>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b10      	cmp	r3, #16
 8007f7a:	d002      	beq.n	8007f82 <I2C_Master_ADDR+0x268>
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d107      	bne.n	8007f92 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	e032      	b.n	8008010 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc8:	d117      	bne.n	8007ffa <I2C_Master_ADDR+0x2e0>
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fd0:	d00b      	beq.n	8007fea <I2C_Master_ADDR+0x2d0>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d008      	beq.n	8007fea <I2C_Master_ADDR+0x2d0>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d005      	beq.n	8007fea <I2C_Master_ADDR+0x2d0>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	2b10      	cmp	r3, #16
 8007fe2:	d002      	beq.n	8007fea <I2C_Master_ADDR+0x2d0>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d107      	bne.n	8007ffa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008016:	e00b      	b.n	8008030 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	e7ff      	b.n	8008030 <I2C_Master_ADDR+0x316>
 8008030:	bf00      	nop
 8008032:	3744      	adds	r7, #68	; 0x44
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02b      	beq.n	80080ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d114      	bne.n	80080ae <I2C_SlaveTransmit_TXE+0x72>
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b29      	cmp	r3, #41	; 0x29
 8008088:	d111      	bne.n	80080ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2221      	movs	r2, #33	; 0x21
 800809e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2228      	movs	r2, #40	; 0x28
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff f9e7 	bl	800747c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d011      	beq.n	80080ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008106:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d02c      	beq.n	800816c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	b29b      	uxth	r3, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d114      	bne.n	800816c <I2C_SlaveReceive_RXNE+0x74>
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b2a      	cmp	r3, #42	; 0x2a
 8008146:	d111      	bne.n	800816c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008156:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2222      	movs	r2, #34	; 0x22
 800815c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2228      	movs	r2, #40	; 0x28
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff f992 	bl	8007490 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d012      	beq.n	80081ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081d2:	2b28      	cmp	r3, #40	; 0x28
 80081d4:	d127      	bne.n	8008226 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	089b      	lsrs	r3, r3, #2
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80081f2:	2301      	movs	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	09db      	lsrs	r3, r3, #7
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	81bb      	strh	r3, [r7, #12]
 8008208:	e002      	b.n	8008210 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008218:	89ba      	ldrh	r2, [r7, #12]
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff f940 	bl	80074a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008224:	e00e      	b.n	8008244 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800826a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800826c:	2300      	movs	r3, #0
 800826e:	60bb      	str	r3, [r7, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008298:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a8:	d172      	bne.n	8008390 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b22      	cmp	r3, #34	; 0x22
 80082ae:	d002      	beq.n	80082b6 <I2C_Slave_STOPF+0x6a>
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b2a      	cmp	r3, #42	; 0x2a
 80082b4:	d135      	bne.n	8008322 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0204 	orr.w	r2, r3, #4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd ffbc 	bl	800626c <HAL_DMA_GetState>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d049      	beq.n	800838e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	4a69      	ldr	r2, [pc, #420]	; (80084a4 <I2C_Slave_STOPF+0x258>)
 8008300:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	4618      	mov	r0, r3
 8008308:	f7fd fe04 	bl	8005f14 <HAL_DMA_Abort_IT>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03d      	beq.n	800838e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008320:	e035      	b.n	800838e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f043 0204 	orr.w	r2, r3, #4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008354:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd ff86 	bl	800626c <HAL_DMA_GetState>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d014      	beq.n	8008390 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	4a4e      	ldr	r2, [pc, #312]	; (80084a4 <I2C_Slave_STOPF+0x258>)
 800836c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fdce 	bl	8005f14 <HAL_DMA_Abort_IT>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d008      	beq.n	8008390 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	e000      	b.n	8008390 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800838e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d03e      	beq.n	8008418 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d112      	bne.n	80083ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b40      	cmp	r3, #64	; 0x40
 80083da:	d112      	bne.n	8008402 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	f043 0204 	orr.w	r2, r3, #4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8b3 	bl	800858c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008426:	e039      	b.n	800849c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2b2a      	cmp	r3, #42	; 0x2a
 800842c:	d109      	bne.n	8008442 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2228      	movs	r2, #40	; 0x28
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff f827 	bl	8007490 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b28      	cmp	r3, #40	; 0x28
 800844c:	d111      	bne.n	8008472 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <I2C_Slave_STOPF+0x25c>)
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff f828 	bl	80074c0 <HAL_I2C_ListenCpltCallback>
}
 8008470:	e014      	b.n	800849c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	2b22      	cmp	r3, #34	; 0x22
 8008478:	d002      	beq.n	8008480 <I2C_Slave_STOPF+0x234>
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b22      	cmp	r3, #34	; 0x22
 800847e:	d10d      	bne.n	800849c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe fffa 	bl	8007490 <HAL_I2C_SlaveRxCpltCallback>
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	080088f5 	.word	0x080088f5
 80084a8:	ffff0000 	.word	0xffff0000

080084ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d002      	beq.n	80084ce <I2C_Slave_AF+0x22>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d129      	bne.n	8008522 <I2C_Slave_AF+0x76>
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b28      	cmp	r3, #40	; 0x28
 80084d2:	d126      	bne.n	8008522 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a2c      	ldr	r2, [pc, #176]	; (8008588 <I2C_Slave_AF+0xdc>)
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008502:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fe ffd0 	bl	80074c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008520:	e02e      	b.n	8008580 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b21      	cmp	r3, #33	; 0x21
 8008526:	d126      	bne.n	8008576 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <I2C_Slave_AF+0xdc>)
 800852c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2221      	movs	r2, #33	; 0x21
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008552:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800855c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800856c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe ff84 	bl	800747c <HAL_I2C_SlaveTxCpltCallback>
}
 8008574:	e004      	b.n	8008580 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800857e:	615a      	str	r2, [r3, #20]
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	ffff0000 	.word	0xffff0000

0800858c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d002      	beq.n	80085b0 <I2C_ITError+0x24>
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d10a      	bne.n	80085c6 <I2C_ITError+0x3a>
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	2b22      	cmp	r3, #34	; 0x22
 80085b4:	d107      	bne.n	80085c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085cc:	2b28      	cmp	r3, #40	; 0x28
 80085ce:	d107      	bne.n	80085e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2228      	movs	r2, #40	; 0x28
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085de:	e015      	b.n	800860c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ee:	d00a      	beq.n	8008606 <I2C_ITError+0x7a>
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	2b60      	cmp	r3, #96	; 0x60
 80085f4:	d007      	beq.n	8008606 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861a:	d162      	bne.n	80086e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800862a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b01      	cmp	r3, #1
 8008638:	d020      	beq.n	800867c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	4a6a      	ldr	r2, [pc, #424]	; (80087e8 <I2C_ITError+0x25c>)
 8008640:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fc64 	bl	8005f14 <HAL_DMA_Abort_IT>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8089 	beq.w	8008766 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008676:	4610      	mov	r0, r2
 8008678:	4798      	blx	r3
 800867a:	e074      	b.n	8008766 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	4a59      	ldr	r2, [pc, #356]	; (80087e8 <I2C_ITError+0x25c>)
 8008682:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd fc43 	bl	8005f14 <HAL_DMA_Abort_IT>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d068      	beq.n	8008766 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d10b      	bne.n	80086ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	e041      	b.n	8008766 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b60      	cmp	r3, #96	; 0x60
 80086ec:	d125      	bne.n	800873a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d10b      	bne.n	8008722 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fe feec 	bl	8007510 <HAL_I2C_AbortCpltCallback>
 8008738:	e015      	b.n	8008766 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d10b      	bne.n	8008760 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fe fecb 	bl	80074fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10e      	bne.n	8008794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800877c:	2b00      	cmp	r3, #0
 800877e:	d109      	bne.n	8008794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d113      	bne.n	80087e0 <I2C_ITError+0x254>
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b28      	cmp	r3, #40	; 0x28
 80087bc:	d110      	bne.n	80087e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <I2C_ITError+0x260>)
 80087c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fe fe70 	bl	80074c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	080088f5 	.word	0x080088f5
 80087ec:	ffff0000 	.word	0xffff0000

080087f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	460b      	mov	r3, r1
 80087fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d006      	beq.n	800881a <I2C_MasterRequestWrite+0x2a>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d003      	beq.n	800881a <I2C_MasterRequestWrite+0x2a>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008818:	d108      	bne.n	800882c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e00b      	b.n	8008844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	2b12      	cmp	r3, #18
 8008832:	d107      	bne.n	8008844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f8f7 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00d      	beq.n	8008878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886a:	d103      	bne.n	8008874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e035      	b.n	80088e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008880:	d108      	bne.n	8008894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008882:	897b      	ldrh	r3, [r7, #10]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008890:	611a      	str	r2, [r3, #16]
 8008892:	e01b      	b.n	80088cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008894:	897b      	ldrh	r3, [r7, #10]
 8008896:	11db      	asrs	r3, r3, #7
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 0306 	and.w	r3, r3, #6
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f063 030f 	orn	r3, r3, #15
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	490e      	ldr	r1, [pc, #56]	; (80088ec <I2C_MasterRequestWrite+0xfc>)
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f91d 	bl	8008af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e010      	b.n	80088e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088c2:	897b      	ldrh	r3, [r7, #10]
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	4907      	ldr	r1, [pc, #28]	; (80088f0 <I2C_MasterRequestWrite+0x100>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f90d 	bl	8008af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	00010008 	.word	0x00010008
 80088f0:	00010002 	.word	0x00010002

080088f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800890e:	4b4b      	ldr	r3, [pc, #300]	; (8008a3c <I2C_DMAAbort+0x148>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	08db      	lsrs	r3, r3, #3
 8008914:	4a4a      	ldr	r2, [pc, #296]	; (8008a40 <I2C_DMAAbort+0x14c>)
 8008916:	fba2 2303 	umull	r2, r3, r2, r3
 800891a:	0a1a      	lsrs	r2, r3, #8
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	00da      	lsls	r2, r3, #3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f043 0220 	orr.w	r2, r3, #32
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800893a:	e00a      	b.n	8008952 <I2C_DMAAbort+0x5e>
    }
    count--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3b01      	subs	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800894c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008950:	d0ea      	beq.n	8008928 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895e:	2200      	movs	r2, #0
 8008960:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	2200      	movs	r2, #0
 8008970:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008980:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2200      	movs	r2, #0
 8008986:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008994:	2200      	movs	r2, #0
 8008996:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	2200      	movs	r2, #0
 80089a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0201 	bic.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b60      	cmp	r3, #96	; 0x60
 80089c2:	d10e      	bne.n	80089e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2200      	movs	r2, #0
 80089d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80089da:	6978      	ldr	r0, [r7, #20]
 80089dc:	f7fe fd98 	bl	8007510 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089e0:	e027      	b.n	8008a32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089e2:	7cfb      	ldrb	r3, [r7, #19]
 80089e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089e8:	2b28      	cmp	r3, #40	; 0x28
 80089ea:	d117      	bne.n	8008a1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2228      	movs	r2, #40	; 0x28
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a1a:	e007      	b.n	8008a2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008a2c:	6978      	ldr	r0, [r7, #20]
 8008a2e:	f7fe fd65 	bl	80074fc <HAL_I2C_ErrorCallback>
}
 8008a32:	bf00      	nop
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	200000d4 	.word	0x200000d4
 8008a40:	14f8b589 	.word	0x14f8b589

08008a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a54:	e025      	b.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d021      	beq.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5e:	f7fc ffa1 	bl	80059a4 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d302      	bcc.n	8008a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d116      	bne.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	f043 0220 	orr.w	r2, r3, #32
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e023      	b.n	8008aea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d10d      	bne.n	8008ac8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	43da      	mvns	r2, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bf0c      	ite	eq
 8008abe:	2301      	moveq	r3, #1
 8008ac0:	2300      	movne	r3, #0
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	e00c      	b.n	8008ae2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	43da      	mvns	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bf0c      	ite	eq
 8008ada:	2301      	moveq	r3, #1
 8008adc:	2300      	movne	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d0b6      	beq.n	8008a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b00:	e051      	b.n	8008ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b10:	d123      	bne.n	8008b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	f043 0204 	orr.w	r2, r3, #4
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e046      	b.n	8008be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d021      	beq.n	8008ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b62:	f7fc ff1f 	bl	80059a4 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d302      	bcc.n	8008b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d116      	bne.n	8008ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f043 0220 	orr.w	r2, r3, #32
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e020      	b.n	8008be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10c      	bne.n	8008bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf14      	ite	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	e00b      	b.n	8008be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	43da      	mvns	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bf14      	ite	ne
 8008bdc:	2301      	movne	r3, #1
 8008bde:	2300      	moveq	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d18d      	bne.n	8008b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bfc:	e02d      	b.n	8008c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f8aa 	bl	8008d58 <I2C_IsAcknowledgeFailed>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e02d      	b.n	8008c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d021      	beq.n	8008c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c16:	f7fc fec5 	bl	80059a4 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d302      	bcc.n	8008c2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d116      	bne.n	8008c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	f043 0220 	orr.w	r2, r3, #32
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e007      	b.n	8008c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c64:	2b80      	cmp	r3, #128	; 0x80
 8008c66:	d1ca      	bne.n	8008bfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c7e:	e02d      	b.n	8008cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f869 	bl	8008d58 <I2C_IsAcknowledgeFailed>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e02d      	b.n	8008cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d021      	beq.n	8008cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c98:	f7fc fe84 	bl	80059a4 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d302      	bcc.n	8008cae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d116      	bne.n	8008cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	f043 0220 	orr.w	r2, r3, #32
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e007      	b.n	8008cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d1ca      	bne.n	8008c80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008d08:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0c:	0a1a      	lsrs	r2, r3, #8
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	f043 0220 	orr.w	r2, r3, #32
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e008      	b.n	8008d44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d40:	d0e9      	beq.n	8008d16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	200000d4 	.word	0x200000d4
 8008d54:	14f8b589 	.word	0x14f8b589

08008d58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6e:	d11b      	bne.n	8008da8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	f043 0204 	orr.w	r2, r3, #4
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008dc6:	d103      	bne.n	8008dd0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dce:	e007      	b.n	8008de0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008dd8:	d102      	bne.n	8008de0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e267      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d075      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e0a:	4b88      	ldr	r3, [pc, #544]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 030c 	and.w	r3, r3, #12
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d00c      	beq.n	8008e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e16:	4b85      	ldr	r3, [pc, #532]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d112      	bne.n	8008e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e22:	4b82      	ldr	r3, [pc, #520]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e2e:	d10b      	bne.n	8008e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e30:	4b7e      	ldr	r3, [pc, #504]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d05b      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x108>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d157      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e242      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e50:	d106      	bne.n	8008e60 <HAL_RCC_OscConfig+0x74>
 8008e52:	4b76      	ldr	r3, [pc, #472]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a75      	ldr	r2, [pc, #468]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	e01d      	b.n	8008e9c <HAL_RCC_OscConfig+0xb0>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e68:	d10c      	bne.n	8008e84 <HAL_RCC_OscConfig+0x98>
 8008e6a:	4b70      	ldr	r3, [pc, #448]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a6f      	ldr	r2, [pc, #444]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	4b6d      	ldr	r3, [pc, #436]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a6c      	ldr	r2, [pc, #432]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	e00b      	b.n	8008e9c <HAL_RCC_OscConfig+0xb0>
 8008e84:	4b69      	ldr	r3, [pc, #420]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a68      	ldr	r2, [pc, #416]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	4b66      	ldr	r3, [pc, #408]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a65      	ldr	r2, [pc, #404]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d013      	beq.n	8008ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea4:	f7fc fd7e 	bl	80059a4 <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eac:	f7fc fd7a 	bl	80059a4 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e207      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ebe:	4b5b      	ldr	r3, [pc, #364]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCC_OscConfig+0xc0>
 8008eca:	e014      	b.n	8008ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ecc:	f7fc fd6a 	bl	80059a4 <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ed4:	f7fc fd66 	bl	80059a4 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b64      	cmp	r3, #100	; 0x64
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e1f3      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ee6:	4b51      	ldr	r3, [pc, #324]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xe8>
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d063      	beq.n	8008fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f02:	4b4a      	ldr	r3, [pc, #296]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f003 030c 	and.w	r3, r3, #12
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f0e:	4b47      	ldr	r3, [pc, #284]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d11c      	bne.n	8008f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f1a:	4b44      	ldr	r3, [pc, #272]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d116      	bne.n	8008f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f26:	4b41      	ldr	r3, [pc, #260]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <HAL_RCC_OscConfig+0x152>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d001      	beq.n	8008f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e1c7      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f3e:	4b3b      	ldr	r3, [pc, #236]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	4937      	ldr	r1, [pc, #220]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f52:	e03a      	b.n	8008fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d020      	beq.n	8008f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f5c:	4b34      	ldr	r3, [pc, #208]	; (8009030 <HAL_RCC_OscConfig+0x244>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7fc fd1f 	bl	80059a4 <HAL_GetTick>
 8008f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f6a:	f7fc fd1b 	bl	80059a4 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e1a8      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f7c:	4b2b      	ldr	r3, [pc, #172]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f88:	4b28      	ldr	r3, [pc, #160]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	4925      	ldr	r1, [pc, #148]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	600b      	str	r3, [r1, #0]
 8008f9c:	e015      	b.n	8008fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f9e:	4b24      	ldr	r3, [pc, #144]	; (8009030 <HAL_RCC_OscConfig+0x244>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa4:	f7fc fcfe 	bl	80059a4 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fac:	f7fc fcfa 	bl	80059a4 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e187      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f0      	bne.n	8008fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d036      	beq.n	8009044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d016      	beq.n	800900c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <HAL_RCC_OscConfig+0x248>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe4:	f7fc fcde 	bl	80059a4 <HAL_GetTick>
 8008fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fec:	f7fc fcda 	bl	80059a4 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e167      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <HAL_RCC_OscConfig+0x240>)
 8009000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0f0      	beq.n	8008fec <HAL_RCC_OscConfig+0x200>
 800900a:	e01b      	b.n	8009044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800900c:	4b09      	ldr	r3, [pc, #36]	; (8009034 <HAL_RCC_OscConfig+0x248>)
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009012:	f7fc fcc7 	bl	80059a4 <HAL_GetTick>
 8009016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009018:	e00e      	b.n	8009038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800901a:	f7fc fcc3 	bl	80059a4 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d907      	bls.n	8009038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e150      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
 800902c:	40023800 	.word	0x40023800
 8009030:	42470000 	.word	0x42470000
 8009034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009038:	4b88      	ldr	r3, [pc, #544]	; (800925c <HAL_RCC_OscConfig+0x470>)
 800903a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1ea      	bne.n	800901a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 8097 	beq.w	8009180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009056:	4b81      	ldr	r3, [pc, #516]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10f      	bne.n	8009082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	4b7d      	ldr	r3, [pc, #500]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	4a7c      	ldr	r2, [pc, #496]	; (800925c <HAL_RCC_OscConfig+0x470>)
 800906c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009070:	6413      	str	r3, [r2, #64]	; 0x40
 8009072:	4b7a      	ldr	r3, [pc, #488]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800907e:	2301      	movs	r3, #1
 8009080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009082:	4b77      	ldr	r3, [pc, #476]	; (8009260 <HAL_RCC_OscConfig+0x474>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d118      	bne.n	80090c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800908e:	4b74      	ldr	r3, [pc, #464]	; (8009260 <HAL_RCC_OscConfig+0x474>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a73      	ldr	r2, [pc, #460]	; (8009260 <HAL_RCC_OscConfig+0x474>)
 8009094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800909a:	f7fc fc83 	bl	80059a4 <HAL_GetTick>
 800909e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a0:	e008      	b.n	80090b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a2:	f7fc fc7f 	bl	80059a4 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d901      	bls.n	80090b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e10c      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b4:	4b6a      	ldr	r3, [pc, #424]	; (8009260 <HAL_RCC_OscConfig+0x474>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0f0      	beq.n	80090a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d106      	bne.n	80090d6 <HAL_RCC_OscConfig+0x2ea>
 80090c8:	4b64      	ldr	r3, [pc, #400]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090cc:	4a63      	ldr	r2, [pc, #396]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	6713      	str	r3, [r2, #112]	; 0x70
 80090d4:	e01c      	b.n	8009110 <HAL_RCC_OscConfig+0x324>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b05      	cmp	r3, #5
 80090dc:	d10c      	bne.n	80090f8 <HAL_RCC_OscConfig+0x30c>
 80090de:	4b5f      	ldr	r3, [pc, #380]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e2:	4a5e      	ldr	r2, [pc, #376]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090e4:	f043 0304 	orr.w	r3, r3, #4
 80090e8:	6713      	str	r3, [r2, #112]	; 0x70
 80090ea:	4b5c      	ldr	r3, [pc, #368]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	4a5b      	ldr	r2, [pc, #364]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	6713      	str	r3, [r2, #112]	; 0x70
 80090f6:	e00b      	b.n	8009110 <HAL_RCC_OscConfig+0x324>
 80090f8:	4b58      	ldr	r3, [pc, #352]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fc:	4a57      	ldr	r2, [pc, #348]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80090fe:	f023 0301 	bic.w	r3, r3, #1
 8009102:	6713      	str	r3, [r2, #112]	; 0x70
 8009104:	4b55      	ldr	r3, [pc, #340]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a54      	ldr	r2, [pc, #336]	; (800925c <HAL_RCC_OscConfig+0x470>)
 800910a:	f023 0304 	bic.w	r3, r3, #4
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d015      	beq.n	8009144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009118:	f7fc fc44 	bl	80059a4 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800911e:	e00a      	b.n	8009136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009120:	f7fc fc40 	bl	80059a4 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	f241 3288 	movw	r2, #5000	; 0x1388
 800912e:	4293      	cmp	r3, r2
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e0cb      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009136:	4b49      	ldr	r3, [pc, #292]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0ee      	beq.n	8009120 <HAL_RCC_OscConfig+0x334>
 8009142:	e014      	b.n	800916e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009144:	f7fc fc2e 	bl	80059a4 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800914a:	e00a      	b.n	8009162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800914c:	f7fc fc2a 	bl	80059a4 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	f241 3288 	movw	r2, #5000	; 0x1388
 800915a:	4293      	cmp	r3, r2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e0b5      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1ee      	bne.n	800914c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d105      	bne.n	8009180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009174:	4b39      	ldr	r3, [pc, #228]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	4a38      	ldr	r2, [pc, #224]	; (800925c <HAL_RCC_OscConfig+0x470>)
 800917a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800917e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80a1 	beq.w	80092cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800918a:	4b34      	ldr	r3, [pc, #208]	; (800925c <HAL_RCC_OscConfig+0x470>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 030c 	and.w	r3, r3, #12
 8009192:	2b08      	cmp	r3, #8
 8009194:	d05c      	beq.n	8009250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d141      	bne.n	8009222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800919e:	4b31      	ldr	r3, [pc, #196]	; (8009264 <HAL_RCC_OscConfig+0x478>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a4:	f7fc fbfe 	bl	80059a4 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ac:	f7fc fbfa 	bl	80059a4 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e087      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091be:	4b27      	ldr	r3, [pc, #156]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	019b      	lsls	r3, r3, #6
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	085b      	lsrs	r3, r3, #1
 80091e2:	3b01      	subs	r3, #1
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	061b      	lsls	r3, r3, #24
 80091ee:	491b      	ldr	r1, [pc, #108]	; (800925c <HAL_RCC_OscConfig+0x470>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091f4:	4b1b      	ldr	r3, [pc, #108]	; (8009264 <HAL_RCC_OscConfig+0x478>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091fa:	f7fc fbd3 	bl	80059a4 <HAL_GetTick>
 80091fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009202:	f7fc fbcf 	bl	80059a4 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e05c      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009214:	4b11      	ldr	r3, [pc, #68]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0f0      	beq.n	8009202 <HAL_RCC_OscConfig+0x416>
 8009220:	e054      	b.n	80092cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <HAL_RCC_OscConfig+0x478>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009228:	f7fc fbbc 	bl	80059a4 <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009230:	f7fc fbb8 	bl	80059a4 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e045      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_RCC_OscConfig+0x470>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <HAL_RCC_OscConfig+0x444>
 800924e:	e03d      	b.n	80092cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d107      	bne.n	8009268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e038      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
 800925c:	40023800 	.word	0x40023800
 8009260:	40007000 	.word	0x40007000
 8009264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009268:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <HAL_RCC_OscConfig+0x4ec>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d028      	beq.n	80092c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009280:	429a      	cmp	r2, r3
 8009282:	d121      	bne.n	80092c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800928e:	429a      	cmp	r2, r3
 8009290:	d11a      	bne.n	80092c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009298:	4013      	ands	r3, r2
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800929e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d111      	bne.n	80092c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	085b      	lsrs	r3, r3, #1
 80092b0:	3b01      	subs	r3, #1
 80092b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d107      	bne.n	80092c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d001      	beq.n	80092cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e000      	b.n	80092ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40023800 	.word	0x40023800

080092dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0cc      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092f0:	4b68      	ldr	r3, [pc, #416]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d90c      	bls.n	8009318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092fe:	4b65      	ldr	r3, [pc, #404]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009306:	4b63      	ldr	r3, [pc, #396]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d001      	beq.n	8009318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e0b8      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d020      	beq.n	8009366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009330:	4b59      	ldr	r3, [pc, #356]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	4a58      	ldr	r2, [pc, #352]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800933a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009348:	4b53      	ldr	r3, [pc, #332]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	4a52      	ldr	r2, [pc, #328]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800934e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009354:	4b50      	ldr	r3, [pc, #320]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	494d      	ldr	r1, [pc, #308]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009362:	4313      	orrs	r3, r2
 8009364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d044      	beq.n	80093fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d107      	bne.n	800938a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800937a:	4b47      	ldr	r3, [pc, #284]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d119      	bne.n	80093ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e07f      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d003      	beq.n	800939a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009396:	2b03      	cmp	r3, #3
 8009398:	d107      	bne.n	80093aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800939a:	4b3f      	ldr	r3, [pc, #252]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e06f      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093aa:	4b3b      	ldr	r3, [pc, #236]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e067      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093ba:	4b37      	ldr	r3, [pc, #220]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f023 0203 	bic.w	r2, r3, #3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	4934      	ldr	r1, [pc, #208]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093cc:	f7fc faea 	bl	80059a4 <HAL_GetTick>
 80093d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093d2:	e00a      	b.n	80093ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d4:	f7fc fae6 	bl	80059a4 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e04f      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ea:	4b2b      	ldr	r3, [pc, #172]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 020c 	and.w	r2, r3, #12
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d1eb      	bne.n	80093d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d20c      	bcs.n	8009424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940a:	4b22      	ldr	r3, [pc, #136]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009412:	4b20      	ldr	r3, [pc, #128]	; (8009494 <HAL_RCC_ClockConfig+0x1b8>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d001      	beq.n	8009424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e032      	b.n	800948a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009430:	4b19      	ldr	r3, [pc, #100]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4916      	ldr	r1, [pc, #88]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	4313      	orrs	r3, r2
 8009440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	490e      	ldr	r1, [pc, #56]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800945e:	4313      	orrs	r3, r2
 8009460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009462:	f000 f821 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 8009466:	4602      	mov	r2, r0
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <HAL_RCC_ClockConfig+0x1bc>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	091b      	lsrs	r3, r3, #4
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	490a      	ldr	r1, [pc, #40]	; (800949c <HAL_RCC_ClockConfig+0x1c0>)
 8009474:	5ccb      	ldrb	r3, [r1, r3]
 8009476:	fa22 f303 	lsr.w	r3, r2, r3
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <HAL_RCC_ClockConfig+0x1c4>)
 800947c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <HAL_RCC_ClockConfig+0x1c8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4618      	mov	r0, r3
 8009484:	f7fc fa4a 	bl	800591c <HAL_InitTick>

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40023c00 	.word	0x40023c00
 8009498:	40023800 	.word	0x40023800
 800949c:	0800d300 	.word	0x0800d300
 80094a0:	200000d4 	.word	0x200000d4
 80094a4:	200000d8 	.word	0x200000d8

080094a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094ac:	b094      	sub	sp, #80	; 0x50
 80094ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	2300      	movs	r3, #0
 80094b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b8:	2300      	movs	r3, #0
 80094ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094c0:	4b79      	ldr	r3, [pc, #484]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f003 030c 	and.w	r3, r3, #12
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d00d      	beq.n	80094e8 <HAL_RCC_GetSysClockFreq+0x40>
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	f200 80e1 	bhi.w	8009694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0x34>
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d003      	beq.n	80094e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80094da:	e0db      	b.n	8009694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094dc:	4b73      	ldr	r3, [pc, #460]	; (80096ac <HAL_RCC_GetSysClockFreq+0x204>)
 80094de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80094e0:	e0db      	b.n	800969a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094e2:	4b73      	ldr	r3, [pc, #460]	; (80096b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80094e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094e6:	e0d8      	b.n	800969a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094e8:	4b6f      	ldr	r3, [pc, #444]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094f2:	4b6d      	ldr	r3, [pc, #436]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d063      	beq.n	80095c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094fe:	4b6a      	ldr	r3, [pc, #424]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	099b      	lsrs	r3, r3, #6
 8009504:	2200      	movs	r2, #0
 8009506:	63bb      	str	r3, [r7, #56]	; 0x38
 8009508:	63fa      	str	r2, [r7, #60]	; 0x3c
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
 8009512:	2300      	movs	r3, #0
 8009514:	637b      	str	r3, [r7, #52]	; 0x34
 8009516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	f04f 0000 	mov.w	r0, #0
 8009522:	f04f 0100 	mov.w	r1, #0
 8009526:	0159      	lsls	r1, r3, #5
 8009528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800952c:	0150      	lsls	r0, r2, #5
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4621      	mov	r1, r4
 8009534:	1a51      	subs	r1, r2, r1
 8009536:	6139      	str	r1, [r7, #16]
 8009538:	4629      	mov	r1, r5
 800953a:	eb63 0301 	sbc.w	r3, r3, r1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	f04f 0200 	mov.w	r2, #0
 8009544:	f04f 0300 	mov.w	r3, #0
 8009548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800954c:	4659      	mov	r1, fp
 800954e:	018b      	lsls	r3, r1, #6
 8009550:	4651      	mov	r1, sl
 8009552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009556:	4651      	mov	r1, sl
 8009558:	018a      	lsls	r2, r1, #6
 800955a:	4651      	mov	r1, sl
 800955c:	ebb2 0801 	subs.w	r8, r2, r1
 8009560:	4659      	mov	r1, fp
 8009562:	eb63 0901 	sbc.w	r9, r3, r1
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800957a:	4690      	mov	r8, r2
 800957c:	4699      	mov	r9, r3
 800957e:	4623      	mov	r3, r4
 8009580:	eb18 0303 	adds.w	r3, r8, r3
 8009584:	60bb      	str	r3, [r7, #8]
 8009586:	462b      	mov	r3, r5
 8009588:	eb49 0303 	adc.w	r3, r9, r3
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	f04f 0200 	mov.w	r2, #0
 8009592:	f04f 0300 	mov.w	r3, #0
 8009596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800959a:	4629      	mov	r1, r5
 800959c:	024b      	lsls	r3, r1, #9
 800959e:	4621      	mov	r1, r4
 80095a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80095a4:	4621      	mov	r1, r4
 80095a6:	024a      	lsls	r2, r1, #9
 80095a8:	4610      	mov	r0, r2
 80095aa:	4619      	mov	r1, r3
 80095ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ae:	2200      	movs	r2, #0
 80095b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095b8:	f7f7 faea 	bl	8000b90 <__aeabi_uldivmod>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4613      	mov	r3, r2
 80095c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c4:	e058      	b.n	8009678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095c6:	4b38      	ldr	r3, [pc, #224]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	099b      	lsrs	r3, r3, #6
 80095cc:	2200      	movs	r2, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	4611      	mov	r1, r2
 80095d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	2300      	movs	r3, #0
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
 80095dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80095e0:	4642      	mov	r2, r8
 80095e2:	464b      	mov	r3, r9
 80095e4:	f04f 0000 	mov.w	r0, #0
 80095e8:	f04f 0100 	mov.w	r1, #0
 80095ec:	0159      	lsls	r1, r3, #5
 80095ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095f2:	0150      	lsls	r0, r2, #5
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4641      	mov	r1, r8
 80095fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80095fe:	4649      	mov	r1, r9
 8009600:	eb63 0b01 	sbc.w	fp, r3, r1
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009618:	ebb2 040a 	subs.w	r4, r2, sl
 800961c:	eb63 050b 	sbc.w	r5, r3, fp
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	f04f 0300 	mov.w	r3, #0
 8009628:	00eb      	lsls	r3, r5, #3
 800962a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800962e:	00e2      	lsls	r2, r4, #3
 8009630:	4614      	mov	r4, r2
 8009632:	461d      	mov	r5, r3
 8009634:	4643      	mov	r3, r8
 8009636:	18e3      	adds	r3, r4, r3
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	464b      	mov	r3, r9
 800963c:	eb45 0303 	adc.w	r3, r5, r3
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800964e:	4629      	mov	r1, r5
 8009650:	028b      	lsls	r3, r1, #10
 8009652:	4621      	mov	r1, r4
 8009654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009658:	4621      	mov	r1, r4
 800965a:	028a      	lsls	r2, r1, #10
 800965c:	4610      	mov	r0, r2
 800965e:	4619      	mov	r1, r3
 8009660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009662:	2200      	movs	r2, #0
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	61fa      	str	r2, [r7, #28]
 8009668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800966c:	f7f7 fa90 	bl	8000b90 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4613      	mov	r3, r2
 8009676:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009678:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	3301      	adds	r3, #1
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800968a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009692:	e002      	b.n	800969a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <HAL_RCC_GetSysClockFreq+0x204>)
 8009696:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800969a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800969c:	4618      	mov	r0, r3
 800969e:	3750      	adds	r7, #80	; 0x50
 80096a0:	46bd      	mov	sp, r7
 80096a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096a6:	bf00      	nop
 80096a8:	40023800 	.word	0x40023800
 80096ac:	00f42400 	.word	0x00f42400
 80096b0:	007a1200 	.word	0x007a1200

080096b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096b8:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80096ba:	681b      	ldr	r3, [r3, #0]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	200000d4 	.word	0x200000d4

080096cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80096d0:	f7ff fff0 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 80096d4:	4602      	mov	r2, r0
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	0a9b      	lsrs	r3, r3, #10
 80096dc:	f003 0307 	and.w	r3, r3, #7
 80096e0:	4903      	ldr	r1, [pc, #12]	; (80096f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096e2:	5ccb      	ldrb	r3, [r1, r3]
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40023800 	.word	0x40023800
 80096f0:	0800d310 	.word	0x0800d310

080096f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80096f8:	f7ff ffdc 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 80096fc:	4602      	mov	r2, r0
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	0b5b      	lsrs	r3, r3, #13
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	4903      	ldr	r1, [pc, #12]	; (8009718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800970a:	5ccb      	ldrb	r3, [r1, r3]
 800970c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009710:	4618      	mov	r0, r3
 8009712:	bd80      	pop	{r7, pc}
 8009714:	40023800 	.word	0x40023800
 8009718:	0800d310 	.word	0x0800d310

0800971c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e041      	b.n	80097b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fb fe66 	bl	8005414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f000 fde2 	bl	800a324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d001      	beq.n	80097d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e03c      	b.n	800984e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1e      	ldr	r2, [pc, #120]	; (800985c <HAL_TIM_Base_Start+0xa0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d018      	beq.n	8009818 <HAL_TIM_Base_Start+0x5c>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ee:	d013      	beq.n	8009818 <HAL_TIM_Base_Start+0x5c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1a      	ldr	r2, [pc, #104]	; (8009860 <HAL_TIM_Base_Start+0xa4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00e      	beq.n	8009818 <HAL_TIM_Base_Start+0x5c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a19      	ldr	r2, [pc, #100]	; (8009864 <HAL_TIM_Base_Start+0xa8>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d009      	beq.n	8009818 <HAL_TIM_Base_Start+0x5c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <HAL_TIM_Base_Start+0xac>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d004      	beq.n	8009818 <HAL_TIM_Base_Start+0x5c>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a16      	ldr	r2, [pc, #88]	; (800986c <HAL_TIM_Base_Start+0xb0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d111      	bne.n	800983c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b06      	cmp	r3, #6
 8009828:	d010      	beq.n	800984c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0201 	orr.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	e007      	b.n	800984c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40010000 	.word	0x40010000
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
 800986c:	40014000 	.word	0x40014000

08009870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	d001      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e044      	b.n	8009912 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <HAL_TIM_Base_Start_IT+0xb0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d018      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x6c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b2:	d013      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x6c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1a      	ldr	r2, [pc, #104]	; (8009924 <HAL_TIM_Base_Start_IT+0xb4>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00e      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x6c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a19      	ldr	r2, [pc, #100]	; (8009928 <HAL_TIM_Base_Start_IT+0xb8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d009      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x6c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a17      	ldr	r2, [pc, #92]	; (800992c <HAL_TIM_Base_Start_IT+0xbc>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d004      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x6c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a16      	ldr	r2, [pc, #88]	; (8009930 <HAL_TIM_Base_Start_IT+0xc0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d111      	bne.n	8009900 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b06      	cmp	r3, #6
 80098ec:	d010      	beq.n	8009910 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f042 0201 	orr.w	r2, r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fe:	e007      	b.n	8009910 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0201 	orr.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	40010000 	.word	0x40010000
 8009924:	40000400 	.word	0x40000400
 8009928:	40000800 	.word	0x40000800
 800992c:	40000c00 	.word	0x40000c00
 8009930:	40014000 	.word	0x40014000

08009934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e041      	b.n	80099ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f839 	bl	80099d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	f000 fcd6 	bl	800a324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_PWM_Start+0x24>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e022      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d109      	bne.n	8009a26 <HAL_TIM_PWM_Start+0x3e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	bf14      	ite	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	2300      	moveq	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	e015      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_PWM_Start+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e008      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e068      	b.n	8009b2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_PWM_Start+0x82>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a68:	e013      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_PWM_Start+0x92>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a78:	e00b      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_PWM_Start+0xa2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a88:	e003      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2201      	movs	r2, #1
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fee8 	bl	800a870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a23      	ldr	r2, [pc, #140]	; (8009b34 <HAL_TIM_PWM_Start+0x14c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d107      	bne.n	8009aba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <HAL_TIM_PWM_Start+0x14c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d018      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x10e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009acc:	d013      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x10e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a19      	ldr	r2, [pc, #100]	; (8009b38 <HAL_TIM_PWM_Start+0x150>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d00e      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x10e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <HAL_TIM_PWM_Start+0x154>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x10e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a16      	ldr	r2, [pc, #88]	; (8009b40 <HAL_TIM_PWM_Start+0x158>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d004      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x10e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a14      	ldr	r2, [pc, #80]	; (8009b44 <HAL_TIM_PWM_Start+0x15c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d111      	bne.n	8009b1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b06      	cmp	r3, #6
 8009b06:	d010      	beq.n	8009b2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0201 	orr.w	r2, r2, #1
 8009b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b18:	e007      	b.n	8009b2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f042 0201 	orr.w	r2, r2, #1
 8009b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	40010000 	.word	0x40010000
 8009b38:	40000400 	.word	0x40000400
 8009b3c:	40000800 	.word	0x40000800
 8009b40:	40000c00 	.word	0x40000c00
 8009b44:	40014000 	.word	0x40014000

08009b48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e097      	b.n	8009c8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7fb fcb3 	bl	80054dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f000 fbc1 	bl	800a324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009be8:	f023 030c 	bic.w	r3, r3, #12
 8009bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	4313      	orrs	r3, r2
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	011a      	lsls	r2, r3, #4
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	031b      	lsls	r3, r3, #12
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009c26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009c2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ca4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009cac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d110      	bne.n	8009ce6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d102      	bne.n	8009cd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cca:	7b7b      	ldrb	r3, [r7, #13]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d001      	beq.n	8009cd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e069      	b.n	8009da8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce4:	e031      	b.n	8009d4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d110      	bne.n	8009d0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d102      	bne.n	8009cf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cf2:	7b3b      	ldrb	r3, [r7, #12]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d001      	beq.n	8009cfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e055      	b.n	8009da8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d0c:	e01d      	b.n	8009d4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d108      	bne.n	8009d26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d105      	bne.n	8009d26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d1a:	7b7b      	ldrb	r3, [r7, #13]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d102      	bne.n	8009d26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d20:	7b3b      	ldrb	r3, [r7, #12]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d001      	beq.n	8009d2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e03e      	b.n	8009da8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_TIM_Encoder_Start+0xc4>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d008      	beq.n	8009d68 <HAL_TIM_Encoder_Start+0xd4>
 8009d56:	e00f      	b.n	8009d78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fd85 	bl	800a870 <TIM_CCxChannelCmd>
      break;
 8009d66:	e016      	b.n	8009d96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	2104      	movs	r1, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fd7d 	bl	800a870 <TIM_CCxChannelCmd>
      break;
 8009d76:	e00e      	b.n	8009d96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fd75 	bl	800a870 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	2104      	movs	r1, #4
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fd6e 	bl	800a870 <TIM_CCxChannelCmd>
      break;
 8009d94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0201 	orr.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d122      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d11b      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0202 	mvn.w	r2, #2
 8009ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fa77 	bl	800a2e6 <HAL_TIM_IC_CaptureCallback>
 8009df8:	e005      	b.n	8009e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fa69 	bl	800a2d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa7a 	bl	800a2fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d122      	bne.n	8009e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d11b      	bne.n	8009e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0204 	mvn.w	r2, #4
 8009e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2202      	movs	r2, #2
 8009e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa4d 	bl	800a2e6 <HAL_TIM_IC_CaptureCallback>
 8009e4c:	e005      	b.n	8009e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa3f 	bl	800a2d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa50 	bl	800a2fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 0308 	and.w	r3, r3, #8
 8009e6a:	2b08      	cmp	r3, #8
 8009e6c:	d122      	bne.n	8009eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d11b      	bne.n	8009eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f06f 0208 	mvn.w	r2, #8
 8009e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2204      	movs	r2, #4
 8009e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa23 	bl	800a2e6 <HAL_TIM_IC_CaptureCallback>
 8009ea0:	e005      	b.n	8009eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa15 	bl	800a2d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fa26 	bl	800a2fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	f003 0310 	and.w	r3, r3, #16
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d122      	bne.n	8009f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b10      	cmp	r3, #16
 8009ece:	d11b      	bne.n	8009f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f06f 0210 	mvn.w	r2, #16
 8009ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2208      	movs	r2, #8
 8009ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f9f9 	bl	800a2e6 <HAL_TIM_IC_CaptureCallback>
 8009ef4:	e005      	b.n	8009f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9eb 	bl	800a2d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9fc 	bl	800a2fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d10e      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d107      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0201 	mvn.w	r2, #1
 8009f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7f7 fdde 	bl	8001af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3e:	2b80      	cmp	r3, #128	; 0x80
 8009f40:	d10e      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d107      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fd78 	bl	800aa50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d10e      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d107      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9c1 	bl	800a30e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b20      	cmp	r3, #32
 8009f98:	d10e      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d107      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0220 	mvn.w	r2, #32
 8009fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fd42 	bl	800aa3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e0ae      	b.n	800a13c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b0c      	cmp	r3, #12
 8009fea:	f200 809f 	bhi.w	800a12c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a029 	.word	0x0800a029
 8009ff8:	0800a12d 	.word	0x0800a12d
 8009ffc:	0800a12d 	.word	0x0800a12d
 800a000:	0800a12d 	.word	0x0800a12d
 800a004:	0800a069 	.word	0x0800a069
 800a008:	0800a12d 	.word	0x0800a12d
 800a00c:	0800a12d 	.word	0x0800a12d
 800a010:	0800a12d 	.word	0x0800a12d
 800a014:	0800a0ab 	.word	0x0800a0ab
 800a018:	0800a12d 	.word	0x0800a12d
 800a01c:	0800a12d 	.word	0x0800a12d
 800a020:	0800a12d 	.word	0x0800a12d
 800a024:	0800a0eb 	.word	0x0800a0eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f9f8 	bl	800a424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0208 	orr.w	r2, r2, #8
 800a042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0204 	bic.w	r2, r2, #4
 800a052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6999      	ldr	r1, [r3, #24]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	619a      	str	r2, [r3, #24]
      break;
 800a066:	e064      	b.n	800a132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fa3e 	bl	800a4f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6999      	ldr	r1, [r3, #24]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	021a      	lsls	r2, r3, #8
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	619a      	str	r2, [r3, #24]
      break;
 800a0a8:	e043      	b.n	800a132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fa89 	bl	800a5c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0208 	orr.w	r2, r2, #8
 800a0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0204 	bic.w	r2, r2, #4
 800a0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69d9      	ldr	r1, [r3, #28]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	61da      	str	r2, [r3, #28]
      break;
 800a0e8:	e023      	b.n	800a132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fad3 	bl	800a69c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69da      	ldr	r2, [r3, #28]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69d9      	ldr	r1, [r3, #28]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	021a      	lsls	r2, r3, #8
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	61da      	str	r2, [r3, #28]
      break;
 800a12a:	e002      	b.n	800a132 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	75fb      	strb	r3, [r7, #23]
      break;
 800a130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d101      	bne.n	800a160 <HAL_TIM_ConfigClockSource+0x1c>
 800a15c:	2302      	movs	r3, #2
 800a15e:	e0b4      	b.n	800a2ca <HAL_TIM_ConfigClockSource+0x186>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a17e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a198:	d03e      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0xd4>
 800a19a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a19e:	f200 8087 	bhi.w	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a6:	f000 8086 	beq.w	800a2b6 <HAL_TIM_ConfigClockSource+0x172>
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ae:	d87f      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1b0:	2b70      	cmp	r3, #112	; 0x70
 800a1b2:	d01a      	beq.n	800a1ea <HAL_TIM_ConfigClockSource+0xa6>
 800a1b4:	2b70      	cmp	r3, #112	; 0x70
 800a1b6:	d87b      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1b8:	2b60      	cmp	r3, #96	; 0x60
 800a1ba:	d050      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x11a>
 800a1bc:	2b60      	cmp	r3, #96	; 0x60
 800a1be:	d877      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c0:	2b50      	cmp	r3, #80	; 0x50
 800a1c2:	d03c      	beq.n	800a23e <HAL_TIM_ConfigClockSource+0xfa>
 800a1c4:	2b50      	cmp	r3, #80	; 0x50
 800a1c6:	d873      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c8:	2b40      	cmp	r3, #64	; 0x40
 800a1ca:	d058      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x13a>
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d86f      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d0:	2b30      	cmp	r3, #48	; 0x30
 800a1d2:	d064      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x15a>
 800a1d4:	2b30      	cmp	r3, #48	; 0x30
 800a1d6:	d86b      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d8:	2b20      	cmp	r3, #32
 800a1da:	d060      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x15a>
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	d867      	bhi.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d05c      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x15a>
 800a1e4:	2b10      	cmp	r3, #16
 800a1e6:	d05a      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x15a>
 800a1e8:	e062      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6899      	ldr	r1, [r3, #8]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f000 fb19 	bl	800a830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a20c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	609a      	str	r2, [r3, #8]
      break;
 800a216:	e04f      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	6899      	ldr	r1, [r3, #8]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f000 fb02 	bl	800a830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a23a:	609a      	str	r2, [r3, #8]
      break;
 800a23c:	e03c      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6859      	ldr	r1, [r3, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f000 fa76 	bl	800a73c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2150      	movs	r1, #80	; 0x50
 800a256:	4618      	mov	r0, r3
 800a258:	f000 facf 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a25c:	e02c      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6859      	ldr	r1, [r3, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f000 fa95 	bl	800a79a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2160      	movs	r1, #96	; 0x60
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fabf 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a27c:	e01c      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f000 fa56 	bl	800a73c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2140      	movs	r1, #64	; 0x40
 800a296:	4618      	mov	r0, r3
 800a298:	f000 faaf 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a29c:	e00c      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f000 faa6 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a2ae:	e003      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b4:	e000      	b.n	800a2b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
	...

0800a324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a34      	ldr	r2, [pc, #208]	; (800a408 <TIM_Base_SetConfig+0xe4>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <TIM_Base_SetConfig+0x38>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a342:	d00b      	beq.n	800a35c <TIM_Base_SetConfig+0x38>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a31      	ldr	r2, [pc, #196]	; (800a40c <TIM_Base_SetConfig+0xe8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <TIM_Base_SetConfig+0x38>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a30      	ldr	r2, [pc, #192]	; (800a410 <TIM_Base_SetConfig+0xec>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <TIM_Base_SetConfig+0x38>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a2f      	ldr	r2, [pc, #188]	; (800a414 <TIM_Base_SetConfig+0xf0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d108      	bne.n	800a36e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a25      	ldr	r2, [pc, #148]	; (800a408 <TIM_Base_SetConfig+0xe4>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d01b      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37c:	d017      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a22      	ldr	r2, [pc, #136]	; (800a40c <TIM_Base_SetConfig+0xe8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d013      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a21      	ldr	r2, [pc, #132]	; (800a410 <TIM_Base_SetConfig+0xec>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d00f      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a20      	ldr	r2, [pc, #128]	; (800a414 <TIM_Base_SetConfig+0xf0>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00b      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a1f      	ldr	r2, [pc, #124]	; (800a418 <TIM_Base_SetConfig+0xf4>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d007      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a1e      	ldr	r2, [pc, #120]	; (800a41c <TIM_Base_SetConfig+0xf8>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d003      	beq.n	800a3ae <TIM_Base_SetConfig+0x8a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <TIM_Base_SetConfig+0xfc>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d108      	bne.n	800a3c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a08      	ldr	r2, [pc, #32]	; (800a408 <TIM_Base_SetConfig+0xe4>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d103      	bne.n	800a3f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	691a      	ldr	r2, [r3, #16]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	615a      	str	r2, [r3, #20]
}
 800a3fa:	bf00      	nop
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40010000 	.word	0x40010000
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40014000 	.word	0x40014000
 800a41c:	40014400 	.word	0x40014400
 800a420:	40014800 	.word	0x40014800

0800a424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	f023 0201 	bic.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f023 0302 	bic.w	r3, r3, #2
 800a46c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	4313      	orrs	r3, r2
 800a476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <TIM_OC1_SetConfig+0xc8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10c      	bne.n	800a49a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f023 0308 	bic.w	r3, r3, #8
 800a486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f023 0304 	bic.w	r3, r3, #4
 800a498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <TIM_OC1_SetConfig+0xc8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d111      	bne.n	800a4c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	621a      	str	r2, [r3, #32]
}
 800a4e0:	bf00      	nop
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	40010000 	.word	0x40010000

0800a4f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f023 0210 	bic.w	r2, r3, #16
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4313      	orrs	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f023 0320 	bic.w	r3, r3, #32
 800a53a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <TIM_OC2_SetConfig+0xd4>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d10d      	bne.n	800a56c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a56a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a15      	ldr	r2, [pc, #84]	; (800a5c4 <TIM_OC2_SetConfig+0xd4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d113      	bne.n	800a59c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a57a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	621a      	str	r2, [r3, #32]
}
 800a5b6:	bf00      	nop
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40010000 	.word	0x40010000

0800a5c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 0303 	bic.w	r3, r3, #3
 800a5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a1d      	ldr	r2, [pc, #116]	; (800a698 <TIM_OC3_SetConfig+0xd0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d10d      	bne.n	800a642 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a62c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	4313      	orrs	r3, r2
 800a638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a14      	ldr	r2, [pc, #80]	; (800a698 <TIM_OC3_SetConfig+0xd0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d113      	bne.n	800a672 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	011b      	lsls	r3, r3, #4
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	621a      	str	r2, [r3, #32]
}
 800a68c:	bf00      	nop
 800a68e:	371c      	adds	r7, #28
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	40010000 	.word	0x40010000

0800a69c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	021b      	lsls	r3, r3, #8
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	031b      	lsls	r3, r3, #12
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a10      	ldr	r2, [pc, #64]	; (800a738 <TIM_OC4_SetConfig+0x9c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d109      	bne.n	800a710 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	019b      	lsls	r3, r3, #6
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	621a      	str	r2, [r3, #32]
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	40010000 	.word	0x40010000

0800a73c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	f023 0201 	bic.w	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	011b      	lsls	r3, r3, #4
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4313      	orrs	r3, r2
 800a770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f023 030a 	bic.w	r3, r3, #10
 800a778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	621a      	str	r2, [r3, #32]
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b087      	sub	sp, #28
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f023 0210 	bic.w	r2, r3, #16
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	f043 0307 	orr.w	r3, r3, #7
 800a81c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	609a      	str	r2, [r3, #8]
}
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a84a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	021a      	lsls	r2, r3, #8
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	431a      	orrs	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4313      	orrs	r3, r2
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	609a      	str	r2, [r3, #8]
}
 800a864:	bf00      	nop
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f003 031f 	and.w	r3, r3, #31
 800a882:	2201      	movs	r2, #1
 800a884:	fa02 f303 	lsl.w	r3, r2, r3
 800a888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a1a      	ldr	r2, [r3, #32]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	43db      	mvns	r3, r3
 800a892:	401a      	ands	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6a1a      	ldr	r2, [r3, #32]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f003 031f 	and.w	r3, r3, #31
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	621a      	str	r2, [r3, #32]
}
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e050      	b.n	800a976 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d018      	beq.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a920:	d013      	beq.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a18      	ldr	r2, [pc, #96]	; (800a988 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00e      	beq.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a16      	ldr	r2, [pc, #88]	; (800a98c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d009      	beq.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a15      	ldr	r2, [pc, #84]	; (800a990 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d004      	beq.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a13      	ldr	r2, [pc, #76]	; (800a994 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d10c      	bne.n	800a964 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	4313      	orrs	r3, r2
 800a95a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40010000 	.word	0x40010000
 800a988:	40000400 	.word	0x40000400
 800a98c:	40000800 	.word	0x40000800
 800a990:	40000c00 	.word	0x40000c00
 800a994:	40014000 	.word	0x40014000

0800a998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e03d      	b.n	800aa30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e03f      	b.n	800aaf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fa fda8 	bl	80055e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2224      	movs	r2, #36	; 0x24
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aaa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 ffd7 	bl	800ba5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aabc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aacc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68da      	ldr	r2, [r3, #12]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aadc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08c      	sub	sp, #48	; 0x30
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d165      	bne.n	800abe6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <HAL_UART_Transmit_DMA+0x26>
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e05e      	b.n	800abe8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_UART_Transmit_DMA+0x38>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e057      	b.n	800abe8 <HAL_UART_Transmit_DMA+0xe8>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	88fa      	ldrh	r2, [r7, #6]
 800ab4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2221      	movs	r2, #33	; 0x21
 800ab5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab64:	4a22      	ldr	r2, [pc, #136]	; (800abf0 <HAL_UART_Transmit_DMA+0xf0>)
 800ab66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6c:	4a21      	ldr	r2, [pc, #132]	; (800abf4 <HAL_UART_Transmit_DMA+0xf4>)
 800ab6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab74:	4a20      	ldr	r2, [pc, #128]	; (800abf8 <HAL_UART_Transmit_DMA+0xf8>)
 800ab76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ab80:	f107 0308 	add.w	r3, r7, #8
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	6819      	ldr	r1, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3304      	adds	r3, #4
 800ab94:	461a      	mov	r2, r3
 800ab96:	88fb      	ldrh	r3, [r7, #6]
 800ab98:	f7fb f8f4 	bl	8005d84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aba4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3314      	adds	r3, #20
 800abb4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	e853 3f00 	ldrex	r3, [r3]
 800abbc:	617b      	str	r3, [r7, #20]
   return(result);
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3314      	adds	r3, #20
 800abcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abce:	627a      	str	r2, [r7, #36]	; 0x24
 800abd0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd2:	6a39      	ldr	r1, [r7, #32]
 800abd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	61fb      	str	r3, [r7, #28]
   return(result);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1e5      	bne.n	800abae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e000      	b.n	800abe8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800abe6:	2302      	movs	r3, #2
  }
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3730      	adds	r7, #48	; 0x30
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	0800b2f5 	.word	0x0800b2f5
 800abf4:	0800b38f 	.word	0x0800b38f
 800abf8:	0800b507 	.word	0x0800b507

0800abfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d11d      	bne.n	800ac52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_UART_Receive_DMA+0x26>
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e016      	b.n	800ac54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d101      	bne.n	800ac34 <HAL_UART_Receive_DMA+0x38>
 800ac30:	2302      	movs	r3, #2
 800ac32:	e00f      	b.n	800ac54 <HAL_UART_Receive_DMA+0x58>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ac42:	88fb      	ldrh	r3, [r7, #6]
 800ac44:	461a      	mov	r2, r3
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fca7 	bl	800b59c <UART_Start_Receive_DMA>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	e000      	b.n	800ac54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b090      	sub	sp, #64	; 0x40
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	bf0c      	ite	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	2300      	movne	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b21      	cmp	r3, #33	; 0x21
 800ac88:	d128      	bne.n	800acdc <HAL_UART_DMAStop+0x80>
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d025      	beq.n	800acdc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	3314      	adds	r3, #20
 800ac96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	e853 3f00 	ldrex	r3, [r3]
 800ac9e:	623b      	str	r3, [r7, #32]
   return(result);
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aca6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3314      	adds	r3, #20
 800acae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acb0:	633a      	str	r2, [r7, #48]	; 0x30
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb8:	e841 2300 	strex	r3, r2, [r1]
 800acbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1e5      	bne.n	800ac90 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fb f8af 	bl	8005e34 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fcfe 	bl	800b6d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace6:	2b40      	cmp	r3, #64	; 0x40
 800ace8:	bf0c      	ite	eq
 800acea:	2301      	moveq	r3, #1
 800acec:	2300      	movne	r3, #0
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b22      	cmp	r3, #34	; 0x22
 800acfc:	d128      	bne.n	800ad50 <HAL_UART_DMAStop+0xf4>
 800acfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d025      	beq.n	800ad50 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3314      	adds	r3, #20
 800ad0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3314      	adds	r3, #20
 800ad22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad24:	61fa      	str	r2, [r7, #28]
 800ad26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	69b9      	ldr	r1, [r7, #24]
 800ad2a:	69fa      	ldr	r2, [r7, #28]
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	617b      	str	r3, [r7, #20]
   return(result);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e5      	bne.n	800ad04 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fb f875 	bl	8005e34 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fcec 	bl	800b728 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3740      	adds	r7, #64	; 0x40
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b0ba      	sub	sp, #232	; 0xe8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ad9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10f      	bne.n	800adc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <HAL_UART_IRQHandler+0x66>
 800adae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fd93 	bl	800b8e6 <UART_Receive_IT>
      return;
 800adc0:	e256      	b.n	800b270 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800adc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 80de 	beq.w	800af88 <HAL_UART_IRQHandler+0x22c>
 800adcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800add8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800addc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80d1 	beq.w	800af88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ade6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <HAL_UART_IRQHandler+0xae>
 800adf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f043 0201 	orr.w	r2, r3, #1
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0e:	f003 0304 	and.w	r3, r3, #4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00b      	beq.n	800ae2e <HAL_UART_IRQHandler+0xd2>
 800ae16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	f043 0202 	orr.w	r2, r3, #2
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <HAL_UART_IRQHandler+0xf6>
 800ae3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d005      	beq.n	800ae52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	f043 0204 	orr.w	r2, r3, #4
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d011      	beq.n	800ae82 <HAL_UART_IRQHandler+0x126>
 800ae5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae62:	f003 0320 	and.w	r3, r3, #32
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7a:	f043 0208 	orr.w	r2, r3, #8
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 81ed 	beq.w	800b266 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d008      	beq.n	800aeaa <HAL_UART_IRQHandler+0x14e>
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fd1e 	bl	800b8e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb4:	2b40      	cmp	r3, #64	; 0x40
 800aeb6:	bf0c      	ite	eq
 800aeb8:	2301      	moveq	r3, #1
 800aeba:	2300      	movne	r3, #0
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	f003 0308 	and.w	r3, r3, #8
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d103      	bne.n	800aed6 <HAL_UART_IRQHandler+0x17a>
 800aece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d04f      	beq.n	800af76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fc26 	bl	800b728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d141      	bne.n	800af6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3314      	adds	r3, #20
 800aef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3314      	adds	r3, #20
 800af12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1d9      	bne.n	800aeea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d013      	beq.n	800af66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	4a7d      	ldr	r2, [pc, #500]	; (800b138 <HAL_UART_IRQHandler+0x3dc>)
 800af44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fa ffe2 	bl	8005f14 <HAL_DMA_Abort_IT>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d016      	beq.n	800af84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af60:	4610      	mov	r0, r2
 800af62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	e00e      	b.n	800af84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f9ae 	bl	800b2c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	e00a      	b.n	800af84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9aa 	bl	800b2c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	e006      	b.n	800af84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f9a6 	bl	800b2c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af82:	e170      	b.n	800b266 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	bf00      	nop
    return;
 800af86:	e16e      	b.n	800b266 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f040 814a 	bne.w	800b226 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af96:	f003 0310 	and.w	r3, r3, #16
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8143 	beq.w	800b226 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afa4:	f003 0310 	and.w	r3, r3, #16
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 813c 	beq.w	800b226 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	60bb      	str	r3, [r7, #8]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	60bb      	str	r3, [r7, #8]
 800afc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afce:	2b40      	cmp	r3, #64	; 0x40
 800afd0:	f040 80b4 	bne.w	800b13c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8140 	beq.w	800b26a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aff2:	429a      	cmp	r2, r3
 800aff4:	f080 8139 	bcs.w	800b26a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800affe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b00a:	f000 8088 	beq.w	800b11e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	330c      	adds	r3, #12
 800b014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b03a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b03e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1d9      	bne.n	800b00e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	3314      	adds	r3, #20
 800b060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b064:	e853 3f00 	ldrex	r3, [r3]
 800b068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b06a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b06c:	f023 0301 	bic.w	r3, r3, #1
 800b070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3314      	adds	r3, #20
 800b07a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b07e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e1      	bne.n	800b05a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3314      	adds	r3, #20
 800b09c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3314      	adds	r3, #20
 800b0b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e3      	bne.n	800b096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ee:	f023 0310 	bic.w	r3, r3, #16
 800b0f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b100:	65ba      	str	r2, [r7, #88]	; 0x58
 800b102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e3      	bne.n	800b0dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fa fe8b 	bl	8005e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b126:	b29b      	uxth	r3, r3
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f8d4 	bl	800b2dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b134:	e099      	b.n	800b26a <HAL_UART_IRQHandler+0x50e>
 800b136:	bf00      	nop
 800b138:	0800b7ef 	.word	0x0800b7ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b144:	b29b      	uxth	r3, r3
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 808b 	beq.w	800b26e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 8086 	beq.w	800b26e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	330c      	adds	r3, #12
 800b168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	330c      	adds	r3, #12
 800b182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b186:	647a      	str	r2, [r7, #68]	; 0x44
 800b188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e3      	bne.n	800b162 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	f023 0301 	bic.w	r3, r3, #1
 800b1b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3314      	adds	r3, #20
 800b1ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1be:	633a      	str	r2, [r7, #48]	; 0x30
 800b1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e3      	bne.n	800b19a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	330c      	adds	r3, #12
 800b1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 0310 	bic.w	r3, r3, #16
 800b1f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	330c      	adds	r3, #12
 800b200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b204:	61fa      	str	r2, [r7, #28]
 800b206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	69b9      	ldr	r1, [r7, #24]
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	617b      	str	r3, [r7, #20]
   return(result);
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e3      	bne.n	800b1e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f85c 	bl	800b2dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b224:	e023      	b.n	800b26e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d009      	beq.n	800b246 <HAL_UART_IRQHandler+0x4ea>
 800b232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fae9 	bl	800b816 <UART_Transmit_IT>
    return;
 800b244:	e014      	b.n	800b270 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00e      	beq.n	800b270 <HAL_UART_IRQHandler+0x514>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fb29 	bl	800b8b6 <UART_EndTransmit_IT>
    return;
 800b264:	e004      	b.n	800b270 <HAL_UART_IRQHandler+0x514>
    return;
 800b266:	bf00      	nop
 800b268:	e002      	b.n	800b270 <HAL_UART_IRQHandler+0x514>
      return;
 800b26a:	bf00      	nop
 800b26c:	e000      	b.n	800b270 <HAL_UART_IRQHandler+0x514>
      return;
 800b26e:	bf00      	nop
  }
}
 800b270:	37e8      	adds	r7, #232	; 0xe8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop

0800b278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b090      	sub	sp, #64	; 0x40
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d137      	bne.n	800b380 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b312:	2200      	movs	r2, #0
 800b314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3314      	adds	r3, #20
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	623b      	str	r3, [r7, #32]
   return(result);
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b32c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3314      	adds	r3, #20
 800b334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b336:	633a      	str	r2, [r7, #48]	; 0x30
 800b338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e5      	bne.n	800b316 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	330c      	adds	r3, #12
 800b350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	60fb      	str	r3, [r7, #12]
   return(result);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b360:	637b      	str	r3, [r7, #52]	; 0x34
 800b362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	330c      	adds	r3, #12
 800b368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b36a:	61fa      	str	r2, [r7, #28]
 800b36c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	69b9      	ldr	r1, [r7, #24]
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	617b      	str	r3, [r7, #20]
   return(result);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e5      	bne.n	800b34a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b37e:	e002      	b.n	800b386 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b380:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b382:	f7ff ff79 	bl	800b278 <HAL_UART_TxCpltCallback>
}
 800b386:	bf00      	nop
 800b388:	3740      	adds	r7, #64	; 0x40
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff ff75 	bl	800b28c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b09c      	sub	sp, #112	; 0x70
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d172      	bne.n	800b4ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	330c      	adds	r3, #12
 800b3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800b3ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e5      	bne.n	800b3cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3314      	adds	r3, #20
 800b406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	e853 3f00 	ldrex	r3, [r3]
 800b40e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b412:	f023 0301 	bic.w	r3, r3, #1
 800b416:	667b      	str	r3, [r7, #100]	; 0x64
 800b418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3314      	adds	r3, #20
 800b41e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b420:	647a      	str	r2, [r7, #68]	; 0x44
 800b422:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b428:	e841 2300 	strex	r3, r2, [r1]
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e5      	bne.n	800b400 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3314      	adds	r3, #20
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	623b      	str	r3, [r7, #32]
   return(result);
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b44a:	663b      	str	r3, [r7, #96]	; 0x60
 800b44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3314      	adds	r3, #20
 800b452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b454:	633a      	str	r2, [r7, #48]	; 0x30
 800b456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e5      	bne.n	800b434 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46a:	2220      	movs	r2, #32
 800b46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b474:	2b01      	cmp	r3, #1
 800b476:	d119      	bne.n	800b4ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	330c      	adds	r3, #12
 800b47e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	60fb      	str	r3, [r7, #12]
   return(result);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0310 	bic.w	r3, r3, #16
 800b48e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	330c      	adds	r3, #12
 800b496:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b498:	61fa      	str	r2, [r7, #28]
 800b49a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49c:	69b9      	ldr	r1, [r7, #24]
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e5      	bne.n	800b478 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d106      	bne.n	800b4c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4bc:	f7ff ff0e 	bl	800b2dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4c0:	e002      	b.n	800b4c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b4c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4c4:	f7ff feec 	bl	800b2a0 <HAL_UART_RxCpltCallback>
}
 800b4c8:	bf00      	nop
 800b4ca:	3770      	adds	r7, #112	; 0x70
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d108      	bne.n	800b4f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f7ff fef3 	bl	800b2dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4f6:	e002      	b.n	800b4fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fedb 	bl	800b2b4 <HAL_UART_RxHalfCpltCallback>
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	bf0c      	ite	eq
 800b526:	2301      	moveq	r3, #1
 800b528:	2300      	movne	r3, #0
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b21      	cmp	r3, #33	; 0x21
 800b538:	d108      	bne.n	800b54c <UART_DMAError+0x46>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b546:	68b8      	ldr	r0, [r7, #8]
 800b548:	f000 f8c6 	bl	800b6d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b556:	2b40      	cmp	r3, #64	; 0x40
 800b558:	bf0c      	ite	eq
 800b55a:	2301      	moveq	r3, #1
 800b55c:	2300      	movne	r3, #0
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b22      	cmp	r3, #34	; 0x22
 800b56c:	d108      	bne.n	800b580 <UART_DMAError+0x7a>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2200      	movs	r2, #0
 800b578:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b57a:	68b8      	ldr	r0, [r7, #8]
 800b57c:	f000 f8d4 	bl	800b728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b584:	f043 0210 	orr.w	r2, r3, #16
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f7ff fe9b 	bl	800b2c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b098      	sub	sp, #96	; 0x60
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2222      	movs	r2, #34	; 0x22
 800b5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	4a40      	ldr	r2, [pc, #256]	; (800b6cc <UART_Start_Receive_DMA+0x130>)
 800b5ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d0:	4a3f      	ldr	r2, [pc, #252]	; (800b6d0 <UART_Start_Receive_DMA+0x134>)
 800b5d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d8:	4a3e      	ldr	r2, [pc, #248]	; (800b6d4 <UART_Start_Receive_DMA+0x138>)
 800b5da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b5e4:	f107 0308 	add.w	r3, r7, #8
 800b5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	88fb      	ldrh	r3, [r7, #6]
 800b5fc:	f7fa fbc2 	bl	8005d84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	613b      	str	r3, [r7, #16]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d019      	beq.n	800b65a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	330c      	adds	r3, #12
 800b62c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b63c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	330c      	adds	r3, #12
 800b644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b646:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b648:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e5      	bne.n	800b626 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3314      	adds	r3, #20
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	f043 0301 	orr.w	r3, r3, #1
 800b670:	657b      	str	r3, [r7, #84]	; 0x54
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3314      	adds	r3, #20
 800b678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b67a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b67c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e5      	bne.n	800b65a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3314      	adds	r3, #20
 800b694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	617b      	str	r3, [r7, #20]
   return(result);
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a4:	653b      	str	r3, [r7, #80]	; 0x50
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3314      	adds	r3, #20
 800b6ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b6b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6a39      	ldr	r1, [r7, #32]
 800b6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e5      	bne.n	800b68e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3760      	adds	r7, #96	; 0x60
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	0800b3ab 	.word	0x0800b3ab
 800b6d0:	0800b4d1 	.word	0x0800b4d1
 800b6d4:	0800b507 	.word	0x0800b507

0800b6d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b089      	sub	sp, #36	; 0x24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6f6:	61fb      	str	r3, [r7, #28]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	61ba      	str	r2, [r7, #24]
 800b702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	6979      	ldr	r1, [r7, #20]
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	e841 2300 	strex	r3, r2, [r1]
 800b70c:	613b      	str	r3, [r7, #16]
   return(result);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e5      	bne.n	800b6e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2220      	movs	r2, #32
 800b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b71c:	bf00      	nop
 800b71e:	3724      	adds	r7, #36	; 0x24
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b095      	sub	sp, #84	; 0x54
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	330c      	adds	r3, #12
 800b736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73a:	e853 3f00 	ldrex	r3, [r3]
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	330c      	adds	r3, #12
 800b74e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b750:	643a      	str	r2, [r7, #64]	; 0x40
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b758:	e841 2300 	strex	r3, r2, [r1]
 800b75c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1e5      	bne.n	800b730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3314      	adds	r3, #20
 800b76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	e853 3f00 	ldrex	r3, [r3]
 800b772:	61fb      	str	r3, [r7, #28]
   return(result);
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	f023 0301 	bic.w	r3, r3, #1
 800b77a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3314      	adds	r3, #20
 800b782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b784:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e5      	bne.n	800b764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d119      	bne.n	800b7d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f023 0310 	bic.w	r3, r3, #16
 800b7b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	330c      	adds	r3, #12
 800b7be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c0:	61ba      	str	r2, [r7, #24]
 800b7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e5      	bne.n	800b7a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7e2:	bf00      	nop
 800b7e4:	3754      	adds	r7, #84	; 0x54
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7ff fd5d 	bl	800b2c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b816:	b480      	push	{r7}
 800b818:	b085      	sub	sp, #20
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b21      	cmp	r3, #33	; 0x21
 800b828:	d13e      	bne.n	800b8a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b832:	d114      	bne.n	800b85e <UART_Transmit_IT+0x48>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d110      	bne.n	800b85e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	881b      	ldrh	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	1c9a      	adds	r2, r3, #2
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	621a      	str	r2, [r3, #32]
 800b85c:	e008      	b.n	800b870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	1c59      	adds	r1, r3, #1
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	6211      	str	r1, [r2, #32]
 800b868:	781a      	ldrb	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b874:	b29b      	uxth	r3, r3
 800b876:	3b01      	subs	r3, #1
 800b878:	b29b      	uxth	r3, r3
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	4619      	mov	r1, r3
 800b87e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10f      	bne.n	800b8a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68da      	ldr	r2, [r3, #12]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	e000      	b.n	800b8aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8a8:	2302      	movs	r3, #2
  }
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fcce 	bl	800b278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b08c      	sub	sp, #48	; 0x30
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b22      	cmp	r3, #34	; 0x22
 800b8f8:	f040 80ab 	bne.w	800ba52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b904:	d117      	bne.n	800b936 <UART_Receive_IT+0x50>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d113      	bne.n	800b936 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b924:	b29a      	uxth	r2, r3
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92e:	1c9a      	adds	r2, r3, #2
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	629a      	str	r2, [r3, #40]	; 0x28
 800b934:	e026      	b.n	800b984 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b948:	d007      	beq.n	800b95a <UART_Receive_IT+0x74>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10a      	bne.n	800b968 <UART_Receive_IT+0x82>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	b2da      	uxtb	r2, r3
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e008      	b.n	800b97a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b974:	b2da      	uxtb	r2, r3
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b988:	b29b      	uxth	r3, r3
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	4619      	mov	r1, r3
 800b992:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b994:	2b00      	cmp	r3, #0
 800b996:	d15a      	bne.n	800ba4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68da      	ldr	r2, [r3, #12]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0220 	bic.w	r2, r2, #32
 800b9a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68da      	ldr	r2, [r3, #12]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	695a      	ldr	r2, [r3, #20]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0201 	bic.w	r2, r2, #1
 800b9c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d135      	bne.n	800ba44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	330c      	adds	r3, #12
 800b9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f023 0310 	bic.w	r3, r3, #16
 800b9f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	330c      	adds	r3, #12
 800b9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fe:	623a      	str	r2, [r7, #32]
 800ba00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	69f9      	ldr	r1, [r7, #28]
 800ba04:	6a3a      	ldr	r2, [r7, #32]
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e5      	bne.n	800b9de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0310 	and.w	r3, r3, #16
 800ba1c:	2b10      	cmp	r3, #16
 800ba1e:	d10a      	bne.n	800ba36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fc4d 	bl	800b2dc <HAL_UARTEx_RxEventCallback>
 800ba42:	e002      	b.n	800ba4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fc2b 	bl	800b2a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e002      	b.n	800ba54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e000      	b.n	800ba54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3730      	adds	r7, #48	; 0x30
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba60:	b0c0      	sub	sp, #256	; 0x100
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba78:	68d9      	ldr	r1, [r3, #12]
 800ba7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	ea40 0301 	orr.w	r3, r0, r1
 800ba84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800baa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bab4:	f021 010c 	bic.w	r1, r1, #12
 800bab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bac2:	430b      	orrs	r3, r1
 800bac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad6:	6999      	ldr	r1, [r3, #24]
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	ea40 0301 	orr.w	r3, r0, r1
 800bae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4b8f      	ldr	r3, [pc, #572]	; (800bd28 <UART_SetConfig+0x2cc>)
 800baec:	429a      	cmp	r2, r3
 800baee:	d005      	beq.n	800bafc <UART_SetConfig+0xa0>
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	4b8d      	ldr	r3, [pc, #564]	; (800bd2c <UART_SetConfig+0x2d0>)
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d104      	bne.n	800bb06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bafc:	f7fd fdfa 	bl	80096f4 <HAL_RCC_GetPCLK2Freq>
 800bb00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb04:	e003      	b.n	800bb0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb06:	f7fd fde1 	bl	80096cc <HAL_RCC_GetPCLK1Freq>
 800bb0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb12:	69db      	ldr	r3, [r3, #28]
 800bb14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb18:	f040 810c 	bne.w	800bd34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb2e:	4622      	mov	r2, r4
 800bb30:	462b      	mov	r3, r5
 800bb32:	1891      	adds	r1, r2, r2
 800bb34:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb36:	415b      	adcs	r3, r3
 800bb38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb3e:	4621      	mov	r1, r4
 800bb40:	eb12 0801 	adds.w	r8, r2, r1
 800bb44:	4629      	mov	r1, r5
 800bb46:	eb43 0901 	adc.w	r9, r3, r1
 800bb4a:	f04f 0200 	mov.w	r2, #0
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb5e:	4690      	mov	r8, r2
 800bb60:	4699      	mov	r9, r3
 800bb62:	4623      	mov	r3, r4
 800bb64:	eb18 0303 	adds.w	r3, r8, r3
 800bb68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	eb49 0303 	adc.w	r3, r9, r3
 800bb72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bb86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	18db      	adds	r3, r3, r3
 800bb8e:	653b      	str	r3, [r7, #80]	; 0x50
 800bb90:	4613      	mov	r3, r2
 800bb92:	eb42 0303 	adc.w	r3, r2, r3
 800bb96:	657b      	str	r3, [r7, #84]	; 0x54
 800bb98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bba0:	f7f4 fff6 	bl	8000b90 <__aeabi_uldivmod>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4b61      	ldr	r3, [pc, #388]	; (800bd30 <UART_SetConfig+0x2d4>)
 800bbaa:	fba3 2302 	umull	r2, r3, r3, r2
 800bbae:	095b      	lsrs	r3, r3, #5
 800bbb0:	011c      	lsls	r4, r3, #4
 800bbb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bbc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	1891      	adds	r1, r2, r2
 800bbca:	64b9      	str	r1, [r7, #72]	; 0x48
 800bbcc:	415b      	adcs	r3, r3
 800bbce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bbd4:	4641      	mov	r1, r8
 800bbd6:	eb12 0a01 	adds.w	sl, r2, r1
 800bbda:	4649      	mov	r1, r9
 800bbdc:	eb43 0b01 	adc.w	fp, r3, r1
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bbec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bbf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbf4:	4692      	mov	sl, r2
 800bbf6:	469b      	mov	fp, r3
 800bbf8:	4643      	mov	r3, r8
 800bbfa:	eb1a 0303 	adds.w	r3, sl, r3
 800bbfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc02:	464b      	mov	r3, r9
 800bc04:	eb4b 0303 	adc.w	r3, fp, r3
 800bc08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc20:	460b      	mov	r3, r1
 800bc22:	18db      	adds	r3, r3, r3
 800bc24:	643b      	str	r3, [r7, #64]	; 0x40
 800bc26:	4613      	mov	r3, r2
 800bc28:	eb42 0303 	adc.w	r3, r2, r3
 800bc2c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc36:	f7f4 ffab 	bl	8000b90 <__aeabi_uldivmod>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	4b3b      	ldr	r3, [pc, #236]	; (800bd30 <UART_SetConfig+0x2d4>)
 800bc42:	fba3 2301 	umull	r2, r3, r3, r1
 800bc46:	095b      	lsrs	r3, r3, #5
 800bc48:	2264      	movs	r2, #100	; 0x64
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	1acb      	subs	r3, r1, r3
 800bc50:	00db      	lsls	r3, r3, #3
 800bc52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc56:	4b36      	ldr	r3, [pc, #216]	; (800bd30 <UART_SetConfig+0x2d4>)
 800bc58:	fba3 2302 	umull	r2, r3, r3, r2
 800bc5c:	095b      	lsrs	r3, r3, #5
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc64:	441c      	add	r4, r3
 800bc66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bc78:	4642      	mov	r2, r8
 800bc7a:	464b      	mov	r3, r9
 800bc7c:	1891      	adds	r1, r2, r2
 800bc7e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc80:	415b      	adcs	r3, r3
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc88:	4641      	mov	r1, r8
 800bc8a:	1851      	adds	r1, r2, r1
 800bc8c:	6339      	str	r1, [r7, #48]	; 0x30
 800bc8e:	4649      	mov	r1, r9
 800bc90:	414b      	adcs	r3, r1
 800bc92:	637b      	str	r3, [r7, #52]	; 0x34
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	f04f 0300 	mov.w	r3, #0
 800bc9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bca0:	4659      	mov	r1, fp
 800bca2:	00cb      	lsls	r3, r1, #3
 800bca4:	4651      	mov	r1, sl
 800bca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcaa:	4651      	mov	r1, sl
 800bcac:	00ca      	lsls	r2, r1, #3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4642      	mov	r2, r8
 800bcb6:	189b      	adds	r3, r3, r2
 800bcb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcbc:	464b      	mov	r3, r9
 800bcbe:	460a      	mov	r2, r1
 800bcc0:	eb42 0303 	adc.w	r3, r2, r3
 800bcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bcd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bcdc:	460b      	mov	r3, r1
 800bcde:	18db      	adds	r3, r3, r3
 800bce0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bce2:	4613      	mov	r3, r2
 800bce4:	eb42 0303 	adc.w	r3, r2, r3
 800bce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bcee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bcf2:	f7f4 ff4d 	bl	8000b90 <__aeabi_uldivmod>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4b0d      	ldr	r3, [pc, #52]	; (800bd30 <UART_SetConfig+0x2d4>)
 800bcfc:	fba3 1302 	umull	r1, r3, r3, r2
 800bd00:	095b      	lsrs	r3, r3, #5
 800bd02:	2164      	movs	r1, #100	; 0x64
 800bd04:	fb01 f303 	mul.w	r3, r1, r3
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	3332      	adds	r3, #50	; 0x32
 800bd0e:	4a08      	ldr	r2, [pc, #32]	; (800bd30 <UART_SetConfig+0x2d4>)
 800bd10:	fba2 2303 	umull	r2, r3, r2, r3
 800bd14:	095b      	lsrs	r3, r3, #5
 800bd16:	f003 0207 	and.w	r2, r3, #7
 800bd1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4422      	add	r2, r4
 800bd22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd24:	e105      	b.n	800bf32 <UART_SetConfig+0x4d6>
 800bd26:	bf00      	nop
 800bd28:	40011000 	.word	0x40011000
 800bd2c:	40011400 	.word	0x40011400
 800bd30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd46:	4642      	mov	r2, r8
 800bd48:	464b      	mov	r3, r9
 800bd4a:	1891      	adds	r1, r2, r2
 800bd4c:	6239      	str	r1, [r7, #32]
 800bd4e:	415b      	adcs	r3, r3
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
 800bd52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd56:	4641      	mov	r1, r8
 800bd58:	1854      	adds	r4, r2, r1
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	eb43 0501 	adc.w	r5, r3, r1
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	f04f 0300 	mov.w	r3, #0
 800bd68:	00eb      	lsls	r3, r5, #3
 800bd6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd6e:	00e2      	lsls	r2, r4, #3
 800bd70:	4614      	mov	r4, r2
 800bd72:	461d      	mov	r5, r3
 800bd74:	4643      	mov	r3, r8
 800bd76:	18e3      	adds	r3, r4, r3
 800bd78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	eb45 0303 	adc.w	r3, r5, r3
 800bd82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bda2:	4629      	mov	r1, r5
 800bda4:	008b      	lsls	r3, r1, #2
 800bda6:	4621      	mov	r1, r4
 800bda8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdac:	4621      	mov	r1, r4
 800bdae:	008a      	lsls	r2, r1, #2
 800bdb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bdb4:	f7f4 feec 	bl	8000b90 <__aeabi_uldivmod>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4b60      	ldr	r3, [pc, #384]	; (800bf40 <UART_SetConfig+0x4e4>)
 800bdbe:	fba3 2302 	umull	r2, r3, r3, r2
 800bdc2:	095b      	lsrs	r3, r3, #5
 800bdc4:	011c      	lsls	r4, r3, #4
 800bdc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bdd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bdd8:	4642      	mov	r2, r8
 800bdda:	464b      	mov	r3, r9
 800bddc:	1891      	adds	r1, r2, r2
 800bdde:	61b9      	str	r1, [r7, #24]
 800bde0:	415b      	adcs	r3, r3
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bde8:	4641      	mov	r1, r8
 800bdea:	1851      	adds	r1, r2, r1
 800bdec:	6139      	str	r1, [r7, #16]
 800bdee:	4649      	mov	r1, r9
 800bdf0:	414b      	adcs	r3, r1
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	f04f 0200 	mov.w	r2, #0
 800bdf8:	f04f 0300 	mov.w	r3, #0
 800bdfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be00:	4659      	mov	r1, fp
 800be02:	00cb      	lsls	r3, r1, #3
 800be04:	4651      	mov	r1, sl
 800be06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be0a:	4651      	mov	r1, sl
 800be0c:	00ca      	lsls	r2, r1, #3
 800be0e:	4610      	mov	r0, r2
 800be10:	4619      	mov	r1, r3
 800be12:	4603      	mov	r3, r0
 800be14:	4642      	mov	r2, r8
 800be16:	189b      	adds	r3, r3, r2
 800be18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be1c:	464b      	mov	r3, r9
 800be1e:	460a      	mov	r2, r1
 800be20:	eb42 0303 	adc.w	r3, r2, r3
 800be24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	67bb      	str	r3, [r7, #120]	; 0x78
 800be32:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be34:	f04f 0200 	mov.w	r2, #0
 800be38:	f04f 0300 	mov.w	r3, #0
 800be3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be40:	4649      	mov	r1, r9
 800be42:	008b      	lsls	r3, r1, #2
 800be44:	4641      	mov	r1, r8
 800be46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be4a:	4641      	mov	r1, r8
 800be4c:	008a      	lsls	r2, r1, #2
 800be4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be52:	f7f4 fe9d 	bl	8000b90 <__aeabi_uldivmod>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4b39      	ldr	r3, [pc, #228]	; (800bf40 <UART_SetConfig+0x4e4>)
 800be5c:	fba3 1302 	umull	r1, r3, r3, r2
 800be60:	095b      	lsrs	r3, r3, #5
 800be62:	2164      	movs	r1, #100	; 0x64
 800be64:	fb01 f303 	mul.w	r3, r1, r3
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	011b      	lsls	r3, r3, #4
 800be6c:	3332      	adds	r3, #50	; 0x32
 800be6e:	4a34      	ldr	r2, [pc, #208]	; (800bf40 <UART_SetConfig+0x4e4>)
 800be70:	fba2 2303 	umull	r2, r3, r2, r3
 800be74:	095b      	lsrs	r3, r3, #5
 800be76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be7a:	441c      	add	r4, r3
 800be7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be80:	2200      	movs	r2, #0
 800be82:	673b      	str	r3, [r7, #112]	; 0x70
 800be84:	677a      	str	r2, [r7, #116]	; 0x74
 800be86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800be8a:	4642      	mov	r2, r8
 800be8c:	464b      	mov	r3, r9
 800be8e:	1891      	adds	r1, r2, r2
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	415b      	adcs	r3, r3
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be9a:	4641      	mov	r1, r8
 800be9c:	1851      	adds	r1, r2, r1
 800be9e:	6039      	str	r1, [r7, #0]
 800bea0:	4649      	mov	r1, r9
 800bea2:	414b      	adcs	r3, r1
 800bea4:	607b      	str	r3, [r7, #4]
 800bea6:	f04f 0200 	mov.w	r2, #0
 800beaa:	f04f 0300 	mov.w	r3, #0
 800beae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800beb2:	4659      	mov	r1, fp
 800beb4:	00cb      	lsls	r3, r1, #3
 800beb6:	4651      	mov	r1, sl
 800beb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bebc:	4651      	mov	r1, sl
 800bebe:	00ca      	lsls	r2, r1, #3
 800bec0:	4610      	mov	r0, r2
 800bec2:	4619      	mov	r1, r3
 800bec4:	4603      	mov	r3, r0
 800bec6:	4642      	mov	r2, r8
 800bec8:	189b      	adds	r3, r3, r2
 800beca:	66bb      	str	r3, [r7, #104]	; 0x68
 800becc:	464b      	mov	r3, r9
 800bece:	460a      	mov	r2, r1
 800bed0:	eb42 0303 	adc.w	r3, r2, r3
 800bed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	663b      	str	r3, [r7, #96]	; 0x60
 800bee0:	667a      	str	r2, [r7, #100]	; 0x64
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	f04f 0300 	mov.w	r3, #0
 800beea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800beee:	4649      	mov	r1, r9
 800bef0:	008b      	lsls	r3, r1, #2
 800bef2:	4641      	mov	r1, r8
 800bef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bef8:	4641      	mov	r1, r8
 800befa:	008a      	lsls	r2, r1, #2
 800befc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf00:	f7f4 fe46 	bl	8000b90 <__aeabi_uldivmod>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <UART_SetConfig+0x4e4>)
 800bf0a:	fba3 1302 	umull	r1, r3, r3, r2
 800bf0e:	095b      	lsrs	r3, r3, #5
 800bf10:	2164      	movs	r1, #100	; 0x64
 800bf12:	fb01 f303 	mul.w	r3, r1, r3
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	3332      	adds	r3, #50	; 0x32
 800bf1c:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <UART_SetConfig+0x4e4>)
 800bf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf22:	095b      	lsrs	r3, r3, #5
 800bf24:	f003 020f 	and.w	r2, r3, #15
 800bf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4422      	add	r2, r4
 800bf30:	609a      	str	r2, [r3, #8]
}
 800bf32:	bf00      	nop
 800bf34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf3e:	bf00      	nop
 800bf40:	51eb851f 	.word	0x51eb851f

0800bf44 <arm_mat_trans_f32>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	8802      	ldrh	r2, [r0, #0]
 800bf4a:	884b      	ldrh	r3, [r1, #2]
 800bf4c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bf50:	684f      	ldr	r7, [r1, #4]
 800bf52:	8840      	ldrh	r0, [r0, #2]
 800bf54:	4293      	cmp	r3, r2
 800bf56:	b083      	sub	sp, #12
 800bf58:	d14c      	bne.n	800bff4 <arm_mat_trans_f32+0xb0>
 800bf5a:	f8b1 e000 	ldrh.w	lr, [r1]
 800bf5e:	4586      	cmp	lr, r0
 800bf60:	d148      	bne.n	800bff4 <arm_mat_trans_f32+0xb0>
 800bf62:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800bf66:	009c      	lsls	r4, r3, #2
 800bf68:	f00e 0e03 	and.w	lr, lr, #3
 800bf6c:	fb08 f904 	mul.w	r9, r8, r4
 800bf70:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800bf74:	011d      	lsls	r5, r3, #4
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bf7c:	eb07 0a04 	add.w	sl, r7, r4
 800bf80:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800bf84:	9201      	str	r2, [sp, #4]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	463b      	mov	r3, r7
 800bf8a:	f1b8 0f00 	cmp.w	r8, #0
 800bf8e:	d01d      	beq.n	800bfcc <arm_mat_trans_f32+0x88>
 800bf90:	9900      	ldr	r1, [sp, #0]
 800bf92:	f10c 0210 	add.w	r2, ip, #16
 800bf96:	4439      	add	r1, r7
 800bf98:	4640      	mov	r0, r8
 800bf9a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800bf9e:	601e      	str	r6, [r3, #0]
 800bfa0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800bfa4:	191e      	adds	r6, r3, r4
 800bfa6:	edc6 7a00 	vstr	s15, [r6]
 800bfaa:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800bfae:	600e      	str	r6, [r1, #0]
 800bfb0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800bfb4:	190e      	adds	r6, r1, r4
 800bfb6:	3801      	subs	r0, #1
 800bfb8:	442b      	add	r3, r5
 800bfba:	f102 0210 	add.w	r2, r2, #16
 800bfbe:	edc6 7a00 	vstr	s15, [r6]
 800bfc2:	4429      	add	r1, r5
 800bfc4:	d1e9      	bne.n	800bf9a <arm_mat_trans_f32+0x56>
 800bfc6:	44dc      	add	ip, fp
 800bfc8:	eb09 0307 	add.w	r3, r9, r7
 800bfcc:	f1be 0f00 	cmp.w	lr, #0
 800bfd0:	d009      	beq.n	800bfe6 <arm_mat_trans_f32+0xa2>
 800bfd2:	4672      	mov	r2, lr
 800bfd4:	4661      	mov	r1, ip
 800bfd6:	f851 0b04 	ldr.w	r0, [r1], #4
 800bfda:	6018      	str	r0, [r3, #0]
 800bfdc:	3a01      	subs	r2, #1
 800bfde:	4423      	add	r3, r4
 800bfe0:	d1f9      	bne.n	800bfd6 <arm_mat_trans_f32+0x92>
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	449c      	add	ip, r3
 800bfe6:	3704      	adds	r7, #4
 800bfe8:	4557      	cmp	r7, sl
 800bfea:	d1cd      	bne.n	800bf88 <arm_mat_trans_f32+0x44>
 800bfec:	2000      	movs	r0, #0
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff4:	f06f 0002 	mvn.w	r0, #2
 800bff8:	e7f9      	b.n	800bfee <arm_mat_trans_f32+0xaa>
 800bffa:	bf00      	nop

0800bffc <arm_mat_sub_f32>:
 800bffc:	b4f0      	push	{r4, r5, r6, r7}
 800bffe:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c002:	6803      	ldr	r3, [r0, #0]
 800c004:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c008:	6856      	ldr	r6, [r2, #4]
 800c00a:	42a3      	cmp	r3, r4
 800c00c:	d15d      	bne.n	800c0ca <arm_mat_sub_f32+0xce>
 800c00e:	6812      	ldr	r2, [r2, #0]
 800c010:	4293      	cmp	r3, r2
 800c012:	d15a      	bne.n	800c0ca <arm_mat_sub_f32+0xce>
 800c014:	8803      	ldrh	r3, [r0, #0]
 800c016:	8844      	ldrh	r4, [r0, #2]
 800c018:	fb04 f403 	mul.w	r4, r4, r3
 800c01c:	08a5      	lsrs	r5, r4, #2
 800c01e:	d032      	beq.n	800c086 <arm_mat_sub_f32+0x8a>
 800c020:	f10c 0110 	add.w	r1, ip, #16
 800c024:	f107 0210 	add.w	r2, r7, #16
 800c028:	f106 0310 	add.w	r3, r6, #16
 800c02c:	4628      	mov	r0, r5
 800c02e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c032:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c03a:	3801      	subs	r0, #1
 800c03c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c040:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c044:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c04c:	f101 0110 	add.w	r1, r1, #16
 800c050:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c054:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c058:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c060:	f102 0210 	add.w	r2, r2, #16
 800c064:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c068:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c06c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c074:	f103 0310 	add.w	r3, r3, #16
 800c078:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c07c:	d1d7      	bne.n	800c02e <arm_mat_sub_f32+0x32>
 800c07e:	012b      	lsls	r3, r5, #4
 800c080:	449c      	add	ip, r3
 800c082:	441f      	add	r7, r3
 800c084:	441e      	add	r6, r3
 800c086:	f014 0403 	ands.w	r4, r4, #3
 800c08a:	d01b      	beq.n	800c0c4 <arm_mat_sub_f32+0xc8>
 800c08c:	eddc 7a00 	vldr	s15, [ip]
 800c090:	ed97 7a00 	vldr	s14, [r7]
 800c094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c098:	3c01      	subs	r4, #1
 800c09a:	edc6 7a00 	vstr	s15, [r6]
 800c09e:	d011      	beq.n	800c0c4 <arm_mat_sub_f32+0xc8>
 800c0a0:	eddc 7a01 	vldr	s15, [ip, #4]
 800c0a4:	ed97 7a01 	vldr	s14, [r7, #4]
 800c0a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0ac:	2c01      	cmp	r4, #1
 800c0ae:	edc6 7a01 	vstr	s15, [r6, #4]
 800c0b2:	d007      	beq.n	800c0c4 <arm_mat_sub_f32+0xc8>
 800c0b4:	eddc 7a02 	vldr	s15, [ip, #8]
 800c0b8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c0bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0c0:	edc6 7a02 	vstr	s15, [r6, #8]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0c8:	4770      	bx	lr
 800c0ca:	f06f 0002 	mvn.w	r0, #2
 800c0ce:	e7fa      	b.n	800c0c6 <arm_mat_sub_f32+0xca>

0800c0d0 <arm_mat_mult_f32>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	8845      	ldrh	r5, [r0, #2]
 800c0d6:	880b      	ldrh	r3, [r1, #0]
 800c0d8:	8806      	ldrh	r6, [r0, #0]
 800c0da:	6847      	ldr	r7, [r0, #4]
 800c0dc:	6854      	ldr	r4, [r2, #4]
 800c0de:	6848      	ldr	r0, [r1, #4]
 800c0e0:	b08b      	sub	sp, #44	; 0x2c
 800c0e2:	42ab      	cmp	r3, r5
 800c0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c0e6:	9604      	str	r6, [sp, #16]
 800c0e8:	8849      	ldrh	r1, [r1, #2]
 800c0ea:	f040 808a 	bne.w	800c202 <arm_mat_mult_f32+0x132>
 800c0ee:	8815      	ldrh	r5, [r2, #0]
 800c0f0:	42b5      	cmp	r5, r6
 800c0f2:	f040 8086 	bne.w	800c202 <arm_mat_mult_f32+0x132>
 800c0f6:	8852      	ldrh	r2, [r2, #2]
 800c0f8:	428a      	cmp	r2, r1
 800c0fa:	f040 8082 	bne.w	800c202 <arm_mat_mult_f32+0x132>
 800c0fe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800c102:	1d01      	adds	r1, r0, #4
 800c104:	0116      	lsls	r6, r2, #4
 800c106:	9108      	str	r1, [sp, #32]
 800c108:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800c10c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800c110:	9101      	str	r1, [sp, #4]
 800c112:	fb06 f108 	mul.w	r1, r6, r8
 800c116:	0095      	lsls	r5, r2, #2
 800c118:	9103      	str	r1, [sp, #12]
 800c11a:	00d2      	lsls	r2, r2, #3
 800c11c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800c120:	f003 0903 	and.w	r9, r3, #3
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	f107 0b10 	add.w	fp, r7, #16
 800c12a:	eb04 0a05 	add.w	sl, r4, r5
 800c12e:	9107      	str	r1, [sp, #28]
 800c130:	9202      	str	r2, [sp, #8]
 800c132:	9306      	str	r3, [sp, #24]
 800c134:	f1ab 0310 	sub.w	r3, fp, #16
 800c138:	9305      	str	r3, [sp, #20]
 800c13a:	9b07      	ldr	r3, [sp, #28]
 800c13c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c140:	eb03 0c0a 	add.w	ip, r3, sl
 800c144:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c20c <arm_mat_mult_f32+0x13c>
 800c148:	f1b8 0f00 	cmp.w	r8, #0
 800c14c:	d053      	beq.n	800c1f6 <arm_mat_mult_f32+0x126>
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	4644      	mov	r4, r8
 800c152:	18c1      	adds	r1, r0, r3
 800c154:	4602      	mov	r2, r0
 800c156:	465b      	mov	r3, fp
 800c158:	ed92 6a00 	vldr	s12, [r2]
 800c15c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c160:	ed53 4a03 	vldr	s9, [r3, #-12]
 800c164:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c168:	ed91 5a00 	vldr	s10, [r1]
 800c16c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800c170:	1957      	adds	r7, r2, r5
 800c172:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c176:	ed97 6a00 	vldr	s12, [r7]
 800c17a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c17e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c182:	194f      	adds	r7, r1, r5
 800c184:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c188:	ee26 7a85 	vmul.f32	s14, s13, s10
 800c18c:	edd7 7a00 	vldr	s15, [r7]
 800c190:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c194:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c198:	3c01      	subs	r4, #1
 800c19a:	4432      	add	r2, r6
 800c19c:	4431      	add	r1, r6
 800c19e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1a2:	f103 0310 	add.w	r3, r3, #16
 800c1a6:	d1d7      	bne.n	800c158 <arm_mat_mult_f32+0x88>
 800c1a8:	9b03      	ldr	r3, [sp, #12]
 800c1aa:	9a01      	ldr	r2, [sp, #4]
 800c1ac:	4418      	add	r0, r3
 800c1ae:	f1b9 0f00 	cmp.w	r9, #0
 800c1b2:	d00b      	beq.n	800c1cc <arm_mat_mult_f32+0xfc>
 800c1b4:	464b      	mov	r3, r9
 800c1b6:	edd0 6a00 	vldr	s13, [r0]
 800c1ba:	ecb2 7a01 	vldmia	r2!, {s14}
 800c1be:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	4428      	add	r0, r5
 800c1c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1ca:	d1f4      	bne.n	800c1b6 <arm_mat_mult_f32+0xe6>
 800c1cc:	ecec 7a01 	vstmia	ip!, {s15}
 800c1d0:	45d4      	cmp	ip, sl
 800c1d2:	4670      	mov	r0, lr
 800c1d4:	f10e 0e04 	add.w	lr, lr, #4
 800c1d8:	d1b4      	bne.n	800c144 <arm_mat_mult_f32+0x74>
 800c1da:	9a01      	ldr	r2, [sp, #4]
 800c1dc:	9b06      	ldr	r3, [sp, #24]
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4419      	add	r1, r3
 800c1e2:	449b      	add	fp, r3
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	9101      	str	r1, [sp, #4]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	44aa      	add	sl, r5
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	d004      	beq.n	800c1fa <arm_mat_mult_f32+0x12a>
 800c1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f2:	6858      	ldr	r0, [r3, #4]
 800c1f4:	e79e      	b.n	800c134 <arm_mat_mult_f32+0x64>
 800c1f6:	9a05      	ldr	r2, [sp, #20]
 800c1f8:	e7d9      	b.n	800c1ae <arm_mat_mult_f32+0xde>
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	b00b      	add	sp, #44	; 0x2c
 800c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c202:	f06f 0002 	mvn.w	r0, #2
 800c206:	b00b      	add	sp, #44	; 0x2c
 800c208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20c:	00000000 	.word	0x00000000

0800c210 <arm_mat_init_f32>:
 800c210:	8001      	strh	r1, [r0, #0]
 800c212:	8042      	strh	r2, [r0, #2]
 800c214:	6043      	str	r3, [r0, #4]
 800c216:	4770      	bx	lr

0800c218 <arm_mat_add_f32>:
 800c218:	b4f0      	push	{r4, r5, r6, r7}
 800c21a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c21e:	6803      	ldr	r3, [r0, #0]
 800c220:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c224:	6856      	ldr	r6, [r2, #4]
 800c226:	42a3      	cmp	r3, r4
 800c228:	d15d      	bne.n	800c2e6 <arm_mat_add_f32+0xce>
 800c22a:	6812      	ldr	r2, [r2, #0]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d15a      	bne.n	800c2e6 <arm_mat_add_f32+0xce>
 800c230:	8803      	ldrh	r3, [r0, #0]
 800c232:	8844      	ldrh	r4, [r0, #2]
 800c234:	fb04 f403 	mul.w	r4, r4, r3
 800c238:	08a5      	lsrs	r5, r4, #2
 800c23a:	d032      	beq.n	800c2a2 <arm_mat_add_f32+0x8a>
 800c23c:	f10c 0110 	add.w	r1, ip, #16
 800c240:	f107 0210 	add.w	r2, r7, #16
 800c244:	f106 0310 	add.w	r3, r6, #16
 800c248:	4628      	mov	r0, r5
 800c24a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c24e:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c252:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c256:	3801      	subs	r0, #1
 800c258:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c25c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c260:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c264:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c268:	f101 0110 	add.w	r1, r1, #16
 800c26c:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c270:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c274:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c27c:	f102 0210 	add.w	r2, r2, #16
 800c280:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c284:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c288:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c28c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c290:	f103 0310 	add.w	r3, r3, #16
 800c294:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c298:	d1d7      	bne.n	800c24a <arm_mat_add_f32+0x32>
 800c29a:	012b      	lsls	r3, r5, #4
 800c29c:	449c      	add	ip, r3
 800c29e:	441f      	add	r7, r3
 800c2a0:	441e      	add	r6, r3
 800c2a2:	f014 0403 	ands.w	r4, r4, #3
 800c2a6:	d01b      	beq.n	800c2e0 <arm_mat_add_f32+0xc8>
 800c2a8:	edd7 7a00 	vldr	s15, [r7]
 800c2ac:	ed9c 7a00 	vldr	s14, [ip]
 800c2b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2b4:	3c01      	subs	r4, #1
 800c2b6:	edc6 7a00 	vstr	s15, [r6]
 800c2ba:	d011      	beq.n	800c2e0 <arm_mat_add_f32+0xc8>
 800c2bc:	eddc 7a01 	vldr	s15, [ip, #4]
 800c2c0:	ed97 7a01 	vldr	s14, [r7, #4]
 800c2c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2c8:	2c01      	cmp	r4, #1
 800c2ca:	edc6 7a01 	vstr	s15, [r6, #4]
 800c2ce:	d007      	beq.n	800c2e0 <arm_mat_add_f32+0xc8>
 800c2d0:	eddc 7a02 	vldr	s15, [ip, #8]
 800c2d4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c2d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2dc:	edc6 7a02 	vstr	s15, [r6, #8]
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	bcf0      	pop	{r4, r5, r6, r7}
 800c2e4:	4770      	bx	lr
 800c2e6:	f06f 0002 	mvn.w	r0, #2
 800c2ea:	e7fa      	b.n	800c2e2 <arm_mat_add_f32+0xca>

0800c2ec <__errno>:
 800c2ec:	4b01      	ldr	r3, [pc, #4]	; (800c2f4 <__errno+0x8>)
 800c2ee:	6818      	ldr	r0, [r3, #0]
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	200000e0 	.word	0x200000e0

0800c2f8 <__libc_init_array>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	4d0d      	ldr	r5, [pc, #52]	; (800c330 <__libc_init_array+0x38>)
 800c2fc:	4c0d      	ldr	r4, [pc, #52]	; (800c334 <__libc_init_array+0x3c>)
 800c2fe:	1b64      	subs	r4, r4, r5
 800c300:	10a4      	asrs	r4, r4, #2
 800c302:	2600      	movs	r6, #0
 800c304:	42a6      	cmp	r6, r4
 800c306:	d109      	bne.n	800c31c <__libc_init_array+0x24>
 800c308:	4d0b      	ldr	r5, [pc, #44]	; (800c338 <__libc_init_array+0x40>)
 800c30a:	4c0c      	ldr	r4, [pc, #48]	; (800c33c <__libc_init_array+0x44>)
 800c30c:	f000 ffea 	bl	800d2e4 <_init>
 800c310:	1b64      	subs	r4, r4, r5
 800c312:	10a4      	asrs	r4, r4, #2
 800c314:	2600      	movs	r6, #0
 800c316:	42a6      	cmp	r6, r4
 800c318:	d105      	bne.n	800c326 <__libc_init_array+0x2e>
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c320:	4798      	blx	r3
 800c322:	3601      	adds	r6, #1
 800c324:	e7ee      	b.n	800c304 <__libc_init_array+0xc>
 800c326:	f855 3b04 	ldr.w	r3, [r5], #4
 800c32a:	4798      	blx	r3
 800c32c:	3601      	adds	r6, #1
 800c32e:	e7f2      	b.n	800c316 <__libc_init_array+0x1e>
 800c330:	0800d358 	.word	0x0800d358
 800c334:	0800d358 	.word	0x0800d358
 800c338:	0800d358 	.word	0x0800d358
 800c33c:	0800d35c 	.word	0x0800d35c

0800c340 <memset>:
 800c340:	4402      	add	r2, r0
 800c342:	4603      	mov	r3, r0
 800c344:	4293      	cmp	r3, r2
 800c346:	d100      	bne.n	800c34a <memset+0xa>
 800c348:	4770      	bx	lr
 800c34a:	f803 1b01 	strb.w	r1, [r3], #1
 800c34e:	e7f9      	b.n	800c344 <memset+0x4>

0800c350 <ceil>:
 800c350:	ec51 0b10 	vmov	r0, r1, d0
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c35c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c360:	2e13      	cmp	r6, #19
 800c362:	ee10 5a10 	vmov	r5, s0
 800c366:	ee10 8a10 	vmov	r8, s0
 800c36a:	460c      	mov	r4, r1
 800c36c:	dc30      	bgt.n	800c3d0 <ceil+0x80>
 800c36e:	2e00      	cmp	r6, #0
 800c370:	da12      	bge.n	800c398 <ceil+0x48>
 800c372:	a335      	add	r3, pc, #212	; (adr r3, 800c448 <ceil+0xf8>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 ff34 	bl	80001e4 <__adddf3>
 800c37c:	2200      	movs	r2, #0
 800c37e:	2300      	movs	r3, #0
 800c380:	f7f4 fb76 	bl	8000a70 <__aeabi_dcmpgt>
 800c384:	b128      	cbz	r0, 800c392 <ceil+0x42>
 800c386:	2c00      	cmp	r4, #0
 800c388:	db55      	blt.n	800c436 <ceil+0xe6>
 800c38a:	432c      	orrs	r4, r5
 800c38c:	d057      	beq.n	800c43e <ceil+0xee>
 800c38e:	4c30      	ldr	r4, [pc, #192]	; (800c450 <ceil+0x100>)
 800c390:	2500      	movs	r5, #0
 800c392:	4621      	mov	r1, r4
 800c394:	4628      	mov	r0, r5
 800c396:	e025      	b.n	800c3e4 <ceil+0x94>
 800c398:	4f2e      	ldr	r7, [pc, #184]	; (800c454 <ceil+0x104>)
 800c39a:	4137      	asrs	r7, r6
 800c39c:	ea01 0307 	and.w	r3, r1, r7
 800c3a0:	4303      	orrs	r3, r0
 800c3a2:	d01f      	beq.n	800c3e4 <ceil+0x94>
 800c3a4:	a328      	add	r3, pc, #160	; (adr r3, 800c448 <ceil+0xf8>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f3 ff1b 	bl	80001e4 <__adddf3>
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f7f4 fb5d 	bl	8000a70 <__aeabi_dcmpgt>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d0eb      	beq.n	800c392 <ceil+0x42>
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	bfc2      	ittt	gt
 800c3be:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800c3c2:	fa43 f606 	asrgt.w	r6, r3, r6
 800c3c6:	19a4      	addgt	r4, r4, r6
 800c3c8:	ea24 0407 	bic.w	r4, r4, r7
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	e7e0      	b.n	800c392 <ceil+0x42>
 800c3d0:	2e33      	cmp	r6, #51	; 0x33
 800c3d2:	dd0b      	ble.n	800c3ec <ceil+0x9c>
 800c3d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c3d8:	d104      	bne.n	800c3e4 <ceil+0x94>
 800c3da:	ee10 2a10 	vmov	r2, s0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	f7f3 ff00 	bl	80001e4 <__adddf3>
 800c3e4:	ec41 0b10 	vmov	d0, r0, r1
 800c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ec:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f4:	fa23 f707 	lsr.w	r7, r3, r7
 800c3f8:	4207      	tst	r7, r0
 800c3fa:	d0f3      	beq.n	800c3e4 <ceil+0x94>
 800c3fc:	a312      	add	r3, pc, #72	; (adr r3, 800c448 <ceil+0xf8>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f7f3 feef 	bl	80001e4 <__adddf3>
 800c406:	2200      	movs	r2, #0
 800c408:	2300      	movs	r3, #0
 800c40a:	f7f4 fb31 	bl	8000a70 <__aeabi_dcmpgt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0bf      	beq.n	800c392 <ceil+0x42>
 800c412:	2c00      	cmp	r4, #0
 800c414:	dd02      	ble.n	800c41c <ceil+0xcc>
 800c416:	2e14      	cmp	r6, #20
 800c418:	d103      	bne.n	800c422 <ceil+0xd2>
 800c41a:	3401      	adds	r4, #1
 800c41c:	ea25 0507 	bic.w	r5, r5, r7
 800c420:	e7b7      	b.n	800c392 <ceil+0x42>
 800c422:	2301      	movs	r3, #1
 800c424:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c428:	fa03 f606 	lsl.w	r6, r3, r6
 800c42c:	4435      	add	r5, r6
 800c42e:	4545      	cmp	r5, r8
 800c430:	bf38      	it	cc
 800c432:	18e4      	addcc	r4, r4, r3
 800c434:	e7f2      	b.n	800c41c <ceil+0xcc>
 800c436:	2500      	movs	r5, #0
 800c438:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c43c:	e7a9      	b.n	800c392 <ceil+0x42>
 800c43e:	4625      	mov	r5, r4
 800c440:	e7a7      	b.n	800c392 <ceil+0x42>
 800c442:	bf00      	nop
 800c444:	f3af 8000 	nop.w
 800c448:	8800759c 	.word	0x8800759c
 800c44c:	7e37e43c 	.word	0x7e37e43c
 800c450:	3ff00000 	.word	0x3ff00000
 800c454:	000fffff 	.word	0x000fffff

0800c458 <pow>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	ed2d 8b02 	vpush	{d8}
 800c45e:	eeb0 8a40 	vmov.f32	s16, s0
 800c462:	eef0 8a60 	vmov.f32	s17, s1
 800c466:	ec55 4b11 	vmov	r4, r5, d1
 800c46a:	f000 f891 	bl	800c590 <__ieee754_pow>
 800c46e:	4622      	mov	r2, r4
 800c470:	462b      	mov	r3, r5
 800c472:	4620      	mov	r0, r4
 800c474:	4629      	mov	r1, r5
 800c476:	ec57 6b10 	vmov	r6, r7, d0
 800c47a:	f7f4 fb03 	bl	8000a84 <__aeabi_dcmpun>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d13b      	bne.n	800c4fa <pow+0xa2>
 800c482:	ec51 0b18 	vmov	r0, r1, d8
 800c486:	2200      	movs	r2, #0
 800c488:	2300      	movs	r3, #0
 800c48a:	f7f4 fac9 	bl	8000a20 <__aeabi_dcmpeq>
 800c48e:	b1b8      	cbz	r0, 800c4c0 <pow+0x68>
 800c490:	2200      	movs	r2, #0
 800c492:	2300      	movs	r3, #0
 800c494:	4620      	mov	r0, r4
 800c496:	4629      	mov	r1, r5
 800c498:	f7f4 fac2 	bl	8000a20 <__aeabi_dcmpeq>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d146      	bne.n	800c52e <pow+0xd6>
 800c4a0:	ec45 4b10 	vmov	d0, r4, r5
 800c4a4:	f000 fe8d 	bl	800d1c2 <finite>
 800c4a8:	b338      	cbz	r0, 800c4fa <pow+0xa2>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f4 fabf 	bl	8000a34 <__aeabi_dcmplt>
 800c4b6:	b300      	cbz	r0, 800c4fa <pow+0xa2>
 800c4b8:	f7ff ff18 	bl	800c2ec <__errno>
 800c4bc:	2322      	movs	r3, #34	; 0x22
 800c4be:	e01b      	b.n	800c4f8 <pow+0xa0>
 800c4c0:	ec47 6b10 	vmov	d0, r6, r7
 800c4c4:	f000 fe7d 	bl	800d1c2 <finite>
 800c4c8:	b9e0      	cbnz	r0, 800c504 <pow+0xac>
 800c4ca:	eeb0 0a48 	vmov.f32	s0, s16
 800c4ce:	eef0 0a68 	vmov.f32	s1, s17
 800c4d2:	f000 fe76 	bl	800d1c2 <finite>
 800c4d6:	b1a8      	cbz	r0, 800c504 <pow+0xac>
 800c4d8:	ec45 4b10 	vmov	d0, r4, r5
 800c4dc:	f000 fe71 	bl	800d1c2 <finite>
 800c4e0:	b180      	cbz	r0, 800c504 <pow+0xac>
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	463b      	mov	r3, r7
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	f7f4 facb 	bl	8000a84 <__aeabi_dcmpun>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0e2      	beq.n	800c4b8 <pow+0x60>
 800c4f2:	f7ff fefb 	bl	800c2ec <__errno>
 800c4f6:	2321      	movs	r3, #33	; 0x21
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	ecbd 8b02 	vpop	{d8}
 800c4fe:	ec47 6b10 	vmov	d0, r6, r7
 800c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c504:	2200      	movs	r2, #0
 800c506:	2300      	movs	r3, #0
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f4 fa88 	bl	8000a20 <__aeabi_dcmpeq>
 800c510:	2800      	cmp	r0, #0
 800c512:	d0f2      	beq.n	800c4fa <pow+0xa2>
 800c514:	eeb0 0a48 	vmov.f32	s0, s16
 800c518:	eef0 0a68 	vmov.f32	s1, s17
 800c51c:	f000 fe51 	bl	800d1c2 <finite>
 800c520:	2800      	cmp	r0, #0
 800c522:	d0ea      	beq.n	800c4fa <pow+0xa2>
 800c524:	ec45 4b10 	vmov	d0, r4, r5
 800c528:	f000 fe4b 	bl	800d1c2 <finite>
 800c52c:	e7c3      	b.n	800c4b6 <pow+0x5e>
 800c52e:	4f01      	ldr	r7, [pc, #4]	; (800c534 <pow+0xdc>)
 800c530:	2600      	movs	r6, #0
 800c532:	e7e2      	b.n	800c4fa <pow+0xa2>
 800c534:	3ff00000 	.word	0x3ff00000

0800c538 <sqrt>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	ed2d 8b02 	vpush	{d8}
 800c53e:	ec55 4b10 	vmov	r4, r5, d0
 800c542:	f000 fd53 	bl	800cfec <__ieee754_sqrt>
 800c546:	4622      	mov	r2, r4
 800c548:	462b      	mov	r3, r5
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	eeb0 8a40 	vmov.f32	s16, s0
 800c552:	eef0 8a60 	vmov.f32	s17, s1
 800c556:	f7f4 fa95 	bl	8000a84 <__aeabi_dcmpun>
 800c55a:	b990      	cbnz	r0, 800c582 <sqrt+0x4a>
 800c55c:	2200      	movs	r2, #0
 800c55e:	2300      	movs	r3, #0
 800c560:	4620      	mov	r0, r4
 800c562:	4629      	mov	r1, r5
 800c564:	f7f4 fa66 	bl	8000a34 <__aeabi_dcmplt>
 800c568:	b158      	cbz	r0, 800c582 <sqrt+0x4a>
 800c56a:	f7ff febf 	bl	800c2ec <__errno>
 800c56e:	2321      	movs	r3, #33	; 0x21
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	2200      	movs	r2, #0
 800c574:	2300      	movs	r3, #0
 800c576:	4610      	mov	r0, r2
 800c578:	4619      	mov	r1, r3
 800c57a:	f7f4 f913 	bl	80007a4 <__aeabi_ddiv>
 800c57e:	ec41 0b18 	vmov	d8, r0, r1
 800c582:	eeb0 0a48 	vmov.f32	s0, s16
 800c586:	eef0 0a68 	vmov.f32	s1, s17
 800c58a:	ecbd 8b02 	vpop	{d8}
 800c58e:	bd38      	pop	{r3, r4, r5, pc}

0800c590 <__ieee754_pow>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	ed2d 8b06 	vpush	{d8-d10}
 800c598:	b089      	sub	sp, #36	; 0x24
 800c59a:	ed8d 1b00 	vstr	d1, [sp]
 800c59e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5a6:	ea58 0102 	orrs.w	r1, r8, r2
 800c5aa:	ec57 6b10 	vmov	r6, r7, d0
 800c5ae:	d115      	bne.n	800c5dc <__ieee754_pow+0x4c>
 800c5b0:	19b3      	adds	r3, r6, r6
 800c5b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5b6:	4152      	adcs	r2, r2
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	4b89      	ldr	r3, [pc, #548]	; (800c7e0 <__ieee754_pow+0x250>)
 800c5bc:	4193      	sbcs	r3, r2
 800c5be:	f080 84d2 	bcs.w	800cf66 <__ieee754_pow+0x9d6>
 800c5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f3 fe0b 	bl	80001e4 <__adddf3>
 800c5ce:	ec41 0b10 	vmov	d0, r0, r1
 800c5d2:	b009      	add	sp, #36	; 0x24
 800c5d4:	ecbd 8b06 	vpop	{d8-d10}
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	4b81      	ldr	r3, [pc, #516]	; (800c7e4 <__ieee754_pow+0x254>)
 800c5de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c5e2:	429c      	cmp	r4, r3
 800c5e4:	ee10 aa10 	vmov	sl, s0
 800c5e8:	463d      	mov	r5, r7
 800c5ea:	dc06      	bgt.n	800c5fa <__ieee754_pow+0x6a>
 800c5ec:	d101      	bne.n	800c5f2 <__ieee754_pow+0x62>
 800c5ee:	2e00      	cmp	r6, #0
 800c5f0:	d1e7      	bne.n	800c5c2 <__ieee754_pow+0x32>
 800c5f2:	4598      	cmp	r8, r3
 800c5f4:	dc01      	bgt.n	800c5fa <__ieee754_pow+0x6a>
 800c5f6:	d10f      	bne.n	800c618 <__ieee754_pow+0x88>
 800c5f8:	b172      	cbz	r2, 800c618 <__ieee754_pow+0x88>
 800c5fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c5fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c602:	ea55 050a 	orrs.w	r5, r5, sl
 800c606:	d1dc      	bne.n	800c5c2 <__ieee754_pow+0x32>
 800c608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c60c:	18db      	adds	r3, r3, r3
 800c60e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c612:	4152      	adcs	r2, r2
 800c614:	429d      	cmp	r5, r3
 800c616:	e7d0      	b.n	800c5ba <__ieee754_pow+0x2a>
 800c618:	2d00      	cmp	r5, #0
 800c61a:	da3b      	bge.n	800c694 <__ieee754_pow+0x104>
 800c61c:	4b72      	ldr	r3, [pc, #456]	; (800c7e8 <__ieee754_pow+0x258>)
 800c61e:	4598      	cmp	r8, r3
 800c620:	dc51      	bgt.n	800c6c6 <__ieee754_pow+0x136>
 800c622:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c626:	4598      	cmp	r8, r3
 800c628:	f340 84ac 	ble.w	800cf84 <__ieee754_pow+0x9f4>
 800c62c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c634:	2b14      	cmp	r3, #20
 800c636:	dd0f      	ble.n	800c658 <__ieee754_pow+0xc8>
 800c638:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c63c:	fa22 f103 	lsr.w	r1, r2, r3
 800c640:	fa01 f303 	lsl.w	r3, r1, r3
 800c644:	4293      	cmp	r3, r2
 800c646:	f040 849d 	bne.w	800cf84 <__ieee754_pow+0x9f4>
 800c64a:	f001 0101 	and.w	r1, r1, #1
 800c64e:	f1c1 0302 	rsb	r3, r1, #2
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	b182      	cbz	r2, 800c678 <__ieee754_pow+0xe8>
 800c656:	e05f      	b.n	800c718 <__ieee754_pow+0x188>
 800c658:	2a00      	cmp	r2, #0
 800c65a:	d15b      	bne.n	800c714 <__ieee754_pow+0x184>
 800c65c:	f1c3 0314 	rsb	r3, r3, #20
 800c660:	fa48 f103 	asr.w	r1, r8, r3
 800c664:	fa01 f303 	lsl.w	r3, r1, r3
 800c668:	4543      	cmp	r3, r8
 800c66a:	f040 8488 	bne.w	800cf7e <__ieee754_pow+0x9ee>
 800c66e:	f001 0101 	and.w	r1, r1, #1
 800c672:	f1c1 0302 	rsb	r3, r1, #2
 800c676:	9304      	str	r3, [sp, #16]
 800c678:	4b5c      	ldr	r3, [pc, #368]	; (800c7ec <__ieee754_pow+0x25c>)
 800c67a:	4598      	cmp	r8, r3
 800c67c:	d132      	bne.n	800c6e4 <__ieee754_pow+0x154>
 800c67e:	f1b9 0f00 	cmp.w	r9, #0
 800c682:	f280 8478 	bge.w	800cf76 <__ieee754_pow+0x9e6>
 800c686:	4959      	ldr	r1, [pc, #356]	; (800c7ec <__ieee754_pow+0x25c>)
 800c688:	4632      	mov	r2, r6
 800c68a:	463b      	mov	r3, r7
 800c68c:	2000      	movs	r0, #0
 800c68e:	f7f4 f889 	bl	80007a4 <__aeabi_ddiv>
 800c692:	e79c      	b.n	800c5ce <__ieee754_pow+0x3e>
 800c694:	2300      	movs	r3, #0
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	2a00      	cmp	r2, #0
 800c69a:	d13d      	bne.n	800c718 <__ieee754_pow+0x188>
 800c69c:	4b51      	ldr	r3, [pc, #324]	; (800c7e4 <__ieee754_pow+0x254>)
 800c69e:	4598      	cmp	r8, r3
 800c6a0:	d1ea      	bne.n	800c678 <__ieee754_pow+0xe8>
 800c6a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6aa:	ea53 030a 	orrs.w	r3, r3, sl
 800c6ae:	f000 845a 	beq.w	800cf66 <__ieee754_pow+0x9d6>
 800c6b2:	4b4f      	ldr	r3, [pc, #316]	; (800c7f0 <__ieee754_pow+0x260>)
 800c6b4:	429c      	cmp	r4, r3
 800c6b6:	dd08      	ble.n	800c6ca <__ieee754_pow+0x13a>
 800c6b8:	f1b9 0f00 	cmp.w	r9, #0
 800c6bc:	f2c0 8457 	blt.w	800cf6e <__ieee754_pow+0x9de>
 800c6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6c4:	e783      	b.n	800c5ce <__ieee754_pow+0x3e>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e7e5      	b.n	800c696 <__ieee754_pow+0x106>
 800c6ca:	f1b9 0f00 	cmp.w	r9, #0
 800c6ce:	f04f 0000 	mov.w	r0, #0
 800c6d2:	f04f 0100 	mov.w	r1, #0
 800c6d6:	f6bf af7a 	bge.w	800c5ce <__ieee754_pow+0x3e>
 800c6da:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c6e2:	e774      	b.n	800c5ce <__ieee754_pow+0x3e>
 800c6e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c6e8:	d106      	bne.n	800c6f8 <__ieee754_pow+0x168>
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	463b      	mov	r3, r7
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	f7f3 ff2d 	bl	8000550 <__aeabi_dmul>
 800c6f6:	e76a      	b.n	800c5ce <__ieee754_pow+0x3e>
 800c6f8:	4b3e      	ldr	r3, [pc, #248]	; (800c7f4 <__ieee754_pow+0x264>)
 800c6fa:	4599      	cmp	r9, r3
 800c6fc:	d10c      	bne.n	800c718 <__ieee754_pow+0x188>
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	db0a      	blt.n	800c718 <__ieee754_pow+0x188>
 800c702:	ec47 6b10 	vmov	d0, r6, r7
 800c706:	b009      	add	sp, #36	; 0x24
 800c708:	ecbd 8b06 	vpop	{d8-d10}
 800c70c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c710:	f000 bc6c 	b.w	800cfec <__ieee754_sqrt>
 800c714:	2300      	movs	r3, #0
 800c716:	9304      	str	r3, [sp, #16]
 800c718:	ec47 6b10 	vmov	d0, r6, r7
 800c71c:	f000 fd48 	bl	800d1b0 <fabs>
 800c720:	ec51 0b10 	vmov	r0, r1, d0
 800c724:	f1ba 0f00 	cmp.w	sl, #0
 800c728:	d129      	bne.n	800c77e <__ieee754_pow+0x1ee>
 800c72a:	b124      	cbz	r4, 800c736 <__ieee754_pow+0x1a6>
 800c72c:	4b2f      	ldr	r3, [pc, #188]	; (800c7ec <__ieee754_pow+0x25c>)
 800c72e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c732:	429a      	cmp	r2, r3
 800c734:	d123      	bne.n	800c77e <__ieee754_pow+0x1ee>
 800c736:	f1b9 0f00 	cmp.w	r9, #0
 800c73a:	da05      	bge.n	800c748 <__ieee754_pow+0x1b8>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	2000      	movs	r0, #0
 800c742:	492a      	ldr	r1, [pc, #168]	; (800c7ec <__ieee754_pow+0x25c>)
 800c744:	f7f4 f82e 	bl	80007a4 <__aeabi_ddiv>
 800c748:	2d00      	cmp	r5, #0
 800c74a:	f6bf af40 	bge.w	800c5ce <__ieee754_pow+0x3e>
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c754:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c758:	4323      	orrs	r3, r4
 800c75a:	d108      	bne.n	800c76e <__ieee754_pow+0x1de>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4610      	mov	r0, r2
 800c762:	4619      	mov	r1, r3
 800c764:	f7f3 fd3c 	bl	80001e0 <__aeabi_dsub>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	e78f      	b.n	800c68e <__ieee754_pow+0xfe>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	2b01      	cmp	r3, #1
 800c772:	f47f af2c 	bne.w	800c5ce <__ieee754_pow+0x3e>
 800c776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c77a:	4619      	mov	r1, r3
 800c77c:	e727      	b.n	800c5ce <__ieee754_pow+0x3e>
 800c77e:	0feb      	lsrs	r3, r5, #31
 800c780:	3b01      	subs	r3, #1
 800c782:	9306      	str	r3, [sp, #24]
 800c784:	9a06      	ldr	r2, [sp, #24]
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	4313      	orrs	r3, r2
 800c78a:	d102      	bne.n	800c792 <__ieee754_pow+0x202>
 800c78c:	4632      	mov	r2, r6
 800c78e:	463b      	mov	r3, r7
 800c790:	e7e6      	b.n	800c760 <__ieee754_pow+0x1d0>
 800c792:	4b19      	ldr	r3, [pc, #100]	; (800c7f8 <__ieee754_pow+0x268>)
 800c794:	4598      	cmp	r8, r3
 800c796:	f340 80fb 	ble.w	800c990 <__ieee754_pow+0x400>
 800c79a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c79e:	4598      	cmp	r8, r3
 800c7a0:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <__ieee754_pow+0x260>)
 800c7a2:	dd0c      	ble.n	800c7be <__ieee754_pow+0x22e>
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	dc0f      	bgt.n	800c7c8 <__ieee754_pow+0x238>
 800c7a8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ac:	da0f      	bge.n	800c7ce <__ieee754_pow+0x23e>
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	b009      	add	sp, #36	; 0x24
 800c7b2:	ecbd 8b06 	vpop	{d8-d10}
 800c7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ba:	f000 bcf0 	b.w	800d19e <__math_oflow>
 800c7be:	429c      	cmp	r4, r3
 800c7c0:	dbf2      	blt.n	800c7a8 <__ieee754_pow+0x218>
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <__ieee754_pow+0x25c>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	dd19      	ble.n	800c7fc <__ieee754_pow+0x26c>
 800c7c8:	f1b9 0f00 	cmp.w	r9, #0
 800c7cc:	dcef      	bgt.n	800c7ae <__ieee754_pow+0x21e>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	b009      	add	sp, #36	; 0x24
 800c7d2:	ecbd 8b06 	vpop	{d8-d10}
 800c7d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7da:	f000 bcd7 	b.w	800d18c <__math_uflow>
 800c7de:	bf00      	nop
 800c7e0:	fff00000 	.word	0xfff00000
 800c7e4:	7ff00000 	.word	0x7ff00000
 800c7e8:	433fffff 	.word	0x433fffff
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	3fefffff 	.word	0x3fefffff
 800c7f4:	3fe00000 	.word	0x3fe00000
 800c7f8:	41e00000 	.word	0x41e00000
 800c7fc:	4b60      	ldr	r3, [pc, #384]	; (800c980 <__ieee754_pow+0x3f0>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	f7f3 fcee 	bl	80001e0 <__aeabi_dsub>
 800c804:	a354      	add	r3, pc, #336	; (adr r3, 800c958 <__ieee754_pow+0x3c8>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	4604      	mov	r4, r0
 800c80c:	460d      	mov	r5, r1
 800c80e:	f7f3 fe9f 	bl	8000550 <__aeabi_dmul>
 800c812:	a353      	add	r3, pc, #332	; (adr r3, 800c960 <__ieee754_pow+0x3d0>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	4606      	mov	r6, r0
 800c81a:	460f      	mov	r7, r1
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f3 fe96 	bl	8000550 <__aeabi_dmul>
 800c824:	4b57      	ldr	r3, [pc, #348]	; (800c984 <__ieee754_pow+0x3f4>)
 800c826:	4682      	mov	sl, r0
 800c828:	468b      	mov	fp, r1
 800c82a:	2200      	movs	r2, #0
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fe8e 	bl	8000550 <__aeabi_dmul>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	a14b      	add	r1, pc, #300	; (adr r1, 800c968 <__ieee754_pow+0x3d8>)
 800c83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c83e:	f7f3 fccf 	bl	80001e0 <__aeabi_dsub>
 800c842:	4622      	mov	r2, r4
 800c844:	462b      	mov	r3, r5
 800c846:	f7f3 fe83 	bl	8000550 <__aeabi_dmul>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	2000      	movs	r0, #0
 800c850:	494d      	ldr	r1, [pc, #308]	; (800c988 <__ieee754_pow+0x3f8>)
 800c852:	f7f3 fcc5 	bl	80001e0 <__aeabi_dsub>
 800c856:	4622      	mov	r2, r4
 800c858:	4680      	mov	r8, r0
 800c85a:	4689      	mov	r9, r1
 800c85c:	462b      	mov	r3, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f3 fe75 	bl	8000550 <__aeabi_dmul>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4640      	mov	r0, r8
 800c86c:	4649      	mov	r1, r9
 800c86e:	f7f3 fe6f 	bl	8000550 <__aeabi_dmul>
 800c872:	a33f      	add	r3, pc, #252	; (adr r3, 800c970 <__ieee754_pow+0x3e0>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fe6a 	bl	8000550 <__aeabi_dmul>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4650      	mov	r0, sl
 800c882:	4659      	mov	r1, fp
 800c884:	f7f3 fcac 	bl	80001e0 <__aeabi_dsub>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4680      	mov	r8, r0
 800c88e:	4689      	mov	r9, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fca6 	bl	80001e4 <__adddf3>
 800c898:	2000      	movs	r0, #0
 800c89a:	4632      	mov	r2, r6
 800c89c:	463b      	mov	r3, r7
 800c89e:	4604      	mov	r4, r0
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	f7f3 fc9d 	bl	80001e0 <__aeabi_dsub>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 fc97 	bl	80001e0 <__aeabi_dsub>
 800c8b2:	9b04      	ldr	r3, [sp, #16]
 800c8b4:	9a06      	ldr	r2, [sp, #24]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	4682      	mov	sl, r0
 800c8bc:	468b      	mov	fp, r1
 800c8be:	f040 81e7 	bne.w	800cc90 <__ieee754_pow+0x700>
 800c8c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c978 <__ieee754_pow+0x3e8>
 800c8c6:	eeb0 8a47 	vmov.f32	s16, s14
 800c8ca:	eef0 8a67 	vmov.f32	s17, s15
 800c8ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8d2:	2600      	movs	r6, #0
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8dc:	f7f3 fc80 	bl	80001e0 <__aeabi_dsub>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f7f3 fe34 	bl	8000550 <__aeabi_dmul>
 800c8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	4650      	mov	r0, sl
 800c8f2:	4659      	mov	r1, fp
 800c8f4:	f7f3 fe2c 	bl	8000550 <__aeabi_dmul>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f3 fc70 	bl	80001e4 <__adddf3>
 800c904:	4632      	mov	r2, r6
 800c906:	463b      	mov	r3, r7
 800c908:	4680      	mov	r8, r0
 800c90a:	4689      	mov	r9, r1
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fe1e 	bl	8000550 <__aeabi_dmul>
 800c914:	460b      	mov	r3, r1
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	4602      	mov	r2, r0
 800c91c:	4649      	mov	r1, r9
 800c91e:	4640      	mov	r0, r8
 800c920:	f7f3 fc60 	bl	80001e4 <__adddf3>
 800c924:	4b19      	ldr	r3, [pc, #100]	; (800c98c <__ieee754_pow+0x3fc>)
 800c926:	4299      	cmp	r1, r3
 800c928:	ec45 4b19 	vmov	d9, r4, r5
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	468b      	mov	fp, r1
 800c932:	f340 82f1 	ble.w	800cf18 <__ieee754_pow+0x988>
 800c936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c93a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c93e:	4303      	orrs	r3, r0
 800c940:	f000 81e4 	beq.w	800cd0c <__ieee754_pow+0x77c>
 800c944:	ec51 0b18 	vmov	r0, r1, d8
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	f7f4 f872 	bl	8000a34 <__aeabi_dcmplt>
 800c950:	3800      	subs	r0, #0
 800c952:	bf18      	it	ne
 800c954:	2001      	movne	r0, #1
 800c956:	e72b      	b.n	800c7b0 <__ieee754_pow+0x220>
 800c958:	60000000 	.word	0x60000000
 800c95c:	3ff71547 	.word	0x3ff71547
 800c960:	f85ddf44 	.word	0xf85ddf44
 800c964:	3e54ae0b 	.word	0x3e54ae0b
 800c968:	55555555 	.word	0x55555555
 800c96c:	3fd55555 	.word	0x3fd55555
 800c970:	652b82fe 	.word	0x652b82fe
 800c974:	3ff71547 	.word	0x3ff71547
 800c978:	00000000 	.word	0x00000000
 800c97c:	bff00000 	.word	0xbff00000
 800c980:	3ff00000 	.word	0x3ff00000
 800c984:	3fd00000 	.word	0x3fd00000
 800c988:	3fe00000 	.word	0x3fe00000
 800c98c:	408fffff 	.word	0x408fffff
 800c990:	4bd5      	ldr	r3, [pc, #852]	; (800cce8 <__ieee754_pow+0x758>)
 800c992:	402b      	ands	r3, r5
 800c994:	2200      	movs	r2, #0
 800c996:	b92b      	cbnz	r3, 800c9a4 <__ieee754_pow+0x414>
 800c998:	4bd4      	ldr	r3, [pc, #848]	; (800ccec <__ieee754_pow+0x75c>)
 800c99a:	f7f3 fdd9 	bl	8000550 <__aeabi_dmul>
 800c99e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	1523      	asrs	r3, r4, #20
 800c9a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9aa:	4413      	add	r3, r2
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	4bd0      	ldr	r3, [pc, #832]	; (800ccf0 <__ieee754_pow+0x760>)
 800c9b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9be:	dd08      	ble.n	800c9d2 <__ieee754_pow+0x442>
 800c9c0:	4bcc      	ldr	r3, [pc, #816]	; (800ccf4 <__ieee754_pow+0x764>)
 800c9c2:	429c      	cmp	r4, r3
 800c9c4:	f340 8162 	ble.w	800cc8c <__ieee754_pow+0x6fc>
 800c9c8:	9b05      	ldr	r3, [sp, #20]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9d2:	2400      	movs	r4, #0
 800c9d4:	00e3      	lsls	r3, r4, #3
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	4bc7      	ldr	r3, [pc, #796]	; (800ccf8 <__ieee754_pow+0x768>)
 800c9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9de:	ed93 7b00 	vldr	d7, [r3]
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	ec53 2b17 	vmov	r2, r3, d7
 800c9e8:	eeb0 9a47 	vmov.f32	s18, s14
 800c9ec:	eef0 9a67 	vmov.f32	s19, s15
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	f7f3 fbf5 	bl	80001e0 <__aeabi_dsub>
 800c9f6:	4652      	mov	r2, sl
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	ec51 0b19 	vmov	r0, r1, d9
 800ca02:	f7f3 fbef 	bl	80001e4 <__adddf3>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	49bb      	ldr	r1, [pc, #748]	; (800ccfc <__ieee754_pow+0x76c>)
 800ca0e:	f7f3 fec9 	bl	80007a4 <__aeabi_ddiv>
 800ca12:	ec41 0b1a 	vmov	d10, r0, r1
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	f7f3 fd97 	bl	8000550 <__aeabi_dmul>
 800ca22:	2300      	movs	r3, #0
 800ca24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca28:	9302      	str	r3, [sp, #8]
 800ca2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca2e:	46ab      	mov	fp, r5
 800ca30:	106d      	asrs	r5, r5, #1
 800ca32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca3a:	ec41 0b18 	vmov	d8, r0, r1
 800ca3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca42:	2200      	movs	r2, #0
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	4614      	mov	r4, r2
 800ca4a:	461d      	mov	r5, r3
 800ca4c:	f7f3 fd80 	bl	8000550 <__aeabi_dmul>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	4630      	mov	r0, r6
 800ca56:	4639      	mov	r1, r7
 800ca58:	f7f3 fbc2 	bl	80001e0 <__aeabi_dsub>
 800ca5c:	ec53 2b19 	vmov	r2, r3, d9
 800ca60:	4606      	mov	r6, r0
 800ca62:	460f      	mov	r7, r1
 800ca64:	4620      	mov	r0, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f3 fbba 	bl	80001e0 <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4650      	mov	r0, sl
 800ca72:	4659      	mov	r1, fp
 800ca74:	f7f3 fbb4 	bl	80001e0 <__aeabi_dsub>
 800ca78:	4642      	mov	r2, r8
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	f7f3 fd68 	bl	8000550 <__aeabi_dmul>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4630      	mov	r0, r6
 800ca86:	4639      	mov	r1, r7
 800ca88:	f7f3 fbaa 	bl	80001e0 <__aeabi_dsub>
 800ca8c:	ec53 2b1a 	vmov	r2, r3, d10
 800ca90:	f7f3 fd5e 	bl	8000550 <__aeabi_dmul>
 800ca94:	ec53 2b18 	vmov	r2, r3, d8
 800ca98:	ec41 0b19 	vmov	d9, r0, r1
 800ca9c:	ec51 0b18 	vmov	r0, r1, d8
 800caa0:	f7f3 fd56 	bl	8000550 <__aeabi_dmul>
 800caa4:	a37c      	add	r3, pc, #496	; (adr r3, 800cc98 <__ieee754_pow+0x708>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	f7f3 fd4f 	bl	8000550 <__aeabi_dmul>
 800cab2:	a37b      	add	r3, pc, #492	; (adr r3, 800cca0 <__ieee754_pow+0x710>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	f7f3 fb94 	bl	80001e4 <__adddf3>
 800cabc:	4622      	mov	r2, r4
 800cabe:	462b      	mov	r3, r5
 800cac0:	f7f3 fd46 	bl	8000550 <__aeabi_dmul>
 800cac4:	a378      	add	r3, pc, #480	; (adr r3, 800cca8 <__ieee754_pow+0x718>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f7f3 fb8b 	bl	80001e4 <__adddf3>
 800cace:	4622      	mov	r2, r4
 800cad0:	462b      	mov	r3, r5
 800cad2:	f7f3 fd3d 	bl	8000550 <__aeabi_dmul>
 800cad6:	a376      	add	r3, pc, #472	; (adr r3, 800ccb0 <__ieee754_pow+0x720>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	f7f3 fb82 	bl	80001e4 <__adddf3>
 800cae0:	4622      	mov	r2, r4
 800cae2:	462b      	mov	r3, r5
 800cae4:	f7f3 fd34 	bl	8000550 <__aeabi_dmul>
 800cae8:	a373      	add	r3, pc, #460	; (adr r3, 800ccb8 <__ieee754_pow+0x728>)
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	f7f3 fb79 	bl	80001e4 <__adddf3>
 800caf2:	4622      	mov	r2, r4
 800caf4:	462b      	mov	r3, r5
 800caf6:	f7f3 fd2b 	bl	8000550 <__aeabi_dmul>
 800cafa:	a371      	add	r3, pc, #452	; (adr r3, 800ccc0 <__ieee754_pow+0x730>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fb70 	bl	80001e4 <__adddf3>
 800cb04:	4622      	mov	r2, r4
 800cb06:	4606      	mov	r6, r0
 800cb08:	460f      	mov	r7, r1
 800cb0a:	462b      	mov	r3, r5
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7f3 fd1e 	bl	8000550 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4630      	mov	r0, r6
 800cb1a:	4639      	mov	r1, r7
 800cb1c:	f7f3 fd18 	bl	8000550 <__aeabi_dmul>
 800cb20:	4642      	mov	r2, r8
 800cb22:	4604      	mov	r4, r0
 800cb24:	460d      	mov	r5, r1
 800cb26:	464b      	mov	r3, r9
 800cb28:	ec51 0b18 	vmov	r0, r1, d8
 800cb2c:	f7f3 fb5a 	bl	80001e4 <__adddf3>
 800cb30:	ec53 2b19 	vmov	r2, r3, d9
 800cb34:	f7f3 fd0c 	bl	8000550 <__aeabi_dmul>
 800cb38:	4622      	mov	r2, r4
 800cb3a:	462b      	mov	r3, r5
 800cb3c:	f7f3 fb52 	bl	80001e4 <__adddf3>
 800cb40:	4642      	mov	r2, r8
 800cb42:	4682      	mov	sl, r0
 800cb44:	468b      	mov	fp, r1
 800cb46:	464b      	mov	r3, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	f7f3 fd00 	bl	8000550 <__aeabi_dmul>
 800cb50:	4b6b      	ldr	r3, [pc, #428]	; (800cd00 <__ieee754_pow+0x770>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	4606      	mov	r6, r0
 800cb56:	460f      	mov	r7, r1
 800cb58:	f7f3 fb44 	bl	80001e4 <__adddf3>
 800cb5c:	4652      	mov	r2, sl
 800cb5e:	465b      	mov	r3, fp
 800cb60:	f7f3 fb40 	bl	80001e4 <__adddf3>
 800cb64:	2000      	movs	r0, #0
 800cb66:	4604      	mov	r4, r0
 800cb68:	460d      	mov	r5, r1
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	4640      	mov	r0, r8
 800cb70:	4649      	mov	r1, r9
 800cb72:	f7f3 fced 	bl	8000550 <__aeabi_dmul>
 800cb76:	4b62      	ldr	r3, [pc, #392]	; (800cd00 <__ieee754_pow+0x770>)
 800cb78:	4680      	mov	r8, r0
 800cb7a:	4689      	mov	r9, r1
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4620      	mov	r0, r4
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7f3 fb2d 	bl	80001e0 <__aeabi_dsub>
 800cb86:	4632      	mov	r2, r6
 800cb88:	463b      	mov	r3, r7
 800cb8a:	f7f3 fb29 	bl	80001e0 <__aeabi_dsub>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	460b      	mov	r3, r1
 800cb92:	4650      	mov	r0, sl
 800cb94:	4659      	mov	r1, fp
 800cb96:	f7f3 fb23 	bl	80001e0 <__aeabi_dsub>
 800cb9a:	ec53 2b18 	vmov	r2, r3, d8
 800cb9e:	f7f3 fcd7 	bl	8000550 <__aeabi_dmul>
 800cba2:	4622      	mov	r2, r4
 800cba4:	4606      	mov	r6, r0
 800cba6:	460f      	mov	r7, r1
 800cba8:	462b      	mov	r3, r5
 800cbaa:	ec51 0b19 	vmov	r0, r1, d9
 800cbae:	f7f3 fccf 	bl	8000550 <__aeabi_dmul>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fb13 	bl	80001e4 <__adddf3>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f7f3 fb0b 	bl	80001e4 <__adddf3>
 800cbce:	a33e      	add	r3, pc, #248	; (adr r3, 800ccc8 <__ieee754_pow+0x738>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	460d      	mov	r5, r1
 800cbda:	f7f3 fcb9 	bl	8000550 <__aeabi_dmul>
 800cbde:	4642      	mov	r2, r8
 800cbe0:	ec41 0b18 	vmov	d8, r0, r1
 800cbe4:	464b      	mov	r3, r9
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 faf9 	bl	80001e0 <__aeabi_dsub>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 faf3 	bl	80001e0 <__aeabi_dsub>
 800cbfa:	a335      	add	r3, pc, #212	; (adr r3, 800ccd0 <__ieee754_pow+0x740>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	f7f3 fca6 	bl	8000550 <__aeabi_dmul>
 800cc04:	a334      	add	r3, pc, #208	; (adr r3, 800ccd8 <__ieee754_pow+0x748>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	460f      	mov	r7, r1
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7f3 fc9d 	bl	8000550 <__aeabi_dmul>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	f7f3 fae1 	bl	80001e4 <__adddf3>
 800cc22:	9a07      	ldr	r2, [sp, #28]
 800cc24:	4b37      	ldr	r3, [pc, #220]	; (800cd04 <__ieee754_pow+0x774>)
 800cc26:	4413      	add	r3, r2
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f7f3 fada 	bl	80001e4 <__adddf3>
 800cc30:	4682      	mov	sl, r0
 800cc32:	9805      	ldr	r0, [sp, #20]
 800cc34:	468b      	mov	fp, r1
 800cc36:	f7f3 fc21 	bl	800047c <__aeabi_i2d>
 800cc3a:	9a07      	ldr	r2, [sp, #28]
 800cc3c:	4b32      	ldr	r3, [pc, #200]	; (800cd08 <__ieee754_pow+0x778>)
 800cc3e:	4413      	add	r3, r2
 800cc40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc44:	4606      	mov	r6, r0
 800cc46:	460f      	mov	r7, r1
 800cc48:	4652      	mov	r2, sl
 800cc4a:	465b      	mov	r3, fp
 800cc4c:	ec51 0b18 	vmov	r0, r1, d8
 800cc50:	f7f3 fac8 	bl	80001e4 <__adddf3>
 800cc54:	4642      	mov	r2, r8
 800cc56:	464b      	mov	r3, r9
 800cc58:	f7f3 fac4 	bl	80001e4 <__adddf3>
 800cc5c:	4632      	mov	r2, r6
 800cc5e:	463b      	mov	r3, r7
 800cc60:	f7f3 fac0 	bl	80001e4 <__adddf3>
 800cc64:	2000      	movs	r0, #0
 800cc66:	4632      	mov	r2, r6
 800cc68:	463b      	mov	r3, r7
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	f7f3 fab7 	bl	80001e0 <__aeabi_dsub>
 800cc72:	4642      	mov	r2, r8
 800cc74:	464b      	mov	r3, r9
 800cc76:	f7f3 fab3 	bl	80001e0 <__aeabi_dsub>
 800cc7a:	ec53 2b18 	vmov	r2, r3, d8
 800cc7e:	f7f3 faaf 	bl	80001e0 <__aeabi_dsub>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4650      	mov	r0, sl
 800cc88:	4659      	mov	r1, fp
 800cc8a:	e610      	b.n	800c8ae <__ieee754_pow+0x31e>
 800cc8c:	2401      	movs	r4, #1
 800cc8e:	e6a1      	b.n	800c9d4 <__ieee754_pow+0x444>
 800cc90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cce0 <__ieee754_pow+0x750>
 800cc94:	e617      	b.n	800c8c6 <__ieee754_pow+0x336>
 800cc96:	bf00      	nop
 800cc98:	4a454eef 	.word	0x4a454eef
 800cc9c:	3fca7e28 	.word	0x3fca7e28
 800cca0:	93c9db65 	.word	0x93c9db65
 800cca4:	3fcd864a 	.word	0x3fcd864a
 800cca8:	a91d4101 	.word	0xa91d4101
 800ccac:	3fd17460 	.word	0x3fd17460
 800ccb0:	518f264d 	.word	0x518f264d
 800ccb4:	3fd55555 	.word	0x3fd55555
 800ccb8:	db6fabff 	.word	0xdb6fabff
 800ccbc:	3fdb6db6 	.word	0x3fdb6db6
 800ccc0:	33333303 	.word	0x33333303
 800ccc4:	3fe33333 	.word	0x3fe33333
 800ccc8:	e0000000 	.word	0xe0000000
 800cccc:	3feec709 	.word	0x3feec709
 800ccd0:	dc3a03fd 	.word	0xdc3a03fd
 800ccd4:	3feec709 	.word	0x3feec709
 800ccd8:	145b01f5 	.word	0x145b01f5
 800ccdc:	be3e2fe0 	.word	0xbe3e2fe0
 800cce0:	00000000 	.word	0x00000000
 800cce4:	3ff00000 	.word	0x3ff00000
 800cce8:	7ff00000 	.word	0x7ff00000
 800ccec:	43400000 	.word	0x43400000
 800ccf0:	0003988e 	.word	0x0003988e
 800ccf4:	000bb679 	.word	0x000bb679
 800ccf8:	0800d320 	.word	0x0800d320
 800ccfc:	3ff00000 	.word	0x3ff00000
 800cd00:	40080000 	.word	0x40080000
 800cd04:	0800d340 	.word	0x0800d340
 800cd08:	0800d330 	.word	0x0800d330
 800cd0c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cfe4 <__ieee754_pow+0xa54>)
 800cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd12:	4640      	mov	r0, r8
 800cd14:	4649      	mov	r1, r9
 800cd16:	f7f3 fa65 	bl	80001e4 <__adddf3>
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd20:	462b      	mov	r3, r5
 800cd22:	4630      	mov	r0, r6
 800cd24:	4639      	mov	r1, r7
 800cd26:	f7f3 fa5b 	bl	80001e0 <__aeabi_dsub>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	ec51 0b1a 	vmov	r0, r1, d10
 800cd32:	f7f3 fe9d 	bl	8000a70 <__aeabi_dcmpgt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f47f ae04 	bne.w	800c944 <__ieee754_pow+0x3b4>
 800cd3c:	4aa4      	ldr	r2, [pc, #656]	; (800cfd0 <__ieee754_pow+0xa40>)
 800cd3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd42:	4293      	cmp	r3, r2
 800cd44:	f340 8108 	ble.w	800cf58 <__ieee754_pow+0x9c8>
 800cd48:	151b      	asrs	r3, r3, #20
 800cd4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd52:	fa4a f303 	asr.w	r3, sl, r3
 800cd56:	445b      	add	r3, fp
 800cd58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cd5c:	4e9d      	ldr	r6, [pc, #628]	; (800cfd4 <__ieee754_pow+0xa44>)
 800cd5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cd62:	4116      	asrs	r6, r2
 800cd64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cd68:	2000      	movs	r0, #0
 800cd6a:	ea23 0106 	bic.w	r1, r3, r6
 800cd6e:	f1c2 0214 	rsb	r2, r2, #20
 800cd72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cd76:	fa4a fa02 	asr.w	sl, sl, r2
 800cd7a:	f1bb 0f00 	cmp.w	fp, #0
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4620      	mov	r0, r4
 800cd84:	4629      	mov	r1, r5
 800cd86:	bfb8      	it	lt
 800cd88:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd8c:	f7f3 fa28 	bl	80001e0 <__aeabi_dsub>
 800cd90:	ec41 0b19 	vmov	d9, r0, r1
 800cd94:	4642      	mov	r2, r8
 800cd96:	464b      	mov	r3, r9
 800cd98:	ec51 0b19 	vmov	r0, r1, d9
 800cd9c:	f7f3 fa22 	bl	80001e4 <__adddf3>
 800cda0:	a37b      	add	r3, pc, #492	; (adr r3, 800cf90 <__ieee754_pow+0xa00>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	2000      	movs	r0, #0
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	f7f3 fbd0 	bl	8000550 <__aeabi_dmul>
 800cdb0:	ec53 2b19 	vmov	r2, r3, d9
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa10 	bl	80001e0 <__aeabi_dsub>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	f7f3 fa0a 	bl	80001e0 <__aeabi_dsub>
 800cdcc:	a372      	add	r3, pc, #456	; (adr r3, 800cf98 <__ieee754_pow+0xa08>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	f7f3 fbbd 	bl	8000550 <__aeabi_dmul>
 800cdd6:	a372      	add	r3, pc, #456	; (adr r3, 800cfa0 <__ieee754_pow+0xa10>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	4680      	mov	r8, r0
 800cdde:	4689      	mov	r9, r1
 800cde0:	4620      	mov	r0, r4
 800cde2:	4629      	mov	r1, r5
 800cde4:	f7f3 fbb4 	bl	8000550 <__aeabi_dmul>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4640      	mov	r0, r8
 800cdee:	4649      	mov	r1, r9
 800cdf0:	f7f3 f9f8 	bl	80001e4 <__adddf3>
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 f9f0 	bl	80001e4 <__adddf3>
 800ce04:	4632      	mov	r2, r6
 800ce06:	463b      	mov	r3, r7
 800ce08:	4680      	mov	r8, r0
 800ce0a:	4689      	mov	r9, r1
 800ce0c:	f7f3 f9e8 	bl	80001e0 <__aeabi_dsub>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 f9e2 	bl	80001e0 <__aeabi_dsub>
 800ce1c:	4642      	mov	r2, r8
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460f      	mov	r7, r1
 800ce22:	464b      	mov	r3, r9
 800ce24:	4640      	mov	r0, r8
 800ce26:	4649      	mov	r1, r9
 800ce28:	f7f3 fb92 	bl	8000550 <__aeabi_dmul>
 800ce2c:	a35e      	add	r3, pc, #376	; (adr r3, 800cfa8 <__ieee754_pow+0xa18>)
 800ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce32:	4604      	mov	r4, r0
 800ce34:	460d      	mov	r5, r1
 800ce36:	f7f3 fb8b 	bl	8000550 <__aeabi_dmul>
 800ce3a:	a35d      	add	r3, pc, #372	; (adr r3, 800cfb0 <__ieee754_pow+0xa20>)
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 f9ce 	bl	80001e0 <__aeabi_dsub>
 800ce44:	4622      	mov	r2, r4
 800ce46:	462b      	mov	r3, r5
 800ce48:	f7f3 fb82 	bl	8000550 <__aeabi_dmul>
 800ce4c:	a35a      	add	r3, pc, #360	; (adr r3, 800cfb8 <__ieee754_pow+0xa28>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7f3 f9c7 	bl	80001e4 <__adddf3>
 800ce56:	4622      	mov	r2, r4
 800ce58:	462b      	mov	r3, r5
 800ce5a:	f7f3 fb79 	bl	8000550 <__aeabi_dmul>
 800ce5e:	a358      	add	r3, pc, #352	; (adr r3, 800cfc0 <__ieee754_pow+0xa30>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f7f3 f9bc 	bl	80001e0 <__aeabi_dsub>
 800ce68:	4622      	mov	r2, r4
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	f7f3 fb70 	bl	8000550 <__aeabi_dmul>
 800ce70:	a355      	add	r3, pc, #340	; (adr r3, 800cfc8 <__ieee754_pow+0xa38>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	f7f3 f9b5 	bl	80001e4 <__adddf3>
 800ce7a:	4622      	mov	r2, r4
 800ce7c:	462b      	mov	r3, r5
 800ce7e:	f7f3 fb67 	bl	8000550 <__aeabi_dmul>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	4640      	mov	r0, r8
 800ce88:	4649      	mov	r1, r9
 800ce8a:	f7f3 f9a9 	bl	80001e0 <__aeabi_dsub>
 800ce8e:	4604      	mov	r4, r0
 800ce90:	460d      	mov	r5, r1
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4640      	mov	r0, r8
 800ce98:	4649      	mov	r1, r9
 800ce9a:	f7f3 fb59 	bl	8000550 <__aeabi_dmul>
 800ce9e:	2200      	movs	r2, #0
 800cea0:	ec41 0b19 	vmov	d9, r0, r1
 800cea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cea8:	4620      	mov	r0, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f7f3 f998 	bl	80001e0 <__aeabi_dsub>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	ec51 0b19 	vmov	r0, r1, d9
 800ceb8:	f7f3 fc74 	bl	80007a4 <__aeabi_ddiv>
 800cebc:	4632      	mov	r2, r6
 800cebe:	4604      	mov	r4, r0
 800cec0:	460d      	mov	r5, r1
 800cec2:	463b      	mov	r3, r7
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	f7f3 fb42 	bl	8000550 <__aeabi_dmul>
 800cecc:	4632      	mov	r2, r6
 800cece:	463b      	mov	r3, r7
 800ced0:	f7f3 f988 	bl	80001e4 <__adddf3>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	4620      	mov	r0, r4
 800ceda:	4629      	mov	r1, r5
 800cedc:	f7f3 f980 	bl	80001e0 <__aeabi_dsub>
 800cee0:	4642      	mov	r2, r8
 800cee2:	464b      	mov	r3, r9
 800cee4:	f7f3 f97c 	bl	80001e0 <__aeabi_dsub>
 800cee8:	460b      	mov	r3, r1
 800ceea:	4602      	mov	r2, r0
 800ceec:	493a      	ldr	r1, [pc, #232]	; (800cfd8 <__ieee754_pow+0xa48>)
 800ceee:	2000      	movs	r0, #0
 800cef0:	f7f3 f976 	bl	80001e0 <__aeabi_dsub>
 800cef4:	ec41 0b10 	vmov	d0, r0, r1
 800cef8:	ee10 3a90 	vmov	r3, s1
 800cefc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf04:	da2b      	bge.n	800cf5e <__ieee754_pow+0x9ce>
 800cf06:	4650      	mov	r0, sl
 800cf08:	f000 f966 	bl	800d1d8 <scalbn>
 800cf0c:	ec51 0b10 	vmov	r0, r1, d0
 800cf10:	ec53 2b18 	vmov	r2, r3, d8
 800cf14:	f7ff bbed 	b.w	800c6f2 <__ieee754_pow+0x162>
 800cf18:	4b30      	ldr	r3, [pc, #192]	; (800cfdc <__ieee754_pow+0xa4c>)
 800cf1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf1e:	429e      	cmp	r6, r3
 800cf20:	f77f af0c 	ble.w	800cd3c <__ieee754_pow+0x7ac>
 800cf24:	4b2e      	ldr	r3, [pc, #184]	; (800cfe0 <__ieee754_pow+0xa50>)
 800cf26:	440b      	add	r3, r1
 800cf28:	4303      	orrs	r3, r0
 800cf2a:	d009      	beq.n	800cf40 <__ieee754_pow+0x9b0>
 800cf2c:	ec51 0b18 	vmov	r0, r1, d8
 800cf30:	2200      	movs	r2, #0
 800cf32:	2300      	movs	r3, #0
 800cf34:	f7f3 fd7e 	bl	8000a34 <__aeabi_dcmplt>
 800cf38:	3800      	subs	r0, #0
 800cf3a:	bf18      	it	ne
 800cf3c:	2001      	movne	r0, #1
 800cf3e:	e447      	b.n	800c7d0 <__ieee754_pow+0x240>
 800cf40:	4622      	mov	r2, r4
 800cf42:	462b      	mov	r3, r5
 800cf44:	f7f3 f94c 	bl	80001e0 <__aeabi_dsub>
 800cf48:	4642      	mov	r2, r8
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	f7f3 fd86 	bl	8000a5c <__aeabi_dcmpge>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	f43f aef3 	beq.w	800cd3c <__ieee754_pow+0x7ac>
 800cf56:	e7e9      	b.n	800cf2c <__ieee754_pow+0x99c>
 800cf58:	f04f 0a00 	mov.w	sl, #0
 800cf5c:	e71a      	b.n	800cd94 <__ieee754_pow+0x804>
 800cf5e:	ec51 0b10 	vmov	r0, r1, d0
 800cf62:	4619      	mov	r1, r3
 800cf64:	e7d4      	b.n	800cf10 <__ieee754_pow+0x980>
 800cf66:	491c      	ldr	r1, [pc, #112]	; (800cfd8 <__ieee754_pow+0xa48>)
 800cf68:	2000      	movs	r0, #0
 800cf6a:	f7ff bb30 	b.w	800c5ce <__ieee754_pow+0x3e>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	2100      	movs	r1, #0
 800cf72:	f7ff bb2c 	b.w	800c5ce <__ieee754_pow+0x3e>
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7ff bb28 	b.w	800c5ce <__ieee754_pow+0x3e>
 800cf7e:	9204      	str	r2, [sp, #16]
 800cf80:	f7ff bb7a 	b.w	800c678 <__ieee754_pow+0xe8>
 800cf84:	2300      	movs	r3, #0
 800cf86:	f7ff bb64 	b.w	800c652 <__ieee754_pow+0xc2>
 800cf8a:	bf00      	nop
 800cf8c:	f3af 8000 	nop.w
 800cf90:	00000000 	.word	0x00000000
 800cf94:	3fe62e43 	.word	0x3fe62e43
 800cf98:	fefa39ef 	.word	0xfefa39ef
 800cf9c:	3fe62e42 	.word	0x3fe62e42
 800cfa0:	0ca86c39 	.word	0x0ca86c39
 800cfa4:	be205c61 	.word	0xbe205c61
 800cfa8:	72bea4d0 	.word	0x72bea4d0
 800cfac:	3e663769 	.word	0x3e663769
 800cfb0:	c5d26bf1 	.word	0xc5d26bf1
 800cfb4:	3ebbbd41 	.word	0x3ebbbd41
 800cfb8:	af25de2c 	.word	0xaf25de2c
 800cfbc:	3f11566a 	.word	0x3f11566a
 800cfc0:	16bebd93 	.word	0x16bebd93
 800cfc4:	3f66c16c 	.word	0x3f66c16c
 800cfc8:	5555553e 	.word	0x5555553e
 800cfcc:	3fc55555 	.word	0x3fc55555
 800cfd0:	3fe00000 	.word	0x3fe00000
 800cfd4:	000fffff 	.word	0x000fffff
 800cfd8:	3ff00000 	.word	0x3ff00000
 800cfdc:	4090cbff 	.word	0x4090cbff
 800cfe0:	3f6f3400 	.word	0x3f6f3400
 800cfe4:	652b82fe 	.word	0x652b82fe
 800cfe8:	3c971547 	.word	0x3c971547

0800cfec <__ieee754_sqrt>:
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	ec55 4b10 	vmov	r4, r5, d0
 800cff4:	4e55      	ldr	r6, [pc, #340]	; (800d14c <__ieee754_sqrt+0x160>)
 800cff6:	43ae      	bics	r6, r5
 800cff8:	ee10 0a10 	vmov	r0, s0
 800cffc:	ee10 3a10 	vmov	r3, s0
 800d000:	462a      	mov	r2, r5
 800d002:	4629      	mov	r1, r5
 800d004:	d110      	bne.n	800d028 <__ieee754_sqrt+0x3c>
 800d006:	ee10 2a10 	vmov	r2, s0
 800d00a:	462b      	mov	r3, r5
 800d00c:	f7f3 faa0 	bl	8000550 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f8e4 	bl	80001e4 <__adddf3>
 800d01c:	4604      	mov	r4, r0
 800d01e:	460d      	mov	r5, r1
 800d020:	ec45 4b10 	vmov	d0, r4, r5
 800d024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d028:	2d00      	cmp	r5, #0
 800d02a:	dc10      	bgt.n	800d04e <__ieee754_sqrt+0x62>
 800d02c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d030:	4330      	orrs	r0, r6
 800d032:	d0f5      	beq.n	800d020 <__ieee754_sqrt+0x34>
 800d034:	b15d      	cbz	r5, 800d04e <__ieee754_sqrt+0x62>
 800d036:	ee10 2a10 	vmov	r2, s0
 800d03a:	462b      	mov	r3, r5
 800d03c:	ee10 0a10 	vmov	r0, s0
 800d040:	f7f3 f8ce 	bl	80001e0 <__aeabi_dsub>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	f7f3 fbac 	bl	80007a4 <__aeabi_ddiv>
 800d04c:	e7e6      	b.n	800d01c <__ieee754_sqrt+0x30>
 800d04e:	1512      	asrs	r2, r2, #20
 800d050:	d074      	beq.n	800d13c <__ieee754_sqrt+0x150>
 800d052:	07d4      	lsls	r4, r2, #31
 800d054:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d058:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d05c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d060:	bf5e      	ittt	pl
 800d062:	0fda      	lsrpl	r2, r3, #31
 800d064:	005b      	lslpl	r3, r3, #1
 800d066:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d06a:	2400      	movs	r4, #0
 800d06c:	0fda      	lsrs	r2, r3, #31
 800d06e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d072:	107f      	asrs	r7, r7, #1
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	2516      	movs	r5, #22
 800d078:	4620      	mov	r0, r4
 800d07a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d07e:	1886      	adds	r6, r0, r2
 800d080:	428e      	cmp	r6, r1
 800d082:	bfde      	ittt	le
 800d084:	1b89      	suble	r1, r1, r6
 800d086:	18b0      	addle	r0, r6, r2
 800d088:	18a4      	addle	r4, r4, r2
 800d08a:	0049      	lsls	r1, r1, #1
 800d08c:	3d01      	subs	r5, #1
 800d08e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d092:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d09a:	d1f0      	bne.n	800d07e <__ieee754_sqrt+0x92>
 800d09c:	462a      	mov	r2, r5
 800d09e:	f04f 0e20 	mov.w	lr, #32
 800d0a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0a6:	4281      	cmp	r1, r0
 800d0a8:	eb06 0c05 	add.w	ip, r6, r5
 800d0ac:	dc02      	bgt.n	800d0b4 <__ieee754_sqrt+0xc8>
 800d0ae:	d113      	bne.n	800d0d8 <__ieee754_sqrt+0xec>
 800d0b0:	459c      	cmp	ip, r3
 800d0b2:	d811      	bhi.n	800d0d8 <__ieee754_sqrt+0xec>
 800d0b4:	f1bc 0f00 	cmp.w	ip, #0
 800d0b8:	eb0c 0506 	add.w	r5, ip, r6
 800d0bc:	da43      	bge.n	800d146 <__ieee754_sqrt+0x15a>
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	db41      	blt.n	800d146 <__ieee754_sqrt+0x15a>
 800d0c2:	f100 0801 	add.w	r8, r0, #1
 800d0c6:	1a09      	subs	r1, r1, r0
 800d0c8:	459c      	cmp	ip, r3
 800d0ca:	bf88      	it	hi
 800d0cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d0d0:	eba3 030c 	sub.w	r3, r3, ip
 800d0d4:	4432      	add	r2, r6
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d0dc:	f1be 0e01 	subs.w	lr, lr, #1
 800d0e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d0e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0ec:	d1db      	bne.n	800d0a6 <__ieee754_sqrt+0xba>
 800d0ee:	430b      	orrs	r3, r1
 800d0f0:	d006      	beq.n	800d100 <__ieee754_sqrt+0x114>
 800d0f2:	1c50      	adds	r0, r2, #1
 800d0f4:	bf13      	iteet	ne
 800d0f6:	3201      	addne	r2, #1
 800d0f8:	3401      	addeq	r4, #1
 800d0fa:	4672      	moveq	r2, lr
 800d0fc:	f022 0201 	bicne.w	r2, r2, #1
 800d100:	1063      	asrs	r3, r4, #1
 800d102:	0852      	lsrs	r2, r2, #1
 800d104:	07e1      	lsls	r1, r4, #31
 800d106:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d10a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d10e:	bf48      	it	mi
 800d110:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d114:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d118:	4614      	mov	r4, r2
 800d11a:	e781      	b.n	800d020 <__ieee754_sqrt+0x34>
 800d11c:	0ad9      	lsrs	r1, r3, #11
 800d11e:	3815      	subs	r0, #21
 800d120:	055b      	lsls	r3, r3, #21
 800d122:	2900      	cmp	r1, #0
 800d124:	d0fa      	beq.n	800d11c <__ieee754_sqrt+0x130>
 800d126:	02cd      	lsls	r5, r1, #11
 800d128:	d50a      	bpl.n	800d140 <__ieee754_sqrt+0x154>
 800d12a:	f1c2 0420 	rsb	r4, r2, #32
 800d12e:	fa23 f404 	lsr.w	r4, r3, r4
 800d132:	1e55      	subs	r5, r2, #1
 800d134:	4093      	lsls	r3, r2
 800d136:	4321      	orrs	r1, r4
 800d138:	1b42      	subs	r2, r0, r5
 800d13a:	e78a      	b.n	800d052 <__ieee754_sqrt+0x66>
 800d13c:	4610      	mov	r0, r2
 800d13e:	e7f0      	b.n	800d122 <__ieee754_sqrt+0x136>
 800d140:	0049      	lsls	r1, r1, #1
 800d142:	3201      	adds	r2, #1
 800d144:	e7ef      	b.n	800d126 <__ieee754_sqrt+0x13a>
 800d146:	4680      	mov	r8, r0
 800d148:	e7bd      	b.n	800d0c6 <__ieee754_sqrt+0xda>
 800d14a:	bf00      	nop
 800d14c:	7ff00000 	.word	0x7ff00000

0800d150 <with_errno>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4604      	mov	r4, r0
 800d154:	460d      	mov	r5, r1
 800d156:	4616      	mov	r6, r2
 800d158:	f7ff f8c8 	bl	800c2ec <__errno>
 800d15c:	4629      	mov	r1, r5
 800d15e:	6006      	str	r6, [r0, #0]
 800d160:	4620      	mov	r0, r4
 800d162:	bd70      	pop	{r4, r5, r6, pc}

0800d164 <xflow>:
 800d164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d166:	4614      	mov	r4, r2
 800d168:	461d      	mov	r5, r3
 800d16a:	b108      	cbz	r0, 800d170 <xflow+0xc>
 800d16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d170:	e9cd 2300 	strd	r2, r3, [sp]
 800d174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 f9e8 	bl	8000550 <__aeabi_dmul>
 800d180:	2222      	movs	r2, #34	; 0x22
 800d182:	b003      	add	sp, #12
 800d184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d188:	f7ff bfe2 	b.w	800d150 <with_errno>

0800d18c <__math_uflow>:
 800d18c:	b508      	push	{r3, lr}
 800d18e:	2200      	movs	r2, #0
 800d190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d194:	f7ff ffe6 	bl	800d164 <xflow>
 800d198:	ec41 0b10 	vmov	d0, r0, r1
 800d19c:	bd08      	pop	{r3, pc}

0800d19e <__math_oflow>:
 800d19e:	b508      	push	{r3, lr}
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d1a6:	f7ff ffdd 	bl	800d164 <xflow>
 800d1aa:	ec41 0b10 	vmov	d0, r0, r1
 800d1ae:	bd08      	pop	{r3, pc}

0800d1b0 <fabs>:
 800d1b0:	ec51 0b10 	vmov	r0, r1, d0
 800d1b4:	ee10 2a10 	vmov	r2, s0
 800d1b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1bc:	ec43 2b10 	vmov	d0, r2, r3
 800d1c0:	4770      	bx	lr

0800d1c2 <finite>:
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	ed8d 0b00 	vstr	d0, [sp]
 800d1c8:	9801      	ldr	r0, [sp, #4]
 800d1ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d1ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d1d2:	0fc0      	lsrs	r0, r0, #31
 800d1d4:	b002      	add	sp, #8
 800d1d6:	4770      	bx	lr

0800d1d8 <scalbn>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	ec55 4b10 	vmov	r4, r5, d0
 800d1de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	b99a      	cbnz	r2, 800d210 <scalbn+0x38>
 800d1e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1ec:	4323      	orrs	r3, r4
 800d1ee:	d036      	beq.n	800d25e <scalbn+0x86>
 800d1f0:	4b39      	ldr	r3, [pc, #228]	; (800d2d8 <scalbn+0x100>)
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	ee10 0a10 	vmov	r0, s0
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f7f3 f9a9 	bl	8000550 <__aeabi_dmul>
 800d1fe:	4b37      	ldr	r3, [pc, #220]	; (800d2dc <scalbn+0x104>)
 800d200:	429e      	cmp	r6, r3
 800d202:	4604      	mov	r4, r0
 800d204:	460d      	mov	r5, r1
 800d206:	da10      	bge.n	800d22a <scalbn+0x52>
 800d208:	a32b      	add	r3, pc, #172	; (adr r3, 800d2b8 <scalbn+0xe0>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	e03a      	b.n	800d286 <scalbn+0xae>
 800d210:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d214:	428a      	cmp	r2, r1
 800d216:	d10c      	bne.n	800d232 <scalbn+0x5a>
 800d218:	ee10 2a10 	vmov	r2, s0
 800d21c:	4620      	mov	r0, r4
 800d21e:	4629      	mov	r1, r5
 800d220:	f7f2 ffe0 	bl	80001e4 <__adddf3>
 800d224:	4604      	mov	r4, r0
 800d226:	460d      	mov	r5, r1
 800d228:	e019      	b.n	800d25e <scalbn+0x86>
 800d22a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d22e:	460b      	mov	r3, r1
 800d230:	3a36      	subs	r2, #54	; 0x36
 800d232:	4432      	add	r2, r6
 800d234:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d238:	428a      	cmp	r2, r1
 800d23a:	dd08      	ble.n	800d24e <scalbn+0x76>
 800d23c:	2d00      	cmp	r5, #0
 800d23e:	a120      	add	r1, pc, #128	; (adr r1, 800d2c0 <scalbn+0xe8>)
 800d240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d244:	da1c      	bge.n	800d280 <scalbn+0xa8>
 800d246:	a120      	add	r1, pc, #128	; (adr r1, 800d2c8 <scalbn+0xf0>)
 800d248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d24c:	e018      	b.n	800d280 <scalbn+0xa8>
 800d24e:	2a00      	cmp	r2, #0
 800d250:	dd08      	ble.n	800d264 <scalbn+0x8c>
 800d252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d25a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d25e:	ec45 4b10 	vmov	d0, r4, r5
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d268:	da19      	bge.n	800d29e <scalbn+0xc6>
 800d26a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d26e:	429e      	cmp	r6, r3
 800d270:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d274:	dd0a      	ble.n	800d28c <scalbn+0xb4>
 800d276:	a112      	add	r1, pc, #72	; (adr r1, 800d2c0 <scalbn+0xe8>)
 800d278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e2      	bne.n	800d246 <scalbn+0x6e>
 800d280:	a30f      	add	r3, pc, #60	; (adr r3, 800d2c0 <scalbn+0xe8>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f963 	bl	8000550 <__aeabi_dmul>
 800d28a:	e7cb      	b.n	800d224 <scalbn+0x4c>
 800d28c:	a10a      	add	r1, pc, #40	; (adr r1, 800d2b8 <scalbn+0xe0>)
 800d28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0b8      	beq.n	800d208 <scalbn+0x30>
 800d296:	a10e      	add	r1, pc, #56	; (adr r1, 800d2d0 <scalbn+0xf8>)
 800d298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29c:	e7b4      	b.n	800d208 <scalbn+0x30>
 800d29e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2a2:	3236      	adds	r2, #54	; 0x36
 800d2a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	4b0c      	ldr	r3, [pc, #48]	; (800d2e0 <scalbn+0x108>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	e7e8      	b.n	800d286 <scalbn+0xae>
 800d2b4:	f3af 8000 	nop.w
 800d2b8:	c2f8f359 	.word	0xc2f8f359
 800d2bc:	01a56e1f 	.word	0x01a56e1f
 800d2c0:	8800759c 	.word	0x8800759c
 800d2c4:	7e37e43c 	.word	0x7e37e43c
 800d2c8:	8800759c 	.word	0x8800759c
 800d2cc:	fe37e43c 	.word	0xfe37e43c
 800d2d0:	c2f8f359 	.word	0xc2f8f359
 800d2d4:	81a56e1f 	.word	0x81a56e1f
 800d2d8:	43500000 	.word	0x43500000
 800d2dc:	ffff3cb0 	.word	0xffff3cb0
 800d2e0:	3c900000 	.word	0x3c900000

0800d2e4 <_init>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <_fini>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr
