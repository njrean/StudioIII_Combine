
StudioIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800cd10  0800cd10  0001cd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd60  0800cd60  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd68  0800cd68  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd68  0800cd68  0001cd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd6c  0800cd6c  0001cd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800cd70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000138  0800cea8  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0800cea8  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015862  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  000359ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  000393c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a9a  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013430  00000000  00000000  00050df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091941  00000000  00000000  00064222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f5b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  000f5c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000f07  00000000  00000000  000fa714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000138 	.word	0x20000138
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ccf4 	.word	0x0800ccf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000013c 	.word	0x2000013c
 80001d4:	0800ccf4 	.word	0x0800ccf4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 fa3d 	bl	800531c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f93b 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fb89 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 fb5f 	bl	800156c <MX_DMA_Init>
  MX_I2C1_Init();
 8000eae:	f000 f99d 	bl	80011ec <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9c9 	bl	8001248 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000eb6:	f000 fb09 	bl	80014cc <MX_TIM11_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa65 	bl	8001388 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebe:	f000 fab7 	bl	8001430 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 fb27 	bl	8001514 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Set Matrix for Kalman Filter
  HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f004 fa9a 	bl	8005400 <HAL_Delay>
  setmatrix();
 8000ecc:	f000 fe38 	bl	8001b40 <setmatrix>

  //PWM start
  HAL_TIM_Base_Start(&htim1);
 8000ed0:	487b      	ldr	r0, [pc, #492]	; (80010c0 <main+0x228>)
 8000ed2:	f008 f97b 	bl	80091cc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4879      	ldr	r0, [pc, #484]	; (80010c0 <main+0x228>)
 8000eda:	f008 fa8d 	bl	80093f8 <HAL_TIM_PWM_Start>

  //Encoder start
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ede:	213c      	movs	r1, #60	; 0x3c
 8000ee0:	4878      	ldr	r0, [pc, #480]	; (80010c4 <main+0x22c>)
 8000ee2:	f008 fbdf 	bl	80096a4 <HAL_TIM_Encoder_Start>

  //Timer to Read Encoder
  HAL_TIM_Base_Start_IT(&htim4);
 8000ee6:	4878      	ldr	r0, [pc, #480]	; (80010c8 <main+0x230>)
 8000ee8:	f008 f9ca 	bl	8009280 <HAL_TIM_Base_Start_IT>

  //Timer for micro
  HAL_TIM_Base_Start_IT(&htim11);
 8000eec:	4877      	ldr	r0, [pc, #476]	; (80010cc <main+0x234>)
 8000eee:	f008 f9c7 	bl	8009280 <HAL_TIM_Base_Start_IT>

  //Close Yellow Pilot Lamp
  HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4876      	ldr	r0, [pc, #472]	; (80010d0 <main+0x238>)
 8000ef8:	f005 f964 	bl	80061c4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (Arm_State) {
 8000efc:	4b75      	ldr	r3, [pc, #468]	; (80010d4 <main+0x23c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d8fb      	bhi.n	8000efc <main+0x64>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <main+0x74>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fc1 	.word	0x08000fc1
 8000f10:	08000f37 	.word	0x08000f37
 8000f14:	0800105b 	.word	0x0800105b
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f6b 	.word	0x08000f6b
 8000f24:	08000fab 	.word	0x08000fab
		case Main:
			UART();
 8000f28:	f003 f8c6 	bl	80040b8 <UART>
			ReadEncoder();
 8000f2c:	f000 fc50 	bl	80017d0 <ReadEncoder>
			kalmanfilter();
 8000f30:	f001 f85e 	bl	8001ff0 <kalmanfilter>
			break;
 8000f34:	e0bd      	b.n	80010b2 <main+0x21a>
		case Home:
			UART();
 8000f36:	f003 f8bf 	bl	80040b8 <UART>
			ReadEncoder();
 8000f3a:	f000 fc49 	bl	80017d0 <ReadEncoder>
			SetHome();
 8000f3e:	f000 fc99 	bl	8001874 <SetHome>
			kalmanfilter();
 8000f42:	f001 f855 	bl	8001ff0 <kalmanfilter>
			break;
 8000f46:	e0b4      	b.n	80010b2 <main+0x21a>
		case Emergency:
			UART();
 8000f48:	f003 f8b6 	bl	80040b8 <UART>
			if(Emergency_status == 1){
 8000f4c:	4b62      	ldr	r3, [pc, #392]	; (80010d8 <main+0x240>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <main+0xca>
				Arm_State = Emergency;
 8000f54:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <main+0x23c>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
				Finish=1;
 8000f5a:	4b60      	ldr	r3, [pc, #384]	; (80010dc <main+0x244>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			}
			else {
				Arm_State = Main;
			}
			break;
 8000f60:	e0a7      	b.n	80010b2 <main+0x21a>
				Arm_State = Main;
 8000f62:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <main+0x23c>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e0a3      	b.n	80010b2 <main+0x21a>
		case Setzero:
			UART();
 8000f6a:	f003 f8a5 	bl	80040b8 <UART>
			if(micros() - timestamp > 2000000){
 8000f6e:	f000 fd3d 	bl	80019ec <micros>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	495a      	ldr	r1, [pc, #360]	; (80010e0 <main+0x248>)
 8000f78:	6809      	ldr	r1, [r1, #0]
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	4688      	mov	r8, r1
 8000f7e:	4681      	mov	r9, r0
 8000f80:	ebb2 0408 	subs.w	r4, r2, r8
 8000f84:	eb63 0509 	sbc.w	r5, r3, r9
 8000f88:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <main+0x24c>)
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	f175 0300 	sbcs.w	r3, r5, #0
 8000f90:	f0c0 808a 	bcc.w	80010a8 <main+0x210>
				TIM3->CNT = 0;
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <main+0x250>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
				theta_now = 0;
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <main+0x254>)
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
				Arm_State = Main;
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <main+0x23c>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	701a      	strb	r2, [r3, #0]
			 }

			break;
 8000fa8:	e07e      	b.n	80010a8 <main+0x210>
		case PrepareRun:
			UART();
 8000faa:	f003 f885 	bl	80040b8 <UART>
			TrajectoryGenerator_Flag=1;
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <main+0x258>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
			TrajectoryGenerator();
 8000fb4:	f001 f840 	bl	8002038 <TrajectoryGenerator>
			Arm_State = Run;
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <main+0x23c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
			break;
 8000fbe:	e078      	b.n	80010b2 <main+0x21a>
		case Run:
			UART();
 8000fc0:	f003 f87a 	bl	80040b8 <UART>
			if(Go_Flag == 0){
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <main+0x25c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d16f      	bne.n	80010ac <main+0x214>
				if(ModeN==1){
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <main+0x260>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d138      	bne.n	8001046 <main+0x1ae>
					if(n_station >= n_station_max-1){
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <main+0x264>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <main+0x268>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	db0c      	blt.n	8000ffe <main+0x166>
						Arm_State = EndEffector;
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <main+0x23c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
						FlagOpen_EndEffector =1;
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <main+0x26c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
						ModeN=0;
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <main+0x260>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
						Finish = 1;
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <main+0x244>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <main+0x172>
					}
					else{
						n_station++;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <main+0x264>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <main+0x264>)
 8001008:	701a      	strb	r2, [r3, #0]
					}
					Arm_State = EndEffector;
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <main+0x23c>)
 800100c:	2202      	movs	r2, #2
 800100e:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 8001010:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <main+0x26c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
					theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <main+0x264>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <main+0x270>)
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a3a      	ldr	r2, [pc, #232]	; (800110c <main+0x274>)
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa38 	bl	80004a0 <__aeabi_f2d>
 8001030:	a321      	add	r3, pc, #132	; (adr r3, 80010b8 <main+0x220>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fa8b 	bl	8000550 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4934      	ldr	r1, [pc, #208]	; (8001110 <main+0x278>)
 8001040:	e9c1 2300 	strd	r2, r3, [r1]
					Arm_State = EndEffector;
					FlagOpen_EndEffector =1;
					Finish =1;
				}
			}
			break;
 8001044:	e032      	b.n	80010ac <main+0x214>
					Arm_State = EndEffector;
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <main+0x23c>)
 8001048:	2202      	movs	r2, #2
 800104a:	701a      	strb	r2, [r3, #0]
					FlagOpen_EndEffector =1;
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <main+0x26c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
					Finish =1;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <main+0x244>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
			break;
 8001058:	e028      	b.n	80010ac <main+0x214>
		case EndEffector:
			UART();
 800105a:	f003 f82d 	bl	80040b8 <UART>
			if(Enable_EndEffector == 1) //Enable Effector
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <main+0x27c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d111      	bne.n	800108a <main+0x1f2>
			{
				OpenEndEffector();
 8001066:	f003 fdc9 	bl	8004bfc <OpenEndEffector>
				if(EndEffector_State == State_wait){
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <main+0x280>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d11e      	bne.n	80010b0 <main+0x218>
					if(ModeN==1){
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <main+0x260>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d103      	bne.n	8001082 <main+0x1ea>
						Arm_State = PrepareRun;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <main+0x23c>)
 800107c:	2206      	movs	r2, #6
 800107e:	701a      	strb	r2, [r3, #0]
				}
				else{
					Arm_State = Main;
				}
			}
			break;
 8001080:	e016      	b.n	80010b0 <main+0x218>
						Arm_State = Main;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <main+0x23c>)
 8001084:	2204      	movs	r2, #4
 8001086:	701a      	strb	r2, [r3, #0]
			break;
 8001088:	e012      	b.n	80010b0 <main+0x218>
				FlagOpen_EndEffector =0;
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <main+0x26c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				if(ModeN==1){
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <main+0x260>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <main+0x208>
					Arm_State = PrepareRun;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <main+0x23c>)
 800109a:	2206      	movs	r2, #6
 800109c:	701a      	strb	r2, [r3, #0]
			break;
 800109e:	e007      	b.n	80010b0 <main+0x218>
					Arm_State = Main;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <main+0x23c>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	701a      	strb	r2, [r3, #0]
			break;
 80010a6:	e003      	b.n	80010b0 <main+0x218>
			break;
 80010a8:	bf00      	nop
 80010aa:	e727      	b.n	8000efc <main+0x64>
			break;
 80010ac:	bf00      	nop
 80010ae:	e725      	b.n	8000efc <main+0x64>
			break;
 80010b0:	bf00      	nop
	  switch (Arm_State) {
 80010b2:	e723      	b.n	8000efc <main+0x64>
 80010b4:	f3af 8000 	nop.w
 80010b8:	a2529d39 	.word	0xa2529d39
 80010bc:	3f91df46 	.word	0x3f91df46
 80010c0:	200001a8 	.word	0x200001a8
 80010c4:	200001f0 	.word	0x200001f0
 80010c8:	20000238 	.word	0x20000238
 80010cc:	20000280 	.word	0x20000280
 80010d0:	40020400 	.word	0x40020400
 80010d4:	200000bf 	.word	0x200000bf
 80010d8:	200003d3 	.word	0x200003d3
 80010dc:	20000659 	.word	0x20000659
 80010e0:	20000674 	.word	0x20000674
 80010e4:	001e8481 	.word	0x001e8481
 80010e8:	40000400 	.word	0x40000400
 80010ec:	200003d4 	.word	0x200003d4
 80010f0:	200003d2 	.word	0x200003d2
 80010f4:	200003d1 	.word	0x200003d1
 80010f8:	20000658 	.word	0x20000658
 80010fc:	200000be 	.word	0x200000be
 8001100:	200000bd 	.word	0x200000bd
 8001104:	2000066c 	.word	0x2000066c
 8001108:	2000065c 	.word	0x2000065c
 800110c:	20000094 	.word	0x20000094
 8001110:	200005a0 	.word	0x200005a0
 8001114:	2000064b 	.word	0x2000064b
 8001118:	200000c0 	.word	0x200000c0

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00a fe10 	bl	800bd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SystemClock_Config+0xc8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <SystemClock_Config+0xc8>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <SystemClock_Config+0xc8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <SystemClock_Config+0xcc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <SystemClock_Config+0xcc>)
 8001166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <SystemClock_Config+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800118c:	2308      	movs	r3, #8
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 fb2b 	bl	80087fc <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ac:	f003 fdce 	bl	8004d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2103      	movs	r1, #3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fd8d 	bl	8008cec <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d8:	f003 fdb8 	bl	8004d4c <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	; 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_I2C1_Init+0x50>)
 800122a:	f004 fffd 	bl	8006228 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f003 fd8a 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000154 	.word	0x20000154
 8001240:	40005400 	.word	0x40005400
 8001244:	00061a80 	.word	0x00061a80

08001248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b096      	sub	sp, #88	; 0x58
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2220      	movs	r2, #32
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f00a fd65 	bl	800bd50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <MX_TIM1_Init+0x138>)
 8001288:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <MX_TIM1_Init+0x13c>)
 800128a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_TIM1_Init+0x138>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <MX_TIM1_Init+0x138>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <MX_TIM1_Init+0x138>)
 800129a:	f241 3287 	movw	r2, #4999	; 0x1387
 800129e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <MX_TIM1_Init+0x138>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <MX_TIM1_Init+0x138>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <MX_TIM1_Init+0x138>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <MX_TIM1_Init+0x138>)
 80012b4:	f007 ff3a 	bl	800912c <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012be:	f003 fd45 	bl	8004d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012cc:	4619      	mov	r1, r3
 80012ce:	482c      	ldr	r0, [pc, #176]	; (8001380 <MX_TIM1_Init+0x138>)
 80012d0:	f008 fc40 	bl	8009b54 <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012da:	f003 fd37 	bl	8004d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012de:	4828      	ldr	r0, [pc, #160]	; (8001380 <MX_TIM1_Init+0x138>)
 80012e0:	f008 f830 	bl	8009344 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ea:	f003 fd2f 	bl	8004d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012fa:	4619      	mov	r1, r3
 80012fc:	4820      	ldr	r0, [pc, #128]	; (8001380 <MX_TIM1_Init+0x138>)
 80012fe:	f008 ffe5 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001308:	f003 fd20 	bl	8004d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM1_Init+0x138>)
 8001332:	f008 fb4d 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800133c:	f003 fd06 	bl	8004d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x138>)
 8001364:	f009 f820 	bl	800a3a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800136e:	f003 fced 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x138>)
 8001374:	f003 fe1c 	bl	8004fb0 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3758      	adds	r7, #88	; 0x58
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001a8 	.word	0x200001a8
 8001384:	40010000 	.word	0x40010000

08001388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00a fcda 	bl	800bd50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <MX_TIM3_Init+0xa4>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013b8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80013bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ca:	2303      	movs	r3, #3
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d2:	2301      	movs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e2:	2301      	movs	r3, #1
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM3_Init+0xa0>)
 80013f6:	f008 f8af 	bl	8009558 <HAL_TIM_Encoder_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001400:	f003 fca4 	bl	8004d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM3_Init+0xa0>)
 8001412:	f008 ff5b 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800141c:	f003 fc96 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f0 	.word	0x200001f0
 800142c:	40000400 	.word	0x40000400

08001430 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM4_Init+0x94>)
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <MX_TIM4_Init+0x98>)
 8001450:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM4_Init+0x94>)
 8001454:	2209      	movs	r2, #9
 8001456:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM4_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_TIM4_Init+0x94>)
 8001460:	f242 720f 	movw	r2, #9999	; 0x270f
 8001464:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM4_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM4_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM4_Init+0x94>)
 8001474:	f007 fe5a 	bl	800912c <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800147e:	f003 fc65 	bl	8004d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM4_Init+0x94>)
 8001490:	f008 fb60 	bl	8009b54 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800149a:	f003 fc57 	bl	8004d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM4_Init+0x94>)
 80014ac:	f008 ff0e 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014b6:	f003 fc49 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000238 	.word	0x20000238
 80014c8:	40000800 	.word	0x40000800

080014cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_TIM11_Init+0x40>)
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <MX_TIM11_Init+0x44>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_TIM11_Init+0x40>)
 80014d8:	2263      	movs	r2, #99	; 0x63
 80014da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_TIM11_Init+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_TIM11_Init+0x40>)
 80014e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_TIM11_Init+0x40>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_TIM11_Init+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM11_Init+0x40>)
 80014f8:	f007 fe18 	bl	800912c <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001502:	f003 fc23 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000280 	.word	0x20000280
 8001510:	40014800 	.word	0x40014800

08001514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_USART2_UART_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MX_USART2_UART_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001520:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x50>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x50>)
 8001550:	f008 ff90 	bl	800a474 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800155a:	f003 fbf7 	bl	8004d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002c8 	.word	0x200002c8
 8001568:	40004400 	.word	0x40004400

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_DMA_Init+0x4c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <MX_DMA_Init+0x4c>)
 800157c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_DMA_Init+0x4c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2010      	movs	r0, #16
 8001594:	f004 f833 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001598:	2010      	movs	r0, #16
 800159a:	f004 f84c 	bl	8005636 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2011      	movs	r0, #17
 80015a4:	f004 f82b 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015a8:	2011      	movs	r0, #17
 80015aa:	f004 f844 	bl	8005636 <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <MX_GPIO_Init+0x17c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <MX_GPIO_Init+0x17c>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b55      	ldr	r3, [pc, #340]	; (8001738 <MX_GPIO_Init+0x17c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <MX_GPIO_Init+0x17c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a50      	ldr	r2, [pc, #320]	; (8001738 <MX_GPIO_Init+0x17c>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <MX_GPIO_Init+0x17c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <MX_GPIO_Init+0x17c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a49      	ldr	r2, [pc, #292]	; (8001738 <MX_GPIO_Init+0x17c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <MX_GPIO_Init+0x17c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b43      	ldr	r3, [pc, #268]	; (8001738 <MX_GPIO_Init+0x17c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a42      	ldr	r2, [pc, #264]	; (8001738 <MX_GPIO_Init+0x17c>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b40      	ldr	r3, [pc, #256]	; (8001738 <MX_GPIO_Init+0x17c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	483d      	ldr	r0, [pc, #244]	; (800173c <MX_GPIO_Init+0x180>)
 8001648:	f004 fdbc 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_DIR_Pin|PilotLamp_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001652:	483b      	ldr	r0, [pc, #236]	; (8001740 <MX_GPIO_Init+0x184>)
 8001654:	f004 fdb6 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_X_Pin;
 8001658:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800165e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4835      	ldr	r0, [pc, #212]	; (8001744 <MX_GPIO_Init+0x188>)
 8001670:	f004 fc0c 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001674:	2304      	movs	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001678:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800167e:	2302      	movs	r3, #2
 8001680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	482e      	ldr	r0, [pc, #184]	; (8001744 <MX_GPIO_Init+0x188>)
 800168a:	f004 fbff 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800168e:	2320      	movs	r3, #32
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4825      	ldr	r0, [pc, #148]	; (800173c <MX_GPIO_Init+0x180>)
 80016a6:	f004 fbf1 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_DIR_Pin */
  GPIO_InitStruct.Pin = Motor_DIR_Pin;
 80016aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_DIR_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <MX_GPIO_Init+0x184>)
 80016c4:	f004 fbe2 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80016c8:	2310      	movs	r3, #16
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_GPIO_Init+0x184>)
 80016de:	f004 fbd5 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PilotLamp_Pin */
  GPIO_InitStruct.Pin = PilotLamp_Pin;
 80016e2:	2320      	movs	r3, #32
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016e6:	2311      	movs	r3, #17
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PilotLamp_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_GPIO_Init+0x184>)
 80016fa:	f004 fbc7 	bl	8005e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2008      	movs	r0, #8
 8001704:	f003 ff7b 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001708:	2008      	movs	r0, #8
 800170a:	f003 ff94 	bl	8005636 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200a      	movs	r0, #10
 8001714:	f003 ff73 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001718:	200a      	movs	r0, #10
 800171a:	f003 ff8c 	bl	8005636 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2017      	movs	r0, #23
 8001724:	f003 ff6b 	bl	80055fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001728:	2017      	movs	r0, #23
 800172a:	f003 ff84 	bl	8005636 <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800

08001748 <RunMotor>:

/* USER CODE BEGIN 4 */
void RunMotor(float volt, uint8_t direction)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
	static float PWMOut = 0;
	PWMOut = (volt*5000.0)/24.0;
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fea2 	bl	80004a0 <__aeabi_f2d>
 800175c:	a31a      	add	r3, pc, #104	; (adr r3, 80017c8 <RunMotor+0x80>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe fef5 	bl	8000550 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <RunMotor+0x70>)
 8001774:	f7ff f816 	bl	80007a4 <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f9b6 	bl	8000af0 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <RunMotor+0x74>)
 8001788:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(Motor_DIR_GPIO_Port, Motor_DIR_Pin, direction);
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <RunMotor+0x78>)
 8001794:	f004 fd16 	bl	80061c4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <RunMotor+0x74>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <RunMotor+0x7c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a6:	ee17 2a90 	vmov	r2, s15
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	40380000 	.word	0x40380000
 80017bc:	20000678 	.word	0x20000678
 80017c0:	40020400 	.word	0x40020400
 80017c4:	200001a8 	.word	0x200001a8
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40b38800 	.word	0x40b38800

080017d0 <ReadEncoder>:

void ReadEncoder()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	angle_sum_before = theta_now;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <ReadEncoder+0x58>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <ReadEncoder+0x5c>)
 80017da:	6013      	str	r3, [r2, #0]
	theta_now = (TIM3->CNT/8191.0)*(2.0*M_PI);
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <ReadEncoder+0x60>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe3b 	bl	800045c <__aeabi_ui2d>
 80017e6:	a30c      	add	r3, pc, #48	; (adr r3, 8001818 <ReadEncoder+0x48>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe ffda 	bl	80007a4 <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	a309      	add	r3, pc, #36	; (adr r3, 8001820 <ReadEncoder+0x50>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fea7 	bl	8000550 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f971 	bl	8000af0 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <ReadEncoder+0x58>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	00000000 	.word	0x00000000
 800181c:	40bfff00 	.word	0x40bfff00
 8001820:	54442d18 	.word	0x54442d18
 8001824:	401921fb 	.word	0x401921fb
 8001828:	200003d4 	.word	0x200003d4
 800182c:	200003d8 	.word	0x200003d8
 8001830:	40000400 	.word	0x40000400

08001834 <BackwardDifference>:

void BackwardDifference()
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	omega_tosensor = (theta_now-angle_sum_before)/dt;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <BackwardDifference+0x30>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <BackwardDifference+0x34>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <BackwardDifference+0x38>)
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <BackwardDifference+0x3c>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200003d4 	.word	0x200003d4
 8001868:	200003d8 	.word	0x200003d8
 800186c:	20000004 	.word	0x20000004
 8001870:	200003dc 	.word	0x200003dc

08001874 <SetHome>:

void SetHome()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Proximity_GPIO_Port, Proximity_Pin) == GPIO_PIN_RESET && AlSet_Flag == 2)
 8001878:	2104      	movs	r1, #4
 800187a:	481d      	ldr	r0, [pc, #116]	; (80018f0 <SetHome+0x7c>)
 800187c:	f004 fc8a 	bl	8006194 <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <SetHome+0x20>
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <SetHome+0x80>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d102      	bne.n	8001894 <SetHome+0x20>
	{
		SetHome_Flag = 2;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <SetHome+0x84>)
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
	}

	if(SetHome_Flag == 1)
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <SetHome+0x84>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d112      	bne.n	80018c2 <SetHome+0x4e>
	{
		volt = 4;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <SetHome+0x88>)
 800189e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80018a2:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <SetHome+0x88>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	2000      	movs	r0, #0
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff ff4a 	bl	8001748 <RunMotor>
		AlSet_Flag = 1;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SetHome+0x80>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <SetHome+0x84>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		volt = 3;
		RunMotor(volt, counterclockwise);
		AlSet_Flag = 0;
		SetHome_Flag = 0;
	}
}
 80018c0:	e014      	b.n	80018ec <SetHome+0x78>
	else if(SetHome_Flag == 2)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <SetHome+0x84>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d110      	bne.n	80018ec <SetHome+0x78>
		volt = 3;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <SetHome+0x88>)
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <SetHome+0x8c>)
 80018ce:	601a      	str	r2, [r3, #0]
		RunMotor(volt, counterclockwise);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <SetHome+0x88>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	2000      	movs	r0, #0
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	f7ff ff34 	bl	8001748 <RunMotor>
		AlSet_Flag = 0;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SetHome+0x80>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
		SetHome_Flag = 0;
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SetHome+0x84>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020800 	.word	0x40020800
 80018f4:	20000000 	.word	0x20000000
 80018f8:	200003d0 	.word	0x200003d0
 80018fc:	200003cc 	.word	0x200003cc
 8001900:	40400000 	.word	0x40400000

08001904 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 0)
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d122      	bne.n	800195a <HAL_GPIO_EXTI_Callback+0x56>
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11e      	bne.n	800195a <HAL_GPIO_EXTI_Callback+0x56>
	{
		volt = 0;
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
		RunMotor(volt, clockwise);
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	2001      	movs	r0, #1
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	f7ff ff0a 	bl	8001748 <RunMotor>
		theta_now = 0;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
		kalmanfilter();
 800193c:	f000 fb58 	bl	8001ff0 <kalmanfilter>
		AlSet_Flag = 2;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
		timestamp = micros();
 8001946:	f000 f851 	bl	80019ec <micros>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001950:	601a      	str	r2, [r3, #0]
		Arm_State = Setzero;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001954:	2205      	movs	r2, #5
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e009      	b.n	800196e <HAL_GPIO_EXTI_Callback+0x6a>
	}

	else if (GPIO_Pin == Proximity_Pin && AlSet_Flag == 1)
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d106      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x6a>
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_GPIO_EXTI_Callback+0x6a>
	{
		SetHome_Flag = 2;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == Emergency_Pin)
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d124      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0xba>
	{
		if (HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin) == GPIO_PIN_SET)
 8001974:	2110      	movs	r1, #16
 8001976:	481a      	ldr	r0, [pc, #104]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001978:	f004 fc0c 	bl	8006194 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11a      	bne.n	80019b8 <HAL_GPIO_EXTI_Callback+0xb4>
		{
			Arm_State=Main;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001984:	2204      	movs	r2, #4
 8001986:	701a      	strb	r2, [r3, #0]
			Finish = 1;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
			Emergency_status = 1;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PilotLamp_GPIO_Port, PilotLamp_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2120      	movs	r1, #32
 8001998:	4811      	ldr	r0, [pc, #68]	; (80019e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800199a:	f004 fc13 	bl	80061c4 <HAL_GPIO_WritePin>
			volt = 0;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
			RunMotor(volt, clockwise);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	2001      	movs	r0, #1
 80019ae:	eeb0 0a67 	vmov.f32	s0, s15
 80019b2:	f7ff fec9 	bl	8001748 <RunMotor>
		else
		{
			Emergency_status = 0;
		}
	}
}
 80019b6:	e002      	b.n	80019be <HAL_GPIO_EXTI_Callback+0xba>
			Emergency_status = 0;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000
 80019cc:	200003cc 	.word	0x200003cc
 80019d0:	200003d4 	.word	0x200003d4
 80019d4:	20000674 	.word	0x20000674
 80019d8:	200000bf 	.word	0x200000bf
 80019dc:	200003d0 	.word	0x200003d0
 80019e0:	40020400 	.word	0x40020400
 80019e4:	20000659 	.word	0x20000659
 80019e8:	200003d3 	.word	0x200003d3

080019ec <micros>:

inline uint64_t micros()
{
 80019ec:	b4b0      	push	{r4, r5, r7}
 80019ee:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <micros+0x2c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2200      	movs	r2, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	4611      	mov	r1, r2
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <micros+0x30>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	1884      	adds	r4, r0, r2
 8001a04:	eb41 0503 	adc.w	r5, r1, r3
 8001a08:	4622      	mov	r2, r4
 8001a0a:	462b      	mov	r3, r5
}
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bcb0      	pop	{r4, r5, r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000280 	.word	0x20000280
 8001a1c:	20000650 	.word	0x20000650

08001a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	ed2d 8b02 	vpush	{d8}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && Go_Flag && Arm_State == Run)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d155      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d051      	beq.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d14d      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0xc0>
	{
		ReadEncoder();
 8001a44:	f7ff fec4 	bl	80017d0 <ReadEncoder>
		BackwardDifference();
 8001a48:	f7ff fef4 	bl	8001834 <BackwardDifference>
		TrajectoryEvaluation();
 8001a4c:	f001 fb74 	bl	8003138 <TrajectoryEvaluation>
		kalmanfilter();
 8001a50:	f000 face 	bl	8001ff0 <kalmanfilter>

		volt = Cascade(theta_ref, position_kalman, omega_ref, omega_kalman);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f847 	bl	8000af0 <__aeabi_d2f>
 8001a62:	4606      	mov	r6, r0
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a66:	ed93 8a00 	vldr	s16, [r3]
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f83c 	bl	8000af0 <__aeabi_d2f>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eef0 1a67 	vmov.f32	s3, s15
 8001a84:	ee01 2a10 	vmov	s2, r2
 8001a88:	eef0 0a48 	vmov.f32	s1, s16
 8001a8c:	ee00 6a10 	vmov	s0, r6
 8001a90:	f002 fa2c 	bl	8003eec <Cascade>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]

		t+=dt;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001aa0:	ed93 7a00 	vldr	s14, [r3]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]

		if (Go_Flag == 0) //when last loop
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			volt = 0;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
			t = 0;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
		}

		RunMotor(volt, PID_dir);
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f7ff fe34 	bl	8001748 <RunMotor>
	}

	if (htim == &htim11)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10a      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0xde>
	{
		_micro += 65535;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001af2:	1854      	adds	r4, r2, r1
 8001af4:	f143 0500 	adc.w	r5, r3, #0
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001afa:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	ecbd 8b02 	vpop	{d8}
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000238 	.word	0x20000238
 8001b10:	200003d1 	.word	0x200003d1
 8001b14:	200000bf 	.word	0x200000bf
 8001b18:	200005f8 	.word	0x200005f8
 8001b1c:	200003e0 	.word	0x200003e0
 8001b20:	20000600 	.word	0x20000600
 8001b24:	200003e4 	.word	0x200003e4
 8001b28:	200003cc 	.word	0x200003cc
 8001b2c:	2000056c 	.word	0x2000056c
 8001b30:	20000004 	.word	0x20000004
 8001b34:	200000c2 	.word	0x200000c2
 8001b38:	20000280 	.word	0x20000280
 8001b3c:	20000650 	.word	0x20000650

08001b40 <setmatrix>:

void setmatrix(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	// A = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
	data_A[0]=1;
 8001b44:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <setmatrix+0x1d4>)
 8001b46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b4a:	601a      	str	r2, [r3, #0]
	data_A[1]=dt;
 8001b4c:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <setmatrix+0x1d8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a70      	ldr	r2, [pc, #448]	; (8001d14 <setmatrix+0x1d4>)
 8001b52:	6053      	str	r3, [r2, #4]
	data_A[2]=dt*dt/2.0;
 8001b54:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <setmatrix+0x1d8>)
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <setmatrix+0x1d8>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6c:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <setmatrix+0x1d4>)
 8001b6e:	edc3 7a02 	vstr	s15, [r3, #8]
	data_A[3]=dt*dt*dt/6.0;
 8001b72:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <setmatrix+0x1d8>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <setmatrix+0x1d8>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <setmatrix+0x1d8>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <setmatrix+0x1d4>)
 8001b96:	edc3 7a03 	vstr	s15, [r3, #12]
	data_A[4]=0;
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <setmatrix+0x1d4>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
	data_A[5]=1;
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <setmatrix+0x1d4>)
 8001ba4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ba8:	615a      	str	r2, [r3, #20]
	data_A[6]=dt;
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <setmatrix+0x1d8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a59      	ldr	r2, [pc, #356]	; (8001d14 <setmatrix+0x1d4>)
 8001bb0:	6193      	str	r3, [r2, #24]
	data_A[7]=dt*dt/2.0;
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <setmatrix+0x1d8>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	4b57      	ldr	r3, [pc, #348]	; (8001d18 <setmatrix+0x1d8>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <setmatrix+0x1d4>)
 8001bcc:	edc3 7a07 	vstr	s15, [r3, #28]
	data_A[8]=0;
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <setmatrix+0x1d4>)
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
	data_A[9]=0;
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <setmatrix+0x1d4>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
	data_A[10]=1;
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <setmatrix+0x1d4>)
 8001be2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
	data_A[11]=dt;
 8001be8:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <setmatrix+0x1d8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <setmatrix+0x1d4>)
 8001bee:	62d3      	str	r3, [r2, #44]	; 0x2c
	data_A[12]=0;
 8001bf0:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <setmatrix+0x1d4>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
	data_A[13]=0;
 8001bf8:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <setmatrix+0x1d4>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
	data_A[14]=0;
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <setmatrix+0x1d4>)
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
	data_A[15]=1;
 8001c08:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <setmatrix+0x1d4>)
 8001c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c

	// G = {dt*dt*dt/6,dt*dt/2,dt,1};
	data_G[0]=dt*dt*dt/6.0;
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <setmatrix+0x1d8>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <setmatrix+0x1d8>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c20:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <setmatrix+0x1d8>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <setmatrix+0x1dc>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
	data_G[1]=dt*dt/2.0;
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <setmatrix+0x1d8>)
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <setmatrix+0x1d8>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <setmatrix+0x1dc>)
 8001c52:	edc3 7a01 	vstr	s15, [r3, #4]
	data_G[2]=dt;
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <setmatrix+0x1d8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <setmatrix+0x1dc>)
 8001c5c:	6093      	str	r3, [r2, #8]
	data_G[3]=1;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <setmatrix+0x1dc>)
 8001c60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c64:	60da      	str	r2, [r3, #12]

	arm_mat_init_f32(&I, 4, 4, data_I);
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <setmatrix+0x1e0>)
 8001c68:	2204      	movs	r2, #4
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	482d      	ldr	r0, [pc, #180]	; (8001d24 <setmatrix+0x1e4>)
 8001c6e:	f009 ffd7 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&A, 4, 4, data_A);
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <setmatrix+0x1d4>)
 8001c74:	2204      	movs	r2, #4
 8001c76:	2104      	movs	r1, #4
 8001c78:	482b      	ldr	r0, [pc, #172]	; (8001d28 <setmatrix+0x1e8>)
 8001c7a:	f009 ffd1 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&G, 4, 1, data_G);
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <setmatrix+0x1dc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	2104      	movs	r1, #4
 8001c84:	4829      	ldr	r0, [pc, #164]	; (8001d2c <setmatrix+0x1ec>)
 8001c86:	f009 ffcb 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&C, 1, 4, data_C);
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <setmatrix+0x1f0>)
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4828      	ldr	r0, [pc, #160]	; (8001d34 <setmatrix+0x1f4>)
 8001c92:	f009 ffc5 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&R, 1, 1, data_R);
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <setmatrix+0x1f8>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4827      	ldr	r0, [pc, #156]	; (8001d3c <setmatrix+0x1fc>)
 8001c9e:	f009 ffbf 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 1, 1, data_Q);
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <setmatrix+0x200>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4826      	ldr	r0, [pc, #152]	; (8001d44 <setmatrix+0x204>)
 8001caa:	f009 ffb9 	bl	800bc20 <arm_mat_init_f32>

	arm_mat_init_f32(&input, 1, 1, data_input);
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <setmatrix+0x208>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4825      	ldr	r0, [pc, #148]	; (8001d4c <setmatrix+0x20c>)
 8001cb6:	f009 ffb3 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&K, 4, 1, data_K);
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <setmatrix+0x210>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	4824      	ldr	r0, [pc, #144]	; (8001d54 <setmatrix+0x214>)
 8001cc2:	f009 ffad 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&x, 4, 1, data_x);
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <setmatrix+0x218>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2104      	movs	r1, #4
 8001ccc:	4823      	ldr	r0, [pc, #140]	; (8001d5c <setmatrix+0x21c>)
 8001cce:	f009 ffa7 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&x_new, 4, 1, data_x_new);
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <setmatrix+0x220>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <setmatrix+0x224>)
 8001cda:	f009 ffa1 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&P, 4, 4, data_P);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <setmatrix+0x228>)
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4821      	ldr	r0, [pc, #132]	; (8001d6c <setmatrix+0x22c>)
 8001ce6:	f009 ff9b 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&P_new, 4, 4, data_P_new);
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <setmatrix+0x230>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4820      	ldr	r0, [pc, #128]	; (8001d74 <setmatrix+0x234>)
 8001cf2:	f009 ff95 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&y, 1, 1, data_y);
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <setmatrix+0x238>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	481f      	ldr	r0, [pc, #124]	; (8001d7c <setmatrix+0x23c>)
 8001cfe:	f009 ff8f 	bl	800bc20 <arm_mat_init_f32>
	arm_mat_init_f32(&y_old, 1, 1, data_y_old);
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <setmatrix+0x240>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	2101      	movs	r1, #1
 8001d08:	481e      	ldr	r0, [pc, #120]	; (8001d84 <setmatrix+0x244>)
 8001d0a:	f009 ff89 	bl	800bc20 <arm_mat_init_f32>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000460 	.word	0x20000460
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	200004a0 	.word	0x200004a0
 8001d20:	20000008 	.word	0x20000008
 8001d24:	200003f0 	.word	0x200003f0
 8001d28:	200003f8 	.word	0x200003f8
 8001d2c:	20000400 	.word	0x20000400
 8001d30:	20000048 	.word	0x20000048
 8001d34:	20000418 	.word	0x20000418
 8001d38:	20000058 	.word	0x20000058
 8001d3c:	20000420 	.word	0x20000420
 8001d40:	2000005c 	.word	0x2000005c
 8001d44:	20000408 	.word	0x20000408
 8001d48:	200004b0 	.word	0x200004b0
 8001d4c:	20000428 	.word	0x20000428
 8001d50:	200004b4 	.word	0x200004b4
 8001d54:	20000410 	.word	0x20000410
 8001d58:	200004c4 	.word	0x200004c4
 8001d5c:	20000440 	.word	0x20000440
 8001d60:	200004d4 	.word	0x200004d4
 8001d64:	20000448 	.word	0x20000448
 8001d68:	200004e4 	.word	0x200004e4
 8001d6c:	20000450 	.word	0x20000450
 8001d70:	20000524 	.word	0x20000524
 8001d74:	20000458 	.word	0x20000458
 8001d78:	20000564 	.word	0x20000564
 8001d7c:	20000430 	.word	0x20000430
 8001d80:	20000568 	.word	0x20000568
 8001d84:	20000438 	.word	0x20000438

08001d88 <prediction>:

void prediction(){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0c2      	sub	sp, #264	; 0x108
 8001d8c:	af00      	add	r7, sp, #0

	arm_mat_mult_f32(&A, &x, &x_new);  //x_new = multiply(A, x);
 8001d8e:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <prediction+0xcc>)
 8001d90:	4931      	ldr	r1, [pc, #196]	; (8001e58 <prediction+0xd0>)
 8001d92:	4832      	ldr	r0, [pc, #200]	; (8001e5c <prediction+0xd4>)
 8001d94:	f009 fea4 	bl	800bae0 <arm_mat_mult_f32>

	//P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
	float32_t data_mult1[16];
	arm_matrix_instance_f32 mult1;
	arm_mat_init_f32(&mult1, 4, 4, data_mult1);
 8001d98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d9c:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001da0:	2204      	movs	r2, #4
 8001da2:	2104      	movs	r1, #4
 8001da4:	f009 ff3c 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult2[4];
	arm_matrix_instance_f32 mult2;
	arm_mat_init_f32(&mult2, 4, 1, data_mult2);
 8001da8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dac:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001db0:	2201      	movs	r2, #1
 8001db2:	2104      	movs	r1, #4
 8001db4:	f009 ff34 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult3[16];
	arm_matrix_instance_f32 mult3;
	arm_mat_init_f32(&mult3, 4, 4, data_mult3);
 8001db8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dbc:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	f009 ff2c 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_A_T[16];
	arm_matrix_instance_f32 A_T;
	arm_mat_init_f32(&A_T, 4, 4, data_A_T);
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	f107 0018 	add.w	r0, r7, #24
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	f009 ff24 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_G_T[4];
	arm_matrix_instance_f32 G_T;
	arm_mat_init_f32(&G_T, 1, 4, data_G_T);
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4638      	mov	r0, r7
 8001dde:	2204      	movs	r2, #4
 8001de0:	2101      	movs	r1, #1
 8001de2:	f009 ff1d 	bl	800bc20 <arm_mat_init_f32>

	arm_mat_trans_f32(&A, &A_T);
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	4619      	mov	r1, r3
 8001dec:	481b      	ldr	r0, [pc, #108]	; (8001e5c <prediction+0xd4>)
 8001dee:	f009 fdb1 	bl	800b954 <arm_mat_trans_f32>
	arm_mat_trans_f32(&G, &G_T);
 8001df2:	463b      	mov	r3, r7
 8001df4:	4619      	mov	r1, r3
 8001df6:	481a      	ldr	r0, [pc, #104]	; (8001e60 <prediction+0xd8>)
 8001df8:	f009 fdac 	bl	800b954 <arm_mat_trans_f32>
	arm_mat_mult_f32(&A, &P, &mult1);
 8001dfc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e00:	461a      	mov	r2, r3
 8001e02:	4918      	ldr	r1, [pc, #96]	; (8001e64 <prediction+0xdc>)
 8001e04:	4815      	ldr	r0, [pc, #84]	; (8001e5c <prediction+0xd4>)
 8001e06:	f009 fe6b 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&G, &Q, &mult2);
 8001e0a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4915      	ldr	r1, [pc, #84]	; (8001e68 <prediction+0xe0>)
 8001e12:	4813      	ldr	r0, [pc, #76]	; (8001e60 <prediction+0xd8>)
 8001e14:	f009 fe64 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1, &A_T, &mult1);
 8001e18:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001e1c:	f107 0118 	add.w	r1, r7, #24
 8001e20:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f009 fe5b 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult2, &G_T, &mult3);
 8001e2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e2e:	4639      	mov	r1, r7
 8001e30:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e34:	4618      	mov	r0, r3
 8001e36:	f009 fe53 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult1, &mult3, &P_new);
 8001e3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <prediction+0xe4>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 feef 	bl	800bc28 <arm_mat_add_f32>
}
 8001e4a:	bf00      	nop
 8001e4c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000448 	.word	0x20000448
 8001e58:	20000440 	.word	0x20000440
 8001e5c:	200003f8 	.word	0x200003f8
 8001e60:	20000400 	.word	0x20000400
 8001e64:	20000450 	.word	0x20000450
 8001e68:	20000408 	.word	0x20000408
 8001e6c:	20000458 	.word	0x20000458

08001e70 <update>:

void update(){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0ae      	sub	sp, #184	; 0xb8
 8001e74:	af00      	add	r7, sp, #0
	float32_t data_sumK[1];
	arm_matrix_instance_f32 sumK;
	arm_mat_init_f32(&sumK, 1, 1, data_sumK);
 8001e76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e7a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2101      	movs	r1, #1
 8001e82:	f009 fecd 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult3x3[16];
	arm_matrix_instance_f32 mult3x3;
	arm_mat_init_f32(&mult3x3, 4, 4, data_mult3x3);
 8001e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001e8e:	2204      	movs	r2, #4
 8001e90:	2104      	movs	r1, #4
 8001e92:	f009 fec5 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult3x1[4];
	arm_matrix_instance_f32 mult3x1;
	arm_mat_init_f32(&mult3x1, 4, 1, data_mult3x1);
 8001e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e9a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	f009 febd 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult1x3[4];
	arm_matrix_instance_f32 mult1x3;
	arm_mat_init_f32(&mult1x3, 1, 4, data_mult1x3);
 8001ea6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eaa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001eae:	2204      	movs	r2, #4
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	f009 feb5 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_mult1x1[1];
	arm_matrix_instance_f32 mult1x1;
	arm_mat_init_f32(&mult1x1, 1, 1, data_mult1x1);
 8001eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	f009 fead 	bl	800bc20 <arm_mat_init_f32>

	float32_t data_C_T[4];
	arm_matrix_instance_f32 C_T;
	arm_mat_init_f32(&C_T, 4, 1, data_C_T);
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	f107 0010 	add.w	r0, r7, #16
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	f009 fea5 	bl	800bc20 <arm_mat_init_f32>

	//sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
	arm_mat_trans_f32(&C, &C_T);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4837      	ldr	r0, [pc, #220]	; (8001fbc <update+0x14c>)
 8001ede:	f009 fd39 	bl	800b954 <arm_mat_trans_f32>
	arm_mat_mult_f32(&C, &P_new, &mult1x3);
 8001ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4935      	ldr	r1, [pc, #212]	; (8001fc0 <update+0x150>)
 8001eea:	4834      	ldr	r0, [pc, #208]	; (8001fbc <update+0x14c>)
 8001eec:	f009 fdf8 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult1x3, &C_T, &mult1x1);
 8001ef0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ef4:	f107 0110 	add.w	r1, r7, #16
 8001ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001efc:	4618      	mov	r0, r3
 8001efe:	f009 fdef 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_add_f32(&R, &mult1x1, &sumK);
 8001f02:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	482d      	ldr	r0, [pc, #180]	; (8001fc4 <update+0x154>)
 8001f0e:	f009 fe8b 	bl	800bc28 <arm_mat_add_f32>

	arm_matrix_instance_f32 I_sumK;
	float32_t data_I_sumK[1] = {1/data_sumK[0]};
 8001f12:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1e:	edc7 7a01 	vstr	s15, [r7, #4]
	arm_mat_init_f32(&I_sumK, 1, 1, data_I_sumK);
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	f107 0008 	add.w	r0, r7, #8
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	f009 fe78 	bl	800bc20 <arm_mat_init_f32>

	//K = multiply(multiply(P_new, transpose(C)), I_sumK);
	arm_mat_mult_f32(&P_new, &C_T, &mult3x1);
 8001f30:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4821      	ldr	r0, [pc, #132]	; (8001fc0 <update+0x150>)
 8001f3c:	f009 fdd0 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&mult3x1, &I_sumK, &K);
 8001f40:	f107 0108 	add.w	r1, r7, #8
 8001f44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <update+0x158>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f009 fdc8 	bl	800bae0 <arm_mat_mult_f32>

	//P = multiply(minus(I, multiply(K, C)), P_new);
	arm_mat_mult_f32(&K, &C, &mult3x3);
 8001f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f54:	461a      	mov	r2, r3
 8001f56:	4919      	ldr	r1, [pc, #100]	; (8001fbc <update+0x14c>)
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <update+0x158>)
 8001f5a:	f009 fdc1 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_sub_f32(&I, &mult3x3, &mult3x3);
 8001f5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f66:	4619      	mov	r1, r3
 8001f68:	4818      	ldr	r0, [pc, #96]	; (8001fcc <update+0x15c>)
 8001f6a:	f009 fd4f 	bl	800ba0c <arm_mat_sub_f32>
	arm_mat_mult_f32(&mult3x3, &P_new, &P);
 8001f6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <update+0x160>)
 8001f74:	4912      	ldr	r1, [pc, #72]	; (8001fc0 <update+0x150>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f009 fdb2 	bl	800bae0 <arm_mat_mult_f32>

	//data_input[0] = theta_now;
	data_input[0] = theta_now;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <update+0x164>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <update+0x168>)
 8001f82:	6013      	str	r3, [r2, #0]

	//y_old = multiply(C, x_new);
	arm_mat_mult_f32(&C, &x_new, &y_old);
 8001f84:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <update+0x16c>)
 8001f86:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <update+0x170>)
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <update+0x14c>)
 8001f8a:	f009 fda9 	bl	800bae0 <arm_mat_mult_f32>

	//y = minus(input, y_old);
	arm_mat_sub_f32(&input, &y_old, &y);
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <update+0x174>)
 8001f90:	4912      	ldr	r1, [pc, #72]	; (8001fdc <update+0x16c>)
 8001f92:	4815      	ldr	r0, [pc, #84]	; (8001fe8 <update+0x178>)
 8001f94:	f009 fd3a 	bl	800ba0c <arm_mat_sub_f32>

	//x = sum(multiply(K, y), x_new);
	arm_mat_mult_f32(&K, &y, &mult3x1);
 8001f98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <update+0x174>)
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <update+0x158>)
 8001fa2:	f009 fd9d 	bl	800bae0 <arm_mat_mult_f32>
	arm_mat_add_f32(&mult3x1, &x_new, &x);
 8001fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <update+0x17c>)
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <update+0x170>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f009 fe3a 	bl	800bc28 <arm_mat_add_f32>
}
 8001fb4:	bf00      	nop
 8001fb6:	37b8      	adds	r7, #184	; 0xb8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000418 	.word	0x20000418
 8001fc0:	20000458 	.word	0x20000458
 8001fc4:	20000420 	.word	0x20000420
 8001fc8:	20000410 	.word	0x20000410
 8001fcc:	200003f0 	.word	0x200003f0
 8001fd0:	20000450 	.word	0x20000450
 8001fd4:	200003d4 	.word	0x200003d4
 8001fd8:	200004b0 	.word	0x200004b0
 8001fdc:	20000438 	.word	0x20000438
 8001fe0:	20000448 	.word	0x20000448
 8001fe4:	20000430 	.word	0x20000430
 8001fe8:	20000428 	.word	0x20000428
 8001fec:	20000440 	.word	0x20000440

08001ff0 <kalmanfilter>:

void kalmanfilter()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	prediction();
 8001ff4:	f7ff fec8 	bl	8001d88 <prediction>
	update();
 8001ff8:	f7ff ff3a 	bl	8001e70 <update>
	position_kalman = data_x_new[0];
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <kalmanfilter+0x30>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a08      	ldr	r2, [pc, #32]	; (8002024 <kalmanfilter+0x34>)
 8002002:	6013      	str	r3, [r2, #0]
	omega_kalman = data_x_new[1];
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <kalmanfilter+0x30>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <kalmanfilter+0x38>)
 800200a:	6013      	str	r3, [r2, #0]
	alpha_kalman = data_x_new[2];
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <kalmanfilter+0x30>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <kalmanfilter+0x3c>)
 8002012:	6013      	str	r3, [r2, #0]
	jerk_kalman = data_x_new[3];
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <kalmanfilter+0x30>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <kalmanfilter+0x40>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200004d4 	.word	0x200004d4
 8002024:	200003e0 	.word	0x200003e0
 8002028:	200003e4 	.word	0x200003e4
 800202c:	200003e8 	.word	0x200003e8
 8002030:	200003ec 	.word	0x200003ec
 8002034:	00000000 	.word	0x00000000

08002038 <TrajectoryGenerator>:

void TrajectoryGenerator()
{	if(TrajectoryGenerator_Flag)
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	af00      	add	r7, sp, #0
 800203e:	4b54      	ldr	r3, [pc, #336]	; (8002190 <TrajectoryGenerator+0x158>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f001 805b 	beq.w	80030fe <TrajectoryGenerator+0x10c6>
		static float N;
		static float Va;
		static float Sa;
		static float Sv;

		j_max = positive(j_max);
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <TrajectoryGenerator+0x15c>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd4d 	bl	8000af0 <__aeabi_d2f>
 8002056:	4603      	mov	r3, r0
 8002058:	ee00 3a10 	vmov	s0, r3
 800205c:	f001 ffe0 	bl	8004020 <positive>
 8002060:	ee10 3a10 	vmov	r3, s0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa1b 	bl	80004a0 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4949      	ldr	r1, [pc, #292]	; (8002194 <TrajectoryGenerator+0x15c>)
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
		a_max = positive(a_max);
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <TrajectoryGenerator+0x160>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fd37 	bl	8000af0 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	ee00 3a10 	vmov	s0, r3
 8002088:	f001 ffca 	bl	8004020 <positive>
 800208c:	ee10 3a10 	vmov	r3, s0
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa05 	bl	80004a0 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	493f      	ldr	r1, [pc, #252]	; (8002198 <TrajectoryGenerator+0x160>)
 800209c:	e9c1 2300 	strd	r2, r3, [r1]
		w_max = positive(w_max);
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <TrajectoryGenerator+0x164>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fd21 	bl	8000af0 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	ee00 3a10 	vmov	s0, r3
 80020b4:	f001 ffb4 	bl	8004020 <positive>
 80020b8:	ee10 3a10 	vmov	r3, s0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f9ef 	bl	80004a0 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4935      	ldr	r1, [pc, #212]	; (800219c <TrajectoryGenerator+0x164>)
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]

		theta_0 = theta_now;
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <TrajectoryGenerator+0x168>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9e5 	bl	80004a0 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4932      	ldr	r1, [pc, #200]	; (80021a4 <TrajectoryGenerator+0x16c>)
 80020dc:	e9c1 2300 	strd	r2, r3, [r1]

		theta_dest = theta_f - theta_0;
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <TrajectoryGenerator+0x170>)
 80020e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e6:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <TrajectoryGenerator+0x16c>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe f878 	bl	80001e0 <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	492d      	ldr	r1, [pc, #180]	; (80021ac <TrajectoryGenerator+0x174>)
 80020f6:	e9c1 2300 	strd	r2, r3, [r1]

		if(theta_dest < 0)
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <TrajectoryGenerator+0x174>)
 80020fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f7fe fc94 	bl	8000a34 <__aeabi_dcmplt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <TrajectoryGenerator+0xf4>
		{
			theta_dest = -(theta_dest);
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <TrajectoryGenerator+0x174>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4614      	mov	r4, r2
 800211a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <TrajectoryGenerator+0x174>)
 8002120:	e9c3 4500 	strd	r4, r5, [r3]
			dir = 0;
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <TrajectoryGenerator+0x178>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e002      	b.n	8002132 <TrajectoryGenerator+0xfa>
		}

		else
		{
			dir = 1;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <TrajectoryGenerator+0x178>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
		}

		if(w_max*j_max < pow(a_max,2.0)){
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <TrajectoryGenerator+0x164>)
 8002134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <TrajectoryGenerator+0x15c>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fa07 	bl	8000550 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <TrajectoryGenerator+0x160>)
 800214c:	ed93 7b00 	vldr	d7, [r3]
 8002150:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002188 <TrajectoryGenerator+0x150>
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f009 fe84 	bl	800be68 <pow>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f7fe fc64 	bl	8000a34 <__aeabi_dcmplt>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d024      	beq.n	80021bc <TrajectoryGenerator+0x184>
			M=1.0;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <TrajectoryGenerator+0x17c>)
 8002174:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002178:	601a      	str	r2, [r3, #0]
			N=0.0;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <TrajectoryGenerator+0x180>)
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e043      	b.n	800220c <TrajectoryGenerator+0x1d4>
 8002184:	f3af 8000 	nop.w
 8002188:	00000000 	.word	0x00000000
 800218c:	40000000 	.word	0x40000000
 8002190:	200003d2 	.word	0x200003d2
 8002194:	20000070 	.word	0x20000070
 8002198:	20000068 	.word	0x20000068
 800219c:	20000060 	.word	0x20000060
 80021a0:	200003d4 	.word	0x200003d4
 80021a4:	20000598 	.word	0x20000598
 80021a8:	200005a0 	.word	0x200005a0
 80021ac:	200005a8 	.word	0x200005a8
 80021b0:	200000c1 	.word	0x200000c1
 80021b4:	2000067c 	.word	0x2000067c
 80021b8:	20000680 	.word	0x20000680
		}

		else if(w_max*j_max >= pow(a_max,2.0)){
 80021bc:	4b96      	ldr	r3, [pc, #600]	; (8002418 <TrajectoryGenerator+0x3e0>)
 80021be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c2:	4b96      	ldr	r3, [pc, #600]	; (800241c <TrajectoryGenerator+0x3e4>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe f9c2 	bl	8000550 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4614      	mov	r4, r2
 80021d2:	461d      	mov	r5, r3
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <TrajectoryGenerator+0x3e8>)
 80021d6:	ed93 7b00 	vldr	d7, [r3]
 80021da:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8002408 <TrajectoryGenerator+0x3d0>
 80021de:	eeb0 0a47 	vmov.f32	s0, s14
 80021e2:	eef0 0a67 	vmov.f32	s1, s15
 80021e6:	f009 fe3f 	bl	800be68 <pow>
 80021ea:	ec53 2b10 	vmov	r2, r3, d0
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe fc33 	bl	8000a5c <__aeabi_dcmpge>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <TrajectoryGenerator+0x1d4>
			M=0.0;
 80021fc:	4b89      	ldr	r3, [pc, #548]	; (8002424 <TrajectoryGenerator+0x3ec>)
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
			N=1.0;
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <TrajectoryGenerator+0x3f0>)
 8002206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800220a:	601a      	str	r2, [r3, #0]
		}

		Va = pow(a_max,2.0)/j_max;
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <TrajectoryGenerator+0x3e8>)
 800220e:	ed93 7b00 	vldr	d7, [r3]
 8002212:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002408 <TrajectoryGenerator+0x3d0>
 8002216:	eeb0 0a47 	vmov.f32	s0, s14
 800221a:	eef0 0a67 	vmov.f32	s1, s15
 800221e:	f009 fe23 	bl	800be68 <pow>
 8002222:	ec51 0b10 	vmov	r0, r1, d0
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <TrajectoryGenerator+0x3e4>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe faba 	bl	80007a4 <__aeabi_ddiv>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fc5a 	bl	8000af0 <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
 800223e:	4a7b      	ldr	r2, [pc, #492]	; (800242c <TrajectoryGenerator+0x3f4>)
 8002240:	6013      	str	r3, [r2, #0]
		Sa = (2.0*pow(a_max,3.0))/(pow(j_max,2.0));
 8002242:	4b77      	ldr	r3, [pc, #476]	; (8002420 <TrajectoryGenerator+0x3e8>)
 8002244:	ed93 7b00 	vldr	d7, [r3]
 8002248:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002410 <TrajectoryGenerator+0x3d8>
 800224c:	eeb0 0a47 	vmov.f32	s0, s14
 8002250:	eef0 0a67 	vmov.f32	s1, s15
 8002254:	f009 fe08 	bl	800be68 <pow>
 8002258:	ec51 0b10 	vmov	r0, r1, d0
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	f7fd ffc0 	bl	80001e4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4b6b      	ldr	r3, [pc, #428]	; (800241c <TrajectoryGenerator+0x3e4>)
 800226e:	ed93 7b00 	vldr	d7, [r3]
 8002272:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002408 <TrajectoryGenerator+0x3d0>
 8002276:	eeb0 0a47 	vmov.f32	s0, s14
 800227a:	eef0 0a67 	vmov.f32	s1, s15
 800227e:	f009 fdf3 	bl	800be68 <pow>
 8002282:	ec53 2b10 	vmov	r2, r3, d0
 8002286:	4620      	mov	r0, r4
 8002288:	4629      	mov	r1, r5
 800228a:	f7fe fa8b 	bl	80007a4 <__aeabi_ddiv>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fc2b 	bl	8000af0 <__aeabi_d2f>
 800229a:	4603      	mov	r3, r0
 800229c:	4a64      	ldr	r2, [pc, #400]	; (8002430 <TrajectoryGenerator+0x3f8>)
 800229e:	6013      	str	r3, [r2, #0]
		Sv = w_max*(M*(2.0*sqrt(w_max/j_max))+N*((w_max/a_max)+(a_max/j_max)));
 80022a0:	4b60      	ldr	r3, [pc, #384]	; (8002424 <TrajectoryGenerator+0x3ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f8fb 	bl	80004a0 <__aeabi_f2d>
 80022aa:	4604      	mov	r4, r0
 80022ac:	460d      	mov	r5, r1
 80022ae:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <TrajectoryGenerator+0x3e0>)
 80022b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <TrajectoryGenerator+0x3e4>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	f7fe fa73 	bl	80007a4 <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	ec43 2b17 	vmov	d7, r2, r3
 80022c6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ca:	eef0 0a67 	vmov.f32	s1, s15
 80022ce:	f009 fe3b 	bl	800bf48 <sqrt>
 80022d2:	ec51 0b10 	vmov	r0, r1, d0
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	f7fd ff83 	bl	80001e4 <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fe f933 	bl	8000550 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4690      	mov	r8, r2
 80022f0:	4699      	mov	r9, r3
 80022f2:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <TrajectoryGenerator+0x3f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f8d2 	bl	80004a0 <__aeabi_f2d>
 80022fc:	4604      	mov	r4, r0
 80022fe:	460d      	mov	r5, r1
 8002300:	4b45      	ldr	r3, [pc, #276]	; (8002418 <TrajectoryGenerator+0x3e0>)
 8002302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <TrajectoryGenerator+0x3e8>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe fa4a 	bl	80007a4 <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4692      	mov	sl, r2
 8002316:	469b      	mov	fp, r3
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <TrajectoryGenerator+0x3e8>)
 800231a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <TrajectoryGenerator+0x3e4>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe fa3e 	bl	80007a4 <__aeabi_ddiv>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4650      	mov	r0, sl
 800232e:	4659      	mov	r1, fp
 8002330:	f7fd ff58 	bl	80001e4 <__adddf3>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fe f908 	bl	8000550 <__aeabi_dmul>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4640      	mov	r0, r8
 8002346:	4649      	mov	r1, r9
 8002348:	f7fd ff4c 	bl	80001e4 <__adddf3>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <TrajectoryGenerator+0x3e0>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe f8f9 	bl	8000550 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fbc3 	bl	8000af0 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
 800236c:	4a31      	ldr	r2, [pc, #196]	; (8002434 <TrajectoryGenerator+0x3fc>)
 800236e:	6013      	str	r3, [r2, #0]

		if(w_max < Va){
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <TrajectoryGenerator+0x3f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f893 	bl	80004a0 <__aeabi_f2d>
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <TrajectoryGenerator+0x3e0>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe fb76 	bl	8000a70 <__aeabi_dcmpgt>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ea 	beq.w	8002560 <TrajectoryGenerator+0x528>
			if(theta_dest > Sa){
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <TrajectoryGenerator+0x3f8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f885 	bl	80004a0 <__aeabi_f2d>
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <TrajectoryGenerator+0x400>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fb4a 	bl	8000a34 <__aeabi_dcmplt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d050      	beq.n	8002448 <TrajectoryGenerator+0x410>
				//caseI
				tj = sqrt((w_max/j_max));
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <TrajectoryGenerator+0x3e0>)
 80023a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <TrajectoryGenerator+0x3e4>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f9f7 	bl	80007a4 <__aeabi_ddiv>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ec43 2b17 	vmov	d7, r2, r3
 80023be:	eeb0 0a47 	vmov.f32	s0, s14
 80023c2:	eef0 0a67 	vmov.f32	s1, s15
 80023c6:	f009 fdbf 	bl	800bf48 <sqrt>
 80023ca:	ec53 2b10 	vmov	r2, r3, d0
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fb8d 	bl	8000af0 <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <TrajectoryGenerator+0x404>)
 80023da:	6013      	str	r3, [r2, #0]
				ta = tj;
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <TrajectoryGenerator+0x404>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <TrajectoryGenerator+0x408>)
 80023e2:	6013      	str	r3, [r2, #0]
				tv = theta_dest/w_max;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <TrajectoryGenerator+0x400>)
 80023e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <TrajectoryGenerator+0x3e0>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f9d8 	bl	80007a4 <__aeabi_ddiv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fb78 	bl	8000af0 <__aeabi_d2f>
 8002400:	4603      	mov	r3, r0
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <TrajectoryGenerator+0x40c>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e223      	b.n	8002850 <TrajectoryGenerator+0x818>
 8002408:	00000000 	.word	0x00000000
 800240c:	40000000 	.word	0x40000000
 8002410:	00000000 	.word	0x00000000
 8002414:	40080000 	.word	0x40080000
 8002418:	20000060 	.word	0x20000060
 800241c:	20000070 	.word	0x20000070
 8002420:	20000068 	.word	0x20000068
 8002424:	2000067c 	.word	0x2000067c
 8002428:	20000680 	.word	0x20000680
 800242c:	20000684 	.word	0x20000684
 8002430:	20000688 	.word	0x20000688
 8002434:	2000068c 	.word	0x2000068c
 8002438:	200005a8 	.word	0x200005a8
 800243c:	2000058c 	.word	0x2000058c
 8002440:	20000590 	.word	0x20000590
 8002444:	20000594 	.word	0x20000594
			}
			else if(theta_dest < Sa){
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <TrajectoryGenerator+0x5d0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f827 	bl	80004a0 <__aeabi_f2d>
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <TrajectoryGenerator+0x5d4>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe fb0a 	bl	8000a70 <__aeabi_dcmpgt>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 81f6 	beq.w	8002850 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <TrajectoryGenerator+0x5d8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <TrajectoryGenerator+0x5d4>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fe fafc 	bl	8000a70 <__aeabi_dcmpgt>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d031      	beq.n	80024e2 <TrajectoryGenerator+0x4aa>
					//caseIV
					tj = pow((theta_dest/(2.0*j_max)),0.3333);
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <TrajectoryGenerator+0x5d4>)
 8002480:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002484:	4b63      	ldr	r3, [pc, #396]	; (8002614 <TrajectoryGenerator+0x5dc>)
 8002486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	f7fd fea9 	bl	80001e4 <__adddf3>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4620      	mov	r0, r4
 8002498:	4629      	mov	r1, r5
 800249a:	f7fe f983 	bl	80007a4 <__aeabi_ddiv>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	ec43 2b17 	vmov	d7, r2, r3
 80024a6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002600 <TrajectoryGenerator+0x5c8>
 80024aa:	eeb0 0a47 	vmov.f32	s0, s14
 80024ae:	eef0 0a67 	vmov.f32	s1, s15
 80024b2:	f009 fcd9 	bl	800be68 <pow>
 80024b6:	ec53 2b10 	vmov	r2, r3, d0
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe fb17 	bl	8000af0 <__aeabi_d2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a54      	ldr	r2, [pc, #336]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80024c6:	6013      	str	r3, [r2, #0]
					ta = tj;
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a53      	ldr	r2, [pc, #332]	; (800261c <TrajectoryGenerator+0x5e4>)
 80024ce:	6013      	str	r3, [r2, #0]
					tv = 2.0*tj;
 80024d0:	4b51      	ldr	r3, [pc, #324]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <TrajectoryGenerator+0x5e8>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]
 80024e0:	e1b6      	b.n	8002850 <TrajectoryGenerator+0x818>
				}
				else if(theta_dest > Sv){
 80024e2:	4b4b      	ldr	r3, [pc, #300]	; (8002610 <TrajectoryGenerator+0x5d8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd ffda 	bl	80004a0 <__aeabi_f2d>
 80024ec:	4b47      	ldr	r3, [pc, #284]	; (800260c <TrajectoryGenerator+0x5d4>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fe fa9f 	bl	8000a34 <__aeabi_dcmplt>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 81a9 	beq.w	8002850 <TrajectoryGenerator+0x818>
					//caseIII
					tj = sqrt((w_max/j_max));
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <TrajectoryGenerator+0x5ec>)
 8002500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <TrajectoryGenerator+0x5dc>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f94b 	bl	80007a4 <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b17 	vmov	d7, r2, r3
 8002516:	eeb0 0a47 	vmov.f32	s0, s14
 800251a:	eef0 0a67 	vmov.f32	s1, s15
 800251e:	f009 fd13 	bl	800bf48 <sqrt>
 8002522:	ec53 2b10 	vmov	r2, r3, d0
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe fae1 	bl	8000af0 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
 8002530:	4a39      	ldr	r2, [pc, #228]	; (8002618 <TrajectoryGenerator+0x5e0>)
 8002532:	6013      	str	r3, [r2, #0]
					ta = tj;
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <TrajectoryGenerator+0x5e0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a38      	ldr	r2, [pc, #224]	; (800261c <TrajectoryGenerator+0x5e4>)
 800253a:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <TrajectoryGenerator+0x5d4>)
 800253e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <TrajectoryGenerator+0x5ec>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe f92c 	bl	80007a4 <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe facc 	bl	8000af0 <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	4a31      	ldr	r2, [pc, #196]	; (8002620 <TrajectoryGenerator+0x5e8>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e177      	b.n	8002850 <TrajectoryGenerator+0x818>
				}
			}
		}
		else if(w_max >= Va){
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <TrajectoryGenerator+0x5f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff9b 	bl	80004a0 <__aeabi_f2d>
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <TrajectoryGenerator+0x5ec>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe fa6a 	bl	8000a48 <__aeabi_dcmple>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 816a 	beq.w	8002850 <TrajectoryGenerator+0x818>
			if(theta_dest < Sa){
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <TrajectoryGenerator+0x5d0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ff8d 	bl	80004a0 <__aeabi_f2d>
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <TrajectoryGenerator+0x5d4>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe fa70 	bl	8000a70 <__aeabi_dcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04a      	beq.n	800262c <TrajectoryGenerator+0x5f4>
				//caseII
				tj = pow((theta_dest/(2.0*j_max)),0.3333);
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <TrajectoryGenerator+0x5d4>)
 8002598:	e9d3 4500 	ldrd	r4, r5, [r3]
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <TrajectoryGenerator+0x5dc>)
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	f7fd fe1d 	bl	80001e4 <__adddf3>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fe f8f7 	bl	80007a4 <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b17 	vmov	d7, r2, r3
 80025be:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002600 <TrajectoryGenerator+0x5c8>
 80025c2:	eeb0 0a47 	vmov.f32	s0, s14
 80025c6:	eef0 0a67 	vmov.f32	s1, s15
 80025ca:	f009 fc4d 	bl	800be68 <pow>
 80025ce:	ec53 2b10 	vmov	r2, r3, d0
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fe fa8b 	bl	8000af0 <__aeabi_d2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80025de:	6013      	str	r3, [r2, #0]
				ta = tj;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <TrajectoryGenerator+0x5e4>)
 80025e6:	6013      	str	r3, [r2, #0]
				tv = 2.0*tj;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <TrajectoryGenerator+0x5e0>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <TrajectoryGenerator+0x5e8>)
 80025f4:	edc3 7a00 	vstr	s15, [r3]
 80025f8:	e12a      	b.n	8002850 <TrajectoryGenerator+0x818>
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
 8002600:	85f06f69 	.word	0x85f06f69
 8002604:	3fd554c9 	.word	0x3fd554c9
 8002608:	20000688 	.word	0x20000688
 800260c:	200005a8 	.word	0x200005a8
 8002610:	2000068c 	.word	0x2000068c
 8002614:	20000070 	.word	0x20000070
 8002618:	2000058c 	.word	0x2000058c
 800261c:	20000590 	.word	0x20000590
 8002620:	20000594 	.word	0x20000594
 8002624:	20000060 	.word	0x20000060
 8002628:	20000684 	.word	0x20000684
			}
			else if(theta_dest >= Sa){
 800262c:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <TrajectoryGenerator+0x770>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff35 	bl	80004a0 <__aeabi_f2d>
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <TrajectoryGenerator+0x774>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fe fa04 	bl	8000a48 <__aeabi_dcmple>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8104 	beq.w	8002850 <TrajectoryGenerator+0x818>
				if(theta_dest < Sv){
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <TrajectoryGenerator+0x778>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff27 	bl	80004a0 <__aeabi_f2d>
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <TrajectoryGenerator+0x774>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe fa0a 	bl	8000a70 <__aeabi_dcmpgt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80b6 	beq.w	80027d0 <TrajectoryGenerator+0x798>
					//caseVI
					tj = a_max/j_max;
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <TrajectoryGenerator+0x77c>)
 8002666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266a:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <TrajectoryGenerator+0x780>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fe f898 	bl	80007a4 <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fa38 	bl	8000af0 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <TrajectoryGenerator+0x784>)
 8002684:	6013      	str	r3, [r2, #0]
					ta = 0.5*(sqrt(((4.0*theta_dest*pow(j_max,2.0))+pow(a_max,3.0))/(a_max*pow(j_max,2.0)))-(a_max/j_max));
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <TrajectoryGenerator+0x774>)
 8002688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <TrajectoryGenerator+0x788>)
 8002692:	f7fd ff5d 	bl	8000550 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4614      	mov	r4, r2
 800269c:	461d      	mov	r5, r3
 800269e:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <TrajectoryGenerator+0x780>)
 80026a0:	ed93 7b00 	vldr	d7, [r3]
 80026a4:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002798 <TrajectoryGenerator+0x760>
 80026a8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ac:	eef0 0a67 	vmov.f32	s1, s15
 80026b0:	f009 fbda 	bl	800be68 <pow>
 80026b4:	ec53 2b10 	vmov	r2, r3, d0
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ff48 	bl	8000550 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4614      	mov	r4, r2
 80026c6:	461d      	mov	r5, r3
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <TrajectoryGenerator+0x77c>)
 80026ca:	ed93 7b00 	vldr	d7, [r3]
 80026ce:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80027a0 <TrajectoryGenerator+0x768>
 80026d2:	eeb0 0a47 	vmov.f32	s0, s14
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	f009 fbc5 	bl	800be68 <pow>
 80026de:	ec53 2b10 	vmov	r2, r3, d0
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fd7d 	bl	80001e4 <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4614      	mov	r4, r2
 80026f0:	461d      	mov	r5, r3
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <TrajectoryGenerator+0x780>)
 80026f4:	ed93 7b00 	vldr	d7, [r3]
 80026f8:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8002798 <TrajectoryGenerator+0x760>
 80026fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002700:	eef0 0a67 	vmov.f32	s1, s15
 8002704:	f009 fbb0 	bl	800be68 <pow>
 8002708:	ec51 0b10 	vmov	r0, r1, d0
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <TrajectoryGenerator+0x77c>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff1d 	bl	8000550 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fe f841 	bl	80007a4 <__aeabi_ddiv>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	ec43 2b17 	vmov	d7, r2, r3
 800272a:	eeb0 0a47 	vmov.f32	s0, s14
 800272e:	eef0 0a67 	vmov.f32	s1, s15
 8002732:	f009 fc09 	bl	800bf48 <sqrt>
 8002736:	ec55 4b10 	vmov	r4, r5, d0
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <TrajectoryGenerator+0x77c>)
 800273c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <TrajectoryGenerator+0x780>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fe f82d 	bl	80007a4 <__aeabi_ddiv>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4620      	mov	r0, r4
 8002750:	4629      	mov	r1, r5
 8002752:	f7fd fd45 	bl	80001e0 <__aeabi_dsub>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <TrajectoryGenerator+0x78c>)
 8002764:	f7fd fef4 	bl	8000550 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe f9be 	bl	8000af0 <__aeabi_d2f>
 8002774:	4603      	mov	r3, r0
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <TrajectoryGenerator+0x790>)
 8002778:	6013      	str	r3, [r2, #0]
					tv = ta + tj;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <TrajectoryGenerator+0x790>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <TrajectoryGenerator+0x784>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <TrajectoryGenerator+0x794>)
 800278c:	edc3 7a00 	vstr	s15, [r3]
 8002790:	e05e      	b.n	8002850 <TrajectoryGenerator+0x818>
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	00000000 	.word	0x00000000
 800279c:	40000000 	.word	0x40000000
 80027a0:	00000000 	.word	0x00000000
 80027a4:	40080000 	.word	0x40080000
 80027a8:	20000688 	.word	0x20000688
 80027ac:	200005a8 	.word	0x200005a8
 80027b0:	2000068c 	.word	0x2000068c
 80027b4:	20000068 	.word	0x20000068
 80027b8:	20000070 	.word	0x20000070
 80027bc:	2000058c 	.word	0x2000058c
 80027c0:	40100000 	.word	0x40100000
 80027c4:	3fe00000 	.word	0x3fe00000
 80027c8:	20000590 	.word	0x20000590
 80027cc:	20000594 	.word	0x20000594
				}
				else if(theta_dest >= Sv){
 80027d0:	4b6a      	ldr	r3, [pc, #424]	; (800297c <TrajectoryGenerator+0x944>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fe63 	bl	80004a0 <__aeabi_f2d>
 80027da:	4b69      	ldr	r3, [pc, #420]	; (8002980 <TrajectoryGenerator+0x948>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fe f932 	bl	8000a48 <__aeabi_dcmple>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d032      	beq.n	8002850 <TrajectoryGenerator+0x818>
					//caseV
					tj = a_max/j_max;
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <TrajectoryGenerator+0x94c>)
 80027ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f0:	4b65      	ldr	r3, [pc, #404]	; (8002988 <TrajectoryGenerator+0x950>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd ffd5 	bl	80007a4 <__aeabi_ddiv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f975 	bl	8000af0 <__aeabi_d2f>
 8002806:	4603      	mov	r3, r0
 8002808:	4a60      	ldr	r2, [pc, #384]	; (800298c <TrajectoryGenerator+0x954>)
 800280a:	6013      	str	r3, [r2, #0]
					ta = w_max/a_max;
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <TrajectoryGenerator+0x958>)
 800280e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002812:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <TrajectoryGenerator+0x94c>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd ffc4 	bl	80007a4 <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f964 	bl	8000af0 <__aeabi_d2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <TrajectoryGenerator+0x95c>)
 800282c:	6013      	str	r3, [r2, #0]
					tv = theta_dest/w_max;
 800282e:	4b54      	ldr	r3, [pc, #336]	; (8002980 <TrajectoryGenerator+0x948>)
 8002830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002834:	4b56      	ldr	r3, [pc, #344]	; (8002990 <TrajectoryGenerator+0x958>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd ffb3 	bl	80007a4 <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f953 	bl	8000af0 <__aeabi_d2f>
 800284a:	4603      	mov	r3, r0
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <TrajectoryGenerator+0x960>)
 800284e:	6013      	str	r3, [r2, #0]
				}
			}
		}

		t1 = tj;
 8002850:	4b4e      	ldr	r3, [pc, #312]	; (800298c <TrajectoryGenerator+0x954>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a51      	ldr	r2, [pc, #324]	; (800299c <TrajectoryGenerator+0x964>)
 8002856:	6013      	str	r3, [r2, #0]
		t2 = ta;
 8002858:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <TrajectoryGenerator+0x95c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <TrajectoryGenerator+0x968>)
 800285e:	6013      	str	r3, [r2, #0]
		t3 = ta + tj;
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <TrajectoryGenerator+0x95c>)
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <TrajectoryGenerator+0x954>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <TrajectoryGenerator+0x96c>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
		t4 = tv;
 8002876:	4b48      	ldr	r3, [pc, #288]	; (8002998 <TrajectoryGenerator+0x960>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <TrajectoryGenerator+0x970>)
 800287c:	6013      	str	r3, [r2, #0]
		t5 = tv + tj;
 800287e:	4b46      	ldr	r3, [pc, #280]	; (8002998 <TrajectoryGenerator+0x960>)
 8002880:	ed93 7a00 	vldr	s14, [r3]
 8002884:	4b41      	ldr	r3, [pc, #260]	; (800298c <TrajectoryGenerator+0x954>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <TrajectoryGenerator+0x974>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
		t6 = tv + ta;
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <TrajectoryGenerator+0x960>)
 8002896:	ed93 7a00 	vldr	s14, [r3]
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <TrajectoryGenerator+0x95c>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <TrajectoryGenerator+0x978>)
 80028a6:	edc3 7a00 	vstr	s15, [r3]
		t7 = tv + tj + ta;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <TrajectoryGenerator+0x960>)
 80028ac:	ed93 7a00 	vldr	s14, [r3]
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <TrajectoryGenerator+0x954>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <TrajectoryGenerator+0x95c>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <TrajectoryGenerator+0x97c>)
 80028c6:	edc3 7a00 	vstr	s15, [r3]

		theta_ref = theta_0;
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <TrajectoryGenerator+0x980>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	493a      	ldr	r1, [pc, #232]	; (80029bc <TrajectoryGenerator+0x984>)
 80028d2:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0;
 80028d6:	493a      	ldr	r1, [pc, #232]	; (80029c0 <TrajectoryGenerator+0x988>)
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <TrajectoryGenerator+0x98c>)
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

		if (dir == 0)
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <TrajectoryGenerator+0x990>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d16b      	bne.n	80029cc <TrajectoryGenerator+0x994>
		{
			j_max = negative(j_max);
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <TrajectoryGenerator+0x950>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f8f7 	bl	8000af0 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	ee00 3a10 	vmov	s0, r3
 8002908:	f001 fb6e 	bl	8003fe8 <negative>
 800290c:	ee10 3a10 	vmov	r3, s0
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fdc5 	bl	80004a0 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	491b      	ldr	r1, [pc, #108]	; (8002988 <TrajectoryGenerator+0x950>)
 800291c:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = negative(a_max);
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <TrajectoryGenerator+0x94c>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f7fe f8e1 	bl	8000af0 <__aeabi_d2f>
 800292e:	4603      	mov	r3, r0
 8002930:	ee00 3a10 	vmov	s0, r3
 8002934:	f001 fb58 	bl	8003fe8 <negative>
 8002938:	ee10 3a10 	vmov	r3, s0
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fdaf 	bl	80004a0 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	490f      	ldr	r1, [pc, #60]	; (8002984 <TrajectoryGenerator+0x94c>)
 8002948:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = negative(w_max);
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <TrajectoryGenerator+0x958>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f8cb 	bl	8000af0 <__aeabi_d2f>
 800295a:	4603      	mov	r3, r0
 800295c:	ee00 3a10 	vmov	s0, r3
 8002960:	f001 fb42 	bl	8003fe8 <negative>
 8002964:	ee10 3a10 	vmov	r3, s0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd99 	bl	80004a0 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4907      	ldr	r1, [pc, #28]	; (8002990 <TrajectoryGenerator+0x958>)
 8002974:	e9c1 2300 	strd	r2, r3, [r1]
 8002978:	e06a      	b.n	8002a50 <TrajectoryGenerator+0xa18>
 800297a:	bf00      	nop
 800297c:	2000068c 	.word	0x2000068c
 8002980:	200005a8 	.word	0x200005a8
 8002984:	20000068 	.word	0x20000068
 8002988:	20000070 	.word	0x20000070
 800298c:	2000058c 	.word	0x2000058c
 8002990:	20000060 	.word	0x20000060
 8002994:	20000590 	.word	0x20000590
 8002998:	20000594 	.word	0x20000594
 800299c:	20000570 	.word	0x20000570
 80029a0:	20000574 	.word	0x20000574
 80029a4:	20000578 	.word	0x20000578
 80029a8:	2000057c 	.word	0x2000057c
 80029ac:	20000580 	.word	0x20000580
 80029b0:	20000584 	.word	0x20000584
 80029b4:	20000588 	.word	0x20000588
 80029b8:	20000598 	.word	0x20000598
 80029bc:	200005f8 	.word	0x200005f8
 80029c0:	20000600 	.word	0x20000600
 80029c4:	20000608 	.word	0x20000608
 80029c8:	200000c1 	.word	0x200000c1
		}

		else
		{
			j_max = positive(j_max);
 80029cc:	4bcc      	ldr	r3, [pc, #816]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f88b 	bl	8000af0 <__aeabi_d2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	ee00 3a10 	vmov	s0, r3
 80029e0:	f001 fb1e 	bl	8004020 <positive>
 80029e4:	ee10 3a10 	vmov	r3, s0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd59 	bl	80004a0 <__aeabi_f2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	49c3      	ldr	r1, [pc, #780]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 80029f4:	e9c1 2300 	strd	r2, r3, [r1]
			a_max = positive(a_max);
 80029f8:	4bc2      	ldr	r3, [pc, #776]	; (8002d04 <TrajectoryGenerator+0xccc>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f875 	bl	8000af0 <__aeabi_d2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	ee00 3a10 	vmov	s0, r3
 8002a0c:	f001 fb08 	bl	8004020 <positive>
 8002a10:	ee10 3a10 	vmov	r3, s0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd43 	bl	80004a0 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	49b9      	ldr	r1, [pc, #740]	; (8002d04 <TrajectoryGenerator+0xccc>)
 8002a20:	e9c1 2300 	strd	r2, r3, [r1]
			w_max = positive(w_max);
 8002a24:	4bb8      	ldr	r3, [pc, #736]	; (8002d08 <TrajectoryGenerator+0xcd0>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f85f 	bl	8000af0 <__aeabi_d2f>
 8002a32:	4603      	mov	r3, r0
 8002a34:	ee00 3a10 	vmov	s0, r3
 8002a38:	f001 faf2 	bl	8004020 <positive>
 8002a3c:	ee10 3a10 	vmov	r3, s0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd2d 	bl	80004a0 <__aeabi_f2d>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	49af      	ldr	r1, [pc, #700]	; (8002d08 <TrajectoryGenerator+0xcd0>)
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		p[0] = (1.0/6.0)*j_max*pow(t1,3.0);
 8002a50:	4bab      	ldr	r3, [pc, #684]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	a3a4      	add	r3, pc, #656	; (adr r3, 8002ce8 <TrajectoryGenerator+0xcb0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fd78 	bl	8000550 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4614      	mov	r4, r2
 8002a66:	461d      	mov	r5, r3
 8002a68:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8002cf0 <TrajectoryGenerator+0xcb8>
 8002a7a:	ec43 2b10 	vmov	d0, r2, r3
 8002a7e:	f009 f9f3 	bl	800be68 <pow>
 8002a82:	ec53 2b10 	vmov	r2, r3, d0
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fd61 	bl	8000550 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f82b 	bl	8000af0 <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a9c      	ldr	r2, [pc, #624]	; (8002d10 <TrajectoryGenerator+0xcd8>)
 8002a9e:	6013      	str	r3, [r2, #0]
		v[0] = 0.5*j_max*pow(t1,2.0);
 8002aa0:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 8002aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <TrajectoryGenerator+0xcdc>)
 8002aac:	f7fd fd50 	bl	8000550 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcef 	bl	80004a0 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002cf8 <TrajectoryGenerator+0xcc0>
 8002aca:	ec43 2b10 	vmov	d0, r2, r3
 8002ace:	f009 f9cb 	bl	800be68 <pow>
 8002ad2:	ec53 2b10 	vmov	r2, r3, d0
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fd39 	bl	8000550 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f803 	bl	8000af0 <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a8a      	ldr	r2, [pc, #552]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002aee:	6013      	str	r3, [r2, #0]
		a[0] = j_max*t1;
 8002af0:	4b86      	ldr	r3, [pc, #536]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fcd3 	bl	80004a0 <__aeabi_f2d>
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fd26 	bl	8000550 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fd fff0 	bl	8000af0 <__aeabi_d2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a82      	ldr	r2, [pc, #520]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002b14:	6013      	str	r3, [r2, #0]

		p[1] = p[0] + v[0]*(t2-t1) + 0.5*a[0]*pow((t2-t1),2.0);
 8002b16:	4b7e      	ldr	r3, [pc, #504]	; (8002d10 <TrajectoryGenerator+0xcd8>)
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002b1e:	edd3 6a00 	vldr	s13, [r3]
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002b24:	ed93 6a00 	vldr	s12, [r3]
 8002b28:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fcaf 	bl	80004a0 <__aeabi_f2d>
 8002b42:	4604      	mov	r4, r0
 8002b44:	460d      	mov	r5, r1
 8002b46:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fca8 	bl	80004a0 <__aeabi_f2d>
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <TrajectoryGenerator+0xcdc>)
 8002b56:	f7fd fcfb 	bl	8000550 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002b64:	ed93 7a00 	vldr	s14, [r3]
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	ee17 0a90 	vmov	r0, s15
 8002b76:	f7fd fc93 	bl	80004a0 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002cf8 <TrajectoryGenerator+0xcc0>
 8002b82:	ec43 2b10 	vmov	d0, r2, r3
 8002b86:	f009 f96f 	bl	800be68 <pow>
 8002b8a:	ec53 2b10 	vmov	r2, r3, d0
 8002b8e:	4640      	mov	r0, r8
 8002b90:	4649      	mov	r1, r9
 8002b92:	f7fd fcdd 	bl	8000550 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f7fd fb21 	bl	80001e4 <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ffa1 	bl	8000af0 <__aeabi_d2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <TrajectoryGenerator+0xcd8>)
 8002bb2:	6053      	str	r3, [r2, #4]
		v[1] = v[0] + a[0]*(t2-t1);
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002bbc:	edd3 6a00 	vldr	s13, [r3]
 8002bc0:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002bc2:	ed93 6a00 	vldr	s12, [r3]
 8002bc6:	4b51      	ldr	r3, [pc, #324]	; (8002d0c <TrajectoryGenerator+0xcd4>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002bda:	edc3 7a01 	vstr	s15, [r3, #4]
		a[1] = a[0];
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4e      	ldr	r2, [pc, #312]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002be4:	6053      	str	r3, [r2, #4]

		p[2] = p[1] + v[1]*(t3-t2) + 0.5*a[1]*pow((t3-t2),2.0) - j_max*pow((t3-t2),3.0)/6.0;
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <TrajectoryGenerator+0xcd8>)
 8002be8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002bee:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <TrajectoryGenerator+0xcec>)
 8002bf4:	ed93 6a00 	vldr	s12, [r3]
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	ee17 0a90 	vmov	r0, s15
 8002c0e:	f7fd fc47 	bl	80004a0 <__aeabi_f2d>
 8002c12:	4604      	mov	r4, r0
 8002c14:	460d      	mov	r5, r1
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <TrajectoryGenerator+0xce4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc40 	bl	80004a0 <__aeabi_f2d>
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <TrajectoryGenerator+0xcdc>)
 8002c26:	f7fd fc93 	bl	8000550 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <TrajectoryGenerator+0xcec>)
 8002c34:	ed93 7a00 	vldr	s14, [r3]
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c42:	ee17 0a90 	vmov	r0, s15
 8002c46:	f7fd fc2b 	bl	80004a0 <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8002cf8 <TrajectoryGenerator+0xcc0>
 8002c52:	ec43 2b10 	vmov	d0, r2, r3
 8002c56:	f009 f907 	bl	800be68 <pow>
 8002c5a:	ec53 2b10 	vmov	r2, r3, d0
 8002c5e:	4640      	mov	r0, r8
 8002c60:	4649      	mov	r1, r9
 8002c62:	f7fd fc75 	bl	8000550 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	f7fd fab9 	bl	80001e4 <__adddf3>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4614      	mov	r4, r2
 8002c78:	461d      	mov	r5, r3
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <TrajectoryGenerator+0xcec>)
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <TrajectoryGenerator+0xce8>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c8a:	ee17 0a90 	vmov	r0, s15
 8002c8e:	f7fd fc07 	bl	80004a0 <__aeabi_f2d>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002cf0 <TrajectoryGenerator+0xcb8>
 8002c9a:	ec43 2b10 	vmov	d0, r2, r3
 8002c9e:	f009 f8e3 	bl	800be68 <pow>
 8002ca2:	ec51 0b10 	vmov	r0, r1, d0
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <TrajectoryGenerator+0xcc8>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fc50 	bl	8000550 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <TrajectoryGenerator+0xcf0>)
 8002cbe:	f7fd fd71 	bl	80007a4 <__aeabi_ddiv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fa89 	bl	80001e0 <__aeabi_dsub>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7fd ff0b 	bl	8000af0 <__aeabi_d2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <TrajectoryGenerator+0xcd8>)
 8002cde:	6093      	str	r3, [r2, #8]
		v[2] = v[1] + a[1]*(t3-t2) - 0.5*j_max*pow((t3-t2),2.0);
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <TrajectoryGenerator+0xce0>)
 8002ce2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ce6:	e021      	b.n	8002d2c <TrajectoryGenerator+0xcf4>
 8002ce8:	55555555 	.word	0x55555555
 8002cec:	3fc55555 	.word	0x3fc55555
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	40080000 	.word	0x40080000
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40000000 	.word	0x40000000
 8002d00:	20000070 	.word	0x20000070
 8002d04:	20000068 	.word	0x20000068
 8002d08:	20000060 	.word	0x20000060
 8002d0c:	20000570 	.word	0x20000570
 8002d10:	200005e0 	.word	0x200005e0
 8002d14:	3fe00000 	.word	0x3fe00000
 8002d18:	200005c8 	.word	0x200005c8
 8002d1c:	200005b0 	.word	0x200005b0
 8002d20:	20000574 	.word	0x20000574
 8002d24:	20000578 	.word	0x20000578
 8002d28:	40180000 	.word	0x40180000
 8002d2c:	4bd0      	ldr	r3, [pc, #832]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002d2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d32:	4bd0      	ldr	r3, [pc, #832]	; (8003074 <TrajectoryGenerator+0x103c>)
 8002d34:	ed93 6a00 	vldr	s12, [r3]
 8002d38:	4bcf      	ldr	r3, [pc, #828]	; (8003078 <TrajectoryGenerator+0x1040>)
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4a:	ee17 0a90 	vmov	r0, s15
 8002d4e:	f7fd fba7 	bl	80004a0 <__aeabi_f2d>
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	4bc9      	ldr	r3, [pc, #804]	; (800307c <TrajectoryGenerator+0x1044>)
 8002d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4bc7      	ldr	r3, [pc, #796]	; (8003080 <TrajectoryGenerator+0x1048>)
 8002d62:	f7fd fbf5 	bl	8000550 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4690      	mov	r8, r2
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	4bc1      	ldr	r3, [pc, #772]	; (8003074 <TrajectoryGenerator+0x103c>)
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	4bc0      	ldr	r3, [pc, #768]	; (8003078 <TrajectoryGenerator+0x1040>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	ee17 0a90 	vmov	r0, s15
 8002d82:	f7fd fb8d 	bl	80004a0 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003060 <TrajectoryGenerator+0x1028>
 8002d8e:	ec43 2b10 	vmov	d0, r2, r3
 8002d92:	f009 f869 	bl	800be68 <pow>
 8002d96:	ec53 2b10 	vmov	r2, r3, d0
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	f7fd fbd7 	bl	8000550 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fa19 	bl	80001e0 <__aeabi_dsub>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fe9b 	bl	8000af0 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4ab1      	ldr	r2, [pc, #708]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002dbe:	6093      	str	r3, [r2, #8]
		a[2] = a[1] - j_max*(t3-t2);
 8002dc0:	4bab      	ldr	r3, [pc, #684]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb6b 	bl	80004a0 <__aeabi_f2d>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	460d      	mov	r5, r1
 8002dce:	4ba9      	ldr	r3, [pc, #676]	; (8003074 <TrajectoryGenerator+0x103c>)
 8002dd0:	ed93 7a00 	vldr	s14, [r3]
 8002dd4:	4ba8      	ldr	r3, [pc, #672]	; (8003078 <TrajectoryGenerator+0x1040>)
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dde:	ee17 0a90 	vmov	r0, s15
 8002de2:	f7fd fb5d 	bl	80004a0 <__aeabi_f2d>
 8002de6:	4ba5      	ldr	r3, [pc, #660]	; (800307c <TrajectoryGenerator+0x1044>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fbb0 	bl	8000550 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4620      	mov	r0, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	f7fd f9f2 	bl	80001e0 <__aeabi_dsub>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fd fe74 	bl	8000af0 <__aeabi_d2f>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a99      	ldr	r2, [pc, #612]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002e0c:	6093      	str	r3, [r2, #8]

		p[3] = p[2] + v[2]*(t4-t3);
 8002e0e:	4b9e      	ldr	r3, [pc, #632]	; (8003088 <TrajectoryGenerator+0x1050>)
 8002e10:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e14:	4b9b      	ldr	r3, [pc, #620]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002e16:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e1a:	4b9c      	ldr	r3, [pc, #624]	; (800308c <TrajectoryGenerator+0x1054>)
 8002e1c:	ed93 6a00 	vldr	s12, [r3]
 8002e20:	4b94      	ldr	r3, [pc, #592]	; (8003074 <TrajectoryGenerator+0x103c>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	4b95      	ldr	r3, [pc, #596]	; (8003088 <TrajectoryGenerator+0x1050>)
 8002e34:	edc3 7a03 	vstr	s15, [r3, #12]
		v[3] = v[2];
 8002e38:	4b92      	ldr	r3, [pc, #584]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a91      	ldr	r2, [pc, #580]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002e3e:	60d3      	str	r3, [r2, #12]
		a[3] = a[2];
 8002e40:	4b8b      	ldr	r3, [pc, #556]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a8a      	ldr	r2, [pc, #552]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002e46:	60d3      	str	r3, [r2, #12]

		p[4] = p[3] + v[3]*(t5-t4) - j_max*pow((t5-t4),3.0)/6.0;
 8002e48:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <TrajectoryGenerator+0x1050>)
 8002e4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002e50:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e54:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002e56:	ed93 6a00 	vldr	s12, [r3]
 8002e5a:	4b8c      	ldr	r3, [pc, #560]	; (800308c <TrajectoryGenerator+0x1054>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	ee17 0a90 	vmov	r0, s15
 8002e70:	f7fd fb16 	bl	80004a0 <__aeabi_f2d>
 8002e74:	4604      	mov	r4, r0
 8002e76:	460d      	mov	r5, r1
 8002e78:	4b85      	ldr	r3, [pc, #532]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002e7a:	ed93 7a00 	vldr	s14, [r3]
 8002e7e:	4b83      	ldr	r3, [pc, #524]	; (800308c <TrajectoryGenerator+0x1054>)
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e88:	ee17 0a90 	vmov	r0, s15
 8002e8c:	f7fd fb08 	bl	80004a0 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003068 <TrajectoryGenerator+0x1030>
 8002e98:	ec43 2b10 	vmov	d0, r2, r3
 8002e9c:	f008 ffe4 	bl	800be68 <pow>
 8002ea0:	ec51 0b10 	vmov	r0, r1, d0
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <TrajectoryGenerator+0x1044>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fb51 	bl	8000550 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <TrajectoryGenerator+0x105c>)
 8002ebc:	f7fd fc72 	bl	80007a4 <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd f98a 	bl	80001e0 <__aeabi_dsub>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fe0c 	bl	8000af0 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4a6b      	ldr	r2, [pc, #428]	; (8003088 <TrajectoryGenerator+0x1050>)
 8002edc:	6113      	str	r3, [r2, #16]
		v[4] = v[3] - 0.5*j_max*pow((t5-t4),2.0);
 8002ede:	4b69      	ldr	r3, [pc, #420]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fadc 	bl	80004a0 <__aeabi_f2d>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	460d      	mov	r5, r1
 8002eec:	4b63      	ldr	r3, [pc, #396]	; (800307c <TrajectoryGenerator+0x1044>)
 8002eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	4b62      	ldr	r3, [pc, #392]	; (8003080 <TrajectoryGenerator+0x1048>)
 8002ef8:	f7fd fb2a 	bl	8000550 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4690      	mov	r8, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	4b62      	ldr	r3, [pc, #392]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002f06:	ed93 7a00 	vldr	s14, [r3]
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <TrajectoryGenerator+0x1054>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f14:	ee17 0a90 	vmov	r0, s15
 8002f18:	f7fd fac2 	bl	80004a0 <__aeabi_f2d>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8003060 <TrajectoryGenerator+0x1028>
 8002f24:	ec43 2b10 	vmov	d0, r2, r3
 8002f28:	f008 ff9e 	bl	800be68 <pow>
 8002f2c:	ec53 2b10 	vmov	r2, r3, d0
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd fb0c 	bl	8000550 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd f94e 	bl	80001e0 <__aeabi_dsub>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fdd0 	bl	8000af0 <__aeabi_d2f>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002f54:	6113      	str	r3, [r2, #16]
		a[4] = a[3]- j_max*(t5-t4);
 8002f56:	4b46      	ldr	r3, [pc, #280]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd faa0 	bl	80004a0 <__aeabi_f2d>
 8002f60:	4604      	mov	r4, r0
 8002f62:	460d      	mov	r5, r1
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002f66:	ed93 7a00 	vldr	s14, [r3]
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <TrajectoryGenerator+0x1054>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f74:	ee17 0a90 	vmov	r0, s15
 8002f78:	f7fd fa92 	bl	80004a0 <__aeabi_f2d>
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	; (800307c <TrajectoryGenerator+0x1044>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fae5 	bl	8000550 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f927 	bl	80001e0 <__aeabi_dsub>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fda9 	bl	8000af0 <__aeabi_d2f>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a33      	ldr	r2, [pc, #204]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002fa2:	6113      	str	r3, [r2, #16]

		p[5] = p[4] + v[4]*(t6-t5) + 0.5*(a[4])*pow((t6-t5),2.0);
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <TrajectoryGenerator+0x1050>)
 8002fa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002faa:	4b36      	ldr	r3, [pc, #216]	; (8003084 <TrajectoryGenerator+0x104c>)
 8002fac:	edd3 6a04 	vldr	s13, [r3, #16]
 8002fb0:	4b39      	ldr	r3, [pc, #228]	; (8003098 <TrajectoryGenerator+0x1060>)
 8002fb2:	ed93 6a00 	vldr	s12, [r3]
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc8:	ee17 0a90 	vmov	r0, s15
 8002fcc:	f7fd fa68 	bl	80004a0 <__aeabi_f2d>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <TrajectoryGenerator+0x1038>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fa61 	bl	80004a0 <__aeabi_f2d>
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <TrajectoryGenerator+0x1048>)
 8002fe4:	f7fd fab4 	bl	8000550 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4690      	mov	r8, r2
 8002fee:	4699      	mov	r9, r3
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <TrajectoryGenerator+0x1060>)
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <TrajectoryGenerator+0x1058>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003000:	ee17 0a90 	vmov	r0, s15
 8003004:	f7fd fa4c 	bl	80004a0 <__aeabi_f2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003060 <TrajectoryGenerator+0x1028>
 8003010:	ec43 2b10 	vmov	d0, r2, r3
 8003014:	f008 ff28 	bl	800be68 <pow>
 8003018:	ec53 2b10 	vmov	r2, r3, d0
 800301c:	4640      	mov	r0, r8
 800301e:	4649      	mov	r1, r9
 8003020:	f7fd fa96 	bl	8000550 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f8da 	bl	80001e4 <__adddf3>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f7fd fd5a 	bl	8000af0 <__aeabi_d2f>
 800303c:	4603      	mov	r3, r0
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <TrajectoryGenerator+0x1050>)
 8003040:	6153      	str	r3, [r2, #20]
		v[5] = v[4] + a[4]*(t6-t5);
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <TrajectoryGenerator+0x104c>)
 8003044:	ed93 7a04 	vldr	s14, [r3, #16]
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <TrajectoryGenerator+0x1038>)
 800304a:	edd3 6a04 	vldr	s13, [r3, #16]
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <TrajectoryGenerator+0x1060>)
 8003050:	ed93 6a00 	vldr	s12, [r3]
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <TrajectoryGenerator+0x1058>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800305e:	e01d      	b.n	800309c <TrajectoryGenerator+0x1064>
 8003060:	00000000 	.word	0x00000000
 8003064:	40000000 	.word	0x40000000
 8003068:	00000000 	.word	0x00000000
 800306c:	40080000 	.word	0x40080000
 8003070:	200005b0 	.word	0x200005b0
 8003074:	20000578 	.word	0x20000578
 8003078:	20000574 	.word	0x20000574
 800307c:	20000070 	.word	0x20000070
 8003080:	3fe00000 	.word	0x3fe00000
 8003084:	200005c8 	.word	0x200005c8
 8003088:	200005e0 	.word	0x200005e0
 800308c:	2000057c 	.word	0x2000057c
 8003090:	20000580 	.word	0x20000580
 8003094:	40180000 	.word	0x40180000
 8003098:	20000584 	.word	0x20000584
 800309c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <TrajectoryGenerator+0x10cc>)
 80030a6:	edc3 7a05 	vstr	s15, [r3, #20]
		a[5] = a[4];
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <TrajectoryGenerator+0x10d0>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	4a16      	ldr	r2, [pc, #88]	; (8003108 <TrajectoryGenerator+0x10d0>)
 80030b0:	6153      	str	r3, [r2, #20]

		//Set Flag to Go
		TrajectoryGenerator_Flag = 0;
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <TrajectoryGenerator+0x10d4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
		Go_Flag = 1;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <TrajectoryGenerator+0x10d8>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]

		//Reset Cascade PID
		e1 = 0;
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <TrajectoryGenerator+0x10dc>)
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
		s1 = 0;
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <TrajectoryGenerator+0x10e0>)
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
		p1 = 0;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <TrajectoryGenerator+0x10e4>)
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
		u1 = 0;
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <TrajectoryGenerator+0x10e8>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
		e2 = 0;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <TrajectoryGenerator+0x10ec>)
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
		s2 = 0;
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <TrajectoryGenerator+0x10f0>)
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
		p2 = 0;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <TrajectoryGenerator+0x10f4>)
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
		u2 = 0;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <TrajectoryGenerator+0x10f8>)
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
	}
}
 80030fe:	bf00      	nop
 8003100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003104:	200005c8 	.word	0x200005c8
 8003108:	200005b0 	.word	0x200005b0
 800310c:	200003d2 	.word	0x200003d2
 8003110:	200003d1 	.word	0x200003d1
 8003114:	2000060c 	.word	0x2000060c
 8003118:	20000610 	.word	0x20000610
 800311c:	20000614 	.word	0x20000614
 8003120:	20000618 	.word	0x20000618
 8003124:	2000061c 	.word	0x2000061c
 8003128:	20000620 	.word	0x20000620
 800312c:	20000624 	.word	0x20000624
 8003130:	20000628 	.word	0x20000628
 8003134:	00000000 	.word	0x00000000

08003138 <TrajectoryEvaluation>:

void TrajectoryEvaluation()
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	af00      	add	r7, sp, #0
	if( 0 <= t && t < t1){
 800313e:	4b8e      	ldr	r3, [pc, #568]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	db70      	blt.n	8003230 <TrajectoryEvaluation+0xf8>
 800314e:	4b8a      	ldr	r3, [pc, #552]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003150:	ed93 7a00 	vldr	s14, [r3]
 8003154:	4b89      	ldr	r3, [pc, #548]	; (800337c <TrajectoryEvaluation+0x244>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d565      	bpl.n	8003230 <TrajectoryEvaluation+0xf8>
		theta_ref = theta_0 + (1.0/6.0)*j_max*pow(t,3.0);
 8003164:	4b86      	ldr	r3, [pc, #536]	; (8003380 <TrajectoryEvaluation+0x248>)
 8003166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316a:	a37d      	add	r3, pc, #500	; (adr r3, 8003360 <TrajectoryEvaluation+0x228>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f9ee 	bl	8000550 <__aeabi_dmul>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <TrajectoryEvaluation+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f98d 	bl	80004a0 <__aeabi_f2d>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003368 <TrajectoryEvaluation+0x230>
 800318e:	ec43 2b10 	vmov	d0, r2, r3
 8003192:	f008 fe69 	bl	800be68 <pow>
 8003196:	ec53 2b10 	vmov	r2, r3, d0
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f9d7 	bl	8000550 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <TrajectoryEvaluation+0x24c>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f818 	bl	80001e4 <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4973      	ldr	r1, [pc, #460]	; (8003388 <TrajectoryEvaluation+0x250>)
 80031ba:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = 0.5*j_max*pow(t,2.0);
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <TrajectoryEvaluation+0x248>)
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b70      	ldr	r3, [pc, #448]	; (800338c <TrajectoryEvaluation+0x254>)
 80031ca:	f7fd f9c1 	bl	8000550 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	461d      	mov	r5, r3
 80031d6:	4b68      	ldr	r3, [pc, #416]	; (8003378 <TrajectoryEvaluation+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f960 	bl	80004a0 <__aeabi_f2d>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8003370 <TrajectoryEvaluation+0x238>
 80031e8:	ec43 2b10 	vmov	d0, r2, r3
 80031ec:	f008 fe3c 	bl	800be68 <pow>
 80031f0:	ec53 2b10 	vmov	r2, r3, d0
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fd f9aa 	bl	8000550 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4963      	ldr	r1, [pc, #396]	; (8003390 <TrajectoryEvaluation+0x258>)
 8003202:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = j_max*t;
 8003206:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f948 	bl	80004a0 <__aeabi_f2d>
 8003210:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <TrajectoryEvaluation+0x248>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd f99b 	bl	8000550 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7fd fc65 	bl	8000af0 <__aeabi_d2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <TrajectoryEvaluation+0x25c>)
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	f000 bd31 	b.w	8003c92 <TrajectoryEvaluation+0xb5a>
	}
	else if (t1 <= t && t< t2){
 8003230:	4b52      	ldr	r3, [pc, #328]	; (800337c <TrajectoryEvaluation+0x244>)
 8003232:	ed93 7a00 	vldr	s14, [r3]
 8003236:	4b50      	ldr	r3, [pc, #320]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	f200 80b0 	bhi.w	80033a8 <TrajectoryEvaluation+0x270>
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <TrajectoryEvaluation+0x240>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	4b52      	ldr	r3, [pc, #328]	; (8003398 <TrajectoryEvaluation+0x260>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	f140 80a4 	bpl.w	80033a8 <TrajectoryEvaluation+0x270>
		theta_ref = theta_0 + p[0] + v[0]*(t-t1) + 0.5*a[0]*pow((t-t1),2.0);
 8003260:	4b4e      	ldr	r3, [pc, #312]	; (800339c <TrajectoryEvaluation+0x264>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f91b 	bl	80004a0 <__aeabi_f2d>
 800326a:	4b46      	ldr	r3, [pc, #280]	; (8003384 <TrajectoryEvaluation+0x24c>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f7fc ffb8 	bl	80001e4 <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <TrajectoryEvaluation+0x268>)
 800327e:	ed93 7a00 	vldr	s14, [r3]
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003284:	edd3 6a00 	vldr	s13, [r3]
 8003288:	4b3c      	ldr	r3, [pc, #240]	; (800337c <TrajectoryEvaluation+0x244>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	ee17 0a90 	vmov	r0, s15
 800329a:	f7fd f901 	bl	80004a0 <__aeabi_f2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4620      	mov	r0, r4
 80032a4:	4629      	mov	r1, r5
 80032a6:	f7fc ff9d 	bl	80001e4 <__adddf3>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	461d      	mov	r5, r3
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <TrajectoryEvaluation+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f8f2 	bl	80004a0 <__aeabi_f2d>
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <TrajectoryEvaluation+0x254>)
 80032c2:	f7fd f945 	bl	8000550 <__aeabi_dmul>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <TrajectoryEvaluation+0x240>)
 80032d0:	ed93 7a00 	vldr	s14, [r3]
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <TrajectoryEvaluation+0x244>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032de:	ee17 0a90 	vmov	r0, s15
 80032e2:	f7fd f8dd 	bl	80004a0 <__aeabi_f2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003370 <TrajectoryEvaluation+0x238>
 80032ee:	ec43 2b10 	vmov	d0, r2, r3
 80032f2:	f008 fdb9 	bl	800be68 <pow>
 80032f6:	ec53 2b10 	vmov	r2, r3, d0
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fd f927 	bl	8000550 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fc ff6b 	bl	80001e4 <__adddf3>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	491d      	ldr	r1, [pc, #116]	; (8003388 <TrajectoryEvaluation+0x250>)
 8003314:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[0] + a[0]*(t-t1);
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <TrajectoryEvaluation+0x268>)
 800331a:	ed93 7a00 	vldr	s14, [r3]
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <TrajectoryEvaluation+0x26c>)
 8003320:	edd3 6a00 	vldr	s13, [r3]
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <TrajectoryEvaluation+0x240>)
 8003326:	ed93 6a00 	vldr	s12, [r3]
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <TrajectoryEvaluation+0x244>)
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333c:	ee17 0a90 	vmov	r0, s15
 8003340:	f7fd f8ae 	bl	80004a0 <__aeabi_f2d>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4911      	ldr	r1, [pc, #68]	; (8003390 <TrajectoryEvaluation+0x258>)
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[0];
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <TrajectoryEvaluation+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <TrajectoryEvaluation+0x25c>)
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	f000 bc9c 	b.w	8003c92 <TrajectoryEvaluation+0xb5a>
 800335a:	bf00      	nop
 800335c:	f3af 8000 	nop.w
 8003360:	55555555 	.word	0x55555555
 8003364:	3fc55555 	.word	0x3fc55555
 8003368:	00000000 	.word	0x00000000
 800336c:	40080000 	.word	0x40080000
 8003370:	00000000 	.word	0x00000000
 8003374:	40000000 	.word	0x40000000
 8003378:	2000056c 	.word	0x2000056c
 800337c:	20000570 	.word	0x20000570
 8003380:	20000070 	.word	0x20000070
 8003384:	20000598 	.word	0x20000598
 8003388:	200005f8 	.word	0x200005f8
 800338c:	3fe00000 	.word	0x3fe00000
 8003390:	20000600 	.word	0x20000600
 8003394:	20000608 	.word	0x20000608
 8003398:	20000574 	.word	0x20000574
 800339c:	200005e0 	.word	0x200005e0
 80033a0:	200005c8 	.word	0x200005c8
 80033a4:	200005b0 	.word	0x200005b0
	}
	else if (t2 <= t && t < t3){
 80033a8:	4bb5      	ldr	r3, [pc, #724]	; (8003680 <TrajectoryEvaluation+0x548>)
 80033aa:	ed93 7a00 	vldr	s14, [r3]
 80033ae:	4bb5      	ldr	r3, [pc, #724]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	f200 8107 	bhi.w	80035ce <TrajectoryEvaluation+0x496>
 80033c0:	4bb0      	ldr	r3, [pc, #704]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80033c2:	ed93 7a00 	vldr	s14, [r3]
 80033c6:	4bb0      	ldr	r3, [pc, #704]	; (8003688 <TrajectoryEvaluation+0x550>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	f140 80fb 	bpl.w	80035ce <TrajectoryEvaluation+0x496>
		theta_ref = theta_0 + p[1] + v[1]*(t-t2) + 0.5*a[1]*pow((t-t2),2.0) - j_max*pow((t-t2),3.0)/6.0;
 80033d8:	4bac      	ldr	r3, [pc, #688]	; (800368c <TrajectoryEvaluation+0x554>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f85f 	bl	80004a0 <__aeabi_f2d>
 80033e2:	4bab      	ldr	r3, [pc, #684]	; (8003690 <TrajectoryEvaluation+0x558>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fc fefc 	bl	80001e4 <__adddf3>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4ba7      	ldr	r3, [pc, #668]	; (8003694 <TrajectoryEvaluation+0x55c>)
 80033f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80033fa:	4ba2      	ldr	r3, [pc, #648]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80033fc:	edd3 6a00 	vldr	s13, [r3]
 8003400:	4b9f      	ldr	r3, [pc, #636]	; (8003680 <TrajectoryEvaluation+0x548>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	ee17 0a90 	vmov	r0, s15
 8003412:	f7fd f845 	bl	80004a0 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fc fee1 	bl	80001e4 <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4614      	mov	r4, r2
 8003428:	461d      	mov	r5, r3
 800342a:	4b9b      	ldr	r3, [pc, #620]	; (8003698 <TrajectoryEvaluation+0x560>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f836 	bl	80004a0 <__aeabi_f2d>
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b98      	ldr	r3, [pc, #608]	; (800369c <TrajectoryEvaluation+0x564>)
 800343a:	f7fd f889 	bl	8000550 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4690      	mov	r8, r2
 8003444:	4699      	mov	r9, r3
 8003446:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <TrajectoryEvaluation+0x54c>)
 8003448:	ed93 7a00 	vldr	s14, [r3]
 800344c:	4b8c      	ldr	r3, [pc, #560]	; (8003680 <TrajectoryEvaluation+0x548>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003456:	ee17 0a90 	vmov	r0, s15
 800345a:	f7fd f821 	bl	80004a0 <__aeabi_f2d>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8003670 <TrajectoryEvaluation+0x538>
 8003466:	ec43 2b10 	vmov	d0, r2, r3
 800346a:	f008 fcfd 	bl	800be68 <pow>
 800346e:	ec53 2b10 	vmov	r2, r3, d0
 8003472:	4640      	mov	r0, r8
 8003474:	4649      	mov	r1, r9
 8003476:	f7fd f86b 	bl	8000550 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f7fc feaf 	bl	80001e4 <__adddf3>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4614      	mov	r4, r2
 800348c:	461d      	mov	r5, r3
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <TrajectoryEvaluation+0x54c>)
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	4b7a      	ldr	r3, [pc, #488]	; (8003680 <TrajectoryEvaluation+0x548>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	ee17 0a90 	vmov	r0, s15
 80034a2:	f7fc fffd 	bl	80004a0 <__aeabi_f2d>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8003678 <TrajectoryEvaluation+0x540>
 80034ae:	ec43 2b10 	vmov	d0, r2, r3
 80034b2:	f008 fcd9 	bl	800be68 <pow>
 80034b6:	ec51 0b10 	vmov	r0, r1, d0
 80034ba:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <TrajectoryEvaluation+0x568>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f846 	bl	8000550 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	4b74      	ldr	r3, [pc, #464]	; (80036a4 <TrajectoryEvaluation+0x56c>)
 80034d2:	f7fd f967 	bl	80007a4 <__aeabi_ddiv>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fc fe7f 	bl	80001e0 <__aeabi_dsub>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4970      	ldr	r1, [pc, #448]	; (80036a8 <TrajectoryEvaluation+0x570>)
 80034e8:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[1] + a[1]*(t-t2) - 0.5*j_max*pow((t-t2),2.0);
 80034ec:	4b69      	ldr	r3, [pc, #420]	; (8003694 <TrajectoryEvaluation+0x55c>)
 80034ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80034f2:	4b69      	ldr	r3, [pc, #420]	; (8003698 <TrajectoryEvaluation+0x560>)
 80034f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80034f8:	4b62      	ldr	r3, [pc, #392]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80034fa:	ed93 6a00 	vldr	s12, [r3]
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <TrajectoryEvaluation+0x548>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	ee17 0a90 	vmov	r0, s15
 8003514:	f7fc ffc4 	bl	80004a0 <__aeabi_f2d>
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
 800351c:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <TrajectoryEvaluation+0x568>)
 800351e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	4b5d      	ldr	r3, [pc, #372]	; (800369c <TrajectoryEvaluation+0x564>)
 8003528:	f7fd f812 	bl	8000550 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4690      	mov	r8, r2
 8003532:	4699      	mov	r9, r3
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <TrajectoryEvaluation+0x54c>)
 8003536:	ed93 7a00 	vldr	s14, [r3]
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <TrajectoryEvaluation+0x548>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003544:	ee17 0a90 	vmov	r0, s15
 8003548:	f7fc ffaa 	bl	80004a0 <__aeabi_f2d>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8003670 <TrajectoryEvaluation+0x538>
 8003554:	ec43 2b10 	vmov	d0, r2, r3
 8003558:	f008 fc86 	bl	800be68 <pow>
 800355c:	ec53 2b10 	vmov	r2, r3, d0
 8003560:	4640      	mov	r0, r8
 8003562:	4649      	mov	r1, r9
 8003564:	f7fc fff4 	bl	8000550 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fe36 	bl	80001e0 <__aeabi_dsub>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	494c      	ldr	r1, [pc, #304]	; (80036ac <TrajectoryEvaluation+0x574>)
 800357a:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[1] - j_max*(t-t2);
 800357e:	4b46      	ldr	r3, [pc, #280]	; (8003698 <TrajectoryEvaluation+0x560>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fc ff8c 	bl	80004a0 <__aeabi_f2d>
 8003588:	4604      	mov	r4, r0
 800358a:	460d      	mov	r5, r1
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <TrajectoryEvaluation+0x54c>)
 800358e:	ed93 7a00 	vldr	s14, [r3]
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <TrajectoryEvaluation+0x548>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359c:	ee17 0a90 	vmov	r0, s15
 80035a0:	f7fc ff7e 	bl	80004a0 <__aeabi_f2d>
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <TrajectoryEvaluation+0x568>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fc ffd1 	bl	8000550 <__aeabi_dmul>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fc fe13 	bl	80001e0 <__aeabi_dsub>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd fa95 	bl	8000af0 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <TrajectoryEvaluation+0x578>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e361      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
	}
	else if (t3 <= t && t < t4 ){
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <TrajectoryEvaluation+0x550>)
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	d869      	bhi.n	80036b8 <TrajectoryEvaluation+0x580>
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <TrajectoryEvaluation+0x54c>)
 80035e6:	ed93 7a00 	vldr	s14, [r3]
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <TrajectoryEvaluation+0x57c>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d55e      	bpl.n	80036b8 <TrajectoryEvaluation+0x580>
		theta_ref = theta_0 + p[2] + v[2]*(t-t3);
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <TrajectoryEvaluation+0x554>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff4e 	bl	80004a0 <__aeabi_f2d>
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <TrajectoryEvaluation+0x558>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f7fc fdeb 	bl	80001e4 <__adddf3>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4614      	mov	r4, r2
 8003614:	461d      	mov	r5, r3
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <TrajectoryEvaluation+0x55c>)
 8003618:	ed93 7a02 	vldr	s14, [r3, #8]
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <TrajectoryEvaluation+0x54c>)
 800361e:	edd3 6a00 	vldr	s13, [r3]
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <TrajectoryEvaluation+0x550>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	ee17 0a90 	vmov	r0, s15
 8003634:	f7fc ff34 	bl	80004a0 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fc fdd0 	bl	80001e4 <__adddf3>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4917      	ldr	r1, [pc, #92]	; (80036a8 <TrajectoryEvaluation+0x570>)
 800364a:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[2];
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <TrajectoryEvaluation+0x55c>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff24 	bl	80004a0 <__aeabi_f2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4913      	ldr	r1, [pc, #76]	; (80036ac <TrajectoryEvaluation+0x574>)
 800365e:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = 0;
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <TrajectoryEvaluation+0x578>)
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e312      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
 800366c:	f3af 8000 	nop.w
 8003670:	00000000 	.word	0x00000000
 8003674:	40000000 	.word	0x40000000
 8003678:	00000000 	.word	0x00000000
 800367c:	40080000 	.word	0x40080000
 8003680:	20000574 	.word	0x20000574
 8003684:	2000056c 	.word	0x2000056c
 8003688:	20000578 	.word	0x20000578
 800368c:	200005e0 	.word	0x200005e0
 8003690:	20000598 	.word	0x20000598
 8003694:	200005c8 	.word	0x200005c8
 8003698:	200005b0 	.word	0x200005b0
 800369c:	3fe00000 	.word	0x3fe00000
 80036a0:	20000070 	.word	0x20000070
 80036a4:	40180000 	.word	0x40180000
 80036a8:	200005f8 	.word	0x200005f8
 80036ac:	20000600 	.word	0x20000600
 80036b0:	20000608 	.word	0x20000608
 80036b4:	2000057c 	.word	0x2000057c
	}
	else if (t4 <= t && t < t5 ){
 80036b8:	4bb3      	ldr	r3, [pc, #716]	; (8003988 <TrajectoryEvaluation+0x850>)
 80036ba:	ed93 7a00 	vldr	s14, [r3]
 80036be:	4bb3      	ldr	r3, [pc, #716]	; (800398c <TrajectoryEvaluation+0x854>)
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036cc:	f200 80be 	bhi.w	800384c <TrajectoryEvaluation+0x714>
 80036d0:	4bae      	ldr	r3, [pc, #696]	; (800398c <TrajectoryEvaluation+0x854>)
 80036d2:	ed93 7a00 	vldr	s14, [r3]
 80036d6:	4bae      	ldr	r3, [pc, #696]	; (8003990 <TrajectoryEvaluation+0x858>)
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	f140 80b2 	bpl.w	800384c <TrajectoryEvaluation+0x714>
		theta_ref = theta_0 + p[3] + v[3]*(t-t4) - j_max*pow((t-t4),3.0)/6.0;
 80036e8:	4baa      	ldr	r3, [pc, #680]	; (8003994 <TrajectoryEvaluation+0x85c>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc fed7 	bl	80004a0 <__aeabi_f2d>
 80036f2:	4ba9      	ldr	r3, [pc, #676]	; (8003998 <TrajectoryEvaluation+0x860>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc fd74 	bl	80001e4 <__adddf3>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4690      	mov	r8, r2
 8003702:	4699      	mov	r9, r3
 8003704:	4ba5      	ldr	r3, [pc, #660]	; (800399c <TrajectoryEvaluation+0x864>)
 8003706:	ed93 7a03 	vldr	s14, [r3, #12]
 800370a:	4ba0      	ldr	r3, [pc, #640]	; (800398c <TrajectoryEvaluation+0x854>)
 800370c:	edd3 6a00 	vldr	s13, [r3]
 8003710:	4b9d      	ldr	r3, [pc, #628]	; (8003988 <TrajectoryEvaluation+0x850>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	ee17 0a90 	vmov	r0, s15
 8003722:	f7fc febd 	bl	80004a0 <__aeabi_f2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4640      	mov	r0, r8
 800372c:	4649      	mov	r1, r9
 800372e:	f7fc fd59 	bl	80001e4 <__adddf3>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4690      	mov	r8, r2
 8003738:	4699      	mov	r9, r3
 800373a:	4b94      	ldr	r3, [pc, #592]	; (800398c <TrajectoryEvaluation+0x854>)
 800373c:	ed93 7a00 	vldr	s14, [r3]
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <TrajectoryEvaluation+0x850>)
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374a:	ee17 0a90 	vmov	r0, s15
 800374e:	f7fc fea7 	bl	80004a0 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003978 <TrajectoryEvaluation+0x840>
 800375a:	ec43 2b10 	vmov	d0, r2, r3
 800375e:	f008 fb83 	bl	800be68 <pow>
 8003762:	ec51 0b10 	vmov	r0, r1, d0
 8003766:	4b8e      	ldr	r3, [pc, #568]	; (80039a0 <TrajectoryEvaluation+0x868>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fc fef0 	bl	8000550 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	4b89      	ldr	r3, [pc, #548]	; (80039a4 <TrajectoryEvaluation+0x86c>)
 800377e:	f7fd f811 	bl	80007a4 <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4640      	mov	r0, r8
 8003788:	4649      	mov	r1, r9
 800378a:	f7fc fd29 	bl	80001e0 <__aeabi_dsub>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4985      	ldr	r1, [pc, #532]	; (80039a8 <TrajectoryEvaluation+0x870>)
 8003794:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[3] - 0.5*j_max*pow((t-t4),2.0);
 8003798:	4b80      	ldr	r3, [pc, #512]	; (800399c <TrajectoryEvaluation+0x864>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fe7f 	bl	80004a0 <__aeabi_f2d>
 80037a2:	4680      	mov	r8, r0
 80037a4:	4689      	mov	r9, r1
 80037a6:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <TrajectoryEvaluation+0x868>)
 80037a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <TrajectoryEvaluation+0x874>)
 80037b2:	f7fc fecd 	bl	8000550 <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4692      	mov	sl, r2
 80037bc:	469b      	mov	fp, r3
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <TrajectoryEvaluation+0x854>)
 80037c0:	ed93 7a00 	vldr	s14, [r3]
 80037c4:	4b70      	ldr	r3, [pc, #448]	; (8003988 <TrajectoryEvaluation+0x850>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	ee17 0a90 	vmov	r0, s15
 80037d2:	f7fc fe65 	bl	80004a0 <__aeabi_f2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003980 <TrajectoryEvaluation+0x848>
 80037de:	ec43 2b10 	vmov	d0, r2, r3
 80037e2:	f008 fb41 	bl	800be68 <pow>
 80037e6:	ec53 2b10 	vmov	r2, r3, d0
 80037ea:	4650      	mov	r0, sl
 80037ec:	4659      	mov	r1, fp
 80037ee:	f7fc feaf 	bl	8000550 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4640      	mov	r0, r8
 80037f8:	4649      	mov	r1, r9
 80037fa:	f7fc fcf1 	bl	80001e0 <__aeabi_dsub>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	496b      	ldr	r1, [pc, #428]	; (80039b0 <TrajectoryEvaluation+0x878>)
 8003804:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = -j_max*(t-t4);
 8003808:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <TrajectoryEvaluation+0x868>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	4614      	mov	r4, r2
 8003810:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003814:	4b5d      	ldr	r3, [pc, #372]	; (800398c <TrajectoryEvaluation+0x854>)
 8003816:	ed93 7a00 	vldr	s14, [r3]
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <TrajectoryEvaluation+0x850>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003824:	ee17 0a90 	vmov	r0, s15
 8003828:	f7fc fe3a 	bl	80004a0 <__aeabi_f2d>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4620      	mov	r0, r4
 8003832:	4629      	mov	r1, r5
 8003834:	f7fc fe8c 	bl	8000550 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f7fd f956 	bl	8000af0 <__aeabi_d2f>
 8003844:	4603      	mov	r3, r0
 8003846:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <TrajectoryEvaluation+0x87c>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e222      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
	}
	else if (t5 <= t && t < t6 ){
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <TrajectoryEvaluation+0x858>)
 800384e:	ed93 7a00 	vldr	s14, [r3]
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <TrajectoryEvaluation+0x854>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003860:	f200 80ae 	bhi.w	80039c0 <TrajectoryEvaluation+0x888>
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <TrajectoryEvaluation+0x854>)
 8003866:	ed93 7a00 	vldr	s14, [r3]
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <TrajectoryEvaluation+0x880>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003878:	f140 80a2 	bpl.w	80039c0 <TrajectoryEvaluation+0x888>
		theta_ref = theta_0 + p[4] + v[4]*(t-t5) + 0.5*a[4]*pow((t-t5),2.0);
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <TrajectoryEvaluation+0x85c>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fe0d 	bl	80004a0 <__aeabi_f2d>
 8003886:	4b44      	ldr	r3, [pc, #272]	; (8003998 <TrajectoryEvaluation+0x860>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fcaa 	bl	80001e4 <__adddf3>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	4b40      	ldr	r3, [pc, #256]	; (800399c <TrajectoryEvaluation+0x864>)
 800389a:	ed93 7a04 	vldr	s14, [r3, #16]
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <TrajectoryEvaluation+0x854>)
 80038a0:	edd3 6a00 	vldr	s13, [r3]
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <TrajectoryEvaluation+0x858>)
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	ee17 0a90 	vmov	r0, s15
 80038b6:	f7fc fdf3 	bl	80004a0 <__aeabi_f2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fc fc8f 	bl	80001e4 <__adddf3>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4614      	mov	r4, r2
 80038cc:	461d      	mov	r5, r3
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <TrajectoryEvaluation+0x884>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fde4 	bl	80004a0 <__aeabi_f2d>
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <TrajectoryEvaluation+0x874>)
 80038de:	f7fc fe37 	bl	8000550 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <TrajectoryEvaluation+0x854>)
 80038ec:	ed93 7a00 	vldr	s14, [r3]
 80038f0:	4b27      	ldr	r3, [pc, #156]	; (8003990 <TrajectoryEvaluation+0x858>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fa:	ee17 0a90 	vmov	r0, s15
 80038fe:	f7fc fdcf 	bl	80004a0 <__aeabi_f2d>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8003980 <TrajectoryEvaluation+0x848>
 800390a:	ec43 2b10 	vmov	d0, r2, r3
 800390e:	f008 faab 	bl	800be68 <pow>
 8003912:	ec53 2b10 	vmov	r2, r3, d0
 8003916:	4640      	mov	r0, r8
 8003918:	4649      	mov	r1, r9
 800391a:	f7fc fe19 	bl	8000550 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4620      	mov	r0, r4
 8003924:	4629      	mov	r1, r5
 8003926:	f7fc fc5d 	bl	80001e4 <__adddf3>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <TrajectoryEvaluation+0x870>)
 8003930:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[4] + a[4]*(t-t5);
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <TrajectoryEvaluation+0x864>)
 8003936:	ed93 7a04 	vldr	s14, [r3, #16]
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <TrajectoryEvaluation+0x884>)
 800393c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <TrajectoryEvaluation+0x854>)
 8003942:	ed93 6a00 	vldr	s12, [r3]
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <TrajectoryEvaluation+0x858>)
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003958:	ee17 0a90 	vmov	r0, s15
 800395c:	f7fc fda0 	bl	80004a0 <__aeabi_f2d>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <TrajectoryEvaluation+0x878>)
 8003966:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[4];
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <TrajectoryEvaluation+0x884>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <TrajectoryEvaluation+0x87c>)
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e18e      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
 8003974:	f3af 8000 	nop.w
 8003978:	00000000 	.word	0x00000000
 800397c:	40080000 	.word	0x40080000
 8003980:	00000000 	.word	0x00000000
 8003984:	40000000 	.word	0x40000000
 8003988:	2000057c 	.word	0x2000057c
 800398c:	2000056c 	.word	0x2000056c
 8003990:	20000580 	.word	0x20000580
 8003994:	200005e0 	.word	0x200005e0
 8003998:	20000598 	.word	0x20000598
 800399c:	200005c8 	.word	0x200005c8
 80039a0:	20000070 	.word	0x20000070
 80039a4:	40180000 	.word	0x40180000
 80039a8:	200005f8 	.word	0x200005f8
 80039ac:	3fe00000 	.word	0x3fe00000
 80039b0:	20000600 	.word	0x20000600
 80039b4:	20000608 	.word	0x20000608
 80039b8:	20000584 	.word	0x20000584
 80039bc:	200005b0 	.word	0x200005b0
	}
	else if (t6 <= t && t < t7 ){
 80039c0:	4bbb      	ldr	r3, [pc, #748]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 80039c2:	ed93 7a00 	vldr	s14, [r3]
 80039c6:	4bbb      	ldr	r3, [pc, #748]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	f200 8107 	bhi.w	8003be6 <TrajectoryEvaluation+0xaae>
 80039d8:	4bb6      	ldr	r3, [pc, #728]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 80039da:	ed93 7a00 	vldr	s14, [r3]
 80039de:	4bb6      	ldr	r3, [pc, #728]	; (8003cb8 <TrajectoryEvaluation+0xb80>)
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	f140 80fb 	bpl.w	8003be6 <TrajectoryEvaluation+0xaae>
		theta_ref = theta_0 + p[5] + v[5]*(t-t6) + 0.5*a[5]*pow((t-t6),2.0) + j_max*pow((t-t6),3.0)/6.0;
 80039f0:	4bb2      	ldr	r3, [pc, #712]	; (8003cbc <TrajectoryEvaluation+0xb84>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fd53 	bl	80004a0 <__aeabi_f2d>
 80039fa:	4bb1      	ldr	r3, [pc, #708]	; (8003cc0 <TrajectoryEvaluation+0xb88>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fbf0 	bl	80001e4 <__adddf3>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4614      	mov	r4, r2
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4bad      	ldr	r3, [pc, #692]	; (8003cc4 <TrajectoryEvaluation+0xb8c>)
 8003a0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a12:	4ba8      	ldr	r3, [pc, #672]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003a14:	edd3 6a00 	vldr	s13, [r3]
 8003a18:	4ba5      	ldr	r3, [pc, #660]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	ee17 0a90 	vmov	r0, s15
 8003a2a:	f7fc fd39 	bl	80004a0 <__aeabi_f2d>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4620      	mov	r0, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7fc fbd5 	bl	80001e4 <__adddf3>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	461d      	mov	r5, r3
 8003a42:	4ba1      	ldr	r3, [pc, #644]	; (8003cc8 <TrajectoryEvaluation+0xb90>)
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd2a 	bl	80004a0 <__aeabi_f2d>
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b9e      	ldr	r3, [pc, #632]	; (8003ccc <TrajectoryEvaluation+0xb94>)
 8003a52:	f7fc fd7d 	bl	8000550 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4690      	mov	r8, r2
 8003a5c:	4699      	mov	r9, r3
 8003a5e:	4b95      	ldr	r3, [pc, #596]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003a60:	ed93 7a00 	vldr	s14, [r3]
 8003a64:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6e:	ee17 0a90 	vmov	r0, s15
 8003a72:	f7fc fd15 	bl	80004a0 <__aeabi_f2d>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8003c98 <TrajectoryEvaluation+0xb60>
 8003a7e:	ec43 2b10 	vmov	d0, r2, r3
 8003a82:	f008 f9f1 	bl	800be68 <pow>
 8003a86:	ec53 2b10 	vmov	r2, r3, d0
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	f7fc fd5f 	bl	8000550 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc fba3 	bl	80001e4 <__adddf3>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	4b83      	ldr	r3, [pc, #524]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003aa8:	ed93 7a00 	vldr	s14, [r3]
 8003aac:	4b80      	ldr	r3, [pc, #512]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab6:	ee17 0a90 	vmov	r0, s15
 8003aba:	f7fc fcf1 	bl	80004a0 <__aeabi_f2d>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003ca0 <TrajectoryEvaluation+0xb68>
 8003ac6:	ec43 2b10 	vmov	d0, r2, r3
 8003aca:	f008 f9cd 	bl	800be68 <pow>
 8003ace:	ec51 0b10 	vmov	r0, r1, d0
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	; (8003cd0 <TrajectoryEvaluation+0xb98>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fd3a 	bl	8000550 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	4b7a      	ldr	r3, [pc, #488]	; (8003cd4 <TrajectoryEvaluation+0xb9c>)
 8003aea:	f7fc fe5b 	bl	80007a4 <__aeabi_ddiv>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fb75 	bl	80001e4 <__adddf3>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4976      	ldr	r1, [pc, #472]	; (8003cd8 <TrajectoryEvaluation+0xba0>)
 8003b00:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = v[5] + a[5]*(t-t6) + 0.5*j_max*pow((t-t6),2.0);
 8003b04:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <TrajectoryEvaluation+0xb8c>)
 8003b06:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b0a:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <TrajectoryEvaluation+0xb90>)
 8003b0c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003b12:	ed93 6a00 	vldr	s12, [r3]
 8003b16:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b28:	ee17 0a90 	vmov	r0, s15
 8003b2c:	f7fc fcb8 	bl	80004a0 <__aeabi_f2d>
 8003b30:	4604      	mov	r4, r0
 8003b32:	460d      	mov	r5, r1
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <TrajectoryEvaluation+0xb98>)
 8003b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <TrajectoryEvaluation+0xb94>)
 8003b40:	f7fc fd06 	bl	8000550 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4690      	mov	r8, r2
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	4b59      	ldr	r3, [pc, #356]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003b4e:	ed93 7a00 	vldr	s14, [r3]
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5c:	ee17 0a90 	vmov	r0, s15
 8003b60:	f7fc fc9e 	bl	80004a0 <__aeabi_f2d>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8003c98 <TrajectoryEvaluation+0xb60>
 8003b6c:	ec43 2b10 	vmov	d0, r2, r3
 8003b70:	f008 f97a 	bl	800be68 <pow>
 8003b74:	ec53 2b10 	vmov	r2, r3, d0
 8003b78:	4640      	mov	r0, r8
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	f7fc fce8 	bl	8000550 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fb2c 	bl	80001e4 <__adddf3>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4952      	ldr	r1, [pc, #328]	; (8003cdc <TrajectoryEvaluation+0xba4>)
 8003b92:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = a[5] + j_max*(t-t6);
 8003b96:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <TrajectoryEvaluation+0xb90>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fc80 	bl	80004a0 <__aeabi_f2d>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	460d      	mov	r5, r1
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003ba6:	ed93 7a00 	vldr	s14, [r3]
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <TrajectoryEvaluation+0xb78>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fc72 	bl	80004a0 <__aeabi_f2d>
 8003bbc:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <TrajectoryEvaluation+0xb98>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fcc5 	bl	8000550 <__aeabi_dmul>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7fc fb09 	bl	80001e4 <__adddf3>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f7fc ff89 	bl	8000af0 <__aeabi_d2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <TrajectoryEvaluation+0xba8>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e055      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
	}
	else if (t7 <= t ){
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <TrajectoryEvaluation+0xb80>)
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	d900      	bls.n	8003bfe <TrajectoryEvaluation+0xac6>
		{
			Go_Flag = 0;
			t = 0;
		}
	}
}
 8003bfc:	e049      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
		theta_ref = theta_f;
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <TrajectoryEvaluation+0xbac>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	4934      	ldr	r1, [pc, #208]	; (8003cd8 <TrajectoryEvaluation+0xba0>)
 8003c06:	e9c1 2300 	strd	r2, r3, [r1]
		omega_ref = omega_ref;
 8003c0a:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <TrajectoryEvaluation+0xba4>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	4932      	ldr	r1, [pc, #200]	; (8003cdc <TrajectoryEvaluation+0xba4>)
 8003c12:	e9c1 2300 	strd	r2, r3, [r1]
		alpha_ref = alpha_ref;
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <TrajectoryEvaluation+0xba8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a31      	ldr	r2, [pc, #196]	; (8003ce0 <TrajectoryEvaluation+0xba8>)
 8003c1c:	6013      	str	r3, [r2, #0]
		if (theta_now >= (theta_ref - 0.006) && theta_now <= (theta_ref + 0.006))
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <TrajectoryEvaluation+0xbb0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fc3c 	bl	80004a0 <__aeabi_f2d>
 8003c28:	4604      	mov	r4, r0
 8003c2a:	460d      	mov	r5, r1
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <TrajectoryEvaluation+0xba0>)
 8003c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c32:	a31d      	add	r3, pc, #116	; (adr r3, 8003ca8 <TrajectoryEvaluation+0xb70>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fad2 	bl	80001e0 <__aeabi_dsub>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc ff0a 	bl	8000a5c <__aeabi_dcmpge>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d100      	bne.n	8003c50 <TrajectoryEvaluation+0xb18>
}
 8003c4e:	e020      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
		if (theta_now >= (theta_ref - 0.006) && theta_now <= (theta_ref + 0.006))
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <TrajectoryEvaluation+0xbb0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fc23 	bl	80004a0 <__aeabi_f2d>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	460d      	mov	r5, r1
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <TrajectoryEvaluation+0xba0>)
 8003c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c64:	a310      	add	r3, pc, #64	; (adr r3, 8003ca8 <TrajectoryEvaluation+0xb70>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f7fc fabb 	bl	80001e4 <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4620      	mov	r0, r4
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7fc fee7 	bl	8000a48 <__aeabi_dcmple>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d100      	bne.n	8003c82 <TrajectoryEvaluation+0xb4a>
}
 8003c80:	e007      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
			Go_Flag = 0;
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <TrajectoryEvaluation+0xbb4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
			t = 0;
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <TrajectoryEvaluation+0xb7c>)
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
}
 8003c90:	e7ff      	b.n	8003c92 <TrajectoryEvaluation+0xb5a>
 8003c92:	bf00      	nop
 8003c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	40000000 	.word	0x40000000
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	40080000 	.word	0x40080000
 8003ca8:	bc6a7efa 	.word	0xbc6a7efa
 8003cac:	3f789374 	.word	0x3f789374
 8003cb0:	20000584 	.word	0x20000584
 8003cb4:	2000056c 	.word	0x2000056c
 8003cb8:	20000588 	.word	0x20000588
 8003cbc:	200005e0 	.word	0x200005e0
 8003cc0:	20000598 	.word	0x20000598
 8003cc4:	200005c8 	.word	0x200005c8
 8003cc8:	200005b0 	.word	0x200005b0
 8003ccc:	3fe00000 	.word	0x3fe00000
 8003cd0:	20000070 	.word	0x20000070
 8003cd4:	40180000 	.word	0x40180000
 8003cd8:	200005f8 	.word	0x200005f8
 8003cdc:	20000600 	.word	0x20000600
 8003ce0:	20000608 	.word	0x20000608
 8003ce4:	200005a0 	.word	0x200005a0
 8003ce8:	200003d4 	.word	0x200003d4
 8003cec:	200003d1 	.word	0x200003d1

08003cf0 <PositionController>:

float PositionController(float r,float y) //r == trajectory, y==feedback
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003cfa:	edc7 0a00 	vstr	s1, [r7]
	e1 = r - y;
 8003cfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d02:	edd7 7a00 	vldr	s15, [r7]
 8003d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <PositionController+0x9c>)
 8003d0c:	edc3 7a00 	vstr	s15, [r3]
	s1 = s1 + e1;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <PositionController+0xa0>)
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <PositionController+0x9c>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <PositionController+0xa0>)
 8003d22:	edc3 7a00 	vstr	s15, [r3]
	u1 = (kp_1*e1) + (ki_1*s1) + (kd_1*(e1-p1));
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <PositionController+0xa4>)
 8003d28:	ed93 7a00 	vldr	s14, [r3]
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <PositionController+0x9c>)
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <PositionController+0xa8>)
 8003d38:	edd3 6a00 	vldr	s13, [r3]
 8003d3c:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <PositionController+0xa0>)
 8003d3e:	edd3 7a00 	vldr	s15, [r3]
 8003d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <PositionController+0x9c>)
 8003d4c:	edd3 6a00 	vldr	s13, [r3]
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <PositionController+0xac>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <PositionController+0xb0>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <PositionController+0xb4>)
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
	p1 = e1;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <PositionController+0x9c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <PositionController+0xac>)
 8003d74:	6013      	str	r3, [r2, #0]
	return u1;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <PositionController+0xb4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	ee07 3a90 	vmov	s15, r3
}
 8003d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	2000060c 	.word	0x2000060c
 8003d90:	20000610 	.word	0x20000610
 8003d94:	2000062c 	.word	0x2000062c
 8003d98:	20000630 	.word	0x20000630
 8003d9c:	20000614 	.word	0x20000614
 8003da0:	20000634 	.word	0x20000634
 8003da4:	20000618 	.word	0x20000618

08003da8 <VelocityController>:

float VelocityController(float r,float y,float uP) //r == trajectory, y==feedback
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8003db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003db6:	ed87 1a01 	vstr	s2, [r7, #4]
	e2 = uP + r;
 8003dba:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc6:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <VelocityController+0x120>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]

	if (dir == 0 && e2 <= w_max)
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <VelocityController+0x124>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d117      	bne.n	8003e04 <VelocityController+0x5c>
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <VelocityController+0x120>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fb61 	bl	80004a0 <__aeabi_f2d>
 8003dde:	4b3c      	ldr	r3, [pc, #240]	; (8003ed0 <VelocityController+0x128>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fe30 	bl	8000a48 <__aeabi_dcmple>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <VelocityController+0x5c>
	{
		e2 = w_max;
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <VelocityController+0x128>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	f7fc fe7a 	bl	8000af0 <__aeabi_d2f>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4a32      	ldr	r2, [pc, #200]	; (8003ec8 <VelocityController+0x120>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e01a      	b.n	8003e3a <VelocityController+0x92>
	}

	else if (dir == 1 && e2 >= w_max)
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <VelocityController+0x124>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d116      	bne.n	8003e3a <VelocityController+0x92>
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <VelocityController+0x120>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb45 	bl	80004a0 <__aeabi_f2d>
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <VelocityController+0x128>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fe1e 	bl	8000a5c <__aeabi_dcmpge>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <VelocityController+0x92>
	{
		e2 = w_max;
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <VelocityController+0x128>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f7fc fe5e 	bl	8000af0 <__aeabi_d2f>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <VelocityController+0x120>)
 8003e38:	6013      	str	r3, [r2, #0]
	}

	e2 = e2 - y;
 8003e3a:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <VelocityController+0x120>)
 8003e3c:	ed93 7a00 	vldr	s14, [r3]
 8003e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <VelocityController+0x120>)
 8003e4a:	edc3 7a00 	vstr	s15, [r3]
	s2 = s2 + e2;
 8003e4e:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <VelocityController+0x12c>)
 8003e50:	ed93 7a00 	vldr	s14, [r3]
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <VelocityController+0x120>)
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <VelocityController+0x12c>)
 8003e60:	edc3 7a00 	vstr	s15, [r3]
	u2 = (kp_2*e2) + (ki_2*s2) + (kd_2*(e2-p2));
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <VelocityController+0x130>)
 8003e66:	ed93 7a00 	vldr	s14, [r3]
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <VelocityController+0x120>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <VelocityController+0x134>)
 8003e76:	edd3 6a00 	vldr	s13, [r3]
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <VelocityController+0x12c>)
 8003e7c:	edd3 7a00 	vldr	s15, [r3]
 8003e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <VelocityController+0x120>)
 8003e8a:	edd3 6a00 	vldr	s13, [r3]
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <VelocityController+0x138>)
 8003e90:	edd3 7a00 	vldr	s15, [r3]
 8003e94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <VelocityController+0x13c>)
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <VelocityController+0x140>)
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
	p2 = e2;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <VelocityController+0x120>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <VelocityController+0x138>)
 8003eb2:	6013      	str	r3, [r2, #0]
	return u2;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <VelocityController+0x140>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000061c 	.word	0x2000061c
 8003ecc:	200000c1 	.word	0x200000c1
 8003ed0:	20000060 	.word	0x20000060
 8003ed4:	20000620 	.word	0x20000620
 8003ed8:	20000078 	.word	0x20000078
 8003edc:	2000007c 	.word	0x2000007c
 8003ee0:	20000624 	.word	0x20000624
 8003ee4:	20000638 	.word	0x20000638
 8003ee8:	20000628 	.word	0x20000628

08003eec <Cascade>:

float Cascade(float Pd,float P,float Vd,float V){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ef6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003efa:	ed87 1a01 	vstr	s2, [r7, #4]
 8003efe:	edc7 1a00 	vstr	s3, [r7]
	static float u;
	float add = 2.5;
 8003f02:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <Cascade+0xe8>)
 8003f04:	617b      	str	r3, [r7, #20]
	u = PositionController(Pd, P);
 8003f06:	edd7 0a02 	vldr	s1, [r7, #8]
 8003f0a:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f0e:	f7ff feef 	bl	8003cf0 <PositionController>
 8003f12:	eef0 7a40 	vmov.f32	s15, s0
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <Cascade+0xec>)
 8003f18:	edc3 7a00 	vstr	s15, [r3]
	u = VelocityController(Vd, V, u);
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <Cascade+0xec>)
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	eeb0 1a67 	vmov.f32	s2, s15
 8003f26:	edd7 0a00 	vldr	s1, [r7]
 8003f2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f2e:	f7ff ff3b 	bl	8003da8 <VelocityController>
 8003f32:	eef0 7a40 	vmov.f32	s15, s0
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <Cascade+0xec>)
 8003f38:	edc3 7a00 	vstr	s15, [r3]
	if (u >= 0)
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <Cascade+0xec>)
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	db03      	blt.n	8003f54 <Cascade+0x68>
	{
		PID_dir = 1;
 8003f4c:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <Cascade+0xf0>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e00a      	b.n	8003f6a <Cascade+0x7e>
	}

	else
	{
		u = -u;
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <Cascade+0xec>)
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	eef1 7a67 	vneg.f32	s15, s15
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <Cascade+0xec>)
 8003f60:	edc3 7a00 	vstr	s15, [r3]
		PID_dir = 0;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <Cascade+0xf0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
	}

	add = (3*(t/t2) < 3 ) ? 3*(t/t2) : 3;
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <Cascade+0xf4>)
 8003f6c:	edd3 6a00 	vldr	s13, [r3]
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <Cascade+0xf8>)
 8003f72:	ed93 7a00 	vldr	s14, [r3]
 8003f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f82:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	d50c      	bpl.n	8003faa <Cascade+0xbe>
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <Cascade+0xf4>)
 8003f92:	edd3 6a00 	vldr	s13, [r3]
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <Cascade+0xf8>)
 8003f98:	ed93 7a00 	vldr	s14, [r3]
 8003f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa8:	e001      	b.n	8003fae <Cascade+0xc2>
 8003faa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003fae:	edc7 7a05 	vstr	s15, [r7, #20]
//	if(t >= t6)
//	{
//		add = 2;
//	}

	return limit(u, add);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <Cascade+0xec>)
 8003fb4:	edd3 7a00 	vldr	s15, [r3]
 8003fb8:	edd7 0a05 	vldr	s1, [r7, #20]
 8003fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc0:	f000 f84a 	bl	8004058 <limit>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40200000 	.word	0x40200000
 8003fd8:	20000690 	.word	0x20000690
 8003fdc:	200000c2 	.word	0x200000c2
 8003fe0:	2000056c 	.word	0x2000056c
 8003fe4:	20000574 	.word	0x20000574

08003fe8 <negative>:

float negative(float var)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var > 0){
 8003ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	dd05      	ble.n	800400c <negative+0x24>
		var = -var;
 8004000:	edd7 7a01 	vldr	s15, [r7, #4]
 8004004:	eef1 7a67 	vneg.f32	s15, s15
 8004008:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return var;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	ee07 3a90 	vmov	s15, r3
}
 8004012:	eeb0 0a67 	vmov.f32	s0, s15
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <positive>:

float positive(float var)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	ed87 0a01 	vstr	s0, [r7, #4]
	if (var < 0){
 800402a:	edd7 7a01 	vldr	s15, [r7, #4]
 800402e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	d505      	bpl.n	8004044 <positive+0x24>
			var = -var;
 8004038:	edd7 7a01 	vldr	s15, [r7, #4]
 800403c:	eef1 7a67 	vneg.f32	s15, s15
 8004040:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return var;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	ee07 3a90 	vmov	s15, r3
}
 800404a:	eeb0 0a67 	vmov.f32	s0, s15
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <limit>:

float limit(float var1, float var2)
{
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004062:	edc7 0a00 	vstr	s1, [r7]
	return (var1 > 24.0-var2) ? 24.0 : var1+var2;
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fa1a 	bl	80004a0 <__aeabi_f2d>
 800406c:	4604      	mov	r4, r0
 800406e:	460d      	mov	r5, r1
 8004070:	6838      	ldr	r0, [r7, #0]
 8004072:	f7fc fa15 	bl	80004a0 <__aeabi_f2d>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	490d      	ldr	r1, [pc, #52]	; (80040b4 <limit+0x5c>)
 8004080:	f7fc f8ae 	bl	80001e0 <__aeabi_dsub>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc fcf0 	bl	8000a70 <__aeabi_dcmpgt>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <limit+0x44>
 8004096:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800409a:	e005      	b.n	80040a8 <limit+0x50>
 800409c:	ed97 7a01 	vldr	s14, [r7, #4]
 80040a0:	edd7 7a00 	vldr	s15, [r7]
 80040a4:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 80040a8:	eeb0 0a67 	vmov.f32	s0, s15
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bdb0      	pop	{r4, r5, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40380000 	.word	0x40380000

080040b8 <UART>:

void UART(){
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b096      	sub	sp, #88	; 0x58
 80040be:	af00      	add	r7, sp, #0
	static uint8_t LowByte = 0;
	static uint16_t DataByte =0;
	static uint8_t CheckTrasmit=1;
	static uint32_t Timestamp_UI =0;

	switch(RxData[0])
 80040c0:	4baf      	ldr	r3, [pc, #700]	; (8004380 <UART+0x2c8>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 851a 	beq.w	8004afe <UART+0xa46>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f2c0 8542 	blt.w	8004b54 <UART+0xa9c>
 80040d0:	2b9e      	cmp	r3, #158	; 0x9e
 80040d2:	f300 853f 	bgt.w	8004b54 <UART+0xa9c>
 80040d6:	2b58      	cmp	r3, #88	; 0x58
 80040d8:	f2c0 853c 	blt.w	8004b54 <UART+0xa9c>
 80040dc:	3b58      	subs	r3, #88	; 0x58
 80040de:	2b46      	cmp	r3, #70	; 0x46
 80040e0:	f200 8538 	bhi.w	8004b54 <UART+0xa9c>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART+0x34>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004b0b 	.word	0x08004b0b
 80040f0:	08004b55 	.word	0x08004b55
 80040f4:	08004b55 	.word	0x08004b55
 80040f8:	08004b55 	.word	0x08004b55
 80040fc:	08004b55 	.word	0x08004b55
 8004100:	08004b55 	.word	0x08004b55
 8004104:	08004b55 	.word	0x08004b55
 8004108:	08004b55 	.word	0x08004b55
 800410c:	08004b55 	.word	0x08004b55
 8004110:	08004b55 	.word	0x08004b55
 8004114:	08004b55 	.word	0x08004b55
 8004118:	08004b55 	.word	0x08004b55
 800411c:	08004b55 	.word	0x08004b55
 8004120:	08004b55 	.word	0x08004b55
 8004124:	08004b55 	.word	0x08004b55
 8004128:	08004b55 	.word	0x08004b55
 800412c:	08004b55 	.word	0x08004b55
 8004130:	08004b55 	.word	0x08004b55
 8004134:	08004b55 	.word	0x08004b55
 8004138:	08004b55 	.word	0x08004b55
 800413c:	08004b55 	.word	0x08004b55
 8004140:	08004b55 	.word	0x08004b55
 8004144:	08004b55 	.word	0x08004b55
 8004148:	08004b55 	.word	0x08004b55
 800414c:	08004b55 	.word	0x08004b55
 8004150:	08004b55 	.word	0x08004b55
 8004154:	08004b55 	.word	0x08004b55
 8004158:	08004b55 	.word	0x08004b55
 800415c:	08004b55 	.word	0x08004b55
 8004160:	08004b55 	.word	0x08004b55
 8004164:	08004b55 	.word	0x08004b55
 8004168:	08004b55 	.word	0x08004b55
 800416c:	08004b55 	.word	0x08004b55
 8004170:	08004b55 	.word	0x08004b55
 8004174:	08004b55 	.word	0x08004b55
 8004178:	08004b55 	.word	0x08004b55
 800417c:	08004b55 	.word	0x08004b55
 8004180:	08004b55 	.word	0x08004b55
 8004184:	08004b55 	.word	0x08004b55
 8004188:	08004b55 	.word	0x08004b55
 800418c:	08004b55 	.word	0x08004b55
 8004190:	08004b55 	.word	0x08004b55
 8004194:	08004b55 	.word	0x08004b55
 8004198:	08004b55 	.word	0x08004b55
 800419c:	08004b55 	.word	0x08004b55
 80041a0:	08004b55 	.word	0x08004b55
 80041a4:	08004b55 	.word	0x08004b55
 80041a8:	08004b55 	.word	0x08004b55
 80041ac:	08004b55 	.word	0x08004b55
 80041b0:	08004b55 	.word	0x08004b55
 80041b4:	08004b55 	.word	0x08004b55
 80041b8:	08004b55 	.word	0x08004b55
 80041bc:	08004b55 	.word	0x08004b55
 80041c0:	08004b55 	.word	0x08004b55
 80041c4:	08004b55 	.word	0x08004b55
 80041c8:	08004b55 	.word	0x08004b55
 80041cc:	08004b55 	.word	0x08004b55
 80041d0:	08004b63 	.word	0x08004b63
 80041d4:	08004209 	.word	0x08004209
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	08004251 	.word	0x08004251
 80041e0:	080042e1 	.word	0x080042e1
 80041e4:	080043a5 	.word	0x080043a5
 80041e8:	08004439 	.word	0x08004439
 80041ec:	0800452b 	.word	0x0800452b
 80041f0:	08004553 	.word	0x08004553
 80041f4:	0800472d 	.word	0x0800472d
 80041f8:	080048f5 	.word	0x080048f5
 80041fc:	08004a7f 	.word	0x08004a7f
 8004200:	08004aa7 	.word	0x08004aa7
 8004204:	08004acd 	.word	0x08004acd
	{
	case 0b10010001: //Go_Mode 1

		break;
	case 0b10010010: //Go_Mode2 FRAME#1
		if(RxData[1] == 0b01101101){
 8004208:	4b5d      	ldr	r3, [pc, #372]	; (8004380 <UART+0x2c8>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b6d      	cmp	r3, #109	; 0x6d
 800420e:	f040 84aa 	bne.w	8004b66 <UART+0xaae>
			//connect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004212:	2202      	movs	r2, #2
 8004214:	495b      	ldr	r1, [pc, #364]	; (8004384 <UART+0x2cc>)
 8004216:	485c      	ldr	r0, [pc, #368]	; (8004388 <UART+0x2d0>)
 8004218:	f006 f97a 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800421c:	4b58      	ldr	r3, [pc, #352]	; (8004380 <UART+0x2c8>)
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004222:	4859      	ldr	r0, [pc, #356]	; (8004388 <UART+0x2d0>)
 8004224:	f006 fa22 	bl	800a66c <HAL_UART_DMAStop>

		}
		break;
 8004228:	f000 bc9d 	b.w	8004b66 <UART+0xaae>
	case 0b10010011: //Go_Mode 3 FRAME#1
		if(RxData[1] == 0b01101100){
 800422c:	4b54      	ldr	r3, [pc, #336]	; (8004380 <UART+0x2c8>)
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b6c      	cmp	r3, #108	; 0x6c
 8004232:	f040 849a 	bne.w	8004b6a <UART+0xab2>
			//disconnect MCU
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004236:	2202      	movs	r2, #2
 8004238:	4952      	ldr	r1, [pc, #328]	; (8004384 <UART+0x2cc>)
 800423a:	4853      	ldr	r0, [pc, #332]	; (8004388 <UART+0x2d0>)
 800423c:	f006 f968 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <UART+0x2c8>)
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004246:	4850      	ldr	r0, [pc, #320]	; (8004388 <UART+0x2d0>)
 8004248:	f006 fa10 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 800424c:	f000 bc8d 	b.w	8004b6a <UART+0xab2>
	case 0b10010100: //Go_Mode 4 FRAME#2
		HighByte = RxData[1];
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <UART+0x2c8>)
 8004252:	785a      	ldrb	r2, [r3, #1]
 8004254:	4b4d      	ldr	r3, [pc, #308]	; (800438c <UART+0x2d4>)
 8004256:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 8004258:	4b49      	ldr	r3, [pc, #292]	; (8004380 <UART+0x2c8>)
 800425a:	789a      	ldrb	r2, [r3, #2]
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <UART+0x2d8>)
 800425e:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 8004260:	4b4a      	ldr	r3, [pc, #296]	; (800438c <UART+0x2d4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <UART+0x2d8>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	4413      	add	r3, r2
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b47      	ldr	r3, [pc, #284]	; (8004394 <UART+0x2dc>)
 8004276:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010100 + HighByte + LowByte))){
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <UART+0x2c8>)
 800427a:	78da      	ldrb	r2, [r3, #3]
 800427c:	4b43      	ldr	r3, [pc, #268]	; (800438c <UART+0x2d4>)
 800427e:	7819      	ldrb	r1, [r3, #0]
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <UART+0x2d8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	440b      	add	r3, r1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	3b6c      	subs	r3, #108	; 0x6c
 800428a:	b2db      	uxtb	r3, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	429a      	cmp	r2, r3
 8004292:	f040 846c 	bne.w	8004b6e <UART+0xab6>
			//Set Angular Velocity
			w_max = (double)DataByte*(10.0/255.0)*(2.0*M_PI/60.0);
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <UART+0x2dc>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f8de 	bl	800045c <__aeabi_ui2d>
 80042a0:	a331      	add	r3, pc, #196	; (adr r3, 8004368 <UART+0x2b0>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fc f953 	bl	8000550 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	a32f      	add	r3, pc, #188	; (adr r3, 8004370 <UART+0x2b8>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc f94a 	bl	8000550 <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4935      	ldr	r1, [pc, #212]	; (8004398 <UART+0x2e0>)
 80042c2:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 80042c6:	2202      	movs	r2, #2
 80042c8:	492e      	ldr	r1, [pc, #184]	; (8004384 <UART+0x2cc>)
 80042ca:	482f      	ldr	r0, [pc, #188]	; (8004388 <UART+0x2d0>)
 80042cc:	f006 f920 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 80042d0:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <UART+0x2c8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 80042d6:	482c      	ldr	r0, [pc, #176]	; (8004388 <UART+0x2d0>)
 80042d8:	f006 f9c8 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 80042dc:	f000 bc47 	b.w	8004b6e <UART+0xab6>
	case 0b10010101: //Go_Mode 5 FRAME#2
		HighByte = RxData[1];
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <UART+0x2c8>)
 80042e2:	785a      	ldrb	r2, [r3, #1]
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <UART+0x2d4>)
 80042e6:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80042e8:	4b25      	ldr	r3, [pc, #148]	; (8004380 <UART+0x2c8>)
 80042ea:	789a      	ldrb	r2, [r3, #2]
 80042ec:	4b28      	ldr	r3, [pc, #160]	; (8004390 <UART+0x2d8>)
 80042ee:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <UART+0x2d4>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <UART+0x2d8>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4413      	add	r3, r2
 8004302:	b29a      	uxth	r2, r3
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <UART+0x2dc>)
 8004306:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010101 + HighByte + LowByte))){
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <UART+0x2c8>)
 800430a:	78da      	ldrb	r2, [r3, #3]
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <UART+0x2d4>)
 800430e:	7819      	ldrb	r1, [r3, #0]
 8004310:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <UART+0x2d8>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	440b      	add	r3, r1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3b6b      	subs	r3, #107	; 0x6b
 800431a:	b2db      	uxtb	r3, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8426 	bne.w	8004b72 <UART+0xaba>
			//Set Angular Position
			theta_f = (double)DataByte/10000.0;
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <UART+0x2dc>)
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f896 	bl	800045c <__aeabi_ui2d>
 8004330:	a311      	add	r3, pc, #68	; (adr r3, 8004378 <UART+0x2c0>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc fa35 	bl	80007a4 <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4917      	ldr	r1, [pc, #92]	; (800439c <UART+0x2e4>)
 8004340:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004344:	2202      	movs	r2, #2
 8004346:	490f      	ldr	r1, [pc, #60]	; (8004384 <UART+0x2cc>)
 8004348:	480f      	ldr	r0, [pc, #60]	; (8004388 <UART+0x2d0>)
 800434a:	f006 f8e1 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <UART+0x2c8>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
			ModeN =0;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <UART+0x2e8>)
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800435a:	480b      	ldr	r0, [pc, #44]	; (8004388 <UART+0x2d0>)
 800435c:	f006 f986 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004360:	f000 bc07 	b.w	8004b72 <UART+0xaba>
 8004364:	f3af 8000 	nop.w
 8004368:	14141414 	.word	0x14141414
 800436c:	3fa41414 	.word	0x3fa41414
 8004370:	f37bebd5 	.word	0xf37bebd5
 8004374:	3fbacee9 	.word	0x3fbacee9
 8004378:	00000000 	.word	0x00000000
 800437c:	40c38800 	.word	0x40c38800
 8004380:	2000063c 	.word	0x2000063c
 8004384:	20000090 	.word	0x20000090
 8004388:	200002c8 	.word	0x200002c8
 800438c:	20000694 	.word	0x20000694
 8004390:	20000695 	.word	0x20000695
 8004394:	20000696 	.word	0x20000696
 8004398:	20000060 	.word	0x20000060
 800439c:	200005a0 	.word	0x200005a0
 80043a0:	20000658 	.word	0x20000658
	case 0b10010110: //Go_Mode 6 FRAME#2
		HighByte = RxData[1];
 80043a4:	4b98      	ldr	r3, [pc, #608]	; (8004608 <UART+0x550>)
 80043a6:	785a      	ldrb	r2, [r3, #1]
 80043a8:	4b98      	ldr	r3, [pc, #608]	; (800460c <UART+0x554>)
 80043aa:	701a      	strb	r2, [r3, #0]
		LowByte = RxData[2];
 80043ac:	4b96      	ldr	r3, [pc, #600]	; (8004608 <UART+0x550>)
 80043ae:	789a      	ldrb	r2, [r3, #2]
 80043b0:	4b97      	ldr	r3, [pc, #604]	; (8004610 <UART+0x558>)
 80043b2:	701a      	strb	r2, [r3, #0]
		DataByte = (HighByte<<8) + LowByte;
 80043b4:	4b95      	ldr	r3, [pc, #596]	; (800460c <UART+0x554>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b94      	ldr	r3, [pc, #592]	; (8004610 <UART+0x558>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	4b92      	ldr	r3, [pc, #584]	; (8004614 <UART+0x55c>)
 80043ca:	801a      	strh	r2, [r3, #0]
		if(RxData[3] == (uint8_t)(~(0b10010110 + HighByte + LowByte))){
 80043cc:	4b8e      	ldr	r3, [pc, #568]	; (8004608 <UART+0x550>)
 80043ce:	78da      	ldrb	r2, [r3, #3]
 80043d0:	4b8e      	ldr	r3, [pc, #568]	; (800460c <UART+0x554>)
 80043d2:	7819      	ldrb	r1, [r3, #0]
 80043d4:	4b8e      	ldr	r3, [pc, #568]	; (8004610 <UART+0x558>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	440b      	add	r3, r1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	3b6a      	subs	r3, #106	; 0x6a
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 83c6 	bne.w	8004b76 <UART+0xabe>
			//Set Goal 1 Station
			index_station[0] = LowByte;
 80043ea:	4b89      	ldr	r3, [pc, #548]	; (8004610 <UART+0x558>)
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	4b8a      	ldr	r3, [pc, #552]	; (8004618 <UART+0x560>)
 80043f0:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[0]-1]*(M_PI/180.0);
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <UART+0x560>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a88      	ldr	r2, [pc, #544]	; (800461c <UART+0x564>)
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc f84d 	bl	80004a0 <__aeabi_f2d>
 8004406:	a37e      	add	r3, pc, #504	; (adr r3, 8004600 <UART+0x548>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fc f8a0 	bl	8000550 <__aeabi_dmul>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4982      	ldr	r1, [pc, #520]	; (8004620 <UART+0x568>)
 8004416:	e9c1 2300 	strd	r2, r3, [r1]
			ModeN =0;
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <UART+0x56c>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004420:	2202      	movs	r2, #2
 8004422:	4981      	ldr	r1, [pc, #516]	; (8004628 <UART+0x570>)
 8004424:	4881      	ldr	r0, [pc, #516]	; (800462c <UART+0x574>)
 8004426:	f006 f873 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800442a:	4b77      	ldr	r3, [pc, #476]	; (8004608 <UART+0x550>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004430:	487e      	ldr	r0, [pc, #504]	; (800462c <UART+0x574>)
 8004432:	f006 f91b 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004436:	e39e      	b.n	8004b76 <UART+0xabe>
	case 0b10010111: //Go_Mode 7 FRAME#3
		n_station_max = RxData[1];
 8004438:	4b73      	ldr	r3, [pc, #460]	; (8004608 <UART+0x550>)
 800443a:	785a      	ldrb	r2, [r3, #1]
 800443c:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <UART+0x578>)
 800443e:	701a      	strb	r2, [r3, #0]
		uint8_t Check=0;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t k=2;
 8004446:	2302      	movs	r3, #2
 8004448:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 800444c:	2300      	movs	r3, #0
 800444e:	653b      	str	r3, [r7, #80]	; 0x50
 8004450:	e01d      	b.n	800448e <UART+0x3d6>
			index_station[j] = RxData[k]%16;
 8004452:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004456:	4a6c      	ldr	r2, [pc, #432]	; (8004608 <UART+0x550>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	b2d9      	uxtb	r1, r3
 8004460:	4a6d      	ldr	r2, [pc, #436]	; (8004618 <UART+0x560>)
 8004462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004464:	4413      	add	r3, r2
 8004466:	460a      	mov	r2, r1
 8004468:	701a      	strb	r2, [r3, #0]
			index_station[j+1] = (uint8_t)RxData[k]/16;
 800446a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800446e:	4a66      	ldr	r2, [pc, #408]	; (8004608 <UART+0x550>)
 8004470:	5cd2      	ldrb	r2, [r2, r3]
 8004472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004474:	3301      	adds	r3, #1
 8004476:	0912      	lsrs	r2, r2, #4
 8004478:	b2d1      	uxtb	r1, r2
 800447a:	4a67      	ldr	r2, [pc, #412]	; (8004618 <UART+0x560>)
 800447c:	54d1      	strb	r1, [r2, r3]
			k+=1;
 800447e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004482:	3301      	adds	r3, #1
 8004484:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(int j = 0;j<n_station_max;j+=2){
 8004488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448a:	3302      	adds	r3, #2
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
 800448e:	4b68      	ldr	r3, [pc, #416]	; (8004630 <UART+0x578>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004496:	4293      	cmp	r3, r2
 8004498:	dbdb      	blt.n	8004452 <UART+0x39a>
		}
		for(int f = 0; f<k;f++){
 800449a:	2300      	movs	r3, #0
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449e:	e00b      	b.n	80044b8 <UART+0x400>
			Check += RxData[f];
 80044a0:	4a59      	ldr	r2, [pc, #356]	; (8004608 <UART+0x550>)
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	4413      	add	r3, r2
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044ac:	4413      	add	r3, r2
 80044ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for(int f = 0; f<k;f++){
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	3301      	adds	r3, #1
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80044bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044be:	429a      	cmp	r2, r3
 80044c0:	dbee      	blt.n	80044a0 <UART+0x3e8>
		}
		if(RxData[k] == (uint8_t)(~(Check)) ){
 80044c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80044c6:	4a50      	ldr	r2, [pc, #320]	; (8004608 <UART+0x550>)
 80044c8:	5cd2      	ldrb	r2, [r2, r3]
 80044ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044ce:	43db      	mvns	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	429a      	cmp	r2, r3
 80044d4:	f040 8351 	bne.w	8004b7a <UART+0xac2>

			ModeN=1;
 80044d8:	4b52      	ldr	r3, [pc, #328]	; (8004624 <UART+0x56c>)
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
			n_station=0;
 80044de:	4b55      	ldr	r3, [pc, #340]	; (8004634 <UART+0x57c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
			theta_f = station[index_station[n_station]-1]*(M_PI/180.0);
 80044e4:	4b53      	ldr	r3, [pc, #332]	; (8004634 <UART+0x57c>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <UART+0x560>)
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	4a4a      	ldr	r2, [pc, #296]	; (800461c <UART+0x564>)
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fb ffd1 	bl	80004a0 <__aeabi_f2d>
 80044fe:	a340      	add	r3, pc, #256	; (adr r3, 8004600 <UART+0x548>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc f824 	bl	8000550 <__aeabi_dmul>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4944      	ldr	r1, [pc, #272]	; (8004620 <UART+0x568>)
 800450e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004512:	2202      	movs	r2, #2
 8004514:	4944      	ldr	r1, [pc, #272]	; (8004628 <UART+0x570>)
 8004516:	4845      	ldr	r0, [pc, #276]	; (800462c <UART+0x574>)
 8004518:	f005 fffa 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 800451c:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <UART+0x550>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004522:	4842      	ldr	r0, [pc, #264]	; (800462c <UART+0x574>)
 8004524:	f006 f8a2 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004528:	e327      	b.n	8004b7a <UART+0xac2>
	case 0b10011000: //Go_Mode 8 FRAME#1
		if(RxData[1] == 0b01100111){
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <UART+0x550>)
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b67      	cmp	r3, #103	; 0x67
 8004530:	f040 8325 	bne.w	8004b7e <UART+0xac6>
			//Go to Station / Goal Position
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004534:	2202      	movs	r2, #2
 8004536:	493c      	ldr	r1, [pc, #240]	; (8004628 <UART+0x570>)
 8004538:	483c      	ldr	r0, [pc, #240]	; (800462c <UART+0x574>)
 800453a:	f005 ffe9 	bl	800a510 <HAL_UART_Transmit_DMA>
			Arm_State = PrepareRun;
 800453e:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <UART+0x580>)
 8004540:	2206      	movs	r2, #6
 8004542:	701a      	strb	r2, [r3, #0]
			RxData[0] = 0;
 8004544:	4b30      	ldr	r3, [pc, #192]	; (8004608 <UART+0x550>)
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 800454a:	4838      	ldr	r0, [pc, #224]	; (800462c <UART+0x574>)
 800454c:	f006 f88e 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004550:	e315      	b.n	8004b7e <UART+0xac6>
	case 0b10011001: //Go_Mode 9 FRAME#1
		if(RxData[1] == 0b01100110){
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <UART+0x550>)
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	2b66      	cmp	r3, #102	; 0x66
 8004558:	f040 8313 	bne.w	8004b82 <UART+0xaca>
			//Request Current Station
			if(Finish){
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <UART+0x584>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d075      	beq.n	8004650 <UART+0x598>
				if(CheckTrasmit){
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <UART+0x588>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01e      	beq.n	80045aa <UART+0x4f2>
					TxData2[4]=TxData[2];
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <UART+0x58c>)
 800456e:	789a      	ldrb	r2, [r3, #2]
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <UART+0x590>)
 8004572:	711a      	strb	r2, [r3, #4]
					TxData2[5]=TxData[3];
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <UART+0x58c>)
 8004576:	78da      	ldrb	r2, [r3, #3]
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <UART+0x590>)
 800457a:	715a      	strb	r2, [r3, #5]
					TxData2[6]=TxData[4];
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <UART+0x58c>)
 800457e:	791a      	ldrb	r2, [r3, #4]
 8004580:	4b31      	ldr	r3, [pc, #196]	; (8004648 <UART+0x590>)
 8004582:	719a      	strb	r2, [r3, #6]
					TxData2[7]=TxData[5];
 8004584:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <UART+0x58c>)
 8004586:	795a      	ldrb	r2, [r3, #5]
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <UART+0x590>)
 800458a:	71da      	strb	r2, [r3, #7]
					CheckTrasmit =0;
 800458c:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <UART+0x588>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004592:	2208      	movs	r2, #8
 8004594:	492c      	ldr	r1, [pc, #176]	; (8004648 <UART+0x590>)
 8004596:	4825      	ldr	r0, [pc, #148]	; (800462c <UART+0x574>)
 8004598:	f005 ffba 	bl	800a510 <HAL_UART_Transmit_DMA>
					Timestamp_UI=micros();
 800459c:	f7fd fa26 	bl	80019ec <micros>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <UART+0x594>)
 80045a6:	601a      	str	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
					CheckTrasmit=1;
				}
			}
		}
		break;
 80045a8:	e2eb      	b.n	8004b82 <UART+0xaca>
					if(micros() - Timestamp_UI > 150){
 80045aa:	f7fd fa1f 	bl	80019ec <micros>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4926      	ldr	r1, [pc, #152]	; (800464c <UART+0x594>)
 80045b4:	6809      	ldr	r1, [r1, #0]
 80045b6:	2000      	movs	r0, #0
 80045b8:	6439      	str	r1, [r7, #64]	; 0x40
 80045ba:	6478      	str	r0, [r7, #68]	; 0x44
 80045bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80045c0:	4621      	mov	r1, r4
 80045c2:	1a51      	subs	r1, r2, r1
 80045c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c6:	4629      	mov	r1, r5
 80045c8:	eb63 0301 	sbc.w	r3, r3, r1
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80045d2:	460b      	mov	r3, r1
 80045d4:	2b97      	cmp	r3, #151	; 0x97
 80045d6:	4613      	mov	r3, r2
 80045d8:	f173 0300 	sbcs.w	r3, r3, #0
 80045dc:	f0c0 82d1 	bcc.w	8004b82 <UART+0xaca>
						RxData[0] = 0;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <UART+0x550>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
						CheckTrasmit=1;
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <UART+0x588>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
						Finish =0;
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <UART+0x584>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
						HAL_UART_DMAStop(&huart2);
 80045f2:	480e      	ldr	r0, [pc, #56]	; (800462c <UART+0x574>)
 80045f4:	f006 f83a 	bl	800a66c <HAL_UART_DMAStop>
		break;
 80045f8:	e2c3      	b.n	8004b82 <UART+0xaca>
 80045fa:	bf00      	nop
 80045fc:	f3af 8000 	nop.w
 8004600:	a2529d39 	.word	0xa2529d39
 8004604:	3f91df46 	.word	0x3f91df46
 8004608:	2000063c 	.word	0x2000063c
 800460c:	20000694 	.word	0x20000694
 8004610:	20000695 	.word	0x20000695
 8004614:	20000696 	.word	0x20000696
 8004618:	2000065c 	.word	0x2000065c
 800461c:	20000094 	.word	0x20000094
 8004620:	200005a0 	.word	0x200005a0
 8004624:	20000658 	.word	0x20000658
 8004628:	20000090 	.word	0x20000090
 800462c:	200002c8 	.word	0x200002c8
 8004630:	200000bd 	.word	0x200000bd
 8004634:	200000be 	.word	0x200000be
 8004638:	200000bf 	.word	0x200000bf
 800463c:	20000659 	.word	0x20000659
 8004640:	200000c3 	.word	0x200000c3
 8004644:	20000080 	.word	0x20000080
 8004648:	20000088 	.word	0x20000088
 800464c:	20000698 	.word	0x20000698
			else if(CheckTrasmit){
 8004650:	4b9d      	ldr	r3, [pc, #628]	; (80048c8 <UART+0x810>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d044      	beq.n	80046e2 <UART+0x62a>
				TxData[2] = 0b10011001;
 8004658:	4b9c      	ldr	r3, [pc, #624]	; (80048cc <UART+0x814>)
 800465a:	2299      	movs	r2, #153	; 0x99
 800465c:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0;
 800465e:	4b9b      	ldr	r3, [pc, #620]	; (80048cc <UART+0x814>)
 8004660:	2200      	movs	r2, #0
 8004662:	70da      	strb	r2, [r3, #3]
				Current_station = (uint8_t)ceil(theta_now/0.087); // 1 station = 0.087 rads ->72 station
 8004664:	4b9a      	ldr	r3, [pc, #616]	; (80048d0 <UART+0x818>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fb ff19 	bl	80004a0 <__aeabi_f2d>
 800466e:	a392      	add	r3, pc, #584	; (adr r3, 80048b8 <UART+0x800>)
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f7fc f896 	bl	80007a4 <__aeabi_ddiv>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	ec43 2b17 	vmov	d7, r2, r3
 8004680:	eeb0 0a47 	vmov.f32	s0, s14
 8004684:	eef0 0a67 	vmov.f32	s1, s15
 8004688:	f007 fb6a 	bl	800bd60 <ceil>
 800468c:	ec53 2b10 	vmov	r2, r3, d0
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc fa0c 	bl	8000ab0 <__aeabi_d2uiz>
 8004698:	4603      	mov	r3, r0
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <UART+0x81c>)
 800469e:	701a      	strb	r2, [r3, #0]
				TxData[4] = Current_station;
 80046a0:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <UART+0x81c>)
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	4b89      	ldr	r3, [pc, #548]	; (80048cc <UART+0x814>)
 80046a6:	711a      	strb	r2, [r3, #4]
				TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 80046a8:	4b88      	ldr	r3, [pc, #544]	; (80048cc <UART+0x814>)
 80046aa:	789a      	ldrb	r2, [r3, #2]
 80046ac:	4b87      	ldr	r3, [pc, #540]	; (80048cc <UART+0x814>)
 80046ae:	78db      	ldrb	r3, [r3, #3]
 80046b0:	4413      	add	r3, r2
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	4b85      	ldr	r3, [pc, #532]	; (80048cc <UART+0x814>)
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b82      	ldr	r3, [pc, #520]	; (80048cc <UART+0x814>)
 80046c2:	715a      	strb	r2, [r3, #5]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 80046c4:	2206      	movs	r2, #6
 80046c6:	4981      	ldr	r1, [pc, #516]	; (80048cc <UART+0x814>)
 80046c8:	4883      	ldr	r0, [pc, #524]	; (80048d8 <UART+0x820>)
 80046ca:	f005 ff21 	bl	800a510 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 80046ce:	f7fd f98d 	bl	80019ec <micros>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b81      	ldr	r3, [pc, #516]	; (80048dc <UART+0x824>)
 80046d8:	601a      	str	r2, [r3, #0]
				CheckTrasmit=0;
 80046da:	4b7b      	ldr	r3, [pc, #492]	; (80048c8 <UART+0x810>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
		break;
 80046e0:	e24f      	b.n	8004b82 <UART+0xaca>
				if(micros() - Timestamp_UI > 150){
 80046e2:	f7fd f983 	bl	80019ec <micros>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	497c      	ldr	r1, [pc, #496]	; (80048dc <UART+0x824>)
 80046ec:	6809      	ldr	r1, [r1, #0]
 80046ee:	2000      	movs	r0, #0
 80046f0:	6339      	str	r1, [r7, #48]	; 0x30
 80046f2:	6378      	str	r0, [r7, #52]	; 0x34
 80046f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046f8:	4621      	mov	r1, r4
 80046fa:	1a51      	subs	r1, r2, r1
 80046fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80046fe:	4629      	mov	r1, r5
 8004700:	eb63 0301 	sbc.w	r3, r3, r1
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800470a:	460b      	mov	r3, r1
 800470c:	2b97      	cmp	r3, #151	; 0x97
 800470e:	4613      	mov	r3, r2
 8004710:	f173 0300 	sbcs.w	r3, r3, #0
 8004714:	f0c0 8235 	bcc.w	8004b82 <UART+0xaca>
					RxData[0] = 0;
 8004718:	4b71      	ldr	r3, [pc, #452]	; (80048e0 <UART+0x828>)
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 800471e:	486e      	ldr	r0, [pc, #440]	; (80048d8 <UART+0x820>)
 8004720:	f005 ffa4 	bl	800a66c <HAL_UART_DMAStop>
					CheckTrasmit=1;
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <UART+0x810>)
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
		break;
 800472a:	e22a      	b.n	8004b82 <UART+0xaca>
	case 0b10011010: //Go_Mode 10 FRAME#1
		if(RxData[1] == 0b01100101){
 800472c:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <UART+0x828>)
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b65      	cmp	r3, #101	; 0x65
 8004732:	f040 8228 	bne.w	8004b86 <UART+0xace>
			//Request Angular Position
		if(Finish){
 8004736:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <UART+0x82c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04a      	beq.n	80047d4 <UART+0x71c>

			if(CheckTrasmit){
 800473e:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <UART+0x810>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01e      	beq.n	8004784 <UART+0x6cc>
				TxData2[4]=TxData[2];
 8004746:	4b61      	ldr	r3, [pc, #388]	; (80048cc <UART+0x814>)
 8004748:	789a      	ldrb	r2, [r3, #2]
 800474a:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <UART+0x830>)
 800474c:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 800474e:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <UART+0x814>)
 8004750:	78da      	ldrb	r2, [r3, #3]
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <UART+0x830>)
 8004754:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 8004756:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <UART+0x814>)
 8004758:	791a      	ldrb	r2, [r3, #4]
 800475a:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <UART+0x830>)
 800475c:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <UART+0x814>)
 8004760:	795a      	ldrb	r2, [r3, #5]
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <UART+0x830>)
 8004764:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 8004766:	4b58      	ldr	r3, [pc, #352]	; (80048c8 <UART+0x810>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 800476c:	2208      	movs	r2, #8
 800476e:	495e      	ldr	r1, [pc, #376]	; (80048e8 <UART+0x830>)
 8004770:	4859      	ldr	r0, [pc, #356]	; (80048d8 <UART+0x820>)
 8004772:	f005 fecd 	bl	800a510 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 8004776:	f7fd f939 	bl	80019ec <micros>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b57      	ldr	r3, [pc, #348]	; (80048dc <UART+0x824>)
 8004780:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 8004782:	e200      	b.n	8004b86 <UART+0xace>
				if(micros() - Timestamp_UI > 150){
 8004784:	f7fd f932 	bl	80019ec <micros>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4953      	ldr	r1, [pc, #332]	; (80048dc <UART+0x824>)
 800478e:	6809      	ldr	r1, [r1, #0]
 8004790:	2000      	movs	r0, #0
 8004792:	6239      	str	r1, [r7, #32]
 8004794:	6278      	str	r0, [r7, #36]	; 0x24
 8004796:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800479a:	4621      	mov	r1, r4
 800479c:	1a51      	subs	r1, r2, r1
 800479e:	61b9      	str	r1, [r7, #24]
 80047a0:	4629      	mov	r1, r5
 80047a2:	eb63 0301 	sbc.w	r3, r3, r1
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047ac:	460b      	mov	r3, r1
 80047ae:	2b97      	cmp	r3, #151	; 0x97
 80047b0:	4613      	mov	r3, r2
 80047b2:	f173 0300 	sbcs.w	r3, r3, #0
 80047b6:	f0c0 81e6 	bcc.w	8004b86 <UART+0xace>
					RxData[0] = 0;
 80047ba:	4b49      	ldr	r3, [pc, #292]	; (80048e0 <UART+0x828>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <UART+0x810>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
					Finish =0;
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <UART+0x82c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 80047cc:	4842      	ldr	r0, [pc, #264]	; (80048d8 <UART+0x820>)
 80047ce:	f005 ff4d 	bl	800a66c <HAL_UART_DMAStop>
		break;
 80047d2:	e1d8      	b.n	8004b86 <UART+0xace>
		else if(CheckTrasmit){
 80047d4:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <UART+0x810>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d04c      	beq.n	8004876 <UART+0x7be>
			TxData[2] = 0b10011010;
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <UART+0x814>)
 80047de:	229a      	movs	r2, #154	; 0x9a
 80047e0:	709a      	strb	r2, [r3, #2]
			TxData[3] = (uint8_t)((theta_now*10000.0)/256.0);
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <UART+0x818>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fb fe5a 	bl	80004a0 <__aeabi_f2d>
 80047ec:	a334      	add	r3, pc, #208	; (adr r3, 80048c0 <UART+0x808>)
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f7fb fead 	bl	8000550 <__aeabi_dmul>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	4b3a      	ldr	r3, [pc, #232]	; (80048ec <UART+0x834>)
 8004804:	f7fb ffce 	bl	80007a4 <__aeabi_ddiv>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	f7fc f94e 	bl	8000ab0 <__aeabi_d2uiz>
 8004814:	4603      	mov	r3, r0
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <UART+0x814>)
 800481a:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)(theta_now*10000)%256;
 800481c:	4b2c      	ldr	r3, [pc, #176]	; (80048d0 <UART+0x818>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80048f0 <UART+0x838>
 8004826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8004832:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <UART+0x814>)
 800483a:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <UART+0x814>)
 800483e:	789a      	ldrb	r2, [r3, #2]
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <UART+0x814>)
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	4413      	add	r3, r2
 8004846:	b2da      	uxtb	r2, r3
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <UART+0x814>)
 800484a:	791b      	ldrb	r3, [r3, #4]
 800484c:	4413      	add	r3, r2
 800484e:	b2db      	uxtb	r3, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	b2da      	uxtb	r2, r3
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <UART+0x814>)
 8004856:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004858:	2206      	movs	r2, #6
 800485a:	491c      	ldr	r1, [pc, #112]	; (80048cc <UART+0x814>)
 800485c:	481e      	ldr	r0, [pc, #120]	; (80048d8 <UART+0x820>)
 800485e:	f005 fe57 	bl	800a510 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004862:	f7fd f8c3 	bl	80019ec <micros>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <UART+0x824>)
 800486c:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 800486e:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <UART+0x810>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
		break;
 8004874:	e187      	b.n	8004b86 <UART+0xace>
			if(micros() - Timestamp_UI > 150){
 8004876:	f7fd f8b9 	bl	80019ec <micros>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4917      	ldr	r1, [pc, #92]	; (80048dc <UART+0x824>)
 8004880:	6809      	ldr	r1, [r1, #0]
 8004882:	2000      	movs	r0, #0
 8004884:	6139      	str	r1, [r7, #16]
 8004886:	6178      	str	r0, [r7, #20]
 8004888:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800488c:	4621      	mov	r1, r4
 800488e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004892:	4629      	mov	r1, r5
 8004894:	eb63 0b01 	sbc.w	fp, r3, r1
 8004898:	f1ba 0f97 	cmp.w	sl, #151	; 0x97
 800489c:	f17b 0300 	sbcs.w	r3, fp, #0
 80048a0:	f0c0 8171 	bcc.w	8004b86 <UART+0xace>
				RxData[0] = 0;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <UART+0x828>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 80048aa:	480b      	ldr	r0, [pc, #44]	; (80048d8 <UART+0x820>)
 80048ac:	f005 fede 	bl	800a66c <HAL_UART_DMAStop>
				CheckTrasmit=1;
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <UART+0x810>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
		break;
 80048b6:	e166      	b.n	8004b86 <UART+0xace>
 80048b8:	cac08312 	.word	0xcac08312
 80048bc:	3fb645a1 	.word	0x3fb645a1
 80048c0:	00000000 	.word	0x00000000
 80048c4:	40c38800 	.word	0x40c38800
 80048c8:	200000c3 	.word	0x200000c3
 80048cc:	20000080 	.word	0x20000080
 80048d0:	200003d4 	.word	0x200003d4
 80048d4:	200000bc 	.word	0x200000bc
 80048d8:	200002c8 	.word	0x200002c8
 80048dc:	20000698 	.word	0x20000698
 80048e0:	2000063c 	.word	0x2000063c
 80048e4:	20000659 	.word	0x20000659
 80048e8:	20000088 	.word	0x20000088
 80048ec:	40700000 	.word	0x40700000
 80048f0:	461c4000 	.word	0x461c4000
	case 0b10011011: //Go_Mode 11 FRAME#1
		if(RxData[1] == 0b01100100){
 80048f4:	4bae      	ldr	r3, [pc, #696]	; (8004bb0 <UART+0xaf8>)
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	f040 8146 	bne.w	8004b8a <UART+0xad2>
			//Request Angular Velocity
		if(Finish){
 80048fe:	4bad      	ldr	r3, [pc, #692]	; (8004bb4 <UART+0xafc>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d049      	beq.n	800499a <UART+0x8e2>
			if(CheckTrasmit){
 8004906:	4bac      	ldr	r3, [pc, #688]	; (8004bb8 <UART+0xb00>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01e      	beq.n	800494c <UART+0x894>
				TxData2[4]=TxData[2];
 800490e:	4bab      	ldr	r3, [pc, #684]	; (8004bbc <UART+0xb04>)
 8004910:	789a      	ldrb	r2, [r3, #2]
 8004912:	4bab      	ldr	r3, [pc, #684]	; (8004bc0 <UART+0xb08>)
 8004914:	711a      	strb	r2, [r3, #4]
				TxData2[5]=TxData[3];
 8004916:	4ba9      	ldr	r3, [pc, #676]	; (8004bbc <UART+0xb04>)
 8004918:	78da      	ldrb	r2, [r3, #3]
 800491a:	4ba9      	ldr	r3, [pc, #676]	; (8004bc0 <UART+0xb08>)
 800491c:	715a      	strb	r2, [r3, #5]
				TxData2[6]=TxData[4];
 800491e:	4ba7      	ldr	r3, [pc, #668]	; (8004bbc <UART+0xb04>)
 8004920:	791a      	ldrb	r2, [r3, #4]
 8004922:	4ba7      	ldr	r3, [pc, #668]	; (8004bc0 <UART+0xb08>)
 8004924:	719a      	strb	r2, [r3, #6]
				TxData2[7]=TxData[5];
 8004926:	4ba5      	ldr	r3, [pc, #660]	; (8004bbc <UART+0xb04>)
 8004928:	795a      	ldrb	r2, [r3, #5]
 800492a:	4ba5      	ldr	r3, [pc, #660]	; (8004bc0 <UART+0xb08>)
 800492c:	71da      	strb	r2, [r3, #7]
				CheckTrasmit =0;
 800492e:	4ba2      	ldr	r3, [pc, #648]	; (8004bb8 <UART+0xb00>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData2, 8); //send ack#1
 8004934:	2208      	movs	r2, #8
 8004936:	49a2      	ldr	r1, [pc, #648]	; (8004bc0 <UART+0xb08>)
 8004938:	48a2      	ldr	r0, [pc, #648]	; (8004bc4 <UART+0xb0c>)
 800493a:	f005 fde9 	bl	800a510 <HAL_UART_Transmit_DMA>
				Timestamp_UI=micros();
 800493e:	f7fd f855 	bl	80019ec <micros>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4ba0      	ldr	r3, [pc, #640]	; (8004bc8 <UART+0xb10>)
 8004948:	601a      	str	r2, [r3, #0]
				CheckTrasmit=1;
			}
		}

		}
		break;
 800494a:	e11e      	b.n	8004b8a <UART+0xad2>
				if(micros() - Timestamp_UI > 150){
 800494c:	f7fd f84e 	bl	80019ec <micros>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	499c      	ldr	r1, [pc, #624]	; (8004bc8 <UART+0xb10>)
 8004956:	6809      	ldr	r1, [r1, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004962:	4621      	mov	r1, r4
 8004964:	ebb2 0801 	subs.w	r8, r2, r1
 8004968:	4629      	mov	r1, r5
 800496a:	eb63 0901 	sbc.w	r9, r3, r1
 800496e:	f1b8 0f97 	cmp.w	r8, #151	; 0x97
 8004972:	f179 0300 	sbcs.w	r3, r9, #0
 8004976:	f0c0 8108 	bcc.w	8004b8a <UART+0xad2>
					RxData[0] = 0;
 800497a:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <UART+0xaf8>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
					CheckTrasmit=1;
 8004980:	4b8d      	ldr	r3, [pc, #564]	; (8004bb8 <UART+0xb00>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
					Finish =0;
 8004986:	4b8b      	ldr	r3, [pc, #556]	; (8004bb4 <UART+0xafc>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
					HAL_UART_DMAStop(&huart2);
 800498c:	488d      	ldr	r0, [pc, #564]	; (8004bc4 <UART+0xb0c>)
 800498e:	f005 fe6d 	bl	800a66c <HAL_UART_DMAStop>
					CheckTrasmit=1;
 8004992:	4b89      	ldr	r3, [pc, #548]	; (8004bb8 <UART+0xb00>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
		break;
 8004998:	e0f7      	b.n	8004b8a <UART+0xad2>
		else if (CheckTrasmit){
 800499a:	4b87      	ldr	r3, [pc, #540]	; (8004bb8 <UART+0xb00>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04e      	beq.n	8004a40 <UART+0x988>
			TxData[2] = 0b10011011;
 80049a2:	4b86      	ldr	r3, [pc, #536]	; (8004bbc <UART+0xb04>)
 80049a4:	229b      	movs	r2, #155	; 0x9b
 80049a6:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <UART+0xb04>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t)((omega_kalman*60/(2*M_PI))*255/10);
 80049ae:	4b87      	ldr	r3, [pc, #540]	; (8004bcc <UART+0xb14>)
 80049b0:	edd3 7a00 	vldr	s15, [r3]
 80049b4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004bd0 <UART+0xb18>
 80049b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049bc:	ee17 0a90 	vmov	r0, s15
 80049c0:	f7fb fd6e 	bl	80004a0 <__aeabi_f2d>
 80049c4:	a376      	add	r3, pc, #472	; (adr r3, 8004ba0 <UART+0xae8>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f7fb feeb 	bl	80007a4 <__aeabi_ddiv>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	a374      	add	r3, pc, #464	; (adr r3, 8004ba8 <UART+0xaf0>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fdb8 	bl	8000550 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <UART+0xb1c>)
 80049ee:	f7fb fed9 	bl	80007a4 <__aeabi_ddiv>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f7fc f859 	bl	8000ab0 <__aeabi_d2uiz>
 80049fe:	4603      	mov	r3, r0
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <UART+0xb04>)
 8004a04:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(~(TxData[2] + TxData[3] + TxData[4]));
 8004a06:	4b6d      	ldr	r3, [pc, #436]	; (8004bbc <UART+0xb04>)
 8004a08:	789a      	ldrb	r2, [r3, #2]
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <UART+0xb04>)
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	4413      	add	r3, r2
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <UART+0xb04>)
 8004a14:	791b      	ldrb	r3, [r3, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <UART+0xb04>)
 8004a20:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxData, 6);
 8004a22:	2206      	movs	r2, #6
 8004a24:	4965      	ldr	r1, [pc, #404]	; (8004bbc <UART+0xb04>)
 8004a26:	4867      	ldr	r0, [pc, #412]	; (8004bc4 <UART+0xb0c>)
 8004a28:	f005 fd72 	bl	800a510 <HAL_UART_Transmit_DMA>
			Timestamp_UI=micros();
 8004a2c:	f7fc ffde 	bl	80019ec <micros>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b64      	ldr	r3, [pc, #400]	; (8004bc8 <UART+0xb10>)
 8004a36:	601a      	str	r2, [r3, #0]
			CheckTrasmit=0;
 8004a38:	4b5f      	ldr	r3, [pc, #380]	; (8004bb8 <UART+0xb00>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
		break;
 8004a3e:	e0a4      	b.n	8004b8a <UART+0xad2>
			if(micros() - Timestamp_UI > 150){
 8004a40:	f7fc ffd4 	bl	80019ec <micros>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	495f      	ldr	r1, [pc, #380]	; (8004bc8 <UART+0xb10>)
 8004a4a:	6809      	ldr	r1, [r1, #0]
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	6039      	str	r1, [r7, #0]
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004a56:	4641      	mov	r1, r8
 8004a58:	1a54      	subs	r4, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb63 0501 	sbc.w	r5, r3, r1
 8004a60:	2c97      	cmp	r4, #151	; 0x97
 8004a62:	f175 0300 	sbcs.w	r3, r5, #0
 8004a66:	f0c0 8090 	bcc.w	8004b8a <UART+0xad2>
				RxData[0] = 0;
 8004a6a:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <UART+0xaf8>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
				HAL_UART_DMAStop(&huart2);
 8004a70:	4854      	ldr	r0, [pc, #336]	; (8004bc4 <UART+0xb0c>)
 8004a72:	f005 fdfb 	bl	800a66c <HAL_UART_DMAStop>
				CheckTrasmit=1;
 8004a76:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <UART+0xb00>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
		break;
 8004a7c:	e085      	b.n	8004b8a <UART+0xad2>
	case 0b10011100: //Go_Mode 12 FRAME#1
		if(RxData[1]==0b01100011){
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <UART+0xaf8>)
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b63      	cmp	r3, #99	; 0x63
 8004a84:	f040 8083 	bne.w	8004b8e <UART+0xad6>
			//enable gripple
			Enable_EndEffector = 1;
 8004a88:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <UART+0xb20>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004a8e:	2202      	movs	r2, #2
 8004a90:	4952      	ldr	r1, [pc, #328]	; (8004bdc <UART+0xb24>)
 8004a92:	484c      	ldr	r0, [pc, #304]	; (8004bc4 <UART+0xb0c>)
 8004a94:	f005 fd3c 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004a98:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <UART+0xaf8>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004a9e:	4849      	ldr	r0, [pc, #292]	; (8004bc4 <UART+0xb0c>)
 8004aa0:	f005 fde4 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004aa4:	e073      	b.n	8004b8e <UART+0xad6>
	case 0b10011101: //Go_Mode 13 FRAME#1
		if(RxData[1] == 0b01100010){
 8004aa6:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <UART+0xaf8>)
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b62      	cmp	r3, #98	; 0x62
 8004aac:	d171      	bne.n	8004b92 <UART+0xada>
			//disable gripple
			Enable_EndEffector = 0;
 8004aae:	4b4a      	ldr	r3, [pc, #296]	; (8004bd8 <UART+0xb20>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	4949      	ldr	r1, [pc, #292]	; (8004bdc <UART+0xb24>)
 8004ab8:	4842      	ldr	r0, [pc, #264]	; (8004bc4 <UART+0xb0c>)
 8004aba:	f005 fd29 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004abe:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <UART+0xaf8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004ac4:	483f      	ldr	r0, [pc, #252]	; (8004bc4 <UART+0xb0c>)
 8004ac6:	f005 fdd1 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004aca:	e062      	b.n	8004b92 <UART+0xada>
	case 0b10011110: //Go_Mode 14 FRAME#1
		if(RxData[1] == 0b01100001){
 8004acc:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <UART+0xaf8>)
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b61      	cmp	r3, #97	; 0x61
 8004ad2:	d160      	bne.n	8004b96 <UART+0xade>
			//Set HOME
			Arm_State = Home;
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <UART+0xb28>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
			theta_now = 0.1;
 8004ada:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <UART+0xb2c>)
 8004adc:	4a42      	ldr	r2, [pc, #264]	; (8004be8 <UART+0xb30>)
 8004ade:	601a      	str	r2, [r3, #0]
			SetHome_Flag=1;
 8004ae0:	4b42      	ldr	r3, [pc, #264]	; (8004bec <UART+0xb34>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ack1, 2); //send ack#1
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	493c      	ldr	r1, [pc, #240]	; (8004bdc <UART+0xb24>)
 8004aea:	4836      	ldr	r0, [pc, #216]	; (8004bc4 <UART+0xb0c>)
 8004aec:	f005 fd10 	bl	800a510 <HAL_UART_Transmit_DMA>
			RxData[0] = 0;
 8004af0:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <UART+0xaf8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8004af6:	4833      	ldr	r0, [pc, #204]	; (8004bc4 <UART+0xb0c>)
 8004af8:	f005 fdb8 	bl	800a66c <HAL_UART_DMAStop>
		}
		break;
 8004afc:	e04b      	b.n	8004b96 <UART+0xade>
	case 0:
		HAL_UART_Receive_DMA(&huart2, RxData, 12);
 8004afe:	220c      	movs	r2, #12
 8004b00:	492b      	ldr	r1, [pc, #172]	; (8004bb0 <UART+0xaf8>)
 8004b02:	4830      	ldr	r0, [pc, #192]	; (8004bc4 <UART+0xb0c>)
 8004b04:	f005 fd82 	bl	800a60c <HAL_UART_Receive_DMA>
		break;
 8004b08:	e073      	b.n	8004bf2 <UART+0xb3a>
	case 88:
		if(RxData[0] == 'X' && RxData[1] == 'u'){
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <UART+0xaf8>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b58      	cmp	r3, #88	; 0x58
 8004b10:	d16e      	bne.n	8004bf0 <UART+0xb38>
 8004b12:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <UART+0xaf8>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	2b75      	cmp	r3, #117	; 0x75
 8004b18:	d16a      	bne.n	8004bf0 <UART+0xb38>
			if(RxData[2] !=0 && RxData[3] != 0){
 8004b1a:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <UART+0xaf8>)
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d066      	beq.n	8004bf0 <UART+0xb38>
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <UART+0xaf8>)
 8004b24:	78db      	ldrb	r3, [r3, #3]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d062      	beq.n	8004bf0 <UART+0xb38>
				RxData[0]=RxData[2];
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <UART+0xaf8>)
 8004b2c:	789a      	ldrb	r2, [r3, #2]
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <UART+0xaf8>)
 8004b30:	701a      	strb	r2, [r3, #0]
				RxData[1]=RxData[3];
 8004b32:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <UART+0xaf8>)
 8004b34:	78da      	ldrb	r2, [r3, #3]
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <UART+0xaf8>)
 8004b38:	705a      	strb	r2, [r3, #1]
				RxData[2] =0;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <UART+0xaf8>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	709a      	strb	r2, [r3, #2]
				RxData[3] =0;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <UART+0xaf8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	70da      	strb	r2, [r3, #3]
				RxData[4] =0;
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <UART+0xaf8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	711a      	strb	r2, [r3, #4]
				RxData[5] =0;
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <UART+0xaf8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	715a      	strb	r2, [r3, #5]
			}
		}
		break;
 8004b52:	e04d      	b.n	8004bf0 <UART+0xb38>
	default: //RESET Go_Mode
		RxData[0] = 0;
 8004b54:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <UART+0xaf8>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
		HAL_UART_DMAStop(&huart2);
 8004b5a:	481a      	ldr	r0, [pc, #104]	; (8004bc4 <UART+0xb0c>)
 8004b5c:	f005 fd86 	bl	800a66c <HAL_UART_DMAStop>
		break;
 8004b60:	e047      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b62:	bf00      	nop
 8004b64:	e045      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b66:	bf00      	nop
 8004b68:	e043      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b6a:	bf00      	nop
 8004b6c:	e041      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b6e:	bf00      	nop
 8004b70:	e03f      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b72:	bf00      	nop
 8004b74:	e03d      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b76:	bf00      	nop
 8004b78:	e03b      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b7a:	bf00      	nop
 8004b7c:	e039      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b7e:	bf00      	nop
 8004b80:	e037      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b82:	bf00      	nop
 8004b84:	e035      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b86:	bf00      	nop
 8004b88:	e033      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b8a:	bf00      	nop
 8004b8c:	e031      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b8e:	bf00      	nop
 8004b90:	e02f      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b92:	bf00      	nop
 8004b94:	e02d      	b.n	8004bf2 <UART+0xb3a>
		break;
 8004b96:	bf00      	nop
 8004b98:	e02b      	b.n	8004bf2 <UART+0xb3a>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	54442d18 	.word	0x54442d18
 8004ba4:	401921fb 	.word	0x401921fb
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	406fe000 	.word	0x406fe000
 8004bb0:	2000063c 	.word	0x2000063c
 8004bb4:	20000659 	.word	0x20000659
 8004bb8:	200000c3 	.word	0x200000c3
 8004bbc:	20000080 	.word	0x20000080
 8004bc0:	20000088 	.word	0x20000088
 8004bc4:	200002c8 	.word	0x200002c8
 8004bc8:	20000698 	.word	0x20000698
 8004bcc:	200003e4 	.word	0x200003e4
 8004bd0:	42700000 	.word	0x42700000
 8004bd4:	40240000 	.word	0x40240000
 8004bd8:	2000064b 	.word	0x2000064b
 8004bdc:	20000090 	.word	0x20000090
 8004be0:	200000bf 	.word	0x200000bf
 8004be4:	200003d4 	.word	0x200003d4
 8004be8:	3dcccccd 	.word	0x3dcccccd
 8004bec:	200003d0 	.word	0x200003d0
		break;
 8004bf0:	bf00      	nop
	}
}
 8004bf2:	bf00      	nop
 8004bf4:	3758      	adds	r7, #88	; 0x58
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004bfc <OpenEndEffector>:

void OpenEndEffector() {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af02      	add	r7, sp, #8
	if (hi2c1.State == HAL_I2C_STATE_READY && FlagOpen_EndEffector == 1)
 8004c02:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <OpenEndEffector+0xf0>)
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d119      	bne.n	8004c42 <OpenEndEffector+0x46>
 8004c0e:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <OpenEndEffector+0xf4>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d115      	bne.n	8004c42 <OpenEndEffector+0x46>
	{
		static uint8_t addr_open = 0x45;
		HAL_I2C_Master_Transmit(&hi2c1, ENDEFF_ADDR, &addr_open, 1,100);
 8004c16:	2364      	movs	r3, #100	; 0x64
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <OpenEndEffector+0xf8>)
 8004c1e:	2146      	movs	r1, #70	; 0x46
 8004c20:	4832      	ldr	r0, [pc, #200]	; (8004cec <OpenEndEffector+0xf0>)
 8004c22:	f001 fc45 	bl	80064b0 <HAL_I2C_Master_Transmit>
		FlagOpen_EndEffector = 0;
 8004c26:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <OpenEndEffector+0xf4>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
		FlagRead_EndEffector = 1;
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <OpenEndEffector+0xfc>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
		EndEffector_State = State_start;
 8004c32:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <OpenEndEffector+0x100>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
		EndEffector_timestamp = HAL_GetTick();
 8004c38:	f000 fbd6 	bl	80053e8 <HAL_GetTick>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a30      	ldr	r2, [pc, #192]	; (8004d00 <OpenEndEffector+0x104>)
 8004c40:	6013      	str	r3, [r2, #0]
	}

	if (FlagRead_EndEffector == 1)
 8004c42:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <OpenEndEffector+0xfc>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d144      	bne.n	8004cd4 <OpenEndEffector+0xd8>
	{
		if (HAL_GetTick() - EndEffector_timestamp > 250)
 8004c4a:	f000 fbcd 	bl	80053e8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <OpenEndEffector+0x104>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2bfa      	cmp	r3, #250	; 0xfa
 8004c58:	d906      	bls.n	8004c68 <OpenEndEffector+0x6c>
		{
			EndEffector_timestamp = HAL_GetTick();
 8004c5a:	f000 fbc5 	bl	80053e8 <HAL_GetTick>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <OpenEndEffector+0x104>)
 8004c62:	6013      	str	r3, [r2, #0]
			CheckEndEffector();
 8004c64:	f000 f850 	bl	8004d08 <CheckEndEffector>
		}

		switch(EndEffector_State)
 8004c68:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <OpenEndEffector+0x100>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d83a      	bhi.n	8004ce6 <OpenEndEffector+0xea>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <OpenEndEffector+0x7c>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c8d 	.word	0x08004c8d
 8004c7c:	08004c9d 	.word	0x08004c9d
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004ccd 	.word	0x08004ccd
		{
		case State_start:
			if (EndEffector_Status == 0x12)
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <OpenEndEffector+0x108>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	2b12      	cmp	r3, #18
 8004c92:	d121      	bne.n	8004cd8 <OpenEndEffector+0xdc>
			{
				EndEffector_State = State_open;
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <OpenEndEffector+0x100>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c9a:	e01d      	b.n	8004cd8 <OpenEndEffector+0xdc>
		case State_open:
			if (EndEffector_Status == 0x34)
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <OpenEndEffector+0x108>)
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	2b34      	cmp	r3, #52	; 0x34
 8004ca2:	d11b      	bne.n	8004cdc <OpenEndEffector+0xe0>
			{
				EndEffector_State = State_shoot;
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <OpenEndEffector+0x100>)
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004caa:	e017      	b.n	8004cdc <OpenEndEffector+0xe0>
		case State_shoot:
			if (EndEffector_Status == 0x56)
 8004cac:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <OpenEndEffector+0x108>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b56      	cmp	r3, #86	; 0x56
 8004cb2:	d115      	bne.n	8004ce0 <OpenEndEffector+0xe4>
			{
				EndEffector_State = State_close;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <OpenEndEffector+0x100>)
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004cba:	e011      	b.n	8004ce0 <OpenEndEffector+0xe4>
		case State_close:
			if (EndEffector_Status == 0x78)
 8004cbc:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <OpenEndEffector+0x108>)
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	2b78      	cmp	r3, #120	; 0x78
 8004cc2:	d10f      	bne.n	8004ce4 <OpenEndEffector+0xe8>
			{
				EndEffector_State = State_wait;
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <OpenEndEffector+0x100>)
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004cca:	e00b      	b.n	8004ce4 <OpenEndEffector+0xe8>
		case State_wait:
			FlagRead_EndEffector = 0;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <OpenEndEffector+0xfc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
			break;
 8004cd2:	e008      	b.n	8004ce6 <OpenEndEffector+0xea>
		}
	}
 8004cd4:	bf00      	nop
 8004cd6:	e006      	b.n	8004ce6 <OpenEndEffector+0xea>
			break;
 8004cd8:	bf00      	nop
 8004cda:	e004      	b.n	8004ce6 <OpenEndEffector+0xea>
			break;
 8004cdc:	bf00      	nop
 8004cde:	e002      	b.n	8004ce6 <OpenEndEffector+0xea>
			break;
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <OpenEndEffector+0xea>
			break;
 8004ce4:	bf00      	nop
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000154 	.word	0x20000154
 8004cf0:	2000066c 	.word	0x2000066c
 8004cf4:	200000c4 	.word	0x200000c4
 8004cf8:	2000066d 	.word	0x2000066d
 8004cfc:	200000c0 	.word	0x200000c0
 8004d00:	20000670 	.word	0x20000670
 8004d04:	2000066e 	.word	0x2000066e

08004d08 <CheckEndEffector>:

void CheckEndEffector()
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af02      	add	r7, sp, #8
	static uint8_t addr = 0x23;
	HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ENDEFF_ADDR, &addr, 1, I2C_FIRST_FRAME);
 8004d0e:	2301      	movs	r3, #1
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	2301      	movs	r3, #1
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <CheckEndEffector+0x38>)
 8004d16:	2146      	movs	r1, #70	; 0x46
 8004d18:	480a      	ldr	r0, [pc, #40]	; (8004d44 <CheckEndEffector+0x3c>)
 8004d1a:	f001 fcc7 	bl	80066ac <HAL_I2C_Master_Seq_Transmit_IT>
	if(hi2c1.State == HAL_I2C_STATE_READY)
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <CheckEndEffector+0x3c>)
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d107      	bne.n	8004d3a <CheckEndEffector+0x32>
	{
		HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ENDEFF_ADDR, &EndEffector_Status, 1, I2C_LAST_FRAME);
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <CheckEndEffector+0x40>)
 8004d32:	2146      	movs	r1, #70	; 0x46
 8004d34:	4803      	ldr	r0, [pc, #12]	; (8004d44 <CheckEndEffector+0x3c>)
 8004d36:	f001 fd7f 	bl	8006838 <HAL_I2C_Master_Seq_Receive_IT>
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200000c5 	.word	0x200000c5
 8004d44:	20000154 	.word	0x20000154
 8004d48:	2000066e 	.word	0x2000066e

08004d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d50:	b672      	cpsid	i
}
 8004d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d54:	e7fe      	b.n	8004d54 <Error_Handler+0x8>
	...

08004d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_MspInit+0x4c>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004d96:	2007      	movs	r0, #7
 8004d98:	f000 fc26 	bl	80055e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800

08004da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_I2C_MspInit+0xa4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d13c      	bne.n	8004e44 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dec:	2312      	movs	r3, #18
 8004dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df4:	2303      	movs	r3, #3
 8004df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	4814      	ldr	r0, [pc, #80]	; (8004e54 <HAL_I2C_MspInit+0xac>)
 8004e04:	f001 f842 	bl	8005e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e16:	6413      	str	r3, [r2, #64]	; 0x40
 8004e18:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_I2C_MspInit+0xa8>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	201f      	movs	r0, #31
 8004e2a:	f000 fbe8 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004e2e:	201f      	movs	r0, #31
 8004e30:	f000 fc01 	bl	8005636 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004e34:	2200      	movs	r2, #0
 8004e36:	2100      	movs	r1, #0
 8004e38:	2020      	movs	r0, #32
 8004e3a:	f000 fbe0 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004e3e:	2020      	movs	r0, #32
 8004e40:	f000 fbf9 	bl	8005636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e44:	bf00      	nop
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40005400 	.word	0x40005400
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40020400 	.word	0x40020400

08004e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <HAL_TIM_Base_MspInit+0xb8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d116      	bne.n	8004e98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e86:	2200      	movs	r2, #0
 8004e88:	2100      	movs	r1, #0
 8004e8a:	201a      	movs	r0, #26
 8004e8c:	f000 fbb7 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e90:	201a      	movs	r0, #26
 8004e92:	f000 fbd0 	bl	8005636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004e96:	e036      	b.n	8004f06 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_TIM_Base_MspInit+0xc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d116      	bne.n	8004ed0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	201e      	movs	r0, #30
 8004ec4:	f000 fb9b 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ec8:	201e      	movs	r0, #30
 8004eca:	f000 fbb4 	bl	8005636 <HAL_NVIC_EnableIRQ>
}
 8004ece:	e01a      	b.n	8004f06 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <HAL_TIM_Base_MspInit+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d115      	bne.n	8004f06 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_TIM_Base_MspInit+0xbc>)
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	201a      	movs	r0, #26
 8004efc:	f000 fb7f 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f00:	201a      	movs	r0, #26
 8004f02:	f000 fb98 	bl	8005636 <HAL_NVIC_EnableIRQ>
}
 8004f06:	bf00      	nop
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40014800 	.word	0x40014800

08004f20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d12b      	bne.n	8004f9a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8004f7a:	23c0      	movs	r3, #192	; 0xc0
 8004f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	4619      	mov	r1, r3
 8004f94:	4805      	ldr	r0, [pc, #20]	; (8004fac <HAL_TIM_Encoder_MspInit+0x8c>)
 8004f96:	f000 ff79 	bl	8005e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f9a:	bf00      	nop
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40020000 	.word	0x40020000

08004fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a12      	ldr	r2, [pc, #72]	; (8005018 <HAL_TIM_MspPostInit+0x68>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d11e      	bne.n	8005010 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_TIM_MspPostInit+0x6c>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <HAL_TIM_MspPostInit+0x6c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <HAL_TIM_MspPostInit+0x6c>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8004fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005000:	2301      	movs	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8005004:	f107 030c 	add.w	r3, r7, #12
 8005008:	4619      	mov	r1, r3
 800500a:	4805      	ldr	r0, [pc, #20]	; (8005020 <HAL_TIM_MspPostInit+0x70>)
 800500c:	f000 ff3e 	bl	8005e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005010:	bf00      	nop
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40010000 	.word	0x40010000
 800501c:	40023800 	.word	0x40023800
 8005020:	40020000 	.word	0x40020000

08005024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a4c      	ldr	r2, [pc, #304]	; (8005174 <HAL_UART_MspInit+0x150>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f040 8091 	bne.w	800516a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <HAL_UART_MspInit+0x154>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	4a49      	ldr	r2, [pc, #292]	; (8005178 <HAL_UART_MspInit+0x154>)
 8005052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005056:	6413      	str	r3, [r2, #64]	; 0x40
 8005058:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_UART_MspInit+0x154>)
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	4b43      	ldr	r3, [pc, #268]	; (8005178 <HAL_UART_MspInit+0x154>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	4a42      	ldr	r2, [pc, #264]	; (8005178 <HAL_UART_MspInit+0x154>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6313      	str	r3, [r2, #48]	; 0x30
 8005074:	4b40      	ldr	r3, [pc, #256]	; (8005178 <HAL_UART_MspInit+0x154>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005080:	230c      	movs	r3, #12
 8005082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005084:	2302      	movs	r3, #2
 8005086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	2303      	movs	r3, #3
 800508e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005090:	2307      	movs	r3, #7
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	4619      	mov	r1, r3
 800509a:	4838      	ldr	r0, [pc, #224]	; (800517c <HAL_UART_MspInit+0x158>)
 800509c:	f000 fef6 	bl	8005e8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050a2:	4a38      	ldr	r2, [pc, #224]	; (8005184 <HAL_UART_MspInit+0x160>)
 80050a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b4:	4b32      	ldr	r3, [pc, #200]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050c2:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c8:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80050ce:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050d6:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80050e2:	4827      	ldr	r0, [pc, #156]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050e4:	f000 fac2 	bl	800566c <HAL_DMA_Init>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80050ee:	f7ff fe2d 	bl	8004d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a22      	ldr	r2, [pc, #136]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
 80050f8:	4a21      	ldr	r2, [pc, #132]	; (8005180 <HAL_UART_MspInit+0x15c>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <HAL_UART_MspInit+0x168>)
 8005102:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800510a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <HAL_UART_MspInit+0x164>)
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005114:	2200      	movs	r2, #0
 8005116:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_UART_MspInit+0x164>)
 800511a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800511e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005122:	2200      	movs	r2, #0
 8005124:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005128:	2200      	movs	r2, #0
 800512a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_UART_MspInit+0x164>)
 800512e:	2200      	movs	r2, #0
 8005130:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005134:	2200      	movs	r2, #0
 8005136:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_UART_MspInit+0x164>)
 800513a:	2200      	movs	r2, #0
 800513c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800513e:	4812      	ldr	r0, [pc, #72]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005140:	f000 fa94 	bl	800566c <HAL_DMA_Init>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800514a:	f7ff fdff 	bl	8004d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005152:	635a      	str	r2, [r3, #52]	; 0x34
 8005154:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <HAL_UART_MspInit+0x164>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2026      	movs	r0, #38	; 0x26
 8005160:	f000 fa4d 	bl	80055fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005164:	2026      	movs	r0, #38	; 0x26
 8005166:	f000 fa66 	bl	8005636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800516a:	bf00      	nop
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40004400 	.word	0x40004400
 8005178:	40023800 	.word	0x40023800
 800517c:	40020000 	.word	0x40020000
 8005180:	2000030c 	.word	0x2000030c
 8005184:	40026088 	.word	0x40026088
 8005188:	2000036c 	.word	0x2000036c
 800518c:	400260a0 	.word	0x400260a0

08005190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <NMI_Handler+0x4>

08005196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <HardFault_Handler+0x4>

0800519c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <MemManage_Handler+0x4>

080051a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <BusFault_Handler+0x4>

080051a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler+0x4>

080051ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051dc:	f000 f8f0 	bl	80053c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 80051e8:	2004      	movs	r0, #4
 80051ea:	f001 f805 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80051f6:	2010      	movs	r0, #16
 80051f8:	f000 fffe 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80051fc:	bf00      	nop
 80051fe:	bd80      	pop	{r7, pc}

08005200 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005204:	4802      	ldr	r0, [pc, #8]	; (8005210 <DMA1_Stream5_IRQHandler+0x10>)
 8005206:	f000 fbc9 	bl	800599c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	2000030c 	.word	0x2000030c

08005214 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <DMA1_Stream6_IRQHandler+0x10>)
 800521a:	f000 fbbf 	bl	800599c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	2000036c 	.word	0x2000036c

08005228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_X_Pin);
 800522c:	2080      	movs	r0, #128	; 0x80
 800522e:	f000 ffe3 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800523c:	4803      	ldr	r0, [pc, #12]	; (800524c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800523e:	f004 fabf 	bl	80097c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005242:	4803      	ldr	r0, [pc, #12]	; (8005250 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005244:	f004 fabc 	bl	80097c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005248:	bf00      	nop
 800524a:	bd80      	pop	{r7, pc}
 800524c:	200001a8 	.word	0x200001a8
 8005250:	20000280 	.word	0x20000280

08005254 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <TIM4_IRQHandler+0x10>)
 800525a:	f004 fab1 	bl	80097c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000238 	.word	0x20000238

08005268 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <I2C1_EV_IRQHandler+0x10>)
 800526e:	f001 fbe1 	bl	8006a34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000154 	.word	0x20000154

0800527c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <I2C1_ER_IRQHandler+0x10>)
 8005282:	f001 fd48 	bl	8006d16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000154 	.word	0x20000154

08005290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <USART2_IRQHandler+0x10>)
 8005296:	f005 fa69 	bl	800a76c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200002c8 	.word	0x200002c8

080052a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <SystemInit+0x20>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <SystemInit+0x20>)
 80052b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <Reset_Handler>:
 80052c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005300 <LoopFillZerobss+0x12>
 80052cc:	480d      	ldr	r0, [pc, #52]	; (8005304 <LoopFillZerobss+0x16>)
 80052ce:	490e      	ldr	r1, [pc, #56]	; (8005308 <LoopFillZerobss+0x1a>)
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <LoopFillZerobss+0x1e>)
 80052d2:	2300      	movs	r3, #0
 80052d4:	e002      	b.n	80052dc <LoopCopyDataInit>

080052d6 <CopyDataInit>:
 80052d6:	58d4      	ldr	r4, [r2, r3]
 80052d8:	50c4      	str	r4, [r0, r3]
 80052da:	3304      	adds	r3, #4

080052dc <LoopCopyDataInit>:
 80052dc:	18c4      	adds	r4, r0, r3
 80052de:	428c      	cmp	r4, r1
 80052e0:	d3f9      	bcc.n	80052d6 <CopyDataInit>
 80052e2:	4a0b      	ldr	r2, [pc, #44]	; (8005310 <LoopFillZerobss+0x22>)
 80052e4:	4c0b      	ldr	r4, [pc, #44]	; (8005314 <LoopFillZerobss+0x26>)
 80052e6:	2300      	movs	r3, #0
 80052e8:	e001      	b.n	80052ee <LoopFillZerobss>

080052ea <FillZerobss>:
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	3204      	adds	r2, #4

080052ee <LoopFillZerobss>:
 80052ee:	42a2      	cmp	r2, r4
 80052f0:	d3fb      	bcc.n	80052ea <FillZerobss>
 80052f2:	f7ff ffd7 	bl	80052a4 <SystemInit>
 80052f6:	f006 fd07 	bl	800bd08 <__libc_init_array>
 80052fa:	f7fb fdcd 	bl	8000e98 <main>
 80052fe:	4770      	bx	lr
 8005300:	20020000 	.word	0x20020000
 8005304:	20000000 	.word	0x20000000
 8005308:	20000138 	.word	0x20000138
 800530c:	0800cd70 	.word	0x0800cd70
 8005310:	20000138 	.word	0x20000138
 8005314:	200006a0 	.word	0x200006a0

08005318 <ADC_IRQHandler>:
 8005318:	e7fe      	b.n	8005318 <ADC_IRQHandler>
	...

0800531c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_Init+0x40>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0d      	ldr	r2, [pc, #52]	; (800535c <HAL_Init+0x40>)
 8005326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_Init+0x40>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <HAL_Init+0x40>)
 8005332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005338:	4b08      	ldr	r3, [pc, #32]	; (800535c <HAL_Init+0x40>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a07      	ldr	r2, [pc, #28]	; (800535c <HAL_Init+0x40>)
 800533e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005344:	2003      	movs	r0, #3
 8005346:	f000 f94f 	bl	80055e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800534a:	2000      	movs	r0, #0
 800534c:	f000 f808 	bl	8005360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005350:	f7ff fd02 	bl	8004d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40023c00 	.word	0x40023c00

08005360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_InitTick+0x54>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_InitTick+0x58>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	4619      	mov	r1, r3
 8005372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005376:	fbb3 f3f1 	udiv	r3, r3, r1
 800537a:	fbb2 f3f3 	udiv	r3, r2, r3
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f967 	bl	8005652 <HAL_SYSTICK_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e00e      	b.n	80053ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d80a      	bhi.n	80053aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005394:	2200      	movs	r2, #0
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	f000 f92f 	bl	80055fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053a0:	4a06      	ldr	r2, [pc, #24]	; (80053bc <HAL_InitTick+0x5c>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200000c8 	.word	0x200000c8
 80053b8:	200000d0 	.word	0x200000d0
 80053bc:	200000cc 	.word	0x200000cc

080053c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_IncTick+0x20>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_IncTick+0x24>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4413      	add	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_IncTick+0x24>)
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200000d0 	.word	0x200000d0
 80053e4:	2000069c 	.word	0x2000069c

080053e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return uwTick;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_GetTick+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	2000069c 	.word	0x2000069c

08005400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005408:	f7ff ffee 	bl	80053e8 <HAL_GetTick>
 800540c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d005      	beq.n	8005426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_Delay+0x44>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005426:	bf00      	nop
 8005428:	f7ff ffde 	bl	80053e8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d8f7      	bhi.n	8005428 <HAL_Delay+0x28>
  {
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	200000d0 	.word	0x200000d0

08005448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <__NVIC_SetPriorityGrouping+0x44>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005464:	4013      	ands	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800547a:	4a04      	ldr	r2, [pc, #16]	; (800548c <__NVIC_SetPriorityGrouping+0x44>)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	60d3      	str	r3, [r2, #12]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	f003 0307 	and.w	r3, r3, #7
}
 800549e:	4618      	mov	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	e000ed00 	.word	0xe000ed00

080054ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db0b      	blt.n	80054d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	f003 021f 	and.w	r2, r3, #31
 80054c4:	4907      	ldr	r1, [pc, #28]	; (80054e4 <__NVIC_EnableIRQ+0x38>)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	2001      	movs	r0, #1
 80054ce:	fa00 f202 	lsl.w	r2, r0, r2
 80054d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	e000e100 	.word	0xe000e100

080054e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	6039      	str	r1, [r7, #0]
 80054f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	db0a      	blt.n	8005512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	490c      	ldr	r1, [pc, #48]	; (8005534 <__NVIC_SetPriority+0x4c>)
 8005502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005506:	0112      	lsls	r2, r2, #4
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	440b      	add	r3, r1
 800550c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005510:	e00a      	b.n	8005528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	4908      	ldr	r1, [pc, #32]	; (8005538 <__NVIC_SetPriority+0x50>)
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	3b04      	subs	r3, #4
 8005520:	0112      	lsls	r2, r2, #4
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	440b      	add	r3, r1
 8005526:	761a      	strb	r2, [r3, #24]
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000e100 	.word	0xe000e100
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f1c3 0307 	rsb	r3, r3, #7
 8005556:	2b04      	cmp	r3, #4
 8005558:	bf28      	it	cs
 800555a:	2304      	movcs	r3, #4
 800555c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3304      	adds	r3, #4
 8005562:	2b06      	cmp	r3, #6
 8005564:	d902      	bls.n	800556c <NVIC_EncodePriority+0x30>
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3b03      	subs	r3, #3
 800556a:	e000      	b.n	800556e <NVIC_EncodePriority+0x32>
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43da      	mvns	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	401a      	ands	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005584:	f04f 31ff 	mov.w	r1, #4294967295
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	43d9      	mvns	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005594:	4313      	orrs	r3, r2
         );
}
 8005596:	4618      	mov	r0, r3
 8005598:	3724      	adds	r7, #36	; 0x24
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055b4:	d301      	bcc.n	80055ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055b6:	2301      	movs	r3, #1
 80055b8:	e00f      	b.n	80055da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ba:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <SysTick_Config+0x40>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055c2:	210f      	movs	r1, #15
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	f7ff ff8e 	bl	80054e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <SysTick_Config+0x40>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <SysTick_Config+0x40>)
 80055d4:	2207      	movs	r2, #7
 80055d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	e000e010 	.word	0xe000e010

080055e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ff29 	bl	8005448 <__NVIC_SetPriorityGrouping>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	4603      	mov	r3, r0
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005610:	f7ff ff3e 	bl	8005490 <__NVIC_GetPriorityGrouping>
 8005614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f7ff ff8e 	bl	800553c <NVIC_EncodePriority>
 8005620:	4602      	mov	r2, r0
 8005622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff5d 	bl	80054e8 <__NVIC_SetPriority>
}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	4603      	mov	r3, r0
 800563e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ff31 	bl	80054ac <__NVIC_EnableIRQ>
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ffa2 	bl	80055a4 <SysTick_Config>
 8005660:	4603      	mov	r3, r0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005678:	f7ff feb6 	bl	80053e8 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e099      	b.n	80057bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056a8:	e00f      	b.n	80056ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056aa:	f7ff fe9d 	bl	80053e8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d908      	bls.n	80056ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2203      	movs	r2, #3
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e078      	b.n	80057bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e8      	bne.n	80056aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <HAL_DMA_Init+0x158>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800570e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b04      	cmp	r3, #4
 8005722:	d107      	bne.n	8005734 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4313      	orrs	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0307 	bic.w	r3, r3, #7
 800574a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b04      	cmp	r3, #4
 800575c:	d117      	bne.n	800578e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00e      	beq.n	800578e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb0f 	bl	8005d94 <DMA_CheckFifoParam>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800578a:	2301      	movs	r3, #1
 800578c:	e016      	b.n	80057bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fac6 	bl	8005d28 <DMA_CalcBaseAndBitshift>
 800579c:	4603      	mov	r3, r0
 800579e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	223f      	movs	r2, #63	; 0x3f
 80057a6:	409a      	lsls	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	f010803f 	.word	0xf010803f

080057c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_DMA_Start_IT+0x26>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e040      	b.n	8005870 <HAL_DMA_Start_IT+0xa8>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d12f      	bne.n	8005862 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa58 	bl	8005ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	223f      	movs	r2, #63	; 0x3f
 8005822:	409a      	lsls	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0216 	orr.w	r2, r2, #22
 8005836:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e005      	b.n	800586e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800586a:	2302      	movs	r3, #2
 800586c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005886:	f7ff fdaf 	bl	80053e8 <HAL_GetTick>
 800588a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d008      	beq.n	80058aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e052      	b.n	8005950 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0216 	bic.w	r2, r2, #22
 80058b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <HAL_DMA_Abort+0x62>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0208 	bic.w	r2, r2, #8
 80058e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fa:	e013      	b.n	8005924 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058fc:	f7ff fd74 	bl	80053e8 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b05      	cmp	r3, #5
 8005908:	d90c      	bls.n	8005924 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2203      	movs	r2, #3
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e015      	b.n	8005950 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e4      	bne.n	80058fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005936:	223f      	movs	r2, #63	; 0x3f
 8005938:	409a      	lsls	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d004      	beq.n	8005976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e00c      	b.n	8005990 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2205      	movs	r2, #5
 800597a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059a8:	4b8e      	ldr	r3, [pc, #568]	; (8005be4 <HAL_DMA_IRQHandler+0x248>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a8e      	ldr	r2, [pc, #568]	; (8005be8 <HAL_DMA_IRQHandler+0x24c>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	0a9b      	lsrs	r3, r3, #10
 80059b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	2208      	movs	r2, #8
 80059c8:	409a      	lsls	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01a      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0204 	bic.w	r2, r2, #4
 80059ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	2208      	movs	r2, #8
 80059f6:	409a      	lsls	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d012      	beq.n	8005a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	2204      	movs	r2, #4
 8005a44:	409a      	lsls	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d012      	beq.n	8005a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	2204      	movs	r2, #4
 8005a62:	409a      	lsls	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	2210      	movs	r2, #16
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d043      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03c      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a96:	2210      	movs	r2, #16
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
 8005aca:	e01f      	b.n	8005b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01b      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4798      	blx	r3
 8005adc:	e016      	b.n	8005b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0208 	bic.w	r2, r2, #8
 8005afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	2220      	movs	r2, #32
 8005b12:	409a      	lsls	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 808f 	beq.w	8005c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8087 	beq.w	8005c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b32:	2220      	movs	r2, #32
 8005b34:	409a      	lsls	r2, r3
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d136      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0216 	bic.w	r2, r2, #22
 8005b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <HAL_DMA_IRQHandler+0x1da>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8a:	223f      	movs	r2, #63	; 0x3f
 8005b8c:	409a      	lsls	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d07e      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
        }
        return;
 8005bb2:	e079      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01d      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10d      	bne.n	8005bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e02c      	b.n	8005c3c <HAL_DMA_IRQHandler+0x2a0>
 8005be2:	bf00      	nop
 8005be4:	200000c8 	.word	0x200000c8
 8005be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d023      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
 8005bfc:	e01e      	b.n	8005c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0210 	bic.w	r2, r2, #16
 8005c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d032      	beq.n	8005caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2205      	movs	r2, #5
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d307      	bcc.n	8005c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f2      	bne.n	8005c68 <HAL_DMA_IRQHandler+0x2cc>
 8005c82:	e000      	b.n	8005c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
 8005ca6:	e000      	b.n	8005caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ca8:	bf00      	nop
    }
  }
}
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cbe:	b2db      	uxtb	r3, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d108      	bne.n	8005d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d0a:	e007      	b.n	8005d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	3b10      	subs	r3, #16
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <DMA_CalcBaseAndBitshift+0x64>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <DMA_CalcBaseAndBitshift+0x68>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d909      	bls.n	8005d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	659a      	str	r2, [r3, #88]	; 0x58
 8005d68:	e007      	b.n	8005d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	aaaaaaab 	.word	0xaaaaaaab
 8005d90:	0800cd28 	.word	0x0800cd28

08005d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d11f      	bne.n	8005dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d856      	bhi.n	8005e62 <DMA_CheckFifoParam+0xce>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <DMA_CheckFifoParam+0x28>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddf 	.word	0x08005ddf
 8005dc4:	08005dcd 	.word	0x08005dcd
 8005dc8:	08005e63 	.word	0x08005e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d046      	beq.n	8005e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e043      	b.n	8005e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de6:	d140      	bne.n	8005e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dec:	e03d      	b.n	8005e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	d121      	bne.n	8005e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d837      	bhi.n	8005e6e <DMA_CheckFifoParam+0xda>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <DMA_CheckFifoParam+0x70>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e1b 	.word	0x08005e1b
 8005e0c:	08005e15 	.word	0x08005e15
 8005e10:	08005e2d 	.word	0x08005e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e030      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d025      	beq.n	8005e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e2a:	e022      	b.n	8005e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e34:	d11f      	bne.n	8005e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e3a:	e01c      	b.n	8005e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d903      	bls.n	8005e4a <DMA_CheckFifoParam+0xb6>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e48:	e018      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4e:	e015      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e00b      	b.n	8005e7a <DMA_CheckFifoParam+0xe6>
      break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop

08005e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e159      	b.n	800615c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	f040 8148 	bne.w	8006156 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d005      	beq.n	8005ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d130      	bne.n	8005f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	2203      	movs	r2, #3
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f14:	2201      	movs	r2, #1
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	4013      	ands	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 0201 	and.w	r2, r3, #1
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d017      	beq.n	8005f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2203      	movs	r2, #3
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d123      	bne.n	8005fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3208      	adds	r2, #8
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	220f      	movs	r2, #15
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	08da      	lsrs	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3208      	adds	r2, #8
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	2203      	movs	r2, #3
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 0203 	and.w	r2, r3, #3
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80a2 	beq.w	8006156 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	4b57      	ldr	r3, [pc, #348]	; (8006174 <HAL_GPIO_Init+0x2e8>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	4a56      	ldr	r2, [pc, #344]	; (8006174 <HAL_GPIO_Init+0x2e8>)
 800601c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006020:	6453      	str	r3, [r2, #68]	; 0x44
 8006022:	4b54      	ldr	r3, [pc, #336]	; (8006174 <HAL_GPIO_Init+0x2e8>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800602e:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_GPIO_Init+0x2ec>)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	3302      	adds	r3, #2
 8006036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	220f      	movs	r2, #15
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4013      	ands	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a49      	ldr	r2, [pc, #292]	; (800617c <HAL_GPIO_Init+0x2f0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d019      	beq.n	800608e <HAL_GPIO_Init+0x202>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a48      	ldr	r2, [pc, #288]	; (8006180 <HAL_GPIO_Init+0x2f4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_GPIO_Init+0x1fe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a47      	ldr	r2, [pc, #284]	; (8006184 <HAL_GPIO_Init+0x2f8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00d      	beq.n	8006086 <HAL_GPIO_Init+0x1fa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a46      	ldr	r2, [pc, #280]	; (8006188 <HAL_GPIO_Init+0x2fc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <HAL_GPIO_Init+0x1f6>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a45      	ldr	r2, [pc, #276]	; (800618c <HAL_GPIO_Init+0x300>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_GPIO_Init+0x1f2>
 800607a:	2304      	movs	r3, #4
 800607c:	e008      	b.n	8006090 <HAL_GPIO_Init+0x204>
 800607e:	2307      	movs	r3, #7
 8006080:	e006      	b.n	8006090 <HAL_GPIO_Init+0x204>
 8006082:	2303      	movs	r3, #3
 8006084:	e004      	b.n	8006090 <HAL_GPIO_Init+0x204>
 8006086:	2302      	movs	r3, #2
 8006088:	e002      	b.n	8006090 <HAL_GPIO_Init+0x204>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_GPIO_Init+0x204>
 800608e:	2300      	movs	r3, #0
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	f002 0203 	and.w	r2, r2, #3
 8006096:	0092      	lsls	r2, r2, #2
 8006098:	4093      	lsls	r3, r2
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060a0:	4935      	ldr	r1, [pc, #212]	; (8006178 <HAL_GPIO_Init+0x2ec>)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	3302      	adds	r3, #2
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ae:	4b38      	ldr	r3, [pc, #224]	; (8006190 <HAL_GPIO_Init+0x304>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	43db      	mvns	r3, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060d2:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <HAL_GPIO_Init+0x304>)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060d8:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <HAL_GPIO_Init+0x304>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060fc:	4a24      	ldr	r2, [pc, #144]	; (8006190 <HAL_GPIO_Init+0x304>)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006102:	4b23      	ldr	r3, [pc, #140]	; (8006190 <HAL_GPIO_Init+0x304>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006126:	4a1a      	ldr	r2, [pc, #104]	; (8006190 <HAL_GPIO_Init+0x304>)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800612c:	4b18      	ldr	r3, [pc, #96]	; (8006190 <HAL_GPIO_Init+0x304>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <HAL_GPIO_Init+0x304>)
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3301      	adds	r3, #1
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	f67f aea2 	bls.w	8005ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800
 8006178:	40013800 	.word	0x40013800
 800617c:	40020000 	.word	0x40020000
 8006180:	40020400 	.word	0x40020400
 8006184:	40020800 	.word	0x40020800
 8006188:	40020c00 	.word	0x40020c00
 800618c:	40021000 	.word	0x40021000
 8006190:	40013c00 	.word	0x40013c00

08006194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	887b      	ldrh	r3, [r7, #2]
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
 80061b0:	e001      	b.n	80061b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061d4:	787b      	ldrb	r3, [r7, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e0:	e003      	b.n	80061ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	041a      	lsls	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	619a      	str	r2, [r3, #24]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800620e:	4a05      	ldr	r2, [pc, #20]	; (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fb fb74 	bl	8001904 <HAL_GPIO_EXTI_Callback>
  }
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40013c00 	.word	0x40013c00

08006228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e12b      	b.n	8006492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe fdaa 	bl	8004da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2224      	movs	r2, #36	; 0x24
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800628a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800628c:	f002 ff26 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4a81      	ldr	r2, [pc, #516]	; (800649c <HAL_I2C_Init+0x274>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d807      	bhi.n	80062ac <HAL_I2C_Init+0x84>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a80      	ldr	r2, [pc, #512]	; (80064a0 <HAL_I2C_Init+0x278>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	bf94      	ite	ls
 80062a4:	2301      	movls	r3, #1
 80062a6:	2300      	movhi	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e006      	b.n	80062ba <HAL_I2C_Init+0x92>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a7d      	ldr	r2, [pc, #500]	; (80064a4 <HAL_I2C_Init+0x27c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	bf94      	ite	ls
 80062b4:	2301      	movls	r3, #1
 80062b6:	2300      	movhi	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e0e7      	b.n	8006492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a78      	ldr	r2, [pc, #480]	; (80064a8 <HAL_I2C_Init+0x280>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	0c9b      	lsrs	r3, r3, #18
 80062cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4a6a      	ldr	r2, [pc, #424]	; (800649c <HAL_I2C_Init+0x274>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d802      	bhi.n	80062fc <HAL_I2C_Init+0xd4>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3301      	adds	r3, #1
 80062fa:	e009      	b.n	8006310 <HAL_I2C_Init+0xe8>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	4a69      	ldr	r2, [pc, #420]	; (80064ac <HAL_I2C_Init+0x284>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	099b      	lsrs	r3, r3, #6
 800630e:	3301      	adds	r3, #1
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	430b      	orrs	r3, r1
 8006316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006322:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	495c      	ldr	r1, [pc, #368]	; (800649c <HAL_I2C_Init+0x274>)
 800632c:	428b      	cmp	r3, r1
 800632e:	d819      	bhi.n	8006364 <HAL_I2C_Init+0x13c>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1e59      	subs	r1, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	fbb1 f3f3 	udiv	r3, r1, r3
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006344:	400b      	ands	r3, r1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_I2C_Init+0x138>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1e59      	subs	r1, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	fbb1 f3f3 	udiv	r3, r1, r3
 8006358:	3301      	adds	r3, #1
 800635a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635e:	e051      	b.n	8006404 <HAL_I2C_Init+0x1dc>
 8006360:	2304      	movs	r3, #4
 8006362:	e04f      	b.n	8006404 <HAL_I2C_Init+0x1dc>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d111      	bne.n	8006390 <HAL_I2C_Init+0x168>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1e58      	subs	r0, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	440b      	add	r3, r1
 800637a:	fbb0 f3f3 	udiv	r3, r0, r3
 800637e:	3301      	adds	r3, #1
 8006380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf0c      	ite	eq
 8006388:	2301      	moveq	r3, #1
 800638a:	2300      	movne	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e012      	b.n	80063b6 <HAL_I2C_Init+0x18e>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1e58      	subs	r0, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6859      	ldr	r1, [r3, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	0099      	lsls	r1, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063a6:	3301      	adds	r3, #1
 80063a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Init+0x196>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e022      	b.n	8006404 <HAL_I2C_Init+0x1dc>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <HAL_I2C_Init+0x1bc>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1e58      	subs	r0, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	440b      	add	r3, r1
 80063d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d8:	3301      	adds	r3, #1
 80063da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	e00f      	b.n	8006404 <HAL_I2C_Init+0x1dc>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1e58      	subs	r0, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6859      	ldr	r1, [r3, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	0099      	lsls	r1, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063fa:	3301      	adds	r3, #1
 80063fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	6809      	ldr	r1, [r1, #0]
 8006408:	4313      	orrs	r3, r2
 800640a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6911      	ldr	r1, [r2, #16]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68d2      	ldr	r2, [r2, #12]
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	430b      	orrs	r3, r1
 8006446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	000186a0 	.word	0x000186a0
 80064a0:	001e847f 	.word	0x001e847f
 80064a4:	003d08ff 	.word	0x003d08ff
 80064a8:	431bde83 	.word	0x431bde83
 80064ac:	10624dd3 	.word	0x10624dd3

080064b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	461a      	mov	r2, r3
 80064bc:	460b      	mov	r3, r1
 80064be:	817b      	strh	r3, [r7, #10]
 80064c0:	4613      	mov	r3, r2
 80064c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064c4:	f7fe ff90 	bl	80053e8 <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	f040 80e0 	bne.w	8006698 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2319      	movs	r3, #25
 80064de:	2201      	movs	r2, #1
 80064e0:	4970      	ldr	r1, [pc, #448]	; (80066a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f001 ffb6 	bl	8008454 <I2C_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80064ee:	2302      	movs	r3, #2
 80064f0:	e0d3      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_I2C_Master_Transmit+0x50>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e0cc      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d007      	beq.n	8006526 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006534:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2221      	movs	r2, #33	; 0x21
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2210      	movs	r2, #16
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	893a      	ldrh	r2, [r7, #8]
 8006556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a50      	ldr	r2, [pc, #320]	; (80066a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006568:	8979      	ldrh	r1, [r7, #10]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 fe46 	bl	8008200 <I2C_MasterRequestWrite>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e08d      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006594:	e066      	b.n	8006664 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	6a39      	ldr	r1, [r7, #32]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f002 f830 	bl	8008600 <I2C_WaitOnTXEFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d107      	bne.n	80065be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e06b      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d11b      	bne.n	8006638 <HAL_I2C_Master_Transmit+0x188>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d017      	beq.n	8006638 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	6a39      	ldr	r1, [r7, #32]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f002 f820 	bl	8008682 <I2C_WaitOnBTFFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b04      	cmp	r3, #4
 800664e:	d107      	bne.n	8006660 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e01a      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d194      	bne.n	8006596 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e000      	b.n	800669a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006698:	2302      	movs	r3, #2
  }
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	00100002 	.word	0x00100002
 80066a8:	ffff0000 	.word	0xffff0000

080066ac <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	461a      	mov	r2, r3
 80066b8:	460b      	mov	r3, r1
 80066ba:	817b      	strh	r3, [r7, #10]
 80066bc:	4613      	mov	r3, r2
 80066be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	f040 80a6 	bne.w	8006822 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d005      	beq.n	80066f2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d002      	beq.n	80066f2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d130      	bne.n	8006754 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80066f2:	4b4f      	ldr	r3, [pc, #316]	; (8006830 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	08db      	lsrs	r3, r3, #3
 80066f8:	4a4e      	ldr	r2, [pc, #312]	; (8006834 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	0a1a      	lsrs	r2, r3, #8
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009a      	lsls	r2, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3b01      	subs	r3, #1
 8006710:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d116      	bne.n	8006746 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e06e      	b.n	8006824 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d0db      	beq.n	800670c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800675e:	2302      	movs	r3, #2
 8006760:	e060      	b.n	8006824 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d007      	beq.n	8006788 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2221      	movs	r2, #33	; 0x21
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2210      	movs	r2, #16
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	893a      	ldrh	r2, [r7, #8]
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80067ca:	897a      	ldrh	r2, [r7, #10]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b11      	cmp	r3, #17
 80067da:	d10c      	bne.n	80067f6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80067e2:	d003      	beq.n	80067ec <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80067ea:	d101      	bne.n	80067f0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80067f0:	2300      	movs	r3, #0
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006804:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800681c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e000      	b.n	8006824 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006822:	2302      	movs	r3, #2
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	200000c8 	.word	0x200000c8
 8006834:	14f8b589 	.word	0x14f8b589

08006838 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	; 0x24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	461a      	mov	r2, r3
 8006844:	460b      	mov	r3, r1
 8006846:	817b      	strh	r3, [r7, #10]
 8006848:	4613      	mov	r3, r2
 800684a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800684c:	2300      	movs	r3, #0
 800684e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006854:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006858:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b20      	cmp	r3, #32
 8006864:	f040 80da 	bne.w	8006a1c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006876:	d005      	beq.n	8006884 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2b08      	cmp	r3, #8
 800687c:	d002      	beq.n	8006884 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	2b01      	cmp	r3, #1
 8006882:	d130      	bne.n	80068e6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006884:	4b69      	ldr	r3, [pc, #420]	; (8006a2c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	08db      	lsrs	r3, r3, #3
 800688a:	4a69      	ldr	r2, [pc, #420]	; (8006a30 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	0a1a      	lsrs	r2, r3, #8
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009a      	lsls	r2, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d116      	bne.n	80068d8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	f043 0220 	orr.w	r2, r3, #32
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a2      	b.n	8006a1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d0db      	beq.n	800689e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e094      	b.n	8006a1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d007      	beq.n	800691a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006928:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2222      	movs	r2, #34	; 0x22
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2210      	movs	r2, #16
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	893a      	ldrh	r2, [r7, #8]
 800694a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800695c:	897a      	ldrh	r2, [r7, #10]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d126      	bne.n	80069c0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b20      	cmp	r3, #32
 8006976:	d002      	beq.n	800697e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b10      	cmp	r3, #16
 800697c:	d120      	bne.n	80069c0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b12      	cmp	r3, #18
 8006982:	d114      	bne.n	80069ae <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a2:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069aa:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80069ac:	e010      	b.n	80069d0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069bc:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80069be:	e007      	b.n	80069d0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ce:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b12      	cmp	r3, #18
 80069d4:	d10c      	bne.n	80069f0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069dc:	d003      	beq.n	80069e6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069e4:	d101      	bne.n	80069ea <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d107      	bne.n	8006a00 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e000      	b.n	8006a1e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
  }
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3724      	adds	r7, #36	; 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	200000c8 	.word	0x200000c8
 8006a30:	14f8b589 	.word	0x14f8b589

08006a34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d003      	beq.n	8006a6c <HAL_I2C_EV_IRQHandler+0x38>
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	f040 80c1 	bne.w	8006bee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a8c:	d003      	beq.n	8006a96 <HAL_I2C_EV_IRQHandler+0x62>
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a94:	d101      	bne.n	8006a9a <HAL_I2C_EV_IRQHandler+0x66>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <HAL_I2C_EV_IRQHandler+0x68>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	f000 8132 	beq.w	8006d06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0x92>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	0a5b      	lsrs	r3, r3, #9
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fe84 	bl	80087c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd83 	bl	80075ca <I2C_Master_SB>
 8006ac4:	e092      	b.n	8006bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fdf9 	bl	80076d6 <I2C_Master_ADD10>
 8006ae4:	e082      	b.n	8006bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <HAL_I2C_EV_IRQHandler+0xd2>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	0a5b      	lsrs	r3, r3, #9
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fe13 	bl	800772a <I2C_Master_ADDR>
 8006b04:	e072      	b.n	8006bec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d03b      	beq.n	8006b8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b20:	f000 80f3 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	09db      	lsrs	r3, r3, #7
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00f      	beq.n	8006b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	0a9b      	lsrs	r3, r3, #10
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9f3 	bl	8006f34 <I2C_MasterTransmit_TXE>
 8006b4e:	e04d      	b.n	8006bec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	089b      	lsrs	r3, r3, #2
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80d6 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	0a5b      	lsrs	r3, r3, #9
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80cf 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b21      	cmp	r3, #33	; 0x21
 8006b70:	d103      	bne.n	8006b7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa7a 	bl	800706c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b78:	e0c7      	b.n	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	f040 80c4 	bne.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fae8 	bl	8007158 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b88:	e0bf      	b.n	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b98:	f000 80b7 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	099b      	lsrs	r3, r3, #6
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00f      	beq.n	8006bc8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	0a9b      	lsrs	r3, r3, #10
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <HAL_I2C_EV_IRQHandler+0x194>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d103      	bne.n	8006bc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fb5d 	bl	8007280 <I2C_MasterReceive_RXNE>
 8006bc6:	e011      	b.n	8006bec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 809a 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	0a5b      	lsrs	r3, r3, #9
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8093 	beq.w	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc06 	bl	80073f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bea:	e08e      	b.n	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bec:	e08d      	b.n	8006d0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	e007      	b.n	8006c10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x20e>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 ffc4 	bl	8007bc8 <I2C_Slave_ADDR>
 8006c40:	e066      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_I2C_EV_IRQHandler+0x22e>
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	0a5b      	lsrs	r3, r3, #9
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fffe 	bl	8007c5c <I2C_Slave_STOPF>
 8006c60:	e056      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b21      	cmp	r3, #33	; 0x21
 8006c66:	d002      	beq.n	8006c6e <HAL_I2C_EV_IRQHandler+0x23a>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b29      	cmp	r3, #41	; 0x29
 8006c6c:	d125      	bne.n	8006cba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	09db      	lsrs	r3, r3, #7
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <HAL_I2C_EV_IRQHandler+0x266>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	0a9b      	lsrs	r3, r3, #10
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_I2C_EV_IRQHandler+0x266>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	089b      	lsrs	r3, r3, #2
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 feda 	bl	8007a4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c98:	e039      	b.n	8006d0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	089b      	lsrs	r3, r3, #2
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d033      	beq.n	8006d0e <HAL_I2C_EV_IRQHandler+0x2da>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a5b      	lsrs	r3, r3, #9
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02d      	beq.n	8006d0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 ff07 	bl	8007ac6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cb8:	e029      	b.n	8006d0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	099b      	lsrs	r3, r3, #6
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00f      	beq.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	0a9b      	lsrs	r3, r3, #10
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff12 	bl	8007b08 <I2C_SlaveReceive_RXNE>
 8006ce4:	e014      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00e      	beq.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	0a5b      	lsrs	r3, r3, #9
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 ff40 	bl	8007b84 <I2C_SlaveReceive_BTF>
 8006d04:	e004      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b08a      	sub	sp, #40	; 0x28
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x4e>
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	0a5b      	lsrs	r3, r3, #9
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <HAL_I2C_ER_IRQHandler+0x78>
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	f043 0302 	orr.w	r3, r3, #2
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	0a9b      	lsrs	r3, r3, #10
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d03f      	beq.n	8006e1a <HAL_I2C_ER_IRQHandler+0x104>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d039      	beq.n	8006e1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006da6:	7efb      	ldrb	r3, [r7, #27]
 8006da8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006dc0:	7ebb      	ldrb	r3, [r7, #26]
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d112      	bne.n	8006dec <HAL_I2C_ER_IRQHandler+0xd6>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10f      	bne.n	8006dec <HAL_I2C_ER_IRQHandler+0xd6>
 8006dcc:	7cfb      	ldrb	r3, [r7, #19]
 8006dce:	2b21      	cmp	r3, #33	; 0x21
 8006dd0:	d008      	beq.n	8006de4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006dd2:	7cfb      	ldrb	r3, [r7, #19]
 8006dd4:	2b29      	cmp	r3, #41	; 0x29
 8006dd6:	d005      	beq.n	8006de4 <HAL_I2C_ER_IRQHandler+0xce>
 8006dd8:	7cfb      	ldrb	r3, [r7, #19]
 8006dda:	2b28      	cmp	r3, #40	; 0x28
 8006ddc:	d106      	bne.n	8006dec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b21      	cmp	r3, #33	; 0x21
 8006de2:	d103      	bne.n	8006dec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f869 	bl	8007ebc <I2C_Slave_AF>
 8006dea:	e016      	b.n	8006e1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006df4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dfe:	7efb      	ldrb	r3, [r7, #27]
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d002      	beq.n	8006e0a <HAL_I2C_ER_IRQHandler+0xf4>
 8006e04:	7efb      	ldrb	r3, [r7, #27]
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d107      	bne.n	8006e1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	0adb      	lsrs	r3, r3, #11
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <HAL_I2C_ER_IRQHandler+0x12e>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	f043 0308 	orr.w	r3, r3, #8
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f8a0 	bl	8007f9c <I2C_ITError>
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3728      	adds	r7, #40	; 0x28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d150      	bne.n	8006ffc <I2C_MasterTransmit_TXE+0xc8>
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b21      	cmp	r3, #33	; 0x21
 8006f5e:	d14d      	bne.n	8006ffc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d01d      	beq.n	8006fa2 <I2C_MasterTransmit_TXE+0x6e>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d01a      	beq.n	8006fa2 <I2C_MasterTransmit_TXE+0x6e>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f72:	d016      	beq.n	8006fa2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2211      	movs	r2, #17
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ff62 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fa0:	e060      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d107      	bne.n	8006fec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff7d 	bl	8006ee4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fea:	e03b      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff35 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ffa:	e033      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b21      	cmp	r3, #33	; 0x21
 8007000:	d005      	beq.n	800700e <I2C_MasterTransmit_TXE+0xda>
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d12d      	bne.n	8007064 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b22      	cmp	r3, #34	; 0x22
 800700c:	d12a      	bne.n	8007064 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007026:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007028:	e01c      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d103      	bne.n	800703e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f88e 	bl	8007158 <I2C_MemoryTransmit_TXE_BTF>
}
 800703c:	e012      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007062:	e7ff      	b.n	8007064 <I2C_MasterTransmit_TXE+0x130>
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b21      	cmp	r3, #33	; 0x21
 8007084:	d164      	bne.n	8007150 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d012      	beq.n	80070b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80070b4:	e04c      	b.n	8007150 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d01d      	beq.n	80070f8 <I2C_MasterTransmit_BTF+0x8c>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d01a      	beq.n	80070f8 <I2C_MasterTransmit_BTF+0x8c>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070c8:	d016      	beq.n	80070f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2211      	movs	r2, #17
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff feb7 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
}
 80070f6:	e02b      	b.n	8007150 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007106:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007116:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d107      	bne.n	8007142 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fed2 	bl	8006ee4 <HAL_I2C_MemTxCpltCallback>
}
 8007140:	e006      	b.n	8007150 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fe8a 	bl	8006e64 <HAL_I2C_MasterTxCpltCallback>
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007166:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11d      	bne.n	80071ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d10b      	bne.n	8007190 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717c:	b2da      	uxtb	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800718e:	e073      	b.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007194:	b29b      	uxth	r3, r3
 8007196:	121b      	asrs	r3, r3, #8
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071aa:	e065      	b.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10b      	bne.n	80071cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071ca:	e055      	b.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d151      	bne.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	d10d      	bne.n	80071f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071f4:	e040      	b.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b21      	cmp	r3, #33	; 0x21
 8007204:	d112      	bne.n	800722c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800722a:	e025      	b.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d120      	bne.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b21      	cmp	r3, #33	; 0x21
 800723a:	d11d      	bne.n	8007278 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fe36 	bl	8006ee4 <HAL_I2C_MemTxCpltCallback>
}
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b22      	cmp	r3, #34	; 0x22
 8007292:	f040 80ac 	bne.w	80073ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729a:	b29b      	uxth	r3, r3
 800729c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d921      	bls.n	80072e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	f040 808c 	bne.w	80073ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072e6:	e082      	b.n	80073ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d075      	beq.n	80073dc <I2C_MasterReceive_RXNE+0x15c>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <I2C_MasterReceive_RXNE+0x7c>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d16f      	bne.n	80073dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fa01 	bl	8008704 <I2C_WaitOnSTOPRequestThroughIT>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d142      	bne.n	800738e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007316:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007326:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d10a      	bne.n	8007378 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fdc1 	bl	8006ef8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007376:	e03a      	b.n	80073ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2212      	movs	r2, #18
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fd76 	bl	8006e78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800738c:	e02f      	b.n	80073ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800739c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fd99 	bl	8006f0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073da:	e008      	b.n	80073ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	e7ff      	b.n	80073ee <I2C_MasterReceive_RXNE+0x16e>
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	d11b      	bne.n	8007446 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007444:	e0bd      	b.n	80075c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b03      	cmp	r3, #3
 800744e:	d129      	bne.n	80074a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d00a      	beq.n	800747c <I2C_MasterReceive_BTF+0x86>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d007      	beq.n	800747c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074a2:	e08e      	b.n	80075c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d176      	bne.n	800759c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d002      	beq.n	80074ba <I2C_MasterReceive_BTF+0xc4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b10      	cmp	r3, #16
 80074b8:	d108      	bne.n	80074cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e019      	b.n	8007500 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d002      	beq.n	80074d8 <I2C_MasterReceive_BTF+0xe2>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d108      	bne.n	80074ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e00a      	b.n	8007500 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d007      	beq.n	8007500 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800755a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d10a      	bne.n	8007586 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fcba 	bl	8006ef8 <HAL_I2C_MemRxCpltCallback>
}
 8007584:	e01d      	b.n	80075c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2212      	movs	r2, #18
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fc6f 	bl	8006e78 <HAL_I2C_MasterRxCpltCallback>
}
 800759a:	e012      	b.n	80075c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d117      	bne.n	800760e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075f8:	e067      	b.n	80076ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	611a      	str	r2, [r3, #16]
}
 800760c:	e05d      	b.n	80076ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007616:	d133      	bne.n	8007680 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b21      	cmp	r3, #33	; 0x21
 8007622:	d109      	bne.n	8007638 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007634:	611a      	str	r2, [r3, #16]
 8007636:	e008      	b.n	800764a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <I2C_Master_SB+0x92>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d108      	bne.n	800766e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	2b00      	cmp	r3, #0
 8007662:	d032      	beq.n	80076ca <I2C_Master_SB+0x100>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02d      	beq.n	80076ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767c:	605a      	str	r2, [r3, #4]
}
 800767e:	e024      	b.n	80076ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	b29b      	uxth	r3, r3
 800768e:	11db      	asrs	r3, r3, #7
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f003 0306 	and.w	r3, r3, #6
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f063 030f 	orn	r3, r3, #15
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	611a      	str	r2, [r3, #16]
}
 80076a4:	e011      	b.n	80076ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d10d      	bne.n	80076ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	11db      	asrs	r3, r3, #7
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0306 	and.w	r3, r3, #6
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f063 030e 	orn	r3, r3, #14
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	611a      	str	r2, [r3, #16]
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <I2C_Master_ADD10+0x26>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00c      	beq.n	800771e <I2C_Master_ADD10+0x48>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771c:	605a      	str	r2, [r3, #4]
  }
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800772a:	b480      	push	{r7}
 800772c:	b091      	sub	sp, #68	; 0x44
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b22      	cmp	r3, #34	; 0x22
 8007752:	f040 8169 	bne.w	8007a28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10f      	bne.n	800777e <I2C_Master_ADDR+0x54>
 800775e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d10b      	bne.n	800777e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007766:	2300      	movs	r3, #0
 8007768:	633b      	str	r3, [r7, #48]	; 0x30
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	633b      	str	r3, [r7, #48]	; 0x30
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	e160      	b.n	8007a40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11d      	bne.n	80077c2 <I2C_Master_ADDR+0x98>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800778e:	d118      	bne.n	80077c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	651a      	str	r2, [r3, #80]	; 0x50
 80077c0:	e13e      	b.n	8007a40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d113      	bne.n	80077f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077cc:	2300      	movs	r3, #0
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e115      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 808a 	bne.w	8007914 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007806:	d137      	bne.n	8007878 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	d113      	bne.n	8007850 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007836:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007838:	2300      	movs	r3, #0
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	e0e7      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007850:	2300      	movs	r3, #0
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	623b      	str	r3, [r7, #32]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	623b      	str	r3, [r7, #32]
 8007864:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e0d3      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	2b08      	cmp	r3, #8
 800787c:	d02e      	beq.n	80078dc <I2C_Master_ADDR+0x1b2>
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	2b20      	cmp	r3, #32
 8007882:	d02b      	beq.n	80078dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	2b12      	cmp	r3, #18
 8007888:	d102      	bne.n	8007890 <I2C_Master_ADDR+0x166>
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2b01      	cmp	r3, #1
 800788e:	d125      	bne.n	80078dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b04      	cmp	r3, #4
 8007894:	d00e      	beq.n	80078b4 <I2C_Master_ADDR+0x18a>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b02      	cmp	r3, #2
 800789a:	d00b      	beq.n	80078b4 <I2C_Master_ADDR+0x18a>
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2b10      	cmp	r3, #16
 80078a0:	d008      	beq.n	80078b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	e007      	b.n	80078c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c4:	2300      	movs	r3, #0
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	e0a1      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ec:	2300      	movs	r3, #0
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	e085      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d14d      	bne.n	80079ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b04      	cmp	r3, #4
 8007922:	d016      	beq.n	8007952 <I2C_Master_ADDR+0x228>
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	2b02      	cmp	r3, #2
 8007928:	d013      	beq.n	8007952 <I2C_Master_ADDR+0x228>
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	2b10      	cmp	r3, #16
 800792e:	d010      	beq.n	8007952 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800793e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e007      	b.n	8007962 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007960:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007970:	d117      	bne.n	80079a2 <I2C_Master_ADDR+0x278>
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007978:	d00b      	beq.n	8007992 <I2C_Master_ADDR+0x268>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	2b01      	cmp	r3, #1
 800797e:	d008      	beq.n	8007992 <I2C_Master_ADDR+0x268>
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	2b08      	cmp	r3, #8
 8007984:	d005      	beq.n	8007992 <I2C_Master_ADDR+0x268>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2b10      	cmp	r3, #16
 800798a:	d002      	beq.n	8007992 <I2C_Master_ADDR+0x268>
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	2b20      	cmp	r3, #32
 8007990:	d107      	bne.n	80079a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	e032      	b.n	8007a20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d8:	d117      	bne.n	8007a0a <I2C_Master_ADDR+0x2e0>
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079e0:	d00b      	beq.n	80079fa <I2C_Master_ADDR+0x2d0>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d008      	beq.n	80079fa <I2C_Master_ADDR+0x2d0>
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d005      	beq.n	80079fa <I2C_Master_ADDR+0x2d0>
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d002      	beq.n	80079fa <I2C_Master_ADDR+0x2d0>
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d107      	bne.n	8007a0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	613b      	str	r3, [r7, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a26:	e00b      	b.n	8007a40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	e7ff      	b.n	8007a40 <I2C_Master_ADDR+0x316>
 8007a40:	bf00      	nop
 8007a42:	3744      	adds	r7, #68	; 0x44
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02b      	beq.n	8007abe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d114      	bne.n	8007abe <I2C_SlaveTransmit_TXE+0x72>
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b29      	cmp	r3, #41	; 0x29
 8007a98:	d111      	bne.n	8007abe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2228      	movs	r2, #40	; 0x28
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff f9e7 	bl	8006e8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d011      	beq.n	8007afc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d02c      	beq.n	8007b7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d114      	bne.n	8007b7c <I2C_SlaveReceive_RXNE+0x74>
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b2a      	cmp	r3, #42	; 0x2a
 8007b56:	d111      	bne.n	8007b7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2222      	movs	r2, #34	; 0x22
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2228      	movs	r2, #40	; 0x28
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff f992 	bl	8006ea0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d012      	beq.n	8007bbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007be2:	2b28      	cmp	r3, #40	; 0x28
 8007be4:	d127      	bne.n	8007c36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	089b      	lsrs	r3, r3, #2
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	09db      	lsrs	r3, r3, #7
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	81bb      	strh	r3, [r7, #12]
 8007c18:	e002      	b.n	8007c20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c28:	89ba      	ldrh	r2, [r7, #12]
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f940 	bl	8006eb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c34:	e00e      	b.n	8007c54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	60bb      	str	r3, [r7, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb8:	d172      	bne.n	8007da0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b22      	cmp	r3, #34	; 0x22
 8007cbe:	d002      	beq.n	8007cc6 <I2C_Slave_STOPF+0x6a>
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc4:	d135      	bne.n	8007d32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	f043 0204 	orr.w	r2, r3, #4
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fd ffd6 	bl	8005cb0 <HAL_DMA_GetState>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d049      	beq.n	8007d9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	4a69      	ldr	r2, [pc, #420]	; (8007eb4 <I2C_Slave_STOPF+0x258>)
 8007d10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fd fe1e 	bl	8005958 <HAL_DMA_Abort_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d03d      	beq.n	8007d9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d30:	e035      	b.n	8007d9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f043 0204 	orr.w	r2, r3, #4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd ffa0 	bl	8005cb0 <HAL_DMA_GetState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d014      	beq.n	8007da0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	4a4e      	ldr	r2, [pc, #312]	; (8007eb4 <I2C_Slave_STOPF+0x258>)
 8007d7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd fde8 	bl	8005958 <HAL_DMA_Abort_IT>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	e000      	b.n	8007da0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d03e      	beq.n	8007e28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d112      	bne.n	8007dde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d112      	bne.n	8007e12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	f043 0204 	orr.w	r2, r3, #4
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f8b3 	bl	8007f9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e36:	e039      	b.n	8007eac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3c:	d109      	bne.n	8007e52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2228      	movs	r2, #40	; 0x28
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff f827 	bl	8006ea0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b28      	cmp	r3, #40	; 0x28
 8007e5c:	d111      	bne.n	8007e82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a15      	ldr	r2, [pc, #84]	; (8007eb8 <I2C_Slave_STOPF+0x25c>)
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f828 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
}
 8007e80:	e014      	b.n	8007eac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	2b22      	cmp	r3, #34	; 0x22
 8007e88:	d002      	beq.n	8007e90 <I2C_Slave_STOPF+0x234>
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b22      	cmp	r3, #34	; 0x22
 8007e8e:	d10d      	bne.n	8007eac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe fffa 	bl	8006ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	08008305 	.word	0x08008305
 8007eb8:	ffff0000 	.word	0xffff0000

08007ebc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d002      	beq.n	8007ede <I2C_Slave_AF+0x22>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d129      	bne.n	8007f32 <I2C_Slave_AF+0x76>
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b28      	cmp	r3, #40	; 0x28
 8007ee2:	d126      	bne.n	8007f32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <I2C_Slave_AF+0xdc>)
 8007ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ef8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fe ffd0 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007f30:	e02e      	b.n	8007f90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b21      	cmp	r3, #33	; 0x21
 8007f36:	d126      	bne.n	8007f86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <I2C_Slave_AF+0xdc>)
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2221      	movs	r2, #33	; 0x21
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fe ff84 	bl	8006e8c <HAL_I2C_SlaveTxCpltCallback>
}
 8007f84:	e004      	b.n	8007f90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f8e:	615a      	str	r2, [r3, #20]
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	ffff0000 	.word	0xffff0000

08007f9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007faa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d002      	beq.n	8007fc0 <I2C_ITError+0x24>
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d10a      	bne.n	8007fd6 <I2C_ITError+0x3a>
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b22      	cmp	r3, #34	; 0x22
 8007fc4:	d107      	bne.n	8007fd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fdc:	2b28      	cmp	r3, #40	; 0x28
 8007fde:	d107      	bne.n	8007ff0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2228      	movs	r2, #40	; 0x28
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fee:	e015      	b.n	800801c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d00a      	beq.n	8008016 <I2C_ITError+0x7a>
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	2b60      	cmp	r3, #96	; 0x60
 8008004:	d007      	beq.n	8008016 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800802a:	d162      	bne.n	80080f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800803a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d020      	beq.n	800808c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	4a6a      	ldr	r2, [pc, #424]	; (80081f8 <I2C_ITError+0x25c>)
 8008050:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	4618      	mov	r0, r3
 8008058:	f7fd fc7e 	bl	8005958 <HAL_DMA_Abort_IT>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8089 	beq.w	8008176 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
 800808a:	e074      	b.n	8008176 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	4a59      	ldr	r2, [pc, #356]	; (80081f8 <I2C_ITError+0x25c>)
 8008092:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	4618      	mov	r0, r3
 800809a:	f7fd fc5d 	bl	8005958 <HAL_DMA_Abort_IT>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d068      	beq.n	8008176 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d10b      	bne.n	80080ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	e041      	b.n	8008176 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b60      	cmp	r3, #96	; 0x60
 80080fc:	d125      	bne.n	800814a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d10b      	bne.n	8008132 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe feec 	bl	8006f20 <HAL_I2C_AbortCpltCallback>
 8008148:	e015      	b.n	8008176 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d10b      	bne.n	8008170 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fe fecb 	bl	8006f0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10e      	bne.n	80081a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008196:	2b00      	cmp	r3, #0
 8008198:	d104      	bne.n	80081a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d113      	bne.n	80081f0 <I2C_ITError+0x254>
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b28      	cmp	r3, #40	; 0x28
 80081cc:	d110      	bne.n	80081f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <I2C_ITError+0x260>)
 80081d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe fe70 	bl	8006ed0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	08008305 	.word	0x08008305
 80081fc:	ffff0000 	.word	0xffff0000

08008200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	460b      	mov	r3, r1
 800820e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b08      	cmp	r3, #8
 800821a:	d006      	beq.n	800822a <I2C_MasterRequestWrite+0x2a>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d003      	beq.n	800822a <I2C_MasterRequestWrite+0x2a>
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008228:	d108      	bne.n	800823c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e00b      	b.n	8008254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	2b12      	cmp	r3, #18
 8008242:	d107      	bne.n	8008254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 f8f7 	bl	8008454 <I2C_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00d      	beq.n	8008288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827a:	d103      	bne.n	8008284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e035      	b.n	80082f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008290:	d108      	bne.n	80082a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008292:	897b      	ldrh	r3, [r7, #10]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082a0:	611a      	str	r2, [r3, #16]
 80082a2:	e01b      	b.n	80082dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082a4:	897b      	ldrh	r3, [r7, #10]
 80082a6:	11db      	asrs	r3, r3, #7
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0306 	and.w	r3, r3, #6
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f063 030f 	orn	r3, r3, #15
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	490e      	ldr	r1, [pc, #56]	; (80082fc <I2C_MasterRequestWrite+0xfc>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f91d 	bl	8008502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e010      	b.n	80082f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082d2:	897b      	ldrh	r3, [r7, #10]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <I2C_MasterRequestWrite+0x100>)
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f90d 	bl	8008502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	00010008 	.word	0x00010008
 8008300:	00010002 	.word	0x00010002

08008304 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800831e:	4b4b      	ldr	r3, [pc, #300]	; (800844c <I2C_DMAAbort+0x148>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	08db      	lsrs	r3, r3, #3
 8008324:	4a4a      	ldr	r2, [pc, #296]	; (8008450 <I2C_DMAAbort+0x14c>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	0a1a      	lsrs	r2, r3, #8
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	00da      	lsls	r2, r3, #3
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800834a:	e00a      	b.n	8008362 <I2C_DMAAbort+0x5e>
    }
    count--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3b01      	subs	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008360:	d0ea      	beq.n	8008338 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	2200      	movs	r2, #0
 8008370:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	2200      	movs	r2, #0
 8008380:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008390:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a4:	2200      	movs	r2, #0
 80083a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	2200      	movs	r2, #0
 80083b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	d10e      	bne.n	80083f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083ea:	6978      	ldr	r0, [r7, #20]
 80083ec:	f7fe fd98 	bl	8006f20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083f0:	e027      	b.n	8008442 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083f2:	7cfb      	ldrb	r3, [r7, #19]
 80083f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083f8:	2b28      	cmp	r3, #40	; 0x28
 80083fa:	d117      	bne.n	800842c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0201 	orr.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800841a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2228      	movs	r2, #40	; 0x28
 8008426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800842a:	e007      	b.n	800843c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800843c:	6978      	ldr	r0, [r7, #20]
 800843e:	f7fe fd65 	bl	8006f0c <HAL_I2C_ErrorCallback>
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200000c8 	.word	0x200000c8
 8008450:	14f8b589 	.word	0x14f8b589

08008454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008464:	e025      	b.n	80084b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d021      	beq.n	80084b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800846e:	f7fc ffbb 	bl	80053e8 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d302      	bcc.n	8008484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d116      	bne.n	80084b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f043 0220 	orr.w	r2, r3, #32
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e023      	b.n	80084fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	0c1b      	lsrs	r3, r3, #16
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d10d      	bne.n	80084d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	43da      	mvns	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4013      	ands	r3, r2
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bf0c      	ite	eq
 80084ce:	2301      	moveq	r3, #1
 80084d0:	2300      	movne	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	e00c      	b.n	80084f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	43da      	mvns	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4013      	ands	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf0c      	ite	eq
 80084ea:	2301      	moveq	r3, #1
 80084ec:	2300      	movne	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d0b6      	beq.n	8008466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008510:	e051      	b.n	80085b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008520:	d123      	bne.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008530:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800853a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e046      	b.n	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d021      	beq.n	80085b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008572:	f7fc ff39 	bl	80053e8 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d302      	bcc.n	8008588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d116      	bne.n	80085b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f043 0220 	orr.w	r2, r3, #32
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e020      	b.n	80085f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10c      	bne.n	80085da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	43da      	mvns	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4013      	ands	r3, r2
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bf14      	ite	ne
 80085d2:	2301      	movne	r3, #1
 80085d4:	2300      	moveq	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	e00b      	b.n	80085f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	43da      	mvns	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4013      	ands	r3, r2
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bf14      	ite	ne
 80085ec:	2301      	movne	r3, #1
 80085ee:	2300      	moveq	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d18d      	bne.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800860c:	e02d      	b.n	800866a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 f8aa 	bl	8008768 <I2C_IsAcknowledgeFailed>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e02d      	b.n	800867a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d021      	beq.n	800866a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008626:	f7fc fedf 	bl	80053e8 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	d302      	bcc.n	800863c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d116      	bne.n	800866a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e007      	b.n	800867a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d1ca      	bne.n	800860e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800868e:	e02d      	b.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f869 	bl	8008768 <I2C_IsAcknowledgeFailed>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e02d      	b.n	80086fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d021      	beq.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a8:	f7fc fe9e 	bl	80053e8 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d302      	bcc.n	80086be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d116      	bne.n	80086ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	f043 0220 	orr.w	r2, r3, #32
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e007      	b.n	80086fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d1ca      	bne.n	8008690 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008710:	4b13      	ldr	r3, [pc, #76]	; (8008760 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	08db      	lsrs	r3, r3, #3
 8008716:	4a13      	ldr	r2, [pc, #76]	; (8008764 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	0a1a      	lsrs	r2, r3, #8
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3b01      	subs	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f043 0220 	orr.w	r2, r3, #32
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e008      	b.n	8008754 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800874c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008750:	d0e9      	beq.n	8008726 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	200000c8 	.word	0x200000c8
 8008764:	14f8b589 	.word	0x14f8b589

08008768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800877a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877e:	d11b      	bne.n	80087b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	f043 0204 	orr.w	r2, r3, #4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80087d6:	d103      	bne.n	80087e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80087de:	e007      	b.n	80087f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80087e8:	d102      	bne.n	80087f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2208      	movs	r2, #8
 80087ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e267      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d075      	beq.n	8008906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800881a:	4b88      	ldr	r3, [pc, #544]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 030c 	and.w	r3, r3, #12
 8008822:	2b04      	cmp	r3, #4
 8008824:	d00c      	beq.n	8008840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008826:	4b85      	ldr	r3, [pc, #532]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800882e:	2b08      	cmp	r3, #8
 8008830:	d112      	bne.n	8008858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008832:	4b82      	ldr	r3, [pc, #520]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800883a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800883e:	d10b      	bne.n	8008858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008840:	4b7e      	ldr	r3, [pc, #504]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d05b      	beq.n	8008904 <HAL_RCC_OscConfig+0x108>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d157      	bne.n	8008904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e242      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008860:	d106      	bne.n	8008870 <HAL_RCC_OscConfig+0x74>
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a75      	ldr	r2, [pc, #468]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e01d      	b.n	80088ac <HAL_RCC_OscConfig+0xb0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008878:	d10c      	bne.n	8008894 <HAL_RCC_OscConfig+0x98>
 800887a:	4b70      	ldr	r3, [pc, #448]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a6f      	ldr	r2, [pc, #444]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	4b6d      	ldr	r3, [pc, #436]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6c      	ldr	r2, [pc, #432]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800888c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	e00b      	b.n	80088ac <HAL_RCC_OscConfig+0xb0>
 8008894:	4b69      	ldr	r3, [pc, #420]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a68      	ldr	r2, [pc, #416]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800889a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4b66      	ldr	r3, [pc, #408]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a65      	ldr	r2, [pc, #404]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80088a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d013      	beq.n	80088dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7fc fd98 	bl	80053e8 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088bc:	f7fc fd94 	bl	80053e8 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b64      	cmp	r3, #100	; 0x64
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e207      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ce:	4b5b      	ldr	r3, [pc, #364]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0xc0>
 80088da:	e014      	b.n	8008906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7fc fd84 	bl	80053e8 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e4:	f7fc fd80 	bl	80053e8 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e1f3      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088f6:	4b51      	ldr	r3, [pc, #324]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f0      	bne.n	80088e4 <HAL_RCC_OscConfig+0xe8>
 8008902:	e000      	b.n	8008906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d063      	beq.n	80089da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008912:	4b4a      	ldr	r3, [pc, #296]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 030c 	and.w	r3, r3, #12
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008926:	2b08      	cmp	r3, #8
 8008928:	d11c      	bne.n	8008964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800892a:	4b44      	ldr	r3, [pc, #272]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d116      	bne.n	8008964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <HAL_RCC_OscConfig+0x152>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d001      	beq.n	800894e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e1c7      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	4b3b      	ldr	r3, [pc, #236]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4937      	ldr	r1, [pc, #220]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800895e:	4313      	orrs	r3, r2
 8008960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008962:	e03a      	b.n	80089da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d020      	beq.n	80089ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800896c:	4b34      	ldr	r3, [pc, #208]	; (8008a40 <HAL_RCC_OscConfig+0x244>)
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008972:	f7fc fd39 	bl	80053e8 <HAL_GetTick>
 8008976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800897a:	f7fc fd35 	bl	80053e8 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e1a8      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898c:	4b2b      	ldr	r3, [pc, #172]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008998:	4b28      	ldr	r3, [pc, #160]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	4925      	ldr	r1, [pc, #148]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	600b      	str	r3, [r1, #0]
 80089ac:	e015      	b.n	80089da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ae:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <HAL_RCC_OscConfig+0x244>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b4:	f7fc fd18 	bl	80053e8 <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089bc:	f7fc fd14 	bl	80053e8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e187      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089ce:	4b1b      	ldr	r3, [pc, #108]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d036      	beq.n	8008a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d016      	beq.n	8008a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <HAL_RCC_OscConfig+0x248>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f4:	f7fc fcf8 	bl	80053e8 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089fc:	f7fc fcf4 	bl	80053e8 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e167      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_OscConfig+0x240>)
 8008a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCC_OscConfig+0x200>
 8008a1a:	e01b      	b.n	8008a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <HAL_RCC_OscConfig+0x248>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a22:	f7fc fce1 	bl	80053e8 <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a28:	e00e      	b.n	8008a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a2a:	f7fc fcdd 	bl	80053e8 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d907      	bls.n	8008a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e150      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
 8008a3c:	40023800 	.word	0x40023800
 8008a40:	42470000 	.word	0x42470000
 8008a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a48:	4b88      	ldr	r3, [pc, #544]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1ea      	bne.n	8008a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8097 	beq.w	8008b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a66:	4b81      	ldr	r3, [pc, #516]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10f      	bne.n	8008a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
 8008a76:	4b7d      	ldr	r3, [pc, #500]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	4a7c      	ldr	r2, [pc, #496]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a80:	6413      	str	r3, [r2, #64]	; 0x40
 8008a82:	4b7a      	ldr	r3, [pc, #488]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8a:	60bb      	str	r3, [r7, #8]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a92:	4b77      	ldr	r3, [pc, #476]	; (8008c70 <HAL_RCC_OscConfig+0x474>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d118      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a9e:	4b74      	ldr	r3, [pc, #464]	; (8008c70 <HAL_RCC_OscConfig+0x474>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a73      	ldr	r2, [pc, #460]	; (8008c70 <HAL_RCC_OscConfig+0x474>)
 8008aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aaa:	f7fc fc9d 	bl	80053e8 <HAL_GetTick>
 8008aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ab2:	f7fc fc99 	bl	80053e8 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e10c      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ac4:	4b6a      	ldr	r3, [pc, #424]	; (8008c70 <HAL_RCC_OscConfig+0x474>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0f0      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d106      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x2ea>
 8008ad8:	4b64      	ldr	r3, [pc, #400]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	4a63      	ldr	r2, [pc, #396]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae4:	e01c      	b.n	8008b20 <HAL_RCC_OscConfig+0x324>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	d10c      	bne.n	8008b08 <HAL_RCC_OscConfig+0x30c>
 8008aee:	4b5f      	ldr	r3, [pc, #380]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af2:	4a5e      	ldr	r2, [pc, #376]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008af4:	f043 0304 	orr.w	r3, r3, #4
 8008af8:	6713      	str	r3, [r2, #112]	; 0x70
 8008afa:	4b5c      	ldr	r3, [pc, #368]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afe:	4a5b      	ldr	r2, [pc, #364]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b00:	f043 0301 	orr.w	r3, r3, #1
 8008b04:	6713      	str	r3, [r2, #112]	; 0x70
 8008b06:	e00b      	b.n	8008b20 <HAL_RCC_OscConfig+0x324>
 8008b08:	4b58      	ldr	r3, [pc, #352]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0c:	4a57      	ldr	r2, [pc, #348]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	6713      	str	r3, [r2, #112]	; 0x70
 8008b14:	4b55      	ldr	r3, [pc, #340]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b18:	4a54      	ldr	r2, [pc, #336]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b1a:	f023 0304 	bic.w	r3, r3, #4
 8008b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d015      	beq.n	8008b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b28:	f7fc fc5e 	bl	80053e8 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b30:	f7fc fc5a 	bl	80053e8 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e0cb      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b46:	4b49      	ldr	r3, [pc, #292]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0ee      	beq.n	8008b30 <HAL_RCC_OscConfig+0x334>
 8008b52:	e014      	b.n	8008b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b54:	f7fc fc48 	bl	80053e8 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b5a:	e00a      	b.n	8008b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b5c:	f7fc fc44 	bl	80053e8 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e0b5      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b72:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1ee      	bne.n	8008b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d105      	bne.n	8008b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b84:	4b39      	ldr	r3, [pc, #228]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	4a38      	ldr	r2, [pc, #224]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80a1 	beq.w	8008cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b9a:	4b34      	ldr	r3, [pc, #208]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d05c      	beq.n	8008c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d141      	bne.n	8008c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bae:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <HAL_RCC_OscConfig+0x478>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb4:	f7fc fc18 	bl	80053e8 <HAL_GetTick>
 8008bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bbc:	f7fc fc14 	bl	80053e8 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e087      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bce:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69da      	ldr	r2, [r3, #28]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	019b      	lsls	r3, r3, #6
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	041b      	lsls	r3, r3, #16
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	061b      	lsls	r3, r3, #24
 8008bfe:	491b      	ldr	r1, [pc, #108]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c04:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <HAL_RCC_OscConfig+0x478>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c0a:	f7fc fbed 	bl	80053e8 <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c12:	f7fc fbe9 	bl	80053e8 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e05c      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c24:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0f0      	beq.n	8008c12 <HAL_RCC_OscConfig+0x416>
 8008c30:	e054      	b.n	8008cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <HAL_RCC_OscConfig+0x478>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c38:	f7fc fbd6 	bl	80053e8 <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c40:	f7fc fbd2 	bl	80053e8 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e045      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <HAL_RCC_OscConfig+0x470>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f0      	bne.n	8008c40 <HAL_RCC_OscConfig+0x444>
 8008c5e:	e03d      	b.n	8008cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d107      	bne.n	8008c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e038      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	40007000 	.word	0x40007000
 8008c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c78:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <HAL_RCC_OscConfig+0x4ec>)
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d028      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d121      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d11a      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ca8:	4013      	ands	r3, r2
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d111      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d107      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d001      	beq.n	8008cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40023800 	.word	0x40023800

08008cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0cc      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d00:	4b68      	ldr	r3, [pc, #416]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d90c      	bls.n	8008d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d0e:	4b65      	ldr	r3, [pc, #404]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d16:	4b63      	ldr	r3, [pc, #396]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d001      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0b8      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d40:	4b59      	ldr	r3, [pc, #356]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4a58      	ldr	r2, [pc, #352]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d58:	4b53      	ldr	r3, [pc, #332]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	4a52      	ldr	r2, [pc, #328]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d64:	4b50      	ldr	r3, [pc, #320]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	494d      	ldr	r1, [pc, #308]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d044      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d107      	bne.n	8008d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d8a:	4b47      	ldr	r3, [pc, #284]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d119      	bne.n	8008dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e07f      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d003      	beq.n	8008daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d107      	bne.n	8008dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008daa:	4b3f      	ldr	r3, [pc, #252]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e06f      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dba:	4b3b      	ldr	r3, [pc, #236]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e067      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dca:	4b37      	ldr	r3, [pc, #220]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f023 0203 	bic.w	r2, r3, #3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4934      	ldr	r1, [pc, #208]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ddc:	f7fc fb04 	bl	80053e8 <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008de2:	e00a      	b.n	8008dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008de4:	f7fc fb00 	bl	80053e8 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e04f      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 020c 	and.w	r2, r3, #12
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d1eb      	bne.n	8008de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e0c:	4b25      	ldr	r3, [pc, #148]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d20c      	bcs.n	8008e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1a:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e22:	4b20      	ldr	r3, [pc, #128]	; (8008ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d001      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e032      	b.n	8008e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d008      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4916      	ldr	r1, [pc, #88]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e5e:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	490e      	ldr	r1, [pc, #56]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e72:	f000 f821 	bl	8008eb8 <HAL_RCC_GetSysClockFreq>
 8008e76:	4602      	mov	r2, r0
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	490a      	ldr	r1, [pc, #40]	; (8008eac <HAL_RCC_ClockConfig+0x1c0>)
 8008e84:	5ccb      	ldrb	r3, [r1, r3]
 8008e86:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8a:	4a09      	ldr	r2, [pc, #36]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fc fa64 	bl	8005360 <HAL_InitTick>

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40023c00 	.word	0x40023c00
 8008ea8:	40023800 	.word	0x40023800
 8008eac:	0800cd10 	.word	0x0800cd10
 8008eb0:	200000c8 	.word	0x200000c8
 8008eb4:	200000cc 	.word	0x200000cc

08008eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ebc:	b094      	sub	sp, #80	; 0x50
 8008ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ec8:	2300      	movs	r3, #0
 8008eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ed0:	4b79      	ldr	r3, [pc, #484]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 030c 	and.w	r3, r3, #12
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d00d      	beq.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	f200 80e1 	bhi.w	80090a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <HAL_RCC_GetSysClockFreq+0x34>
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d003      	beq.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008eea:	e0db      	b.n	80090a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008eec:	4b73      	ldr	r3, [pc, #460]	; (80090bc <HAL_RCC_GetSysClockFreq+0x204>)
 8008eee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ef0:	e0db      	b.n	80090aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ef2:	4b73      	ldr	r3, [pc, #460]	; (80090c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ef6:	e0d8      	b.n	80090aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ef8:	4b6f      	ldr	r3, [pc, #444]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f02:	4b6d      	ldr	r3, [pc, #436]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d063      	beq.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f0e:	4b6a      	ldr	r3, [pc, #424]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	099b      	lsrs	r3, r3, #6
 8008f14:	2200      	movs	r2, #0
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	633b      	str	r3, [r7, #48]	; 0x30
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
 8008f26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	f04f 0000 	mov.w	r0, #0
 8008f32:	f04f 0100 	mov.w	r1, #0
 8008f36:	0159      	lsls	r1, r3, #5
 8008f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f3c:	0150      	lsls	r0, r2, #5
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4621      	mov	r1, r4
 8008f44:	1a51      	subs	r1, r2, r1
 8008f46:	6139      	str	r1, [r7, #16]
 8008f48:	4629      	mov	r1, r5
 8008f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	018b      	lsls	r3, r1, #6
 8008f60:	4651      	mov	r1, sl
 8008f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f66:	4651      	mov	r1, sl
 8008f68:	018a      	lsls	r2, r1, #6
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	ebb2 0801 	subs.w	r8, r2, r1
 8008f70:	4659      	mov	r1, fp
 8008f72:	eb63 0901 	sbc.w	r9, r3, r1
 8008f76:	f04f 0200 	mov.w	r2, #0
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f8a:	4690      	mov	r8, r2
 8008f8c:	4699      	mov	r9, r3
 8008f8e:	4623      	mov	r3, r4
 8008f90:	eb18 0303 	adds.w	r3, r8, r3
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	462b      	mov	r3, r5
 8008f98:	eb49 0303 	adc.w	r3, r9, r3
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008faa:	4629      	mov	r1, r5
 8008fac:	024b      	lsls	r3, r1, #9
 8008fae:	4621      	mov	r1, r4
 8008fb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	024a      	lsls	r2, r1, #9
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fc8:	f7f7 fde2 	bl	8000b90 <__aeabi_uldivmod>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd4:	e058      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fd6:	4b38      	ldr	r3, [pc, #224]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	099b      	lsrs	r3, r3, #6
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008fe6:	623b      	str	r3, [r7, #32]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
 8008fec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	f04f 0000 	mov.w	r0, #0
 8008ff8:	f04f 0100 	mov.w	r1, #0
 8008ffc:	0159      	lsls	r1, r3, #5
 8008ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009002:	0150      	lsls	r0, r2, #5
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4641      	mov	r1, r8
 800900a:	ebb2 0a01 	subs.w	sl, r2, r1
 800900e:	4649      	mov	r1, r9
 8009010:	eb63 0b01 	sbc.w	fp, r3, r1
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009028:	ebb2 040a 	subs.w	r4, r2, sl
 800902c:	eb63 050b 	sbc.w	r5, r3, fp
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	00eb      	lsls	r3, r5, #3
 800903a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800903e:	00e2      	lsls	r2, r4, #3
 8009040:	4614      	mov	r4, r2
 8009042:	461d      	mov	r5, r3
 8009044:	4643      	mov	r3, r8
 8009046:	18e3      	adds	r3, r4, r3
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	464b      	mov	r3, r9
 800904c:	eb45 0303 	adc.w	r3, r5, r3
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800905e:	4629      	mov	r1, r5
 8009060:	028b      	lsls	r3, r1, #10
 8009062:	4621      	mov	r1, r4
 8009064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009068:	4621      	mov	r1, r4
 800906a:	028a      	lsls	r2, r1, #10
 800906c:	4610      	mov	r0, r2
 800906e:	4619      	mov	r1, r3
 8009070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009072:	2200      	movs	r2, #0
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	61fa      	str	r2, [r7, #28]
 8009078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800907c:	f7f7 fd88 	bl	8000b90 <__aeabi_uldivmod>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4613      	mov	r3, r2
 8009086:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	0c1b      	lsrs	r3, r3, #16
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	3301      	adds	r3, #1
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800909a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909c:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090a2:	e002      	b.n	80090aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <HAL_RCC_GetSysClockFreq+0x204>)
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3750      	adds	r7, #80	; 0x50
 80090b0:	46bd      	mov	sp, r7
 80090b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090b6:	bf00      	nop
 80090b8:	40023800 	.word	0x40023800
 80090bc:	00f42400 	.word	0x00f42400
 80090c0:	007a1200 	.word	0x007a1200

080090c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80090ca:	681b      	ldr	r3, [r3, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	200000c8 	.word	0x200000c8

080090dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80090e0:	f7ff fff0 	bl	80090c4 <HAL_RCC_GetHCLKFreq>
 80090e4:	4602      	mov	r2, r0
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	0a9b      	lsrs	r3, r3, #10
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090f2:	5ccb      	ldrb	r3, [r1, r3]
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40023800 	.word	0x40023800
 8009100:	0800cd20 	.word	0x0800cd20

08009104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009108:	f7ff ffdc 	bl	80090c4 <HAL_RCC_GetHCLKFreq>
 800910c:	4602      	mov	r2, r0
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	0b5b      	lsrs	r3, r3, #13
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	4903      	ldr	r1, [pc, #12]	; (8009128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40023800 	.word	0x40023800
 8009128:	0800cd20 	.word	0x0800cd20

0800912c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e041      	b.n	80091c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fb fe80 	bl	8004e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f000 fde2 	bl	8009d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d001      	beq.n	80091e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e03c      	b.n	800925e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1e      	ldr	r2, [pc, #120]	; (800926c <HAL_TIM_Base_Start+0xa0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d018      	beq.n	8009228 <HAL_TIM_Base_Start+0x5c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fe:	d013      	beq.n	8009228 <HAL_TIM_Base_Start+0x5c>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <HAL_TIM_Base_Start+0xa4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00e      	beq.n	8009228 <HAL_TIM_Base_Start+0x5c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a19      	ldr	r2, [pc, #100]	; (8009274 <HAL_TIM_Base_Start+0xa8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d009      	beq.n	8009228 <HAL_TIM_Base_Start+0x5c>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a17      	ldr	r2, [pc, #92]	; (8009278 <HAL_TIM_Base_Start+0xac>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d004      	beq.n	8009228 <HAL_TIM_Base_Start+0x5c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a16      	ldr	r2, [pc, #88]	; (800927c <HAL_TIM_Base_Start+0xb0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d111      	bne.n	800924c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b06      	cmp	r3, #6
 8009238:	d010      	beq.n	800925c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f042 0201 	orr.w	r2, r2, #1
 8009248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924a:	e007      	b.n	800925c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40010000 	.word	0x40010000
 8009270:	40000400 	.word	0x40000400
 8009274:	40000800 	.word	0x40000800
 8009278:	40000c00 	.word	0x40000c00
 800927c:	40014000 	.word	0x40014000

08009280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	d001      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e044      	b.n	8009322 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0201 	orr.w	r2, r2, #1
 80092ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1e      	ldr	r2, [pc, #120]	; (8009330 <HAL_TIM_Base_Start_IT+0xb0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d018      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x6c>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c2:	d013      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x6c>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a1a      	ldr	r2, [pc, #104]	; (8009334 <HAL_TIM_Base_Start_IT+0xb4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00e      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x6c>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a19      	ldr	r2, [pc, #100]	; (8009338 <HAL_TIM_Base_Start_IT+0xb8>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d009      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x6c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a17      	ldr	r2, [pc, #92]	; (800933c <HAL_TIM_Base_Start_IT+0xbc>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x6c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a16      	ldr	r2, [pc, #88]	; (8009340 <HAL_TIM_Base_Start_IT+0xc0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d111      	bne.n	8009310 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b06      	cmp	r3, #6
 80092fc:	d010      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930e:	e007      	b.n	8009320 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0201 	orr.w	r2, r2, #1
 800931e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	40010000 	.word	0x40010000
 8009334:	40000400 	.word	0x40000400
 8009338:	40000800 	.word	0x40000800
 800933c:	40000c00 	.word	0x40000c00
 8009340:	40014000 	.word	0x40014000

08009344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e041      	b.n	80093da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f839 	bl	80093e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fcd6 	bl	8009d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <HAL_TIM_PWM_Start+0x24>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	bf14      	ite	ne
 8009414:	2301      	movne	r3, #1
 8009416:	2300      	moveq	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e022      	b.n	8009462 <HAL_TIM_PWM_Start+0x6a>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b04      	cmp	r3, #4
 8009420:	d109      	bne.n	8009436 <HAL_TIM_PWM_Start+0x3e>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b01      	cmp	r3, #1
 800942c:	bf14      	ite	ne
 800942e:	2301      	movne	r3, #1
 8009430:	2300      	moveq	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	e015      	b.n	8009462 <HAL_TIM_PWM_Start+0x6a>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d109      	bne.n	8009450 <HAL_TIM_PWM_Start+0x58>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	e008      	b.n	8009462 <HAL_TIM_PWM_Start+0x6a>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b01      	cmp	r3, #1
 800945a:	bf14      	ite	ne
 800945c:	2301      	movne	r3, #1
 800945e:	2300      	moveq	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e068      	b.n	800953c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <HAL_TIM_PWM_Start+0x82>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009478:	e013      	b.n	80094a2 <HAL_TIM_PWM_Start+0xaa>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b04      	cmp	r3, #4
 800947e:	d104      	bne.n	800948a <HAL_TIM_PWM_Start+0x92>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009488:	e00b      	b.n	80094a2 <HAL_TIM_PWM_Start+0xaa>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b08      	cmp	r3, #8
 800948e:	d104      	bne.n	800949a <HAL_TIM_PWM_Start+0xa2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009498:	e003      	b.n	80094a2 <HAL_TIM_PWM_Start+0xaa>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2201      	movs	r2, #1
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fee8 	bl	800a280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a23      	ldr	r2, [pc, #140]	; (8009544 <HAL_TIM_PWM_Start+0x14c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d107      	bne.n	80094ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <HAL_TIM_PWM_Start+0x14c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d018      	beq.n	8009506 <HAL_TIM_PWM_Start+0x10e>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094dc:	d013      	beq.n	8009506 <HAL_TIM_PWM_Start+0x10e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a19      	ldr	r2, [pc, #100]	; (8009548 <HAL_TIM_PWM_Start+0x150>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00e      	beq.n	8009506 <HAL_TIM_PWM_Start+0x10e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a17      	ldr	r2, [pc, #92]	; (800954c <HAL_TIM_PWM_Start+0x154>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d009      	beq.n	8009506 <HAL_TIM_PWM_Start+0x10e>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a16      	ldr	r2, [pc, #88]	; (8009550 <HAL_TIM_PWM_Start+0x158>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d004      	beq.n	8009506 <HAL_TIM_PWM_Start+0x10e>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a14      	ldr	r2, [pc, #80]	; (8009554 <HAL_TIM_PWM_Start+0x15c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d111      	bne.n	800952a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b06      	cmp	r3, #6
 8009516:	d010      	beq.n	800953a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009528:	e007      	b.n	800953a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40010000 	.word	0x40010000
 8009548:	40000400 	.word	0x40000400
 800954c:	40000800 	.word	0x40000800
 8009550:	40000c00 	.word	0x40000c00
 8009554:	40014000 	.word	0x40014000

08009558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e097      	b.n	800969c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fb fccd 	bl	8004f20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959c:	f023 0307 	bic.w	r3, r3, #7
 80095a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f000 fbc1 	bl	8009d34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	4313      	orrs	r3, r2
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095f8:	f023 030c 	bic.w	r3, r3, #12
 80095fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	4313      	orrs	r3, r2
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	031b      	lsls	r3, r3, #12
 8009628:	4313      	orrs	r3, r2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	4313      	orrs	r3, r2
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d110      	bne.n	80096f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d102      	bne.n	80096e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096da:	7b7b      	ldrb	r3, [r7, #13]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d001      	beq.n	80096e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e069      	b.n	80097b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f4:	e031      	b.n	800975a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d110      	bne.n	800971e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d102      	bne.n	8009708 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009702:	7b3b      	ldrb	r3, [r7, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e055      	b.n	80097b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800971c:	e01d      	b.n	800975a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d108      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d105      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972a:	7b7b      	ldrb	r3, [r7, #13]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d102      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009730:	7b3b      	ldrb	r3, [r7, #12]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d001      	beq.n	800973a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e03e      	b.n	80097b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <HAL_TIM_Encoder_Start+0xc4>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d008      	beq.n	8009778 <HAL_TIM_Encoder_Start+0xd4>
 8009766:	e00f      	b.n	8009788 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2201      	movs	r2, #1
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fd85 	bl	800a280 <TIM_CCxChannelCmd>
      break;
 8009776:	e016      	b.n	80097a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2201      	movs	r2, #1
 800977e:	2104      	movs	r1, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fd7d 	bl	800a280 <TIM_CCxChannelCmd>
      break;
 8009786:	e00e      	b.n	80097a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2201      	movs	r2, #1
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fd75 	bl	800a280 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2201      	movs	r2, #1
 800979c:	2104      	movs	r1, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fd6e 	bl	800a280 <TIM_CCxChannelCmd>
      break;
 80097a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0201 	orr.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d122      	bne.n	800981c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d11b      	bne.n	800981c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0202 	mvn.w	r2, #2
 80097ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa77 	bl	8009cf6 <HAL_TIM_IC_CaptureCallback>
 8009808:	e005      	b.n	8009816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa69 	bl	8009ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fa7a 	bl	8009d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b04      	cmp	r3, #4
 8009828:	d122      	bne.n	8009870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b04      	cmp	r3, #4
 8009836:	d11b      	bne.n	8009870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f06f 0204 	mvn.w	r2, #4
 8009840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa4d 	bl	8009cf6 <HAL_TIM_IC_CaptureCallback>
 800985c:	e005      	b.n	800986a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa3f 	bl	8009ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fa50 	bl	8009d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b08      	cmp	r3, #8
 800987c:	d122      	bne.n	80098c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f003 0308 	and.w	r3, r3, #8
 8009888:	2b08      	cmp	r3, #8
 800988a:	d11b      	bne.n	80098c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f06f 0208 	mvn.w	r2, #8
 8009894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2204      	movs	r2, #4
 800989a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa23 	bl	8009cf6 <HAL_TIM_IC_CaptureCallback>
 80098b0:	e005      	b.n	80098be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa15 	bl	8009ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa26 	bl	8009d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	2b10      	cmp	r3, #16
 80098d0:	d122      	bne.n	8009918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f003 0310 	and.w	r3, r3, #16
 80098dc:	2b10      	cmp	r3, #16
 80098de:	d11b      	bne.n	8009918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f06f 0210 	mvn.w	r2, #16
 80098e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2208      	movs	r2, #8
 80098ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9f9 	bl	8009cf6 <HAL_TIM_IC_CaptureCallback>
 8009904:	e005      	b.n	8009912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9eb 	bl	8009ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f9fc 	bl	8009d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b01      	cmp	r3, #1
 8009924:	d10e      	bne.n	8009944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b01      	cmp	r3, #1
 8009932:	d107      	bne.n	8009944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0201 	mvn.w	r2, #1
 800993c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7f8 f86e 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b80      	cmp	r3, #128	; 0x80
 8009950:	d10e      	bne.n	8009970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d107      	bne.n	8009970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fd78 	bl	800a460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d10e      	bne.n	800999c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b40      	cmp	r3, #64	; 0x40
 800998a:	d107      	bne.n	800999c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9c1 	bl	8009d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d10e      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d107      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0220 	mvn.w	r2, #32
 80099c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fd42 	bl	800a44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e0ae      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b0c      	cmp	r3, #12
 80099fa:	f200 809f 	bhi.w	8009b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a39 	.word	0x08009a39
 8009a08:	08009b3d 	.word	0x08009b3d
 8009a0c:	08009b3d 	.word	0x08009b3d
 8009a10:	08009b3d 	.word	0x08009b3d
 8009a14:	08009a79 	.word	0x08009a79
 8009a18:	08009b3d 	.word	0x08009b3d
 8009a1c:	08009b3d 	.word	0x08009b3d
 8009a20:	08009b3d 	.word	0x08009b3d
 8009a24:	08009abb 	.word	0x08009abb
 8009a28:	08009b3d 	.word	0x08009b3d
 8009a2c:	08009b3d 	.word	0x08009b3d
 8009a30:	08009b3d 	.word	0x08009b3d
 8009a34:	08009afb 	.word	0x08009afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f9f8 	bl	8009e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0208 	orr.w	r2, r2, #8
 8009a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 0204 	bic.w	r2, r2, #4
 8009a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6999      	ldr	r1, [r3, #24]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	691a      	ldr	r2, [r3, #16]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	619a      	str	r2, [r3, #24]
      break;
 8009a76:	e064      	b.n	8009b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fa3e 	bl	8009f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6999      	ldr	r1, [r3, #24]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	021a      	lsls	r2, r3, #8
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	619a      	str	r2, [r3, #24]
      break;
 8009ab8:	e043      	b.n	8009b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fa89 	bl	8009fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	69da      	ldr	r2, [r3, #28]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f042 0208 	orr.w	r2, r2, #8
 8009ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0204 	bic.w	r2, r2, #4
 8009ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69d9      	ldr	r1, [r3, #28]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	61da      	str	r2, [r3, #28]
      break;
 8009af8:	e023      	b.n	8009b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fad3 	bl	800a0ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69da      	ldr	r2, [r3, #28]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69d9      	ldr	r1, [r3, #28]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	021a      	lsls	r2, r3, #8
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	61da      	str	r2, [r3, #28]
      break;
 8009b3a:	e002      	b.n	8009b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <HAL_TIM_ConfigClockSource+0x1c>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e0b4      	b.n	8009cda <HAL_TIM_ConfigClockSource+0x186>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba8:	d03e      	beq.n	8009c28 <HAL_TIM_ConfigClockSource+0xd4>
 8009baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bae:	f200 8087 	bhi.w	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb6:	f000 8086 	beq.w	8009cc6 <HAL_TIM_ConfigClockSource+0x172>
 8009bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bbe:	d87f      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b70      	cmp	r3, #112	; 0x70
 8009bc2:	d01a      	beq.n	8009bfa <HAL_TIM_ConfigClockSource+0xa6>
 8009bc4:	2b70      	cmp	r3, #112	; 0x70
 8009bc6:	d87b      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc8:	2b60      	cmp	r3, #96	; 0x60
 8009bca:	d050      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x11a>
 8009bcc:	2b60      	cmp	r3, #96	; 0x60
 8009bce:	d877      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b50      	cmp	r3, #80	; 0x50
 8009bd2:	d03c      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0xfa>
 8009bd4:	2b50      	cmp	r3, #80	; 0x50
 8009bd6:	d873      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b40      	cmp	r3, #64	; 0x40
 8009bda:	d058      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x13a>
 8009bdc:	2b40      	cmp	r3, #64	; 0x40
 8009bde:	d86f      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b30      	cmp	r3, #48	; 0x30
 8009be2:	d064      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x15a>
 8009be4:	2b30      	cmp	r3, #48	; 0x30
 8009be6:	d86b      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d060      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x15a>
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d867      	bhi.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05c      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x15a>
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d05a      	beq.n	8009cae <HAL_TIM_ConfigClockSource+0x15a>
 8009bf8:	e062      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	6899      	ldr	r1, [r3, #8]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f000 fb19 	bl	800a240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	609a      	str	r2, [r3, #8]
      break;
 8009c26:	e04f      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6899      	ldr	r1, [r3, #8]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f000 fb02 	bl	800a240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c4a:	609a      	str	r2, [r3, #8]
      break;
 8009c4c:	e03c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f000 fa76 	bl	800a14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2150      	movs	r1, #80	; 0x50
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 facf 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009c6c:	e02c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6859      	ldr	r1, [r3, #4]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f000 fa95 	bl	800a1aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2160      	movs	r1, #96	; 0x60
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fabf 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009c8c:	e01c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6859      	ldr	r1, [r3, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f000 fa56 	bl	800a14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2140      	movs	r1, #64	; 0x40
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 faaf 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009cac:	e00c      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f000 faa6 	bl	800a20a <TIM_ITRx_SetConfig>
      break;
 8009cbe:	e003      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d12:	bf00      	nop
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
	...

08009d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a34      	ldr	r2, [pc, #208]	; (8009e18 <TIM_Base_SetConfig+0xe4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00f      	beq.n	8009d6c <TIM_Base_SetConfig+0x38>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d52:	d00b      	beq.n	8009d6c <TIM_Base_SetConfig+0x38>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a31      	ldr	r2, [pc, #196]	; (8009e1c <TIM_Base_SetConfig+0xe8>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d007      	beq.n	8009d6c <TIM_Base_SetConfig+0x38>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a30      	ldr	r2, [pc, #192]	; (8009e20 <TIM_Base_SetConfig+0xec>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d003      	beq.n	8009d6c <TIM_Base_SetConfig+0x38>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a2f      	ldr	r2, [pc, #188]	; (8009e24 <TIM_Base_SetConfig+0xf0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d108      	bne.n	8009d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a25      	ldr	r2, [pc, #148]	; (8009e18 <TIM_Base_SetConfig+0xe4>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d01b      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8c:	d017      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a22      	ldr	r2, [pc, #136]	; (8009e1c <TIM_Base_SetConfig+0xe8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d013      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a21      	ldr	r2, [pc, #132]	; (8009e20 <TIM_Base_SetConfig+0xec>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00f      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a20      	ldr	r2, [pc, #128]	; (8009e24 <TIM_Base_SetConfig+0xf0>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00b      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a1f      	ldr	r2, [pc, #124]	; (8009e28 <TIM_Base_SetConfig+0xf4>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d007      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a1e      	ldr	r2, [pc, #120]	; (8009e2c <TIM_Base_SetConfig+0xf8>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d003      	beq.n	8009dbe <TIM_Base_SetConfig+0x8a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a1d      	ldr	r2, [pc, #116]	; (8009e30 <TIM_Base_SetConfig+0xfc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d108      	bne.n	8009dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a08      	ldr	r2, [pc, #32]	; (8009e18 <TIM_Base_SetConfig+0xe4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d103      	bne.n	8009e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	615a      	str	r2, [r3, #20]
}
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40000400 	.word	0x40000400
 8009e20:	40000800 	.word	0x40000800
 8009e24:	40000c00 	.word	0x40000c00
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40014400 	.word	0x40014400
 8009e30:	40014800 	.word	0x40014800

08009e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	f023 0201 	bic.w	r2, r3, #1
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f023 0302 	bic.w	r3, r3, #2
 8009e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <TIM_OC1_SetConfig+0xc8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10c      	bne.n	8009eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 0308 	bic.w	r3, r3, #8
 8009e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f023 0304 	bic.w	r3, r3, #4
 8009ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a13      	ldr	r2, [pc, #76]	; (8009efc <TIM_OC1_SetConfig+0xc8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d111      	bne.n	8009ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	621a      	str	r2, [r3, #32]
}
 8009ef0:	bf00      	nop
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	40010000 	.word	0x40010000

08009f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	f023 0210 	bic.w	r2, r3, #16
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f023 0320 	bic.w	r3, r3, #32
 8009f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a1e      	ldr	r2, [pc, #120]	; (8009fd4 <TIM_OC2_SetConfig+0xd4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d10d      	bne.n	8009f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <TIM_OC2_SetConfig+0xd4>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d113      	bne.n	8009fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	621a      	str	r2, [r3, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000

08009fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	021b      	lsls	r3, r3, #8
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a1d      	ldr	r2, [pc, #116]	; (800a0a8 <TIM_OC3_SetConfig+0xd0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d10d      	bne.n	800a052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a03c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a14      	ldr	r2, [pc, #80]	; (800a0a8 <TIM_OC3_SetConfig+0xd0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d113      	bne.n	800a082 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4313      	orrs	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	621a      	str	r2, [r3, #32]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40010000 	.word	0x40010000

0800a0ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	031b      	lsls	r3, r3, #12
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4313      	orrs	r3, r2
 800a102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a10      	ldr	r2, [pc, #64]	; (800a148 <TIM_OC4_SetConfig+0x9c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d109      	bne.n	800a120 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	019b      	lsls	r3, r3, #6
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	621a      	str	r2, [r3, #32]
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40010000 	.word	0x40010000

0800a14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	f023 0201 	bic.w	r2, r3, #1
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 030a 	bic.w	r3, r3, #10
 800a188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b087      	sub	sp, #28
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f023 0210 	bic.w	r2, r3, #16
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	031b      	lsls	r3, r3, #12
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	621a      	str	r2, [r3, #32]
}
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4313      	orrs	r3, r2
 800a228:	f043 0307 	orr.w	r3, r3, #7
 800a22c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	609a      	str	r2, [r3, #8]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a25a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	021a      	lsls	r2, r3, #8
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	431a      	orrs	r2, r3
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4313      	orrs	r3, r2
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	2201      	movs	r2, #1
 800a294:	fa02 f303 	lsl.w	r3, r2, r3
 800a298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a1a      	ldr	r2, [r3, #32]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a1a      	ldr	r2, [r3, #32]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 031f 	and.w	r3, r3, #31
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	621a      	str	r2, [r3, #32]
}
 800a2be:	bf00      	nop
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e050      	b.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a1c      	ldr	r2, [pc, #112]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d018      	beq.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a330:	d013      	beq.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a18      	ldr	r2, [pc, #96]	; (800a398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00e      	beq.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a16      	ldr	r2, [pc, #88]	; (800a39c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d009      	beq.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a15      	ldr	r2, [pc, #84]	; (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d004      	beq.n	800a35a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d10c      	bne.n	800a374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	40010000 	.word	0x40010000
 800a398:	40000400 	.word	0x40000400
 800a39c:	40000800 	.word	0x40000800
 800a3a0:	40000c00 	.word	0x40000c00
 800a3a4:	40014000 	.word	0x40014000

0800a3a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e03d      	b.n	800a440 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e03f      	b.n	800a506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fa fdc2 	bl	8005024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 ffd7 	bl	800b46c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68da      	ldr	r2, [r3, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08c      	sub	sp, #48	; 0x30
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b20      	cmp	r3, #32
 800a528:	d165      	bne.n	800a5f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <HAL_UART_Transmit_DMA+0x26>
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e05e      	b.n	800a5f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a540:	2b01      	cmp	r3, #1
 800a542:	d101      	bne.n	800a548 <HAL_UART_Transmit_DMA+0x38>
 800a544:	2302      	movs	r3, #2
 800a546:	e057      	b.n	800a5f8 <HAL_UART_Transmit_DMA+0xe8>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	88fa      	ldrh	r2, [r7, #6]
 800a55a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	88fa      	ldrh	r2, [r7, #6]
 800a560:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2221      	movs	r2, #33	; 0x21
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a574:	4a22      	ldr	r2, [pc, #136]	; (800a600 <HAL_UART_Transmit_DMA+0xf0>)
 800a576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	4a21      	ldr	r2, [pc, #132]	; (800a604 <HAL_UART_Transmit_DMA+0xf4>)
 800a57e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a584:	4a20      	ldr	r2, [pc, #128]	; (800a608 <HAL_UART_Transmit_DMA+0xf8>)
 800a586:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58c:	2200      	movs	r2, #0
 800a58e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a590:	f107 0308 	add.w	r3, r7, #8
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	6819      	ldr	r1, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	f7fb f90e 	bl	80057c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3314      	adds	r3, #20
 800a5c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3314      	adds	r3, #20
 800a5dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5de:	627a      	str	r2, [r7, #36]	; 0x24
 800a5e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6a39      	ldr	r1, [r7, #32]
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e5      	bne.n	800a5be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3730      	adds	r7, #48	; 0x30
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	0800ad05 	.word	0x0800ad05
 800a604:	0800ad9f 	.word	0x0800ad9f
 800a608:	0800af17 	.word	0x0800af17

0800a60c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b20      	cmp	r3, #32
 800a624:	d11d      	bne.n	800a662 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <HAL_UART_Receive_DMA+0x26>
 800a62c:	88fb      	ldrh	r3, [r7, #6]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e016      	b.n	800a664 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d101      	bne.n	800a644 <HAL_UART_Receive_DMA+0x38>
 800a640:	2302      	movs	r3, #2
 800a642:	e00f      	b.n	800a664 <HAL_UART_Receive_DMA+0x58>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a652:	88fb      	ldrh	r3, [r7, #6]
 800a654:	461a      	mov	r2, r3
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fca7 	bl	800afac <UART_Start_Receive_DMA>
 800a65e:	4603      	mov	r3, r0
 800a660:	e000      	b.n	800a664 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a662:	2302      	movs	r3, #2
  }
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b090      	sub	sp, #64	; 0x40
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	bf0c      	ite	eq
 800a686:	2301      	moveq	r3, #1
 800a688:	2300      	movne	r3, #0
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b21      	cmp	r3, #33	; 0x21
 800a698:	d128      	bne.n	800a6ec <HAL_UART_DMAStop+0x80>
 800a69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d025      	beq.n	800a6ec <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	e853 3f00 	ldrex	r3, [r3]
 800a6ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3314      	adds	r3, #20
 800a6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c0:	633a      	str	r2, [r7, #48]	; 0x30
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6c8:	e841 2300 	strex	r3, r2, [r1]
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1e5      	bne.n	800a6a0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fb f8c9 	bl	8005878 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fcfe 	bl	800b0e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	bf0c      	ite	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	2300      	movne	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b22      	cmp	r3, #34	; 0x22
 800a70c:	d128      	bne.n	800a760 <HAL_UART_DMAStop+0xf4>
 800a70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a710:	2b00      	cmp	r3, #0
 800a712:	d025      	beq.n	800a760 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3314      	adds	r3, #20
 800a71a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	60fb      	str	r3, [r7, #12]
   return(result);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72a:	637b      	str	r3, [r7, #52]	; 0x34
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3314      	adds	r3, #20
 800a732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a734:	61fa      	str	r2, [r7, #28]
 800a736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	69b9      	ldr	r1, [r7, #24]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	617b      	str	r3, [r7, #20]
   return(result);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e5      	bne.n	800a714 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d004      	beq.n	800a75a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a754:	4618      	mov	r0, r3
 800a756:	f7fb f88f 	bl	8005878 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fcec 	bl	800b138 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3740      	adds	r7, #64	; 0x40
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b0ba      	sub	sp, #232	; 0xe8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a792:	2300      	movs	r3, #0
 800a794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a798:	2300      	movs	r3, #0
 800a79a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a7aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10f      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x66>
 800a7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fd93 	bl	800b2f6 <UART_Receive_IT>
      return;
 800a7d0:	e256      	b.n	800ac80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80de 	beq.w	800a998 <HAL_UART_IRQHandler+0x22c>
 800a7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80d1 	beq.w	800a998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <HAL_UART_IRQHandler+0xae>
 800a802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f043 0201 	orr.w	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81e:	f003 0304 	and.w	r3, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <HAL_UART_IRQHandler+0xd2>
 800a826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	f043 0202 	orr.w	r2, r3, #2
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <HAL_UART_IRQHandler+0xf6>
 800a84a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	f043 0204 	orr.w	r2, r3, #4
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a866:	f003 0308 	and.w	r3, r3, #8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d011      	beq.n	800a892 <HAL_UART_IRQHandler+0x126>
 800a86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f043 0208 	orr.w	r2, r3, #8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 81ed 	beq.w	800ac76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d008      	beq.n	800a8ba <HAL_UART_IRQHandler+0x14e>
 800a8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ac:	f003 0320 	and.w	r3, r3, #32
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fd1e 	bl	800b2f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c4:	2b40      	cmp	r3, #64	; 0x40
 800a8c6:	bf0c      	ite	eq
 800a8c8:	2301      	moveq	r3, #1
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d103      	bne.n	800a8e6 <HAL_UART_IRQHandler+0x17a>
 800a8de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d04f      	beq.n	800a986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fc26 	bl	800b138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f6:	2b40      	cmp	r3, #64	; 0x40
 800a8f8:	d141      	bne.n	800a97e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3314      	adds	r3, #20
 800a900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3314      	adds	r3, #20
 800a922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a92a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a93e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1d9      	bne.n	800a8fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d013      	beq.n	800a976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	4a7d      	ldr	r2, [pc, #500]	; (800ab48 <HAL_UART_IRQHandler+0x3dc>)
 800a954:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fa fffc 	bl	8005958 <HAL_DMA_Abort_IT>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d016      	beq.n	800a994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a974:	e00e      	b.n	800a994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f9ae 	bl	800acd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a97c:	e00a      	b.n	800a994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f9aa 	bl	800acd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a984:	e006      	b.n	800a994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9a6 	bl	800acd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a992:	e170      	b.n	800ac76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a994:	bf00      	nop
    return;
 800a996:	e16e      	b.n	800ac76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	f040 814a 	bne.w	800ac36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a6:	f003 0310 	and.w	r3, r3, #16
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 8143 	beq.w	800ac36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b4:	f003 0310 	and.w	r3, r3, #16
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 813c 	beq.w	800ac36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9de:	2b40      	cmp	r3, #64	; 0x40
 800a9e0:	f040 80b4 	bne.w	800ab4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8140 	beq.w	800ac7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa02:	429a      	cmp	r2, r3
 800aa04:	f080 8139 	bcs.w	800ac7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa1a:	f000 8088 	beq.w	800ab2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	330c      	adds	r3, #12
 800aa24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	330c      	adds	r3, #12
 800aa46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1d9      	bne.n	800aa1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3314      	adds	r3, #20
 800aa70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa7c:	f023 0301 	bic.w	r3, r3, #1
 800aa80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3314      	adds	r3, #20
 800aa8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aaa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e1      	bne.n	800aa6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3314      	adds	r3, #20
 800aaac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aab0:	e853 3f00 	ldrex	r3, [r3]
 800aab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aabc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3314      	adds	r3, #20
 800aac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aacc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e3      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aafe:	f023 0310 	bic.w	r3, r3, #16
 800ab02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab10:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e3      	bne.n	800aaec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fa fea5 	bl	8005878 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f8d4 	bl	800acec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab44:	e099      	b.n	800ac7a <HAL_UART_IRQHandler+0x50e>
 800ab46:	bf00      	nop
 800ab48:	0800b1ff 	.word	0x0800b1ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 808b 	beq.w	800ac7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8086 	beq.w	800ac7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	330c      	adds	r3, #12
 800ab92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab96:	647a      	str	r2, [r7, #68]	; 0x44
 800ab98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e3      	bne.n	800ab72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3314      	adds	r3, #20
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	623b      	str	r3, [r7, #32]
   return(result);
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3314      	adds	r3, #20
 800abca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abce:	633a      	str	r2, [r7, #48]	; 0x30
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1e3      	bne.n	800abaa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	330c      	adds	r3, #12
 800abf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	e853 3f00 	ldrex	r3, [r3]
 800abfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0310 	bic.w	r3, r3, #16
 800ac06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	330c      	adds	r3, #12
 800ac10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac14:	61fa      	str	r2, [r7, #28]
 800ac16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	69b9      	ldr	r1, [r7, #24]
 800ac1a:	69fa      	ldr	r2, [r7, #28]
 800ac1c:	e841 2300 	strex	r3, r2, [r1]
 800ac20:	617b      	str	r3, [r7, #20]
   return(result);
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e3      	bne.n	800abf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f85c 	bl	800acec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac34:	e023      	b.n	800ac7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <HAL_UART_IRQHandler+0x4ea>
 800ac42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fae9 	bl	800b226 <UART_Transmit_IT>
    return;
 800ac54:	e014      	b.n	800ac80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00e      	beq.n	800ac80 <HAL_UART_IRQHandler+0x514>
 800ac62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d008      	beq.n	800ac80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fb29 	bl	800b2c6 <UART_EndTransmit_IT>
    return;
 800ac74:	e004      	b.n	800ac80 <HAL_UART_IRQHandler+0x514>
    return;
 800ac76:	bf00      	nop
 800ac78:	e002      	b.n	800ac80 <HAL_UART_IRQHandler+0x514>
      return;
 800ac7a:	bf00      	nop
 800ac7c:	e000      	b.n	800ac80 <HAL_UART_IRQHandler+0x514>
      return;
 800ac7e:	bf00      	nop
  }
}
 800ac80:	37e8      	adds	r7, #232	; 0xe8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b090      	sub	sp, #64	; 0x40
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d137      	bne.n	800ad90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ad20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad22:	2200      	movs	r2, #0
 800ad24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	623b      	str	r3, [r7, #32]
   return(result);
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3314      	adds	r3, #20
 800ad44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad46:	633a      	str	r2, [r7, #48]	; 0x30
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	330c      	adds	r3, #12
 800ad60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad70:	637b      	str	r3, [r7, #52]	; 0x34
 800ad72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	330c      	adds	r3, #12
 800ad78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad7a:	61fa      	str	r2, [r7, #28]
 800ad7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	69b9      	ldr	r1, [r7, #24]
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	617b      	str	r3, [r7, #20]
   return(result);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e5      	bne.n	800ad5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad8e:	e002      	b.n	800ad96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ad90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ad92:	f7ff ff79 	bl	800ac88 <HAL_UART_TxCpltCallback>
}
 800ad96:	bf00      	nop
 800ad98:	3740      	adds	r7, #64	; 0x40
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7ff ff75 	bl	800ac9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b09c      	sub	sp, #112	; 0x70
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	2b00      	cmp	r3, #0
 800add4:	d172      	bne.n	800aebc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800add6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add8:	2200      	movs	r2, #0
 800adda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800addc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	330c      	adds	r3, #12
 800ade2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ade6:	e853 3f00 	ldrex	r3, [r3]
 800adea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800adf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	330c      	adds	r3, #12
 800adfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adfc:	65ba      	str	r2, [r7, #88]	; 0x58
 800adfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e5      	bne.n	800addc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3314      	adds	r3, #20
 800ae16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae22:	f023 0301 	bic.w	r3, r3, #1
 800ae26:	667b      	str	r3, [r7, #100]	; 0x64
 800ae28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3314      	adds	r3, #20
 800ae2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae30:	647a      	str	r2, [r7, #68]	; 0x44
 800ae32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e5      	bne.n	800ae10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3314      	adds	r3, #20
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	623b      	str	r3, [r7, #32]
   return(result);
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5a:	663b      	str	r3, [r7, #96]	; 0x60
 800ae5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3314      	adds	r3, #20
 800ae62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae64:	633a      	str	r2, [r7, #48]	; 0x30
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e5      	bne.n	800ae44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d119      	bne.n	800aebc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	e853 3f00 	ldrex	r3, [r3]
 800ae96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0310 	bic.w	r3, r3, #16
 800ae9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	330c      	adds	r3, #12
 800aea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aea8:	61fa      	str	r2, [r7, #28]
 800aeaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	69b9      	ldr	r1, [r7, #24]
 800aeae:	69fa      	ldr	r2, [r7, #28]
 800aeb0:	e841 2300 	strex	r3, r2, [r1]
 800aeb4:	617b      	str	r3, [r7, #20]
   return(result);
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e5      	bne.n	800ae88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d106      	bne.n	800aed2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aec6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aec8:	4619      	mov	r1, r3
 800aeca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aecc:	f7ff ff0e 	bl	800acec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aed0:	e002      	b.n	800aed8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aed2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aed4:	f7ff feec 	bl	800acb0 <HAL_UART_RxCpltCallback>
}
 800aed8:	bf00      	nop
 800aeda:	3770      	adds	r7, #112	; 0x70
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d108      	bne.n	800af08 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aefa:	085b      	lsrs	r3, r3, #1
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7ff fef3 	bl	800acec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af06:	e002      	b.n	800af0e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f7ff fedb 	bl	800acc4 <HAL_UART_RxHalfCpltCallback>
}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af32:	2b80      	cmp	r3, #128	; 0x80
 800af34:	bf0c      	ite	eq
 800af36:	2301      	moveq	r3, #1
 800af38:	2300      	movne	r3, #0
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b21      	cmp	r3, #33	; 0x21
 800af48:	d108      	bne.n	800af5c <UART_DMAError+0x46>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2200      	movs	r2, #0
 800af54:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800af56:	68b8      	ldr	r0, [r7, #8]
 800af58:	f000 f8c6 	bl	800b0e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	bf0c      	ite	eq
 800af6a:	2301      	moveq	r3, #1
 800af6c:	2300      	movne	r3, #0
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b22      	cmp	r3, #34	; 0x22
 800af7c:	d108      	bne.n	800af90 <UART_DMAError+0x7a>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800af8a:	68b8      	ldr	r0, [r7, #8]
 800af8c:	f000 f8d4 	bl	800b138 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af94:	f043 0210 	orr.w	r2, r3, #16
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af9c:	68b8      	ldr	r0, [r7, #8]
 800af9e:	f7ff fe9b 	bl	800acd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b098      	sub	sp, #96	; 0x60
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	88fa      	ldrh	r2, [r7, #6]
 800afc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2222      	movs	r2, #34	; 0x22
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	4a40      	ldr	r2, [pc, #256]	; (800b0dc <UART_Start_Receive_DMA+0x130>)
 800afda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	4a3f      	ldr	r2, [pc, #252]	; (800b0e0 <UART_Start_Receive_DMA+0x134>)
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe8:	4a3e      	ldr	r2, [pc, #248]	; (800b0e4 <UART_Start_Receive_DMA+0x138>)
 800afea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	2200      	movs	r2, #0
 800aff2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3304      	adds	r3, #4
 800b004:	4619      	mov	r1, r3
 800b006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	f7fa fbdc 	bl	80057c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b010:	2300      	movs	r3, #0
 800b012:	613b      	str	r3, [r7, #16]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	613b      	str	r3, [r7, #16]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d019      	beq.n	800b06a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	330c      	adds	r3, #12
 800b03c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b04c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	330c      	adds	r3, #12
 800b054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b056:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b058:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b05c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e5      	bne.n	800b036 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3314      	adds	r3, #20
 800b070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	f043 0301 	orr.w	r3, r3, #1
 800b080:	657b      	str	r3, [r7, #84]	; 0x54
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3314      	adds	r3, #20
 800b088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b08a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b08c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e5      	bne.n	800b06a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b4:	653b      	str	r3, [r7, #80]	; 0x50
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3314      	adds	r3, #20
 800b0bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0be:	627a      	str	r2, [r7, #36]	; 0x24
 800b0c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6a39      	ldr	r1, [r7, #32]
 800b0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e5      	bne.n	800b09e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3760      	adds	r7, #96	; 0x60
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	0800adbb 	.word	0x0800adbb
 800b0e0:	0800aee1 	.word	0x0800aee1
 800b0e4:	0800af17 	.word	0x0800af17

0800b0e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b089      	sub	sp, #36	; 0x24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b106:	61fb      	str	r3, [r7, #28]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	330c      	adds	r3, #12
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	61ba      	str	r2, [r7, #24]
 800b112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	6979      	ldr	r1, [r7, #20]
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	e841 2300 	strex	r3, r2, [r1]
 800b11c:	613b      	str	r3, [r7, #16]
   return(result);
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e5      	bne.n	800b0f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2220      	movs	r2, #32
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b12c:	bf00      	nop
 800b12e:	3724      	adds	r7, #36	; 0x24
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b138:	b480      	push	{r7}
 800b13a:	b095      	sub	sp, #84	; 0x54
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	330c      	adds	r3, #12
 800b146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b156:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	330c      	adds	r3, #12
 800b15e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b160:	643a      	str	r2, [r7, #64]	; 0x40
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b168:	e841 2300 	strex	r3, r2, [r1]
 800b16c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e5      	bne.n	800b140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3314      	adds	r3, #20
 800b17a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	e853 3f00 	ldrex	r3, [r3]
 800b182:	61fb      	str	r3, [r7, #28]
   return(result);
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	f023 0301 	bic.w	r3, r3, #1
 800b18a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3314      	adds	r3, #20
 800b192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b194:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e5      	bne.n	800b174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d119      	bne.n	800b1e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f023 0310 	bic.w	r3, r3, #16
 800b1c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	330c      	adds	r3, #12
 800b1ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1d0:	61ba      	str	r2, [r7, #24]
 800b1d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6979      	ldr	r1, [r7, #20]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e5      	bne.n	800b1b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b1f2:	bf00      	nop
 800b1f4:	3754      	adds	r7, #84	; 0x54
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7ff fd5d 	bl	800acd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b21      	cmp	r3, #33	; 0x21
 800b238:	d13e      	bne.n	800b2b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b242:	d114      	bne.n	800b26e <UART_Transmit_IT+0x48>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d110      	bne.n	800b26e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a1b      	ldr	r3, [r3, #32]
 800b250:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b260:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	1c9a      	adds	r2, r3, #2
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	621a      	str	r2, [r3, #32]
 800b26c:	e008      	b.n	800b280 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	1c59      	adds	r1, r3, #1
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6211      	str	r1, [r2, #32]
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	b29b      	uxth	r3, r3
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4619      	mov	r1, r3
 800b28e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10f      	bne.n	800b2b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68da      	ldr	r2, [r3, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	e000      	b.n	800b2ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2b8:	2302      	movs	r3, #2
  }
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff fcce 	bl	800ac88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b08c      	sub	sp, #48	; 0x30
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b22      	cmp	r3, #34	; 0x22
 800b308:	f040 80ab 	bne.w	800b462 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b314:	d117      	bne.n	800b346 <UART_Receive_IT+0x50>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d113      	bne.n	800b346 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b334:	b29a      	uxth	r2, r3
 800b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b338:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	629a      	str	r2, [r3, #40]	; 0x28
 800b344:	e026      	b.n	800b394 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b358:	d007      	beq.n	800b36a <UART_Receive_IT+0x74>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <UART_Receive_IT+0x82>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	b2da      	uxtb	r2, r3
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e008      	b.n	800b38a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b384:	b2da      	uxtb	r2, r3
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b398:	b29b      	uxth	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d15a      	bne.n	800b45e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f022 0220 	bic.w	r2, r2, #32
 800b3b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	695a      	ldr	r2, [r3, #20]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 0201 	bic.w	r2, r2, #1
 800b3d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d135      	bne.n	800b454 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	330c      	adds	r3, #12
 800b3f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	e853 3f00 	ldrex	r3, [r3]
 800b3fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f023 0310 	bic.w	r3, r3, #16
 800b404:	627b      	str	r3, [r7, #36]	; 0x24
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	330c      	adds	r3, #12
 800b40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40e:	623a      	str	r2, [r7, #32]
 800b410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	69f9      	ldr	r1, [r7, #28]
 800b414:	6a3a      	ldr	r2, [r7, #32]
 800b416:	e841 2300 	strex	r3, r2, [r1]
 800b41a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1e5      	bne.n	800b3ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0310 	and.w	r3, r3, #16
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d10a      	bne.n	800b446 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff fc4d 	bl	800acec <HAL_UARTEx_RxEventCallback>
 800b452:	e002      	b.n	800b45a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff fc2b 	bl	800acb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e002      	b.n	800b464 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	e000      	b.n	800b464 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b462:	2302      	movs	r3, #2
  }
}
 800b464:	4618      	mov	r0, r3
 800b466:	3730      	adds	r7, #48	; 0x30
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b46c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b470:	b0c0      	sub	sp, #256	; 0x100
 800b472:	af00      	add	r7, sp, #0
 800b474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b488:	68d9      	ldr	r1, [r3, #12]
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	ea40 0301 	orr.w	r3, r0, r1
 800b494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49a:	689a      	ldr	r2, [r3, #8]
 800b49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b4c4:	f021 010c 	bic.w	r1, r1, #12
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b4e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e6:	6999      	ldr	r1, [r3, #24]
 800b4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	ea40 0301 	orr.w	r3, r0, r1
 800b4f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	4b8f      	ldr	r3, [pc, #572]	; (800b738 <UART_SetConfig+0x2cc>)
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d005      	beq.n	800b50c <UART_SetConfig+0xa0>
 800b500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b8d      	ldr	r3, [pc, #564]	; (800b73c <UART_SetConfig+0x2d0>)
 800b508:	429a      	cmp	r2, r3
 800b50a:	d104      	bne.n	800b516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b50c:	f7fd fdfa 	bl	8009104 <HAL_RCC_GetPCLK2Freq>
 800b510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b514:	e003      	b.n	800b51e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b516:	f7fd fde1 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 800b51a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b528:	f040 810c 	bne.w	800b744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b530:	2200      	movs	r2, #0
 800b532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b53a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b53e:	4622      	mov	r2, r4
 800b540:	462b      	mov	r3, r5
 800b542:	1891      	adds	r1, r2, r2
 800b544:	65b9      	str	r1, [r7, #88]	; 0x58
 800b546:	415b      	adcs	r3, r3
 800b548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b54a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b54e:	4621      	mov	r1, r4
 800b550:	eb12 0801 	adds.w	r8, r2, r1
 800b554:	4629      	mov	r1, r5
 800b556:	eb43 0901 	adc.w	r9, r3, r1
 800b55a:	f04f 0200 	mov.w	r2, #0
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b56a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b56e:	4690      	mov	r8, r2
 800b570:	4699      	mov	r9, r3
 800b572:	4623      	mov	r3, r4
 800b574:	eb18 0303 	adds.w	r3, r8, r3
 800b578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b57c:	462b      	mov	r3, r5
 800b57e:	eb49 0303 	adc.w	r3, r9, r3
 800b582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b59a:	460b      	mov	r3, r1
 800b59c:	18db      	adds	r3, r3, r3
 800b59e:	653b      	str	r3, [r7, #80]	; 0x50
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	eb42 0303 	adc.w	r3, r2, r3
 800b5a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b5a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b5ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b5b0:	f7f5 faee 	bl	8000b90 <__aeabi_uldivmod>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4b61      	ldr	r3, [pc, #388]	; (800b740 <UART_SetConfig+0x2d4>)
 800b5ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b5be:	095b      	lsrs	r3, r3, #5
 800b5c0:	011c      	lsls	r4, r3, #4
 800b5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b5d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	1891      	adds	r1, r2, r2
 800b5da:	64b9      	str	r1, [r7, #72]	; 0x48
 800b5dc:	415b      	adcs	r3, r3
 800b5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b5f0:	f04f 0200 	mov.w	r2, #0
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b604:	4692      	mov	sl, r2
 800b606:	469b      	mov	fp, r3
 800b608:	4643      	mov	r3, r8
 800b60a:	eb1a 0303 	adds.w	r3, sl, r3
 800b60e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b612:	464b      	mov	r3, r9
 800b614:	eb4b 0303 	adc.w	r3, fp, r3
 800b618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b62c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b630:	460b      	mov	r3, r1
 800b632:	18db      	adds	r3, r3, r3
 800b634:	643b      	str	r3, [r7, #64]	; 0x40
 800b636:	4613      	mov	r3, r2
 800b638:	eb42 0303 	adc.w	r3, r2, r3
 800b63c:	647b      	str	r3, [r7, #68]	; 0x44
 800b63e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b646:	f7f5 faa3 	bl	8000b90 <__aeabi_uldivmod>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4611      	mov	r1, r2
 800b650:	4b3b      	ldr	r3, [pc, #236]	; (800b740 <UART_SetConfig+0x2d4>)
 800b652:	fba3 2301 	umull	r2, r3, r3, r1
 800b656:	095b      	lsrs	r3, r3, #5
 800b658:	2264      	movs	r2, #100	; 0x64
 800b65a:	fb02 f303 	mul.w	r3, r2, r3
 800b65e:	1acb      	subs	r3, r1, r3
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b666:	4b36      	ldr	r3, [pc, #216]	; (800b740 <UART_SetConfig+0x2d4>)
 800b668:	fba3 2302 	umull	r2, r3, r3, r2
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b674:	441c      	add	r4, r3
 800b676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	1891      	adds	r1, r2, r2
 800b68e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b690:	415b      	adcs	r3, r3
 800b692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b698:	4641      	mov	r1, r8
 800b69a:	1851      	adds	r1, r2, r1
 800b69c:	6339      	str	r1, [r7, #48]	; 0x30
 800b69e:	4649      	mov	r1, r9
 800b6a0:	414b      	adcs	r3, r1
 800b6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	00cb      	lsls	r3, r1, #3
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ba:	4651      	mov	r1, sl
 800b6bc:	00ca      	lsls	r2, r1, #3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	189b      	adds	r3, r3, r2
 800b6c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	460a      	mov	r2, r1
 800b6d0:	eb42 0303 	adc.w	r3, r2, r3
 800b6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b6e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	18db      	adds	r3, r3, r3
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	eb42 0303 	adc.w	r3, r2, r3
 800b6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b702:	f7f5 fa45 	bl	8000b90 <__aeabi_uldivmod>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4b0d      	ldr	r3, [pc, #52]	; (800b740 <UART_SetConfig+0x2d4>)
 800b70c:	fba3 1302 	umull	r1, r3, r3, r2
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	2164      	movs	r1, #100	; 0x64
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	3332      	adds	r3, #50	; 0x32
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <UART_SetConfig+0x2d4>)
 800b720:	fba2 2303 	umull	r2, r3, r2, r3
 800b724:	095b      	lsrs	r3, r3, #5
 800b726:	f003 0207 	and.w	r2, r3, #7
 800b72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4422      	add	r2, r4
 800b732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b734:	e105      	b.n	800b942 <UART_SetConfig+0x4d6>
 800b736:	bf00      	nop
 800b738:	40011000 	.word	0x40011000
 800b73c:	40011400 	.word	0x40011400
 800b740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b748:	2200      	movs	r2, #0
 800b74a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b74e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b756:	4642      	mov	r2, r8
 800b758:	464b      	mov	r3, r9
 800b75a:	1891      	adds	r1, r2, r2
 800b75c:	6239      	str	r1, [r7, #32]
 800b75e:	415b      	adcs	r3, r3
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
 800b762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b766:	4641      	mov	r1, r8
 800b768:	1854      	adds	r4, r2, r1
 800b76a:	4649      	mov	r1, r9
 800b76c:	eb43 0501 	adc.w	r5, r3, r1
 800b770:	f04f 0200 	mov.w	r2, #0
 800b774:	f04f 0300 	mov.w	r3, #0
 800b778:	00eb      	lsls	r3, r5, #3
 800b77a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b77e:	00e2      	lsls	r2, r4, #3
 800b780:	4614      	mov	r4, r2
 800b782:	461d      	mov	r5, r3
 800b784:	4643      	mov	r3, r8
 800b786:	18e3      	adds	r3, r4, r3
 800b788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b78c:	464b      	mov	r3, r9
 800b78e:	eb45 0303 	adc.w	r3, r5, r3
 800b792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7a6:	f04f 0200 	mov.w	r2, #0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	008b      	lsls	r3, r1, #2
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7bc:	4621      	mov	r1, r4
 800b7be:	008a      	lsls	r2, r1, #2
 800b7c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b7c4:	f7f5 f9e4 	bl	8000b90 <__aeabi_uldivmod>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4b60      	ldr	r3, [pc, #384]	; (800b950 <UART_SetConfig+0x4e4>)
 800b7ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d2:	095b      	lsrs	r3, r3, #5
 800b7d4:	011c      	lsls	r4, r3, #4
 800b7d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b7e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	464b      	mov	r3, r9
 800b7ec:	1891      	adds	r1, r2, r2
 800b7ee:	61b9      	str	r1, [r7, #24]
 800b7f0:	415b      	adcs	r3, r3
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	1851      	adds	r1, r2, r1
 800b7fc:	6139      	str	r1, [r7, #16]
 800b7fe:	4649      	mov	r1, r9
 800b800:	414b      	adcs	r3, r1
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	f04f 0200 	mov.w	r2, #0
 800b808:	f04f 0300 	mov.w	r3, #0
 800b80c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b810:	4659      	mov	r1, fp
 800b812:	00cb      	lsls	r3, r1, #3
 800b814:	4651      	mov	r1, sl
 800b816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b81a:	4651      	mov	r1, sl
 800b81c:	00ca      	lsls	r2, r1, #3
 800b81e:	4610      	mov	r0, r2
 800b820:	4619      	mov	r1, r3
 800b822:	4603      	mov	r3, r0
 800b824:	4642      	mov	r2, r8
 800b826:	189b      	adds	r3, r3, r2
 800b828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b82c:	464b      	mov	r3, r9
 800b82e:	460a      	mov	r2, r1
 800b830:	eb42 0303 	adc.w	r3, r2, r3
 800b834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	67bb      	str	r3, [r7, #120]	; 0x78
 800b842:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b844:	f04f 0200 	mov.w	r2, #0
 800b848:	f04f 0300 	mov.w	r3, #0
 800b84c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b850:	4649      	mov	r1, r9
 800b852:	008b      	lsls	r3, r1, #2
 800b854:	4641      	mov	r1, r8
 800b856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b85a:	4641      	mov	r1, r8
 800b85c:	008a      	lsls	r2, r1, #2
 800b85e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b862:	f7f5 f995 	bl	8000b90 <__aeabi_uldivmod>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4b39      	ldr	r3, [pc, #228]	; (800b950 <UART_SetConfig+0x4e4>)
 800b86c:	fba3 1302 	umull	r1, r3, r3, r2
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	2164      	movs	r1, #100	; 0x64
 800b874:	fb01 f303 	mul.w	r3, r1, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	3332      	adds	r3, #50	; 0x32
 800b87e:	4a34      	ldr	r2, [pc, #208]	; (800b950 <UART_SetConfig+0x4e4>)
 800b880:	fba2 2303 	umull	r2, r3, r2, r3
 800b884:	095b      	lsrs	r3, r3, #5
 800b886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b88a:	441c      	add	r4, r3
 800b88c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b890:	2200      	movs	r2, #0
 800b892:	673b      	str	r3, [r7, #112]	; 0x70
 800b894:	677a      	str	r2, [r7, #116]	; 0x74
 800b896:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b89a:	4642      	mov	r2, r8
 800b89c:	464b      	mov	r3, r9
 800b89e:	1891      	adds	r1, r2, r2
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	415b      	adcs	r3, r3
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8aa:	4641      	mov	r1, r8
 800b8ac:	1851      	adds	r1, r2, r1
 800b8ae:	6039      	str	r1, [r7, #0]
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	414b      	adcs	r3, r1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	f04f 0200 	mov.w	r2, #0
 800b8ba:	f04f 0300 	mov.w	r3, #0
 800b8be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	00cb      	lsls	r3, r1, #3
 800b8c6:	4651      	mov	r1, sl
 800b8c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8cc:	4651      	mov	r1, sl
 800b8ce:	00ca      	lsls	r2, r1, #3
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	4642      	mov	r2, r8
 800b8d8:	189b      	adds	r3, r3, r2
 800b8da:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8dc:	464b      	mov	r3, r9
 800b8de:	460a      	mov	r2, r1
 800b8e0:	eb42 0303 	adc.w	r3, r2, r3
 800b8e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	663b      	str	r3, [r7, #96]	; 0x60
 800b8f0:	667a      	str	r2, [r7, #100]	; 0x64
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b8fe:	4649      	mov	r1, r9
 800b900:	008b      	lsls	r3, r1, #2
 800b902:	4641      	mov	r1, r8
 800b904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b908:	4641      	mov	r1, r8
 800b90a:	008a      	lsls	r2, r1, #2
 800b90c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b910:	f7f5 f93e 	bl	8000b90 <__aeabi_uldivmod>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <UART_SetConfig+0x4e4>)
 800b91a:	fba3 1302 	umull	r1, r3, r3, r2
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	2164      	movs	r1, #100	; 0x64
 800b922:	fb01 f303 	mul.w	r3, r1, r3
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	3332      	adds	r3, #50	; 0x32
 800b92c:	4a08      	ldr	r2, [pc, #32]	; (800b950 <UART_SetConfig+0x4e4>)
 800b92e:	fba2 2303 	umull	r2, r3, r2, r3
 800b932:	095b      	lsrs	r3, r3, #5
 800b934:	f003 020f 	and.w	r2, r3, #15
 800b938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4422      	add	r2, r4
 800b940:	609a      	str	r2, [r3, #8]
}
 800b942:	bf00      	nop
 800b944:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b948:	46bd      	mov	sp, r7
 800b94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b94e:	bf00      	nop
 800b950:	51eb851f 	.word	0x51eb851f

0800b954 <arm_mat_trans_f32>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	8802      	ldrh	r2, [r0, #0]
 800b95a:	884b      	ldrh	r3, [r1, #2]
 800b95c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b960:	684f      	ldr	r7, [r1, #4]
 800b962:	8840      	ldrh	r0, [r0, #2]
 800b964:	4293      	cmp	r3, r2
 800b966:	b083      	sub	sp, #12
 800b968:	d14c      	bne.n	800ba04 <arm_mat_trans_f32+0xb0>
 800b96a:	f8b1 e000 	ldrh.w	lr, [r1]
 800b96e:	4586      	cmp	lr, r0
 800b970:	d148      	bne.n	800ba04 <arm_mat_trans_f32+0xb0>
 800b972:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b976:	009c      	lsls	r4, r3, #2
 800b978:	f00e 0e03 	and.w	lr, lr, #3
 800b97c:	fb08 f904 	mul.w	r9, r8, r4
 800b980:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b984:	011d      	lsls	r5, r3, #4
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b98c:	eb07 0a04 	add.w	sl, r7, r4
 800b990:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b994:	9201      	str	r2, [sp, #4]
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	463b      	mov	r3, r7
 800b99a:	f1b8 0f00 	cmp.w	r8, #0
 800b99e:	d01d      	beq.n	800b9dc <arm_mat_trans_f32+0x88>
 800b9a0:	9900      	ldr	r1, [sp, #0]
 800b9a2:	f10c 0210 	add.w	r2, ip, #16
 800b9a6:	4439      	add	r1, r7
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b9ae:	601e      	str	r6, [r3, #0]
 800b9b0:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b9b4:	191e      	adds	r6, r3, r4
 800b9b6:	edc6 7a00 	vstr	s15, [r6]
 800b9ba:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b9be:	600e      	str	r6, [r1, #0]
 800b9c0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b9c4:	190e      	adds	r6, r1, r4
 800b9c6:	3801      	subs	r0, #1
 800b9c8:	442b      	add	r3, r5
 800b9ca:	f102 0210 	add.w	r2, r2, #16
 800b9ce:	edc6 7a00 	vstr	s15, [r6]
 800b9d2:	4429      	add	r1, r5
 800b9d4:	d1e9      	bne.n	800b9aa <arm_mat_trans_f32+0x56>
 800b9d6:	44dc      	add	ip, fp
 800b9d8:	eb09 0307 	add.w	r3, r9, r7
 800b9dc:	f1be 0f00 	cmp.w	lr, #0
 800b9e0:	d009      	beq.n	800b9f6 <arm_mat_trans_f32+0xa2>
 800b9e2:	4672      	mov	r2, lr
 800b9e4:	4661      	mov	r1, ip
 800b9e6:	f851 0b04 	ldr.w	r0, [r1], #4
 800b9ea:	6018      	str	r0, [r3, #0]
 800b9ec:	3a01      	subs	r2, #1
 800b9ee:	4423      	add	r3, r4
 800b9f0:	d1f9      	bne.n	800b9e6 <arm_mat_trans_f32+0x92>
 800b9f2:	9b01      	ldr	r3, [sp, #4]
 800b9f4:	449c      	add	ip, r3
 800b9f6:	3704      	adds	r7, #4
 800b9f8:	4557      	cmp	r7, sl
 800b9fa:	d1cd      	bne.n	800b998 <arm_mat_trans_f32+0x44>
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	b003      	add	sp, #12
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	f06f 0002 	mvn.w	r0, #2
 800ba08:	e7f9      	b.n	800b9fe <arm_mat_trans_f32+0xaa>
 800ba0a:	bf00      	nop

0800ba0c <arm_mat_sub_f32>:
 800ba0c:	b4f0      	push	{r4, r5, r6, r7}
 800ba0e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800ba12:	6803      	ldr	r3, [r0, #0]
 800ba14:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ba18:	6856      	ldr	r6, [r2, #4]
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	d15d      	bne.n	800bada <arm_mat_sub_f32+0xce>
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d15a      	bne.n	800bada <arm_mat_sub_f32+0xce>
 800ba24:	8803      	ldrh	r3, [r0, #0]
 800ba26:	8844      	ldrh	r4, [r0, #2]
 800ba28:	fb04 f403 	mul.w	r4, r4, r3
 800ba2c:	08a5      	lsrs	r5, r4, #2
 800ba2e:	d032      	beq.n	800ba96 <arm_mat_sub_f32+0x8a>
 800ba30:	f10c 0110 	add.w	r1, ip, #16
 800ba34:	f107 0210 	add.w	r2, r7, #16
 800ba38:	f106 0310 	add.w	r3, r6, #16
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ba42:	ed51 7a04 	vldr	s15, [r1, #-16]
 800ba46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba4a:	3801      	subs	r0, #1
 800ba4c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ba50:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ba54:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ba58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba5c:	f101 0110 	add.w	r1, r1, #16
 800ba60:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ba64:	ed12 7a02 	vldr	s14, [r2, #-8]
 800ba68:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800ba6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba70:	f102 0210 	add.w	r2, r2, #16
 800ba74:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ba78:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800ba7c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ba80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba84:	f103 0310 	add.w	r3, r3, #16
 800ba88:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ba8c:	d1d7      	bne.n	800ba3e <arm_mat_sub_f32+0x32>
 800ba8e:	012b      	lsls	r3, r5, #4
 800ba90:	449c      	add	ip, r3
 800ba92:	441f      	add	r7, r3
 800ba94:	441e      	add	r6, r3
 800ba96:	f014 0403 	ands.w	r4, r4, #3
 800ba9a:	d01b      	beq.n	800bad4 <arm_mat_sub_f32+0xc8>
 800ba9c:	eddc 7a00 	vldr	s15, [ip]
 800baa0:	ed97 7a00 	vldr	s14, [r7]
 800baa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baa8:	3c01      	subs	r4, #1
 800baaa:	edc6 7a00 	vstr	s15, [r6]
 800baae:	d011      	beq.n	800bad4 <arm_mat_sub_f32+0xc8>
 800bab0:	eddc 7a01 	vldr	s15, [ip, #4]
 800bab4:	ed97 7a01 	vldr	s14, [r7, #4]
 800bab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800babc:	2c01      	cmp	r4, #1
 800babe:	edc6 7a01 	vstr	s15, [r6, #4]
 800bac2:	d007      	beq.n	800bad4 <arm_mat_sub_f32+0xc8>
 800bac4:	eddc 7a02 	vldr	s15, [ip, #8]
 800bac8:	ed97 7a02 	vldr	s14, [r7, #8]
 800bacc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bad0:	edc6 7a02 	vstr	s15, [r6, #8]
 800bad4:	2000      	movs	r0, #0
 800bad6:	bcf0      	pop	{r4, r5, r6, r7}
 800bad8:	4770      	bx	lr
 800bada:	f06f 0002 	mvn.w	r0, #2
 800bade:	e7fa      	b.n	800bad6 <arm_mat_sub_f32+0xca>

0800bae0 <arm_mat_mult_f32>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	8845      	ldrh	r5, [r0, #2]
 800bae6:	880b      	ldrh	r3, [r1, #0]
 800bae8:	8806      	ldrh	r6, [r0, #0]
 800baea:	6847      	ldr	r7, [r0, #4]
 800baec:	6854      	ldr	r4, [r2, #4]
 800baee:	6848      	ldr	r0, [r1, #4]
 800baf0:	b08b      	sub	sp, #44	; 0x2c
 800baf2:	42ab      	cmp	r3, r5
 800baf4:	9109      	str	r1, [sp, #36]	; 0x24
 800baf6:	9604      	str	r6, [sp, #16]
 800baf8:	8849      	ldrh	r1, [r1, #2]
 800bafa:	f040 808a 	bne.w	800bc12 <arm_mat_mult_f32+0x132>
 800bafe:	8815      	ldrh	r5, [r2, #0]
 800bb00:	42b5      	cmp	r5, r6
 800bb02:	f040 8086 	bne.w	800bc12 <arm_mat_mult_f32+0x132>
 800bb06:	8852      	ldrh	r2, [r2, #2]
 800bb08:	428a      	cmp	r2, r1
 800bb0a:	f040 8082 	bne.w	800bc12 <arm_mat_mult_f32+0x132>
 800bb0e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800bb12:	1d01      	adds	r1, r0, #4
 800bb14:	0116      	lsls	r6, r2, #4
 800bb16:	9108      	str	r1, [sp, #32]
 800bb18:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800bb1c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800bb20:	9101      	str	r1, [sp, #4]
 800bb22:	fb06 f108 	mul.w	r1, r6, r8
 800bb26:	0095      	lsls	r5, r2, #2
 800bb28:	9103      	str	r1, [sp, #12]
 800bb2a:	00d2      	lsls	r2, r2, #3
 800bb2c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800bb30:	f003 0903 	and.w	r9, r3, #3
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	f107 0b10 	add.w	fp, r7, #16
 800bb3a:	eb04 0a05 	add.w	sl, r4, r5
 800bb3e:	9107      	str	r1, [sp, #28]
 800bb40:	9202      	str	r2, [sp, #8]
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	f1ab 0310 	sub.w	r3, fp, #16
 800bb48:	9305      	str	r3, [sp, #20]
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800bb50:	eb03 0c0a 	add.w	ip, r3, sl
 800bb54:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bc1c <arm_mat_mult_f32+0x13c>
 800bb58:	f1b8 0f00 	cmp.w	r8, #0
 800bb5c:	d053      	beq.n	800bc06 <arm_mat_mult_f32+0x126>
 800bb5e:	9b02      	ldr	r3, [sp, #8]
 800bb60:	4644      	mov	r4, r8
 800bb62:	18c1      	adds	r1, r0, r3
 800bb64:	4602      	mov	r2, r0
 800bb66:	465b      	mov	r3, fp
 800bb68:	ed92 6a00 	vldr	s12, [r2]
 800bb6c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800bb70:	ed53 4a03 	vldr	s9, [r3, #-12]
 800bb74:	ed53 6a02 	vldr	s13, [r3, #-8]
 800bb78:	ed91 5a00 	vldr	s10, [r1]
 800bb7c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800bb80:	1957      	adds	r7, r2, r5
 800bb82:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bb86:	ed97 6a00 	vldr	s12, [r7]
 800bb8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb8e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb92:	194f      	adds	r7, r1, r5
 800bb94:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bb98:	ee26 7a85 	vmul.f32	s14, s13, s10
 800bb9c:	edd7 7a00 	vldr	s15, [r7]
 800bba0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bba4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bba8:	3c01      	subs	r4, #1
 800bbaa:	4432      	add	r2, r6
 800bbac:	4431      	add	r1, r6
 800bbae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbb2:	f103 0310 	add.w	r3, r3, #16
 800bbb6:	d1d7      	bne.n	800bb68 <arm_mat_mult_f32+0x88>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	9a01      	ldr	r2, [sp, #4]
 800bbbc:	4418      	add	r0, r3
 800bbbe:	f1b9 0f00 	cmp.w	r9, #0
 800bbc2:	d00b      	beq.n	800bbdc <arm_mat_mult_f32+0xfc>
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	edd0 6a00 	vldr	s13, [r0]
 800bbca:	ecb2 7a01 	vldmia	r2!, {s14}
 800bbce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	4428      	add	r0, r5
 800bbd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbda:	d1f4      	bne.n	800bbc6 <arm_mat_mult_f32+0xe6>
 800bbdc:	ecec 7a01 	vstmia	ip!, {s15}
 800bbe0:	45d4      	cmp	ip, sl
 800bbe2:	4670      	mov	r0, lr
 800bbe4:	f10e 0e04 	add.w	lr, lr, #4
 800bbe8:	d1b4      	bne.n	800bb54 <arm_mat_mult_f32+0x74>
 800bbea:	9a01      	ldr	r2, [sp, #4]
 800bbec:	9b06      	ldr	r3, [sp, #24]
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4419      	add	r1, r3
 800bbf2:	449b      	add	fp, r3
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	9101      	str	r1, [sp, #4]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	44aa      	add	sl, r5
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	d004      	beq.n	800bc0a <arm_mat_mult_f32+0x12a>
 800bc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc02:	6858      	ldr	r0, [r3, #4]
 800bc04:	e79e      	b.n	800bb44 <arm_mat_mult_f32+0x64>
 800bc06:	9a05      	ldr	r2, [sp, #20]
 800bc08:	e7d9      	b.n	800bbbe <arm_mat_mult_f32+0xde>
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	b00b      	add	sp, #44	; 0x2c
 800bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc12:	f06f 0002 	mvn.w	r0, #2
 800bc16:	b00b      	add	sp, #44	; 0x2c
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	00000000 	.word	0x00000000

0800bc20 <arm_mat_init_f32>:
 800bc20:	8001      	strh	r1, [r0, #0]
 800bc22:	8042      	strh	r2, [r0, #2]
 800bc24:	6043      	str	r3, [r0, #4]
 800bc26:	4770      	bx	lr

0800bc28 <arm_mat_add_f32>:
 800bc28:	b4f0      	push	{r4, r5, r6, r7}
 800bc2a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800bc2e:	6803      	ldr	r3, [r0, #0]
 800bc30:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800bc34:	6856      	ldr	r6, [r2, #4]
 800bc36:	42a3      	cmp	r3, r4
 800bc38:	d15d      	bne.n	800bcf6 <arm_mat_add_f32+0xce>
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d15a      	bne.n	800bcf6 <arm_mat_add_f32+0xce>
 800bc40:	8803      	ldrh	r3, [r0, #0]
 800bc42:	8844      	ldrh	r4, [r0, #2]
 800bc44:	fb04 f403 	mul.w	r4, r4, r3
 800bc48:	08a5      	lsrs	r5, r4, #2
 800bc4a:	d032      	beq.n	800bcb2 <arm_mat_add_f32+0x8a>
 800bc4c:	f10c 0110 	add.w	r1, ip, #16
 800bc50:	f107 0210 	add.w	r2, r7, #16
 800bc54:	f106 0310 	add.w	r3, r6, #16
 800bc58:	4628      	mov	r0, r5
 800bc5a:	ed12 7a04 	vldr	s14, [r2, #-16]
 800bc5e:	ed51 7a04 	vldr	s15, [r1, #-16]
 800bc62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc66:	3801      	subs	r0, #1
 800bc68:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bc6c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800bc70:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bc74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc78:	f101 0110 	add.w	r1, r1, #16
 800bc7c:	ed43 7a03 	vstr	s15, [r3, #-12]
 800bc80:	ed12 7a02 	vldr	s14, [r2, #-8]
 800bc84:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800bc88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc8c:	f102 0210 	add.w	r2, r2, #16
 800bc90:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bc94:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800bc98:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800bc9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bca0:	f103 0310 	add.w	r3, r3, #16
 800bca4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800bca8:	d1d7      	bne.n	800bc5a <arm_mat_add_f32+0x32>
 800bcaa:	012b      	lsls	r3, r5, #4
 800bcac:	449c      	add	ip, r3
 800bcae:	441f      	add	r7, r3
 800bcb0:	441e      	add	r6, r3
 800bcb2:	f014 0403 	ands.w	r4, r4, #3
 800bcb6:	d01b      	beq.n	800bcf0 <arm_mat_add_f32+0xc8>
 800bcb8:	edd7 7a00 	vldr	s15, [r7]
 800bcbc:	ed9c 7a00 	vldr	s14, [ip]
 800bcc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcc4:	3c01      	subs	r4, #1
 800bcc6:	edc6 7a00 	vstr	s15, [r6]
 800bcca:	d011      	beq.n	800bcf0 <arm_mat_add_f32+0xc8>
 800bccc:	eddc 7a01 	vldr	s15, [ip, #4]
 800bcd0:	ed97 7a01 	vldr	s14, [r7, #4]
 800bcd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcd8:	2c01      	cmp	r4, #1
 800bcda:	edc6 7a01 	vstr	s15, [r6, #4]
 800bcde:	d007      	beq.n	800bcf0 <arm_mat_add_f32+0xc8>
 800bce0:	eddc 7a02 	vldr	s15, [ip, #8]
 800bce4:	ed97 7a02 	vldr	s14, [r7, #8]
 800bce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcec:	edc6 7a02 	vstr	s15, [r6, #8]
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	bcf0      	pop	{r4, r5, r6, r7}
 800bcf4:	4770      	bx	lr
 800bcf6:	f06f 0002 	mvn.w	r0, #2
 800bcfa:	e7fa      	b.n	800bcf2 <arm_mat_add_f32+0xca>

0800bcfc <__errno>:
 800bcfc:	4b01      	ldr	r3, [pc, #4]	; (800bd04 <__errno+0x8>)
 800bcfe:	6818      	ldr	r0, [r3, #0]
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	200000d4 	.word	0x200000d4

0800bd08 <__libc_init_array>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	4d0d      	ldr	r5, [pc, #52]	; (800bd40 <__libc_init_array+0x38>)
 800bd0c:	4c0d      	ldr	r4, [pc, #52]	; (800bd44 <__libc_init_array+0x3c>)
 800bd0e:	1b64      	subs	r4, r4, r5
 800bd10:	10a4      	asrs	r4, r4, #2
 800bd12:	2600      	movs	r6, #0
 800bd14:	42a6      	cmp	r6, r4
 800bd16:	d109      	bne.n	800bd2c <__libc_init_array+0x24>
 800bd18:	4d0b      	ldr	r5, [pc, #44]	; (800bd48 <__libc_init_array+0x40>)
 800bd1a:	4c0c      	ldr	r4, [pc, #48]	; (800bd4c <__libc_init_array+0x44>)
 800bd1c:	f000 ffea 	bl	800ccf4 <_init>
 800bd20:	1b64      	subs	r4, r4, r5
 800bd22:	10a4      	asrs	r4, r4, #2
 800bd24:	2600      	movs	r6, #0
 800bd26:	42a6      	cmp	r6, r4
 800bd28:	d105      	bne.n	800bd36 <__libc_init_array+0x2e>
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}
 800bd2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd30:	4798      	blx	r3
 800bd32:	3601      	adds	r6, #1
 800bd34:	e7ee      	b.n	800bd14 <__libc_init_array+0xc>
 800bd36:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3a:	4798      	blx	r3
 800bd3c:	3601      	adds	r6, #1
 800bd3e:	e7f2      	b.n	800bd26 <__libc_init_array+0x1e>
 800bd40:	0800cd68 	.word	0x0800cd68
 800bd44:	0800cd68 	.word	0x0800cd68
 800bd48:	0800cd68 	.word	0x0800cd68
 800bd4c:	0800cd6c 	.word	0x0800cd6c

0800bd50 <memset>:
 800bd50:	4402      	add	r2, r0
 800bd52:	4603      	mov	r3, r0
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d100      	bne.n	800bd5a <memset+0xa>
 800bd58:	4770      	bx	lr
 800bd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd5e:	e7f9      	b.n	800bd54 <memset+0x4>

0800bd60 <ceil>:
 800bd60:	ec51 0b10 	vmov	r0, r1, d0
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bd6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bd70:	2e13      	cmp	r6, #19
 800bd72:	ee10 5a10 	vmov	r5, s0
 800bd76:	ee10 8a10 	vmov	r8, s0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	dc30      	bgt.n	800bde0 <ceil+0x80>
 800bd7e:	2e00      	cmp	r6, #0
 800bd80:	da12      	bge.n	800bda8 <ceil+0x48>
 800bd82:	a335      	add	r3, pc, #212	; (adr r3, 800be58 <ceil+0xf8>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa2c 	bl	80001e4 <__adddf3>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f7f4 fe6e 	bl	8000a70 <__aeabi_dcmpgt>
 800bd94:	b128      	cbz	r0, 800bda2 <ceil+0x42>
 800bd96:	2c00      	cmp	r4, #0
 800bd98:	db55      	blt.n	800be46 <ceil+0xe6>
 800bd9a:	432c      	orrs	r4, r5
 800bd9c:	d057      	beq.n	800be4e <ceil+0xee>
 800bd9e:	4c30      	ldr	r4, [pc, #192]	; (800be60 <ceil+0x100>)
 800bda0:	2500      	movs	r5, #0
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	e025      	b.n	800bdf4 <ceil+0x94>
 800bda8:	4f2e      	ldr	r7, [pc, #184]	; (800be64 <ceil+0x104>)
 800bdaa:	4137      	asrs	r7, r6
 800bdac:	ea01 0307 	and.w	r3, r1, r7
 800bdb0:	4303      	orrs	r3, r0
 800bdb2:	d01f      	beq.n	800bdf4 <ceil+0x94>
 800bdb4:	a328      	add	r3, pc, #160	; (adr r3, 800be58 <ceil+0xf8>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fa13 	bl	80001e4 <__adddf3>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f7f4 fe55 	bl	8000a70 <__aeabi_dcmpgt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0eb      	beq.n	800bda2 <ceil+0x42>
 800bdca:	2c00      	cmp	r4, #0
 800bdcc:	bfc2      	ittt	gt
 800bdce:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800bdd2:	fa43 f606 	asrgt.w	r6, r3, r6
 800bdd6:	19a4      	addgt	r4, r4, r6
 800bdd8:	ea24 0407 	bic.w	r4, r4, r7
 800bddc:	2500      	movs	r5, #0
 800bdde:	e7e0      	b.n	800bda2 <ceil+0x42>
 800bde0:	2e33      	cmp	r6, #51	; 0x33
 800bde2:	dd0b      	ble.n	800bdfc <ceil+0x9c>
 800bde4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bde8:	d104      	bne.n	800bdf4 <ceil+0x94>
 800bdea:	ee10 2a10 	vmov	r2, s0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	f7f4 f9f8 	bl	80001e4 <__adddf3>
 800bdf4:	ec41 0b10 	vmov	d0, r0, r1
 800bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800be00:	f04f 33ff 	mov.w	r3, #4294967295
 800be04:	fa23 f707 	lsr.w	r7, r3, r7
 800be08:	4207      	tst	r7, r0
 800be0a:	d0f3      	beq.n	800bdf4 <ceil+0x94>
 800be0c:	a312      	add	r3, pc, #72	; (adr r3, 800be58 <ceil+0xf8>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 f9e7 	bl	80001e4 <__adddf3>
 800be16:	2200      	movs	r2, #0
 800be18:	2300      	movs	r3, #0
 800be1a:	f7f4 fe29 	bl	8000a70 <__aeabi_dcmpgt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d0bf      	beq.n	800bda2 <ceil+0x42>
 800be22:	2c00      	cmp	r4, #0
 800be24:	dd02      	ble.n	800be2c <ceil+0xcc>
 800be26:	2e14      	cmp	r6, #20
 800be28:	d103      	bne.n	800be32 <ceil+0xd2>
 800be2a:	3401      	adds	r4, #1
 800be2c:	ea25 0507 	bic.w	r5, r5, r7
 800be30:	e7b7      	b.n	800bda2 <ceil+0x42>
 800be32:	2301      	movs	r3, #1
 800be34:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be38:	fa03 f606 	lsl.w	r6, r3, r6
 800be3c:	4435      	add	r5, r6
 800be3e:	4545      	cmp	r5, r8
 800be40:	bf38      	it	cc
 800be42:	18e4      	addcc	r4, r4, r3
 800be44:	e7f2      	b.n	800be2c <ceil+0xcc>
 800be46:	2500      	movs	r5, #0
 800be48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be4c:	e7a9      	b.n	800bda2 <ceil+0x42>
 800be4e:	4625      	mov	r5, r4
 800be50:	e7a7      	b.n	800bda2 <ceil+0x42>
 800be52:	bf00      	nop
 800be54:	f3af 8000 	nop.w
 800be58:	8800759c 	.word	0x8800759c
 800be5c:	7e37e43c 	.word	0x7e37e43c
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	000fffff 	.word	0x000fffff

0800be68 <pow>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	ed2d 8b02 	vpush	{d8}
 800be6e:	eeb0 8a40 	vmov.f32	s16, s0
 800be72:	eef0 8a60 	vmov.f32	s17, s1
 800be76:	ec55 4b11 	vmov	r4, r5, d1
 800be7a:	f000 f891 	bl	800bfa0 <__ieee754_pow>
 800be7e:	4622      	mov	r2, r4
 800be80:	462b      	mov	r3, r5
 800be82:	4620      	mov	r0, r4
 800be84:	4629      	mov	r1, r5
 800be86:	ec57 6b10 	vmov	r6, r7, d0
 800be8a:	f7f4 fdfb 	bl	8000a84 <__aeabi_dcmpun>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d13b      	bne.n	800bf0a <pow+0xa2>
 800be92:	ec51 0b18 	vmov	r0, r1, d8
 800be96:	2200      	movs	r2, #0
 800be98:	2300      	movs	r3, #0
 800be9a:	f7f4 fdc1 	bl	8000a20 <__aeabi_dcmpeq>
 800be9e:	b1b8      	cbz	r0, 800bed0 <pow+0x68>
 800bea0:	2200      	movs	r2, #0
 800bea2:	2300      	movs	r3, #0
 800bea4:	4620      	mov	r0, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 fdba 	bl	8000a20 <__aeabi_dcmpeq>
 800beac:	2800      	cmp	r0, #0
 800beae:	d146      	bne.n	800bf3e <pow+0xd6>
 800beb0:	ec45 4b10 	vmov	d0, r4, r5
 800beb4:	f000 fe8d 	bl	800cbd2 <finite>
 800beb8:	b338      	cbz	r0, 800bf0a <pow+0xa2>
 800beba:	2200      	movs	r2, #0
 800bebc:	2300      	movs	r3, #0
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 fdb7 	bl	8000a34 <__aeabi_dcmplt>
 800bec6:	b300      	cbz	r0, 800bf0a <pow+0xa2>
 800bec8:	f7ff ff18 	bl	800bcfc <__errno>
 800becc:	2322      	movs	r3, #34	; 0x22
 800bece:	e01b      	b.n	800bf08 <pow+0xa0>
 800bed0:	ec47 6b10 	vmov	d0, r6, r7
 800bed4:	f000 fe7d 	bl	800cbd2 <finite>
 800bed8:	b9e0      	cbnz	r0, 800bf14 <pow+0xac>
 800beda:	eeb0 0a48 	vmov.f32	s0, s16
 800bede:	eef0 0a68 	vmov.f32	s1, s17
 800bee2:	f000 fe76 	bl	800cbd2 <finite>
 800bee6:	b1a8      	cbz	r0, 800bf14 <pow+0xac>
 800bee8:	ec45 4b10 	vmov	d0, r4, r5
 800beec:	f000 fe71 	bl	800cbd2 <finite>
 800bef0:	b180      	cbz	r0, 800bf14 <pow+0xac>
 800bef2:	4632      	mov	r2, r6
 800bef4:	463b      	mov	r3, r7
 800bef6:	4630      	mov	r0, r6
 800bef8:	4639      	mov	r1, r7
 800befa:	f7f4 fdc3 	bl	8000a84 <__aeabi_dcmpun>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d0e2      	beq.n	800bec8 <pow+0x60>
 800bf02:	f7ff fefb 	bl	800bcfc <__errno>
 800bf06:	2321      	movs	r3, #33	; 0x21
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	ecbd 8b02 	vpop	{d8}
 800bf0e:	ec47 6b10 	vmov	d0, r6, r7
 800bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf14:	2200      	movs	r2, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	4630      	mov	r0, r6
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 fd80 	bl	8000a20 <__aeabi_dcmpeq>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d0f2      	beq.n	800bf0a <pow+0xa2>
 800bf24:	eeb0 0a48 	vmov.f32	s0, s16
 800bf28:	eef0 0a68 	vmov.f32	s1, s17
 800bf2c:	f000 fe51 	bl	800cbd2 <finite>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0ea      	beq.n	800bf0a <pow+0xa2>
 800bf34:	ec45 4b10 	vmov	d0, r4, r5
 800bf38:	f000 fe4b 	bl	800cbd2 <finite>
 800bf3c:	e7c3      	b.n	800bec6 <pow+0x5e>
 800bf3e:	4f01      	ldr	r7, [pc, #4]	; (800bf44 <pow+0xdc>)
 800bf40:	2600      	movs	r6, #0
 800bf42:	e7e2      	b.n	800bf0a <pow+0xa2>
 800bf44:	3ff00000 	.word	0x3ff00000

0800bf48 <sqrt>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	ed2d 8b02 	vpush	{d8}
 800bf4e:	ec55 4b10 	vmov	r4, r5, d0
 800bf52:	f000 fd53 	bl	800c9fc <__ieee754_sqrt>
 800bf56:	4622      	mov	r2, r4
 800bf58:	462b      	mov	r3, r5
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	eeb0 8a40 	vmov.f32	s16, s0
 800bf62:	eef0 8a60 	vmov.f32	s17, s1
 800bf66:	f7f4 fd8d 	bl	8000a84 <__aeabi_dcmpun>
 800bf6a:	b990      	cbnz	r0, 800bf92 <sqrt+0x4a>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 fd5e 	bl	8000a34 <__aeabi_dcmplt>
 800bf78:	b158      	cbz	r0, 800bf92 <sqrt+0x4a>
 800bf7a:	f7ff febf 	bl	800bcfc <__errno>
 800bf7e:	2321      	movs	r3, #33	; 0x21
 800bf80:	6003      	str	r3, [r0, #0]
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	4610      	mov	r0, r2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f7f4 fc0b 	bl	80007a4 <__aeabi_ddiv>
 800bf8e:	ec41 0b18 	vmov	d8, r0, r1
 800bf92:	eeb0 0a48 	vmov.f32	s0, s16
 800bf96:	eef0 0a68 	vmov.f32	s1, s17
 800bf9a:	ecbd 8b02 	vpop	{d8}
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}

0800bfa0 <__ieee754_pow>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	ed2d 8b06 	vpush	{d8-d10}
 800bfa8:	b089      	sub	sp, #36	; 0x24
 800bfaa:	ed8d 1b00 	vstr	d1, [sp]
 800bfae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bfb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bfb6:	ea58 0102 	orrs.w	r1, r8, r2
 800bfba:	ec57 6b10 	vmov	r6, r7, d0
 800bfbe:	d115      	bne.n	800bfec <__ieee754_pow+0x4c>
 800bfc0:	19b3      	adds	r3, r6, r6
 800bfc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bfc6:	4152      	adcs	r2, r2
 800bfc8:	4299      	cmp	r1, r3
 800bfca:	4b89      	ldr	r3, [pc, #548]	; (800c1f0 <__ieee754_pow+0x250>)
 800bfcc:	4193      	sbcs	r3, r2
 800bfce:	f080 84d2 	bcs.w	800c976 <__ieee754_pow+0x9d6>
 800bfd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	4639      	mov	r1, r7
 800bfda:	f7f4 f903 	bl	80001e4 <__adddf3>
 800bfde:	ec41 0b10 	vmov	d0, r0, r1
 800bfe2:	b009      	add	sp, #36	; 0x24
 800bfe4:	ecbd 8b06 	vpop	{d8-d10}
 800bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfec:	4b81      	ldr	r3, [pc, #516]	; (800c1f4 <__ieee754_pow+0x254>)
 800bfee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bff2:	429c      	cmp	r4, r3
 800bff4:	ee10 aa10 	vmov	sl, s0
 800bff8:	463d      	mov	r5, r7
 800bffa:	dc06      	bgt.n	800c00a <__ieee754_pow+0x6a>
 800bffc:	d101      	bne.n	800c002 <__ieee754_pow+0x62>
 800bffe:	2e00      	cmp	r6, #0
 800c000:	d1e7      	bne.n	800bfd2 <__ieee754_pow+0x32>
 800c002:	4598      	cmp	r8, r3
 800c004:	dc01      	bgt.n	800c00a <__ieee754_pow+0x6a>
 800c006:	d10f      	bne.n	800c028 <__ieee754_pow+0x88>
 800c008:	b172      	cbz	r2, 800c028 <__ieee754_pow+0x88>
 800c00a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c00e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c012:	ea55 050a 	orrs.w	r5, r5, sl
 800c016:	d1dc      	bne.n	800bfd2 <__ieee754_pow+0x32>
 800c018:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c01c:	18db      	adds	r3, r3, r3
 800c01e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c022:	4152      	adcs	r2, r2
 800c024:	429d      	cmp	r5, r3
 800c026:	e7d0      	b.n	800bfca <__ieee754_pow+0x2a>
 800c028:	2d00      	cmp	r5, #0
 800c02a:	da3b      	bge.n	800c0a4 <__ieee754_pow+0x104>
 800c02c:	4b72      	ldr	r3, [pc, #456]	; (800c1f8 <__ieee754_pow+0x258>)
 800c02e:	4598      	cmp	r8, r3
 800c030:	dc51      	bgt.n	800c0d6 <__ieee754_pow+0x136>
 800c032:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c036:	4598      	cmp	r8, r3
 800c038:	f340 84ac 	ble.w	800c994 <__ieee754_pow+0x9f4>
 800c03c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c044:	2b14      	cmp	r3, #20
 800c046:	dd0f      	ble.n	800c068 <__ieee754_pow+0xc8>
 800c048:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c04c:	fa22 f103 	lsr.w	r1, r2, r3
 800c050:	fa01 f303 	lsl.w	r3, r1, r3
 800c054:	4293      	cmp	r3, r2
 800c056:	f040 849d 	bne.w	800c994 <__ieee754_pow+0x9f4>
 800c05a:	f001 0101 	and.w	r1, r1, #1
 800c05e:	f1c1 0302 	rsb	r3, r1, #2
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	b182      	cbz	r2, 800c088 <__ieee754_pow+0xe8>
 800c066:	e05f      	b.n	800c128 <__ieee754_pow+0x188>
 800c068:	2a00      	cmp	r2, #0
 800c06a:	d15b      	bne.n	800c124 <__ieee754_pow+0x184>
 800c06c:	f1c3 0314 	rsb	r3, r3, #20
 800c070:	fa48 f103 	asr.w	r1, r8, r3
 800c074:	fa01 f303 	lsl.w	r3, r1, r3
 800c078:	4543      	cmp	r3, r8
 800c07a:	f040 8488 	bne.w	800c98e <__ieee754_pow+0x9ee>
 800c07e:	f001 0101 	and.w	r1, r1, #1
 800c082:	f1c1 0302 	rsb	r3, r1, #2
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	4b5c      	ldr	r3, [pc, #368]	; (800c1fc <__ieee754_pow+0x25c>)
 800c08a:	4598      	cmp	r8, r3
 800c08c:	d132      	bne.n	800c0f4 <__ieee754_pow+0x154>
 800c08e:	f1b9 0f00 	cmp.w	r9, #0
 800c092:	f280 8478 	bge.w	800c986 <__ieee754_pow+0x9e6>
 800c096:	4959      	ldr	r1, [pc, #356]	; (800c1fc <__ieee754_pow+0x25c>)
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	2000      	movs	r0, #0
 800c09e:	f7f4 fb81 	bl	80007a4 <__aeabi_ddiv>
 800c0a2:	e79c      	b.n	800bfde <__ieee754_pow+0x3e>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9304      	str	r3, [sp, #16]
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d13d      	bne.n	800c128 <__ieee754_pow+0x188>
 800c0ac:	4b51      	ldr	r3, [pc, #324]	; (800c1f4 <__ieee754_pow+0x254>)
 800c0ae:	4598      	cmp	r8, r3
 800c0b0:	d1ea      	bne.n	800c088 <__ieee754_pow+0xe8>
 800c0b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c0b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c0ba:	ea53 030a 	orrs.w	r3, r3, sl
 800c0be:	f000 845a 	beq.w	800c976 <__ieee754_pow+0x9d6>
 800c0c2:	4b4f      	ldr	r3, [pc, #316]	; (800c200 <__ieee754_pow+0x260>)
 800c0c4:	429c      	cmp	r4, r3
 800c0c6:	dd08      	ble.n	800c0da <__ieee754_pow+0x13a>
 800c0c8:	f1b9 0f00 	cmp.w	r9, #0
 800c0cc:	f2c0 8457 	blt.w	800c97e <__ieee754_pow+0x9de>
 800c0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0d4:	e783      	b.n	800bfde <__ieee754_pow+0x3e>
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e7e5      	b.n	800c0a6 <__ieee754_pow+0x106>
 800c0da:	f1b9 0f00 	cmp.w	r9, #0
 800c0de:	f04f 0000 	mov.w	r0, #0
 800c0e2:	f04f 0100 	mov.w	r1, #0
 800c0e6:	f6bf af7a 	bge.w	800bfde <__ieee754_pow+0x3e>
 800c0ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c0ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c0f2:	e774      	b.n	800bfde <__ieee754_pow+0x3e>
 800c0f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c0f8:	d106      	bne.n	800c108 <__ieee754_pow+0x168>
 800c0fa:	4632      	mov	r2, r6
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 fa25 	bl	8000550 <__aeabi_dmul>
 800c106:	e76a      	b.n	800bfde <__ieee754_pow+0x3e>
 800c108:	4b3e      	ldr	r3, [pc, #248]	; (800c204 <__ieee754_pow+0x264>)
 800c10a:	4599      	cmp	r9, r3
 800c10c:	d10c      	bne.n	800c128 <__ieee754_pow+0x188>
 800c10e:	2d00      	cmp	r5, #0
 800c110:	db0a      	blt.n	800c128 <__ieee754_pow+0x188>
 800c112:	ec47 6b10 	vmov	d0, r6, r7
 800c116:	b009      	add	sp, #36	; 0x24
 800c118:	ecbd 8b06 	vpop	{d8-d10}
 800c11c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	f000 bc6c 	b.w	800c9fc <__ieee754_sqrt>
 800c124:	2300      	movs	r3, #0
 800c126:	9304      	str	r3, [sp, #16]
 800c128:	ec47 6b10 	vmov	d0, r6, r7
 800c12c:	f000 fd48 	bl	800cbc0 <fabs>
 800c130:	ec51 0b10 	vmov	r0, r1, d0
 800c134:	f1ba 0f00 	cmp.w	sl, #0
 800c138:	d129      	bne.n	800c18e <__ieee754_pow+0x1ee>
 800c13a:	b124      	cbz	r4, 800c146 <__ieee754_pow+0x1a6>
 800c13c:	4b2f      	ldr	r3, [pc, #188]	; (800c1fc <__ieee754_pow+0x25c>)
 800c13e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c142:	429a      	cmp	r2, r3
 800c144:	d123      	bne.n	800c18e <__ieee754_pow+0x1ee>
 800c146:	f1b9 0f00 	cmp.w	r9, #0
 800c14a:	da05      	bge.n	800c158 <__ieee754_pow+0x1b8>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	2000      	movs	r0, #0
 800c152:	492a      	ldr	r1, [pc, #168]	; (800c1fc <__ieee754_pow+0x25c>)
 800c154:	f7f4 fb26 	bl	80007a4 <__aeabi_ddiv>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	f6bf af40 	bge.w	800bfde <__ieee754_pow+0x3e>
 800c15e:	9b04      	ldr	r3, [sp, #16]
 800c160:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c164:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c168:	4323      	orrs	r3, r4
 800c16a:	d108      	bne.n	800c17e <__ieee754_pow+0x1de>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	4610      	mov	r0, r2
 800c172:	4619      	mov	r1, r3
 800c174:	f7f4 f834 	bl	80001e0 <__aeabi_dsub>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	e78f      	b.n	800c09e <__ieee754_pow+0xfe>
 800c17e:	9b04      	ldr	r3, [sp, #16]
 800c180:	2b01      	cmp	r3, #1
 800c182:	f47f af2c 	bne.w	800bfde <__ieee754_pow+0x3e>
 800c186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c18a:	4619      	mov	r1, r3
 800c18c:	e727      	b.n	800bfde <__ieee754_pow+0x3e>
 800c18e:	0feb      	lsrs	r3, r5, #31
 800c190:	3b01      	subs	r3, #1
 800c192:	9306      	str	r3, [sp, #24]
 800c194:	9a06      	ldr	r2, [sp, #24]
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	4313      	orrs	r3, r2
 800c19a:	d102      	bne.n	800c1a2 <__ieee754_pow+0x202>
 800c19c:	4632      	mov	r2, r6
 800c19e:	463b      	mov	r3, r7
 800c1a0:	e7e6      	b.n	800c170 <__ieee754_pow+0x1d0>
 800c1a2:	4b19      	ldr	r3, [pc, #100]	; (800c208 <__ieee754_pow+0x268>)
 800c1a4:	4598      	cmp	r8, r3
 800c1a6:	f340 80fb 	ble.w	800c3a0 <__ieee754_pow+0x400>
 800c1aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c1ae:	4598      	cmp	r8, r3
 800c1b0:	4b13      	ldr	r3, [pc, #76]	; (800c200 <__ieee754_pow+0x260>)
 800c1b2:	dd0c      	ble.n	800c1ce <__ieee754_pow+0x22e>
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	dc0f      	bgt.n	800c1d8 <__ieee754_pow+0x238>
 800c1b8:	f1b9 0f00 	cmp.w	r9, #0
 800c1bc:	da0f      	bge.n	800c1de <__ieee754_pow+0x23e>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	b009      	add	sp, #36	; 0x24
 800c1c2:	ecbd 8b06 	vpop	{d8-d10}
 800c1c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ca:	f000 bcf0 	b.w	800cbae <__math_oflow>
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	dbf2      	blt.n	800c1b8 <__ieee754_pow+0x218>
 800c1d2:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <__ieee754_pow+0x25c>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	dd19      	ble.n	800c20c <__ieee754_pow+0x26c>
 800c1d8:	f1b9 0f00 	cmp.w	r9, #0
 800c1dc:	dcef      	bgt.n	800c1be <__ieee754_pow+0x21e>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	b009      	add	sp, #36	; 0x24
 800c1e2:	ecbd 8b06 	vpop	{d8-d10}
 800c1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ea:	f000 bcd7 	b.w	800cb9c <__math_uflow>
 800c1ee:	bf00      	nop
 800c1f0:	fff00000 	.word	0xfff00000
 800c1f4:	7ff00000 	.word	0x7ff00000
 800c1f8:	433fffff 	.word	0x433fffff
 800c1fc:	3ff00000 	.word	0x3ff00000
 800c200:	3fefffff 	.word	0x3fefffff
 800c204:	3fe00000 	.word	0x3fe00000
 800c208:	41e00000 	.word	0x41e00000
 800c20c:	4b60      	ldr	r3, [pc, #384]	; (800c390 <__ieee754_pow+0x3f0>)
 800c20e:	2200      	movs	r2, #0
 800c210:	f7f3 ffe6 	bl	80001e0 <__aeabi_dsub>
 800c214:	a354      	add	r3, pc, #336	; (adr r3, 800c368 <__ieee754_pow+0x3c8>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	4604      	mov	r4, r0
 800c21c:	460d      	mov	r5, r1
 800c21e:	f7f4 f997 	bl	8000550 <__aeabi_dmul>
 800c222:	a353      	add	r3, pc, #332	; (adr r3, 800c370 <__ieee754_pow+0x3d0>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	4606      	mov	r6, r0
 800c22a:	460f      	mov	r7, r1
 800c22c:	4620      	mov	r0, r4
 800c22e:	4629      	mov	r1, r5
 800c230:	f7f4 f98e 	bl	8000550 <__aeabi_dmul>
 800c234:	4b57      	ldr	r3, [pc, #348]	; (800c394 <__ieee754_pow+0x3f4>)
 800c236:	4682      	mov	sl, r0
 800c238:	468b      	mov	fp, r1
 800c23a:	2200      	movs	r2, #0
 800c23c:	4620      	mov	r0, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 f986 	bl	8000550 <__aeabi_dmul>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	a14b      	add	r1, pc, #300	; (adr r1, 800c378 <__ieee754_pow+0x3d8>)
 800c24a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24e:	f7f3 ffc7 	bl	80001e0 <__aeabi_dsub>
 800c252:	4622      	mov	r2, r4
 800c254:	462b      	mov	r3, r5
 800c256:	f7f4 f97b 	bl	8000550 <__aeabi_dmul>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	2000      	movs	r0, #0
 800c260:	494d      	ldr	r1, [pc, #308]	; (800c398 <__ieee754_pow+0x3f8>)
 800c262:	f7f3 ffbd 	bl	80001e0 <__aeabi_dsub>
 800c266:	4622      	mov	r2, r4
 800c268:	4680      	mov	r8, r0
 800c26a:	4689      	mov	r9, r1
 800c26c:	462b      	mov	r3, r5
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	f7f4 f96d 	bl	8000550 <__aeabi_dmul>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 f967 	bl	8000550 <__aeabi_dmul>
 800c282:	a33f      	add	r3, pc, #252	; (adr r3, 800c380 <__ieee754_pow+0x3e0>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	f7f4 f962 	bl	8000550 <__aeabi_dmul>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4650      	mov	r0, sl
 800c292:	4659      	mov	r1, fp
 800c294:	f7f3 ffa4 	bl	80001e0 <__aeabi_dsub>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f3 ff9e 	bl	80001e4 <__adddf3>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	463b      	mov	r3, r7
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	f7f3 ff95 	bl	80001e0 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	4649      	mov	r1, r9
 800c2be:	f7f3 ff8f 	bl	80001e0 <__aeabi_dsub>
 800c2c2:	9b04      	ldr	r3, [sp, #16]
 800c2c4:	9a06      	ldr	r2, [sp, #24]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	4682      	mov	sl, r0
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	f040 81e7 	bne.w	800c6a0 <__ieee754_pow+0x700>
 800c2d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c388 <__ieee754_pow+0x3e8>
 800c2d6:	eeb0 8a47 	vmov.f32	s16, s14
 800c2da:	eef0 8a67 	vmov.f32	s17, s15
 800c2de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ec:	f7f3 ff78 	bl	80001e0 <__aeabi_dsub>
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	462b      	mov	r3, r5
 800c2f4:	f7f4 f92c 	bl	8000550 <__aeabi_dmul>
 800c2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	4689      	mov	r9, r1
 800c300:	4650      	mov	r0, sl
 800c302:	4659      	mov	r1, fp
 800c304:	f7f4 f924 	bl	8000550 <__aeabi_dmul>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4640      	mov	r0, r8
 800c30e:	4649      	mov	r1, r9
 800c310:	f7f3 ff68 	bl	80001e4 <__adddf3>
 800c314:	4632      	mov	r2, r6
 800c316:	463b      	mov	r3, r7
 800c318:	4680      	mov	r8, r0
 800c31a:	4689      	mov	r9, r1
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f916 	bl	8000550 <__aeabi_dmul>
 800c324:	460b      	mov	r3, r1
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	4602      	mov	r2, r0
 800c32c:	4649      	mov	r1, r9
 800c32e:	4640      	mov	r0, r8
 800c330:	f7f3 ff58 	bl	80001e4 <__adddf3>
 800c334:	4b19      	ldr	r3, [pc, #100]	; (800c39c <__ieee754_pow+0x3fc>)
 800c336:	4299      	cmp	r1, r3
 800c338:	ec45 4b19 	vmov	d9, r4, r5
 800c33c:	4606      	mov	r6, r0
 800c33e:	460f      	mov	r7, r1
 800c340:	468b      	mov	fp, r1
 800c342:	f340 82f1 	ble.w	800c928 <__ieee754_pow+0x988>
 800c346:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c34a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c34e:	4303      	orrs	r3, r0
 800c350:	f000 81e4 	beq.w	800c71c <__ieee754_pow+0x77c>
 800c354:	ec51 0b18 	vmov	r0, r1, d8
 800c358:	2200      	movs	r2, #0
 800c35a:	2300      	movs	r3, #0
 800c35c:	f7f4 fb6a 	bl	8000a34 <__aeabi_dcmplt>
 800c360:	3800      	subs	r0, #0
 800c362:	bf18      	it	ne
 800c364:	2001      	movne	r0, #1
 800c366:	e72b      	b.n	800c1c0 <__ieee754_pow+0x220>
 800c368:	60000000 	.word	0x60000000
 800c36c:	3ff71547 	.word	0x3ff71547
 800c370:	f85ddf44 	.word	0xf85ddf44
 800c374:	3e54ae0b 	.word	0x3e54ae0b
 800c378:	55555555 	.word	0x55555555
 800c37c:	3fd55555 	.word	0x3fd55555
 800c380:	652b82fe 	.word	0x652b82fe
 800c384:	3ff71547 	.word	0x3ff71547
 800c388:	00000000 	.word	0x00000000
 800c38c:	bff00000 	.word	0xbff00000
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	3fd00000 	.word	0x3fd00000
 800c398:	3fe00000 	.word	0x3fe00000
 800c39c:	408fffff 	.word	0x408fffff
 800c3a0:	4bd5      	ldr	r3, [pc, #852]	; (800c6f8 <__ieee754_pow+0x758>)
 800c3a2:	402b      	ands	r3, r5
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	b92b      	cbnz	r3, 800c3b4 <__ieee754_pow+0x414>
 800c3a8:	4bd4      	ldr	r3, [pc, #848]	; (800c6fc <__ieee754_pow+0x75c>)
 800c3aa:	f7f4 f8d1 	bl	8000550 <__aeabi_dmul>
 800c3ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	1523      	asrs	r3, r4, #20
 800c3b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3ba:	4413      	add	r3, r2
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	4bd0      	ldr	r3, [pc, #832]	; (800c700 <__ieee754_pow+0x760>)
 800c3c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c3c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c3ce:	dd08      	ble.n	800c3e2 <__ieee754_pow+0x442>
 800c3d0:	4bcc      	ldr	r3, [pc, #816]	; (800c704 <__ieee754_pow+0x764>)
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	f340 8162 	ble.w	800c69c <__ieee754_pow+0x6fc>
 800c3d8:	9b05      	ldr	r3, [sp, #20]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c3e2:	2400      	movs	r4, #0
 800c3e4:	00e3      	lsls	r3, r4, #3
 800c3e6:	9307      	str	r3, [sp, #28]
 800c3e8:	4bc7      	ldr	r3, [pc, #796]	; (800c708 <__ieee754_pow+0x768>)
 800c3ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3ee:	ed93 7b00 	vldr	d7, [r3]
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	ec53 2b17 	vmov	r2, r3, d7
 800c3f8:	eeb0 9a47 	vmov.f32	s18, s14
 800c3fc:	eef0 9a67 	vmov.f32	s19, s15
 800c400:	4682      	mov	sl, r0
 800c402:	f7f3 feed 	bl	80001e0 <__aeabi_dsub>
 800c406:	4652      	mov	r2, sl
 800c408:	4606      	mov	r6, r0
 800c40a:	460f      	mov	r7, r1
 800c40c:	462b      	mov	r3, r5
 800c40e:	ec51 0b19 	vmov	r0, r1, d9
 800c412:	f7f3 fee7 	bl	80001e4 <__adddf3>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	2000      	movs	r0, #0
 800c41c:	49bb      	ldr	r1, [pc, #748]	; (800c70c <__ieee754_pow+0x76c>)
 800c41e:	f7f4 f9c1 	bl	80007a4 <__aeabi_ddiv>
 800c422:	ec41 0b1a 	vmov	d10, r0, r1
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4630      	mov	r0, r6
 800c42c:	4639      	mov	r1, r7
 800c42e:	f7f4 f88f 	bl	8000550 <__aeabi_dmul>
 800c432:	2300      	movs	r3, #0
 800c434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c438:	9302      	str	r3, [sp, #8]
 800c43a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c43e:	46ab      	mov	fp, r5
 800c440:	106d      	asrs	r5, r5, #1
 800c442:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c446:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c44a:	ec41 0b18 	vmov	d8, r0, r1
 800c44e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c452:	2200      	movs	r2, #0
 800c454:	4640      	mov	r0, r8
 800c456:	4649      	mov	r1, r9
 800c458:	4614      	mov	r4, r2
 800c45a:	461d      	mov	r5, r3
 800c45c:	f7f4 f878 	bl	8000550 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f3 feba 	bl	80001e0 <__aeabi_dsub>
 800c46c:	ec53 2b19 	vmov	r2, r3, d9
 800c470:	4606      	mov	r6, r0
 800c472:	460f      	mov	r7, r1
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f3 feb2 	bl	80001e0 <__aeabi_dsub>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	4650      	mov	r0, sl
 800c482:	4659      	mov	r1, fp
 800c484:	f7f3 feac 	bl	80001e0 <__aeabi_dsub>
 800c488:	4642      	mov	r2, r8
 800c48a:	464b      	mov	r3, r9
 800c48c:	f7f4 f860 	bl	8000550 <__aeabi_dmul>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f7f3 fea2 	bl	80001e0 <__aeabi_dsub>
 800c49c:	ec53 2b1a 	vmov	r2, r3, d10
 800c4a0:	f7f4 f856 	bl	8000550 <__aeabi_dmul>
 800c4a4:	ec53 2b18 	vmov	r2, r3, d8
 800c4a8:	ec41 0b19 	vmov	d9, r0, r1
 800c4ac:	ec51 0b18 	vmov	r0, r1, d8
 800c4b0:	f7f4 f84e 	bl	8000550 <__aeabi_dmul>
 800c4b4:	a37c      	add	r3, pc, #496	; (adr r3, 800c6a8 <__ieee754_pow+0x708>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	460d      	mov	r5, r1
 800c4be:	f7f4 f847 	bl	8000550 <__aeabi_dmul>
 800c4c2:	a37b      	add	r3, pc, #492	; (adr r3, 800c6b0 <__ieee754_pow+0x710>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	f7f3 fe8c 	bl	80001e4 <__adddf3>
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	f7f4 f83e 	bl	8000550 <__aeabi_dmul>
 800c4d4:	a378      	add	r3, pc, #480	; (adr r3, 800c6b8 <__ieee754_pow+0x718>)
 800c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4da:	f7f3 fe83 	bl	80001e4 <__adddf3>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	f7f4 f835 	bl	8000550 <__aeabi_dmul>
 800c4e6:	a376      	add	r3, pc, #472	; (adr r3, 800c6c0 <__ieee754_pow+0x720>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 fe7a 	bl	80001e4 <__adddf3>
 800c4f0:	4622      	mov	r2, r4
 800c4f2:	462b      	mov	r3, r5
 800c4f4:	f7f4 f82c 	bl	8000550 <__aeabi_dmul>
 800c4f8:	a373      	add	r3, pc, #460	; (adr r3, 800c6c8 <__ieee754_pow+0x728>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f3 fe71 	bl	80001e4 <__adddf3>
 800c502:	4622      	mov	r2, r4
 800c504:	462b      	mov	r3, r5
 800c506:	f7f4 f823 	bl	8000550 <__aeabi_dmul>
 800c50a:	a371      	add	r3, pc, #452	; (adr r3, 800c6d0 <__ieee754_pow+0x730>)
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f3 fe68 	bl	80001e4 <__adddf3>
 800c514:	4622      	mov	r2, r4
 800c516:	4606      	mov	r6, r0
 800c518:	460f      	mov	r7, r1
 800c51a:	462b      	mov	r3, r5
 800c51c:	4620      	mov	r0, r4
 800c51e:	4629      	mov	r1, r5
 800c520:	f7f4 f816 	bl	8000550 <__aeabi_dmul>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	4630      	mov	r0, r6
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 f810 	bl	8000550 <__aeabi_dmul>
 800c530:	4642      	mov	r2, r8
 800c532:	4604      	mov	r4, r0
 800c534:	460d      	mov	r5, r1
 800c536:	464b      	mov	r3, r9
 800c538:	ec51 0b18 	vmov	r0, r1, d8
 800c53c:	f7f3 fe52 	bl	80001e4 <__adddf3>
 800c540:	ec53 2b19 	vmov	r2, r3, d9
 800c544:	f7f4 f804 	bl	8000550 <__aeabi_dmul>
 800c548:	4622      	mov	r2, r4
 800c54a:	462b      	mov	r3, r5
 800c54c:	f7f3 fe4a 	bl	80001e4 <__adddf3>
 800c550:	4642      	mov	r2, r8
 800c552:	4682      	mov	sl, r0
 800c554:	468b      	mov	fp, r1
 800c556:	464b      	mov	r3, r9
 800c558:	4640      	mov	r0, r8
 800c55a:	4649      	mov	r1, r9
 800c55c:	f7f3 fff8 	bl	8000550 <__aeabi_dmul>
 800c560:	4b6b      	ldr	r3, [pc, #428]	; (800c710 <__ieee754_pow+0x770>)
 800c562:	2200      	movs	r2, #0
 800c564:	4606      	mov	r6, r0
 800c566:	460f      	mov	r7, r1
 800c568:	f7f3 fe3c 	bl	80001e4 <__adddf3>
 800c56c:	4652      	mov	r2, sl
 800c56e:	465b      	mov	r3, fp
 800c570:	f7f3 fe38 	bl	80001e4 <__adddf3>
 800c574:	2000      	movs	r0, #0
 800c576:	4604      	mov	r4, r0
 800c578:	460d      	mov	r5, r1
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4640      	mov	r0, r8
 800c580:	4649      	mov	r1, r9
 800c582:	f7f3 ffe5 	bl	8000550 <__aeabi_dmul>
 800c586:	4b62      	ldr	r3, [pc, #392]	; (800c710 <__ieee754_pow+0x770>)
 800c588:	4680      	mov	r8, r0
 800c58a:	4689      	mov	r9, r1
 800c58c:	2200      	movs	r2, #0
 800c58e:	4620      	mov	r0, r4
 800c590:	4629      	mov	r1, r5
 800c592:	f7f3 fe25 	bl	80001e0 <__aeabi_dsub>
 800c596:	4632      	mov	r2, r6
 800c598:	463b      	mov	r3, r7
 800c59a:	f7f3 fe21 	bl	80001e0 <__aeabi_dsub>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	4659      	mov	r1, fp
 800c5a6:	f7f3 fe1b 	bl	80001e0 <__aeabi_dsub>
 800c5aa:	ec53 2b18 	vmov	r2, r3, d8
 800c5ae:	f7f3 ffcf 	bl	8000550 <__aeabi_dmul>
 800c5b2:	4622      	mov	r2, r4
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	ec51 0b19 	vmov	r0, r1, d9
 800c5be:	f7f3 ffc7 	bl	8000550 <__aeabi_dmul>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f3 fe0b 	bl	80001e4 <__adddf3>
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	4649      	mov	r1, r9
 800c5da:	f7f3 fe03 	bl	80001e4 <__adddf3>
 800c5de:	a33e      	add	r3, pc, #248	; (adr r3, 800c6d8 <__ieee754_pow+0x738>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	f7f3 ffb1 	bl	8000550 <__aeabi_dmul>
 800c5ee:	4642      	mov	r2, r8
 800c5f0:	ec41 0b18 	vmov	d8, r0, r1
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f7f3 fdf1 	bl	80001e0 <__aeabi_dsub>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f3 fdeb 	bl	80001e0 <__aeabi_dsub>
 800c60a:	a335      	add	r3, pc, #212	; (adr r3, 800c6e0 <__ieee754_pow+0x740>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f3 ff9e 	bl	8000550 <__aeabi_dmul>
 800c614:	a334      	add	r3, pc, #208	; (adr r3, 800c6e8 <__ieee754_pow+0x748>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	4606      	mov	r6, r0
 800c61c:	460f      	mov	r7, r1
 800c61e:	4620      	mov	r0, r4
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 ff95 	bl	8000550 <__aeabi_dmul>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4630      	mov	r0, r6
 800c62c:	4639      	mov	r1, r7
 800c62e:	f7f3 fdd9 	bl	80001e4 <__adddf3>
 800c632:	9a07      	ldr	r2, [sp, #28]
 800c634:	4b37      	ldr	r3, [pc, #220]	; (800c714 <__ieee754_pow+0x774>)
 800c636:	4413      	add	r3, r2
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	f7f3 fdd2 	bl	80001e4 <__adddf3>
 800c640:	4682      	mov	sl, r0
 800c642:	9805      	ldr	r0, [sp, #20]
 800c644:	468b      	mov	fp, r1
 800c646:	f7f3 ff19 	bl	800047c <__aeabi_i2d>
 800c64a:	9a07      	ldr	r2, [sp, #28]
 800c64c:	4b32      	ldr	r3, [pc, #200]	; (800c718 <__ieee754_pow+0x778>)
 800c64e:	4413      	add	r3, r2
 800c650:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	4652      	mov	r2, sl
 800c65a:	465b      	mov	r3, fp
 800c65c:	ec51 0b18 	vmov	r0, r1, d8
 800c660:	f7f3 fdc0 	bl	80001e4 <__adddf3>
 800c664:	4642      	mov	r2, r8
 800c666:	464b      	mov	r3, r9
 800c668:	f7f3 fdbc 	bl	80001e4 <__adddf3>
 800c66c:	4632      	mov	r2, r6
 800c66e:	463b      	mov	r3, r7
 800c670:	f7f3 fdb8 	bl	80001e4 <__adddf3>
 800c674:	2000      	movs	r0, #0
 800c676:	4632      	mov	r2, r6
 800c678:	463b      	mov	r3, r7
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	f7f3 fdaf 	bl	80001e0 <__aeabi_dsub>
 800c682:	4642      	mov	r2, r8
 800c684:	464b      	mov	r3, r9
 800c686:	f7f3 fdab 	bl	80001e0 <__aeabi_dsub>
 800c68a:	ec53 2b18 	vmov	r2, r3, d8
 800c68e:	f7f3 fda7 	bl	80001e0 <__aeabi_dsub>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4650      	mov	r0, sl
 800c698:	4659      	mov	r1, fp
 800c69a:	e610      	b.n	800c2be <__ieee754_pow+0x31e>
 800c69c:	2401      	movs	r4, #1
 800c69e:	e6a1      	b.n	800c3e4 <__ieee754_pow+0x444>
 800c6a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c6f0 <__ieee754_pow+0x750>
 800c6a4:	e617      	b.n	800c2d6 <__ieee754_pow+0x336>
 800c6a6:	bf00      	nop
 800c6a8:	4a454eef 	.word	0x4a454eef
 800c6ac:	3fca7e28 	.word	0x3fca7e28
 800c6b0:	93c9db65 	.word	0x93c9db65
 800c6b4:	3fcd864a 	.word	0x3fcd864a
 800c6b8:	a91d4101 	.word	0xa91d4101
 800c6bc:	3fd17460 	.word	0x3fd17460
 800c6c0:	518f264d 	.word	0x518f264d
 800c6c4:	3fd55555 	.word	0x3fd55555
 800c6c8:	db6fabff 	.word	0xdb6fabff
 800c6cc:	3fdb6db6 	.word	0x3fdb6db6
 800c6d0:	33333303 	.word	0x33333303
 800c6d4:	3fe33333 	.word	0x3fe33333
 800c6d8:	e0000000 	.word	0xe0000000
 800c6dc:	3feec709 	.word	0x3feec709
 800c6e0:	dc3a03fd 	.word	0xdc3a03fd
 800c6e4:	3feec709 	.word	0x3feec709
 800c6e8:	145b01f5 	.word	0x145b01f5
 800c6ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c6f0:	00000000 	.word	0x00000000
 800c6f4:	3ff00000 	.word	0x3ff00000
 800c6f8:	7ff00000 	.word	0x7ff00000
 800c6fc:	43400000 	.word	0x43400000
 800c700:	0003988e 	.word	0x0003988e
 800c704:	000bb679 	.word	0x000bb679
 800c708:	0800cd30 	.word	0x0800cd30
 800c70c:	3ff00000 	.word	0x3ff00000
 800c710:	40080000 	.word	0x40080000
 800c714:	0800cd50 	.word	0x0800cd50
 800c718:	0800cd40 	.word	0x0800cd40
 800c71c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c9f4 <__ieee754_pow+0xa54>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	4640      	mov	r0, r8
 800c724:	4649      	mov	r1, r9
 800c726:	f7f3 fd5d 	bl	80001e4 <__adddf3>
 800c72a:	4622      	mov	r2, r4
 800c72c:	ec41 0b1a 	vmov	d10, r0, r1
 800c730:	462b      	mov	r3, r5
 800c732:	4630      	mov	r0, r6
 800c734:	4639      	mov	r1, r7
 800c736:	f7f3 fd53 	bl	80001e0 <__aeabi_dsub>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	ec51 0b1a 	vmov	r0, r1, d10
 800c742:	f7f4 f995 	bl	8000a70 <__aeabi_dcmpgt>
 800c746:	2800      	cmp	r0, #0
 800c748:	f47f ae04 	bne.w	800c354 <__ieee754_pow+0x3b4>
 800c74c:	4aa4      	ldr	r2, [pc, #656]	; (800c9e0 <__ieee754_pow+0xa40>)
 800c74e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c752:	4293      	cmp	r3, r2
 800c754:	f340 8108 	ble.w	800c968 <__ieee754_pow+0x9c8>
 800c758:	151b      	asrs	r3, r3, #20
 800c75a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c75e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c762:	fa4a f303 	asr.w	r3, sl, r3
 800c766:	445b      	add	r3, fp
 800c768:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c76c:	4e9d      	ldr	r6, [pc, #628]	; (800c9e4 <__ieee754_pow+0xa44>)
 800c76e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c772:	4116      	asrs	r6, r2
 800c774:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c778:	2000      	movs	r0, #0
 800c77a:	ea23 0106 	bic.w	r1, r3, r6
 800c77e:	f1c2 0214 	rsb	r2, r2, #20
 800c782:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c786:	fa4a fa02 	asr.w	sl, sl, r2
 800c78a:	f1bb 0f00 	cmp.w	fp, #0
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4620      	mov	r0, r4
 800c794:	4629      	mov	r1, r5
 800c796:	bfb8      	it	lt
 800c798:	f1ca 0a00 	rsblt	sl, sl, #0
 800c79c:	f7f3 fd20 	bl	80001e0 <__aeabi_dsub>
 800c7a0:	ec41 0b19 	vmov	d9, r0, r1
 800c7a4:	4642      	mov	r2, r8
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	ec51 0b19 	vmov	r0, r1, d9
 800c7ac:	f7f3 fd1a 	bl	80001e4 <__adddf3>
 800c7b0:	a37b      	add	r3, pc, #492	; (adr r3, 800c9a0 <__ieee754_pow+0xa00>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	f7f3 fec8 	bl	8000550 <__aeabi_dmul>
 800c7c0:	ec53 2b19 	vmov	r2, r3, d9
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	460f      	mov	r7, r1
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	f7f3 fd08 	bl	80001e0 <__aeabi_dsub>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f3 fd02 	bl	80001e0 <__aeabi_dsub>
 800c7dc:	a372      	add	r3, pc, #456	; (adr r3, 800c9a8 <__ieee754_pow+0xa08>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7f3 feb5 	bl	8000550 <__aeabi_dmul>
 800c7e6:	a372      	add	r3, pc, #456	; (adr r3, 800c9b0 <__ieee754_pow+0xa10>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	4689      	mov	r9, r1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 feac 	bl	8000550 <__aeabi_dmul>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	4649      	mov	r1, r9
 800c800:	f7f3 fcf0 	bl	80001e4 <__adddf3>
 800c804:	4604      	mov	r4, r0
 800c806:	460d      	mov	r5, r1
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	f7f3 fce8 	bl	80001e4 <__adddf3>
 800c814:	4632      	mov	r2, r6
 800c816:	463b      	mov	r3, r7
 800c818:	4680      	mov	r8, r0
 800c81a:	4689      	mov	r9, r1
 800c81c:	f7f3 fce0 	bl	80001e0 <__aeabi_dsub>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4620      	mov	r0, r4
 800c826:	4629      	mov	r1, r5
 800c828:	f7f3 fcda 	bl	80001e0 <__aeabi_dsub>
 800c82c:	4642      	mov	r2, r8
 800c82e:	4606      	mov	r6, r0
 800c830:	460f      	mov	r7, r1
 800c832:	464b      	mov	r3, r9
 800c834:	4640      	mov	r0, r8
 800c836:	4649      	mov	r1, r9
 800c838:	f7f3 fe8a 	bl	8000550 <__aeabi_dmul>
 800c83c:	a35e      	add	r3, pc, #376	; (adr r3, 800c9b8 <__ieee754_pow+0xa18>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	4604      	mov	r4, r0
 800c844:	460d      	mov	r5, r1
 800c846:	f7f3 fe83 	bl	8000550 <__aeabi_dmul>
 800c84a:	a35d      	add	r3, pc, #372	; (adr r3, 800c9c0 <__ieee754_pow+0xa20>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fcc6 	bl	80001e0 <__aeabi_dsub>
 800c854:	4622      	mov	r2, r4
 800c856:	462b      	mov	r3, r5
 800c858:	f7f3 fe7a 	bl	8000550 <__aeabi_dmul>
 800c85c:	a35a      	add	r3, pc, #360	; (adr r3, 800c9c8 <__ieee754_pow+0xa28>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	f7f3 fcbf 	bl	80001e4 <__adddf3>
 800c866:	4622      	mov	r2, r4
 800c868:	462b      	mov	r3, r5
 800c86a:	f7f3 fe71 	bl	8000550 <__aeabi_dmul>
 800c86e:	a358      	add	r3, pc, #352	; (adr r3, 800c9d0 <__ieee754_pow+0xa30>)
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f7f3 fcb4 	bl	80001e0 <__aeabi_dsub>
 800c878:	4622      	mov	r2, r4
 800c87a:	462b      	mov	r3, r5
 800c87c:	f7f3 fe68 	bl	8000550 <__aeabi_dmul>
 800c880:	a355      	add	r3, pc, #340	; (adr r3, 800c9d8 <__ieee754_pow+0xa38>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fcad 	bl	80001e4 <__adddf3>
 800c88a:	4622      	mov	r2, r4
 800c88c:	462b      	mov	r3, r5
 800c88e:	f7f3 fe5f 	bl	8000550 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4640      	mov	r0, r8
 800c898:	4649      	mov	r1, r9
 800c89a:	f7f3 fca1 	bl	80001e0 <__aeabi_dsub>
 800c89e:	4604      	mov	r4, r0
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fe51 	bl	8000550 <__aeabi_dmul>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	ec41 0b19 	vmov	d9, r0, r1
 800c8b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fc90 	bl	80001e0 <__aeabi_dsub>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	ec51 0b19 	vmov	r0, r1, d9
 800c8c8:	f7f3 ff6c 	bl	80007a4 <__aeabi_ddiv>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	460d      	mov	r5, r1
 800c8d2:	463b      	mov	r3, r7
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	f7f3 fe3a 	bl	8000550 <__aeabi_dmul>
 800c8dc:	4632      	mov	r2, r6
 800c8de:	463b      	mov	r3, r7
 800c8e0:	f7f3 fc80 	bl	80001e4 <__adddf3>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	f7f3 fc78 	bl	80001e0 <__aeabi_dsub>
 800c8f0:	4642      	mov	r2, r8
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	f7f3 fc74 	bl	80001e0 <__aeabi_dsub>
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	493a      	ldr	r1, [pc, #232]	; (800c9e8 <__ieee754_pow+0xa48>)
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7f3 fc6e 	bl	80001e0 <__aeabi_dsub>
 800c904:	ec41 0b10 	vmov	d0, r0, r1
 800c908:	ee10 3a90 	vmov	r3, s1
 800c90c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c914:	da2b      	bge.n	800c96e <__ieee754_pow+0x9ce>
 800c916:	4650      	mov	r0, sl
 800c918:	f000 f966 	bl	800cbe8 <scalbn>
 800c91c:	ec51 0b10 	vmov	r0, r1, d0
 800c920:	ec53 2b18 	vmov	r2, r3, d8
 800c924:	f7ff bbed 	b.w	800c102 <__ieee754_pow+0x162>
 800c928:	4b30      	ldr	r3, [pc, #192]	; (800c9ec <__ieee754_pow+0xa4c>)
 800c92a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c92e:	429e      	cmp	r6, r3
 800c930:	f77f af0c 	ble.w	800c74c <__ieee754_pow+0x7ac>
 800c934:	4b2e      	ldr	r3, [pc, #184]	; (800c9f0 <__ieee754_pow+0xa50>)
 800c936:	440b      	add	r3, r1
 800c938:	4303      	orrs	r3, r0
 800c93a:	d009      	beq.n	800c950 <__ieee754_pow+0x9b0>
 800c93c:	ec51 0b18 	vmov	r0, r1, d8
 800c940:	2200      	movs	r2, #0
 800c942:	2300      	movs	r3, #0
 800c944:	f7f4 f876 	bl	8000a34 <__aeabi_dcmplt>
 800c948:	3800      	subs	r0, #0
 800c94a:	bf18      	it	ne
 800c94c:	2001      	movne	r0, #1
 800c94e:	e447      	b.n	800c1e0 <__ieee754_pow+0x240>
 800c950:	4622      	mov	r2, r4
 800c952:	462b      	mov	r3, r5
 800c954:	f7f3 fc44 	bl	80001e0 <__aeabi_dsub>
 800c958:	4642      	mov	r2, r8
 800c95a:	464b      	mov	r3, r9
 800c95c:	f7f4 f87e 	bl	8000a5c <__aeabi_dcmpge>
 800c960:	2800      	cmp	r0, #0
 800c962:	f43f aef3 	beq.w	800c74c <__ieee754_pow+0x7ac>
 800c966:	e7e9      	b.n	800c93c <__ieee754_pow+0x99c>
 800c968:	f04f 0a00 	mov.w	sl, #0
 800c96c:	e71a      	b.n	800c7a4 <__ieee754_pow+0x804>
 800c96e:	ec51 0b10 	vmov	r0, r1, d0
 800c972:	4619      	mov	r1, r3
 800c974:	e7d4      	b.n	800c920 <__ieee754_pow+0x980>
 800c976:	491c      	ldr	r1, [pc, #112]	; (800c9e8 <__ieee754_pow+0xa48>)
 800c978:	2000      	movs	r0, #0
 800c97a:	f7ff bb30 	b.w	800bfde <__ieee754_pow+0x3e>
 800c97e:	2000      	movs	r0, #0
 800c980:	2100      	movs	r1, #0
 800c982:	f7ff bb2c 	b.w	800bfde <__ieee754_pow+0x3e>
 800c986:	4630      	mov	r0, r6
 800c988:	4639      	mov	r1, r7
 800c98a:	f7ff bb28 	b.w	800bfde <__ieee754_pow+0x3e>
 800c98e:	9204      	str	r2, [sp, #16]
 800c990:	f7ff bb7a 	b.w	800c088 <__ieee754_pow+0xe8>
 800c994:	2300      	movs	r3, #0
 800c996:	f7ff bb64 	b.w	800c062 <__ieee754_pow+0xc2>
 800c99a:	bf00      	nop
 800c99c:	f3af 8000 	nop.w
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	3fe62e43 	.word	0x3fe62e43
 800c9a8:	fefa39ef 	.word	0xfefa39ef
 800c9ac:	3fe62e42 	.word	0x3fe62e42
 800c9b0:	0ca86c39 	.word	0x0ca86c39
 800c9b4:	be205c61 	.word	0xbe205c61
 800c9b8:	72bea4d0 	.word	0x72bea4d0
 800c9bc:	3e663769 	.word	0x3e663769
 800c9c0:	c5d26bf1 	.word	0xc5d26bf1
 800c9c4:	3ebbbd41 	.word	0x3ebbbd41
 800c9c8:	af25de2c 	.word	0xaf25de2c
 800c9cc:	3f11566a 	.word	0x3f11566a
 800c9d0:	16bebd93 	.word	0x16bebd93
 800c9d4:	3f66c16c 	.word	0x3f66c16c
 800c9d8:	5555553e 	.word	0x5555553e
 800c9dc:	3fc55555 	.word	0x3fc55555
 800c9e0:	3fe00000 	.word	0x3fe00000
 800c9e4:	000fffff 	.word	0x000fffff
 800c9e8:	3ff00000 	.word	0x3ff00000
 800c9ec:	4090cbff 	.word	0x4090cbff
 800c9f0:	3f6f3400 	.word	0x3f6f3400
 800c9f4:	652b82fe 	.word	0x652b82fe
 800c9f8:	3c971547 	.word	0x3c971547

0800c9fc <__ieee754_sqrt>:
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	ec55 4b10 	vmov	r4, r5, d0
 800ca04:	4e55      	ldr	r6, [pc, #340]	; (800cb5c <__ieee754_sqrt+0x160>)
 800ca06:	43ae      	bics	r6, r5
 800ca08:	ee10 0a10 	vmov	r0, s0
 800ca0c:	ee10 3a10 	vmov	r3, s0
 800ca10:	462a      	mov	r2, r5
 800ca12:	4629      	mov	r1, r5
 800ca14:	d110      	bne.n	800ca38 <__ieee754_sqrt+0x3c>
 800ca16:	ee10 2a10 	vmov	r2, s0
 800ca1a:	462b      	mov	r3, r5
 800ca1c:	f7f3 fd98 	bl	8000550 <__aeabi_dmul>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fbdc 	bl	80001e4 <__adddf3>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	460d      	mov	r5, r1
 800ca30:	ec45 4b10 	vmov	d0, r4, r5
 800ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca38:	2d00      	cmp	r5, #0
 800ca3a:	dc10      	bgt.n	800ca5e <__ieee754_sqrt+0x62>
 800ca3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca40:	4330      	orrs	r0, r6
 800ca42:	d0f5      	beq.n	800ca30 <__ieee754_sqrt+0x34>
 800ca44:	b15d      	cbz	r5, 800ca5e <__ieee754_sqrt+0x62>
 800ca46:	ee10 2a10 	vmov	r2, s0
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	ee10 0a10 	vmov	r0, s0
 800ca50:	f7f3 fbc6 	bl	80001e0 <__aeabi_dsub>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	f7f3 fea4 	bl	80007a4 <__aeabi_ddiv>
 800ca5c:	e7e6      	b.n	800ca2c <__ieee754_sqrt+0x30>
 800ca5e:	1512      	asrs	r2, r2, #20
 800ca60:	d074      	beq.n	800cb4c <__ieee754_sqrt+0x150>
 800ca62:	07d4      	lsls	r4, r2, #31
 800ca64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ca68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ca6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca70:	bf5e      	ittt	pl
 800ca72:	0fda      	lsrpl	r2, r3, #31
 800ca74:	005b      	lslpl	r3, r3, #1
 800ca76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ca7a:	2400      	movs	r4, #0
 800ca7c:	0fda      	lsrs	r2, r3, #31
 800ca7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ca82:	107f      	asrs	r7, r7, #1
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	2516      	movs	r5, #22
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ca8e:	1886      	adds	r6, r0, r2
 800ca90:	428e      	cmp	r6, r1
 800ca92:	bfde      	ittt	le
 800ca94:	1b89      	suble	r1, r1, r6
 800ca96:	18b0      	addle	r0, r6, r2
 800ca98:	18a4      	addle	r4, r4, r2
 800ca9a:	0049      	lsls	r1, r1, #1
 800ca9c:	3d01      	subs	r5, #1
 800ca9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800caa2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800caa6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caaa:	d1f0      	bne.n	800ca8e <__ieee754_sqrt+0x92>
 800caac:	462a      	mov	r2, r5
 800caae:	f04f 0e20 	mov.w	lr, #32
 800cab2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cab6:	4281      	cmp	r1, r0
 800cab8:	eb06 0c05 	add.w	ip, r6, r5
 800cabc:	dc02      	bgt.n	800cac4 <__ieee754_sqrt+0xc8>
 800cabe:	d113      	bne.n	800cae8 <__ieee754_sqrt+0xec>
 800cac0:	459c      	cmp	ip, r3
 800cac2:	d811      	bhi.n	800cae8 <__ieee754_sqrt+0xec>
 800cac4:	f1bc 0f00 	cmp.w	ip, #0
 800cac8:	eb0c 0506 	add.w	r5, ip, r6
 800cacc:	da43      	bge.n	800cb56 <__ieee754_sqrt+0x15a>
 800cace:	2d00      	cmp	r5, #0
 800cad0:	db41      	blt.n	800cb56 <__ieee754_sqrt+0x15a>
 800cad2:	f100 0801 	add.w	r8, r0, #1
 800cad6:	1a09      	subs	r1, r1, r0
 800cad8:	459c      	cmp	ip, r3
 800cada:	bf88      	it	hi
 800cadc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cae0:	eba3 030c 	sub.w	r3, r3, ip
 800cae4:	4432      	add	r2, r6
 800cae6:	4640      	mov	r0, r8
 800cae8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800caec:	f1be 0e01 	subs.w	lr, lr, #1
 800caf0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800caf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cafc:	d1db      	bne.n	800cab6 <__ieee754_sqrt+0xba>
 800cafe:	430b      	orrs	r3, r1
 800cb00:	d006      	beq.n	800cb10 <__ieee754_sqrt+0x114>
 800cb02:	1c50      	adds	r0, r2, #1
 800cb04:	bf13      	iteet	ne
 800cb06:	3201      	addne	r2, #1
 800cb08:	3401      	addeq	r4, #1
 800cb0a:	4672      	moveq	r2, lr
 800cb0c:	f022 0201 	bicne.w	r2, r2, #1
 800cb10:	1063      	asrs	r3, r4, #1
 800cb12:	0852      	lsrs	r2, r2, #1
 800cb14:	07e1      	lsls	r1, r4, #31
 800cb16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cb1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cb1e:	bf48      	it	mi
 800cb20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cb24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cb28:	4614      	mov	r4, r2
 800cb2a:	e781      	b.n	800ca30 <__ieee754_sqrt+0x34>
 800cb2c:	0ad9      	lsrs	r1, r3, #11
 800cb2e:	3815      	subs	r0, #21
 800cb30:	055b      	lsls	r3, r3, #21
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d0fa      	beq.n	800cb2c <__ieee754_sqrt+0x130>
 800cb36:	02cd      	lsls	r5, r1, #11
 800cb38:	d50a      	bpl.n	800cb50 <__ieee754_sqrt+0x154>
 800cb3a:	f1c2 0420 	rsb	r4, r2, #32
 800cb3e:	fa23 f404 	lsr.w	r4, r3, r4
 800cb42:	1e55      	subs	r5, r2, #1
 800cb44:	4093      	lsls	r3, r2
 800cb46:	4321      	orrs	r1, r4
 800cb48:	1b42      	subs	r2, r0, r5
 800cb4a:	e78a      	b.n	800ca62 <__ieee754_sqrt+0x66>
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	e7f0      	b.n	800cb32 <__ieee754_sqrt+0x136>
 800cb50:	0049      	lsls	r1, r1, #1
 800cb52:	3201      	adds	r2, #1
 800cb54:	e7ef      	b.n	800cb36 <__ieee754_sqrt+0x13a>
 800cb56:	4680      	mov	r8, r0
 800cb58:	e7bd      	b.n	800cad6 <__ieee754_sqrt+0xda>
 800cb5a:	bf00      	nop
 800cb5c:	7ff00000 	.word	0x7ff00000

0800cb60 <with_errno>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	4616      	mov	r6, r2
 800cb68:	f7ff f8c8 	bl	800bcfc <__errno>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	6006      	str	r6, [r0, #0]
 800cb70:	4620      	mov	r0, r4
 800cb72:	bd70      	pop	{r4, r5, r6, pc}

0800cb74 <xflow>:
 800cb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb76:	4614      	mov	r4, r2
 800cb78:	461d      	mov	r5, r3
 800cb7a:	b108      	cbz	r0, 800cb80 <xflow+0xc>
 800cb7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb80:	e9cd 2300 	strd	r2, r3, [sp]
 800cb84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f7f3 fce0 	bl	8000550 <__aeabi_dmul>
 800cb90:	2222      	movs	r2, #34	; 0x22
 800cb92:	b003      	add	sp, #12
 800cb94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb98:	f7ff bfe2 	b.w	800cb60 <with_errno>

0800cb9c <__math_uflow>:
 800cb9c:	b508      	push	{r3, lr}
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cba4:	f7ff ffe6 	bl	800cb74 <xflow>
 800cba8:	ec41 0b10 	vmov	d0, r0, r1
 800cbac:	bd08      	pop	{r3, pc}

0800cbae <__math_oflow>:
 800cbae:	b508      	push	{r3, lr}
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cbb6:	f7ff ffdd 	bl	800cb74 <xflow>
 800cbba:	ec41 0b10 	vmov	d0, r0, r1
 800cbbe:	bd08      	pop	{r3, pc}

0800cbc0 <fabs>:
 800cbc0:	ec51 0b10 	vmov	r0, r1, d0
 800cbc4:	ee10 2a10 	vmov	r2, s0
 800cbc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbcc:	ec43 2b10 	vmov	d0, r2, r3
 800cbd0:	4770      	bx	lr

0800cbd2 <finite>:
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	ed8d 0b00 	vstr	d0, [sp]
 800cbd8:	9801      	ldr	r0, [sp, #4]
 800cbda:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cbde:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cbe2:	0fc0      	lsrs	r0, r0, #31
 800cbe4:	b002      	add	sp, #8
 800cbe6:	4770      	bx	lr

0800cbe8 <scalbn>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	ec55 4b10 	vmov	r4, r5, d0
 800cbee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	b99a      	cbnz	r2, 800cc20 <scalbn+0x38>
 800cbf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbfc:	4323      	orrs	r3, r4
 800cbfe:	d036      	beq.n	800cc6e <scalbn+0x86>
 800cc00:	4b39      	ldr	r3, [pc, #228]	; (800cce8 <scalbn+0x100>)
 800cc02:	4629      	mov	r1, r5
 800cc04:	ee10 0a10 	vmov	r0, s0
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f7f3 fca1 	bl	8000550 <__aeabi_dmul>
 800cc0e:	4b37      	ldr	r3, [pc, #220]	; (800ccec <scalbn+0x104>)
 800cc10:	429e      	cmp	r6, r3
 800cc12:	4604      	mov	r4, r0
 800cc14:	460d      	mov	r5, r1
 800cc16:	da10      	bge.n	800cc3a <scalbn+0x52>
 800cc18:	a32b      	add	r3, pc, #172	; (adr r3, 800ccc8 <scalbn+0xe0>)
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	e03a      	b.n	800cc96 <scalbn+0xae>
 800cc20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cc24:	428a      	cmp	r2, r1
 800cc26:	d10c      	bne.n	800cc42 <scalbn+0x5a>
 800cc28:	ee10 2a10 	vmov	r2, s0
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	f7f3 fad8 	bl	80001e4 <__adddf3>
 800cc34:	4604      	mov	r4, r0
 800cc36:	460d      	mov	r5, r1
 800cc38:	e019      	b.n	800cc6e <scalbn+0x86>
 800cc3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc3e:	460b      	mov	r3, r1
 800cc40:	3a36      	subs	r2, #54	; 0x36
 800cc42:	4432      	add	r2, r6
 800cc44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc48:	428a      	cmp	r2, r1
 800cc4a:	dd08      	ble.n	800cc5e <scalbn+0x76>
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	a120      	add	r1, pc, #128	; (adr r1, 800ccd0 <scalbn+0xe8>)
 800cc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc54:	da1c      	bge.n	800cc90 <scalbn+0xa8>
 800cc56:	a120      	add	r1, pc, #128	; (adr r1, 800ccd8 <scalbn+0xf0>)
 800cc58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc5c:	e018      	b.n	800cc90 <scalbn+0xa8>
 800cc5e:	2a00      	cmp	r2, #0
 800cc60:	dd08      	ble.n	800cc74 <scalbn+0x8c>
 800cc62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc6e:	ec45 4b10 	vmov	d0, r4, r5
 800cc72:	bd70      	pop	{r4, r5, r6, pc}
 800cc74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc78:	da19      	bge.n	800ccae <scalbn+0xc6>
 800cc7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc7e:	429e      	cmp	r6, r3
 800cc80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cc84:	dd0a      	ble.n	800cc9c <scalbn+0xb4>
 800cc86:	a112      	add	r1, pc, #72	; (adr r1, 800ccd0 <scalbn+0xe8>)
 800cc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1e2      	bne.n	800cc56 <scalbn+0x6e>
 800cc90:	a30f      	add	r3, pc, #60	; (adr r3, 800ccd0 <scalbn+0xe8>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 fc5b 	bl	8000550 <__aeabi_dmul>
 800cc9a:	e7cb      	b.n	800cc34 <scalbn+0x4c>
 800cc9c:	a10a      	add	r1, pc, #40	; (adr r1, 800ccc8 <scalbn+0xe0>)
 800cc9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0b8      	beq.n	800cc18 <scalbn+0x30>
 800cca6:	a10e      	add	r1, pc, #56	; (adr r1, 800cce0 <scalbn+0xf8>)
 800cca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccac:	e7b4      	b.n	800cc18 <scalbn+0x30>
 800ccae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccb2:	3236      	adds	r2, #54	; 0x36
 800ccb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <scalbn+0x108>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	e7e8      	b.n	800cc96 <scalbn+0xae>
 800ccc4:	f3af 8000 	nop.w
 800ccc8:	c2f8f359 	.word	0xc2f8f359
 800cccc:	01a56e1f 	.word	0x01a56e1f
 800ccd0:	8800759c 	.word	0x8800759c
 800ccd4:	7e37e43c 	.word	0x7e37e43c
 800ccd8:	8800759c 	.word	0x8800759c
 800ccdc:	fe37e43c 	.word	0xfe37e43c
 800cce0:	c2f8f359 	.word	0xc2f8f359
 800cce4:	81a56e1f 	.word	0x81a56e1f
 800cce8:	43500000 	.word	0x43500000
 800ccec:	ffff3cb0 	.word	0xffff3cb0
 800ccf0:	3c900000 	.word	0x3c900000

0800ccf4 <_init>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	bf00      	nop
 800ccf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfa:	bc08      	pop	{r3}
 800ccfc:	469e      	mov	lr, r3
 800ccfe:	4770      	bx	lr

0800cd00 <_fini>:
 800cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd02:	bf00      	nop
 800cd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd06:	bc08      	pop	{r3}
 800cd08:	469e      	mov	lr, r3
 800cd0a:	4770      	bx	lr
